{"version":3,"file":"288594faa4f4df84db7f04ec3315d48a3b666501-1a88534c77c765e89f71.js","mappings":"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","sources":["webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack://nivo-website/../src/props.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://nivo-website/../src/hooks.js","webpack://nivo-website/../src/HeatMapCells.js","webpack://nivo-website/../src/HeatMapCellRect.js","webpack://nivo-website/../src/HeatMapCellCircle.js","webpack://nivo-website/../src/HeatMapCellTooltip.js","webpack://nivo-website/../src/HeatMap.js","webpack://nivo-website/../src/canvas.js","webpack://nivo-website/../src/HeatMapCanvas.js","webpack://nivo-website/../src/ResponsiveHeatMap.js","webpack://nivo-website/../src/ResponsiveHeatMapCanvas.js"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { quantizeColorScalePropType, noop } from '@nivo/core'\nimport { inheritedColorPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\n\nexport const HeatMapPropTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    indexBy: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    keys: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    minValue: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n    maxValue: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n\n    forceSquare: PropTypes.bool.isRequired,\n    sizeVariation: PropTypes.number.isRequired,\n    padding: PropTypes.number.isRequired,\n\n    cellShape: PropTypes.oneOfType([PropTypes.oneOf(['rect', 'circle']), PropTypes.func])\n        .isRequired,\n    cellOpacity: PropTypes.number.isRequired,\n    cellBorderWidth: PropTypes.number.isRequired,\n    cellBorderColor: inheritedColorPropType.isRequired,\n\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n\n    enableLabels: PropTypes.bool.isRequired,\n    label: PropTypes.func.isRequired,\n    labelTextColor: inheritedColorPropType.isRequired,\n\n    colors: quantizeColorScalePropType.isRequired,\n    nanColor: PropTypes.string,\n\n    isInteractive: PropTypes.bool,\n    onClick: PropTypes.func.isRequired,\n    hoverTarget: PropTypes.oneOf(['cell', 'row', 'column', 'rowColumn']).isRequired,\n    cellHoverOpacity: PropTypes.number.isRequired,\n    cellHoverOthersOpacity: PropTypes.number.isRequired,\n    tooltipFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    tooltip: PropTypes.func,\n\n    pixelRatio: PropTypes.number.isRequired,\n}\n\nexport const HeatMapSvgPropTypes = {\n    ...HeatMapPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const HeatMapDefaultProps = {\n    indexBy: 'id',\n\n    minValue: 'auto',\n    maxValue: 'auto',\n\n    forceSquare: false,\n    sizeVariation: 0,\n    padding: 0,\n\n    // cells\n    cellShape: 'rect',\n    cellOpacity: 0.85,\n    cellBorderWidth: 0,\n    cellBorderColor: { from: 'color' },\n\n    // axes & grid\n    axisTop: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: false,\n\n    // labels\n    enableLabels: true,\n    label: (datum, key) => datum[key],\n    labelTextColor: { from: 'color', modifiers: [['darker', 1.4]] },\n\n    // theming\n    colors: 'nivo',\n    nanColor: '#000000',\n\n    // interactivity\n    isInteractive: true,\n    onClick: noop,\n    hoverTarget: 'rowColumn',\n    cellHoverOpacity: 1,\n    cellHoverOthersOpacity: 0.35,\n\n    // canvas specific\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n\nexport const HeatMapSvgDefaultProps = {\n    ...HeatMapDefaultProps,\n    role: 'img',\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { useState, useMemo } from 'react'\nimport { scaleOrdinal, scaleLinear } from 'd3-scale'\nimport {\n    useTheme,\n    usePropertyAccessor,\n    guessQuantizeColorScale,\n    getLabelGenerator,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\n\nconst computeX = (column, cellWidth, padding) => {\n    return column * cellWidth + cellWidth * 0.5 + padding * column + padding\n}\nconst computeY = (row, cellHeight, padding) => {\n    return row * cellHeight + cellHeight * 0.5 + padding * row + padding\n}\n\nconst isHoverTargetByType = {\n    cell: (cell, current) => cell.xKey === current.xKey && cell.yKey === current.yKey,\n    row: (cell, current) => cell.yKey === current.yKey,\n    column: (cell, current) => cell.xKey === current.xKey,\n    rowColumn: (cell, current) => cell.xKey === current.xKey || cell.yKey === current.yKey,\n}\n\nconst computeCells = ({\n    data,\n    keys,\n    getIndex,\n    xScale,\n    yScale,\n    sizeScale,\n    cellOpacity,\n    cellWidth,\n    cellHeight,\n    colorScale,\n    nanColor,\n    getLabel,\n    getLabelTextColor,\n}) => {\n    const cells = []\n    data.forEach(datum => {\n        keys.forEach(key => {\n            const value = datum[key]\n            const label = getLabel(datum, key)\n            const index = getIndex(datum)\n            const sizeMultiplier = sizeScale ? sizeScale(value) : 1\n            const width = sizeMultiplier * cellWidth\n            const height = sizeMultiplier * cellHeight\n\n            const cell = {\n                id: `${key}.${index}`,\n                xKey: key,\n                yKey: index,\n                x: xScale(key),\n                y: yScale(index),\n                width,\n                height,\n                value,\n                label,\n                color: isNaN(value) ? nanColor : colorScale(value),\n                opacity: cellOpacity,\n            }\n            cell.labelTextColor = getLabelTextColor(cell)\n\n            cells.push(cell)\n        })\n    })\n\n    return cells\n}\n\nexport const useHeatMap = ({\n    data,\n    keys,\n    indexBy,\n    minValue: _minValue = 'auto',\n    maxValue: _maxValue = 'auto',\n    width,\n    height,\n    padding,\n    forceSquare,\n    sizeVariation,\n    colors,\n    nanColor,\n    cellOpacity,\n    cellBorderColor,\n    label,\n    labelTextColor,\n    hoverTarget,\n    cellHoverOpacity,\n    cellHoverOthersOpacity,\n}) => {\n    const [currentCellId, setCurrentCellId] = useState(null)\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const indices = useMemo(() => data.map(getIndex), [data, getIndex])\n    const getLabel = useMemo(() => getLabelGenerator(label), [label])\n\n    const layoutConfig = useMemo(() => {\n        const columns = keys.length\n        const rows = data.length\n\n        let cellWidth = Math.max((width - padding * (columns + 1)) / columns, 0)\n        let cellHeight = Math.max((height - padding * (rows + 1)) / rows, 0)\n\n        let offsetX = 0\n        let offsetY = 0\n        if (forceSquare === true) {\n            const cellSize = Math.min(cellWidth, cellHeight)\n            cellWidth = cellSize\n            cellHeight = cellSize\n\n            offsetX = (width - ((cellWidth + padding) * columns + padding)) / 2\n            offsetY = (height - ((cellHeight + padding) * rows + padding)) / 2\n        }\n\n        return {\n            cellWidth,\n            cellHeight,\n            offsetX,\n            offsetY,\n        }\n    }, [data, keys, width, height, padding, forceSquare])\n\n    const scales = useMemo(() => {\n        return {\n            x: scaleOrdinal(\n                keys.map((key, i) => computeX(i, layoutConfig.cellWidth, padding))\n            ).domain(keys),\n            y: scaleOrdinal(\n                indices.map((d, i) => computeY(i, layoutConfig.cellHeight, padding))\n            ).domain(indices),\n        }\n    }, [indices, keys, layoutConfig, padding])\n\n    const values = useMemo(() => {\n        let minValue = _minValue\n        let maxValue = _maxValue\n        if (minValue === 'auto' || maxValue === 'auto') {\n            const allValues = data.reduce((acc, row) => acc.concat(keys.map(key => row[key])), [])\n\n            if (minValue === 'auto') minValue = Math.min(...allValues)\n            if (maxValue === 'auto') maxValue = Math.max(...allValues)\n        }\n\n        return {\n            min: Math.min(minValue, maxValue),\n            max: Math.max(maxValue, minValue),\n        }\n    }, [data, keys, _minValue, _maxValue])\n\n    const sizeScale = useMemo(() => {\n        if (sizeVariation > 0) {\n            return scaleLinear()\n                .range([1 - sizeVariation, 1])\n                .domain([values.min, values.max])\n        }\n    }, [sizeVariation, values])\n\n    const colorScale = useMemo(\n        () => guessQuantizeColorScale(colors).domain([values.min, values.max]),\n        [colors, values]\n    )\n    const theme = useTheme()\n    const getCellBorderColor = useInheritedColor(cellBorderColor, theme)\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n\n    const cells = useMemo(\n        () =>\n            computeCells({\n                data,\n                keys,\n                getIndex,\n                xScale: scales.x,\n                yScale: scales.y,\n                sizeScale,\n                cellOpacity,\n                cellWidth: layoutConfig.cellWidth,\n                cellHeight: layoutConfig.cellHeight,\n                colorScale,\n                nanColor,\n                getLabel,\n                getLabelTextColor,\n            }),\n        [\n            data,\n            keys,\n            getIndex,\n            scales,\n            sizeScale,\n            cellOpacity,\n            layoutConfig,\n            colorScale,\n            nanColor,\n            getLabel,\n            getLabelTextColor,\n        ]\n    )\n\n    const cellsWithCurrent = useMemo(() => {\n        if (currentCellId === null) return cells\n\n        const isHoverTarget = isHoverTargetByType[hoverTarget]\n        const currentCell = cells.find(cell => cell.id === currentCellId)\n\n        return cells.map(cell => {\n            const opacity = isHoverTarget(cell, currentCell)\n                ? cellHoverOpacity\n                : cellHoverOthersOpacity\n\n            if (opacity === cell.opacity) return cell\n\n            return {\n                ...cell,\n                opacity,\n            }\n        })\n    }, [cells, currentCellId, hoverTarget, cellHoverOpacity, cellHoverOthersOpacity])\n\n    return {\n        cells: cellsWithCurrent,\n        getIndex,\n        xScale: scales.x,\n        yScale: scales.y,\n        ...layoutConfig,\n        sizeScale,\n        currentCellId,\n        setCurrentCellId,\n        colorScale,\n        getCellBorderColor,\n        getLabelTextColor,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement } from 'react'\n\nconst HeatMapCells = ({\n    cells,\n    cellComponent,\n    cellBorderWidth,\n    getCellBorderColor,\n    enableLabels,\n    getLabelTextColor,\n    handleCellHover,\n    handleCellLeave,\n    onClick,\n}) => {\n    return cells.map(cell =>\n        createElement(cellComponent, {\n            key: cell.id,\n            data: cell,\n            label: cell.label,\n            x: cell.x,\n            y: cell.y,\n            width: cell.width,\n            height: cell.height,\n            color: cell.color,\n            opacity: cell.opacity,\n            borderWidth: cellBorderWidth,\n            borderColor: getCellBorderColor(cell),\n            enableLabel: enableLabels,\n            textColor: getLabelTextColor(cell),\n            onHover: handleCellHover ? event => handleCellHover(cell, event) : undefined,\n            onLeave: handleCellLeave,\n            onClick,\n        })\n    )\n}\n\nHeatMapCells.propTypes = {}\n\nexport default HeatMapCells\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nconst HeatMapCellRect = ({\n    data,\n    label,\n    x,\n    y,\n    width,\n    height,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    enableLabel,\n    textColor,\n    onHover,\n    onLeave,\n    onClick,\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x}, ${y})`,\n        width,\n        height,\n        xOffset: width * -0.5,\n        yOffset: height * -0.5,\n        color,\n        opacity,\n        textColor,\n        borderWidth,\n        borderColor,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g\n            transform={animatedProps.transform}\n            style={{ cursor: 'pointer' }}\n            onMouseEnter={onHover}\n            onMouseMove={onHover}\n            onMouseLeave={onLeave}\n            onClick={onClick ? event => onClick(data, event) : undefined}\n        >\n            <animated.rect\n                x={animatedProps.xOffset}\n                y={animatedProps.yOffset}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                fill={animatedProps.color}\n                fillOpacity={animatedProps.opacity}\n                strokeWidth={animatedProps.borderWidth}\n                stroke={animatedProps.borderColor}\n                strokeOpacity={animatedProps.opacity}\n            />\n            {enableLabel && (\n                <animated.text\n                    dominantBaseline=\"central\"\n                    textAnchor=\"middle\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: animatedProps.textColor,\n                    }}\n                    fillOpacity={animatedProps.opacity}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nHeatMapCellRect.propTypes = {\n    data: PropTypes.object.isRequired,\n    label: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    opacity: PropTypes.number.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    textColor: PropTypes.string.isRequired,\n    onHover: PropTypes.func,\n    onLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default memo(HeatMapCellRect)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\n\nconst HeatMapCellCircle = ({\n    data,\n    label,\n    x,\n    y,\n    width,\n    height,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    enableLabel,\n    textColor,\n    onHover,\n    onLeave,\n    onClick,\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x}, ${y})`,\n        radius: Math.min(width, height) / 2,\n        color,\n        opacity,\n        textColor,\n        borderWidth,\n        borderColor,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g\n            transform={animatedProps.transform}\n            style={{ cursor: 'pointer' }}\n            onMouseEnter={onHover}\n            onMouseMove={onHover}\n            onMouseLeave={onLeave}\n            onClick={onClick ? event => onClick(data, event) : undefined}\n        >\n            <animated.circle\n                r={animatedProps.radius}\n                fill={animatedProps.color}\n                fillOpacity={animatedProps.opacity}\n                strokeWidth={animatedProps.borderWidth}\n                stroke={animatedProps.borderColor}\n                strokeOpacity={animatedProps.opacity}\n            />\n            {enableLabel && (\n                <animated.text\n                    dominantBaseline=\"central\"\n                    textAnchor=\"middle\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: animatedProps.textColor,\n                    }}\n                    fillOpacity={animatedProps.opacity}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nHeatMapCellCircle.propTypes = {\n    data: PropTypes.object.isRequired,\n    label: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    opacity: PropTypes.number.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    textColor: PropTypes.string.isRequired,\n    onHover: PropTypes.func,\n    onLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default memo(HeatMapCellCircle)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst HeatMapCellTooltip = ({ cell, format, tooltip }) => (\n    <BasicTooltip\n        id={`${cell.yKey} - ${cell.xKey}`}\n        value={cell.value}\n        enableChip={true}\n        color={cell.color}\n        format={format}\n        renderContent={typeof tooltip === 'function' ? tooltip.bind(null, { ...cell }) : null}\n    />\n)\n\nHeatMapCellTooltip.propTypes = {\n    cell: PropTypes.shape({\n        xKey: PropTypes.string.isRequired,\n        yKey: PropTypes.string.isRequired,\n        value: PropTypes.number.isRequired,\n        color: PropTypes.string.isRequired,\n    }).isRequired,\n    format: PropTypes.func,\n    tooltip: PropTypes.func,\n}\n\nexport default memo(HeatMapCellTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useCallback } from 'react'\nimport { SvgWrapper, withContainer, useDimensions } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { HeatMapSvgPropTypes, HeatMapSvgDefaultProps } from './props'\nimport { useHeatMap } from './hooks'\nimport HeatMapCells from './HeatMapCells'\nimport HeatMapCellRect from './HeatMapCellRect'\nimport HeatMapCellCircle from './HeatMapCellCircle'\nimport HeatMapCellTooltip from './HeatMapCellTooltip'\n\nconst HeatMap = ({\n    data,\n    keys,\n    indexBy,\n    minValue,\n    maxValue,\n    width,\n    height,\n    margin: partialMargin,\n    forceSquare,\n    padding,\n    sizeVariation,\n    cellShape,\n    cellOpacity,\n    cellBorderWidth,\n    cellBorderColor,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableGridX,\n    enableGridY,\n    enableLabels,\n    label,\n    labelTextColor,\n    colors,\n    nanColor,\n    isInteractive,\n    onClick,\n    hoverTarget,\n    cellHoverOpacity,\n    cellHoverOthersOpacity,\n    tooltipFormat,\n    tooltip,\n    role,\n}) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        cells,\n        xScale,\n        yScale,\n        offsetX,\n        offsetY,\n        setCurrentCellId,\n        getCellBorderColor,\n        getLabelTextColor,\n    } = useHeatMap({\n        data,\n        keys,\n        indexBy,\n        minValue,\n        maxValue,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        forceSquare,\n        sizeVariation,\n        colors,\n        nanColor,\n        cellOpacity,\n        cellBorderColor,\n        label,\n        labelTextColor,\n        hoverTarget,\n        cellHoverOpacity,\n        cellHoverOthersOpacity,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleCellHover = useCallback(\n        (cell, event) => {\n            setCurrentCellId(cell.id)\n            showTooltipFromEvent(\n                <HeatMapCellTooltip cell={cell} format={tooltipFormat} tooltip={tooltip} />,\n                event\n            )\n        },\n        [setCurrentCellId, showTooltipFromEvent, tooltipFormat, tooltip]\n    )\n\n    const handleCellLeave = useCallback(() => {\n        setCurrentCellId(null)\n        hideTooltip()\n    }, [setCurrentCellId, hideTooltip])\n\n    let cellComponent\n    if (cellShape === 'rect') {\n        cellComponent = HeatMapCellRect\n    } else if (cellShape === 'circle') {\n        cellComponent = HeatMapCellCircle\n    } else {\n        cellComponent = cellShape\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={Object.assign({}, margin, {\n                top: margin.top + offsetY,\n                left: margin.left + offsetX,\n            })}\n            role={role}\n        >\n            <Grid\n                width={innerWidth - offsetX * 2}\n                height={innerHeight - offsetY * 2}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n            <Axes\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth - offsetX * 2}\n                height={innerHeight - offsetY * 2}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n            <HeatMapCells\n                cells={cells}\n                cellComponent={cellComponent}\n                cellBorderWidth={cellBorderWidth}\n                getCellBorderColor={getCellBorderColor}\n                enableLabels={enableLabels}\n                getLabelTextColor={getLabelTextColor}\n                handleCellHover={isInteractive ? handleCellHover : undefined}\n                handleCellLeave={isInteractive ? handleCellLeave : undefined}\n                onClick={isInteractive ? onClick : undefined}\n            />\n        </SvgWrapper>\n    )\n}\n\nHeatMap.propTypes = HeatMapSvgPropTypes\n\nconst WrappedHeatMap = withContainer(HeatMap)\nWrappedHeatMap.defaultProps = HeatMapSvgDefaultProps\n\nexport default WrappedHeatMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * Render heatmap rect cell.\n *\n * @param {Object}  ctx\n * @param {boolean} enableLabels\n * @param {number}  x\n * @param {number}  y\n * @param {number}  width\n * @param {number}  height\n * @param {string}  color\n * @param {number}  opacity\n * @param {string}  labelTextColor\n * @param {number | string}  label\n */\nexport const renderRect = (\n    ctx,\n    { enableLabels, theme },\n    { x, y, width, height, color, opacity, labelTextColor, label }\n) => {\n    ctx.save()\n    ctx.globalAlpha = opacity\n\n    ctx.fillStyle = color\n    ctx.fillRect(x - width / 2, y - height / 2, width, height)\n\n    if (enableLabels === true) {\n        ctx.fillStyle = labelTextColor\n        ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n        ctx.fillText(label, x, y)\n    }\n\n    ctx.restore()\n}\n\n/**\n * Render heatmap circle cell.\n *\n * @param {Object}  ctx\n * @param {boolean} enableLabels\n * @param {number}  x\n * @param {number}  y\n * @param {number}  width\n * @param {number}  height\n * @param {string}  color\n * @param {number}  opacity\n * @param {string}  labelTextColor\n * @param {number | string}  label\n */\nexport const renderCircle = (\n    ctx,\n    { enableLabels, theme },\n    { x, y, width, height, color, opacity, labelTextColor, label }\n) => {\n    ctx.save()\n    ctx.globalAlpha = opacity\n\n    const radius = Math.min(width, height) / 2\n\n    ctx.fillStyle = color\n    ctx.beginPath()\n    ctx.arc(x, y, radius, 0, 2 * Math.PI)\n    ctx.fill()\n\n    if (enableLabels === true) {\n        ctx.fillStyle = labelTextColor\n        ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n        ctx.fillText(label, x, y)\n    }\n\n    ctx.restore()\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useEffect, useRef, useCallback } from 'react'\nimport {\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n    withContainer,\n} from '@nivo/core'\nimport { renderAxesToCanvas } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useHeatMap } from './hooks'\nimport { HeatMapDefaultProps, HeatMapPropTypes } from './props'\nimport { renderRect, renderCircle } from './canvas'\nimport HeatMapCellTooltip from './HeatMapCellTooltip'\n\nconst HeatMapCanvas = ({\n    data,\n    keys,\n    indexBy,\n    minValue,\n    maxValue,\n    width,\n    height,\n    margin: partialMargin,\n    forceSquare,\n    padding,\n    sizeVariation,\n    cellShape,\n    cellOpacity,\n    cellBorderColor,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableLabels,\n    label,\n    labelTextColor,\n    colors,\n    nanColor,\n    isInteractive,\n    onClick,\n    hoverTarget,\n    cellHoverOpacity,\n    cellHoverOthersOpacity,\n    tooltipFormat,\n    tooltip,\n    pixelRatio,\n}) => {\n    const canvasEl = useRef(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { cells, xScale, yScale, offsetX, offsetY, currentCellId, setCurrentCellId } = useHeatMap(\n        {\n            data,\n            keys,\n            indexBy,\n            minValue,\n            maxValue,\n            width: innerWidth,\n            height: innerHeight,\n            padding,\n            forceSquare,\n            sizeVariation,\n            colors,\n            nanColor,\n            cellOpacity,\n            cellBorderColor,\n            label,\n            labelTextColor,\n            hoverTarget,\n            cellHoverOpacity,\n            cellHoverOthersOpacity,\n        }\n    )\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left + offsetX, margin.top + offsetY)\n\n        renderAxesToCanvas(ctx, {\n            xScale,\n            yScale,\n            width: innerWidth - offsetX * 2,\n            height: innerHeight - offsetY * 2,\n            top: axisTop,\n            right: axisRight,\n            bottom: axisBottom,\n            left: axisLeft,\n            theme,\n        })\n\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n\n        let renderCell\n        if (cellShape === 'rect') {\n            renderCell = renderRect\n        } else {\n            renderCell = renderCircle\n        }\n        cells.forEach(cell => {\n            renderCell(ctx, { enableLabels, theme }, cell)\n        })\n    }, [\n        canvasEl,\n        cells,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        offsetX,\n        offsetY,\n        cellShape,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        xScale,\n        yScale,\n        theme,\n        enableLabels,\n        pixelRatio,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n            const cell = cells.find(c =>\n                isCursorInRect(\n                    c.x + margin.left + offsetX - c.width / 2,\n                    c.y + margin.top + offsetY - c.height / 2,\n                    c.width,\n                    c.height,\n                    x,\n                    y\n                )\n            )\n            if (cell !== undefined) {\n                setCurrentCellId(cell.id)\n                showTooltipFromEvent(\n                    <HeatMapCellTooltip cell={cell} tooltip={tooltip} format={tooltipFormat} />,\n                    event\n                )\n            } else {\n                setCurrentCellId(null)\n                hideTooltip()\n            }\n        },\n        [\n            canvasEl,\n            cells,\n            margin,\n            offsetX,\n            offsetY,\n            setCurrentCellId,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n            tooltipFormat,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setCurrentCellId(null)\n        hideTooltip()\n    }, [setCurrentCellId, hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            if (currentCellId === null) return\n\n            const currentCell = cells.find(cell => cell.id === currentCellId)\n            currentCell && onClick(currentCell, event)\n        },\n        [cells, currentCellId, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nHeatMapCanvas.propTypes = HeatMapPropTypes\n\nconst WrappedHeatMapCanvas = withContainer(HeatMapCanvas)\nWrappedHeatMapCanvas.defaultProps = HeatMapDefaultProps\n\nexport default WrappedHeatMapCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport HeatMap from './HeatMap'\n\nconst ResponsiveHeatMap = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <HeatMap width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveHeatMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport HeatMapCanvas from './HeatMapCanvas'\n\nconst ResponsiveHeatMapCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <HeatMapCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveHeatMapCanvas\n"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","data","PropTypes","indexBy","minValue","maxValue","forceSquare","sizeVariation","padding","cellShape","cellOpacity","cellBorderWidth","cellBorderColor","inheritedColorPropType","axisTop","axisRight","axisBottom","axisLeft","enableGridX","enableGridY","enableLabels","label","labelTextColor","colors","quantizeColorScalePropType","nanColor","isInteractive","onClick","hoverTarget","cellHoverOpacity","cellHoverOthersOpacity","tooltipFormat","tooltip","pixelRatio","role","HeatMapDefaultProps","from","datum","modifiers","window","HeatMapSvgDefaultProps","_arrayLikeToArray","arr","len","arr2","Array","_unsupportedIterableToArray","o","minLen","arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","test","_toConsumableArray","isArray","arrayWithoutHoles","iter","Symbol","iterator","iterableToArray","unsupportedIterableToArray","TypeError","nonIterableSpread","_slicedToArray","arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","iterableToArrayLimit","nonIterableRest","isHoverTargetByType","cell","current","row","column","rowColumn","useHeatMap","_minValue","_maxValue","width","height","useState","currentCellId","setCurrentCellId","getIndex","usePropertyAccessor","indices","useMemo","getLabel","getLabelGenerator","layoutConfig","columns","rows","cellWidth","Math","cellHeight","offsetX","offsetY","cellSize","scales","x","scaleOrdinal","computeX","y","computeY","values","allValues","acc","min","max","sizeScale","scaleLinear","colorScale","guessQuantizeColorScale","theme","useTheme","getCellBorderColor","useInheritedColor","getLabelTextColor","cells","xScale","yScale","index","sizeMultiplier","id","xKey","yKey","color","isNaN","opacity","computeCells","cellsWithCurrent","isHoverTarget","currentCell","HeatMapCells","cellComponent","handleCellHover","handleCellLeave","createElement","borderWidth","borderColor","enableLabel","textColor","onHover","event","onLeave","HeatMapCellRect","useMotionConfig","animate","springConfig","animatedProps","useSpring","transform","xOffset","yOffset","config","immediate","style","cursor","onMouseEnter","onMouseMove","onMouseLeave","fill","fillOpacity","strokeWidth","stroke","strokeOpacity","dominantBaseline","textAnchor","memo","HeatMapCellCircle","radius","r","HeatMapCellTooltip","format","enableChip","renderContent","WrappedHeatMap","withContainer","partialMargin","margin","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","useTooltip","showTooltipFromEvent","hideTooltip","useCallback","top","left","right","bottom","renderRect","ctx","renderCircle","WrappedHeatMapCanvas","canvasEl","useRef","useEffect","renderAxesToCanvas","renderCell","handleMouseHover","getRelativeCursor","c","isCursorInRect","handleMouseLeave","handleClick","ref","ResponsiveHeatMap","props","ResponsiveHeatMapCanvas"],"sourceRoot":""}