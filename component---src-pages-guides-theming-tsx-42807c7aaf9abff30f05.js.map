{"version":3,"file":"component---src-pages-guides-theming-tsx-42807c7aaf9abff30f05.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-time/src/day.js","webpack://nivo-website/./src/components/components/ComponentHeader.tsx","webpack://nivo-website/./src/components/components/ComponentPage.tsx","webpack://nivo-website/./src/components/components/ComponentSettings.tsx","webpack://nivo-website/./src/components/guides/theming/defaults.ts","webpack://nivo-website/./src/components/guides/theming/props.ts","webpack://nivo-website/./src/components/guides/theming/ThemedBar.tsx","webpack://nivo-website/./src/components/guides/theming/ThemedHeatMap.tsx","webpack://nivo-website/./src/components/guides/theming/ThemedLine.tsx","webpack://nivo-website/./src/components/guides/theming/ThemedRadialBar.tsx","webpack://nivo-website/./src/pages/guides/theming.tsx","webpack://nivo-website/../src/color.ts","webpack://nivo-website/../src/sets/countryCodes.ts","webpack://nivo-website/../src/sets/names.ts","webpack://nivo-website/../src/sets/programmingLanguages.ts","webpack://nivo-website/../src/bullet.ts","webpack://nivo-website/../src/chord.ts","webpack://nivo-website/../src/network.ts","webpack://nivo-website/../src/parallelCoordinates.ts","webpack://nivo-website/../src/sankey.ts","webpack://nivo-website/../src/swarmplot.ts","webpack://nivo-website/../src/xySeries.ts","webpack://nivo-website/../src/index.ts","webpack://nivo-website/../src/HeatMapTooltip.tsx","webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/HeatMapCellRect.tsx","webpack://nivo-website/../src/HeatMapCellCircle.tsx","webpack://nivo-website/../src/HeatMapCells.tsx","webpack://nivo-website/../src/HeatMapCellAnnotations.tsx","webpack://nivo-website/../src/HeatMap.tsx","webpack://nivo-website/../src/ResponsiveHeatMap.tsx","webpack://nivo-website/../src/canvas.tsx","webpack://nivo-website/../src/HeatMapCanvas.tsx","webpack://nivo-website/../src/ResponsiveHeatMapCanvas.tsx","webpack://nivo-website/../src/CircularAxisTick.tsx","webpack://nivo-website/../src/CircularAxis.tsx","webpack://nivo-website/../src/RadialGrid.tsx","webpack://nivo-website/../src/CircularGrid.tsx","webpack://nivo-website/../src/PolarGrid.tsx","webpack://nivo-website/../src/RadialAxisTick.tsx","webpack://nivo-website/../src/RadialAxis.tsx","webpack://nivo-website/../src/RadialBarTooltip.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/RadialBarArcs.tsx","webpack://nivo-website/../src/RadialBarTracks.tsx","webpack://nivo-website/../src/RadialBar.tsx","webpack://nivo-website/../src/ResponsiveRadialBar.tsx","webpack://nivo-website/../node_modules/lodash/_arrayShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseForOwn.js","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/_baseShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseValues.js","webpack://nivo-website/../node_modules/lodash/_shuffleSelf.js","webpack://nivo-website/../node_modules/lodash/random.js","webpack://nivo-website/../node_modules/lodash/shuffle.js","webpack://nivo-website/../node_modules/lodash/values.js"],"sourcesContent":["import interval from \"./interval.js\";\nimport { durationDay, durationMinute } from \"./duration.js\";\nvar day = interval(function (date) {\n  date.setHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setDate(date.getDate() + step);\n}, function (start, end) {\n  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n}, function (date) {\n  return date.getDate() - 1;\n});\nexport default day;\nexport var days = day.range;","import React, { memo } from 'react'\nimport styled from 'styled-components'\nimport media from '../../theming/mediaQueries'\n\ninterface ComponentHeaderProps {\n    chartClass: string\n    tags?: string[]\n}\n\nexport const ComponentHeader = memo(({ chartClass, tags = [] }: ComponentHeaderProps) => {\n    return (\n        <Container>\n            <Title>{chartClass}</Title>\n            <Tags>\n                {tags.map(tag => (\n                    <Tag key={tag}>{tag}</Tag>\n                ))}\n            </Tags>\n        </Container>\n    )\n})\n\nconst Container = styled.div`\n    flex-direction: column;\n    color: #fff;\n    margin-bottom: 10px;\n    display: flex;\n    align-items: flex-start;\n    justify-content: flex-end;\n    position: relative;\n    height: 130px;\n    padding: 0 30px;\n\n    ${media.desktopLarge`\n        & {\n            padding: 0 40px;\n        }\n    `}\n\n    ${media.desktop`\n        & {\n            padding: 0 30px;\n        }\n    `}\n\n    ${media.tablet`\n        & {\n            padding: 0 20px;\n        }\n    `}\n\n    ${media.mobile`\n        & {\n            padding: 0 20px;\n        }\n    `}\n`\n\nconst Title = styled.h1`\n    margin: 0 0 10px;\n    padding: 0;\n`\n\nconst Tags = styled.div``\n\nconst Tag = styled.span`\n    display: inline-block;\n    background: ${({ theme }) => theme.colors.background};\n    color: ${({ theme }) => theme.colors.accent};\n    font-size: 0.8rem;\n    font-weight: 500;\n    padding: 3px 11px;\n    border-radius: 2px;\n    margin-right: 7px;\n    margin-bottom: 7px;\n`\n","import styled from 'styled-components'\nimport media from '../../theming/mediaQueries'\n\nexport const ComponentPage = styled.div`\n    margin-right: 55%;\n\n    &:after {\n        content: ' ';\n        position: fixed;\n        top: ${({ theme }) => theme.dimensions.headerHeight}px;\n        box-shadow: ${({ theme }) => theme.topCardShadow};\n        right: 0;\n        bottom: 0;\n        --innerWidth: calc(100% - ${({ theme }) => theme.dimensions.miniNavWidth}px);\n        width: calc(var(--innerWidth) * 0.55);\n        background: rgba(0, 0, 0, 0);\n    }\n\n    ${media.tablet`\n        & {\n            margin-right: 55%;\n            &:after {\n                width: 55%;\n            }\n        }\n    `}\n\n    ${media.mobile`\n        & {\n            margin: 0;\n            &:after {\n                display: none;\n            }\n        }\n    `}\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport media from '../../theming/mediaQueries'\nimport { Flavor, ChartPropertiesGroup } from '../../types'\nimport { ControlsGroup } from '../controls/ControlsGroup'\n\ninterface ComponentSettingsProps<Settings = any> {\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    settings: Settings\n    onChange: (settings: Settings) => void\n    groups: ChartPropertiesGroup[]\n}\n\nexport function ComponentSettings<Settings = any>({\n    flavors,\n    currentFlavor,\n    settings,\n    onChange,\n    groups,\n}: ComponentSettingsProps<Settings>) {\n    return (\n        <Container>\n            {groups.map(group => {\n                return (\n                    <Group key={group.name}>\n                        <Title>{group.name}</Title>\n                        <ControlsGroup\n                            name={group.name}\n                            flavors={flavors}\n                            currentFlavor={currentFlavor}\n                            controls={group.properties}\n                            settings={settings}\n                            onChange={onChange}\n                        />\n                    </Group>\n                )\n            })}\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    background: ${({ theme }) => theme.colors.cardBackground};\n    color: ${({ theme }) => theme.colors.text};\n`\n\nconst Group = styled.div`\n    &:first-child {\n        border-top-width: 0;\n    }\n`\n\nconst Title = styled.div`\n    padding: 16px 30px;\n    font-weight: 700;\n    text-transform: uppercase;\n    font-size: 13px;\n    line-height: 1em;\n    color: white;\n    background: ${({ theme }) => theme.colors.accent};\n    background-image: linear-gradient(\n        -90deg,\n        ${({ theme }) => theme.colors.gradientColor0},\n        ${({ theme }) => theme.colors.gradientColor1}\n    );\n    background-size: 200% 100%;\n    background-repeat: no-repeat;\n    background-position: top left;\n\n    ${media.tablet`\n        & {\n            padding: 16px 20px 16px 30px;\n        }\n    `}\n\n    ${media.mobile`\n        & {\n            padding: 16px 20px 16px 30px;\n        }\n    `}\n`\n","import {\n    // @ts-ignore\n    defaultTheme as baseDefaultTheme,\n    // @ts-ignore\n    extendDefaultTheme,\n    CompleteTheme,\n} from '@nivo/core'\n\nconst extendedTheme: CompleteTheme = extendDefaultTheme(baseDefaultTheme)\n\nconst axisDefaults: CompleteTheme['axis'] = {\n    domain: {\n        line: {\n            stroke: '#777777', // defaultTheme.axis.domain.line.stroke,\n            strokeWidth: extendedTheme.axis.domain.line.strokeWidth,\n        },\n    },\n    legend: {\n        text: {\n            fontSize: extendedTheme.axis.legend.text.fontSize,\n            fill: extendedTheme.axis.legend.text.fill,\n        },\n    },\n    ticks: {\n        line: {\n            stroke: extendedTheme.axis.ticks.line.stroke,\n            strokeWidth: extendedTheme.axis.ticks.line.strokeWidth,\n        },\n        text: {\n            fontSize: extendedTheme.axis.ticks.text.fontSize,\n            fill: extendedTheme.axis.ticks.text.fill,\n        },\n    },\n}\n\nconst gridDefaults: CompleteTheme['grid'] = {\n    line: {\n        stroke: extendedTheme.grid.line.stroke,\n        strokeWidth: extendedTheme.grid.line.strokeWidth,\n    },\n}\n\nconst legendsDefaults: CompleteTheme['legends'] = {\n    title: {\n        text: {\n            fontSize: extendedTheme.legends.title.text.fontSize,\n            fill: extendedTheme.legends.title.text.fill,\n        },\n    },\n    text: {\n        fontSize: extendedTheme.legends.text.fontSize,\n        fill: extendedTheme.legends.text.fill,\n    },\n    ticks: {\n        line: {},\n        text: {\n            fontSize: extendedTheme.legends.ticks.text.fontSize,\n            fill: extendedTheme.legends.ticks.text.fill,\n        },\n    },\n}\n\nconst annotationsDefaults: CompleteTheme['annotations'] = {\n    text: {\n        fontSize: extendedTheme.annotations.text.fontSize,\n        fill: extendedTheme.annotations.text.fill,\n        outlineWidth: extendedTheme.annotations.text.outlineWidth,\n        outlineColor: extendedTheme.annotations.text.outlineColor,\n        outlineOpacity: extendedTheme.annotations.text.outlineOpacity,\n    },\n    link: {\n        stroke: extendedTheme.annotations.link.stroke,\n        strokeWidth: extendedTheme.annotations.link.strokeWidth,\n        outlineWidth: extendedTheme.annotations.link.outlineWidth,\n        outlineColor: extendedTheme.annotations.link.outlineColor,\n        outlineOpacity: extendedTheme.annotations.link.outlineOpacity,\n    },\n    outline: {\n        stroke: extendedTheme.annotations.outline.stroke,\n        strokeWidth: extendedTheme.annotations.outline.strokeWidth,\n        outlineWidth: extendedTheme.annotations.outline.outlineWidth,\n        outlineColor: extendedTheme.annotations.outline.outlineColor,\n        outlineOpacity: extendedTheme.annotations.outline.outlineOpacity,\n    },\n    symbol: {\n        fill: extendedTheme.annotations.symbol.fill,\n        outlineWidth: extendedTheme.annotations.symbol.outlineWidth,\n        outlineColor: extendedTheme.annotations.symbol.outlineColor,\n        outlineOpacity: extendedTheme.annotations.symbol.outlineOpacity,\n    },\n}\n\nconst tooltipDefaults: CompleteTheme['tooltip'] = {\n    container: {\n        background: '#ffffff',\n        color: extendedTheme.textColor,\n        fontSize: 12,\n    },\n    basic: {},\n    chip: {},\n    table: {},\n    tableCell: {},\n    tableCellValue: {},\n}\n\nexport const defaultTheme: CompleteTheme = {\n    background: '#ffffff', // defaultTheme.background,\n    textColor: extendedTheme.textColor,\n    fontSize: extendedTheme.fontSize,\n    axis: axisDefaults,\n    grid: gridDefaults,\n    legends: legendsDefaults,\n    annotations: annotationsDefaults,\n    tooltip: tooltipDefaults,\n}\n","import { ChartPropertiesGroup, ChartProperty } from '../../../types'\n\n// expands all object properties by default if true,\n// this can be useful for debugging.\nconst OPEN_ALL_BY_DEFAULTS = false\n\nconst fontSizeProp: ChartProperty = {\n    key: 'fontSize',\n    group: 'Theme',\n    type: 'number',\n    help: 'If unspecified, use the root `fontSize` value',\n    control: {\n        type: 'range',\n        min: 6,\n        max: 36,\n    },\n}\n\nconst textColorProp: ChartProperty = {\n    key: 'fill',\n    group: 'Theme',\n    type: 'string',\n    help: 'If unspecified, use the root `textColor` value',\n    control: { type: 'colorPicker' },\n}\n\nconst textProp: ChartProperty = {\n    key: 'text',\n    group: 'Theme',\n    type: 'object',\n    control: {\n        type: 'object',\n        isOpenedByDefault: OPEN_ALL_BY_DEFAULTS,\n        props: [fontSizeProp, textColorProp],\n    },\n}\n\nconst baseProps: ChartPropertiesGroup = {\n    name: 'Base',\n    properties: [\n        {\n            group: 'Theme',\n            key: 'background',\n            name: 'background',\n            type: 'string',\n            help: 'main background color.',\n            control: { type: 'colorPicker' },\n        },\n        {\n            group: 'Theme',\n            key: 'textColor',\n            name: 'textColor',\n            type: 'string',\n            help: 'Main text color, used as a default value when unspecified in nested properties.',\n        },\n        {\n            group: 'Theme',\n            key: 'fontSize',\n            name: 'fontSize',\n            type: 'number',\n            help: 'Main font size, used as a default value when unspecified in nested properties.',\n        },\n    ],\n}\n\nconst axesAndGridProps: ChartPropertiesGroup = {\n    name: 'Axes & Grid',\n    properties: [\n        {\n            group: 'Theme',\n            key: 'axis',\n            name: 'axis',\n            type: 'object',\n            control: {\n                type: 'object',\n                isOpenedByDefault: true,\n                props: [\n                    {\n                        key: 'ticks',\n                        type: 'object',\n                        control: {\n                            type: 'object',\n                            isOpenedByDefault: OPEN_ALL_BY_DEFAULTS,\n                            props: [\n                                {\n                                    key: 'line',\n                                    type: 'object',\n                                    control: {\n                                        type: 'object',\n                                        isOpenedByDefault: OPEN_ALL_BY_DEFAULTS,\n                                        props: [\n                                            {\n                                                key: 'strokeWidth',\n                                                type: 'number',\n                                                control: { type: 'lineWidth' },\n                                            },\n                                            {\n                                                key: 'stroke',\n                                                type: 'string',\n                                                control: { type: 'colorPicker' },\n                                            },\n                                        ],\n                                    },\n                                },\n                                textProp,\n                            ],\n                        },\n                    },\n                    {\n                        key: 'domain',\n                        type: 'object',\n                        control: {\n                            type: 'object',\n                            isOpenedByDefault: OPEN_ALL_BY_DEFAULTS,\n                            props: [\n                                {\n                                    key: 'line',\n                                    type: 'object',\n                                    control: {\n                                        type: 'object',\n                                        isOpenedByDefault: OPEN_ALL_BY_DEFAULTS,\n                                        props: [\n                                            {\n                                                key: 'strokeWidth',\n                                                type: 'number',\n                                                control: { type: 'lineWidth' },\n                                            },\n                                            {\n                                                key: 'stroke',\n                                                type: 'string',\n                                                control: { type: 'colorPicker' },\n                                            },\n                                        ],\n                                    },\n                                },\n                            ],\n                        },\n                    },\n                    {\n                        key: 'legend',\n                        type: 'object',\n                        control: {\n                            type: 'object',\n                            isOpenedByDefault: OPEN_ALL_BY_DEFAULTS,\n                            props: [textProp],\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            group: 'Theme',\n            key: 'grid',\n            name: 'grid',\n            type: 'object',\n            control: {\n                type: 'object',\n                isOpenedByDefault: true,\n                props: [\n                    {\n                        key: 'line',\n                        type: 'object',\n                        control: {\n                            type: 'object',\n                            isOpenedByDefault: OPEN_ALL_BY_DEFAULTS,\n                            props: [\n                                {\n                                    key: 'stroke',\n                                    type: 'string',\n                                    control: { type: 'colorPicker' },\n                                },\n                                {\n                                    key: 'strokeWidth',\n                                    type: 'number',\n                                    control: { type: 'lineWidth' },\n                                },\n                            ],\n                        },\n                    },\n                ],\n            },\n        },\n    ],\n}\n\nconst legendsProps: ChartPropertiesGroup = {\n    name: 'Legends',\n    properties: [\n        {\n            group: 'Theme',\n            key: 'legends',\n            name: 'legends',\n            type: 'object',\n            control: {\n                type: 'object',\n                isOpenedByDefault: true,\n                props: [\n                    {\n                        key: 'title',\n                        type: 'object',\n                        control: {\n                            type: 'object',\n                            isOpenedByDefault: OPEN_ALL_BY_DEFAULTS,\n                            props: [textProp],\n                        },\n                    },\n                    textProp,\n                    {\n                        key: 'ticks',\n                        type: 'object',\n                        control: {\n                            type: 'object',\n                            isOpenedByDefault: OPEN_ALL_BY_DEFAULTS,\n                            props: [],\n                        },\n                    },\n                ],\n            },\n        },\n    ],\n}\n\nconst annotationsProps: ChartPropertiesGroup = {\n    name: 'Annotations',\n    properties: [\n        {\n            group: 'Theme',\n            key: 'annotations',\n            name: 'annotations',\n            type: 'object',\n            control: {\n                type: 'object',\n                isOpenedByDefault: true,\n                props: [\n                    {\n                        key: 'text',\n                        type: 'object',\n                        control: {\n                            type: 'object',\n                            isOpenedByDefault: OPEN_ALL_BY_DEFAULTS,\n                            props: [\n                                fontSizeProp,\n                                {\n                                    key: 'outlineWidth',\n                                    type: 'number',\n                                    control: { type: 'lineWidth' },\n                                },\n                                {\n                                    key: 'outlineColor',\n                                    type: 'string',\n                                    control: { type: 'colorPicker' },\n                                },\n                                {\n                                    key: 'outlineOpacity',\n                                    type: 'number',\n                                    control: { type: 'opacity' },\n                                },\n                            ],\n                        },\n                    },\n                    {\n                        key: 'link',\n                        type: 'object',\n                        control: {\n                            type: 'object',\n                            isOpenedByDefault: OPEN_ALL_BY_DEFAULTS,\n                            props: [\n                                {\n                                    key: 'stroke',\n                                    type: 'string',\n                                    control: { type: 'colorPicker' },\n                                },\n                                {\n                                    key: 'strokeWidth',\n                                    type: 'number',\n                                    control: { type: 'lineWidth' },\n                                },\n                                {\n                                    key: 'outlineWidth',\n                                    type: 'number',\n                                    control: { type: 'lineWidth' },\n                                },\n                                {\n                                    key: 'outlineColor',\n                                    type: 'string',\n                                    control: { type: 'colorPicker' },\n                                },\n                                {\n                                    key: 'outlineOpacity',\n                                    type: 'number',\n                                    control: { type: 'opacity' },\n                                },\n                            ],\n                        },\n                    },\n                    {\n                        key: 'outline',\n                        type: 'object',\n                        control: {\n                            type: 'object',\n                            isOpenedByDefault: OPEN_ALL_BY_DEFAULTS,\n                            props: [\n                                {\n                                    key: 'stroke',\n                                    type: 'string',\n                                    control: { type: 'colorPicker' },\n                                },\n                                {\n                                    key: 'strokeWidth',\n                                    type: 'number',\n                                    control: { type: 'lineWidth' },\n                                },\n                                {\n                                    key: 'outlineWidth',\n                                    type: 'number',\n                                    control: { type: 'lineWidth' },\n                                },\n                                {\n                                    key: 'outlineColor',\n                                    type: 'string',\n                                    control: { type: 'colorPicker' },\n                                },\n                                {\n                                    key: 'outlineOpacity',\n                                    type: 'number',\n                                    control: { type: 'opacity' },\n                                },\n                            ],\n                        },\n                    },\n                    {\n                        key: 'symbol',\n                        type: 'object',\n                        control: {\n                            type: 'object',\n                            isOpenedByDefault: OPEN_ALL_BY_DEFAULTS,\n                            props: [\n                                {\n                                    key: 'fill',\n                                    type: 'string',\n                                    control: { type: 'colorPicker' },\n                                },\n                                {\n                                    key: 'outlineWidth',\n                                    type: 'number',\n                                    control: { type: 'lineWidth' },\n                                },\n                                {\n                                    key: 'outlineColor',\n                                    type: 'string',\n                                    control: { type: 'colorPicker' },\n                                },\n                                {\n                                    key: 'outlineOpacity',\n                                    type: 'number',\n                                    control: { type: 'opacity' },\n                                },\n                            ],\n                        },\n                    },\n                ],\n            },\n        },\n    ],\n}\n\nconst tooltipProps: ChartPropertiesGroup = {\n    name: 'Tooltip',\n    properties: [\n        {\n            group: 'Theme',\n            key: 'tooltip',\n            name: 'tooltip',\n            type: 'object',\n            control: {\n                type: 'object',\n                isOpenedByDefault: true,\n                props: [\n                    {\n                        key: 'container',\n                        type: 'object',\n                        control: {\n                            type: 'object',\n                            isOpenedByDefault: OPEN_ALL_BY_DEFAULTS,\n                            props: [\n                                {\n                                    key: 'background',\n                                    type: 'string',\n                                    control: { type: 'colorPicker' },\n                                },\n                                {\n                                    key: 'color',\n                                    type: 'string',\n                                    control: { type: 'colorPicker' },\n                                },\n                                fontSizeProp,\n                            ],\n                        },\n                    },\n                ],\n            },\n        },\n    ],\n}\n\nexport const themeProps: ChartPropertiesGroup[] = [\n    baseProps,\n    axesAndGridProps,\n    legendsProps,\n    annotationsProps,\n    tooltipProps,\n]\n","import React from 'react'\nimport { CompleteTheme } from '@nivo/core'\nimport { ResponsiveBar } from '@nivo/bar'\nimport { colorSchemes } from '@nivo/colors'\n\nexport const ThemedBar = ({ theme }: { theme: CompleteTheme }) => {\n    return (\n        <ResponsiveBar\n            margin={{\n                top: 40,\n                right: 20,\n                bottom: 50,\n                left: 50,\n            }}\n            data={[\n                { id: 'A', value: 12 },\n                { id: 'B', value: 17 },\n                { id: 'C', value: 9 },\n                { id: 'D', value: 15 },\n                { id: 'E', value: 23 },\n            ]}\n            theme={theme}\n            colorBy=\"indexValue\"\n            animate={false}\n            enableGridX={true}\n            axisBottom={{\n                legend: 'X axis legend',\n                legendPosition: 'middle',\n                legendOffset: 34,\n            }}\n            axisLeft={{\n                legend: 'Y axis legend',\n                legendPosition: 'middle',\n                legendOffset: -36,\n            }}\n            legends={[\n                {\n                    anchor: 'top',\n                    translateY: -28,\n                    itemWidth: 40,\n                    itemHeight: 12,\n                    symbolSize: 12,\n                    direction: 'row',\n                    data: [\n                        {\n                            id: 'A',\n                            label: 'A',\n                            color: colorSchemes.nivo[0],\n                        },\n                        {\n                            id: 'B',\n                            label: 'B',\n                            color: colorSchemes.nivo[1],\n                        },\n                        {\n                            id: 'C',\n                            label: 'C',\n                            color: colorSchemes.nivo[2],\n                        },\n                        {\n                            id: 'D',\n                            label: 'D',\n                            color: colorSchemes.nivo[3],\n                        },\n                        {\n                            id: 'E',\n                            label: 'E',\n                            color: colorSchemes.nivo[4],\n                        },\n                    ],\n                },\n            ]}\n        />\n    )\n}\n","import React, { useMemo } from 'react'\nimport { CompleteTheme } from '@nivo/core'\nimport { ResponsiveHeatMap } from '@nivo/heatmap'\nimport { generateXYSeries } from '@nivo/generators'\n\nexport const ThemedHeatMap = ({ theme }: { theme: CompleteTheme }) => {\n    const data = useMemo(\n        () =>\n            generateXYSeries({\n                serieIds: ['A', 'B', 'C', 'D', 'E'],\n                x: { values: ['A', 'B', 'C', 'D', 'E'] },\n                y: {\n                    length: NaN,\n                    min: -100,\n                    max: 100,\n                    round: true,\n                },\n            }),\n        []\n    )\n\n    return (\n        <ResponsiveHeatMap\n            data={data}\n            margin={{\n                top: 40,\n                right: 70,\n                bottom: 50,\n                left: 50,\n            }}\n            theme={theme}\n            colors={{\n                type: 'diverging',\n                scheme: 'red_yellow_blue',\n                minValue: -100,\n                maxValue: 100,\n            }}\n            inactiveOpacity={0.35}\n            animate={false}\n            xOuterPadding={0.1}\n            yOuterPadding={0.1}\n            axisTop={null}\n            axisBottom={{\n                legend: 'X axis legend',\n                legendPosition: 'middle',\n                legendOffset: 34,\n            }}\n            axisLeft={{\n                legend: 'Y axis legend',\n                legendPosition: 'middle',\n                legendOffset: -36,\n            }}\n            legends={[\n                {\n                    anchor: 'right',\n                    direction: 'column',\n                    translateX: 32,\n                    length: 140,\n                    thickness: 10,\n                    ticks: [-100, -75, -50, -25, 0, 25, 50, 75, 100],\n                    title: 'Legend Title →',\n                },\n            ]}\n            annotations={[\n                {\n                    match: { id: 'B.B' },\n                    type: 'rect',\n                    offset: 3,\n                    borderRadius: 3,\n                    noteX: 20,\n                    noteY: { abs: -10 },\n                    note: 'Sample annotation',\n                },\n            ]}\n        />\n    )\n}\n","import React from 'react'\nimport { CompleteTheme } from '@nivo/core'\nimport { ResponsiveLine } from '@nivo/line'\n\nexport const ThemedLine = ({ theme }: { theme: CompleteTheme }) => {\n    return (\n        <ResponsiveLine\n            margin={{\n                top: 40,\n                right: 20,\n                bottom: 50,\n                left: 50,\n            }}\n            data={[\n                {\n                    id: 'Serie 0',\n                    data: [\n                        { x: 'A', y: 12 },\n                        { x: 'B', y: 17 },\n                        { x: 'C', y: 9 },\n                        { x: 'D', y: 15 },\n                        { x: 'E', y: 23 },\n                    ],\n                },\n                {\n                    id: 'Serie 1',\n                    data: [\n                        { x: 'A', y: 3 },\n                        { x: 'B', y: 7 },\n                        { x: 'C', y: 6 },\n                        { x: 'D', y: 12 },\n                        { x: 'E', y: 16 },\n                    ],\n                },\n                {\n                    id: 'Serie 2',\n                    data: [\n                        { x: 'A', y: 1 },\n                        { x: 'B', y: 2 },\n                        { x: 'C', y: 2 },\n                        { x: 'D', y: 5 },\n                        { x: 'E', y: 7 },\n                    ],\n                },\n            ]}\n            enablePoints\n            enablePointLabel\n            pointSize={10}\n            theme={theme}\n            animate={false}\n            axisBottom={{\n                legend: 'X axis legend',\n                legendPosition: 'middle',\n                legendOffset: 34,\n            }}\n            axisLeft={{\n                legend: 'Y axis legend',\n                legendPosition: 'middle',\n                legendOffset: -36,\n            }}\n        />\n    )\n}\n","import React, { useMemo } from 'react'\nimport { CompleteTheme } from '@nivo/core'\nimport { ResponsiveRadialBar } from '@nivo/radial-bar'\n\nexport const ThemedRadialBar = ({ theme }: { theme: CompleteTheme }) => {\n    const data = useMemo(\n        () => [\n            {\n                id: 'Supermarket',\n                data: [\n                    {\n                        x: 'Vegetables',\n                        y: 60,\n                    },\n                    {\n                        x: 'Fruits',\n                        y: 22,\n                    },\n                    {\n                        x: 'Meat',\n                        y: 46,\n                    },\n                ],\n            },\n            {\n                id: 'Combini',\n                data: [\n                    {\n                        x: 'Vegetables',\n                        y: 264,\n                    },\n                    {\n                        x: 'Fruits',\n                        y: 148,\n                    },\n                    {\n                        x: 'Meat',\n                        y: 246,\n                    },\n                ],\n            },\n            {\n                id: 'Online',\n                data: [\n                    {\n                        x: 'Vegetables',\n                        y: 98,\n                    },\n                    {\n                        x: 'Fruits',\n                        y: 224,\n                    },\n                    {\n                        x: 'Meat',\n                        y: 83,\n                    },\n                ],\n            },\n        ],\n        []\n    )\n    return (\n        <ResponsiveRadialBar\n            margin={{\n                top: 36,\n                bottom: 36,\n            }}\n            data={data}\n            theme={theme}\n            animate={false}\n        />\n    )\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Layout from '../../components/Layout'\nimport { Seo } from '../../components/Seo'\nimport { ComponentPage } from '../../components/components/ComponentPage'\nimport { ComponentHeader } from '../../components/components/ComponentHeader'\nimport { Markdown } from '../../components/Markdown'\nimport { ComponentSettings } from '../../components/components/ComponentSettings'\nimport media from '../../theming/mediaQueries'\nimport {\n    themeProps,\n    defaultTheme,\n    ThemedBar,\n    ThemedHeatMap,\n    ThemedLine,\n    ThemedRadialBar,\n} from '../../components/guides/theming'\n\nconst description = `\n**nivo** supports theming via the \\`theme\\` property, this property\nmust contain an object which defines various styles to be applied to your\ncharts. If you don't provide a theme, the default theme will be used. When\nyou provide a theme, you don't have to provide all properties as it will get\nmerged with the default theme.\n\nThere are a few things to notice while theming your components. Values for\nfont-size, borders… are **unitless** as nivo supports several\nimplementations (SVG, HTML, Canvas), however you can pass extra CSS\nattributes when using a specific implementation, for example, you might add\na stroke-dasharray to the grid lines when using the SVG implementation of\nthe Bar component, however it will have no effect on BarCanvas as it doesn't\nsupport it. The theme only drives the base style of the charts, for things\nsuch as symbol colors, patterns, legends, you'll have to use the dedicated\nproperties.\n`\n\nconst Theming = () => {\n    const [theme, setTheme] = useState(defaultTheme)\n    const [mode, setMode] = useState('demo')\n\n    return (\n        <Layout>\n            <ComponentPage>\n                <Seo title=\"Theming Guide\" />\n                <ComponentHeader chartClass=\"Theming\" />\n                <Description>\n                    <Markdown source={description} />\n                </Description>\n                <Charts>\n                    <Nav>\n                        <NavItem isCurrent={mode === 'demo'} onClick={() => setMode('demo')}>\n                            demo\n                        </NavItem>\n                        <NavItem isCurrent={mode === 'code'} onClick={() => setMode('code')}>\n                            theme object\n                        </NavItem>\n                    </Nav>\n                    {mode === 'demo' && (\n                        <>\n                            <ThemedBar theme={theme} />\n                            <ThemedLine theme={theme} />\n                            <ThemedRadialBar theme={theme} />\n                            <ThemedHeatMap theme={theme} />\n                        </>\n                    )}\n                    {mode === 'code' && (\n                        <Code>\n                            {`// You can pass this object to the \\`theme\\` property\\n`}\n                            {JSON.stringify(theme, null, '    ')}\n                        </Code>\n                    )}\n                </Charts>\n                <ComponentSettings\n                    settings={theme}\n                    onChange={setTheme}\n                    groups={themeProps}\n                    flavors={[]}\n                    currentFlavor=\"svg\"\n                />\n            </ComponentPage>\n        </Layout>\n    )\n}\n\nexport default Theming\n\nconst Description = styled.div`\n    margin: 30px 0 50px;\n\n    ${media.desktopLarge`\n        & {\n            padding: 0 40px;\n        }\n    `}\n\n    ${media.desktop`\n        & {\n            padding: 0 30px;\n        }\n    `}\n\n    ${media.tablet`\n        & {\n            padding: 0 20px;\n        }\n    `}\n\n    ${media.mobile`\n        & {\n            padding: 0 20px;\n            margin-bottom: 30px;\n        }\n    `}\n\n    code {\n        display: inline-block;\n        background: ${({ theme }) => theme.colors.cardBackground};\n        border-radius: 2px;\n        font-size: 0.9em;\n        padding: 5px 7px;\n        line-height: 1em;\n    }\n`\n\nconst Charts = styled.div`\n    position: fixed;\n    top: ${({ theme }) => theme.dimensions.headerHeight}px;\n    right: 0;\n    --innerWidth: calc(100% - ${({ theme }) => theme.dimensions.miniNavWidth}px);\n    --innerInnerWidth: calc(var(--innerWidth) * 0.55);\n    width: var(--innerInnerWidth);\n    --innerHeight: calc(100% - ${({ theme }) => theme.dimensions.headerHeight}px);\n    height: var(--innerHeight);\n    z-index: 10;\n    overflow: hidden;\n    background: ${({ theme }) => theme.colors.cardBackground};\n    display: grid;\n    grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);\n    grid-template-rows: 46px minmax(0, 1fr) minmax(0, 1fr);\n\n    ${media.tablet`\n        & {\n            width: 55%;\n            height: calc(100% - ${({ theme }) => theme.dimensions.headerHeight}px);\n        }\n    `}\n\n    ${media.mobile`\n        & {\n            position: relative;\n            top: auto;\n            right: auto;\n            width: auto;\n            height: 500px;\n            z-index: 0;\n            border-top: 1px solid ${({ theme }) => theme.colors.border};\n        }\n    `}\n`\n\nconst Nav = styled.nav`\n    grid-column-start: 1;\n    grid-column-end: 3;\n    background: ${({ theme }) => theme.colors.background};\n    font-size: 15px;\n    position: relative;\n    display: flex;\n\n    ${media.mobile`\n        & {\n            display: grid;\n            grid-template-columns: repeat(2, 1fr);\n        }\n    `}\n`\n\nconst NavItem = styled.span<{\n    isCurrent: boolean\n}>`\n    cursor: pointer;\n    height: 46px;\n    display: flex;\n    padding: 0 24px;\n    justify-content: center;\n    align-items: center;\n    background: ${({ isCurrent, theme }) =>\n        isCurrent ? theme.colors.cardBackground : 'transparent'};\n    color: ${({ isCurrent, theme }) => (isCurrent ? theme.colors.text : '#aaa')};\n\n    &:hover {\n        color: ${({ theme }) => theme.colors.text};\n    }\n`\n\nconst Code = styled.pre`\n    margin: 0;\n    background-color: ${({ theme }) => theme.highlight.plain.backgroundColor};\n    color: ${({ theme }) => theme.highlight.plain.color};\n    font-size: 0.8rem;\n    line-height: 1.7;\n    padding: 12px 20px;\n    overflow-y: auto;\n    grid-column-start: 1;\n    grid-column-end: 3;\n    grid-row-start: 2;\n    grid-row-end: 4;\n`\n","export const randColor = () => `hsl(${Math.round(Math.random() * 360)}, 70%, 50%)`\n","export const countryCodes = [\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AS',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CC',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CU',\n    'CV',\n    'CW',\n    'CX',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FM',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HM',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IR',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KP',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MH',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MP',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NF',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PW',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SY',\n    'SZ',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'UM',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VI',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n]\n","export const names = [\n    'John',\n    'Raoul',\n    'Jane',\n    'Marcel',\n    'Ibrahim',\n    'Junko',\n    'Lyu',\n    'André',\n    'Maki',\n    'Véronique',\n    'Thibeau',\n    'Josiane',\n    'Raphaël',\n    'Mathéo',\n    'Margot',\n    'Hugo',\n    'Christian',\n    'Louis',\n    'Ella',\n    'Alton',\n    'Jimmy',\n    'Guillaume',\n    'Sébastien',\n    'Alfred',\n    'Bon',\n    'Solange',\n    'Kendrick',\n    'Jared',\n    'Satoko',\n    'Tomoko',\n    'Line',\n    'Delphine',\n    'Leonard',\n    'Alphonse',\n    'Lisa',\n    'Bart',\n    'Benjamin',\n    'Homer',\n    'Jack',\n]\n","export const programmingLanguages = [\n    'php',\n    'make',\n    'javascript',\n    'go',\n    'erlang',\n    'elixir',\n    'lisp',\n    'haskell',\n    'python',\n    'ruby',\n    'hack',\n    'scala',\n    'java',\n    'rust',\n    'c',\n    'css',\n    'sass',\n    'stylus',\n]\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\ntype Options = Partial<{\n    float: boolean\n    markerCount: number\n    measureCount: number\n    rangeCount: number\n    subtitle: string\n    title: string\n}>\n\nexport const generateBulletData = (\n    id: string,\n    max: number,\n    {\n        title,\n        subtitle,\n        rangeCount = 5,\n        measureCount = 1,\n        markerCount = 1,\n        float = false,\n    }: Options = {}\n) => {\n    const ranges = range(rangeCount - 1).reduce(\n        acc => {\n            const remaining = max - acc[0]\n            return [random(remaining, float), ...acc]\n        },\n        [max]\n    )\n\n    const measures = range(measureCount).reduce<number[]>(acc => {\n        if (acc.length === 0) return [random(max, float)]\n        return [random(acc[0], float), ...acc]\n    }, [])\n\n    const markers = range(markerCount).map(() => max * 0.6 + random(max * 0.4))\n\n    return {\n        id,\n        title,\n        subtitle,\n        ranges,\n        measures,\n        markers,\n    }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport { names } from './sets'\n\nexport const generateChordData = ({\n    keys = names,\n    size = 7,\n    minValue = 0,\n    maxValue = 2000,\n} = {}) => {\n    const maxSize = Math.min(keys.length, size)\n    const selectedKeys = keys.slice(0, maxSize)\n\n    const matrix = range(maxSize).map(() =>\n        range(maxSize).map(() => {\n            if (Math.random() < 0.66) return random(minValue, maxValue / 4)\n            return random(minValue, maxValue)\n        })\n    )\n\n    return { matrix, keys: selectedKeys }\n}\n","import random from 'lodash/random'\n\ntype Link = {\n    source: string\n    target: string\n    distance: number\n}\n\ntype ExtraNode = {\n    id: string\n    height: number\n    color: string\n    size: number\n}\n\nexport const generateNetworkData = ({\n    rootSize = 32,\n    midSize = 24,\n    leafSize = 12,\n    minMidNodes = 5,\n    maxMidNodes = 11,\n    minLeaves = 3,\n    maxLeaves = 9,\n}: {\n    rootSize?: number\n    midSize?: number\n    leafSize?: number\n    minMidNodes?: number\n    maxMidNodes?: number\n    minLeaves?: number\n    maxLeaves?: number\n} = {}) => {\n    const rootNode = {\n        id: 'Node 0',\n        height: 2,\n        size: rootSize,\n        color: 'rgb(244, 117, 96)',\n    }\n    let nodes = Array.from({ length: random(minMidNodes, maxMidNodes) }, (_, k) => ({\n        id: `Node ${k + 1}`,\n        height: 1,\n        size: midSize,\n        color: 'rgb(97, 205, 187)',\n    }))\n\n    const links: Link[] = []\n    const extraNodes: ExtraNode[] = []\n    nodes.forEach(source => {\n        links.push({\n            source: 'Node 0',\n            target: source.id,\n            distance: 80,\n        })\n        nodes.forEach(target => {\n            if (Math.random() < 0.04) {\n                links.push({\n                    source: source.id,\n                    target: target.id,\n                    distance: 80,\n                })\n            }\n        })\n        Array.from({ length: random(minLeaves, maxLeaves) }, (_, k) => {\n            extraNodes.push({\n                id: `${source.id}.${k}`,\n                height: 0,\n                size: leafSize,\n                color: 'rgb(232, 193, 160)',\n            })\n            links.push({\n                source: source.id,\n                target: `${source.id}.${k}`,\n                distance: 50,\n            })\n\n            return null\n        })\n    })\n\n    nodes.push(rootNode)\n    nodes = nodes.concat(extraNodes)\n\n    return { nodes, links }\n}\n","import random from 'lodash/random'\nimport range from 'lodash/range'\nimport shuffle from 'lodash/shuffle'\n\ntype Options = Partial<{\n    size: number\n    keys: Array<{\n        key: string\n        random?: [number, number]\n        shuffle?: string[]\n    }>\n}>\n\nexport const generateParallelCoordinatesData = ({\n    size = 26,\n    keys = [\n        { key: 'temp', random: [-10, 40] },\n        { key: 'cost', random: [200, 400000] },\n        { key: 'color', shuffle: ['red', 'yellow', 'green'] },\n        { key: 'target', shuffle: ['A', 'B', 'C', 'D', 'E'] },\n        { key: 'volume', random: [0.2, 7.6] },\n    ],\n}: Options = {}) => {\n    const datumGenerator = () =>\n        keys.reduce((acc, key) => {\n            let value\n            if (key.random !== undefined) {\n                value = random(...key.random)\n            } else if (key.shuffle !== undefined) {\n                value = shuffle(key.shuffle)[0]\n            }\n\n            return { ...acc, [key.key]: value }\n        }, {})\n\n    return range(size).map(datumGenerator)\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { randColor } from './color'\nimport { names } from './sets'\n\ntype Link = {\n    source: string\n    target: string\n    value: number\n}\n\nconst availableNodes = names.map(name => ({ id: name }))\n\nconst getNodeTargets = (id: string, links: Link[], currentPath?: string[]): string[] => {\n    const targets = links\n        .filter(({ source }) => source === id)\n        .map(({ target }) => {\n            if (target === id) {\n                throw new Error(\n                    `[sankey] a node cannot be linked on itself:\\n  link: ${id} —> ${id}`\n                )\n            }\n            if (currentPath?.includes(target)) {\n                throw new Error(\n                    `[sankey] found cyclic dependency:\\n  link: ${currentPath.join(\n                        ' —> '\n                    )} —> ${target}`\n                )\n            }\n            return target\n        })\n\n    return targets.reduce(\n        (acc, targetId) =>\n            acc.concat(\n                getNodeTargets(\n                    targetId,\n                    links,\n                    currentPath ? [...currentPath, targetId] : [id, targetId]\n                )\n            ),\n        targets\n    )\n}\n\nconst getNodesTargets = (links: Link[]) =>\n    links.reduce<Record<string, string[]>>((targetsById, link) => {\n        if (!targetsById[link.source]) {\n            targetsById[link.source] = getNodeTargets(link.source, links)\n        }\n\n        return targetsById\n    }, {})\n\nexport const generateSankeyData = ({\n    nodeCount,\n    maxIterations = 3,\n}: {\n    nodeCount?: number\n    maxIterations?: number\n} = {}) => {\n    const nodes = availableNodes.slice(0, nodeCount).map(node =>\n        Object.assign({}, node, {\n            nodeColor: randColor(),\n        })\n    )\n\n    const links: Link[] = []\n    shuffle(nodes).forEach(({ id }) => {\n        range(random(1, maxIterations)).forEach(() => {\n            const targetsById = getNodesTargets(links)\n            const randId = shuffle(nodes.filter(n => n.id !== id).map(n => n.id))[0]\n            if (\n                (!targetsById[randId] || !targetsById[randId].includes(id)) &&\n                (!targetsById[id] || !targetsById[id].includes(randId))\n            ) {\n                links.push({\n                    source: id,\n                    target: randId,\n                    value: random(5, 200),\n                })\n            }\n        })\n    })\n\n    return { nodes, links }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\n\ntype SwarmPlotDatum = {\n    id: string\n    categories?: number[]\n    group: string\n    price: number\n    volume: number\n}\n\nconst randomPrice = () => random(0, 500)\nconst randomVolume = () => random(4, 20)\nconst randomCategory = () => random(3, 17)\n\nexport const generateSwarmPlotData = (\n    groups: string[],\n    { min = 60, max = 100, categoryCount = 0 }\n) => ({\n    groups,\n    data: groups.reduce<SwarmPlotDatum[]>(\n        (acc, group, groupIndex) => [\n            ...acc,\n            ...range(random(min, max))\n                .map(() => randomPrice())\n                .map((price, index) => {\n                    const datum: SwarmPlotDatum = {\n                        id: `${groupIndex}.${index}`,\n                        group,\n                        price,\n                        volume: randomVolume(),\n                    }\n\n                    if (categoryCount > 0) {\n                        datum.categories = range(categoryCount).map(randomCategory)\n                    }\n\n                    return datum\n                }),\n        ],\n        []\n    ),\n})\n\nexport const randomizeSwarmPlotData = (previousData: ReturnType<typeof generateSwarmPlotData>) => ({\n    groups: previousData.groups,\n    data: previousData.data.map(d => {\n        const datum = {\n            ...d,\n            group: shuffle(previousData.groups)[0],\n            price: randomPrice(),\n            volume: randomVolume(),\n        }\n\n        if (d.categories !== undefined) {\n            datum.categories = range(3).map(randomCategory)\n        }\n\n        return datum\n    }),\n})\n","interface XYRangeStaticValues {\n    values: string[] | number[]\n}\n\ninterface XYRandomNumericValues {\n    length: number\n    min: number\n    max: number\n    round?: boolean\n}\n\ntype XYRangeValues = XYRangeStaticValues | XYRandomNumericValues\n\nconst getValueGenerator = (config: XYRangeValues) => {\n    let generator: (index: number) => string | number\n\n    if ('values' in config) {\n        generator = (index: number) => config.values[index]\n    } else {\n        generator = () => {\n            let value = config.min + Math.random() * (config.max - config.min)\n            if (config.round) {\n                value = Math.round(value)\n            }\n\n            return value\n        }\n    }\n\n    return generator\n}\n\nexport const generateXYSeries = ({\n    serieIds,\n    x,\n    y,\n}: {\n    serieIds: string[]\n    x: XYRangeValues\n    y: XYRangeValues\n}) => {\n    const xLength = 'length' in x ? x.length : x.values.length\n\n    const getX = getValueGenerator(x)\n    const getY = getValueGenerator(y)\n\n    return serieIds.map(serieId => {\n        return {\n            id: serieId,\n            data: Array.from({ length: xLength }).map((_, index) => {\n                return {\n                    x: getX(index),\n                    y: getY(index),\n                }\n            }),\n        }\n    })\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { timeDays } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport * as color from './color'\nimport * as sets from './sets'\n\nexport { sets }\nexport const randColor = color.randColor\n\nexport const generateProgrammingLanguageStats = (shouldShuffle = true, limit = -1) => {\n    let langs = sets.programmingLanguages\n    if (shouldShuffle) {\n        langs = shuffle(langs)\n    }\n    if (limit < 1) {\n        limit = 1 + Math.round(Math.random() * (sets.programmingLanguages.length - 1))\n    }\n\n    return langs.slice(0, limit).map(language => ({\n        label: language,\n        value: Math.round(Math.random() * 600),\n        color: randColor(),\n    }))\n}\n\nexport const uniqRand = <T>(generator: (...args: unknown[]) => T) => {\n    const used: T[] = []\n\n    return (...args: unknown[]) => {\n        let value\n        do {\n            value = generator(...args)\n        } while (used.includes(value))\n\n        used.push(value)\n\n        return value\n    }\n}\n\nexport const randCountryCode = () => shuffle(sets.countryCodes)[0]\n\ntype DrinkDatum = {\n    id: string\n    color: string\n    data: Array<{\n        color: string\n        x: string\n        y: number\n    }>\n}\n\nexport const generateDrinkStats = (xSize = 16) => {\n    const rand = () => random(0, 60)\n    const types = ['whisky', 'rhum', 'gin', 'vodka', 'cognac']\n    const country = uniqRand(randCountryCode)\n\n    const data: DrinkDatum[] = types.map(id => ({\n        id,\n        color: randColor(),\n        data: [],\n    }))\n\n    range(xSize).forEach(() => {\n        const x = country()\n        types.forEach(id => {\n            data.find(d => d.id === id)?.data.push({\n                color: randColor(),\n                x,\n                y: rand(),\n            })\n        })\n    })\n\n    return data\n}\n\nexport const generateSerie = (xSize = 20) => {\n    const max = 100 + Math.random() * (Math.random() * 600)\n\n    return range(xSize).map(() => Math.round(Math.random() * max))\n}\n\nexport const generateSeries = (ids: string[], xKeys: string[]) =>\n    ids.map(id => ({\n        id,\n        color: randColor(),\n        data: xKeys.map(x => ({ x, y: Math.round(Math.random() * 300) })),\n    }))\n\nexport const generateStackData = (size = 3) => {\n    const length = 16\n    return range(size).map(() => generateSerie(length).map((v, i) => ({ x: i, y: v })))\n}\n\nexport const generateCountriesPopulation = (size: number) => {\n    const countryCode = uniqRand(randCountryCode)\n\n    return range(size).map(() => ({\n        country: countryCode(),\n        population: 200 + Math.round(Math.random() * Math.random() * 1000000),\n    }))\n}\n\nexport const generateOrderedDayCounts = (from: Date, to: Date) => {\n    const days = timeDays(from, to)\n    const dayFormat = timeFormat('%Y-%m-%d')\n\n    return days.map(day => {\n        return {\n            value: Math.round(Math.random() * 400),\n            day: dayFormat(day),\n        }\n    })\n}\n\nexport const generateDayCounts = (from: Date, to: Date, maxSize = 0.9) => {\n    const days = generateOrderedDayCounts(from, to)\n\n    const size =\n        Math.round(days.length * (maxSize * 0.4)) +\n        Math.round(Math.random() * (days.length * (maxSize * 0.6)))\n\n    return shuffle(days).slice(0, size)\n}\n\nexport const generateCountriesData = (\n    keys: string[],\n    { size = 12, min = 0, max = 200, withColors = true } = {}\n) =>\n    sets.countryCodes.slice(0, size).map(country => {\n        const d: Record<string, unknown> = {\n            country,\n        }\n        keys.forEach(key => {\n            d[key] = random(min, max)\n            if (withColors === true) {\n                d[`${key}Color`] = randColor()\n            }\n        })\n\n        return d\n    })\n\nconst libTreeItems = [\n    [\n        'viz',\n        [\n            ['stack', [['cchart'], ['xAxis'], ['yAxis'], ['layers']]],\n            [\n                'ppie',\n                [\n                    ['chart', [['pie', [['outline'], ['slices'], ['bbox']]], ['donut'], ['gauge']]],\n                    ['legends'],\n                ],\n            ],\n        ],\n    ],\n    ['colors', [['rgb'], ['hsl']]],\n    [\n        'utils',\n        [['randomize'], ['resetClock'], ['noop'], ['tick'], ['forceGC'], ['stackTrace'], ['dbg']],\n    ],\n    ['generators', [['address'], ['city'], ['animal'], ['movie'], ['user']]],\n    [\n        'set',\n        [\n            ['clone'],\n            ['intersect'],\n            ['merge'],\n            ['reverse'],\n            ['toArray'],\n            ['toObject'],\n            ['fromCSV'],\n            ['slice'],\n            ['append'],\n            ['prepend'],\n            ['shuffle'],\n            ['pick'],\n            ['plouc'],\n        ],\n    ],\n    [\n        'text',\n        [\n            ['trim'],\n            ['slugify'],\n            ['snakeCase'],\n            ['camelCase'],\n            ['repeat'],\n            ['padLeft'],\n            ['padRight'],\n            ['sanitize'],\n            ['ploucify'],\n        ],\n    ],\n    [\n        'misc',\n        [\n            ['greetings', [['hey'], ['HOWDY'], ['aloha'], ['AHOY']]],\n            ['other'],\n            [\n                'path',\n                [\n                    ['pathA'],\n                    ['pathB', [['pathB1'], ['pathB2'], ['pathB3'], ['pathB4']]],\n                    [\n                        'pathC',\n                        [\n                            ['pathC1'],\n                            ['pathC2'],\n                            ['pathC3'],\n                            ['pathC4'],\n                            ['pathC5'],\n                            ['pathC6'],\n                            ['pathC7'],\n                            ['pathC8'],\n                            ['pathC9'],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n]\n\ninterface LibTreeDatum {\n    name: string\n    loc?: number\n    color: string\n    children?: LibTreeDatum[]\n}\n\nexport const generateLibTree = (\n    name = 'nivo',\n    limit?: number | null,\n    children = libTreeItems\n): LibTreeDatum => {\n    limit = limit || children.length\n    if (limit > children.length) {\n        limit = children.length\n    }\n\n    const tree: LibTreeDatum = {\n        name,\n        color: randColor(),\n    }\n    if (children?.length > 0) {\n        tree.children = range(limit).map((_, i) => {\n            const leaf = children[i]\n\n            // full path `${name}.${leaf[0]}`\n            return generateLibTree(leaf[0] as string, null, (leaf[1] ?? []) as any)\n        })\n    } else {\n        tree.loc = Math.round(Math.random() * 200000)\n    }\n\n    return tree\n}\n\nconst wines = ['chardonay', 'carmenere', 'syrah']\nconst wineTastes = ['fruity', 'bitter', 'heavy', 'strong', 'sunny']\n\nexport const generateWinesTastes = ({ randMin = 20, randMax = 120 } = {}) => {\n    const data = wineTastes.map(taste => {\n        const d: Record<string, unknown> = { taste }\n        wines.forEach(wine => {\n            d[wine] = random(randMin, randMax)\n        })\n\n        return d\n    })\n\n    return { data, keys: wines }\n}\n\nexport * from './bullet'\nexport * from './chord'\nexport * from './network'\nexport * from './parallelCoordinates'\nexport * from './sankey'\nexport * from './swarmplot'\nexport * from './xySeries'\n","import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { HeatMapDatum, TooltipProps } from './types'\n\nconst NonMemoizedHeatMapTooltip = <Datum extends HeatMapDatum>({ cell }: TooltipProps<Datum>) => {\n    if (cell.formattedValue === null) return null\n\n    return (\n        <BasicTooltip\n            id={`${cell.serieId} - ${cell.data.x}`}\n            value={cell.formattedValue}\n            enableChip={true}\n            color={cell.color}\n        />\n    )\n}\n\nexport const HeatMapTooltip = memo(NonMemoizedHeatMapTooltip) as typeof NonMemoizedHeatMapTooltip\n","import { DefaultHeatMapDatum, HeatMapCommonProps, LayerId } from './types'\nimport { HeatMapTooltip } from './HeatMapTooltip'\n\nexport const commonDefaultProps: Omit<\n    HeatMapCommonProps<DefaultHeatMapDatum>,\n    | 'margin'\n    | 'theme'\n    | 'valueFormat'\n    | 'onClick'\n    | 'renderWrapper'\n    | 'role'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['grid', 'axes', 'cells', 'legends', 'annotations'],\n\n    forceSquare: false,\n    xInnerPadding: 0,\n    xOuterPadding: 0,\n    yInnerPadding: 0,\n    yOuterPadding: 0,\n    sizeVariation: false,\n\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.15,\n    borderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 0.8]] },\n\n    enableGridX: false,\n    enableGridY: false,\n\n    enableLabels: true,\n    label: 'formattedValue',\n    labelTextColor: { from: 'color', modifiers: [['darker', 2]] },\n\n    colors: {\n        type: 'sequential',\n        scheme: 'brown_blueGreen',\n    },\n    emptyColor: '#000000',\n\n    legends: [],\n    annotations: [],\n\n    isInteractive: true,\n    hoverTarget: 'rowColumn',\n    tooltip: HeatMapTooltip,\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    axisTop: {},\n    axisRight: null,\n    axisBottom: null,\n    axisLeft: {},\n    borderRadius: 0,\n    cellComponent: 'rect' as const,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    axisTop: {},\n    axisRight: null,\n    axisBottom: null,\n    axisLeft: {},\n    renderCell: 'rect' as const,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import { scaleBand, scaleLinear } from 'd3-scale'\nimport { castBandScale } from '@nivo/scales'\nimport {\n    ComputedCell,\n    HeatMapCommonProps,\n    HeatMapDataProps,\n    HeatMapDatum,\n    SizeVariationConfig,\n} from './types'\n\nexport const computeLayout = ({\n    width: _width,\n    height: _height,\n    rows,\n    columns,\n    forceSquare,\n}: {\n    width: number\n    height: number\n    rows: number\n    columns: number\n    forceSquare: boolean\n}) => {\n    let width = _width\n    let height = _height\n\n    let offsetX = 0\n    let offsetY = 0\n\n    if (forceSquare) {\n        const cellWidth = Math.max(_width / columns, 0)\n        const cellHeight = Math.max(_height / rows, 0)\n        const cellSize = Math.min(cellWidth, cellHeight)\n\n        width = cellSize * columns\n        height = cellSize * rows\n\n        offsetX = (_width - width) / 2\n        offsetY = (_height - height) / 2\n    }\n\n    return {\n        offsetX,\n        offsetY,\n        width,\n        height,\n    }\n}\n\nexport const computeCells = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    width: _width,\n    height: _height,\n    xInnerPadding,\n    xOuterPadding,\n    yInnerPadding,\n    yOuterPadding,\n    forceSquare,\n}: {\n    data: HeatMapDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n} & Pick<\n    HeatMapCommonProps<Datum>,\n    'xOuterPadding' | 'xInnerPadding' | 'yOuterPadding' | 'yInnerPadding' | 'forceSquare'\n>) => {\n    const xValuesSet = new Set<Datum['x']>()\n    const serieIds: string[] = []\n    const allValues: number[] = []\n\n    const cells: Pick<ComputedCell<Datum>, 'id' | 'serieId' | 'value' | 'data'>[] = []\n\n    data.forEach(serie => {\n        serieIds.push(serie.id)\n\n        serie.data.forEach(datum => {\n            xValuesSet.add(datum.x)\n\n            let value: number | null = null\n            if (datum.y !== undefined && datum.y !== null) {\n                allValues.push(datum.y)\n                value = datum.y\n            }\n\n            cells.push({\n                id: `${serie.id}.${datum.x}`,\n                serieId: serie.id,\n                value,\n                data: datum,\n            })\n        })\n    })\n\n    const xValues = Array.from(xValuesSet)\n\n    const { width, height, offsetX, offsetY } = computeLayout({\n        width: _width,\n        height: _height,\n        columns: xValues.length,\n        rows: serieIds.length,\n        forceSquare,\n    })\n\n    const xScale = castBandScale<Datum['x']>(\n        scaleBand<Datum['x']>()\n            .domain(xValues)\n            .range([0, width])\n            .paddingOuter(xOuterPadding)\n            .paddingInner(xInnerPadding)\n    )\n\n    const yScale = castBandScale<string>(\n        scaleBand<string>()\n            .domain(serieIds)\n            .range([0, height])\n            .paddingOuter(yOuterPadding)\n            .paddingInner(yInnerPadding)\n    )\n\n    const cellWidth = xScale.bandwidth()\n    const cellHeight = yScale.bandwidth()\n\n    const cellsWithPosition: Omit<\n        ComputedCell<Datum>,\n        'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n    >[] = cells.map(cell => ({\n        ...cell,\n        x: xScale(cell.data.x)! + cellWidth / 2,\n        y: yScale(cell.serieId)! + cellHeight / 2,\n        width: cellWidth,\n        height: cellHeight,\n    }))\n\n    return {\n        width,\n        height,\n        offsetX,\n        offsetY,\n        xScale,\n        yScale,\n        minValue: Math.min(...allValues),\n        maxValue: Math.max(...allValues),\n        cells: cellsWithPosition,\n    }\n}\n\nexport const computeSizeScale = (\n    size: false | SizeVariationConfig,\n    min: number,\n    max: number\n): ((value: number | null) => number) => {\n    if (!size) return () => 1\n\n    const scale = scaleLinear()\n        .domain(size.values ? size.values : [min, max])\n        .range(size.sizes)\n\n    return (value: number | null) => {\n        if (value === null) return 1\n        return scale(value)\n    }\n}\n\nexport const getCellAnnotationPosition = <Datum extends HeatMapDatum>(\n    cell: ComputedCell<Datum>\n) => ({\n    x: cell.x,\n    y: cell.y,\n})\n\nexport const getCellAnnotationDimensions = <Datum extends HeatMapDatum>(\n    cell: ComputedCell<Datum>\n) => ({\n    size: Math.max(cell.width, cell.height),\n    width: cell.width,\n    height: cell.height,\n})\n","import { useMemo, useCallback, useState } from 'react'\nimport { useTheme, usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useInheritedColor, getContinuousColorScale } from '@nivo/colors'\nimport { AnnotationMatcher, useAnnotations } from '@nivo/annotations'\nimport {\n    ComputedCell,\n    DefaultHeatMapDatum,\n    HeatMapCommonProps,\n    HeatMapDataProps,\n    HeatMapDatum,\n    SizeVariationConfig,\n} from './types'\nimport { commonDefaultProps } from './defaults'\nimport {\n    computeCells,\n    computeSizeScale,\n    getCellAnnotationPosition,\n    getCellAnnotationDimensions,\n} from './compute'\n\nexport const useComputeCells = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    width,\n    height,\n    xInnerPadding,\n    xOuterPadding,\n    yInnerPadding,\n    yOuterPadding,\n    forceSquare,\n}: {\n    data: HeatMapDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n} & Pick<\n    HeatMapCommonProps<Datum>,\n    'xOuterPadding' | 'xInnerPadding' | 'yOuterPadding' | 'yInnerPadding' | 'forceSquare'\n>) =>\n    useMemo(\n        () =>\n            computeCells<Datum, ExtraProps>({\n                data,\n                width,\n                height,\n                xInnerPadding,\n                xOuterPadding,\n                yInnerPadding,\n                yOuterPadding,\n                forceSquare,\n            }),\n        [\n            data,\n            width,\n            height,\n            xInnerPadding,\n            xOuterPadding,\n            yInnerPadding,\n            yOuterPadding,\n            forceSquare,\n        ]\n    )\n\nconst isHoverTargetByType = {\n    cell: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.id === current.id,\n    row: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.serieId === current.serieId,\n    column: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.data.x === current.data.x,\n    rowColumn: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.serieId === current.serieId || cell.data.x === current.data.x,\n}\n\nconst useSizeScale = (\n    size: false | SizeVariationConfig,\n    min: number,\n    max: number\n): ((value: number | null) => number) =>\n    useMemo(() => computeSizeScale(size, min, max), [size, min, max])\n\nconst useCellsStyle = <Datum extends HeatMapDatum = DefaultHeatMapDatum>({\n    cells,\n    minValue,\n    maxValue,\n    sizeVariation,\n    colors,\n    emptyColor,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    borderColor,\n    label,\n    labelTextColor,\n    valueFormat,\n    activeIds,\n}: {\n    cells: Omit<\n        ComputedCell<Datum>,\n        'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n    >[]\n    minValue: number\n    maxValue: number\n    valueFormat?: HeatMapCommonProps<Datum>['valueFormat']\n    activeIds: string[]\n} & Pick<\n    HeatMapCommonProps<Datum>,\n    | 'sizeVariation'\n    | 'colors'\n    | 'emptyColor'\n    | 'opacity'\n    | 'activeOpacity'\n    | 'inactiveOpacity'\n    | 'borderColor'\n    | 'label'\n    | 'labelTextColor'\n>) => {\n    const getSize = useSizeScale(sizeVariation, minValue, maxValue)\n\n    const colorScale = useMemo(() => {\n        if (typeof colors === 'function') return null\n\n        return getContinuousColorScale(colors, {\n            min: minValue,\n            max: maxValue,\n        })\n    }, [colors, minValue, maxValue])\n\n    const getColor = useCallback(\n        (cell: Omit<ComputedCell<Datum>, 'color' | 'opacity' | 'borderColor'>) => {\n            if (cell.value !== null) {\n                if (typeof colors === 'function') return colors(cell)\n                if (colorScale !== null) return colorScale(cell.value)\n            }\n\n            return emptyColor\n        },\n        [colors, colorScale, emptyColor]\n    )\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n\n    const formatValue = useValueFormatter(valueFormat)\n    const getLabel = usePropertyAccessor(label)\n\n    const styledCells = useMemo(\n        () =>\n            cells.map(cell => {\n                let computedOpacity = opacity\n                if (activeIds.length > 0) {\n                    computedOpacity = activeIds.includes(cell.id) ? activeOpacity : inactiveOpacity\n                }\n\n                const sizeMultiplier = getSize(cell.value)\n\n                const computedCell = {\n                    ...cell,\n                    width: cell.width * sizeMultiplier,\n                    height: cell.height * sizeMultiplier,\n                    formattedValue: cell.value !== null ? formatValue(cell.value) : null,\n                    opacity: computedOpacity,\n                } as ComputedCell<Datum>\n\n                computedCell.label = getLabel(computedCell)\n                computedCell.color = getColor(computedCell)\n                computedCell.borderColor = getBorderColor(computedCell)\n                computedCell.labelTextColor = getLabelTextColor(computedCell)\n\n                return computedCell\n            }),\n        [\n            cells,\n            getSize,\n            getColor,\n            getBorderColor,\n            getLabelTextColor,\n            formatValue,\n            getLabel,\n            activeIds,\n            opacity,\n            activeOpacity,\n            inactiveOpacity,\n        ]\n    )\n\n    return {\n        cells: styledCells,\n        colorScale,\n    }\n}\n\nexport const useHeatMap = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>({\n    data,\n    valueFormat,\n    width: _width,\n    height: _height,\n    xOuterPadding = commonDefaultProps.xOuterPadding,\n    xInnerPadding = commonDefaultProps.xInnerPadding,\n    yOuterPadding = commonDefaultProps.yOuterPadding,\n    yInnerPadding = commonDefaultProps.yInnerPadding,\n    forceSquare = commonDefaultProps.forceSquare,\n    sizeVariation = commonDefaultProps.sizeVariation,\n    colors = commonDefaultProps.colors as HeatMapCommonProps<Datum>['colors'],\n    emptyColor = commonDefaultProps.emptyColor,\n    opacity = commonDefaultProps.opacity,\n    activeOpacity = commonDefaultProps.activeOpacity,\n    inactiveOpacity = commonDefaultProps.inactiveOpacity,\n    borderColor = commonDefaultProps.borderColor as HeatMapCommonProps<Datum>['borderColor'],\n    label = commonDefaultProps.label as HeatMapCommonProps<Datum>['label'],\n    labelTextColor = commonDefaultProps.labelTextColor as HeatMapCommonProps<Datum>['labelTextColor'],\n    hoverTarget = commonDefaultProps.hoverTarget,\n}: {\n    data: HeatMapDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n} & Partial<\n    Pick<\n        HeatMapCommonProps<Datum>,\n        | 'valueFormat'\n        | 'xOuterPadding'\n        | 'xInnerPadding'\n        | 'yOuterPadding'\n        | 'yInnerPadding'\n        | 'forceSquare'\n        | 'sizeVariation'\n        | 'colors'\n        | 'emptyColor'\n        | 'opacity'\n        | 'activeOpacity'\n        | 'inactiveOpacity'\n        | 'borderColor'\n        | 'label'\n        | 'labelTextColor'\n        | 'hoverTarget'\n    >\n>) => {\n    const [activeCell, setActiveCell] = useState<ComputedCell<Datum> | null>(null)\n\n    const { width, height, offsetX, offsetY, cells, xScale, yScale, minValue, maxValue } =\n        useComputeCells<Datum, ExtraProps>({\n            data,\n            width: _width,\n            height: _height,\n            xOuterPadding,\n            xInnerPadding,\n            yOuterPadding,\n            yInnerPadding,\n            forceSquare,\n        })\n\n    const activeIds = useMemo(() => {\n        if (!activeCell) return []\n\n        const isHoverTarget = isHoverTargetByType[hoverTarget]\n\n        return cells.filter(cell => isHoverTarget(cell, activeCell)).map(cell => cell.id)\n    }, [cells, activeCell, hoverTarget])\n\n    const { cells: computedCells, colorScale } = useCellsStyle<Datum>({\n        cells,\n        minValue,\n        maxValue,\n        sizeVariation,\n        colors,\n        emptyColor,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        valueFormat,\n        activeIds,\n    })\n\n    return {\n        width,\n        height,\n        offsetX,\n        offsetY,\n        cells: computedCells,\n        xScale,\n        yScale,\n        colorScale,\n        activeCell,\n        setActiveCell,\n    }\n}\n\nexport const useCellAnnotations = <Datum extends HeatMapDatum>(\n    cells: ComputedCell<Datum>[],\n    annotations: AnnotationMatcher<ComputedCell<Datum>>[]\n) =>\n    useAnnotations<ComputedCell<Datum>>({\n        data: cells,\n        annotations,\n        getPosition: getCellAnnotationPosition,\n        getDimensions: getCellAnnotationDimensions,\n    })\n","import { memo, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { CellComponentProps, HeatMapDatum } from './types'\n\nconst NonMemoizedHeatMapCellRect = <Datum extends HeatMapDatum>({\n    cell,\n    borderWidth,\n    borderRadius,\n    animatedProps,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    enableLabels,\n}: CellComponentProps<Datum>) => {\n    const theme = useTheme()\n\n    const handlers = useMemo(\n        () => ({\n            onMouseEnter: onMouseEnter ? onMouseEnter(cell) : undefined,\n            onMouseMove: onMouseMove ? onMouseMove(cell) : undefined,\n            onMouseLeave: onMouseLeave ? onMouseLeave(cell) : undefined,\n            onClick: onClick ? onClick(cell) : undefined,\n        }),\n        [cell, onMouseEnter, onMouseMove, onMouseLeave, onClick]\n    )\n\n    return (\n        <animated.g\n            data-testid={`cell.${cell.id}`}\n            style={{ cursor: 'pointer' }}\n            opacity={animatedProps.opacity}\n            {...handlers}\n            transform={to(\n                [animatedProps.x, animatedProps.y, animatedProps.scale],\n                (x, y, scale) => `translate(${x}, ${y}) scale(${scale})`\n            )}\n        >\n            <animated.rect\n                transform={to(\n                    [animatedProps.width, animatedProps.height],\n                    (width, height) => `translate(${width * -0.5}, ${height * -0.5})`\n                )}\n                key={cell.id}\n                fill={animatedProps.color}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                stroke={animatedProps.borderColor}\n                strokeWidth={borderWidth}\n                rx={borderRadius}\n                ry={borderRadius}\n            />\n            {enableLabels && (\n                <animated.text\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fill={animatedProps.labelTextColor}\n                    style={{\n                        ...theme.labels.text,\n                        fill: undefined,\n                        userSelect: 'none',\n                    }}\n                >\n                    {cell.label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nexport const HeatMapCellRect = memo(NonMemoizedHeatMapCellRect) as typeof NonMemoizedHeatMapCellRect\n","import { memo, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { HeatMapDatum, CellComponentProps } from './types'\n\nconst NonMemoizedHeatMapCellCircle = <Datum extends HeatMapDatum>({\n    cell,\n    borderWidth,\n    animatedProps,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    enableLabels,\n}: CellComponentProps<Datum>) => {\n    const theme = useTheme()\n\n    const handlers = useMemo(\n        () => ({\n            onMouseEnter: onMouseEnter ? onMouseEnter(cell) : undefined,\n            onMouseMove: onMouseMove ? onMouseMove(cell) : undefined,\n            onMouseLeave: onMouseLeave ? onMouseLeave(cell) : undefined,\n            onClick: onClick ? onClick(cell) : undefined,\n        }),\n        [cell, onMouseEnter, onMouseMove, onMouseLeave, onClick]\n    )\n\n    return (\n        <animated.g\n            data-testid={`cell.${cell.id}`}\n            style={{ cursor: 'pointer' }}\n            opacity={animatedProps.opacity}\n            {...handlers}\n            transform={to([animatedProps.x, animatedProps.y], (x, y) => `translate(${x}, ${y})`)}\n        >\n            <animated.circle\n                r={to(\n                    [animatedProps.width, animatedProps.height],\n                    (width, height) => Math.min(width, height) / 2\n                )}\n                fill={animatedProps.color}\n                fillOpacity={animatedProps.opacity}\n                strokeWidth={borderWidth}\n                stroke={animatedProps.borderColor}\n            />\n            {enableLabels && (\n                <animated.text\n                    dominantBaseline=\"central\"\n                    textAnchor=\"middle\"\n                    fill={animatedProps.labelTextColor}\n                    style={{\n                        ...theme.labels.text,\n                        fill: undefined,\n                    }}\n                >\n                    {cell.label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nexport const HeatMapCellCircle = memo(\n    NonMemoizedHeatMapCellCircle\n) as typeof NonMemoizedHeatMapCellCircle\n","import { createElement, MouseEvent, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    CellComponent,\n    ComputedCell,\n    HeatMapDatum,\n    HeatMapSvgProps,\n    CellAnimatedProps,\n} from './types'\nimport { HeatMapCellRect } from './HeatMapCellRect'\nimport { HeatMapCellCircle } from './HeatMapCellCircle'\n\ninterface HeatMapCellsProps<Datum extends HeatMapDatum, ExtraProps extends object> {\n    cells: ComputedCell<Datum>[]\n    cellComponent: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['cellComponent']>\n    borderRadius: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['borderRadius']>\n    borderWidth: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['borderWidth']>\n    isInteractive: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['isInteractive']>\n    setActiveCell: (cell: ComputedCell<Datum> | null) => void\n    onMouseEnter: HeatMapSvgProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove: HeatMapSvgProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave: HeatMapSvgProps<Datum, ExtraProps>['onMouseLeave']\n    onClick: HeatMapSvgProps<Datum, ExtraProps>['onClick']\n    tooltip: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['tooltip']>\n    enableLabels: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['enableLabels']>\n}\n\nconst enterTransition = <Datum extends HeatMapDatum>(cell: ComputedCell<Datum>) => ({\n    x: cell.x,\n    y: cell.y,\n    width: cell.width,\n    height: cell.height,\n    color: cell.color,\n    opacity: 0,\n    borderColor: cell.borderColor,\n    labelTextColor: cell.labelTextColor,\n    scale: 0,\n})\n\nconst regularTransition = <Datum extends HeatMapDatum>(cell: ComputedCell<Datum>) => ({\n    x: cell.x,\n    y: cell.y,\n    width: cell.width,\n    height: cell.height,\n    color: cell.color,\n    opacity: cell.opacity,\n    borderColor: cell.borderColor,\n    labelTextColor: cell.labelTextColor,\n    scale: 1,\n})\n\nconst exitTransition = <Datum extends HeatMapDatum>(cell: ComputedCell<Datum>) => ({\n    x: cell.x,\n    y: cell.y,\n    width: cell.width,\n    height: cell.height,\n    color: cell.color,\n    opacity: 0,\n    borderColor: cell.borderColor,\n    labelTextColor: cell.labelTextColor,\n    scale: 0,\n})\n\nexport const HeatMapCells = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    cells,\n    cellComponent,\n    borderRadius,\n    borderWidth,\n    isInteractive,\n    setActiveCell,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    enableLabels,\n}: HeatMapCellsProps<Datum, ExtraProps>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<ComputedCell<Datum>, CellAnimatedProps>(cells, {\n        keys: (cell: ComputedCell<Datum>) => cell.id,\n        initial: regularTransition,\n        from: enterTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: exitTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { cell }), event)\n            setActiveCell(cell)\n            onMouseEnter?.(cell, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, setActiveCell, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { cell }), event)\n            onMouseMove?.(cell, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            hideTooltip()\n            setActiveCell(null)\n            onMouseLeave?.(cell, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveCell, onMouseLeave])\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            onClick?.(cell, event)\n        }\n    }, [isInteractive, onClick])\n\n    let Cell: CellComponent<Datum>\n    if (cellComponent === 'rect') {\n        Cell = HeatMapCellRect\n    } else if (cellComponent === 'circle') {\n        Cell = HeatMapCellCircle\n    } else {\n        Cell = cellComponent\n    }\n\n    return (\n        <>\n            {transition((animatedProps, cell) =>\n                createElement(Cell, {\n                    cell,\n                    borderRadius,\n                    borderWidth,\n                    animatedProps,\n                    enableLabels,\n                    onMouseEnter: handleMouseEnter,\n                    onMouseMove: handleMouseMove,\n                    onMouseLeave: handleMouseLeave,\n                    onClick: handleClick,\n                })\n            )}\n        </>\n    )\n}\n","import { Annotation } from '@nivo/annotations'\nimport { ComputedCell, HeatMapCommonProps, HeatMapDatum } from './types'\nimport { useCellAnnotations } from './hooks'\n\ninterface HeatMapCellAnnotationsProps<Datum extends HeatMapDatum> {\n    cells: ComputedCell<Datum>[]\n    annotations: NonNullable<HeatMapCommonProps<Datum>['annotations']>\n}\n\nexport const HeatMapCellAnnotations = <Datum extends HeatMapDatum>({\n    cells,\n    annotations,\n}: HeatMapCellAnnotationsProps<Datum>) => {\n    const boundAnnotations = useCellAnnotations<Datum>(cells, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { ReactNode, Fragment, createElement, useMemo } from 'react'\nimport { SvgWrapper, Container, useDimensions } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { AnchoredContinuousColorsLegendSvg } from '@nivo/legends'\nimport {\n    DefaultHeatMapDatum,\n    HeatMapDatum,\n    HeatMapCommonProps,\n    HeatMapSvgProps,\n    LayerId,\n    CustomLayerProps,\n} from './types'\nimport { useHeatMap } from './hooks'\nimport { svgDefaultProps } from './defaults'\nimport { HeatMapCells } from './HeatMapCells'\nimport { HeatMapCellAnnotations } from './HeatMapCellAnnotations'\n\ntype InnerHeatMapProps<Datum extends HeatMapDatum, ExtraProps extends object> = Omit<\n    HeatMapSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerHeatMap = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    layers = svgDefaultProps.layers,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    forceSquare = svgDefaultProps.forceSquare,\n    xInnerPadding = svgDefaultProps.xInnerPadding,\n    xOuterPadding = svgDefaultProps.xOuterPadding,\n    yInnerPadding = svgDefaultProps.yInnerPadding,\n    yOuterPadding = svgDefaultProps.yOuterPadding,\n    sizeVariation = svgDefaultProps.sizeVariation,\n    cellComponent = svgDefaultProps.cellComponent as NonNullable<\n        HeatMapSvgProps<Datum, ExtraProps>['cellComponent']\n    >,\n    opacity = svgDefaultProps.opacity,\n    activeOpacity = svgDefaultProps.activeOpacity,\n    inactiveOpacity = svgDefaultProps.inactiveOpacity,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor as HeatMapCommonProps<Datum>['borderColor'],\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    axisTop = svgDefaultProps.axisTop,\n    axisRight = svgDefaultProps.axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableLabels = svgDefaultProps.enableLabels,\n    label = svgDefaultProps.label as HeatMapCommonProps<Datum>['label'],\n    labelTextColor = svgDefaultProps.labelTextColor as HeatMapCommonProps<Datum>['labelTextColor'],\n    colors = svgDefaultProps.colors as HeatMapCommonProps<Datum>['colors'],\n    emptyColor = svgDefaultProps.emptyColor,\n    legends = svgDefaultProps.legends,\n    annotations = svgDefaultProps.annotations as HeatMapCommonProps<Datum>['annotations'],\n    isInteractive = svgDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    hoverTarget = svgDefaultProps.hoverTarget,\n    tooltip = svgDefaultProps.tooltip as HeatMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerHeatMapProps<Datum, ExtraProps>) => {\n    const {\n        margin: _margin,\n        innerWidth: _innerWidth,\n        innerHeight: _innerHeight,\n        outerWidth,\n        outerHeight,\n    } = useDimensions(width, height, partialMargin)\n\n    const {\n        width: innerWidth,\n        height: innerHeight,\n        offsetX,\n        offsetY,\n        xScale,\n        yScale,\n        cells,\n        colorScale,\n        activeCell,\n        setActiveCell,\n    } = useHeatMap<Datum, ExtraProps>({\n        data,\n        valueFormat,\n        width: _innerWidth,\n        height: _innerHeight,\n        forceSquare,\n        xInnerPadding,\n        xOuterPadding,\n        yInnerPadding,\n        yOuterPadding,\n        sizeVariation,\n        colors,\n        emptyColor,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        hoverTarget,\n    })\n\n    const margin = useMemo(\n        () => ({\n            ..._margin,\n            top: _margin.top + offsetY,\n            left: _margin.left + offsetX,\n        }),\n        [_margin, offsetX, offsetY]\n    )\n\n    const layerById: Record<LayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        cells: null,\n        legends: null,\n        annotations: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth} // - offsetX * 2\n                height={innerHeight} // - offsetY * 2\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth} // - offsetX * 2\n                height={innerHeight} // - offsetY * 2\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('cells')) {\n        layerById.cells = (\n            <Fragment key=\"cells\">\n                <HeatMapCells<Datum, ExtraProps>\n                    cells={cells}\n                    cellComponent={cellComponent}\n                    borderRadius={borderRadius}\n                    borderWidth={borderWidth}\n                    isInteractive={isInteractive}\n                    setActiveCell={setActiveCell}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                    onClick={onClick}\n                    tooltip={tooltip}\n                    enableLabels={enableLabels}\n                />\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('legends') && colorScale !== null) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, index) => (\n                    <AnchoredContinuousColorsLegendSvg\n                        {...legend}\n                        key={index}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        scale={colorScale}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('annotations') && annotations.length > 0) {\n        layerById.annotations = (\n            <HeatMapCellAnnotations<Datum>\n                key=\"annotations\"\n                cells={cells}\n                annotations={annotations}\n            />\n        )\n    }\n\n    const customLayerProps: CustomLayerProps<Datum> = {\n        cells,\n        activeCell,\n        setActiveCell,\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={Object.assign({}, margin, {\n                top: margin.top, //+ offsetY,\n                left: margin.left, // + offsetX,\n            })}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const HeatMap = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: HeatMapSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerHeatMap<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultHeatMapDatum, HeatMapDatum, HeatMapSvgProps } from './types'\nimport { HeatMap } from './HeatMap'\n\nexport const ResponsiveHeatMap = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>(\n    props: Omit<HeatMapSvgProps<Datum, ExtraProps>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <HeatMap<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { CellCanvasRendererProps, HeatMapDatum } from './types'\n\nexport const renderRect = <Datum extends HeatMapDatum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        cell: { x, y, width, height, color, borderColor, opacity, labelTextColor, label },\n        borderWidth,\n        enableLabels,\n        theme,\n    }: CellCanvasRendererProps<Datum>\n) => {\n    ctx.save()\n    ctx.globalAlpha = opacity\n\n    ctx.fillStyle = color\n    if (borderWidth > 0) {\n        ctx.strokeStyle = borderColor\n        ctx.lineWidth = borderWidth\n    }\n\n    ctx.fillRect(x - width / 2, y - height / 2, width, height)\n    if (borderWidth > 0) {\n        ctx.strokeRect(x - width / 2, y - height / 2, width, height)\n    }\n\n    if (enableLabels) {\n        ctx.fillStyle = labelTextColor\n        ctx.font = `${theme.labels.text.fontWeight ? `${theme.labels.text.fontWeight} ` : ''}${\n            theme.labels.text.fontSize\n        }px ${theme.labels.text.fontFamily}`\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillText(label, x, y)\n    }\n\n    ctx.restore()\n}\n\nexport const renderCircle = <Datum extends HeatMapDatum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        cell: { x, y, width, height, color, borderColor, opacity, labelTextColor, label },\n        borderWidth,\n        enableLabels,\n        theme,\n    }: CellCanvasRendererProps<Datum>\n) => {\n    ctx.save()\n    ctx.globalAlpha = opacity\n\n    const radius = Math.min(width, height) / 2\n\n    ctx.fillStyle = color\n    if (borderWidth > 0) {\n        ctx.strokeStyle = borderColor\n        ctx.lineWidth = borderWidth\n    }\n\n    ctx.beginPath()\n    ctx.arc(x, y, radius, 0, 2 * Math.PI)\n\n    ctx.fill()\n    if (borderWidth > 0) {\n        ctx.stroke()\n    }\n\n    if (enableLabels) {\n        ctx.fillStyle = labelTextColor\n        ctx.font = `${theme.labels.text.fontWeight ? `${theme.labels.text.fontWeight} ` : ''}${\n            theme.labels.text.fontSize\n        }px ${theme.labels.text.fontFamily}`\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillText(label, x, y)\n    }\n\n    ctx.restore()\n}\n","import { useEffect, useRef, useCallback, createElement, useMemo } from 'react'\nimport { getRelativeCursor, isCursorInRect, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { renderContinuousColorLegendToCanvas } from '@nivo/legends'\nimport { renderAnnotationsToCanvas, useComputedAnnotations } from '@nivo/annotations'\nimport { useHeatMap, useCellAnnotations } from './hooks'\nimport { renderRect, renderCircle } from './canvas'\nimport { canvasDefaultProps } from './defaults'\nimport {\n    CellCanvasRenderer,\n    DefaultHeatMapDatum,\n    HeatMapCanvasProps,\n    HeatMapCommonProps,\n    HeatMapDatum,\n    CellShape,\n    CustomLayerProps,\n} from './types'\n\ntype InnerNetworkCanvasProps<Datum extends HeatMapDatum, ExtraProps extends object> = Omit<\n    HeatMapCanvasProps<Datum, ExtraProps>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerHeatMapCanvas = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    layers = canvasDefaultProps.layers,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    xInnerPadding = canvasDefaultProps.xInnerPadding,\n    xOuterPadding = canvasDefaultProps.xOuterPadding,\n    yInnerPadding = canvasDefaultProps.yInnerPadding,\n    yOuterPadding = canvasDefaultProps.yOuterPadding,\n    forceSquare = canvasDefaultProps.forceSquare,\n    sizeVariation = canvasDefaultProps.sizeVariation,\n    renderCell: _renderCell = canvasDefaultProps.renderCell as CellShape,\n    opacity = canvasDefaultProps.opacity,\n    activeOpacity = canvasDefaultProps.activeOpacity,\n    inactiveOpacity = canvasDefaultProps.inactiveOpacity,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor = canvasDefaultProps.borderColor as HeatMapCommonProps<Datum>['borderColor'],\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    axisTop = canvasDefaultProps.axisTop,\n    axisRight = canvasDefaultProps.axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableLabels = canvasDefaultProps.enableLabels,\n    label = canvasDefaultProps.label as HeatMapCommonProps<Datum>['label'],\n    labelTextColor = canvasDefaultProps.labelTextColor as HeatMapCommonProps<Datum>['labelTextColor'],\n    colors = canvasDefaultProps.colors as HeatMapCommonProps<Datum>['colors'],\n    emptyColor = canvasDefaultProps.emptyColor,\n    legends = canvasDefaultProps.legends,\n    annotations = canvasDefaultProps.annotations as HeatMapCommonProps<Datum>['annotations'],\n    isInteractive = canvasDefaultProps.isInteractive,\n    onClick,\n    hoverTarget = canvasDefaultProps.hoverTarget,\n    tooltip = canvasDefaultProps.tooltip as HeatMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n}: InnerNetworkCanvasProps<Datum, ExtraProps>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const {\n        margin: _margin,\n        innerWidth: _innerWidth,\n        innerHeight: _innerHeight,\n        outerWidth,\n        outerHeight,\n    } = useDimensions(width, height, partialMargin)\n\n    const {\n        width: innerWidth,\n        height: innerHeight,\n        offsetX,\n        offsetY,\n        xScale,\n        yScale,\n        cells,\n        colorScale,\n        activeCell,\n        setActiveCell,\n    } = useHeatMap<Datum, ExtraProps>({\n        data,\n        valueFormat,\n        width: _innerWidth,\n        height: _innerHeight,\n        xInnerPadding,\n        xOuterPadding,\n        yInnerPadding,\n        yOuterPadding,\n        forceSquare,\n        sizeVariation,\n        colors,\n        emptyColor,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        hoverTarget,\n    })\n\n    const margin = useMemo(\n        () => ({\n            ..._margin,\n            top: _margin.top + offsetY,\n            left: _margin.left + offsetX,\n        }),\n        [_margin, offsetX, offsetY]\n    )\n\n    const boundAnnotations = useCellAnnotations(cells, annotations)\n    const computedAnnotations = useComputedAnnotations({\n        annotations: boundAnnotations,\n    })\n\n    let renderCell: CellCanvasRenderer<Datum>\n    if (typeof _renderCell === 'function') {\n        renderCell = _renderCell\n    } else if (_renderCell === 'circle') {\n        renderCell = renderCircle\n    } else {\n        renderCell = renderRect\n    }\n\n    const theme = useTheme()\n\n    const customLayerProps: CustomLayerProps<Datum> = useMemo(\n        () => ({\n            cells,\n            activeCell,\n            setActiveCell,\n        }),\n        [cells, activeCell, setActiveCell]\n    )\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        const ctx = canvasEl.current.getContext('2d')\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top) // + offsetX, margin.top + offsetY)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                if (enableGridX) {\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                    })\n                }\n                if (enableGridY) {\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                    })\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth, // - offsetX * 2,\n                    height: innerHeight, // - offsetY * 2,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'cells') {\n                ctx.textAlign = 'center'\n                ctx.textBaseline = 'middle'\n\n                cells.forEach(cell => {\n                    renderCell(ctx, { cell, borderWidth, enableLabels, theme })\n                })\n            } else if (layer === 'legends' && colorScale !== null) {\n                legends.forEach(legend => {\n                    renderContinuousColorLegendToCanvas(ctx, {\n                        ...legend,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        scale: colorScale,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, {\n                    annotations: computedAnnotations,\n                    theme,\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            }\n        })\n    }, [\n        canvasEl,\n        pixelRatio,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        layers,\n        customLayerProps,\n        cells,\n        renderCell,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        xScale,\n        yScale,\n        theme,\n        borderWidth,\n        enableLabels,\n        colorScale,\n        legends,\n        computedAnnotations,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            if (canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n            const cell = cells.find(c =>\n                isCursorInRect(\n                    c.x + margin.left - c.width / 2, // + offsetX - c.width / 2,\n                    c.y + margin.top - c.height / 2, //+ offsetY - c.height / 2,\n                    c.width,\n                    c.height,\n                    x,\n                    y\n                )\n            )\n            if (cell !== undefined) {\n                setActiveCell(cell)\n                showTooltipFromEvent(createElement(tooltip, { cell }), event)\n            } else {\n                setActiveCell(null)\n                hideTooltip()\n            }\n        },\n        [\n            canvasEl,\n            cells,\n            margin,\n            // offsetX,\n            // offsetY,\n            setActiveCell,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setActiveCell(null)\n        hideTooltip()\n    }, [setActiveCell, hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            if (activeCell === null) return\n\n            onClick?.(activeCell, event)\n        },\n        [activeCell, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n        />\n    )\n}\n\nexport const HeatMapCanvas = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: HeatMapCanvasProps<Datum, ExtraProps>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerHeatMapCanvas<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultHeatMapDatum, HeatMapCanvasProps, HeatMapDatum } from './types'\nimport { HeatMapCanvas } from './HeatMapCanvas'\n\nexport const ResponsiveHeatMapCanvas = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>(\n    props: Omit<HeatMapCanvasProps<Datum, ExtraProps>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <HeatMapCanvas<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { CircularAxisTickProps } from './types'\n\nexport const CircularAxisTick = ({ label, animated: animatedProps }: CircularAxisTickProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={animatedProps.opacity}>\n            <animated.line\n                x1={animatedProps.x1}\n                y1={animatedProps.y1}\n                x2={animatedProps.x2}\n                y2={animatedProps.y2}\n                style={theme.axis.ticks.line}\n            />\n            <animated.text\n                dx={animatedProps.textX}\n                dy={animatedProps.textY}\n                dominantBaseline=\"central\"\n                style={theme.axis.ticks.text}\n                textAnchor=\"middle\"\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { createElement, SVGProps, useMemo } from 'react'\nimport { useSpring, useTransition } from '@react-spring/web'\nimport { useMotionConfig, useTheme, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { ArcLine } from '@nivo/arcs'\nimport { CircularAxisConfig, CircularAxisTickAnimatedProps } from './types'\nimport { CircularAxisTick } from './CircularAxisTick'\n\ntype CircularAxisProps = {\n    type: 'inner' | 'outer'\n    center?: [number, number]\n    radius: number\n    startAngle: number\n    endAngle: number\n    scale: AnyScale\n} & CircularAxisConfig\n\nconst getLinePositions = (angle: number, innerRadius: number, outerRadius: number) => {\n    const start = positionFromAngle(degreesToRadians(angle), innerRadius)\n    const end = positionFromAngle(degreesToRadians(angle), outerRadius)\n\n    return {\n        x1: start.x,\n        y1: start.y,\n        x2: end.x,\n        y2: end.y,\n    }\n}\n\nconst getTextPosition = (angle: number, radius: number) => {\n    const position = positionFromAngle(degreesToRadians(angle), radius)\n\n    return {\n        textX: position.x,\n        textY: position.y,\n    }\n}\n\nexport const CircularAxis = ({\n    type,\n    center = [0, 0],\n    radius,\n    startAngle: originalStartAngle,\n    endAngle: originalEndAngle,\n    scale,\n    tickSize = 5,\n    tickPadding = 12,\n    tickComponent = CircularAxisTick,\n}: CircularAxisProps) => {\n    const startAngle = originalStartAngle - 90\n    const endAngle = originalEndAngle - 90\n\n    const theme = useTheme()\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const spring = useSpring<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>({\n        radius,\n        startAngle,\n        endAngle,\n        opacity: 1,\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    const ticks = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => ({\n            key: index,\n            label: value,\n            angle: scale(value) - 90,\n        }))\n    }, [scale])\n\n    const outerRadius = type === 'inner' ? radius - tickSize : radius + tickSize\n    const textRadius = type === 'inner' ? outerRadius - tickPadding : outerRadius + tickPadding\n\n    const transition = useTransition<typeof ticks[0], CircularAxisTickAnimatedProps>(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        from: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 0,\n        }),\n        enter: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        update: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        leave: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 0,\n        }),\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    return (\n        <g transform={`translate(${center[0]}, ${center[1]})`}>\n            <ArcLine\n                animated={spring}\n                {...(theme.axis.domain.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n                fill=\"none\"\n            />\n            {transition((animatedProps, tick) =>\n                createElement(tickComponent, {\n                    key: tick.key,\n                    label: tick.label,\n                    animated: animatedProps,\n                })\n            )}\n        </g>\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { useTransition, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\n\ninterface PolarGridProps {\n    scale: AnyScale\n    ticks?: number | number[]\n    innerRadius: number\n    outerRadius: number\n}\n\nexport const RadialGrid = ({ scale, innerRadius, outerRadius }: PolarGridProps) => {\n    const theme = useTheme()\n\n    const angles = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((angleValue, index) => ({\n            id: index,\n            angle: scale(angleValue) - 90,\n        }))\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        { id: number; angle: number },\n        { angle: number; opacity: number }\n    >(angles, {\n        keys: item => item.id,\n        initial: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        from: item => ({\n            angle: item.angle,\n            opacity: 0,\n        }),\n        enter: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        update: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        leave: item => ({\n            angle: item.angle,\n            opacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, angle) => (\n                <animated.g\n                    key={angle.id}\n                    transform={style.angle.to(v => `rotate(${v})`)}\n                    opacity={style.opacity}\n                >\n                    <line\n                        x1={innerRadius}\n                        x2={outerRadius}\n                        {...(theme.grid.line as SVGProps<SVGLineElement>)}\n                    />\n                </animated.g>\n            ))}\n        </>\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { ArcLine } from '@nivo/arcs'\n\ninterface CircularGridProps {\n    scale: AnyScale\n    startAngle: number\n    endAngle: number\n}\n\nexport const CircularGrid = ({\n    scale,\n    startAngle: originalStartAngle,\n    endAngle: originalEndAngle,\n}: CircularGridProps) => {\n    const theme = useTheme()\n\n    const startAngle = originalStartAngle - 90\n    const endAngle = originalEndAngle - 90\n\n    const radii = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => {\n            let radius = scale(value) as number\n            if ('bandwidth' in scale) {\n                radius += scale.bandwidth() / 2\n            }\n\n            return {\n                id: index,\n                radius,\n            }\n        })\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        { id: number; radius: number },\n        { radius: number; startAngle: number; endAngle: number; opacity: number }\n    >(radii, {\n        keys: item => item.id,\n        initial: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        from: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 0,\n        }),\n        enter: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        update: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        leave: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, item) => (\n                <ArcLine\n                    key={item.id}\n                    animated={style}\n                    {...(theme.grid.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n                    strokeOpacity={style.opacity}\n                    fill=\"none\"\n                />\n            ))}\n        </>\n    )\n}\n","import { AnyScale } from '@nivo/scales'\nimport { RadialGrid } from './RadialGrid'\nimport { CircularGrid } from './CircularGrid'\n\ninterface PolarGridProps {\n    center: [number, number]\n    enableRadialGrid: boolean\n    enableCircularGrid: boolean\n    angleScale: AnyScale\n    radiusScale: AnyScale\n    startAngle: number\n    endAngle: number\n}\n\nexport const PolarGrid = ({\n    center,\n    enableRadialGrid,\n    enableCircularGrid,\n    angleScale,\n    radiusScale,\n    startAngle,\n    endAngle,\n}: PolarGridProps) => {\n    const innerRadius = Math.min(...radiusScale.range())\n    const outerRadius = Math.max(...radiusScale.range())\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {enableRadialGrid && (\n                <RadialGrid\n                    scale={angleScale}\n                    innerRadius={innerRadius}\n                    outerRadius={outerRadius}\n                />\n            )}\n            {enableCircularGrid && (\n                <CircularGrid scale={radiusScale} startAngle={startAngle} endAngle={endAngle} />\n            )}\n        </g>\n    )\n}\n","import { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { RadialAxisTickProps } from './types'\n\nexport const RadialAxisTick = ({\n    label,\n    textAnchor,\n    animated: animatedProps,\n}: RadialAxisTickProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g\n            opacity={animatedProps.opacity}\n            transform={to(\n                [animatedProps.y, animatedProps.rotation],\n                (y, rotation) => `translate(${y}, 0) rotate(${rotation})`\n            )}\n        >\n            <animated.line x2={animatedProps.length} style={theme.axis.ticks.line} />\n            <animated.text\n                dx={animatedProps.textX}\n                textAnchor={textAnchor}\n                dominantBaseline=\"central\"\n                style={theme.axis.ticks.text}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { createElement, useMemo } from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useMotionConfig, normalizeAngle } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { RadialAxisConfig, RadialAxisTickAnimatedProps } from './types'\nimport { RadialAxisTick } from './RadialAxisTick'\n\ntype RadialAxisProps = {\n    type: 'start' | 'end'\n    center: [number, number]\n    angle: number\n    scale: AnyScale\n} & RadialAxisConfig\n\nexport const RadialAxis = ({\n    type,\n    center,\n    angle: rawAngle,\n    scale,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation: extraRotation = 0,\n    tickComponent = RadialAxisTick,\n}: RadialAxisProps) => {\n    const angle = normalizeAngle(rawAngle)\n\n    let textAnchor: 'start' | 'end'\n    let lineX: number\n    let textX: number\n    let tickRotation: number\n\n    if (type === 'start') {\n        tickRotation = 90 + extraRotation\n        if (angle <= 90) {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n        } else if (angle < 270) {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n            tickRotation -= 180\n        } else {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n        }\n    } else {\n        tickRotation = 90 + extraRotation\n        if (angle < 90) {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n        } else if (angle < 270) {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n            tickRotation -= 180\n        } else {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n        }\n    }\n\n    const ticks = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => {\n            let position = scale(value) as number\n            if ('bandwidth' in scale) {\n                position += scale.bandwidth() / 2\n            }\n\n            return {\n                key: index,\n                label: value,\n                position,\n            }\n        })\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const spring = useSpring<{ rotation: string }>({\n        rotation: rawAngle - 90,\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    const transition = useTransition<typeof ticks[0], RadialAxisTickAnimatedProps>(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        from: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 0,\n        }),\n        enter: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        update: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        leave: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 0,\n        }),\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    return (\n        <g transform={`translate(${center[0]}, ${center[1]})`}>\n            <animated.g transform={spring.rotation.to(value => `rotate(${value})`)}>\n                {transition((animatedProps, tick) =>\n                    createElement(tickComponent, {\n                        key: tick.key,\n                        label: tick.label,\n                        y: tick.position,\n                        textX,\n                        rotation: tickRotation,\n                        length: lineX,\n                        textAnchor,\n                        animated: animatedProps,\n                    })\n                )}\n            </animated.g>\n        </g>\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { RadialBarDatum, RadialBarTooltipProps } from './types'\n\nexport const RadialBarTooltip = <D extends RadialBarDatum>({ bar }: RadialBarTooltipProps<D>) => {\n    return (\n        <BasicTooltip\n            enableChip\n            id={\n                <span>\n                    {bar.category} - {bar.groupId}\n                </span>\n            }\n            value={bar.formattedValue}\n            color={bar.color}\n        />\n    )\n}\n","import { InheritedColorConfig } from '@nivo/colors'\nimport { ComputedBar, RadialBarLayerId } from './types'\nimport { RadialBarTooltip } from './RadialBarTooltip'\n\nexport const commonDefaultProps = {\n    maxValue: 'auto' as const,\n\n    layers: ['grid', 'tracks', 'bars', 'labels', 'legends'] as RadialBarLayerId[],\n\n    startAngle: 0,\n    endAngle: 270,\n    innerRadius: 0.3,\n    padding: 0.2,\n    padAngle: 0,\n    cornerRadius: 0,\n\n    enableTracks: true,\n    tracksColor: 'rgba(0, 0, 0, .15)',\n\n    enableRadialGrid: true,\n    enableCircularGrid: true,\n    radialAxisStart: {},\n    radialAxisEnd: null,\n    circularAxisInner: null,\n    circularAxisOuter: {},\n\n    colors: { scheme: 'nivo' as const },\n    borderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 1]] } as InheritedColorConfig<ComputedBar>,\n\n    enableLabels: false,\n    label: 'formattedValue',\n    labelsSkipAngle: 10,\n    labelsRadiusOffset: 0.5,\n    labelsTextColor: { theme: 'labels.text.fill' },\n\n    isInteractive: true,\n    tooltip: RadialBarTooltip,\n\n    legends: [],\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n    transitionMode: 'centerRadius' as const,\n\n    renderWrapper: true,\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n}\n","import { createElement, MouseEvent, useCallback } from 'react'\nimport { ArcsLayer, ArcGenerator } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedBar, RadialBarCommonProps, RadialBarDatum } from './types'\n\ninterface RadialBarArcsProps<D extends RadialBarDatum> {\n    center: [number, number]\n    bars: ComputedBar<D>[]\n    borderWidth: RadialBarCommonProps<D>['borderWidth']\n    borderColor: RadialBarCommonProps<D>['borderColor']\n    arcGenerator: ArcGenerator\n    isInteractive: RadialBarCommonProps<D>['isInteractive']\n    tooltip: RadialBarCommonProps<D>['tooltip']\n    onClick?: RadialBarCommonProps<D>['onClick']\n    onMouseEnter?: RadialBarCommonProps<D>['onMouseEnter']\n    onMouseMove?: RadialBarCommonProps<D>['onMouseMove']\n    onMouseLeave?: RadialBarCommonProps<D>['onMouseLeave']\n    transitionMode: RadialBarCommonProps<D>['transitionMode']\n}\n\nexport const RadialBarArcs = <D extends RadialBarDatum>({\n    center,\n    bars,\n    borderWidth,\n    borderColor,\n    arcGenerator,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode,\n}: RadialBarArcsProps<D>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            onClick?.(bar, event)\n        },\n        [onClick]\n    )\n\n    const handleMouseEnter = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { bar }), event)\n            onMouseEnter?.(bar, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { bar }), event)\n            onMouseMove?.(bar, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(bar, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    return (\n        <ArcsLayer<ComputedBar<D>>\n            center={center}\n            data={bars}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { ArcGenerator, ArcsLayer, ArcTransitionMode } from '@nivo/arcs'\nimport { RadialBarTrackDatum } from './types'\n\ninterface RadialBarTracksProps {\n    center: [number, number]\n    tracks: RadialBarTrackDatum[]\n    arcGenerator: ArcGenerator\n    transitionMode: ArcTransitionMode\n}\n\nexport const RadialBarTracks = ({\n    center,\n    tracks,\n    arcGenerator,\n    transitionMode,\n}: RadialBarTracksProps) => {\n    return (\n        <ArcsLayer<RadialBarTrackDatum>\n            center={center}\n            data={tracks}\n            arcGenerator={arcGenerator}\n            borderWidth={0}\n            borderColor=\"none\"\n            transitionMode={transitionMode}\n        />\n    )\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    Container,\n    useDimensions,\n    SvgWrapper,\n    clampArc,\n    // @ts-ignore\n    bindDefs,\n} from '@nivo/core'\n\nimport { ArcLabelsLayer } from '@nivo/arcs'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { PolarGrid, RadialAxis, CircularAxis } from '@nivo/polar-axes'\nimport { RadialBarLayerId, RadialBarSvgProps, ComputedBar, RadialBarDatum } from './types'\nimport { svgDefaultProps } from './props'\nimport { useRadialBar } from './hooks'\nimport { RadialBarArcs } from './RadialBarArcs'\nimport { RadialBarTracks } from './RadialBarTracks'\n\ntype InnerRadialBarProps<D extends RadialBarDatum = RadialBarDatum> = Omit<\n    RadialBarSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerRadialBar = <D extends RadialBarDatum>({\n    data,\n    maxValue = svgDefaultProps.maxValue,\n    valueFormat,\n    startAngle: originalStartAngle = svgDefaultProps.startAngle,\n    endAngle: originalEndAngle = svgDefaultProps.endAngle,\n    innerRadius: innerRadiusRatio = svgDefaultProps.innerRadius,\n    padding = svgDefaultProps.padding,\n    padAngle = svgDefaultProps.padAngle,\n    cornerRadius = svgDefaultProps.cornerRadius,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    enableTracks = svgDefaultProps.enableTracks,\n    tracksColor = svgDefaultProps.tracksColor,\n    enableRadialGrid = svgDefaultProps.enableRadialGrid,\n    enableCircularGrid = svgDefaultProps.enableCircularGrid,\n    radialAxisStart = svgDefaultProps.radialAxisStart,\n    radialAxisEnd = svgDefaultProps.radialAxisEnd,\n    circularAxisInner = svgDefaultProps.circularAxisInner,\n    circularAxisOuter = svgDefaultProps.circularAxisOuter,\n    colors = svgDefaultProps.colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    enableLabels = svgDefaultProps.enableLabels,\n    label = svgDefaultProps.label,\n    labelsSkipAngle = svgDefaultProps.labelsSkipAngle,\n    labelsRadiusOffset = svgDefaultProps.labelsRadiusOffset,\n    labelsTextColor = svgDefaultProps.labelsTextColor,\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode = svgDefaultProps.transitionMode,\n    legends = svgDefaultProps.legends,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerRadialBarProps<D>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const [startAngle, endAngle] = clampArc(originalStartAngle, originalEndAngle)\n\n    const {\n        center,\n        innerRadius,\n        outerRadius,\n        bars,\n        arcGenerator,\n        radiusScale,\n        valueScale,\n        tracks,\n        legendData,\n        customLayerProps,\n    } = useRadialBar<D>({\n        data,\n        maxValue,\n        valueFormat,\n        startAngle,\n        endAngle,\n        innerRadiusRatio,\n        padding,\n        padAngle,\n        cornerRadius,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        tracksColor,\n    })\n\n    const layerById: Record<RadialBarLayerId, ReactNode> = {\n        grid: null,\n        tracks: null,\n        bars: null,\n        labels: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Fragment key=\"grid\">\n                <PolarGrid\n                    center={center}\n                    enableRadialGrid={enableRadialGrid}\n                    enableCircularGrid={enableCircularGrid}\n                    angleScale={valueScale}\n                    radiusScale={radiusScale}\n                    startAngle={startAngle}\n                    endAngle={endAngle}\n                />\n                {radialAxisStart && (\n                    <RadialAxis\n                        type=\"start\"\n                        center={center}\n                        angle={Math.min(startAngle, endAngle)}\n                        scale={radiusScale}\n                        {...radialAxisStart}\n                    />\n                )}\n                {radialAxisEnd && (\n                    <RadialAxis\n                        type=\"end\"\n                        center={center}\n                        angle={Math.max(startAngle, endAngle)}\n                        scale={radiusScale}\n                        {...radialAxisEnd}\n                    />\n                )}\n                {circularAxisInner && (\n                    <CircularAxis\n                        type=\"inner\"\n                        center={center}\n                        radius={innerRadius}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        scale={valueScale}\n                        {...circularAxisInner}\n                    />\n                )}\n                {circularAxisOuter && (\n                    <CircularAxis\n                        type=\"outer\"\n                        center={center}\n                        radius={outerRadius}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        scale={valueScale}\n                        {...circularAxisOuter}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('tracks') && enableTracks) {\n        layerById.tracks = (\n            <RadialBarTracks\n                key=\"tracks\"\n                center={center}\n                tracks={tracks}\n                arcGenerator={arcGenerator}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <RadialBarArcs<D>\n                key=\"bars\"\n                center={center}\n                bars={bars}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                arcGenerator={arcGenerator}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (layers.includes('labels') && enableLabels) {\n        layerById.labels = (\n            <ArcLabelsLayer<ComputedBar<D>>\n                key=\"labels\"\n                center={center}\n                data={bars}\n                label={label}\n                radiusOffset={labelsRadiusOffset}\n                skipAngle={labelsSkipAngle}\n                textColor={labelsTextColor}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (layers.includes('legends') && legends.length > 0) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'fill',\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const RadialBar = <D extends RadialBarDatum = RadialBarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: RadialBarSvgProps<D>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerRadialBar<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { RadialBarDatum, RadialBarSvgProps } from './types'\nimport { RadialBar } from './RadialBar'\n\nexport const ResponsiveRadialBar = <D extends RadialBarDatum = RadialBarDatum>(\n    props: Omit<RadialBarSvgProps<D>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <RadialBar<D> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n"],"names":["day","date","setHours","step","setDate","getDate","start","end","getTimezoneOffset","days","range","ComponentHeader","memo","chartClass","tags","Container","Title","Tags","map","tag","Tag","styled","media","theme","colors","background","accent","ComponentPage","dimensions","headerHeight","topCardShadow","miniNavWidth","ComponentSettings","flavors","currentFlavor","settings","onChange","groups","group","Group","name","controls","properties","cardBackground","text","gradientColor0","gradientColor1","extendedTheme","extendDefaultTheme","baseDefaultTheme","axisDefaults","domain","line","stroke","strokeWidth","axis","legend","fontSize","fill","ticks","gridDefaults","grid","legendsDefaults","title","legends","annotationsDefaults","annotations","outlineWidth","outlineColor","outlineOpacity","link","outline","symbol","tooltipDefaults","container","color","textColor","basic","chip","table","tableCell","tableCellValue","defaultTheme","tooltip","OPEN_ALL_BY_DEFAULTS","fontSizeProp","key","type","help","control","min","max","textProp","isOpenedByDefault","props","themeProps","ThemedBar","margin","top","right","bottom","left","data","id","value","colorBy","animate","enableGridX","axisBottom","legendPosition","legendOffset","axisLeft","anchor","translateY","itemWidth","itemHeight","symbolSize","direction","label","colorSchemes","ThemedHeatMap","useMemo","generateXYSeries","serieIds","x","values","y","length","NaN","round","scheme","minValue","maxValue","inactiveOpacity","xOuterPadding","yOuterPadding","axisTop","translateX","thickness","match","offset","borderRadius","noteX","noteY","abs","note","ThemedLine","enablePoints","enablePointLabel","pointSize","ThemedRadialBar","useState","setTheme","mode","setMode","Layout","Seo","Description","Markdown","source","Charts","Nav","NavItem","isCurrent","onClick","Code","JSON","stringify","border","highlight","plain","backgroundColor","randColor","Math","random","countryCodes","names","programmingLanguages","generateBulletData","subtitle","rangeCount","measureCount","markerCount","float","ranges","reduce","remaining","acc","measures","markers","generateChordData","keys","size","maxSize","selectedKeys","slice","matrix","generateNetworkData","rootSize","midSize","leafSize","minMidNodes","maxMidNodes","minLeaves","maxLeaves","rootNode","height","nodes","Array","from","_","k","links","extraNodes","forEach","push","target","distance","concat","generateParallelCoordinatesData","shuffle","availableNodes","n","getNodeTargets","currentPath","targets","filter","Error","includes","join","targetId","getNodesTargets","targetsById","generateSankeyData","nodeCount","maxIterations","Object","assign","node","nodeColor","randId","randomPrice","randomVolume","randomCategory","generateSwarmPlotData","categoryCount","groupIndex","price","index","datum","volume","categories","randomizeSwarmPlotData","previousData","d","getValueGenerator","config","generator","xLength","getX","getY","serieId","generateProgrammingLanguageStats","shouldShuffle","limit","langs","sets","language","uniqRand","used","randCountryCode","generateDrinkStats","xSize","types","country","find","generateSeries","ids","xKeys","generateDayCounts","to","timeDays","dayFormat","timeFormat","generateOrderedDayCounts","generateCountriesData","withColors","libTreeItems","generateLibTree","children","tree","i","leaf","loc","wines","wineTastes","generateWinesTastes","randMin","randMax","taste","wine","commonDefaultProps","layers","forceSquare","xInnerPadding","yInnerPadding","sizeVariation","opacity","activeOpacity","borderWidth","borderColor","modifiers","enableGridY","enableLabels","labelTextColor","emptyColor","isInteractive","hoverTarget","cell","formattedValue","_jsx","BasicTooltip","enableChip","motionConfig","svgDefaultProps","axisRight","cellComponent","canvasDefaultProps","renderCell","pixelRatio","window","devicePixelRatio","computeCells","_width","width","_height","xValuesSet","Set","allValues","cells","serie","add","xValues","rows","columns","offsetX","offsetY","cellWidth","cellHeight","cellSize","computeLayout","xScale","castBandScale","scaleBand","paddingOuter","paddingInner","yScale","bandwidth","cellsWithPosition","getCellAnnotationPosition","getCellAnnotationDimensions","useComputeCells","isHoverTargetByType","current","row","column","rowColumn","useCellsStyle","valueFormat","activeIds","getSize","scale","scaleLinear","sizes","computeSizeScale","colorScale","getContinuousColorScale","getColor","useCallback","useTheme","getBorderColor","useInheritedColor","getLabelTextColor","formatValue","useValueFormatter","getLabel","usePropertyAccessor","computedOpacity","sizeMultiplier","computedCell","useHeatMap","activeCell","setActiveCell","isHoverTarget","useCellAnnotations","useAnnotations","getPosition","getDimensions","HeatMapCellRect","animatedProps","onMouseEnter","onMouseMove","onMouseLeave","handlers","_jsxs","animated","g","style","cursor","transform","rect","rx","ry","textAnchor","dominantBaseline","labels","userSelect","HeatMapCellCircle","circle","r","fillOpacity","undefined","enterTransition","regularTransition","exitTransition","HeatMapCells","Cell","useMotionConfig","springConfig","transition","useTransition","initial","enter","update","leave","immediate","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleClick","HeatMapCellAnnotations","boundAnnotations","annotation","Annotation","InnerHeatMap","partialMargin","role","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","_margin","_innerWidth","innerWidth","_innerHeight","innerHeight","outerWidth","outerHeight","layerById","axes","Grid","Axes","Fragment","_createElement","AnchoredContinuousColorsLegendSvg","containerWidth","containerHeight","customLayerProps","SvgWrapper","layer","HeatMap","renderWrapper","otherProps","ResponsiveHeatMap","ResponsiveWrapper","renderRect","ctx","save","globalAlpha","fillStyle","strokeStyle","lineWidth","fillRect","strokeRect","font","fontWeight","fontFamily","textAlign","textBaseline","fillText","restore","renderCircle","radius","beginPath","arc","PI","InnerHeatMapCanvas","_renderCell","canvasEl","useRef","computedAnnotations","useComputedAnnotations","useEffect","getContext","translate","renderGridLinesToCanvas","renderAxesToCanvas","renderContinuousColorLegendToCanvas","renderAnnotationsToCanvas","handleMouseHover","e","getRelativeCursor","isCursorInRect","c","ref","HeatMapCanvas","ResponsiveHeatMapCanvas","CircularAxisTick","x1","y1","x2","y2","dx","textX","dy","textY","getLinePositions","angle","innerRadius","outerRadius","positionFromAngle","degreesToRadians","getTextPosition","position","CircularAxis","center","originalStartAngle","startAngle","originalEndAngle","endAngle","tickSize","tickPadding","tickComponent","spring","useSpring","getScaleTicks","textRadius","tick","ArcLine","RadialGrid","angles","angleValue","item","v","CircularGrid","radii","strokeOpacity","PolarGrid","enableRadialGrid","enableCircularGrid","angleScale","radiusScale","RadialAxisTick","rotation","RadialAxis","lineX","tickRotation","rawAngle","extraRotation","normalizeAngle","padding","padAngle","cornerRadius","enableTracks","tracksColor","radialAxisStart","radialAxisEnd","circularAxisInner","circularAxisOuter","labelsSkipAngle","labelsRadiusOffset","labelsTextColor","bar","category","groupId","defs","transitionMode","RadialBarArcs","bars","arcGenerator","ArcsLayer","RadialBarTracks","tracks","InnerRadialBar","innerRadiusRatio","clampArc","maxValueDirective","useOrdinalColorScale","result","groupTotalValue","total","valueScale","castLinearScale","d3Arc","innerBars","currentValue","arcInnerRadius","arcOuterRadius","stackedValue","computedDatum","startAngleRadians","endAngleRadians","trackRadius","legendData","barWithCategory","ArcLabelsLayer","radiusOffset","skipAngle","BoxLegendSvg","boundDefs","bindDefs","dataKey","targetKey","RadialBar","ResponsiveRadialBar","copyArray","shuffleSelf","module","exports","array","baseFor","object","iteratee","nativeFloor","floor","nativeRandom","lower","upper","collection","arrayMap","baseRandom","lastIndex","rand","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","temp","arrayShuffle","baseShuffle","isArray","baseValues"],"sourceRoot":""}