{"version":3,"file":"c46004bf0c87c9b2cb2e65443efe604c9ed83710-f27b6e65137e32812439.js","mappings":"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","sources":["webpack://nivo-website/./src/data/components/waffle/CustomTooltip.tsx","webpack://nivo-website/./src/data/components/waffle/mapper.tsx","webpack://nivo-website/./src/data/components/waffle/props.ts","webpack://nivo-website/./src/lib/settings.ts","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/props.ts"],"sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n`\nconst TooltipKey = styled.span`\n    font-weight: 600;\n`\nconst TooltipValue = styled.span``\n\nconst CustomTooltip = node => (\n    <TooltipWrapper style={{ color: node.color }}>\n        <TooltipKey>label</TooltipKey>\n        <TooltipValue>{node.label}</TooltipValue>\n        <TooltipKey>id</TooltipKey>\n        <TooltipValue>{node.id}</TooltipValue>\n        <TooltipKey>value</TooltipKey>\n        <TooltipValue>{node.value}</TooltipValue>\n        <TooltipKey>position</TooltipKey>\n        <TooltipValue>{node.position}</TooltipValue>\n        <TooltipKey>groupIndex</TooltipKey>\n        <TooltipValue>{node.groupIndex}</TooltipValue>\n        <TooltipKey>row</TooltipKey>\n        <TooltipValue>{node.row}</TooltipValue>\n        <TooltipKey>column</TooltipKey>\n        <TooltipValue>{node.column}</TooltipValue>\n        <TooltipKey>color</TooltipKey>\n        <TooltipValue>{node.color}</TooltipValue>\n    </TooltipWrapper>\n)\n\nexport default CustomTooltip\n","import React from 'react'\nimport { settingsMapper } from '../../../lib/settings'\nimport CustomTooltip from './CustomTooltip'\n\nconst CustomSvgCell = ({\n    position,\n    size,\n    x,\n    y,\n    color,\n    fill,\n    opacity,\n    borderWidth,\n    borderColor,\n    data,\n    onHover,\n    onLeave,\n    onClick,\n}) => (\n    <circle\n        r={size / 2}\n        cx={x + size / 2}\n        cy={y + size / 2}\n        fill={fill || color}\n        strokeWidth={borderWidth}\n        stroke={borderColor}\n        opacity={opacity}\n        onMouseEnter={onHover}\n        onMouseMove={onHover}\n        onMouseLeave={onLeave}\n        onClick={event => {\n            onClick({ position, color, x, y, data }, event)\n        }}\n    />\n)\n\nconst CustomHtmlCell = ({\n    position,\n    size,\n    x,\n    y,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    data,\n    onHover,\n    onLeave,\n    onClick,\n}) => (\n    <div\n        style={{\n            borderRadius: `${size / 2}px 0 ${size / 2}px 0`,\n            position: 'absolute',\n            top: y,\n            left: x,\n            width: size,\n            height: size,\n            background: color,\n            opacity,\n            boxSizing: 'content-box',\n            borderStyle: 'solid',\n            borderWidth: `${borderWidth}px`,\n            borderColor,\n        }}\n        onMouseEnter={onHover}\n        onMouseMove={onHover}\n        onMouseLeave={onLeave}\n        onClick={event => {\n            onClick({ position, color, x, y, data }, event)\n        }}\n    />\n)\n\nexport default settingsMapper(\n    {\n        cellComponent: (value, values, options) => {\n            if (value === `Custom(props) => (…)`) {\n                if (options.component === 'Waffle') return CustomSvgCell\n                return CustomHtmlCell\n            }\n            return undefined\n        },\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return null\n\n            return CustomTooltip\n        },\n    },\n    {\n        exclude: ['custom tooltip example'],\n    }\n)\n","// @ts-ignore\nimport { WaffleDefaultProps } from '@nivo/waffle'\nimport {\n    themeProperty,\n    motionProperties,\n    defsProperties,\n    getLegendsProps,\n    groupProperties,\n} from '../../../lib/componentProperties'\nimport { chartDimensions, ordinalColors, isInteractive } from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg', 'html', 'canvas']\n\nconst defaults = WaffleDefaultProps\n\nconst props: ChartProperty[] = [\n    {\n        key: 'total',\n        group: 'Base',\n        type: 'number',\n        required: true,\n        help: 'Max value.',\n        description: 'Max value, ratio will be computed against this value for each datum.',\n        flavors: allFlavors,\n    },\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                id:    string | number\n                value: number\n                label: string | number\n            }>\n            \\`\\`\\`\n        `,\n        type: 'object[]',\n        required: true,\n        flavors: allFlavors,\n    },\n    // {\n    //     key: 'hiddenIds',\n    //     type: 'Array<string | number>',\n    //     help: 'Hide parts of the data by id',\n    //     description: `\n    //         Hide parts of the data by id, this can be used\n    //         to implement toggle. Note that the datum will\n    //         still be visible in legends, if you want\n    //         to completely remove a datum from the data set,\n    //         you'll have to filter the data before passing\n    //         it to the component.\n    //     `,\n    //     required: false,\n    //     defaultValue: defaults.hiddenIds,\n    // },\n    {\n        key: 'rows',\n        group: 'Base',\n        type: 'number',\n        help: 'Number of rows.',\n        required: true,\n        flavors: allFlavors,\n        control: {\n            type: 'range',\n            min: 1,\n            max: 100,\n        },\n    },\n    {\n        key: 'columns',\n        group: 'Base',\n        type: 'number',\n        help: 'Number of columns.',\n        required: true,\n        flavors: allFlavors,\n        control: {\n            type: 'range',\n            min: 1,\n            max: 100,\n        },\n    },\n    {\n        key: 'fillDirection',\n        group: 'Base',\n        type: 'string',\n        required: false,\n        help: `How to fill the waffle.`,\n        flavors: allFlavors,\n        defaultValue: defaults.fillDirection,\n        control: {\n            type: 'choices',\n            choices: [\n                { label: 'top', value: 'top' },\n                { label: 'right', value: 'right' },\n                { label: 'bottom', value: 'bottom' },\n                { label: 'left', value: 'left' },\n            ],\n        },\n    },\n    {\n        key: 'padding',\n        group: 'Base',\n        type: 'number',\n        help: 'Padding between each cell.',\n        required: true,\n        flavors: allFlavors,\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 10,\n        },\n    },\n    ...chartDimensions(allFlavors),\n    themeProperty(['svg', 'html', 'canvas']),\n    {\n        key: 'cellComponent',\n        flavors: ['svg', 'html'],\n        help: 'Override default cell component.',\n        type: 'Function',\n        required: false,\n        group: 'Style',\n        control: {\n            type: 'choices',\n            choices: ['default', 'Custom(props) => (…)'].map(key => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    ordinalColors({\n        flavors: allFlavors,\n        defaultValue: defaults.colors,\n    }),\n    {\n        key: 'emptyColor',\n        group: 'Style',\n        help: 'Defines empty cells color.',\n        type: 'string',\n        required: false,\n        defaultValue: defaults.emptyColor,\n        flavors: allFlavors,\n        control: { type: 'colorPicker' },\n    },\n    {\n        key: 'emptyOpacity',\n        group: 'Style',\n        help: 'Empty cells opacity.',\n        required: false,\n        defaultValue: defaults.emptyOpacity,\n        type: 'number',\n        flavors: allFlavors,\n        control: { type: 'opacity' },\n    },\n    {\n        key: 'borderWidth',\n        group: 'Style',\n        type: 'number',\n        required: false,\n        help: 'Control cell border width.',\n        defaultValue: defaults.borderWidth,\n        flavors: allFlavors,\n        control: { type: 'lineWidth' },\n    },\n    {\n        key: 'borderColor',\n        group: 'Style',\n        type: 'string | object | Function',\n        required: false,\n        help: 'Method to compute cell border color.',\n        defaultValue: defaults.borderColor,\n        flavors: ['svg', 'html', 'canvas'],\n        control: { type: 'inheritedColor' },\n    },\n    ...defsProperties('Style', ['svg']),\n    isInteractive({\n        flavors: ['svg', 'html', 'canvas'],\n        defaultValue: defaults.isInteractive,\n    }),\n    {\n        key: 'onClick',\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'onClick handler, it receives clicked node data and style plus mouse event.',\n        flavors: ['svg', 'html', 'canvas'],\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom tooltip component',\n        flavors: allFlavors,\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will\n            receive the following data:\n            \\`\\`\\`\n            {\n                id:         {string|number},\n                value:      number,\n                label:      {string|number},\n                color:      string,\n                position:   number,\n                row:        number,\n                column:     number,\n                groupIndex: number,\n                startAt:    number,\n                endAt:      number,\n            }\n            \\`\\`\\`\n            You can customize the tooltip style\n            using the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        group: 'Interactivity',\n        type: 'boolean',\n        required: false,\n        control: { type: 'switch' },\n        help: 'Showcase custom tooltip.',\n        flavors: allFlavors,\n    },\n    {\n        key: 'legends',\n        group: 'Legends',\n        type: 'object[]',\n        required: false,\n        help: `Optional chart's legends.`,\n        flavors: ['svg', 'canvas'],\n        control: {\n            type: 'array',\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            defaults: {\n                anchor: 'left',\n                direction: 'column',\n                justify: false,\n                translateX: -100,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 4,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                itemTextColor: '#777',\n                onClick: (data: any) => {\n                    console.log(JSON.stringify(data, null, '    '))\n                },\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemTextColor: '#000',\n                            itemBackground: '#f7fafb',\n                        },\n                    },\n                ],\n            },\n        },\n    },\n    ...motionProperties(['svg', 'html'], defaults),\n]\n\nexport const groups = groupProperties(props)\n","import omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\n\nexport const settingsMapper =\n    (mapping: any, { exclude = [] }: { exclude?: string[] } = {}) =>\n    (settings: any, options: any = {}) => {\n        const overrides: any = {}\n\n        Object.keys(settings).forEach(key => {\n            if (mapping[key]) {\n                overrides[key] = mapping[key](settings[key], settings, options)\n            }\n        })\n\n        return {\n            ...omit(settings, exclude),\n            ...overrides,\n        }\n    }\n\nexport const mapAxis = (type: string) => (value: any, settings: any) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }: { format: any; enabled: boolean }) =>\n    enabled ? format : undefined\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { BoxLegendSvgProps, LegendAnchor, LegendItemDirection } from './types'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { computeDimensions, computePositionFromAnchor, computeItemLayout } from './compute'\nimport { LegendCanvasProps } from './types'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n        if (reverse === true) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n"],"names":["TooltipWrapper","styled","TooltipKey","TooltipValue","node","style","color","label","id","value","position","groupIndex","row","column","CustomSvgCell","size","x","y","fill","opacity","borderWidth","borderColor","data","onHover","onLeave","onClick","r","cx","cy","strokeWidth","stroke","onMouseEnter","onMouseMove","onMouseLeave","event","CustomHtmlCell","borderRadius","top","left","width","height","background","boxSizing","borderStyle","settingsMapper","cellComponent","values","options","component","tooltip","CustomTooltip","exclude","allFlavors","defaults","WaffleDefaultProps","props","key","group","type","required","help","description","flavors","control","min","max","defaultValue","fillDirection","choices","unit","chartDimensions","themeProperty","map","ordinalColors","colors","emptyColor","emptyOpacity","defsProperties","isInteractive","getLegendsProps","shouldCreate","addLabel","shouldRemove","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","itemTextColor","console","log","JSON","stringify","effects","on","itemBackground","motionProperties","groups","groupProperties","mapping","settings","overrides","Object","keys","forEach","omit","mapAxis","upperFirst","enable","mapFormat","format","enabled","undefined","zeroPadding","right","bottom","computeDimensions","item","_padding","padding","itemCount","Array","isArray","Error","horizontalPadding","verticalPadding","spacing","computePositionFromAnchor","containerWidth","containerHeight","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","symbolSpacing","symbolByShape","circle","_jsx","pointerEvents","diamond","transform","d","square","triangle","LegendSvgItem","textColor","symbolShape","symbolBorderWidth","symbolBorderColor","toggleSerie","useState","setStyle","theme","useTheme","handleMouseEnter","useCallback","filter","reduce","acc","effect","handleMouseLeave","some","handler","SymbolShape","_jsxs","itemOpacity","cursor","e","React","hidden","legends","symbol","textAnchor","text","dominantBaseline","userSelect","LegendSvg","length","xStep","yStep","i","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","ctx","save","translate","font","fontSize","fontFamily","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","useQuantizeColorScaleLegendData","scale","overriddenDomain","domain","reverse","valueFormat","v","separator","useMemo","items","range","domainValue","index","invertExtent","extent","LegendPropShape","PropTypes","isRequired"],"sourceRoot":""}