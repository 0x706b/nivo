{"version":3,"sources":["webpack:///./src/data/components/treemap/mapper.js","webpack:///./src/data/components/treemap/generator.js","webpack:///./src/data/components/treemap/props.js","webpack:///./src/pages/treemap/html.js"],"names":["settingsMapper","label","value","node","id","formattedValue","parentLabel","pathComponents","join","valueFormat","mapFormat","generateLightDataSet","root","generateLibTree","generateHeavyDataSet","children","range","map","i","random","nodeCount","defaults","TreeMapDefaultProps","props","key","group","help","type","required","defaultValue","identity","controlType","description","controlOptions","choices","leavesOnly","innerPadding","unit","min","max","outerPadding","enableControlForFlavors","flavors","colors","nodeOpacity","borderWidth","borderColor","defsProperties","enableLabel","prop","orientLabel","enableParentLabel","parentLabelSize","parentLabelPosition","parentLabelPadding","isInteractive","motionProperties","groups","groupProperties","initialProperties","format","enabled","tile","margin","top","right","bottom","left","labelSkipSize","labelTextColor","from","modifiers","parentLabelTextColor","scheme","colorBy","animate","motionConfig","TreeMapHtml","name","meta","icon","currentFlavor","properties","defaultProperties","propertiesMapper","mapper","generateData","data","theme","logAction","onClick","color"],"mappings":"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","file":"component---src-pages-treemap-html-js-3271d0d0a867e9fe2d38.js","sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { settingsMapper, mapFormat } from '../../../lib/settings'\n\nexport default settingsMapper({\n    label: value => {\n        if (value === `node => \\`\\${node.id} (\\${node.formattedValue})\\``)\n            return node => `${node.id} (${node.formattedValue})`\n        return value\n    },\n    parentLabel: value => {\n        if (value === `node => node.pathComponents.join(' / ')`)\n            return node => node.pathComponents.join(' / ')\n        return value\n    },\n    valueFormat: mapFormat,\n})\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { generateLibTree } from '@nivo/generators'\nimport range from 'lodash/range'\nimport random from 'lodash/random'\n\nexport const generateLightDataSet = () => ({ root: generateLibTree() })\n\nconst HEAVY_NODE_COUNT = 600\n\nexport const generateHeavyDataSet = () => {\n    const children = range(HEAVY_NODE_COUNT).map(i => ({\n        id: `node.${i}`,\n        value: random(10, 100000),\n    }))\n\n    return {\n        root: {\n            id: 'root',\n            children,\n        },\n        nodeCount: HEAVY_NODE_COUNT,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { TreeMapDefaultProps } from '@nivo/treemap'\nimport { motionProperties, defsProperties, groupProperties } from '../../../lib/componentProperties'\n\nconst defaults = TreeMapDefaultProps\n\nconst props = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'The hierarchical data object.',\n        type: 'object',\n        required: true,\n    },\n    {\n        key: 'identity',\n        group: 'Base',\n        help: 'The key or function to use to retrieve nodes identity.',\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaults.identity,\n    },\n    {\n        key: 'value',\n        group: 'Base',\n        help: 'The key or function to use to retrieve nodes value.',\n        type: 'string | Function',\n        required: false,\n        defaultValue: 'value',\n    },\n    {\n        key: 'valueFormat',\n        help: `\n            Value format supporting d3-format notation, this formatted value\n            will then be used for labels and tooltips.\n        `,\n        type: 'string | Function',\n        required: false,\n        controlType: 'valueFormat',\n        group: 'Base',\n    },\n    {\n        key: 'tile',\n        group: 'Base',\n        help: 'Strategy used to compute nodes.',\n        description: `\n            Strategy used to compute nodes, see\n            [official d3 documentation](https://github.com/mbostock/d3/wiki/Treemap-Layout#mode).\n        `,\n        type: 'string',\n        required: false,\n        defaultValue: 'squarify',\n        controlType: 'choices',\n        controlOptions: {\n            choices: [\n                { label: 'binary', value: 'binary' },\n                { label: 'squarify', value: 'squarify' },\n                { label: 'slice', value: 'slice' },\n                { label: 'dice', value: 'dice' },\n                { label: 'sliceDice', value: 'sliceDice' },\n                {\n                    label: 'resquarify',\n                    value: 'resquarify',\n                },\n            ],\n        },\n    },\n    {\n        key: 'leavesOnly',\n        help: 'Only render leaf nodes (no parent).',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.leavesOnly,\n        controlType: 'switch',\n        group: 'Base',\n    },\n    {\n        key: 'innerPadding',\n        help: 'Padding between parent and child node.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.innerPadding,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 32,\n        },\n    },\n    {\n        key: 'outerPadding',\n        help: 'Padding between parent and child node.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.outerPadding,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 32,\n        },\n    },\n    {\n        key: 'width',\n        group: 'Base',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            not required if using responsive alternative\n            of the component \\`<Responsive*/>\\`.\n        `,\n        type: 'number',\n        required: true,\n    },\n    {\n        key: 'height',\n        group: 'Base',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            not required if using responsive alternative\n            of the component \\`<Responsive*/>\\`.\n        `,\n        type: 'number',\n        required: true,\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        required: false,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    {\n        key: 'colors',\n        help: 'Defines how to compute node color.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: defaults.colors,\n        controlType: 'ordinalColors',\n        group: 'Style',\n    },\n    {\n        key: 'nodeOpacity',\n        help: 'Node opacity (0~1).',\n        required: false,\n        defaultValue: defaults.nodeOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Style',\n    },\n    {\n        key: 'borderWidth',\n        help: 'Control node border width.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.borderWidth,\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute border color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.borderColor,\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'enableLabel',\n        help: 'Enable/disable labels.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableLabel,\n        controlType: 'switch',\n        group: 'Labels',\n    },\n    {\n        key: 'label',\n        help: 'Label accessor.',\n        description:\n            'Defines how to get label text, can be a string (used to access current node property) or a function which will receive the actual node and must return the desired label.',\n        type: 'string | Function',\n        required: false,\n        controlType: 'choices',\n        group: 'Labels',\n        controlOptions: {\n            choices: [\n                'formattedValue',\n                'id',\n                `node => \\`\\${node.id} (\\${node.formattedValue})\\``,\n            ].map(prop => ({\n                label: prop,\n                value: prop,\n            })),\n        },\n    },\n    {\n        key: 'labelSkipSize',\n        help:\n            'Skip label rendering if node minimal side length is lower than given value, 0 to disable.',\n        type: 'number',\n        required: false,\n        controlType: 'range',\n        group: 'Labels',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 100,\n        },\n    },\n    {\n        key: 'orientLabel',\n        help: 'Orient labels according to max node width/height.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.orientLabel,\n        controlType: 'switch',\n        group: 'Labels',\n    },\n    {\n        key: 'labelTextColor',\n        help: 'Method to compute label text color.',\n        type: 'string | object | Function',\n        required: false,\n        controlType: 'inheritedColor',\n        group: 'Labels',\n    },\n    {\n        key: 'enableParentLabel',\n        flavors: ['svg', 'html', 'api'],\n        help: 'Enable/disable labels.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableParentLabel,\n        controlType: 'switch',\n        group: 'Labels',\n    },\n    {\n        key: 'parentLabel',\n        flavors: ['svg', 'html', 'api'],\n        help: 'Parent label accessor.',\n        description:\n            'Defines how to get parent label text, can be a string (used to access current node property) or a function which will receive the actual node and must return the desired label.',\n        type: 'string | Function',\n        required: false,\n        controlType: 'choices',\n        group: 'Labels',\n        controlOptions: {\n            choices: ['id', 'formattedValue', `node => node.pathComponents.join(' / ')`].map(\n                prop => ({\n                    label: prop,\n                    value: prop,\n                })\n            ),\n        },\n    },\n    {\n        key: 'parentLabelSize',\n        flavors: ['svg', 'html', 'api'],\n        help: `Parent label size.`,\n        required: false,\n        defaultValue: defaults.parentLabelSize,\n        type: `number`,\n        controlType: 'range',\n        group: 'Labels',\n        controlOptions: {\n            min: 10,\n            max: 40,\n        },\n    },\n    {\n        key: 'parentLabelPosition',\n        flavors: ['svg', 'html', 'api'],\n        help: 'Parent label position.',\n        type: `'top' | 'right' | 'bottom' | 'left'`,\n        required: false,\n        controlType: 'choices',\n        group: 'Labels',\n        defaultValue: defaults.parentLabelPosition,\n        controlOptions: {\n            choices: ['top', 'right', 'bottom', 'left'].map(prop => ({\n                label: prop,\n                value: prop,\n            })),\n        },\n    },\n    {\n        key: 'parentLabelPadding',\n        flavors: ['svg', 'html', 'api'],\n        help: `Parent label padding.`,\n        required: false,\n        defaultValue: defaults.parentLabelPadding,\n        type: `number`,\n        controlType: 'range',\n        group: 'Labels',\n        controlOptions: {\n            min: 0,\n            max: 20,\n        },\n    },\n    {\n        key: 'parentLabelTextColor',\n        flavors: ['svg', 'html', 'api'],\n        help: 'Method to compute parent label text color.',\n        type: 'string | object | Function',\n        required: false,\n        controlType: 'inheritedColor',\n        group: 'Labels',\n    },\n    {\n        key: 'isInteractive',\n        flavors: ['svg', 'html', 'canvas'],\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.isInteractive,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg', 'html'],\n        group: 'Interactivity',\n        type: '(node, event) => void',\n        help: 'onMouseEnter handler.',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg', 'html', 'canvas'],\n        group: 'Interactivity',\n        type: '(node, event) => void',\n        help: 'onMouseMove handler.',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg', 'html'],\n        group: 'Interactivity',\n        type: '(node, event) => void',\n        help: 'onMouseLeave handler.',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg', 'html', 'canvas'],\n        group: 'Interactivity',\n        type: '(node, event) => void',\n        help: 'onClick handler.',\n        required: false,\n    },\n    ...motionProperties(['svg', 'html', 'canvas'], defaults, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveTreeMapHtml, TreeMapDefaultProps } from '@nivo/treemap'\nimport ComponentTemplate from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/treemap/meta.yml'\nimport mapper from '../../data/components/treemap/mapper'\nimport { groups } from '../../data/components/treemap/props'\nimport { generateLightDataSet } from '../../data/components/treemap/generator'\n\nconst initialProperties = {\n    identity: 'name',\n    value: 'loc',\n    valueFormat: { format: '.02s', enabled: true },\n    tile: TreeMapDefaultProps.tile,\n    leavesOnly: TreeMapDefaultProps.leavesOnly,\n    innerPadding: TreeMapDefaultProps.innerPadding,\n    outerPadding: TreeMapDefaultProps.outerPadding,\n\n    margin: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10,\n    },\n\n    enableLabel: true,\n    label: TreeMapDefaultProps.label,\n    labelSkipSize: 12,\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 2]],\n    },\n    orientLabel: TreeMapDefaultProps.orientLabel,\n    enableParentLabel: TreeMapDefaultProps.enableParentLabel,\n    parentLabel: TreeMapDefaultProps.parentLabel,\n    parentLabelSize: TreeMapDefaultProps.parentLabelSize,\n    parentLabelPosition: TreeMapDefaultProps.parentLabelPosition,\n    parentLabelPadding: TreeMapDefaultProps.parentLabelPadding,\n    parentLabelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 3]],\n    },\n\n    colors: { scheme: 'yellow_orange_red' },\n    colorBy: TreeMapDefaultProps.colorBy,\n    nodeOpacity: TreeMapDefaultProps.nodeOpacity,\n    borderWidth: TreeMapDefaultProps.borderWidth,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.1]],\n    },\n\n    animate: TreeMapDefaultProps.animate,\n    motionConfig: TreeMapDefaultProps.motionConfig,\n\n    isInteractive: TreeMapDefaultProps.isInteractive,\n}\n\nconst TreeMapHtml = () => {\n    return (\n        <ComponentTemplate\n            name=\"TreeMapHtml\"\n            meta={meta.TreeMapHtml}\n            icon=\"treemap\"\n            flavors={meta.flavors}\n            currentFlavor=\"html\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={TreeMapDefaultProps}\n            propertiesMapper={mapper}\n            generateData={generateLightDataSet}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveTreeMapHtml\n                        data={data.root}\n                        {...properties}\n                        theme={theme}\n                        onClick={node => {\n                            logAction({\n                                type: 'click',\n                                label: `[node] ${node.id}: ${node.formattedValue}`,\n                                color: node.color,\n                                data: node,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default TreeMapHtml\n"],"sourceRoot":""}