{"version":3,"file":"a32d74da6d682f5ea0997cac9142625afda02fac-8899aad903010ba99ae8.js","mappings":"oPAAO,IAAIA,EAAiB,IACjBC,EAAiB,IACjBC,EAAe,KACfC,EAAc,MACdC,EAAe,Q,sDCJ1B,IAAIC,EAAK,IAAIC,KACTC,EAAK,IAAID,KACE,SAASE,EAAYC,EAAQC,EAASC,EAAOC,GAC1D,SAASC,EAASC,GAChB,OAAOL,EAAOK,EAA4B,IAArBC,UAAUC,OAAe,IAAIV,KAAS,IAAIA,MAAMQ,IAAQA,EAsE/E,OAnEAD,EAASI,MAAQ,SAAUH,GACzB,OAAOL,EAAOK,EAAO,IAAIR,MAAMQ,IAAQA,GAGzCD,EAASK,KAAO,SAAUJ,GACxB,OAAOL,EAAOK,EAAO,IAAIR,KAAKQ,EAAO,IAAKJ,EAAQI,EAAM,GAAIL,EAAOK,GAAOA,GAG5ED,EAASM,MAAQ,SAAUL,GACzB,IAAIM,EAAKP,EAASC,GACdO,EAAKR,EAASK,KAAKJ,GACvB,OAAOA,EAAOM,EAAKC,EAAKP,EAAOM,EAAKC,GAGtCR,EAASS,OAAS,SAAUR,EAAMS,GAChC,OAAOb,EAAQI,EAAO,IAAIR,MAAMQ,GAAe,MAARS,EAAe,EAAIC,KAAKP,MAAMM,IAAQT,GAG/ED,EAASY,MAAQ,SAAUC,EAAOC,EAAMJ,GACtC,IACIK,EADAH,EAAQ,GAIZ,GAFAC,EAAQb,EAASK,KAAKQ,GACtBH,EAAe,MAARA,EAAe,EAAIC,KAAKP,MAAMM,KAC/BG,EAAQC,GAAWJ,EAAO,GAAI,OAAOE,EAE3C,GACEA,EAAMI,KAAKD,EAAW,IAAItB,MAAMoB,IAAShB,EAAQgB,EAAOH,GAAOd,EAAOiB,SAC/DE,EAAWF,GAASA,EAAQC,GAErC,OAAOF,GAGTZ,EAASiB,OAAS,SAAUC,GAC1B,OAAOvB,GAAY,SAAUM,GAC3B,GAAIA,GAAQA,EAAM,KAAOL,EAAOK,IAAQiB,EAAKjB,IAC3CA,EAAKkB,QAAQlB,EAAO,MAErB,SAAUA,EAAMS,GACjB,GAAIT,GAAQA,EACV,GAAIS,EAAO,EAAG,OAASA,GAAQ,GAC7B,KAAOb,EAAQI,GAAO,IAAKiB,EAAKjB,UAE3B,OAASS,GAAQ,GACtB,KAAOb,EAAQI,EAAM,IAAMiB,EAAKjB,UAOpCH,IACFE,EAASF,MAAQ,SAAUe,EAAOO,GAGhC,OAFA5B,EAAG2B,SAASN,GAAQnB,EAAGyB,SAASC,GAChCxB,EAAOJ,GAAKI,EAAOF,GACZiB,KAAKP,MAAMN,EAAMN,EAAIE,KAG9BM,EAASqB,MAAQ,SAAUX,GAEzB,OADAA,EAAOC,KAAKP,MAAMM,GACVY,SAASZ,IAAWA,EAAO,EAAcA,EAAO,EAAgBV,EAASiB,OAAOlB,EAAQ,SAAUwB,GACxG,OAAOxB,EAAMwB,GAAKb,GAAS,GACzB,SAAUa,GACZ,OAAOvB,EAASF,MAAM,EAAGyB,GAAKb,GAAS,IAHoBV,EAArB,OAQrCA,I,qCCxET,KAAewB,EAAAA,EAAAA,IAAe,CAC1BC,MAAO,SAAAC,GACH,MAAS,gCAALA,EAAoD,SAAAH,GAAC,OAAOA,EAAEI,GAAT,KAAgBJ,EAAEG,MAAlB,KAClDA,M,0FCUTE,EAAuB,CAAC,MAAO,SAAU,OAEzCC,EAAsB,CACxB,CACIC,IAAK,OACLC,MAAO,OACPC,KAAM,gDACNC,YAAY,gLAKZC,UAAU,EACVC,KAAM,aACNC,QAASR,GAEb,CACIE,IAAK,OACLC,MAAO,OACPC,KAAM,iDACNC,YAAY,soBAoBZC,UAAU,EACVE,QAASR,EACTO,KAAM,YAEV,CACIL,IAAK,cACLC,MAAO,OACPI,KAAM,oBACND,UAAU,EACVF,KAAK,4BACLI,QAASR,IAhDW,QAmDrBS,EAAAA,EAAAA,IAAgBT,GAnDK,CAoDxB,CACIE,IAAK,WACLE,KAAM,iBACNE,UAAU,EACVI,aAAcC,EAAAA,GAAAA,SACdJ,KAAM,SACNJ,MAAO,OACPK,QAASR,EACTY,QAAS,CACLL,KAAM,QACNM,IAAK,EACLC,IAAK,EACLhC,KAAM,MAGd,CACIoB,IAAK,mBACLE,KAAM,sBACNE,UAAU,EACVI,aAAcC,EAAAA,GAAAA,iBACdJ,KAAM,SACNJ,MAAO,OACPK,QAASR,EACTY,QAAS,CACLL,KAAM,QACNM,IAAK,EACLC,IAAK,EACLhC,KAAM,MAGd,CACIoB,IAAK,oBACLE,KAAM,gDACNE,UAAU,EACVI,aAAcC,EAAAA,GAAAA,kBACdJ,KAAM,SACNJ,MAAO,OACPK,QAASR,EACTY,QAAS,CACLL,KAAM,QACNM,IAAK,EACLC,IAAK,EACLhC,KAAM,OAGdiC,EAAAA,EAAAA,IAAcf,IACdgB,EAAAA,EAAAA,IAAc,CACVR,QAASR,EACTU,aAAcC,EAAAA,GAAAA,OACdP,KAAM,iDAEV,CACIF,IAAK,aACLE,KAAM,gBACNE,UAAU,EACVI,aAAcC,EAAAA,GAAAA,WACdJ,KAAM,SACNC,QAASR,EACTY,QAAS,CAAEL,KAAM,WACjBJ,MAAO,SAEX,CACID,IAAK,iBACLE,KAAM,qBACNE,UAAU,EACVI,aAAcC,EAAAA,GAAAA,eACdJ,KAAM,SACNC,QAASR,EACTY,QAAS,CAAEL,KAAM,aACjBJ,MAAO,SAEX,CACID,IAAK,iBACLE,KAAM,qBACNE,UAAU,EACVI,aAAcC,EAAAA,GAAAA,eACdH,QAASR,EACTO,KAAM,6BACNK,QAAS,CAAEL,KAAM,kBACjBJ,MAAO,UAEXc,EAAAA,EAAAA,IAAU,CACNf,IAAK,kBACLgB,OAAQ,UACRf,MAAO,QACPK,QAAS,CAAC,OACVE,aAAcC,EAAAA,GAAAA,kBAElB,CACIT,IAAK,gBACLE,KAAM,mBACNE,UAAU,EACVI,aAAcC,EAAAA,GAAAA,cACdJ,KAAM,SACNC,QAASR,EACTY,QAAS,CAAEL,KAAM,WACjBJ,MAAO,SAEX,CACID,IAAK,oBACLE,KAAM,wBACNE,UAAU,EACVI,aAAcC,EAAAA,GAAAA,kBACdJ,KAAM,SACNK,QAAS,CAAEL,KAAM,aACjBC,QAASR,EACTG,MAAO,SAEX,CACID,IAAK,oBACLE,KAAM,wBACNE,UAAU,EACVI,aAAcC,EAAAA,GAAAA,kBACdJ,KAAM,6BACNK,QAAS,CAAEL,KAAM,kBACjBC,QAASR,EACTG,MAAO,SAEX,CACID,IAAK,cACLE,KAAM,yBACNG,KAAM,UACND,UAAU,EACVI,aAAcC,EAAAA,GAAAA,YACdC,QAAS,CAAEL,KAAM,UACjBC,QAASR,EACTG,MAAO,UAEX,CACID,IAAK,QACLE,KAAM,kJACNG,KAAM,oBACND,UAAU,EACVI,aAAcC,EAAAA,GAAAA,MACdR,MAAO,SACPK,QAASR,EACTY,QAAS,CACLL,KAAM,UACNY,QAAS,CAAC,KAAM,QAAP,+BAAmDC,KAAI,SAAAC,GAAM,MAAK,CACvExB,MAAOwB,EACPvB,MAAOuB,QAInB,CACInB,IAAK,cACLE,KAAM,yBACNE,UAAU,EACVI,aAAcC,EAAAA,GAAAA,YACdJ,KAAM,SACNC,QAASR,EACTG,MAAO,SACPS,QAAS,CACLL,KAAM,QACNe,KAAM,KACNT,KAAM,GACNC,IAAK,KAGb,CACIZ,IAAK,gBACLE,KAAM,kBACNE,UAAU,EACVI,aAAcC,EAAAA,GAAAA,cACdJ,KAAM,SACNJ,MAAO,SACPK,QAASR,EACTY,QAAS,CACLL,KAAM,QACNM,KAAM,IACNC,IAAK,IACLhC,KAAM,IAGd,CACIoB,IAAK,iBACLG,YAAY,4HAIZD,KAAM,sCACNG,KAAM,6BACND,UAAU,EACVE,QAASR,EACTU,aAAcC,EAAAA,GAAAA,eACdC,QAAS,CAAEL,KAAM,kBACjBJ,MAAO,UAEX,CACID,IAAK,SACLC,MAAO,gBACPC,KAAM,qDACNC,YAAY,quBAiBZG,QAASR,EACTM,UAAU,EACVC,KAAM,2BACNG,aAAcC,EAAAA,GAAAA,SAElBY,EAAAA,EAAAA,IAAc,CACVf,QAAS,CAAC,MAAO,UACjBE,aAAcC,EAAAA,GAAAA,gBAElB,CACIT,IAAK,mBACLM,QAAS,CAAC,MAAO,UACjBJ,KAAM,2BACNE,UAAU,EACVI,aAAcC,EAAAA,GAAAA,iBACdJ,KAAM,SACNK,QAAS,CAAEL,KAAM,WACjBJ,MAAO,iBAEX,CACID,IAAK,qBACLM,QAAS,CAAC,MAAO,UACjBJ,KAAM,6BACNE,UAAU,EACVI,aAAcC,EAAAA,GAAAA,mBACdJ,KAAM,SACNK,QAAS,CAAEL,KAAM,WACjBJ,MAAO,iBAEX,CACID,IAAK,sBACLM,QAAS,CAAC,MAAO,UACjBJ,KAAM,8BACNE,UAAU,EACVI,aAAcC,EAAAA,GAAAA,oBACdJ,KAAM,SACNK,QAAS,CAAEL,KAAM,WACjBJ,MAAO,iBAEX,CACID,IAAK,wBACLM,QAAS,CAAC,MAAO,UACjBJ,KAAM,gCACNE,UAAU,EACVI,aAAcC,EAAAA,GAAAA,sBACdJ,KAAM,SACNK,QAAS,CAAEL,KAAM,WACjBJ,MAAO,iBAEX,CACID,IAAK,kBACLM,QAAS,CAAC,MAAO,UACjBL,MAAO,gBACPC,KAAM,iCACNG,KAAM,uBACND,UAAU,GAEd,CACIJ,IAAK,iBACLM,QAAS,CAAC,MAAO,UACjBL,MAAO,gBACPC,KAAM,gCACNG,KAAM,uBACND,UAAU,GAEd,CACIJ,IAAK,kBACLM,QAAS,CAAC,MAAO,UACjBL,MAAO,gBACPC,KAAM,iCACNG,KAAM,uBACND,UAAU,GAEd,CACIJ,IAAK,aACLM,QAAS,CAAC,MAAO,UACjBL,MAAO,gBACPC,KAAM,4BACNG,KAAM,uBACND,UAAU,GAEd,CACIJ,IAAK,aACLM,QAAS,CAAC,MAAO,UACjBL,MAAO,gBACPI,KAAM,WACND,UAAU,EACVF,KAAM,gCACNC,YAAY,mLAMhB,CACIH,IAAK,qBACLM,QAAS,CAAC,OACVL,MAAO,gBACPC,KAAM,oCACNG,KAAM,0BACND,UAAU,GAEd,CACIJ,IAAK,oBACLM,QAAS,CAAC,OACVL,MAAO,gBACPC,KAAM,mCACNG,KAAM,0BACND,UAAU,GAEd,CACIJ,IAAK,qBACLM,QAAS,CAAC,OACVL,MAAO,gBACPC,KAAM,oCACNG,KAAM,0BACND,UAAU,GAEd,CACIJ,IAAK,gBACLM,QAAS,CAAC,OACVL,MAAO,gBACPC,KAAM,+BACNG,KAAM,0BACND,UAAU,GAEd,CACIJ,IAAK,gBACLM,QAAS,CAAC,OACVL,MAAO,gBACPI,KAAM,WACND,UAAU,EACVF,KAAM,mCACNC,YAAY,wLAMhB,CACIH,IAAK,UACLM,QAAS,CAAC,MAAO,UACjBD,KAAM,WACNH,KAAK,4BACLD,MAAO,UACPG,UAAU,EACVM,QAAS,CACLL,KAAM,QACNN,OAAOuB,EAAAA,EAAAA,IAAgB,CAAC,MAAO,WAC/BC,cAAc,EACdC,SAAU,aACVC,cAAc,EACdC,aAAc,SAACC,EAAOC,GAAR,gBACAD,EADA,MACWC,EAAOC,OADlB,KAC6BD,EAAOE,WAClDrB,SAAU,CACNsB,SAAU,OACVF,OAAQ,WACRC,UAAW,SACXE,SAAS,EACTC,WAAY,EACZC,WAAY,EACZC,UAAW,IACXC,WAAY,GACZC,aAAc,EACdC,WAAY,GACZC,cAAe,gBACfC,QAAS,SAACC,GACNC,QAAQC,IAAIC,KAAKC,UAAUJ,EAAM,KAAM,eAKpDK,EAAAA,EAAAA,IAAiB,CAAC,OAAQrC,EAAAA,GAAU,iBAG9BsC,GAASC,EAAAA,EAAAA,IAAgBjD,I,qRC5aH,oNCvBtBkD,EAWT,CACA5E,OAAQ,IACR6E,UAAW,GACXpB,UAAW,MACXqB,aAAc,QACdC,SAAU,EACVC,YAAa,EACbC,aAAAA,EACAC,WAAY,SAAC3D,GAAAA,MAAAA,GAAqBA,GAClC4D,WAAY,QACZC,YAAa,GCTXC,EAAc,CAChBC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,GAGGC,EAAoB,SAAC,GAAD,IAVZC,EAWjBlC,EAAAA,EAAAA,UACAO,EAAAA,EAAAA,aACS4B,EAAAA,EAATC,QACAC,EAAAA,EAAAA,UACAhC,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,WAAAA,GAGwB,iBAAb6B,IAlBK,iBADCD,EAmB6BC,IAlBjBG,MAAMC,QAAQL,IAAkB,OAATA,GAAAA,MAmB1C,IAAIM,MAAM,gEAGdJ,EACkB,iBAAbD,EACD,CACIN,IAAKM,EACLL,MAAOK,EACPJ,OAAQI,EACRH,KAAMG,GAAAA,EAAAA,GAGHP,EACAO,GAGXM,EAAoBL,EAAQJ,KAAOI,EAAQN,MAC3CY,EAAkBN,EAAQP,IAAMO,EAAQL,OAC1CY,EAAQtC,EAAYoC,EACpBG,EAAStC,EAAaoC,EACpBG,GAAWR,EAAY,GAAK9B,EAAAA,MAChB,QAAdP,EACA2C,EAAQtC,EAAYgC,EAAYQ,EAAUJ,EACrB,WAAdzC,IACP4C,EAAStC,EAAa+B,EAAYQ,EAAUH,GAGzC,CAAEC,MAAAA,EAAOC,OAAAA,EAAQR,QAAAA,IAGfU,EAA4B,SAAC,GAAD,IACrC/C,EAAAA,EAAAA,OACAI,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,WACA2C,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBACAL,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OAKIK,EAAI9C,EACJ+C,EAAI9C,EAAAA,OAEAL,GAAAA,IACC,MACDkD,IAAMF,EAAiBJ,GAAS,YAG/B,YACDM,GAAKF,EAAiBJ,EAAAA,MAAAA,IAGrB,QACDM,GAAKF,EAAiBJ,EACtBO,IAAMF,EAAkBJ,GAAU,YAGjC,eACDK,GAAKF,EAAiBJ,EACtBO,GAAKF,EAAkBJ,EAAAA,MAAAA,IAGtB,SACDK,IAAMF,EAAiBJ,GAAS,EAChCO,GAAKF,EAAkBJ,EAAAA,MAAAA,IAGtB,cACDM,GAAKF,EAAkBJ,EAAAA,MAAAA,IAGtB,OACDM,IAAMF,EAAkBJ,GAAU,YAGjC,SACDK,IAAMF,EAAiBJ,GAAS,EAChCO,IAAMF,EAAkBJ,GAAU,QAInC,CAAEK,EAAAA,EAAGC,EAAAA,IAGHC,EAAoB,SAAC,GAAD,IAWzBC,EACAC,EAEAC,EACAC,EACAC,EACAC,EAhBJzD,EAAAA,EAAAA,UACAE,EAAAA,EAAAA,QACAM,EAAAA,EAAAA,WACAkD,EAAAA,EAAAA,cACAf,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OAAAA,OAaQ5C,GAAAA,IACC,gBACDoD,EAAU,EACVC,GAAWT,EAASpC,GAAc,EAElC+C,EAASX,EAAS,EAClBa,EAAiB,UACbvD,GACAoD,EAASX,EACTa,EAAc,QAEdF,EAAS9C,EAAakD,EACtBF,EAAc,mBAIjB,gBACDJ,EAAUT,EAAQnC,EAClB6C,GAAWT,EAASpC,GAAc,EAElC+C,EAASX,EAAS,EAClBa,EAAiB,UACbvD,GACAoD,EAAS,EACTE,EAAc,UAEdF,EAASX,EAAQnC,EAAakD,EAC9BF,EAAc,iBAIjB,gBACDJ,GAAWT,EAAQnC,GAAc,EACjC6C,EAAU,EAEVC,EAASX,EAAQ,EAEjBa,EAAc,SACVtD,GACAqD,EAASX,EACTa,EAAiB,eAEjBF,EAAS/C,EAAakD,EACtBD,EAAiB,8BAIpB,gBACDL,GAAWT,EAAQnC,GAAc,EACjC6C,EAAUT,EAASpC,EAEnB8C,EAASX,EAAQ,EACjBa,EAAc,SACVtD,GACAqD,EAAS,EACTE,EAAiB,qBAEjBF,EAASX,EAASpC,EAAakD,EAC/BD,EAAiB,oBAKtB,CACHL,QAAAA,EACAC,QAAAA,EACAC,OAAAA,EACAC,OAAAA,EACAC,YAAAA,EACAC,eAAAA,IAIKE,EAAgC,gBA2BrCC,EA1BJC,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,MAAAA,EAAAA,EACAvH,OAAAA,OAAAA,IAAAA,EAAS4E,EAA+B5E,OAAAA,EAAAA,EAAAA,EACxC6E,UAAAA,OAAAA,IAAAA,EAAYD,EAA+BC,UAAAA,EAAAA,EAAAA,EAC3CpB,UAAAA,OAAAA,IAAAA,EAAYmB,EAA+BnB,UAAAA,EAAAA,EAAAA,EAC3CqB,aAAAA,OAAAA,IAAAA,EAAeF,EAA+BE,aAAAA,EAAAA,EAAAA,EAC9CC,SAAAA,OAAAA,IAAAA,EAAWH,EAA+BG,SAAAA,EAAAA,EAAAA,EAC1CC,YAAAA,OAAAA,IAAAA,EAAcJ,EAA+BI,YAAAA,EAAAA,EAAAA,EAC7CC,YAAAA,OAAAA,IAAAA,EAAcL,EAA+BK,YAAAA,EAAAA,EAAAA,EAC7CC,WAAAA,OAAAA,IAAAA,EAAaN,EAA+BM,WAAAA,EAC5CsC,EAAAA,EAAAA,MAAAA,EAAAA,EACArC,WAAAA,OAAAA,IAAAA,EAAaP,EAA+BO,WAAAA,EAAAA,EAAAA,EAC5CC,YAAAA,OAAAA,IAAAA,EAAcR,EAA+BQ,YAAAA,EAGvCqC,EAAuB,WAAdhE,EAAyB,UAAI6D,EAAMG,UAAUC,UAAYJ,EAAMG,SAExEE,GAAgBC,EAAAA,EAAAA,KAAcH,OAAOA,GACrB,IAAlBA,EAAOzH,OAEP2H,EAAclH,MAAM,CAAC,EAAGT,IACC,IAAlByH,EAAOzH,QAEd2H,EAAclH,MAAM,CAAC,EAAGT,EAAS,EAAGA,IAMpCqH,EAFA,eAAgBC,EAAAA,CAENG,EAAO,WAAOH,EAAMO,aAAAA,CAAcJ,EAAO,KAG1C1B,MAAMC,QAAQuB,GAASA,EAASD,EAAcC,MAAMA,GAAAA,IAmB7DnB,EACAC,EAOAyB,EACAC,EACAC,EACAC,EAQIC,EACAC,EAEAC,EAEAC,EAoDAC,EACAC,EAEAC,EACAC,EAhGFC,GAAaC,EAAAA,EAAAA,IAAsCrB,EAAO,IAE1DsB,GAAcC,EAAAA,EAAAA,IAAkB3D,GAEhC4D,EAUA,GAMFC,EAAa,EACbC,EAAa,EAQC,QAAdvF,GACA2C,EAAQpG,EACRqG,EAASxB,EAETmE,EAAa,EASbhB,EAAgB,EAEZF,EADe,UAAf3C,EACS,EACa,WAAfA,EACEnF,EAAS,EAETA,EAGQ,WAAjB8E,GACAoD,GAAMnD,EACNoD,EAAKlD,EAAcJ,EAAY,EAE/BuD,GAASrD,EAAWC,EACpBqD,EAAoB,aAEpBN,EAASlD,EAAYO,EACrB6C,EAAqB,YAErBC,EAAKjD,EAAc,EAAIJ,EAGvBuD,GAFAD,EAAKtD,EAAYE,GAEJC,EACbqD,EAAoB,UAEpBN,GAAU3C,EACV6C,EAAqB,cAGzBZ,EAAO4B,SAAQ,gBACLvC,EAAIiB,EAAcpG,GAExBuH,EAAcjI,KAAK,CACfyH,GAAI5B,EACJwB,GAAAA,EACAK,GAAI7B,EACJyB,GAAAA,EACAe,KAAMN,EAAYrH,GAClBiH,MAAO9B,EACP0B,MAAAA,EACAK,oBA3CoB,SA4CpBJ,kBAAAA,SAIRjC,EAAQvB,EACRwB,EAASrG,EAET+I,EAAa,EASbf,GAAiB,GAEbD,EADe,UAAf5C,EACSnF,EACa,WAAfmF,EACEnF,EAAS,EAET,EAGQ,WAAjB8E,GAEAyD,EAAKtD,EAAcJ,EAAY,EAE/B2D,GAHAF,GAAMvD,GAGOC,EACbyD,EAAsB,MAEtBX,EAASjD,EAAYO,EACrB6C,EAAqB,YAErBK,EAAKrD,EAAc,EAAIJ,EAGvB2D,GAFAD,EAAK1D,EAAYE,GAEJC,EACbyD,EAAsB,QAEtBX,GAAU1C,EACV6C,EAAqB,cAGzBZ,EAAO4B,SAAQ,gBACLtC,EAAIgB,EAAcpG,GAExBuH,EAAcjI,KAAK,CACfyH,GAAAA,EACAJ,GAAIvB,EACJ4B,GAAAA,EACAJ,GAAIxB,EACJuC,KAAMN,EAAYrH,GAClBiH,MAAAA,EACAJ,MAAOzB,EACP8B,oBAAAA,EACAJ,kBA3CkB,sBAgDvB,CACHjC,MAAAA,EACAC,OAAAA,EACA8C,WAjIe,EAkIfJ,WAAAA,EACAC,WAAAA,EACAI,WAjIe,EAkIfV,WAAAA,EACAnB,MAAOuB,EACPO,UAAW7B,EACXM,OAAAA,EACAC,OAAAA,EACAC,cAAAA,EACAsB,qBAAsBnE,EACtB8C,mBAAAA,IC9YKsB,EAA4B,gBACrCjC,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,MAAAA,EAAAA,EACAvH,OAAAA,OAAAA,IAAAA,EAAS4E,EAA+B5E,OAAAA,EAAAA,EAAAA,EACxC6E,UAAAA,OAAAA,IAAAA,EAAYD,EAA+BC,UAAAA,EAAAA,EAAAA,EAC3CpB,UAAAA,OAAAA,IAAAA,EAAYmB,EAA+BnB,UAAAA,EAAAA,EAAAA,EAC3CqB,aAAAA,OAAAA,IAAAA,EAAeF,EAA+BE,aAAAA,EAAAA,EAAAA,EAC9CC,SAAAA,OAAAA,IAAAA,EAAWH,EAA+BG,SAAAA,EAAAA,EAAAA,EAC1CC,YAAAA,OAAAA,IAAAA,EAAcJ,EAA+BI,YAAAA,EAAAA,EAAAA,EAC7CC,YAAAA,OAAAA,IAAAA,EAAcL,EAA+BK,YAAAA,EAAAA,EAAAA,EAC7CC,WAAAA,OAAAA,IAAAA,EAAaN,EAA+BM,WAAAA,EAC5CsC,EAAAA,EAAAA,MAAAA,EAAAA,EACArC,WAAAA,OAAAA,IAAAA,EAAaP,EAA+BO,WAAAA,EAAAA,EAAAA,EAC5CC,YAAAA,EAiBIgC,EAA8B,CAC9BE,MAAAA,EACAC,MAAAA,EACAvH,OAAAA,EACA6E,UAAAA,EACApB,UAAAA,EACAqB,aAAAA,EACAC,SAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,WAAAA,EACAsC,MAAAA,EACArC,WAAAA,EACAC,iBAAAA,IAAAA,EA9BUR,EAA+BQ,YAAAA,IAGzCgB,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OACA8C,EAAAA,EAAAA,WACAJ,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,WACAI,EAAAA,EAAAA,WACON,EAAAA,EAAPvB,MACAmB,EAAAA,EAAAA,WACAW,EAAAA,EAAAA,UACAvB,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,cACAC,EAAAA,EAAAA,mBACAqB,EAAAA,EAAAA,qBAiBEE,GAAQC,EAAAA,EAAAA,MAERjI,EAAAA,qCAA0CiC,EAAAA,IAAaiF,EACxD7F,KAAI,mBAAQlC,EAAKL,UACjBoJ,KAAK,YAGNC,EAAAA,EAAAA,MAAAA,IAAAA,CAAAA,SAAAA,EACIC,EAAAA,EAAAA,KAAAA,OAAAA,CAAAA,UACIA,EAAAA,EAAAA,KAAAA,iBAAAA,CACIpI,GAAIA,EACJ8G,GAAIa,EACJjB,GAAIa,EACJR,GAAIS,EACJb,GAAIiB,EAAAA,SAEHV,EAAW7F,KAAI,mBACZ+G,EAAAA,EAAAA,KAAAA,OAAAA,EAAAA,GAAUC,WAIrBR,IACGO,EAAAA,EAAAA,KAAAA,OAAAA,CACIE,UAAAA,aAAwBhC,EAAAA,KAAWC,EAAAA,YAAkBC,EAAAA,IACrD+B,WAAYT,EACZU,iBAAkB/B,EAClBgC,MAAOT,EAAMU,QAAQ1C,MAAM0B,KAAAA,SAE1BG,KAGTO,EAAAA,EAAAA,KAAAA,OAAAA,CAAMxD,MAAOA,EAAOC,OAAQA,EAAQ8D,KAAAA,QAAc3I,IACjDsH,EAAcjG,KAAI,SAACuH,EAAM9G,GAAAA,OACtBqG,EAAAA,EAAAA,MAACU,EAAAA,SAAAA,CAAAA,SAAAA,EACGT,EAAAA,EAAAA,KAAAA,OAAAA,CACItB,GAAI8B,EAAK9B,GACTJ,GAAIkC,EAAKlC,GACTK,GAAI6B,EAAK7B,GACTJ,GAAIiC,EAAKjC,GACT8B,MAAOT,EAAMU,QAAQ3C,MAAM+C,QAE/BV,EAAAA,EAAAA,KAAAA,OAAAA,CACIlD,EAAG0D,EAAK5B,MACR7B,EAAGyD,EAAKhC,MACR2B,WAAYK,EAAK3B,oBACjBuB,iBAAkBI,EAAK/B,kBACvB4B,MAAOT,EAAMU,QAAQ3C,MAAM2B,KAAAA,SAE1BkB,EAAKlB,SAfC5F,UAAAA,EAAAA,CAAAA,iBAAAA,kBAAAA,SAAAA,aAAAA,aAAAA,SAAAA,YAAAA,aChFlBiH,EAAoC,SAAC,GAAD,IAWzCnE,EACAC,EAXJG,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBACAjD,EAAAA,EAAAA,OAAAA,EAAAA,EACAI,WAAAA,OAAAA,IAAAA,EAAa,QACbC,WAAAA,OAAAA,IAAAA,EAAa,QACb7D,OAAAA,OAAAA,IAAAA,EAAS4E,EAA+B5E,OAAAA,EAAAA,EAAAA,EACxC6E,UAAAA,OAAAA,IAAAA,EAAYD,EAA+BC,UAAAA,EAAAA,EAAAA,EAC3CpB,UAAAA,OAAAA,IAAAA,EAAYmB,EAA+BnB,UAAAA,EACxC+G,EAAAA,SAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAAAA,MAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,OAAAA,KAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,QAAAA,IAAAA,IAAAA,EAAAA,GAAAA,EAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAIe,QAAd/G,GACA2C,EAAQpG,EACRqG,EAASxB,IAETuB,EAAQvB,EACRwB,EAASrG,GAAAA,IAAAA,EAGIuG,EAA0B,CACvC/C,OAAAA,EACAI,WAAAA,EACAC,WAAAA,EACA2C,eAAAA,EACAC,gBAAAA,EACAL,MAAAA,EACAC,OAAAA,IAPIK,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAAAA,OAWPiD,EAAAA,EAAAA,KAAAA,IAAAA,CAAGE,UAAAA,aAAwBpD,EAAAA,KAAMC,EAAAA,IAAAA,UAC7BiD,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,CACGvJ,OAAQA,EACR6E,UAAWA,EACXpB,UAAWA,GACP+G,OC1BdC,EAAgB,CAClBC,OCfwB,SAAC,GAAD,IACxBhE,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAgE,EAAAA,EAAAA,KACAR,EAAAA,EAAAA,KAAAA,EAAAA,EACAS,QAAAA,OAAAA,IAAAA,EAAU,QACVC,YAAAA,OAAAA,IAAAA,EAAc,QACdC,YAAAA,OAGIlB,EAAAA,EAAAA,KAAAA,SAAAA,CACImB,EAAGJ,EAAO,EACVK,GAAItE,EAAIiE,EAAO,EACfM,GAAItE,EAAIgE,EAAO,EACfR,KAAMA,EACNS,QAASA,EACTM,YAAaL,EACbM,YAAAA,IAAAA,EAVM,gBAWNlB,MAAO,CACHmB,cAAe,WDH3BC,QEhByB,SAAC,GAAD,IACzB3E,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAgE,EAAAA,EAAAA,KACAR,EAAAA,EAAAA,KAAAA,EAAAA,EACAS,QAAAA,OAAAA,IAAAA,EAAU,QACVC,YAAAA,OAAAA,IAAAA,EAAc,QACdC,YAAAA,OAGIlB,EAAAA,EAAAA,KAAAA,IAAAA,CAAGE,UAAAA,aAAwBpD,EAAAA,IAAKC,EAAAA,IAAAA,UAC5BiD,EAAAA,EAAAA,KAAAA,OAAAA,CACIxI,EAAAA,0BACOuJ,EAAO,8BACA,GAAPA,EAAAA,IAAcA,EAAO,4BACrBA,EAAO,MAAKA,EAAAA,0BACL,GAAPA,EAAAA,IAAcA,EAAO,4BACrBA,EAAO,yBAEdR,KAAMA,EACNS,QAASA,EACTM,YAAaL,EACbM,YAAAA,IAAAA,EAfE,gBAgBFlB,MAAO,CACHmB,cAAe,aFP/BE,OGjBwB,SAAC,GAAD,IACxB5E,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAgE,EAAAA,EAAAA,KACAR,EAAAA,EAAAA,KAAAA,EAAAA,EACAS,QAAAA,OAAAA,IAAAA,EAAU,QACVC,YAAAA,OAAAA,IAAAA,EAAc,QACdC,YAAAA,OAGIlB,EAAAA,EAAAA,KAAAA,OAAAA,CACIlD,EAAGA,EACHC,EAAGA,EACHwD,KAAMA,EACNS,QAASA,EACTM,YAAaL,EACbM,YAAAA,IAAAA,EATM,gBAUN/E,MAAOuE,EACPtE,OAAQsE,EACRV,MAAO,CACHmB,cAAe,WHF3BG,SLlB0B,SAAC,GAAD,IAC1B7E,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAgE,EAAAA,EAAAA,KACAR,EAAAA,EAAAA,KAAAA,EAAAA,EACAS,QAAAA,OAAAA,IAAAA,EAAU,QACVC,YAAAA,OAAAA,IAAAA,EAAc,QACdC,YAAAA,OAGIlB,EAAAA,EAAAA,KAAAA,IAAAA,CAAGE,UAAAA,aAAwBpD,EAAAA,IAAKC,EAAAA,IAAAA,UAC5BiD,EAAAA,EAAAA,KAAAA,OAAAA,CACIxI,EAAAA,sBACGuJ,EAAO,0BACPA,EAAAA,IAAQA,EAAAA,wBACNA,EAAAA,sBACFA,EAAO,qBAEVR,KAAMA,EACNS,QAASA,EACTM,YAAaL,EACbM,YAAAA,IAAAA,EAdE,gBAeFlB,MAAO,CACHmB,cAAe,cKFtBI,EAAgB,sCACzB9E,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAP,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OACAjC,EAAAA,EAAAA,KAAAA,EAAAA,EACAX,UAAAA,OAAAA,IAAAA,EAAY,sBACZE,QAAAA,OAAAA,IAAAA,GAAAA,EACA8H,EAAAA,EAAAA,UAAAA,EAAAA,EACAC,WAAAA,OAAAA,IAAAA,EAAa,oBACbd,QAAAA,OAAAA,IAAAA,EAAU,QAEVe,YAAAA,OAAAA,IAAAA,EAAc,eACd1H,WAAAA,OAAAA,IAAAA,EAAa,SACbkD,cAAAA,OAAAA,IAAAA,EAAgB,QAChByE,kBAAAA,OAAAA,IAAAA,EAAoB,QACpBC,kBAAAA,OAAAA,IAAAA,EAAoB,gBAEpB1H,EAAAA,EAAAA,QACA2H,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,YAEAC,EAAAA,EAAAA,QAAAA,GAE0BC,EAAAA,EAAAA,UAAgB,IAAnCjC,EAAAA,EAAAA,GAAOkC,EAAAA,EAAAA,GACR3C,GAAQC,EAAAA,EAAAA,MAER2C,GAAmBC,EAAAA,EAAAA,cACrB,SAACC,GAAAA,GACOL,EAAS,CAAC,IAEJhC,EADegC,EAAQnL,QAAO,kBAAmB,YAAhByL,MACZC,QACvB,SAACC,EAAKC,GAAAA,OAAAA,EAAAA,GACCD,EACAC,EAAOzC,SAEd,IAEJkC,EAASlC,GAAAA,MAGb6B,GAAAA,EAAe1H,EAAMkI,KAEzB,CAACR,EAAc1H,EAAM6H,IAEnBU,GAAmBN,EAAAA,EAAAA,cACrB,SAACC,GAAAA,GACOL,EAAS,CAAC,IAEJhC,EADegC,EAAQnL,QAAO,kBAAmB,YAAhByL,MACZC,QACvB,SAACC,EAAKC,GAAAA,OAAAA,EAAAA,GACCD,EACAC,EAAOzC,SAEd,IAEJkC,EAASlC,GAAAA,MAGb8B,GAAAA,EAAe3H,EAAMkI,KAEzB,CAACP,EAAc3H,EAAM6H,IAAAA,EAGiDrF,EAAkB,CACxFnD,UAAAA,EACAE,QAAAA,EACAM,WAAAA,OAAAA,EAAYgG,EAAMhG,YAAAA,EAAcA,EAChCkD,cAAAA,EACAf,MAAAA,EACAC,OAAAA,IANIQ,GAAAA,EAAAA,QAASC,GAAAA,EAAAA,QAASC,GAAAA,EAAAA,OAAQC,GAAAA,EAAAA,OAAQC,GAAAA,EAAAA,YAAaC,GAAAA,EAAAA,eASjDlE,GAAgB,CAACmB,EAAS2H,EAAcC,EAAcC,GAAaY,MACrE,4BAAWC,KAGTC,GAAqC,mBAAhBnB,EAA6BA,EAAclB,EAAckB,GAAAA,OAGhFhC,EAAAA,EAAAA,MAAAA,IAAAA,CACIG,UAAAA,aAAwBpD,EAAAA,IAAKC,EAAAA,IAC7BsD,MAAO,CACHW,QAAAA,OAAAA,EAASX,EAAM8C,aAAAA,EAAenC,GAAAA,SAAAA,EAGlChB,EAAAA,EAAAA,KAAAA,OAAAA,CACIxD,MAAOA,EACPC,OAAQA,EACR8D,KAAAA,OAAAA,EAAMF,EAAM+C,gBAAAA,EAAkBtB,EAC9BzB,MAAO,CACHgD,OAAQjK,GAAgB,UAAY,QAExCmB,QAAS,kBACLA,GAAAA,EAAUC,EAAMkI,GAAAA,MAChBN,GAAAA,EAAc5H,EAAK5C,KAEvBsK,aAAcM,EACdL,aAAcY,IAEjBO,EAAAA,cAAoBJ,GAAAA,EAAAA,CACjBtL,GAAI4C,EAAK5C,GACTkF,EAAGG,GACHF,EAAGG,GACH6D,KAAAA,OAAAA,EAAMV,EAAMhG,YAAAA,EAAcA,EAC1BkG,KAAAA,OAAAA,EAAAA,OAAAA,EAAM/F,EAAK+F,MAAAA,EAAQ/F,EAAK+I,OAAAA,EAAS,QACjCtC,YAAAA,OAAAA,EAAaZ,EAAM2B,mBAAAA,EAAqBA,EACxCd,YAAAA,OAAAA,EAAab,EAAM4B,mBAAAA,EAAqBA,GACpCzH,EAAKgJ,OAAS5D,EAAMU,QAAQkD,OAAOC,YAAAA,KAE3CzD,EAAAA,EAAAA,KAAAA,OAAAA,CACIG,WAAY9C,GACZgD,MAAAA,EAAAA,GACOT,EAAMU,QAAQhB,KAAAA,CACjBiB,KAAAA,OAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAMF,EAAMqD,eAAAA,EAAiB7B,GAAAA,EAAajC,EAAMU,QAAQhB,KAAKiB,MAAAA,EAAQ,QACrEH,iBAAkB9C,GAClBkE,cAAe,OACfmC,WAAY,QACRnJ,EAAKgJ,OAAS5D,EAAMU,QAAQkD,OAAOlE,UAAAA,GAE3CxC,EAAGK,GACHJ,EAAGK,GAAAA,SAEF5C,EAAK9C,YI/ITkM,EAAY,gBACrBpJ,EAAAA,EAAAA,KAEAsC,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAlD,EAAAA,EAAAA,UAAAA,EAAAA,EACAoC,QAASD,OAAAA,IAAAA,EAAW,IACpBjC,EAAAA,EAAAA,QACAsI,EAAAA,EAAAA,QAEAnI,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,WAAAA,EAAAA,EACAG,cAAAA,OAAAA,IAAAA,EAAgB,sBAChBF,aAAAA,OAAAA,IAAAA,EAAe,IACfsJ,EAAAA,EAAAA,cAAAA,EAAAA,EACAN,eAAAA,OAAAA,IAAAA,EAAiB,oBACjBD,YAAAA,OAAAA,IAAAA,EAAc,IAEdpB,EAAAA,EAAAA,YACA1H,EAAAA,EAAAA,WACAkD,EAAAA,EAAAA,cACAyE,EAAAA,EAAAA,kBACAC,EAAAA,EAAAA,kBAEA1H,EAAAA,EAAAA,QACA2H,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,YAEQnG,EAAYH,EAAkB,CAClCI,UAAW1B,EAAKpE,OAChB8D,UAAAA,EACAC,WAAAA,EACAC,aAAAA,EACAP,UAAAA,EACAoC,QAASD,IANLC,QASF4H,EAAsB,QAAdhK,EAAsBK,EAAYE,EAAe,EACzD0J,EAAsB,WAAdjK,EAAyBM,EAAaC,EAAe,SAG/D4F,EAAAA,EAAAA,KAAAA,IAAAA,CAAGE,UAAAA,aAAwBpD,EAAAA,IAAKC,EAAAA,IAAAA,SAC3BvC,EAAKvB,KAAI,SAACuB,EAAMuJ,GAAAA,OACb/D,EAAAA,EAAAA,KAAC4B,EAAAA,CAEGpH,KAAMA,EACNsC,EAAGiH,EAAIF,EAAQ5H,EAAQJ,KACvBkB,EAAGgH,EAAID,EAAQ7H,EAAQP,IACvBc,MAAOtC,EACPuC,OAAQtC,EACRN,UAAWS,EACXP,QAASA,EACTsI,QAASA,EACTR,UAAW6B,EACX5B,WAAYsB,EACZpC,QAASmC,EACTpB,YAAaA,EACb1H,WAAYA,EACZkD,cAAeA,EACfyE,kBAAmBA,EACnBC,kBAAmBA,EACnB1H,QAASA,EACT2H,aAAcA,EACdC,aAAcA,EACdC,YAAaA,GApBR2B,SC7CZC,EAAe,gBACxBxJ,EAAAA,EAAAA,KAEAoC,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBAAAA,EAAAA,EACA7C,WAAAA,OAAAA,IAAAA,EAAa,QACbC,WAAAA,OAAAA,IAAAA,EAAa,IACbL,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,UAAAA,EAAAA,EACAoC,QAAAA,OAAAA,IAAAA,EAAU,IACVlC,EAAAA,EAAAA,QAAAA,EAAAA,EAEAK,aAAAA,OAAAA,IAAAA,EAAe,IACfF,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,WACAG,EAAAA,EAAAA,cACAoJ,EAAAA,EAAAA,cACAN,EAAAA,EAAAA,eACAD,EAAAA,EAAAA,YAEApB,EAAAA,EAAAA,YACA1H,EAAAA,EAAAA,WACAkD,EAAAA,EAAAA,cACAyE,EAAAA,EAAAA,kBACAC,EAAAA,EAAAA,kBAEA1H,EAAAA,EAAAA,QACA2H,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,YAEAC,EAAAA,EAAAA,QAAAA,EAE0BvG,EAAkB,CACxCI,UAAW1B,EAAKpE,OAChBgE,aAAAA,EACAF,UAAAA,EACAC,WAAAA,EACAN,UAAAA,EACAoC,QAAAA,IANIO,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,OAAAA,EASEE,EAA0B,CACvC/C,OAAAA,EACAI,WAAAA,EACAC,WAAAA,EACA2C,eAAAA,EACAC,gBAAAA,EACAL,MAAAA,EACAC,OAAAA,IAPIK,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAAAA,OAWPiD,EAAAA,EAAAA,KAAC4D,EAAAA,CACGpJ,KAAMA,EACNsC,EAAGA,EACHC,EAAGA,EACHlD,UAAWA,EACXoC,QAASA,EACTlC,QAASA,EACTsI,QAASA,EACTjI,aAAcA,EACdF,UAAWA,EACXC,WAAYA,EACZG,cAAeA,EACfoJ,cAAeA,EACfN,eAAgBA,EAChBD,YAAaA,EACbpB,YAAaA,EACb1H,WAAYA,EACZkD,cAAeA,EACfyE,kBAAmBA,EACnBC,kBAAmBA,EACnB1H,QAASA,EACT2H,aAAcA,EACdC,aAAcA,EACdC,YAAoC,kBAAhBA,OAAAA,EAAwCA,KCtElE6B,EAAmB,CACrBnN,MAAO,OACPoN,OAAQ,SACR7M,IAAK,SAGI8M,EAAuB,SAChCC,EAAAA,GAAAA,IAEI5J,EAAAA,EAAAA,KAEAoC,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBAAAA,EAAAA,EACA7C,WAAAA,OAAAA,IAAAA,EAAa,QACbC,WAAAA,OAAAA,IAAAA,EAAa,IACbL,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,UAAAA,EAAAA,EACAoC,QAASD,OAAAA,IAAAA,EAAW,QACpBjC,QAAAA,OAAAA,IAAAA,GAAAA,EAAAA,EAAAA,EAGAK,aAAAA,OAAAA,IAAAA,EAAe,IACfF,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,WAAAA,EAAAA,EACAG,cAAAA,OAAAA,IAAAA,EAAgB,kBAChBoJ,EAAAA,EAAAA,cAAAA,EAAAA,EAGArJ,WAAAA,OAAAA,IAAAA,EAAa,SACbkD,cAAAA,OAAAA,IAAAA,EAAgB,IAIhBqC,EAAAA,EAAAA,MAAAA,EAG+B9D,EAAkB,CACjDI,UAAW1B,EAAKpE,OAChB8D,UAAAA,EACAC,WAAAA,EACAC,aAAAA,EACAP,UAAAA,EACAoC,QAASD,IANLQ,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,OAAQR,EAAAA,EAAAA,QAAAA,EASNU,EAA0B,CACvC/C,OAAAA,EACAI,WAAAA,EACAC,WAAAA,EACA2C,eAAAA,EACAC,gBAAAA,EACAL,MAAAA,EACAC,OAAAA,IAPIK,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAUL8G,EAAsB,QAAdhK,EAAsBK,EAAYE,EAAe,EACzD0J,EAAsB,WAAdjK,EAAyBM,EAAaC,EAAe,EAEnEgK,EAAIC,OACJD,EAAIE,UAAUxH,EAAGC,GAEjBqH,EAAIG,KAAU3E,EAAMU,QAAQhB,KAAKkF,SAAAA,OAAc5E,EAAMU,QAAQhB,KAAKmF,YAAc,cAEhFjK,EAAK6E,SAAQ,SAAC7H,EAAGuM,GAAAA,IAAAA,EAAAA,EACPW,EAAQX,EAAIF,EAAQ5H,EAAQJ,KAC5B8I,EAAQZ,EAAID,EAAQ7H,EAAQP,IAAAA,EAEwCsB,EACtE,CACInD,UAAWS,EACXP,QAAAA,EACAM,WAAAA,EACAkD,cAAAA,EACAf,MAAOtC,EACPuC,OAAQtC,IAPR8C,EAAAA,EAAAA,QAASC,EAAAA,EAAAA,QAASC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,YAAaC,EAAAA,EAAAA,eAWvD8G,EAAIQ,UAAAA,OAAAA,EAAYpN,EAAE+L,OAAAA,EAAS,QAC3Ba,EAAIS,SAASH,EAAQzH,EAAS0H,EAAQzH,EAAS7C,EAAYA,GAE3D+J,EAAIU,UAAYb,EAAiB5G,GAEV,YAAnBC,IACA8G,EAAIW,aAAe,UAGvBX,EAAIQ,UAAAA,OAAAA,EAAAA,MAAYlB,EAAAA,EAAiB9D,EAAMU,QAAQhB,KAAKiB,MAAAA,EAAQ,QAC5D6D,EAAIY,SAASC,OAAOzN,EAAEE,OAAQgN,EAAQvH,EAAQwH,EAAQvH,MAG1DgH,EAAIc,WAGKC,EAAsC,SAC/Cf,EAAAA,GAAAA,IAEIxH,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBACAjD,EAAAA,EAAAA,OAAAA,EAAAA,EACAI,WAAAA,OAAAA,IAAAA,EAAa,QACbC,WAAAA,OAAAA,IAAAA,EAAa,IACbyD,EAAAA,EAAAA,MAAAA,EAAAA,EACAtH,OAAAA,OAAAA,IAAAA,EAAS4E,EAA+B5E,OAAAA,EAAAA,EAAAA,EACxC6E,UAAAA,OAAAA,IAAAA,EAAYD,EAA+BC,UAAAA,EAAAA,EAAAA,EAC3CpB,UAAAA,OAAAA,IAAAA,EAAYmB,EAA+BnB,UAAAA,EACpCuL,EAAAA,EAAPzH,MAAAA,EAAAA,EACAzC,aAAAA,OAAAA,IAAAA,EAAeF,EAA+BE,aAAAA,EAAAA,EAAAA,EAC9CC,SAAAA,OAAAA,IAAAA,EAAWH,EAA+BG,SAAAA,EAAAA,EAAAA,EAC1CC,YAAAA,OAAAA,IAAAA,EAAcJ,EAA+BI,YAAAA,EAAAA,EAAAA,EAC7CC,YAAAA,OAAAA,IAAAA,EAAcL,EAA+BK,YAAAA,EAAAA,EAAAA,EAC7CC,WAAAA,OAAAA,IAAAA,EAAaN,EAA+BM,WAAAA,EAC5CsC,EAAAA,EAAAA,MAAAA,EAAAA,EACArC,WAAAA,OAAAA,IAAAA,EAAaP,EAA+BO,WAAAA,EAAAA,EAAAA,EAC5CC,YAAAA,OAAAA,IAAAA,EAAcR,EAA+BQ,YAAAA,EAC7CoE,EAAAA,EAAAA,MAAAA,EAoBApC,EAA8B,CAC9BE,MAAAA,EACAC,MAAOyH,EACPhP,OAAAA,EACA6E,UAAAA,EACApB,UAAAA,EACAqB,aAAAA,EACAC,SAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,WAAAA,EACAsC,MAAAA,EACArC,WAAAA,EACAC,YAAAA,IA3BAgB,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OACA8C,EAAAA,EAAAA,WACAJ,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,WACAI,EAAAA,EAAAA,WACAV,EAAAA,EAAAA,WACAnB,EAAAA,EAAAA,MACA8B,EAAAA,EAAAA,UACAvB,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,cACAC,EAAAA,EAAAA,mBACAqB,EAAAA,EAAAA,qBAAAA,EAiBa/C,EAA0B,CACvC/C,OAAAA,EACAI,WAAAA,EACAC,WAAAA,EACA2C,eAAAA,EACAC,gBAAAA,EACAL,MAAAA,EACAC,OAAAA,IAPIK,EAAAA,EAAAA,EAAGC,GAAAA,EAAAA,EAULsI,GAAgB,CAClBd,KAAMH,EAAIG,KACVO,UAAWV,EAAIU,UACfC,aAAcX,EAAIW,cAEtBX,EAAIC,OAEJD,EAAIE,UAAUxH,EAAGC,IAAAA,IAEXuI,GAAWlB,EAAImB,qBACjBhG,EAAa/C,EACb2C,EAAa1C,EACb2C,EAAa5C,EACbgD,EAAa/C,GAEjBqC,EAAWO,SAAQ,YACfiG,GAASE,aAAavF,EAAUvJ,OAAQuJ,EAAUwF,cAGtDrB,EAAIQ,UAAYU,GAChBlB,EAAIS,SAAS,EAAG,EAAGrI,EAAOC,GAE1B2H,EAAIG,MACA3E,EAAMU,QAAQ3C,MAAM2B,KAAKoG,WAAgB9F,EAAMU,QAAQ3C,MAAM2B,KAAKoG,WAAAA,IAAgB,IACnF9F,EAAMU,QAAQ3C,MAAM2B,KAAKkF,SAAAA,MAAc5E,EAAMU,QAAQ3C,MAAM2B,KAAKmF,WAEnE9G,EAAM0B,SAAQ,4BACLO,EAAMU,QAAQ3C,MAAM+C,KAAKY,aAAAA,EAAe,GAAK,IAC9C8C,EAAIuB,UAAYC,OAAOhG,EAAMiG,KAAKlI,MAAM+C,KAAKY,aACzC1B,EAAMiG,KAAKlI,MAAM+C,KAAKa,SACtB6C,EAAI0B,YAAclG,EAAMiG,KAAKlI,MAAM+C,KAAKa,QAE5C6C,EAAI2B,QAAU,SAEd3B,EAAI4B,YACJ5B,EAAI6B,OAAOzF,EAAK9B,GAAI8B,EAAKlC,IACzB8F,EAAI8B,OAAO1F,EAAK7B,GAAI6B,EAAKjC,IACzB6F,EAAI7C,UAGJ3B,EAAMU,QAAQ3C,MAAM2B,KAAKiB,OACzB6D,EAAIQ,UAAYhF,EAAMU,QAAQ3C,MAAM2B,KAAKiB,MAE7C6D,EAAIU,UAAyC,WAA7BtE,EAAK3B,oBAAmC,SAAW2B,EAAK3B,oBACxEuF,EAAIW,aAA0C,YAA3BvE,EAAK/B,kBAAkC,SAAW+B,EAAK/B,kBAE1E2F,EAAIY,SAASxE,EAAKlB,KAAMkB,EAAK5B,MAAO4B,EAAKhC,UAGzCiB,IACA2E,EAAIC,OACJD,EAAIE,UAAUpG,EAAQC,GACtBiG,EAAI+B,QAAOC,EAAAA,EAAAA,IAAiBhI,IAE5BgG,EAAIG,MACA3E,EAAMU,QAAQ1C,MAAM0B,KAAKoG,WAAgB9F,EAAMU,QAAQ1C,MAAM0B,KAAKoG,WAAAA,IAAgB,IACnF9F,EAAMU,QAAQ1C,MAAM0B,KAAKkF,SAAAA,MAAc5E,EAAMU,QAAQ1C,MAAM0B,KAAKmF,WAC/D7E,EAAMU,QAAQ1C,MAAM0B,KAAKiB,OACzB6D,EAAIQ,UAAYhF,EAAMU,QAAQ1C,MAAM0B,KAAKiB,MAE7C6D,EAAIU,UAAqC,WAAzBpF,EAAoC,SAAWA,EAC/D0E,EAAIW,aAAe1G,EAEnB+F,EAAIY,SAASvF,EAAW,EAAG,GAE3B2E,EAAIc,WAGRd,EAAIc,UAEJd,EAAIG,KAAOc,GAAcd,KACzBH,EAAIU,UAAYO,GAAcP,UAC9BV,EAAIW,aAAeM,GAAcN,cC3OxBsB,EAAkC,SAAC,GAAD,IAC3C3I,EAAAA,EAAAA,MACQ4I,EAAAA,EAARzI,OAAAA,EAAAA,EACAC,QAAAA,OAAAA,IAAAA,GAAAA,EAAAA,EAAAA,EACAyI,YAAAA,OAAAA,IAAAA,EAAc,mBAAKC,GAAAA,EAAAA,EAAAA,EACnBC,UAAAA,OAAAA,IAAAA,EAAY,eAQLC,EAAAA,EAAAA,UAAQ,eAGLC,GAAAA,MAFSL,EAAAA,EAAoB5I,EAAM7G,SAEpBoC,KAAI,SAAC2N,EAAalN,GAAAA,IAAAA,EACdgE,EAAMmJ,aAAaD,GAAjC9P,EAAAA,EAAAA,GAAOO,EAAAA,EAAAA,GAAAA,MAEP,CACHO,GAAIgP,EACJlN,MAAAA,EACAoN,OAAQ,CAAChQ,EAAOO,GAChBK,MAAAA,GAAU6O,EAAYzP,GAAS2P,EAAYF,EAAYlP,GACvDM,MAAO+F,EAAM5G,GACbyM,MAAOqD,MAAAA,OAIX9I,GAAS6I,EAAM7I,UAEZ6I,IACR,CAACL,EAAkB5I,EAAOI,EAAS2I,EAAWF,KCxBxCQ,EAAkB,CAC3BvM,KAAMwM,IAAAA,QAAkBA,IAAAA,QAGxBpN,OAAQoN,IAAAA,MAAgB,CACpB,MACA,YACA,QACA,eACA,SACA,cACA,OACA,WACA,WACDC,WACHjN,WAAYgN,IAAAA,OACZ/M,WAAY+M,IAAAA,OACZnN,UAAWmN,IAAAA,MAAgB,CAAC,MAAO,WAAWC,WAG9C7M,aAAc4M,IAAAA,OACd9M,UAAW8M,IAAAA,OAAAA,WACX7M,WAAY6M,IAAAA,OAAAA,WACZ1M,cAAe0M,IAAAA,MAAgB,CAC3B,gBACA,gBACA,gBACA,kBAEJtD,cAAesD,IAAAA,OACf5D,eAAgB4D,IAAAA,OAChB7D,YAAa6D,IAAAA,OAEbjF,YAAaiF,IAAAA,UAAoB,CAC7BA,IAAAA,MAAgB,CAAC,SAAU,UAAW,SAAU,aAChDA,IAAAA,OAEJ3M,WAAY2M,IAAAA,OACZzJ,cAAeyJ,IAAAA,OACfhF,kBAAmBgF,IAAAA,OACnB/E,kBAAmB+E,IAAAA,OAEnBzM,QAASyM,IAAAA,KACT9E,aAAc8E,IAAAA,KACd7E,aAAc6E,IAAAA,KAEd3E,QAAS2E,IAAAA,QACLA,IAAAA,MAAgB,CACZrE,GAAIqE,IAAAA,UAAoB,CAACA,IAAAA,MAAgB,CAAC,YAAYC,WACtD5G,MAAO2G,IAAAA,MAAgB,CACnBtD,cAAesD,IAAAA,OACf5D,eAAgB4D,IAAAA,OAChB7D,YAAa6D,IAAAA,OACb3M,WAAY2M,IAAAA,OACZhF,kBAAmBgF,IAAAA,OACnB/E,kBAAmB+E,IAAAA,SACpBC","sources":["webpack://nivo-website/../node_modules/d3-time/src/duration.js","webpack://nivo-website/../node_modules/d3-time/src/interval.js","webpack://nivo-website/./src/data/components/chord/mapper.ts","webpack://nivo-website/./src/data/components/chord/props.ts","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/svg/ContinuousColorsLegendSvg.tsx","webpack://nivo-website/../src/svg/AnchoredContinuousColorsLegendSvg.tsx","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/props.ts"],"sourcesContent":["export var durationSecond = 1e3;\nexport var durationMinute = 6e4;\nexport var durationHour = 36e5;\nexport var durationDay = 864e5;\nexport var durationWeek = 6048e5;","var t0 = new Date(),\n    t1 = new Date();\nexport default function newInterval(floori, offseti, count, field) {\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;\n  }\n\n  interval.floor = function (date) {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = function (date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function (date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function (date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function (start, stop, step) {\n    var range = [],\n        previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n\n    do {\n      range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    } while (previous < start && start < stop);\n\n    return range;\n  };\n\n  interval.filter = function (test) {\n    return newInterval(function (date) {\n      if (date >= date) while (floori(date), !test(date)) {\n        date.setTime(date - 1);\n      }\n    }, function (date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function (start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function (step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n        return field(d) % step === 0;\n      } : function (d) {\n        return interval.count(0, d) % step === 0;\n      });\n    };\n  }\n\n  return interval;\n}","import { settingsMapper } from '../../../lib/settings'\n\nexport default settingsMapper({\n    label: value => {\n        if (value === `d => \\`\\${d.id} [\\${d.value}]\\``) return d => `${d.id} [${d.value}]`\n        return value\n    },\n})\n","import { commonDefaultProps as defaults } from '@nivo/chord'\nimport {\n    themeProperty,\n    motionProperties,\n    groupProperties,\n    getLegendsProps,\n} from '../../../lib/componentProperties'\nimport {\n    chartDimensions,\n    ordinalColors,\n    isInteractive,\n    blendMode,\n} from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg', 'canvas', 'api']\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'The matrix used to compute the chord diagram.',\n        description: `\n            The matrix used to compute the chord diagram,\n            it must be a square matrix, meaning each row length\n            must equal the row count.\n        `,\n        required: true,\n        type: 'number[][]',\n        flavors: allFlavors,\n    },\n    {\n        key: 'keys',\n        group: 'Base',\n        help: 'Keys used to identify each cell in the matrix.',\n        description: `\n            Keys used to identify each cell in the matrix,\n            for example given this matrix:\n            \\`\\`\\`\n            [ [123, 37,  99 ],\n              [75,  103, 82 ],\n              [37,  65,  109] ]\n            \\`\\`\\`\n            and those keys:\n            \\`\\`\\`\n            ['John', 'Jane', 'Raoul']\n            \\`\\`\\`\n            it will result in the following mapping:\n            \\`\\`\\`\n            [ [null,    'John', 'Jane',  'Raoul']\n              ['John',   123,    37,      99    ],\n              ['Jane',   75,     103,     82    ],\n              ['Raoul',  37,     65,      109   ] ]\n            \\`\\`\\`\n        `,\n        required: true,\n        flavors: allFlavors,\n        type: 'string[]',\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        type: 'string | Function',\n        required: false,\n        help: `Optional value formatter.`,\n        flavors: allFlavors,\n        // control: { type: 'valueFormat'}\n    },\n    ...chartDimensions(allFlavors),\n    {\n        key: 'padAngle',\n        help: 'Padding angle.',\n        required: false,\n        defaultValue: defaults.padAngle,\n        type: 'number',\n        group: 'Base',\n        flavors: allFlavors,\n        control: {\n            type: 'range',\n            min: 0,\n            max: 1,\n            step: 0.01,\n        },\n    },\n    {\n        key: 'innerRadiusRatio',\n        help: 'Inner radius ratio.',\n        required: false,\n        defaultValue: defaults.innerRadiusRatio,\n        type: 'number',\n        group: 'Base',\n        flavors: allFlavors,\n        control: {\n            type: 'range',\n            min: 0,\n            max: 1,\n            step: 0.01,\n        },\n    },\n    {\n        key: 'innerRadiusOffset',\n        help: 'Inner radius offset (minus innerRadiusRatio).',\n        required: false,\n        defaultValue: defaults.innerRadiusOffset,\n        type: 'number',\n        group: 'Base',\n        flavors: allFlavors,\n        control: {\n            type: 'range',\n            min: 0,\n            max: 1,\n            step: 0.01,\n        },\n    },\n    themeProperty(allFlavors),\n    ordinalColors({\n        flavors: allFlavors,\n        defaultValue: defaults.colors,\n        help: 'Defines how to compute arcs & ribbons color.',\n    }),\n    {\n        key: 'arcOpacity',\n        help: 'Arcs opacity.',\n        required: false,\n        defaultValue: defaults.arcOpacity,\n        type: 'number',\n        flavors: allFlavors,\n        control: { type: 'opacity' },\n        group: 'Style',\n    },\n    {\n        key: 'arcBorderWidth',\n        help: 'Arcs border width.',\n        required: false,\n        defaultValue: defaults.arcBorderWidth,\n        type: 'number',\n        flavors: allFlavors,\n        control: { type: 'lineWidth' },\n        group: 'Style',\n    },\n    {\n        key: 'arcBorderColor',\n        help: 'Arcs border color.',\n        required: false,\n        defaultValue: defaults.arcBorderColor,\n        flavors: allFlavors,\n        type: 'string | object | Function',\n        control: { type: 'inheritedColor' },\n        group: 'Style',\n    },\n    blendMode({\n        key: 'ribbonBlendMode',\n        target: 'ribbons',\n        group: 'Style',\n        flavors: ['svg'],\n        defaultValue: defaults.ribbonBlendMode,\n    }),\n    {\n        key: 'ribbonOpacity',\n        help: 'Ribbons opacity.',\n        required: false,\n        defaultValue: defaults.ribbonOpacity,\n        type: 'number',\n        flavors: allFlavors,\n        control: { type: 'opacity' },\n        group: 'Style',\n    },\n    {\n        key: 'ribbonBorderWidth',\n        help: 'Ribbons border width.',\n        required: false,\n        defaultValue: defaults.ribbonBorderWidth,\n        type: 'number',\n        control: { type: 'lineWidth' },\n        flavors: allFlavors,\n        group: 'Style',\n    },\n    {\n        key: 'ribbonBorderColor',\n        help: 'Ribbons border color.',\n        required: false,\n        defaultValue: defaults.ribbonBorderColor,\n        type: 'string | object | Function',\n        control: { type: 'inheritedColor' },\n        flavors: allFlavors,\n        group: 'Style',\n    },\n    {\n        key: 'enableLabel',\n        help: 'Enable/disable labels.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableLabel,\n        control: { type: 'switch' },\n        flavors: allFlavors,\n        group: 'Labels',\n    },\n    {\n        key: 'label',\n        help: 'Defines how to get label text, can be a string (used to access current arc data property) or a function which will receive the actual arc data.',\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaults.label,\n        group: 'Labels',\n        flavors: allFlavors,\n        control: {\n            type: 'choices',\n            choices: ['id', 'value', `d => \\`\\${d.id} [\\${d.value}]\\``].map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n    {\n        key: 'labelOffset',\n        help: 'Label offset from arc.',\n        required: false,\n        defaultValue: defaults.labelOffset,\n        type: 'number',\n        flavors: allFlavors,\n        group: 'Labels',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: -80,\n            max: 80,\n        },\n    },\n    {\n        key: 'labelRotation',\n        help: 'Label rotation.',\n        required: false,\n        defaultValue: defaults.labelRotation,\n        type: 'number',\n        group: 'Labels',\n        flavors: allFlavors,\n        control: {\n            type: 'angle',\n            min: -180,\n            max: 180,\n            step: 5,\n        },\n    },\n    {\n        key: 'labelTextColor',\n        description: `\n            How to compute label text color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        help: 'Method to compute label text color.',\n        type: 'string | object | Function',\n        required: false,\n        flavors: allFlavors,\n        defaultValue: defaults.labelTextColor,\n        control: { type: 'inheritedColor' },\n        group: 'Labels',\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer must be a function.\n            \n            The layer function which will receive the chart's\n            context & computed data and must return a valid SVG element\n            for the \\`Chord\\` component.\n\n            When using the canvas implementation, the function\n            will receive the canvas 2d context as first argument\n            and the chart's context and computed data as second.\n\n            Please make sure to use \\`context.save()\\` and\n            \\`context.restore()\\` if you make some global\n            modifications to the 2d context inside this function\n            to avoid side effects.\n        `,\n        flavors: allFlavors,\n        required: false,\n        type: 'Array<string | Function>',\n        defaultValue: defaults.layers,\n    },\n    isInteractive({\n        flavors: ['svg', 'canvas'],\n        defaultValue: defaults.isInteractive,\n    }),\n    {\n        key: 'activeArcOpacity',\n        flavors: ['svg', 'canvas'],\n        help: 'Arc opacity when active.',\n        required: false,\n        defaultValue: defaults.activeArcOpacity,\n        type: 'number',\n        control: { type: 'opacity' },\n        group: 'Interactivity',\n    },\n    {\n        key: 'inactiveArcOpacity',\n        flavors: ['svg', 'canvas'],\n        help: 'Arc opacity when inactive.',\n        required: false,\n        defaultValue: defaults.inactiveArcOpacity,\n        type: 'number',\n        control: { type: 'opacity' },\n        group: 'Interactivity',\n    },\n    {\n        key: 'activeRibbonOpacity',\n        flavors: ['svg', 'canvas'],\n        help: 'Ribbon opacity when active.',\n        required: false,\n        defaultValue: defaults.activeRibbonOpacity,\n        type: 'number',\n        control: { type: 'opacity' },\n        group: 'Interactivity',\n    },\n    {\n        key: 'inactiveRibbonOpacity',\n        flavors: ['svg', 'canvas'],\n        help: 'Ribbon opacity when inactive.',\n        required: false,\n        defaultValue: defaults.inactiveRibbonOpacity,\n        type: 'number',\n        control: { type: 'opacity' },\n        group: 'Interactivity',\n    },\n    {\n        key: 'onArcMouseEnter',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onMouseEnter handler for arcs.',\n        type: '(arc, event) => void',\n        required: false,\n    },\n    {\n        key: 'onArcMouseMove',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onMouseMove handler for arcs.',\n        type: '(arc, event) => void',\n        required: false,\n    },\n    {\n        key: 'onArcMouseLeave',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onMouseLeave handler for arcs.',\n        type: '(arc, event) => void',\n        required: false,\n    },\n    {\n        key: 'onArcClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onClick handler for arcs.',\n        type: '(arc, event) => void',\n        required: false,\n    },\n    {\n        key: 'arcTooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom arc tooltip component.',\n        description: `\n            A function allowing complete arc tooltip customisation,\n            it must return a valid HTML\n            element and will receive the arcs's data.\n        `,\n    },\n    {\n        key: 'onRibbonMouseEnter',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseEnter handler for ribbons.',\n        type: '(ribbon, event) => void',\n        required: false,\n    },\n    {\n        key: 'onRibbonMouseMove',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseMove handler for ribbons.',\n        type: '(ribbon, event) => void',\n        required: false,\n    },\n    {\n        key: 'onRibbonMouseLeave',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseLeave handler for ribbons.',\n        type: '(ribbon, event) => void',\n        required: false,\n    },\n    {\n        key: 'onRibbonClick',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onClick handler for ribbons.',\n        type: '(ribbon, event) => void',\n        required: false,\n    },\n    {\n        key: 'ribbonTooltip',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom ribbon tooltip component.',\n        description: `\n            A function allowing complete ribbon tooltip customisation,\n            it must return a valid HTML\n            element and will receive the ribbon's data.\n        `,\n    },\n    {\n        key: 'legends',\n        flavors: ['svg', 'canvas'],\n        type: 'object[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        required: false,\n        control: {\n            type: 'array',\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend: any) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                dataFrom: 'keys',\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: (data: any) => {\n                    console.log(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n    ...motionProperties(['svg'], defaults, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { ContinuousColorsLegendProps } from './types'\n\nexport const continuousColorsLegendDefaults: {\n    length: NonNullable<ContinuousColorsLegendProps['length']>\n    thickness: NonNullable<ContinuousColorsLegendProps['thickness']>\n    direction: NonNullable<ContinuousColorsLegendProps['direction']>\n    tickPosition: NonNullable<ContinuousColorsLegendProps['tickPosition']>\n    tickSize: NonNullable<ContinuousColorsLegendProps['tickSize']>\n    tickSpacing: NonNullable<ContinuousColorsLegendProps['tickSpacing']>\n    tickOverlap: NonNullable<ContinuousColorsLegendProps['tickOverlap']>\n    tickFormat: NonNullable<ContinuousColorsLegendProps['tickFormat']>\n    titleAlign: NonNullable<ContinuousColorsLegendProps['titleAlign']>\n    titleOffset: NonNullable<ContinuousColorsLegendProps['titleOffset']>\n} = {\n    length: 200,\n    thickness: 16,\n    direction: 'row',\n    tickPosition: 'after',\n    tickSize: 4,\n    tickSpacing: 3,\n    tickOverlap: false,\n    tickFormat: (value: number) => `${value}`,\n    titleAlign: 'start',\n    titleOffset: 4,\n}\n","import { scaleLinear } from 'd3-scale'\nimport { getValueFormatter } from '@nivo/core'\nimport { computeContinuousColorScaleColorStops } from '@nivo/colors'\nimport {\n    BoxLegendSvgProps,\n    ContinuousColorsLegendProps,\n    LegendAnchor,\n    LegendItemDirection,\n} from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n\nexport const computeContinuousColorsLegend = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    // left to right for `row`, bottom to top for `column`\n    const domain = direction === 'column' ? [...scale.domain()].reverse() : scale.domain()\n\n    const positionScale = scaleLinear().domain(domain)\n    if (domain.length === 2) {\n        // sequential, quantize\n        positionScale.range([0, length])\n    } else if (domain.length === 3) {\n        // diverging\n        positionScale.range([0, length / 2, length])\n    }\n\n    let values: number[]\n    if ('thresholds' in scale) {\n        // quantize\n        values = [domain[0], ...scale.thresholds(), domain[1]]\n    } else {\n        // sequential, diverging\n        values = Array.isArray(ticks) ? ticks : (scale as any).ticks(ticks)\n    }\n\n    const colorStops = computeContinuousColorScaleColorStops(scale, 32)\n\n    const formatValue = getValueFormatter(tickFormat)\n\n    const computedTicks: {\n        x1: number\n        y1: number\n        x2: number\n        y2: number\n        text: string\n        textX: number\n        textY: number\n        textHorizontalAlign: 'start' | 'middle' | 'end'\n        textVerticalAlign: 'alphabetic' | 'central' | 'hanging'\n    }[] = []\n\n    let width: number\n    let height: number\n\n    const gradientX1 = 0\n    let gradientY1 = 0\n    let gradientX2 = 0\n    const gradientY2 = 0\n\n    let titleX: number\n    let titleY: number\n    let titleRotation: number\n    let titleVerticalAlign: 'alphabetic' | 'hanging'\n\n    if (direction === 'row') {\n        width = length\n        height = thickness\n\n        gradientX2 = 1\n\n        let y1: number\n        let y2: number\n\n        let textY: number\n        const textHorizontalAlign = 'middle'\n        let textVerticalAlign: 'alphabetic' | 'hanging'\n\n        titleRotation = 0\n        if (titleAlign === 'start') {\n            titleX = 0\n        } else if (titleAlign === 'middle') {\n            titleX = length / 2\n        } else {\n            titleX = length\n        }\n\n        if (tickPosition === 'before') {\n            y1 = -tickSize\n            y2 = tickOverlap ? thickness : 0\n\n            textY = -tickSize - tickSpacing\n            textVerticalAlign = 'alphabetic'\n\n            titleY = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            y1 = tickOverlap ? 0 : thickness\n            y2 = thickness + tickSize\n\n            textY = y2 + tickSpacing\n            textVerticalAlign = 'hanging'\n\n            titleY = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const x = positionScale(value)\n\n            computedTicks.push({\n                x1: x,\n                y1,\n                x2: x,\n                y2,\n                text: formatValue(value),\n                textX: x,\n                textY,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    } else {\n        width = thickness\n        height = length\n\n        gradientY1 = 1\n\n        let x1: number\n        let x2: number\n\n        let textX: number\n        let textHorizontalAlign: 'start' | 'end'\n        const textVerticalAlign = 'central'\n\n        titleRotation = -90\n        if (titleAlign === 'start') {\n            titleY = length\n        } else if (titleAlign === 'middle') {\n            titleY = length / 2\n        } else {\n            titleY = 0\n        }\n\n        if (tickPosition === 'before') {\n            x1 = -tickSize\n            x2 = tickOverlap ? thickness : 0\n\n            textX = x1 - tickSpacing\n            textHorizontalAlign = 'end'\n\n            titleX = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            x1 = tickOverlap ? 0 : thickness\n            x2 = thickness + tickSize\n\n            textX = x2 + tickSpacing\n            textHorizontalAlign = 'start'\n\n            titleX = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const y = positionScale(value)\n\n            computedTicks.push({\n                x1,\n                y1: y,\n                x2,\n                y2: y,\n                text: formatValue(value),\n                textX,\n                textY: y,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    }\n\n    return {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks: computedTicks,\n        titleText: title,\n        titleX,\n        titleY,\n        titleRotation,\n        titleHorizontalAlign: titleAlign,\n        titleVerticalAlign,\n    }\n}\n","import { Fragment } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { computeContinuousColorsLegend } from '../compute'\nimport { ContinuousColorsLegendProps } from '../types'\nimport { continuousColorsLegendDefaults } from '../defaults'\n\nexport const ContinuousColorsLegendSvg = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        ticks: computedTicks,\n        colorStops,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const theme = useTheme()\n\n    const id = `ContinuousColorsLegendSvgGradient.${direction}.${colorStops\n        .map(stop => stop.offset)\n        .join('_')}`\n\n    return (\n        <g>\n            <defs>\n                <linearGradient\n                    id={id}\n                    x1={gradientX1}\n                    y1={gradientY1}\n                    x2={gradientX2}\n                    y2={gradientY2}\n                >\n                    {colorStops.map(colorStop => (\n                        <stop {...colorStop} />\n                    ))}\n                </linearGradient>\n            </defs>\n            {titleText && (\n                <text\n                    transform={`translate(${titleX}, ${titleY}) rotate(${titleRotation})`}\n                    textAnchor={titleHorizontalAlign}\n                    dominantBaseline={titleVerticalAlign}\n                    style={theme.legends.title.text}\n                >\n                    {titleText}\n                </text>\n            )}\n            <rect width={width} height={height} fill={`url(#${id}`} />\n            {computedTicks.map((tick, index) => (\n                <Fragment key={index}>\n                    <line\n                        x1={tick.x1}\n                        y1={tick.y1}\n                        x2={tick.x2}\n                        y2={tick.y2}\n                        style={theme.legends.ticks.line}\n                    />\n                    <text\n                        x={tick.textX}\n                        y={tick.textY}\n                        textAnchor={tick.textHorizontalAlign}\n                        dominantBaseline={tick.textVerticalAlign}\n                        style={theme.legends.ticks.text}\n                    >\n                        {tick.text}\n                    </text>\n                </Fragment>\n            ))}\n        </g>\n    )\n}\n","import { AnchoredContinuousColorsLegendProps } from '../types'\nimport { computePositionFromAnchor } from '../compute'\nimport { continuousColorsLegendDefaults } from '../defaults'\nimport { ContinuousColorsLegendSvg } from './ContinuousColorsLegendSvg'\n\nexport const AnchoredContinuousColorsLegendSvg = ({\n    containerWidth,\n    containerHeight,\n    anchor,\n    translateX = 0,\n    translateY = 0,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    ...legendProps\n}: AnchoredContinuousColorsLegendProps) => {\n    let width: number\n    let height: number\n    if (direction === 'row') {\n        width = length\n        height = thickness\n    } else {\n        width = thickness\n        height = length\n    }\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <g transform={`translate(${x}, ${y})`}>\n            <ContinuousColorsLegendSvg\n                length={length}\n                thickness={thickness}\n                direction={direction}\n                {...legendProps}\n            />\n        </g>\n    )\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { CompleteTheme, degreesToRadians } from '@nivo/core'\nimport {\n    computeDimensions,\n    computePositionFromAnchor,\n    computeItemLayout,\n    computeContinuousColorsLegend,\n} from './compute'\nimport { AnchoredContinuousColorsLegendProps, LegendCanvasProps } from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n\nexport const renderContinuousColorLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        containerWidth,\n        containerHeight,\n        anchor,\n        translateX = 0,\n        translateY = 0,\n        scale,\n        length = continuousColorsLegendDefaults.length,\n        thickness = continuousColorsLegendDefaults.thickness,\n        direction = continuousColorsLegendDefaults.direction,\n        ticks: _ticks,\n        tickPosition = continuousColorsLegendDefaults.tickPosition,\n        tickSize = continuousColorsLegendDefaults.tickSize,\n        tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n        tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n        tickFormat = continuousColorsLegendDefaults.tickFormat,\n        title,\n        titleAlign = continuousColorsLegendDefaults.titleAlign,\n        titleOffset = continuousColorsLegendDefaults.titleOffset,\n        theme,\n    }: AnchoredContinuousColorsLegendProps & {\n        theme: CompleteTheme\n    }\n) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks: _ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const initialStyles = {\n        font: ctx.font,\n        textAlign: ctx.textAlign,\n        textBaseline: ctx.textBaseline,\n    }\n    ctx.save()\n\n    ctx.translate(x, y)\n\n    const gradient = ctx.createLinearGradient(\n        gradientX1 * width,\n        gradientY1 * height,\n        gradientX2 * width,\n        gradientY2 * height\n    )\n    colorStops.forEach(colorStop => {\n        gradient.addColorStop(colorStop.offset, colorStop.stopColor)\n    })\n\n    ctx.fillStyle = gradient\n    ctx.fillRect(0, 0, width, height)\n\n    ctx.font = `${\n        theme.legends.ticks.text.fontWeight ? `${theme.legends.ticks.text.fontWeight} ` : ''\n    }${theme.legends.ticks.text.fontSize}px ${theme.legends.ticks.text.fontFamily}`\n\n    ticks.forEach(tick => {\n        if ((theme.legends.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n            ctx.lineCap = 'square'\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x1, tick.y1)\n            ctx.lineTo(tick.x2, tick.y2)\n            ctx.stroke()\n        }\n\n        if (theme.legends.ticks.text.fill) {\n            ctx.fillStyle = theme.legends.ticks.text.fill\n        }\n        ctx.textAlign = tick.textHorizontalAlign === 'middle' ? 'center' : tick.textHorizontalAlign\n        ctx.textBaseline = tick.textVerticalAlign === 'central' ? 'middle' : tick.textVerticalAlign\n\n        ctx.fillText(tick.text, tick.textX, tick.textY)\n    })\n\n    if (titleText) {\n        ctx.save()\n        ctx.translate(titleX, titleY)\n        ctx.rotate(degreesToRadians(titleRotation))\n\n        ctx.font = `${\n            theme.legends.title.text.fontWeight ? `${theme.legends.title.text.fontWeight} ` : ''\n        }${theme.legends.title.text.fontSize}px ${theme.legends.title.text.fontFamily}`\n        if (theme.legends.title.text.fill) {\n            ctx.fillStyle = theme.legends.title.text.fill\n        }\n        ctx.textAlign = titleHorizontalAlign === 'middle' ? 'center' : titleHorizontalAlign\n        ctx.textBaseline = titleVerticalAlign\n\n        ctx.fillText(titleText, 0, 0)\n\n        ctx.restore()\n    }\n\n    ctx.restore()\n\n    ctx.font = initialStyles.font\n    ctx.textAlign = initialStyles.textAlign\n    ctx.textBaseline = initialStyles.textBaseline\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n\n        if (reverse) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse, separator, valueFormat])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n"],"names":["durationSecond","durationMinute","durationHour","durationDay","durationWeek","t0","Date","t1","newInterval","floori","offseti","count","field","interval","date","arguments","length","floor","ceil","round","d0","d1","offset","step","Math","range","start","stop","previous","push","filter","test","setTime","end","every","isFinite","d","settingsMapper","label","value","id","allFlavors","props","key","group","help","description","required","type","flavors","chartDimensions","defaultValue","defaults","control","min","max","themeProperty","ordinalColors","blendMode","target","choices","map","choice","unit","isInteractive","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","dataFrom","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","data","console","log","JSON","stringify","motionProperties","groups","groupProperties","continuousColorsLegendDefaults","thickness","tickPosition","tickSize","tickSpacing","tickOverlap","tickFormat","titleAlign","titleOffset","zeroPadding","top","right","bottom","left","computeDimensions","item","_padding","padding","itemCount","Array","isArray","Error","horizontalPadding","verticalPadding","width","height","spacing","computePositionFromAnchor","containerWidth","containerHeight","x","y","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","symbolSpacing","computeContinuousColorsLegend","values","scale","ticks","title","domain","reverse","positionScale","scaleLinear","thresholds","titleX","titleY","titleRotation","titleVerticalAlign","y1","y2","textY","textVerticalAlign","x1","x2","textX","textHorizontalAlign","colorStops","computeContinuousColorScaleColorStops","formatValue","getValueFormatter","computedTicks","gradientY1","gradientX2","forEach","text","gradientX1","gradientY2","titleText","titleHorizontalAlign","ContinuousColorsLegendSvg","theme","useTheme","join","_jsxs","_jsx","colorStop","transform","textAnchor","dominantBaseline","style","legends","fill","tick","Fragment","line","AnchoredContinuousColorsLegendSvg","legendProps","symbolByShape","circle","size","opacity","borderWidth","borderColor","r","cx","cy","strokeWidth","stroke","pointerEvents","diamond","square","triangle","LegendSvgItem","textColor","background","symbolShape","symbolBorderWidth","symbolBorderColor","onMouseEnter","onMouseLeave","toggleSerie","effects","useState","setStyle","handleMouseEnter","useCallback","event","on","reduce","acc","effect","handleMouseLeave","some","handler","SymbolShape","itemOpacity","itemBackground","cursor","React","color","hidden","symbol","itemTextColor","userSelect","LegendSvg","xStep","yStep","i","BoxLegendSvg","textAlignMapping","middle","renderLegendToCanvas","ctx","save","translate","font","fontSize","fontFamily","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","renderContinuousColorLegendToCanvas","_ticks","initialStyles","gradient","createLinearGradient","addColorStop","stopColor","fontWeight","lineWidth","Number","axis","strokeStyle","lineCap","beginPath","moveTo","lineTo","rotate","degreesToRadians","useQuantizeColorScaleLegendData","overriddenDomain","valueFormat","v","separator","useMemo","items","domainValue","invertExtent","extent","LegendPropShape","PropTypes","isRequired"],"sourceRoot":""}