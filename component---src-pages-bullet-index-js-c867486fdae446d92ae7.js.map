{"version":3,"file":"component---src-pages-bullet-index-js-c867486fdae446d92ae7.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-time/src/day.js","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/BulletMarkersItem.tsx","webpack://nivo-website/../src/BulletRectsItem.tsx","webpack://nivo-website/../src/BulletTooltip.tsx","webpack://nivo-website/../src/BulletMarkers.tsx","webpack://nivo-website/../src/BulletRects.tsx","webpack://nivo-website/../src/BulletItem.tsx","webpack://nivo-website/../src/Bullet.tsx","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/ResponsiveBullet.tsx","webpack://nivo-website/../src/color.ts","webpack://nivo-website/../src/sets/countryCodes.ts","webpack://nivo-website/../src/sets/names.ts","webpack://nivo-website/../src/sets/programmingLanguages.ts","webpack://nivo-website/../src/bullet.ts","webpack://nivo-website/../src/chord.ts","webpack://nivo-website/../src/network.ts","webpack://nivo-website/../src/parallelCoordinates.ts","webpack://nivo-website/../src/sankey.ts","webpack://nivo-website/../src/swarmplot.ts","webpack://nivo-website/../src/xySeries.ts","webpack://nivo-website/../src/index.ts","webpack://nivo-website/./src/data/components/bullet/props.ts","webpack://nivo-website/./src/pages/bullet/index.js","webpack://nivo-website/../node_modules/lodash/_arrayShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/_baseShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseValues.js","webpack://nivo-website/../node_modules/lodash/_shuffleSelf.js","webpack://nivo-website/../node_modules/lodash/random.js","webpack://nivo-website/../node_modules/lodash/shuffle.js","webpack://nivo-website/../node_modules/lodash/values.js"],"sourcesContent":["import interval from \"./interval.js\";\nimport { durationDay, durationMinute } from \"./duration.js\";\nvar day = interval(function (date) {\n  date.setHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setDate(date.getDate() + step);\n}, function (start, end) {\n  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n}, function (date) {\n  return date.getDate() - 1;\n});\nexport default day;\nexport var days = day.range;","import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map((value: Value) => ({\n        key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProps, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProps<X> | null\n        right?: CanvasAxisProps<Y> | null\n        bottom?: CanvasAxisProps<X> | null\n        left?: CanvasAxisProps<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProps<X> | undefined\n            : CanvasAxisProps<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n","import { BulletMarkersItemProps } from './types'\nimport { animated } from '@react-spring/web'\n\nexport const BulletMarkersItem = ({\n    animatedProps: { color, transform, x, y1, y2 },\n    data,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: BulletMarkersItemProps) => {\n    return (\n        <animated.line\n            transform={transform}\n            x1={x}\n            x2={x}\n            y1={y1}\n            y2={y2}\n            fill=\"none\"\n            stroke={color}\n            strokeWidth=\"5\"\n            onMouseMove={event => onMouseMove(data, event)}\n            onMouseEnter={event => onMouseEnter(data, event)}\n            onMouseLeave={event => onMouseLeave(data, event)}\n            onClick={event => onClick(data, event)}\n        />\n    )\n}\n","import { BulletRectsItemProps } from './types'\nimport { animated, to } from '@react-spring/web'\n\nexport const BulletRectsItem = ({\n    animatedProps: { x, y, width, height, color },\n    borderColor,\n    borderWidth,\n    data,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: BulletRectsItemProps) => {\n    return (\n        <animated.rect\n            x={x}\n            y={y}\n            width={to(width, value => Math.max(value, 0))}\n            height={to(height, value => Math.max(value, 0))}\n            fill={color}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            onMouseMove={event => onMouseMove(data, event)}\n            onMouseEnter={event => onMouseEnter(data, event)}\n            onMouseLeave={event => onMouseLeave(data, event)}\n            onClick={event => onClick(data, event)}\n        />\n    )\n}\n","import { BulletTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BulletTooltip = ({ color, v0, v1 }: BulletTooltipProps) => {\n    return (\n        <BasicTooltip\n            id={\n                v1 ? (\n                    <span>\n                        <strong>{v0}</strong> to <strong>{v1}</strong>\n                    </span>\n                ) : (\n                    <strong>{v0}</strong>\n                )\n            }\n            enableChip={true}\n            color={color}\n        />\n    )\n}\n","import { useMemo } from 'react'\nimport * as React from 'react'\nimport { useTransition } from '@react-spring/web'\n// @ts-ignore\nimport { useMotionConfig } from '@nivo/core'\nimport {\n    BulletMarkersProps,\n    ComputedMarkersDatum,\n    MarkerWithPosition,\n    PositionWithColor,\n} from './types'\n\ntype MouseEventWithDatum = (\n    datum: ComputedMarkersDatum,\n    event: React.MouseEvent<SVGLineElement, MouseEvent>\n) => void\n\ntype EventHandlers = Record<'onMouseEnter' | 'onMouseLeave' | 'onClick', MouseEventWithDatum>\n\nconst getPositionGenerator = ({\n    layout,\n    reverse,\n    scale,\n    height,\n    markerSize,\n}: Pick<BulletMarkersProps, 'layout' | 'reverse' | 'scale' | 'height' | 'markerSize'>) => {\n    if (layout === 'horizontal') {\n        return (marker: ComputedMarkersDatum) => {\n            const x = scale(marker.value)\n            const y = height / 2\n            const rotation = reverse === true ? 180 : 0\n\n            return { x, y, size: markerSize, rotation }\n        }\n    }\n\n    return (marker: ComputedMarkersDatum) => {\n        const x = height / 2\n        const y = scale(marker.value)\n        const rotation = reverse === true ? 270 : 90\n\n        return { x, y, size: markerSize, rotation }\n    }\n}\n\nexport const BulletMarkers = ({\n    scale,\n    layout,\n    reverse,\n    markers,\n    height,\n    markerSize,\n    component,\n    onMouseEnter,\n    onMouseLeave,\n    onClick,\n}: BulletMarkersProps & EventHandlers) => {\n    const getPosition = useMemo(\n        () => getPositionGenerator({ layout, reverse, scale, height, markerSize }),\n        [layout, reverse, scale, height, markerSize]\n    )\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<MarkerWithPosition, PositionWithColor>(\n        markers.map(marker => ({ ...marker, position: getPosition(marker) })),\n        {\n            keys: marker => `${marker.index}`,\n            enter: ({ color, position }: MarkerWithPosition) => ({\n                color,\n                transform: `rotate(${position.rotation}, ${position.x}, ${position.y})`,\n                x: position.x,\n                y1: position.y - position.size / 2,\n                y2: position.y + position.size / 2,\n            }),\n            update: ({ color, position }: MarkerWithPosition) => ({\n                color,\n                transform: `rotate(${position.rotation}, ${position.x}, ${position.y})`,\n                x: position.x,\n                y1: position.y - position.size / 2,\n                y2: position.y + position.size / 2,\n            }),\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <>\n            {transition((props, { position, ...marker }) =>\n                React.createElement(component, {\n                    key: marker.index,\n                    ...marker,\n                    ...position,\n                    animatedProps: props,\n                    data: marker,\n                    onMouseEnter,\n                    onMouseMove: onMouseEnter,\n                    onMouseLeave,\n                    onClick,\n                })\n            )}\n        </>\n    )\n}\n","import { createElement, useMemo } from 'react'\nimport { useTransition, animated, to } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { computeRects } from './compute'\nimport { BulletRectsProps, BulletRectComputedRect, BulletRectAnimatedProps } from './types'\nimport { useInheritedColor } from '@nivo/colors'\n\nexport const BulletRects = ({\n    animatedProps,\n    data,\n    layout,\n    y,\n    borderColor,\n    borderWidth,\n    component,\n    reverse,\n    scale,\n    height,\n    onMouseEnter,\n    onMouseLeave,\n    onClick,\n}: BulletRectsProps) => {\n    const rects = useMemo(\n        () =>\n            computeRects({\n                data,\n                layout,\n                reverse,\n                scale,\n                height,\n            }),\n        [data, layout, reverse, scale, height]\n    )\n\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const getTransform = (value: number) =>\n        `translate(${layout === 'horizontal' ? 0 : value},${layout === 'horizontal' ? value : 0})`\n\n    const transform = animatedProps ? to(animatedProps.measuresY, getTransform) : getTransform(y)\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<BulletRectComputedRect, BulletRectAnimatedProps>(rects, {\n        keys: rect => `${rect.data.index}`,\n        enter: rect => ({\n            x: rect.x,\n            y: rect.y,\n            width: rect.width,\n            height: rect.height,\n            color: rect.data.color,\n        }),\n        update: rect => ({\n            x: rect.x,\n            y: rect.y,\n            width: rect.width,\n            height: rect.height,\n            color: rect.data.color,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={transform}>\n            {transition((props, rect) =>\n                createElement(component, {\n                    key: rect.data.index,\n                    index: rect.data.index,\n                    animatedProps: props,\n                    data: rect.data,\n                    x: props.x.get(),\n                    y: props.y.get(),\n                    borderColor: getBorderColor(rect.data),\n                    borderWidth,\n                    width: to(props.width, value => Math.max(value, 0)).get(),\n                    height: to(props.height, value => Math.max(value, 0)).get(),\n                    color: props.color.get(),\n                    onMouseEnter,\n                    onMouseMove: onMouseEnter,\n                    onMouseLeave,\n                    onClick,\n                })\n            )}\n        </animated.g>\n    )\n}\n","import { useMemo } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { Axis } from '@nivo/axes'\n// @ts-ignore\nimport { getColorScale, useMotionConfig, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { stackValues } from './compute'\nimport { BulletMarkers } from './BulletMarkers'\nimport { BulletRects } from './BulletRects'\nimport { BulletItemProps } from './types'\n\nexport const BulletItem = ({\n    id,\n\n    scale,\n    layout,\n    reverse,\n    axisPosition,\n    x,\n    y,\n    width,\n    height,\n\n    title = id,\n    titlePosition,\n    titleAlign,\n    titleOffsetX,\n    titleOffsetY,\n    titleRotation,\n    tooltip,\n\n    rangeBorderColor,\n    rangeBorderWidth,\n    rangeComponent,\n    rangeColors,\n    ranges,\n\n    measureBorderColor,\n    measureBorderWidth,\n    measureComponent,\n    measureHeight,\n    measureColors,\n    measures,\n\n    markerComponent,\n    markerColors,\n    markerHeight,\n    markers = [],\n\n    onRangeClick,\n    onMeasureClick,\n    onMarkerClick,\n}: BulletItemProps) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const computedRanges = useMemo(() => {\n        const rangeColorScale = getColorScale(rangeColors, scale, true)\n\n        return stackValues(ranges, scale, rangeColorScale, 'range')\n    }, [rangeColors, ranges, scale])\n\n    const computedMeasures = useMemo(() => {\n        const measureColorScale = getColorScale(measureColors, scale)\n\n        return stackValues(measures, scale, measureColorScale, 'measures')\n    }, [measureColors, measures, scale])\n\n    const computedMarkers = useMemo(() => {\n        const markerColorScale = getColorScale(markerColors, scale)\n\n        return markers.map((marker: number, index: number) => ({\n            value: marker,\n            index,\n            color: markerColorScale(\n                markerColorScale.type === 'sequential' ? marker : index\n            ) as string,\n        }))\n    }, [markerColors, markers, scale])\n\n    const TooltipComponent = tooltip\n\n    const rangeNodes = (\n        <BulletRects\n            data={computedRanges}\n            scale={scale}\n            layout={layout}\n            reverse={reverse}\n            x={0}\n            y={0}\n            width={width}\n            height={height}\n            component={rangeComponent}\n            borderColor={rangeBorderColor}\n            borderWidth={rangeBorderWidth}\n            onMouseEnter={(range, event) => {\n                showTooltipFromEvent(\n                    <TooltipComponent color={range.color} v0={range.v0} v1={range.v1} />,\n                    event\n                )\n            }}\n            onMouseLeave={hideTooltip}\n            onClick={(range, event) => {\n                onRangeClick?.({ id, ...range }, event)\n            }}\n        />\n    )\n\n    const markerNodes = (\n        <BulletMarkers\n            markers={computedMarkers}\n            scale={scale}\n            layout={layout}\n            reverse={reverse}\n            height={height}\n            markerSize={markerHeight}\n            component={markerComponent}\n            onMouseEnter={(marker, event) => {\n                showTooltipFromEvent(\n                    <TooltipComponent color={marker.color} v0={marker.value} />,\n                    event\n                )\n            }}\n            onMouseLeave={hideTooltip}\n            onClick={(marker, event) => {\n                onMarkerClick?.({ id, ...marker }, event)\n            }}\n        />\n    )\n\n    const axisX = layout === 'vertical' && axisPosition === 'after' ? height : 0\n    const axisY = layout === 'horizontal' && axisPosition === 'after' ? height : 0\n\n    const axis = (\n        <g transform={`translate(${axisX},${axisY})`}>\n            <Axis\n                axis={layout === 'horizontal' ? 'x' : 'y'}\n                length={layout === 'horizontal' ? width : height}\n                scale={scale}\n                ticksPosition={axisPosition}\n            />\n        </g>\n    )\n\n    const titleX =\n        layout === 'horizontal'\n            ? titlePosition === 'before'\n                ? titleOffsetX\n                : width + titleOffsetX\n            : height / 2 + titleOffsetX\n    const titleY =\n        layout === 'horizontal'\n            ? height / 2 + titleOffsetY\n            : titlePosition === 'before'\n            ? titleOffsetY\n            : width + titleOffsetY\n\n    const titleNode = (\n        <g transform={`translate(${titleX},${titleY}) rotate(${titleRotation})`}>\n            {typeof title === 'string' ? (\n                <text\n                    style={{\n                        ...theme?.labels?.text,\n                        dominantBaseline: 'central',\n                        textAnchor: titleAlign,\n                    }}\n                >\n                    {title}\n                </text>\n            ) : (\n                title\n            )}\n        </g>\n    )\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedProps = useSpring({\n        measuresY: (height - measureHeight) / 2,\n        transform: `translate(${x},${y})`,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform}>\n            {rangeNodes}\n            <BulletRects\n                animatedProps={animatedProps}\n                data={computedMeasures}\n                scale={scale}\n                layout={layout}\n                reverse={reverse}\n                x={0}\n                y={0}\n                width={width}\n                height={measureHeight}\n                component={measureComponent}\n                borderColor={measureBorderColor}\n                borderWidth={measureBorderWidth}\n                onMouseEnter={(measure, event) => {\n                    showTooltipFromEvent(\n                        <TooltipComponent color={measure.color} v0={measure.v1} />,\n                        event\n                    )\n                }}\n                onMouseLeave={hideTooltip}\n                onClick={(measure, event) => {\n                    onMeasureClick?.({ id, ...measure }, event)\n                }}\n            />\n            {axis}\n            {markerNodes}\n            {titleNode}\n        </animated.g>\n    )\n}\n","import { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { defaultProps } from './props'\nimport { BulletSvgProps } from './types'\nimport { BulletItem } from './BulletItem'\nimport { useEnhancedData } from './hooks'\n\nexport const Bullet = (props: BulletSvgProps) => {\n    const {\n        data,\n\n        layout,\n        spacing,\n        measureSize,\n        markerSize,\n        reverse,\n        axisPosition,\n\n        minValue,\n        maxValue,\n\n        margin: partialMargin,\n        width,\n        height,\n\n        titlePosition,\n        titleAlign,\n        titleOffsetX,\n        titleOffsetY,\n        titleRotation,\n\n        rangeBorderColor,\n        rangeBorderWidth,\n        rangeComponent,\n        rangeColors,\n\n        measureBorderColor,\n        measureBorderWidth,\n        measureComponent,\n        measureColors,\n\n        markerComponent,\n        markerColors,\n\n        theme,\n        tooltip = defaultProps.tooltip,\n\n        animate,\n        motionConfig,\n\n        isInteractive,\n        onRangeClick,\n        onMeasureClick,\n        onMarkerClick,\n\n        role,\n    } = { ...defaultProps, ...props }\n\n    const { margin, innerWidth, innerHeight } = useDimensions(width, height, partialMargin)\n\n    const itemHeight =\n        layout === 'horizontal'\n            ? (innerHeight - spacing * (data.length - 1)) / data.length\n            : (innerWidth - spacing * (data.length - 1)) / data.length\n\n    const measureHeight = itemHeight * measureSize\n    const markerHeight = itemHeight * markerSize\n\n    const enhancedData = useEnhancedData(data, {\n        height: innerHeight,\n        layout,\n        maxValue: maxValue === 'auto' ? undefined : maxValue,\n        minValue: minValue === 'auto' ? undefined : minValue,\n        reverse,\n        width: innerWidth,\n    })\n\n    return (\n        <Container\n            isInteractive={isInteractive}\n            theme={theme}\n            animate={animate}\n            motionConfig={motionConfig}\n        >\n            <SvgWrapper width={width} height={height} margin={margin} role={role}>\n                {enhancedData.map((d, i) => (\n                    <BulletItem\n                        key={d.id}\n                        {...d}\n                        layout={layout}\n                        reverse={reverse}\n                        x={layout === 'vertical' ? itemHeight * i + spacing * i : 0}\n                        y={layout === 'horizontal' ? itemHeight * i + spacing * i : 0}\n                        width={innerWidth}\n                        height={itemHeight}\n                        titlePosition={titlePosition}\n                        titleAlign={titleAlign}\n                        titleOffsetX={titleOffsetX}\n                        titleOffsetY={titleOffsetY}\n                        titleRotation={titleRotation}\n                        measureHeight={measureHeight}\n                        markerHeight={markerHeight}\n                        rangeBorderColor={rangeBorderColor}\n                        rangeBorderWidth={rangeBorderWidth}\n                        rangeComponent={rangeComponent}\n                        rangeColors={rangeColors}\n                        measureBorderColor={measureBorderColor}\n                        measureBorderWidth={measureBorderWidth}\n                        measureComponent={measureComponent}\n                        measureColors={measureColors}\n                        markerComponent={markerComponent}\n                        markerColors={markerColors}\n                        axisPosition={axisPosition}\n                        onRangeClick={onRangeClick}\n                        onMeasureClick={onMeasureClick}\n                        onMarkerClick={onMarkerClick}\n                        tooltip={tooltip}\n                    />\n                ))}\n            </SvgWrapper>\n        </Container>\n    )\n}\n","import { createLinearScale } from '@nivo/scales'\nimport { useMemo } from 'react'\nimport { Datum, CommonBulletProps } from './types'\n\nexport const useEnhancedData = (\n    data: Datum[],\n    {\n        layout,\n        maxValue,\n        minValue,\n        reverse,\n        height,\n        width,\n    }: Pick<CommonBulletProps, 'layout' | 'reverse' | 'height' | 'width'> &\n        Record<'maxValue' | 'minValue', number | undefined>\n) => {\n    return useMemo(\n        () =>\n            data.map(d => {\n                const all = [...d.ranges, ...d.measures, ...(d.markers ?? [])]\n                const max = maxValue ?? Math.max(...all)\n                const min = minValue ?? Math.min(...all)\n\n                const scale = createLinearScale(\n                    { clamp: true, min, max, type: 'linear' },\n                    { all, max, min },\n                    layout === 'horizontal' ? width : height,\n                    layout === 'horizontal' ? (reverse ? 'y' : 'x') : reverse ? 'x' : 'y'\n                )\n\n                return {\n                    ...d,\n                    scale,\n                }\n            }),\n        [data, height, layout, maxValue, minValue, reverse, width]\n    )\n}\n","import { ResponsiveWrapper, Dimensions } from '@nivo/core'\nimport { BulletSvgProps } from './types'\nimport { Bullet } from './Bullet'\n\nexport const ResponsiveBullet = (props: Omit<BulletSvgProps, 'height' | 'width'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }: Dimensions) => <Bullet width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","export const randColor = () => `hsl(${Math.round(Math.random() * 360)}, 70%, 50%)`\n","export const countryCodes = [\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AS',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CC',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CU',\n    'CV',\n    'CW',\n    'CX',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FM',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HM',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IR',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KP',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MH',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MP',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NF',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PW',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SY',\n    'SZ',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'UM',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VI',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n]\n","export const names = [\n    'John',\n    'Raoul',\n    'Jane',\n    'Marcel',\n    'Ibrahim',\n    'Junko',\n    'Lyu',\n    'André',\n    'Maki',\n    'Véronique',\n    'Thibeau',\n    'Josiane',\n    'Raphaël',\n    'Mathéo',\n    'Margot',\n    'Hugo',\n    'Christian',\n    'Louis',\n    'Ella',\n    'Alton',\n    'Jimmy',\n    'Guillaume',\n    'Sébastien',\n    'Alfred',\n    'Bon',\n    'Solange',\n    'Kendrick',\n    'Jared',\n    'Satoko',\n    'Tomoko',\n    'Line',\n    'Delphine',\n    'Leonard',\n    'Alphonse',\n    'Lisa',\n    'Bart',\n    'Benjamin',\n    'Homer',\n    'Jack',\n]\n","export const programmingLanguages = [\n    'php',\n    'make',\n    'javascript',\n    'go',\n    'erlang',\n    'elixir',\n    'lisp',\n    'haskell',\n    'python',\n    'ruby',\n    'hack',\n    'scala',\n    'java',\n    'rust',\n    'c',\n    'css',\n    'sass',\n    'stylus',\n]\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\ntype Options = Partial<{\n    float: boolean\n    markerCount: number\n    measureCount: number\n    rangeCount: number\n    subtitle: string\n    title: string\n}>\n\nexport const generateBulletData = (\n    id: string,\n    max: number,\n    {\n        title,\n        subtitle,\n        rangeCount = 5,\n        measureCount = 1,\n        markerCount = 1,\n        float = false,\n    }: Options = {}\n) => {\n    const ranges = range(rangeCount - 1).reduce(\n        acc => {\n            const remaining = max - acc[0]\n            return [random(remaining, float), ...acc]\n        },\n        [max]\n    )\n\n    const measures = range(measureCount).reduce<number[]>(acc => {\n        if (acc.length === 0) return [random(max, float)]\n        return [random(acc[0], float), ...acc]\n    }, [])\n\n    const markers = range(markerCount).map(() => max * 0.6 + random(max * 0.4))\n\n    return {\n        id,\n        title,\n        subtitle,\n        ranges,\n        measures,\n        markers,\n    }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport { names } from './sets'\n\nexport const generateChordData = ({\n    keys = names,\n    size = 7,\n    minValue = 0,\n    maxValue = 2000,\n} = {}) => {\n    const maxSize = Math.min(keys.length, size)\n    const selectedKeys = keys.slice(0, maxSize)\n\n    const matrix = range(maxSize).map(() =>\n        range(maxSize).map(() => {\n            if (Math.random() < 0.66) return random(minValue, maxValue / 4)\n            return random(minValue, maxValue)\n        })\n    )\n\n    return { matrix, keys: selectedKeys }\n}\n","import random from 'lodash/random'\n\ntype Link = {\n    source: string\n    target: string\n    distance: number\n}\n\ntype ExtraNode = {\n    id: string\n    height: number\n    color: string\n    size: number\n}\n\nexport const generateNetworkData = ({\n    rootSize = 32,\n    midSize = 24,\n    leafSize = 12,\n    minMidNodes = 5,\n    maxMidNodes = 11,\n    minLeaves = 3,\n    maxLeaves = 9,\n}: {\n    rootSize?: number\n    midSize?: number\n    leafSize?: number\n    minMidNodes?: number\n    maxMidNodes?: number\n    minLeaves?: number\n    maxLeaves?: number\n} = {}) => {\n    const rootNode = {\n        id: 'Node 0',\n        height: 2,\n        size: rootSize,\n        color: 'rgb(244, 117, 96)',\n    }\n    let nodes = Array.from({ length: random(minMidNodes, maxMidNodes) }, (_, k) => ({\n        id: `Node ${k + 1}`,\n        height: 1,\n        size: midSize,\n        color: 'rgb(97, 205, 187)',\n    }))\n\n    const links: Link[] = []\n    const extraNodes: ExtraNode[] = []\n    nodes.forEach(source => {\n        links.push({\n            source: 'Node 0',\n            target: source.id,\n            distance: 80,\n        })\n        nodes.forEach(target => {\n            if (Math.random() < 0.04) {\n                links.push({\n                    source: source.id,\n                    target: target.id,\n                    distance: 80,\n                })\n            }\n        })\n        Array.from({ length: random(minLeaves, maxLeaves) }, (_, k) => {\n            extraNodes.push({\n                id: `${source.id}.${k}`,\n                height: 0,\n                size: leafSize,\n                color: 'rgb(232, 193, 160)',\n            })\n            links.push({\n                source: source.id,\n                target: `${source.id}.${k}`,\n                distance: 50,\n            })\n\n            return null\n        })\n    })\n\n    nodes.push(rootNode)\n    nodes = nodes.concat(extraNodes)\n\n    return { nodes, links }\n}\n","import random from 'lodash/random'\nimport range from 'lodash/range'\nimport shuffle from 'lodash/shuffle'\n\ntype Options = Partial<{\n    size: number\n    keys: Array<{\n        key: string\n        random?: [number, number]\n        shuffle?: string[]\n    }>\n}>\n\nexport const generateParallelCoordinatesData = ({\n    size = 26,\n    keys = [\n        { key: 'temp', random: [-10, 40] },\n        { key: 'cost', random: [200, 400000] },\n        { key: 'color', shuffle: ['red', 'yellow', 'green'] },\n        { key: 'target', shuffle: ['A', 'B', 'C', 'D', 'E'] },\n        { key: 'volume', random: [0.2, 7.6] },\n    ],\n}: Options = {}) => {\n    const datumGenerator = () =>\n        keys.reduce((acc, key) => {\n            let value\n            if (key.random !== undefined) {\n                value = random(...key.random)\n            } else if (key.shuffle !== undefined) {\n                value = shuffle(key.shuffle)[0]\n            }\n\n            return { ...acc, [key.key]: value }\n        }, {})\n\n    return range(size).map(datumGenerator)\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { randColor } from './color'\nimport { names } from './sets'\n\ntype Link = {\n    source: string\n    target: string\n    value: number\n}\n\nconst availableNodes = names.map(name => ({ id: name }))\n\nconst getNodeTargets = (id: string, links: Link[], currentPath?: string[]): string[] => {\n    const targets = links\n        .filter(({ source }) => source === id)\n        .map(({ target }) => {\n            if (target === id) {\n                throw new Error(\n                    `[sankey] a node cannot be linked on itself:\\n  link: ${id} —> ${id}`\n                )\n            }\n            if (currentPath?.includes(target)) {\n                throw new Error(\n                    `[sankey] found cyclic dependency:\\n  link: ${currentPath.join(\n                        ' —> '\n                    )} —> ${target}`\n                )\n            }\n            return target\n        })\n\n    return targets.reduce(\n        (acc, targetId) =>\n            acc.concat(\n                getNodeTargets(\n                    targetId,\n                    links,\n                    currentPath ? [...currentPath, targetId] : [id, targetId]\n                )\n            ),\n        targets\n    )\n}\n\nconst getNodesTargets = (links: Link[]) =>\n    links.reduce<Record<string, string[]>>((targetsById, link) => {\n        if (!targetsById[link.source]) {\n            targetsById[link.source] = getNodeTargets(link.source, links)\n        }\n\n        return targetsById\n    }, {})\n\nexport const generateSankeyData = ({\n    nodeCount,\n    maxIterations = 3,\n}: {\n    nodeCount?: number\n    maxIterations?: number\n} = {}) => {\n    const nodes = availableNodes.slice(0, nodeCount).map(node =>\n        Object.assign({}, node, {\n            nodeColor: randColor(),\n        })\n    )\n\n    const links: Link[] = []\n    shuffle(nodes).forEach(({ id }) => {\n        range(random(1, maxIterations)).forEach(() => {\n            const targetsById = getNodesTargets(links)\n            const randId = shuffle(nodes.filter(n => n.id !== id).map(n => n.id))[0]\n            if (\n                (!targetsById[randId] || !targetsById[randId].includes(id)) &&\n                (!targetsById[id] || !targetsById[id].includes(randId))\n            ) {\n                links.push({\n                    source: id,\n                    target: randId,\n                    value: random(5, 200),\n                })\n            }\n        })\n    })\n\n    return { nodes, links }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\n\ntype SwarmPlotDatum = {\n    id: string\n    categories?: number[]\n    group: string\n    price: number\n    volume: number\n}\n\nconst randomPrice = () => random(0, 500)\nconst randomVolume = () => random(4, 20)\nconst randomCategory = () => random(3, 17)\n\nexport const generateSwarmPlotData = (\n    groups: string[],\n    { min = 60, max = 100, categoryCount = 0 }\n) => ({\n    groups,\n    data: groups.reduce<SwarmPlotDatum[]>(\n        (acc, group, groupIndex) => [\n            ...acc,\n            ...range(random(min, max))\n                .map(() => randomPrice())\n                .map((price, index) => {\n                    const datum: SwarmPlotDatum = {\n                        id: `${groupIndex}.${index}`,\n                        group,\n                        price,\n                        volume: randomVolume(),\n                    }\n\n                    if (categoryCount > 0) {\n                        datum.categories = range(categoryCount).map(randomCategory)\n                    }\n\n                    return datum\n                }),\n        ],\n        []\n    ),\n})\n\nexport const randomizeSwarmPlotData = (previousData: ReturnType<typeof generateSwarmPlotData>) => ({\n    groups: previousData.groups,\n    data: previousData.data.map(d => {\n        const datum = {\n            ...d,\n            group: shuffle(previousData.groups)[0],\n            price: randomPrice(),\n            volume: randomVolume(),\n        }\n\n        if (d.categories !== undefined) {\n            datum.categories = range(3).map(randomCategory)\n        }\n\n        return datum\n    }),\n})\n","interface XYRangeStaticValues {\n    values: string[] | number[]\n}\n\ninterface XYRandomNumericValues {\n    length: number\n    min: number\n    max: number\n    round?: boolean\n}\n\ntype XYRangeValues = XYRangeStaticValues | XYRandomNumericValues\n\nconst getValueGenerator = (config: XYRangeValues) => {\n    let generator: (index: number) => string | number\n\n    if ('values' in config) {\n        generator = (index: number) => config.values[index]\n    } else {\n        generator = () => {\n            let value = config.min + Math.random() * (config.max - config.min)\n            if (config.round) {\n                value = Math.round(value)\n            }\n\n            return value\n        }\n    }\n\n    return generator\n}\n\nexport const generateXYSeries = ({\n    serieIds,\n    x,\n    y,\n}: {\n    serieIds: string[]\n    x: XYRangeValues\n    y: XYRangeValues\n}) => {\n    const xLength = 'length' in x ? x.length : x.values.length\n\n    const getX = getValueGenerator(x)\n    const getY = getValueGenerator(y)\n\n    return serieIds.map(serieId => {\n        return {\n            id: serieId,\n            data: Array.from({ length: xLength }).map((_, index) => {\n                return {\n                    x: getX(index),\n                    y: getY(index),\n                }\n            }),\n        }\n    })\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { timeDays } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport * as color from './color'\nimport * as sets from './sets'\n\nexport { sets }\nexport const randColor = color.randColor\n\nexport const generateProgrammingLanguageStats = (shouldShuffle = true, limit = -1) => {\n    let langs = sets.programmingLanguages\n    if (shouldShuffle) {\n        langs = shuffle(langs)\n    }\n    if (limit < 1) {\n        limit = 1 + Math.round(Math.random() * (sets.programmingLanguages.length - 1))\n    }\n\n    return langs.slice(0, limit).map(language => ({\n        label: language,\n        value: Math.round(Math.random() * 600),\n        color: randColor(),\n    }))\n}\n\nexport const uniqRand = <T>(generator: (...args: unknown[]) => T) => {\n    const used: T[] = []\n\n    return (...args: unknown[]) => {\n        let value\n        do {\n            value = generator(...args)\n        } while (used.includes(value))\n\n        used.push(value)\n\n        return value\n    }\n}\n\nexport const randCountryCode = () => shuffle(sets.countryCodes)[0]\n\ntype DrinkDatum = {\n    id: string\n    color: string\n    data: Array<{\n        color: string\n        x: string\n        y: number\n    }>\n}\n\nexport const generateDrinkStats = (xSize = 16) => {\n    const rand = () => random(0, 60)\n    const types = ['whisky', 'rhum', 'gin', 'vodka', 'cognac']\n    const country = uniqRand(randCountryCode)\n\n    const data: DrinkDatum[] = types.map(id => ({\n        id,\n        color: randColor(),\n        data: [],\n    }))\n\n    range(xSize).forEach(() => {\n        const x = country()\n        types.forEach(id => {\n            data.find(d => d.id === id)?.data.push({\n                color: randColor(),\n                x,\n                y: rand(),\n            })\n        })\n    })\n\n    return data\n}\n\nexport const generateSerie = (xSize = 20) => {\n    const max = 100 + Math.random() * (Math.random() * 600)\n\n    return range(xSize).map(() => Math.round(Math.random() * max))\n}\n\nexport const generateSeries = (ids: string[], xKeys: string[]) =>\n    ids.map(id => ({\n        id,\n        color: randColor(),\n        data: xKeys.map(x => ({ x, y: Math.round(Math.random() * 300) })),\n    }))\n\nexport const generateStackData = (size = 3) => {\n    const length = 16\n    return range(size).map(() => generateSerie(length).map((v, i) => ({ x: i, y: v })))\n}\n\nexport const generateCountriesPopulation = (size: number) => {\n    const countryCode = uniqRand(randCountryCode)\n\n    return range(size).map(() => ({\n        country: countryCode(),\n        population: 200 + Math.round(Math.random() * Math.random() * 1000000),\n    }))\n}\n\nexport const generateOrderedDayCounts = (from: Date, to: Date) => {\n    const days = timeDays(from, to)\n    const dayFormat = timeFormat('%Y-%m-%d')\n\n    return days.map(day => {\n        return {\n            value: Math.round(Math.random() * 400),\n            day: dayFormat(day),\n        }\n    })\n}\n\nexport const generateDayCounts = (from: Date, to: Date, maxSize = 0.9) => {\n    const days = generateOrderedDayCounts(from, to)\n\n    const size =\n        Math.round(days.length * (maxSize * 0.4)) +\n        Math.round(Math.random() * (days.length * (maxSize * 0.6)))\n\n    return shuffle(days).slice(0, size)\n}\n\nexport const generateCountriesData = (\n    keys: string[],\n    { size = 12, min = 0, max = 200, withColors = true } = {}\n) =>\n    sets.countryCodes.slice(0, size).map(country => {\n        const d: Record<string, unknown> = {\n            country,\n        }\n        keys.forEach(key => {\n            d[key] = random(min, max)\n            if (withColors === true) {\n                d[`${key}Color`] = randColor()\n            }\n        })\n\n        return d\n    })\n\nconst libTreeItems = [\n    [\n        'viz',\n        [\n            ['stack', [['cchart'], ['xAxis'], ['yAxis'], ['layers']]],\n            [\n                'ppie',\n                [\n                    ['chart', [['pie', [['outline'], ['slices'], ['bbox']]], ['donut'], ['gauge']]],\n                    ['legends'],\n                ],\n            ],\n        ],\n    ],\n    ['colors', [['rgb'], ['hsl']]],\n    [\n        'utils',\n        [['randomize'], ['resetClock'], ['noop'], ['tick'], ['forceGC'], ['stackTrace'], ['dbg']],\n    ],\n    ['generators', [['address'], ['city'], ['animal'], ['movie'], ['user']]],\n    [\n        'set',\n        [\n            ['clone'],\n            ['intersect'],\n            ['merge'],\n            ['reverse'],\n            ['toArray'],\n            ['toObject'],\n            ['fromCSV'],\n            ['slice'],\n            ['append'],\n            ['prepend'],\n            ['shuffle'],\n            ['pick'],\n            ['plouc'],\n        ],\n    ],\n    [\n        'text',\n        [\n            ['trim'],\n            ['slugify'],\n            ['snakeCase'],\n            ['camelCase'],\n            ['repeat'],\n            ['padLeft'],\n            ['padRight'],\n            ['sanitize'],\n            ['ploucify'],\n        ],\n    ],\n    [\n        'misc',\n        [\n            ['greetings', [['hey'], ['HOWDY'], ['aloha'], ['AHOY']]],\n            ['other'],\n            [\n                'path',\n                [\n                    ['pathA'],\n                    ['pathB', [['pathB1'], ['pathB2'], ['pathB3'], ['pathB4']]],\n                    [\n                        'pathC',\n                        [\n                            ['pathC1'],\n                            ['pathC2'],\n                            ['pathC3'],\n                            ['pathC4'],\n                            ['pathC5'],\n                            ['pathC6'],\n                            ['pathC7'],\n                            ['pathC8'],\n                            ['pathC9'],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n]\n\ninterface LibTreeDatum {\n    name: string\n    loc?: number\n    color: string\n    children?: LibTreeDatum[]\n}\n\nexport const generateLibTree = (\n    name = 'nivo',\n    limit?: number | null,\n    children = libTreeItems\n): LibTreeDatum => {\n    limit = limit || children.length\n    if (limit > children.length) {\n        limit = children.length\n    }\n\n    const tree: LibTreeDatum = {\n        name,\n        color: randColor(),\n    }\n    if (children?.length > 0) {\n        tree.children = range(limit).map((_, i) => {\n            const leaf = children[i]\n\n            // full path `${name}.${leaf[0]}`\n            return generateLibTree(leaf[0] as string, null, (leaf[1] ?? []) as any)\n        })\n    } else {\n        tree.loc = Math.round(Math.random() * 200000)\n    }\n\n    return tree\n}\n\nconst wines = ['chardonay', 'carmenere', 'syrah']\nconst wineTastes = ['fruity', 'bitter', 'heavy', 'strong', 'sunny']\n\nexport const generateWinesTastes = ({ randMin = 20, randMax = 120 } = {}) => {\n    const data = wineTastes.map(taste => {\n        const d: Record<string, unknown> = { taste }\n        wines.forEach(wine => {\n            d[wine] = random(randMin, randMax)\n        })\n\n        return d\n    })\n\n    return { data, keys: wines }\n}\n\nexport * from './bullet'\nexport * from './chord'\nexport * from './network'\nexport * from './parallelCoordinates'\nexport * from './sankey'\nexport * from './swarmplot'\nexport * from './xySeries'\n","import { defaultProps } from '@nivo/bullet'\nimport { themeProperty, motionProperties, groupProperties } from '../../../lib/componentProperties'\nimport { chartDimensions } from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg']\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        flavors: ['svg'],\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                id:        {string|number}\n                title?:    {ReactNode}\n                subtitle?: {ReactNode}\n                data: Array<{\n                    ranges:   number[]\n                    measures: number[]\n                    markers?: number[]\n                }>\n            }>\n            \\`\\`\\`\n\n            If \\`title\\` is \\`undefined\\`, \\`id\\` will be used for\n            \\`title\\`.\n        `,\n        type: 'object[]',\n        required: true,\n    },\n    {\n        key: 'minValue',\n        help: 'Minimum value.',\n        flavors: ['svg'],\n        description: `\n            Minimum value, if 'auto',\n            will use min value from\n            the provided data.\n        `,\n        required: false,\n        defaultValue: defaultProps.minValue,\n        type: `number | 'auto'`,\n        group: 'Base',\n        control: {\n            type: 'switchableRange',\n            disabledValue: 'auto',\n            defaultValue: 0,\n            min: 0,\n            max: 10,\n        },\n    },\n    {\n        key: 'maxValue',\n        help: 'Maximum value.',\n        flavors: ['svg'],\n        description: `\n            Maximum value, if 'auto',\n            will use max value from\n            the provided data.\n        `,\n        required: false,\n        defaultValue: defaultProps.maxValue,\n        type: `number | 'auto'`,\n        group: 'Base',\n        control: {\n            type: 'switchableRange',\n            disabledValue: 'auto',\n            defaultValue: 100,\n            min: 50,\n            max: 100,\n        },\n    },\n    ...chartDimensions(allFlavors),\n    {\n        key: 'layout',\n        group: 'Base',\n        help: `How to display items.`,\n        flavors: ['svg'],\n        type: 'string',\n        required: false,\n        defaultValue: defaultProps.layout,\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'horizontal', value: 'horizontal' },\n                { label: 'vertical', value: 'vertical' },\n            ],\n        },\n    },\n    {\n        key: 'reverse',\n        group: 'Base',\n        help: 'Reverse chart.',\n        description: `\n            Reverse chart, starts on top instead of bottom\n            for vertical layout and right instead of left\n            for horizontal one.\n        `,\n        flavors: ['svg'],\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.reverse,\n        control: { type: 'switch' },\n    },\n    {\n        key: 'spacing',\n        help: 'define spacing between items.',\n        type: 'number',\n        flavors: ['svg'],\n        required: false,\n        defaultValue: defaultProps.spacing,\n        group: 'Base',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 100,\n        },\n    },\n    {\n        key: 'measureSize',\n        help: 'define size of measure related to item size, expressed as a ratio.',\n        type: 'number',\n        required: false,\n        flavors: ['svg'],\n        defaultValue: defaultProps.measureSize,\n        group: 'Base',\n        control: {\n            type: 'range',\n            min: 0,\n            max: 1,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'markerSize',\n        help: 'define size of markers related to item size, expressed as a ratio.',\n        type: 'number',\n        required: false,\n        flavors: ['svg'],\n        defaultValue: defaultProps.markerSize,\n        group: 'Base',\n        control: {\n            type: 'range',\n            min: 0,\n            max: 2,\n            step: 0.05,\n        },\n    },\n    themeProperty(['svg']),\n    {\n        key: 'rangeBorderColor',\n        flavors: ['svg'],\n        group: 'Style',\n        help: 'Method to compute range border color.',\n        description: `\n            how to compute range border color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.rangeBorderColor,\n        control: { type: 'inheritedColor' },\n    },\n    {\n        key: 'rangeBorderWidth',\n        flavors: ['svg'],\n        group: 'Style',\n        help: 'Width of range border.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.rangeBorderWidth,\n        control: { type: 'lineWidth' },\n    },\n    {\n        key: 'rangeComponent',\n        flavors: ['svg'],\n        group: 'Style',\n        help: 'Custom component for ranges.',\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'rangeColors',\n        help: 'Ranges colors',\n        description: `\n            Defines colors for ranges,\n            you can either use categorical colors:\n            \\`greens\\` or sequential form: \\`seq:green\\`.\n        `,\n        type: 'string | Function | string[]',\n        flavors: ['svg'],\n        required: false,\n        defaultValue: defaultProps.rangeColors,\n        group: 'Style',\n        control: {\n            type: 'bullet_colors',\n        },\n    },\n    {\n        key: 'measureBorderColor',\n        flavors: ['svg'],\n        group: 'Style',\n        help: 'Method to compute measure border color.',\n        description: `\n            how to compute measure border color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.measureBorderColor,\n        control: { type: 'inheritedColor' },\n    },\n    {\n        key: 'measureBorderWidth',\n        flavors: ['svg'],\n        group: 'Style',\n        help: 'Width of measure border.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.measureBorderWidth,\n        control: { type: 'lineWidth' },\n    },\n    {\n        key: 'measureComponent',\n        flavors: ['svg'],\n        group: 'Style',\n        help: 'Custom component for measures.',\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'measureColors',\n        help: 'Measures colors.',\n        description: `\n            Defines colors for measures,\n            you can either use categorical colors:\n            \\`greens\\` or sequential form: \\`seq:green\\`.\n        `,\n        type: 'string | Function | string[]',\n        required: false,\n        flavors: ['svg'],\n        defaultValue: defaultProps.measureColors,\n        group: 'Style',\n        control: {\n            type: 'bullet_colors',\n        },\n    },\n    {\n        key: 'markerComponent',\n        flavors: ['svg'],\n        group: 'Style',\n        help: 'Custom component for markers.',\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'markerColors',\n        flavors: ['svg'],\n        help: 'Markers colors.',\n        description: `\n            Defines colors for markers,\n            you can either use categorical colors:\n            \\`greens\\` or sequential form: \\`seq:green\\`.\n        `,\n        type: 'string | Function| string[]',\n        required: false,\n        defaultValue: defaultProps.markerColors,\n        group: 'Style',\n        control: {\n            type: 'bullet_colors',\n        },\n    },\n    {\n        key: 'axisPosition',\n        help: `Where to put axis.`,\n        type: 'string',\n        required: false,\n        defaultValue: defaultProps.axisPosition,\n        flavors: ['svg'],\n        group: 'Axes',\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'before', value: 'before' },\n                { label: 'after', value: 'after' },\n            ],\n        },\n    },\n    {\n        key: 'titlePosition',\n        help: `Where to put title.`,\n        type: 'string',\n        required: false,\n        defaultValue: defaultProps.titlePosition,\n        flavors: ['svg'],\n        group: 'Title',\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'before', value: 'before' },\n                { label: 'after', value: 'after' },\n            ],\n        },\n    },\n    {\n        key: 'titleAlign',\n        help: `title alignment.`,\n        type: 'string',\n        required: false,\n        defaultValue: defaultProps.titleAlign,\n        flavors: ['svg'],\n        group: 'Title',\n        control: {\n            type: 'choices',\n            choices: [\n                { label: 'start', value: 'start' },\n                { label: 'middle', value: 'middle' },\n                { label: 'end', value: 'end' },\n            ],\n        },\n    },\n    {\n        key: 'titleOffsetX',\n        help: 'title x offset from bullet edge.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.titleOffsetX,\n        flavors: ['svg'],\n        group: 'Title',\n        control: {\n            type: 'range',\n            min: -100,\n            max: 100,\n            unit: 'px',\n        },\n    },\n    {\n        key: 'titleOffsetY',\n        help: 'title y offset from bullet edge.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.titleOffsetY,\n        flavors: ['svg'],\n        group: 'Title',\n        control: {\n            type: 'range',\n            min: -100,\n            max: 100,\n            unit: 'px',\n        },\n    },\n    {\n        key: 'titleRotation',\n        help: 'title rotation.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.titleRotation,\n        flavors: ['svg'],\n        group: 'Title',\n        control: {\n            type: 'angle',\n            start: 90,\n            min: -360,\n            max: 360,\n            step: 5,\n        },\n    },\n    {\n        key: 'onRangeClick',\n        flavors: ['svg'],\n        type: '(range, event) => void',\n        group: 'Interactivity',\n        required: false,\n        help: 'onClick handler for ranges.',\n        description: `\n            onClick handler for ranges, will receive range\n            data as first argument & event as second one.\n\n            The data has the following shape:\n            \\`\\`\\`\n            {\n                id:    string,\n                v0:    number,\n                v1:    number,\n                index: number,\n                color: string,\n            }\n            \\`\\`\\`\n\n            \\`v1\\` is the value of the range while\n            \\`v0\\` is the value of previous range.\n        `,\n    },\n    {\n        key: 'onMeasureClick',\n        flavors: ['svg'],\n        type: '(measure, event) => void',\n        group: 'Interactivity',\n        required: false,\n        help: 'onClick handler for measures.',\n        description: `\n            onClick handler for measures, will receive measure\n            data as first argument & event as second one.\n\n            The data has the following shape:\n            \\`\\`\\`\n            {\n                id:    string,\n                v0:    number,\n                v1:    number,\n                index: number,\n                color: string,\n            }\n            \\`\\`\\`\n\n            \\`v1\\` is the value of the measure while\n            \\`v0\\` is the value of previous measure.\n        `,\n    },\n    {\n        key: 'onMarkerClick',\n        flavors: ['svg'],\n        type: '(marker, event) => void',\n        group: 'Interactivity',\n        required: false,\n        help: 'onClick handler for markers.',\n        description: `\n            onClick handler for markers, will receive marker\n            data as first argument & event as second one.\n\n            The data has the following shape:\n            \\`\\`\\`\n            {\n                id:    string,\n                value: number,\n                index: number,\n                color: string,\n            }\n            \\`\\`\\`\n        `,\n    },\n    ...motionProperties(['svg'], defaultProps, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","import React from 'react'\nimport shuffle from 'lodash/shuffle'\nimport { ResponsiveBullet, defaultProps } from '@nivo/bullet'\nimport { generateBulletData } from '@nivo/generators'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/bullet/meta.yml'\nimport { groups } from '../../data/components/bullet/props'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst generateData = () => [\n    generateBulletData('temp.', shuffle([100, 120, 140])[0]),\n    generateBulletData('power', 2, { float: true, measureCount: 2 }),\n    generateBulletData('volume', shuffle([40, 60, 80])[0], { rangeCount: 8 }),\n    generateBulletData('cost', 500000, { measureCount: 2 }),\n    generateBulletData('revenue', shuffle([9, 11, 13])[0], { markerCount: 2 }),\n]\n\nconst initialProperties = {\n    minValue: defaultProps.minValue,\n    maxValue: defaultProps.maxValue,\n    margin: {\n        top: 50,\n        right: 90,\n        bottom: 50,\n        left: 90,\n    },\n    layout: defaultProps.layout,\n    reverse: defaultProps.reverse,\n    spacing: 46,\n    titlePosition: defaultProps.titlePosition,\n    titleAlign: 'start',\n    titleOffsetX: -70,\n    titleOffsetY: defaultProps.titleOffsetY,\n    titleRotation: defaultProps.titleRotation,\n    rangeBorderColor: defaultProps.rangeBorderColor,\n    rangeBorderWidth: defaultProps.rangeBorderWidth,\n    measureBorderColor: defaultProps.measureBorderColor,\n    measureBorderWidth: defaultProps.measureBorderWidth,\n    measureSize: 0.2,\n    markerSize: 0.6,\n    axisPosition: defaultProps.axisPosition,\n    rangeColors: defaultProps.rangeColors,\n    measureColors: defaultProps.measureColors,\n    markerColors: defaultProps.markerColors,\n    animate: defaultProps.animate,\n    motionConfig: defaultProps.motionConfig,\n}\n\nconst Bullet = () => {\n    const {\n        image: {\n            childImageSharp: { gatsbyImageData: image },\n        },\n    } = useStaticQuery(graphql`\n        query {\n            image: file(absolutePath: { glob: \"**/src/assets/captures/bullet.png\" }) {\n                childImageSharp {\n                    gatsbyImageData(layout: FIXED, width: 700, quality: 100)\n                }\n            }\n        }\n    `)\n\n    return (\n        <ComponentTemplate\n            name=\"Bullet\"\n            meta={meta.Bullet}\n            icon=\"bullet\"\n            flavors={meta.flavors}\n            currentFlavor=\"svg\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={defaultProps}\n            generateData={generateData}\n            image={image}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveBullet\n                        data={data}\n                        {...properties}\n                        theme={theme}\n                        onRangeClick={range => {\n                            logAction({\n                                type: 'click',\n                                label: `[range] ${range.id}: [${range.v0}, ${range.v1}]`,\n                                color: range.color,\n                                data: range,\n                            })\n                        }}\n                        onMeasureClick={measure => {\n                            logAction({\n                                type: 'click',\n                                label: `[measure] ${measure.id}: [${measure.v0}, ${measure.v1}]`,\n                                color: measure.color,\n                                data: measure,\n                            })\n                        }}\n                        onMarkerClick={marker => {\n                            logAction({\n                                type: 'click',\n                                label: `[marker] ${marker.id}: ${marker.value}`,\n                                color: marker.color,\n                                data: marker,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default Bullet\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n"],"names":["day","date","setHours","step","setDate","getDate","start","end","getTimezoneOffset","days","range","computeCartesianTicks","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","position","centerScale","line","lineX","lineY","text","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","x","d","y","top","bottom","left","right","ticks","map","value","key","Date","valueOf","getFormatter","format","type","formatter","timeFormat","d3Format","computeGridLines","width","height","_values","Array","isArray","lines","x1","x2","y1","y2","memoizedAxisTick","memo","_value","onClick","textAnchor","animatedProps","theme","useTheme","props","useMemo","style","opacity","cursor","event","_jsxs","animated","g","transform","_jsx","dominantBaseline","textTransform","memoizedAxis","length","renderTick","AxisTick","legend","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","config","useSpring","lineX2","lineY2","immediate","transition","useTransition","keys","t","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","rotate","domain","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","axes","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","_format","save","font","fontWeight","fontSize","fontFamily","strokeWidth","lineWidth","Number","lineCap","stroke","strokeStyle","beginPath","moveTo","lineTo","forEach","degreesToRadians","fill","fillStyle","fillText","String","restore","renderAxesToCanvas","renderGridLinesToCanvas","BulletRectsItem","color","borderColor","borderWidth","data","onMouseEnter","onMouseMove","onMouseLeave","rect","to","Math","max","e","defaultProps","layout","reverse","spacing","minValue","maxValue","axisPosition","titlePosition","titleAlign","titleRotation","titleOffsetX","titleOffsetY","rangeComponent","rangeColors","measureComponent","measureColors","markers","markerComponent","markerColors","rangeBorderWidth","rangeBorderColor","measureSize","measureBorderWidth","measureBorderColor","markerSize","isInteractive","tooltip","v0","v1","BasicTooltip","id","enableChip","motionDefaultProps","motionConfig","margin","defaultMargin","role","stackValues","colorScale","useAverage","min","includes","filter","v","sort","a","b","reduce","acc","index","last","slice","sequentialValue","BulletMarkers","component","getPosition","marker","size","rotation","BulletRects","rects","computeRect","h","getBorderColor","useInheritedColor","getTransform","measuresY","createElement","get","BulletItem","title","ranges","measureHeight","measures","markerHeight","onRangeClick","onMeasureClick","onMarkerClick","useTooltip","showTooltipFromEvent","hideTooltip","computedRanges","rangeColorScale","getColorScale","computedMeasures","measureColorScale","computedMarkers","markerColorScale","TooltipComponent","rangeNodes","markerNodes","titleNode","labels","measure","Bullet","partialMargin","useDimensions","innerWidth","innerHeight","itemHeight","enhancedData","all","createLinearScale","clamp","Container","SvgWrapper","i","ResponsiveBullet","ResponsiveWrapper","randColor","round","random","countryCodes","names","programmingLanguages","generateBulletData","subtitle","rangeCount","measureCount","markerCount","float","remaining","generateChordData","maxSize","selectedKeys","matrix","generateNetworkData","rootSize","midSize","leafSize","minMidNodes","maxMidNodes","minLeaves","maxLeaves","rootNode","nodes","_","k","links","extraNodes","push","source","target","distance","concat","generateParallelCoordinatesData","shuffle","availableNodes","n","name","getNodeTargets","currentPath","targets","Error","join","targetId","getNodesTargets","targetsById","link","generateSankeyData","nodeCount","maxIterations","Object","assign","node","nodeColor","randId","randomPrice","randomVolume","randomCategory","generateSwarmPlotData","groups","categoryCount","group","groupIndex","price","datum","volume","categories","randomizeSwarmPlotData","previousData","getValueGenerator","generator","generateXYSeries","serieIds","xLength","getX","getY","serieId","generateProgrammingLanguageStats","shouldShuffle","limit","langs","sets","label","language","uniqRand","used","randCountryCode","generateDrinkStats","xSize","types","country","find","generateSeries","ids","xKeys","generateDayCounts","timeDays","dayFormat","generateOrderedDayCounts","generateCountriesData","withColors","libTreeItems","generateLibTree","children","tree","leaf","loc","wines","wineTastes","generateWinesTastes","randMin","randMax","taste","wine","help","flavors","description","required","defaultValue","control","disabledValue","chartDimensions","choices","unit","themeProperty","motionProperties","groupProperties","generateData","initialProperties","image","useStaticQuery","childImageSharp","gatsbyImageData","ComponentTemplate","meta","icon","currentFlavor","properties","defaultProperties","logAction","copyArray","shuffleSelf","module","exports","array","nativeFloor","floor","nativeRandom","lower","upper","collection","arrayMap","object","baseRandom","lastIndex","undefined","rand","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","temp","arrayShuffle","baseShuffle","baseValues"],"sourceRoot":""}