{"version":3,"sources":["webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///../src/compute.ts","webpack:///../src/svg/LegendSvgItem.tsx","webpack:///../src/svg/symbols/SymbolCircle.tsx","webpack:///../src/svg/symbols/SymbolDiamond.tsx","webpack:///../src/svg/symbols/SymbolSquare.tsx","webpack:///../src/svg/symbols/SymbolTriangle.tsx","webpack:///../src/svg/LegendSvg.tsx","webpack:///../src/svg/BoxLegendSvg.tsx","webpack:///../src/canvas.ts","webpack:///../src/hooks.ts","webpack:///../src/props.ts"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_arrayLikeToArray","arr","len","arr2","Array","_slicedToArray","isArray","arrayWithHoles","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","iterableToArrayLimit","o","minLen","arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","from","test","unsupportedIterableToArray","TypeError","nonIterableRest","zeroPadding","top","right","bottom","left","computeDimensions","direction","itemsSpacing","_padding","padding","itemCount","itemWidth","itemHeight","item","horizontalPadding","verticalPadding","width","height","spacing","computePositionFromAnchor","anchor","translateX","translateY","containerWidth","containerHeight","x","y","computeItemLayout","justify","symbolSize","symbolSpacing","symbolX","symbolY","labelY","labelAlignment","labelX","labelAnchor","symbolByShape","circle","size","fill","opacity","borderWidth","borderColor","r","cx","cy","strokeWidth","stroke","style","pointerEvents","diamond","transform","d","square","triangle","LegendSvgItem","data","textColor","background","symbolShape","symbolBorderWidth","symbolBorderColor","onClick","onMouseEnter","onMouseLeave","toggleSerie","effects","useState","setStyle","theme","useTheme","handleMouseEnter","useCallback","effect","handleMouseLeave","isInteractive","handler","SymbolShape","cursor","event","id","textAnchor","dominantBaseline","userSelect","label","LegendSvg","itemDirection","itemTextColor","itemBackground","itemOpacity","xStep","yStep","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","ctx","itemX","itemY","String","useQuantizeColorScaleLegendData","scale","overriddenDomain","domain","reverse","valueFormat","v","separator","useMemo","items","index","extent","color","domainValue","LegendPropShape","PropTypes","on","string","isRequired"],"mappings":"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","file":"4fee916a2d36f7063f66f40a7a99a8be7ea672bc-e5944d721d4f24ae71b1.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { BoxLegendSvgProps, LegendAnchor, LegendItemDirection } from './types'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { computeDimensions, computePositionFromAnchor, computeItemLayout } from './compute'\nimport { LegendCanvasProps } from './types'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n        if (reverse === true) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n"],"sourceRoot":""}