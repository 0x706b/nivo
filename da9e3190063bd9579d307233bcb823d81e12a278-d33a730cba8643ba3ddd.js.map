{"version":3,"sources":["webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///../src/PointTooltip.js","webpack:///../src/SliceTooltip.js","webpack:///../src/props.js","webpack:///../src/hooks.js","webpack:///../src/Areas.js","webpack:///../src/LinesItem.js","webpack:///../src/Lines.js","webpack:///../src/SlicesItem.js","webpack:///../src/Slices.js","webpack:///../src/Points.js","webpack:///../src/Mesh.js","webpack:///../src/Line.js","webpack:///../src/ResponsiveLine.js","webpack:///../src/LineCanvas.js","webpack:///../src/ResponsiveLineCanvas.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_arrayLikeToArray","arr","len","arr2","Array","_unsupportedIterableToArray","o","minLen","arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","from","test","_slicedToArray","isArray","arrayWithHoles","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","iterableToArrayLimit","unsupportedIterableToArray","TypeError","nonIterableRest","_toConsumableArray","arrayWithoutHoles","iter","iterableToArray","nonIterableSpread","LinePointTooltip","point","id","enableChip","color","serieColor","memo","Chip","style","display","width","height","background","SliceTooltip","otherAxis","axis","rows","commonPropTypes","data","PropTypes","x","y","isRequired","xScale","scalePropType","xFormat","yScale","yFormat","layers","curve","lineCurvePropType","axisTop","axisRight","axisBottom","axisLeft","enableGridX","enableGridY","gridXValues","gridYValues","enablePoints","pointSymbol","pointSize","pointColor","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","markers","colors","ordinalColorsPropType","enableArea","areaOpacity","areaBlendMode","blendModePropType","areaBaselineValue","lineWidth","legends","isInteractive","debugMesh","tooltip","enableSlices","debugSlices","sliceTooltip","enableCrosshair","crosshairType","crosshairPropTypes","commonDefaultProps","role","useMesh","pixelRatio","type","min","max","theme","scheme","LineDefaultProps","animate","motionConfig","defs","fill","LineCanvasDefaultProps","global","useLine","xScaleSpec","yScaleSpec","enableSlicesTooltip","formatX","useValueFormatter","formatY","getColor","useOrdinalColorScale","useTheme","getPointColor","useInheritedColor","getPointBorderColor","useMemo","computeXYScalesForSeries","rawSeries","series","serie","points","datum","index","acc","serieId","xFormatted","yFormatted","usePoints","slices","map","a","b","slicePoints","prevSlice","nextSlice","x0","y0","sliceWidth","sliceHeight","useSlices","lineGenerator","d","curveFromProp","useLineGenerator","areaGenerator","useAreaGenerator","AreaPath","path","useMotionConfig","springConfig","animatedPath","useAnimatedPath","animatedProps","useSpring","config","immediate","fillOpacity","strokeWidth","mixBlendMode","Areas","computedLines","lines","line","LinesItem","thickness","stroke","Lines","SlicesItem","debug","isCurrent","setCurrent","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","useCallback","event","handleMouseMove","handleMouseLeave","strokeOpacity","onMouseEnter","onMouseMove","onMouseLeave","Slices","current","Points","symbol","size","borderWidth","enableLabel","label","labelYOffset","getLabel","getLabelGenerator","mappedPoints","borderColor","Mesh","margin","onClick","showTooltipAt","handleClick","nodes","Line","props","partialMargin","pointLabelYOffset","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","useState","currentPoint","setCurrentPoint","currentSlice","setCurrentSlice","legendData","layerById","grid","xValues","yValues","axes","top","right","bottom","left","areas","crosshair","mesh","containerWidth","containerHeight","legend","boundDefs","bindDefs","layer","withContainer","ResponsiveLine","LineCanvas","canvasEl","useRef","useVoronoiMesh","delaunay","voronoi","useEffect","ctx","renderGridLinesToCanvas","scale","values","renderAxesToCanvas","Math","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","getPointFromMouseEvent","getRelativeCursor","isCursorInRect","pointIndex","handleMouseHover","ref","cursor","ResponsiveLineCanvas"],"mappings":"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","file":"da9e3190063bd9579d307233bcb823d81e12a278-d33a730cba8643ba3ddd.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst LinePointTooltip = ({ point }) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.xFormatted}</strong>, y:{' '}\n                    <strong>{point.data.yFormatted}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serieColor}\n        />\n    )\n}\n\nLinePointTooltip.propTypes = {\n    point: PropTypes.object.isRequired,\n}\n\nexport default memo(LinePointTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { TableTooltip } from '@nivo/tooltip'\n\nconst Chip = ({ color }) => (\n    <span style={{ display: 'block', width: '12px', height: '12px', background: color }} />\n)\n\nChip.propTypes = {\n    color: PropTypes.string.isRequired,\n}\n\nconst SliceTooltip = ({ slice, axis }) => {\n    const otherAxis = axis === 'x' ? 'y' : 'x'\n\n    return (\n        <TableTooltip\n            rows={slice.points.map(point => [\n                <Chip key=\"chip\" color={point.serieColor} />,\n                point.serieId,\n                <strong key=\"value\">{point.data[`${otherAxis}Formatted`]}</strong>,\n            ])}\n        />\n    )\n}\n\nSliceTooltip.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n}\n\nexport default memo(SliceTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { lineCurvePropType, blendModePropType, motionPropTypes, defsPropTypes } from '@nivo/core'\nimport { ordinalColorsPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\nimport { scalePropType } from '@nivo/scales'\nimport { LegendPropShape } from '@nivo/legends'\nimport { crosshairPropTypes } from '@nivo/tooltip'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst commonPropTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                    y: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n\n    xScale: scalePropType.isRequired,\n    xFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    yScale: scalePropType.isRequired,\n    yFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf([\n                'grid',\n                'markers',\n                'axes',\n                'areas',\n                'crosshair',\n                'lines',\n                'slices',\n                'points',\n                'mesh',\n                'legends',\n            ]),\n            PropTypes.func,\n        ])\n    ).isRequired,\n\n    curve: lineCurvePropType.isRequired,\n\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n    gridXValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n    gridYValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n\n    enablePoints: PropTypes.bool.isRequired,\n    pointSymbol: PropTypes.func,\n    pointSize: PropTypes.number.isRequired,\n    pointColor: PropTypes.any.isRequired,\n    pointBorderWidth: PropTypes.number.isRequired,\n    pointBorderColor: PropTypes.any.isRequired,\n    enablePointLabel: PropTypes.bool.isRequired,\n    pointLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n\n    markers: PropTypes.arrayOf(\n        PropTypes.shape({\n            axis: PropTypes.oneOf(['x', 'y']).isRequired,\n            value: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            style: PropTypes.object,\n        })\n    ),\n\n    colors: ordinalColorsPropType.isRequired,\n\n    enableArea: PropTypes.bool.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    areaBaselineValue: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n        PropTypes.instanceOf(Date),\n    ]).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    debugMesh: PropTypes.bool.isRequired,\n\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableSlices: PropTypes.oneOf(['x', 'y', false]).isRequired,\n    debugSlices: PropTypes.bool.isRequired,\n    sliceTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableCrosshair: PropTypes.bool.isRequired,\n    crosshairType: crosshairPropTypes.type.isRequired,\n}\n\nexport const LinePropTypes = {\n    ...commonPropTypes,\n    enablePointLabel: PropTypes.bool.isRequired,\n    role: PropTypes.string.isRequired,\n    useMesh: PropTypes.bool.isRequired,\n    ...motionPropTypes,\n    ...defsPropTypes,\n}\n\nexport const LineCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    curve: 'linear',\n\n    xScale: {\n        type: 'point',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n\n    layers: [\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n    ],\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: true,\n    enableGridY: true,\n\n    enablePoints: true,\n    pointSize: 6,\n    pointColor: { from: 'color' },\n    pointBorderWidth: 0,\n    pointBorderColor: { theme: 'background' },\n    enablePointLabel: false,\n    pointLabel: 'yFormatted',\n\n    colors: { scheme: 'nivo' },\n    enableArea: false,\n    areaBaselineValue: 0,\n    areaOpacity: 0.2,\n    areaBlendMode: 'normal',\n    lineWidth: 2,\n\n    legends: [],\n\n    isInteractive: true,\n    tooltip: PointTooltip,\n    enableSlices: false,\n    debugSlices: false,\n    sliceTooltip: SliceTooltip,\n    debugMesh: false,\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n\nexport const LineDefaultProps = {\n    ...commonDefaultProps,\n    enablePointLabel: false,\n    useMesh: false,\n    animate: true,\n    motionConfig: 'gentle',\n    defs: [],\n    fill: [],\n    role: 'img',\n}\n\nexport const LineCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio:\n        global.window && global.window.devicePixelRatio ? global.window.devicePixelRatio : 1,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useMemo } from 'react'\nimport { area, line } from 'd3-shape'\nimport { curveFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { LineDefaultProps } from './props'\n\nexport const useLineGenerator = ({ curve }) => {\n    return useMemo(\n        () =>\n            line()\n                .defined(d => d.x !== null && d.y !== null)\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n}\n\nexport const useAreaGenerator = ({ curve, yScale, areaBaselineValue }) => {\n    return useMemo(() => {\n        return area()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y1(d => d.y)\n            .curve(curveFromProp(curve))\n            .y0(yScale(areaBaselineValue))\n    }, [curve, yScale, areaBaselineValue])\n}\n\nconst usePoints = ({ series, getPointColor, getPointBorderColor, formatX, formatY }) => {\n    return useMemo(() => {\n        return series.reduce((acc, serie) => {\n            return [\n                ...acc,\n                ...serie.data\n                    .filter(datum => datum.position.x !== null && datum.position.y !== null)\n                    .map((datum, i) => {\n                        const point = {\n                            id: `${serie.id}.${i}`,\n                            index: acc.length + i,\n                            serieId: serie.id,\n                            serieColor: serie.color,\n                            x: datum.position.x,\n                            y: datum.position.y,\n                        }\n                        point.color = getPointColor(serie)\n                        point.borderColor = getPointBorderColor(point)\n                        point.data = {\n                            ...datum.data,\n                            xFormatted: formatX(datum.data.x),\n                            yFormatted: formatY(datum.data.y),\n                        }\n\n                        return point\n                    }),\n            ]\n        }, [])\n    }, [series, getPointColor, getPointBorderColor, formatX, formatY])\n}\n\nexport const useSlices = ({ enableSlices, points, width, height }) => {\n    return useMemo(() => {\n        if (enableSlices === false) return []\n\n        if (enableSlices === 'x') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.x)) map.set(point.x, [point])\n                else map.get(point.x).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([x, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let x0\n                    if (!prevSlice) x0 = x\n                    else x0 = x - (x - prevSlice[0]) / 2\n\n                    let sliceWidth\n                    if (!nextSlice) sliceWidth = width - x0\n                    else sliceWidth = x - x0 + (nextSlice[0] - x) / 2\n\n                    return {\n                        id: x,\n                        x0,\n                        x,\n                        y0: 0,\n                        y: 0,\n                        width: sliceWidth,\n                        height,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        } else if (enableSlices === 'y') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.y)) map.set(point.y, [point])\n                else map.get(point.y).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([y, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let y0\n                    if (!prevSlice) y0 = y\n                    else y0 = y - (y - prevSlice[0]) / 2\n\n                    let sliceHeight\n                    if (!nextSlice) sliceHeight = height - y0\n                    else sliceHeight = y - y0 + (nextSlice[0] - y) / 2\n\n                    return {\n                        id: y,\n                        x0: 0,\n                        x: 0,\n                        y0,\n                        y,\n                        width,\n                        height: sliceHeight,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        }\n    }, [enableSlices, points])\n}\n\nexport const useLine = ({\n    data,\n    xScale: xScaleSpec = LineDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = LineDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    colors = LineDefaultProps.colors,\n    curve = LineDefaultProps.curve,\n    areaBaselineValue = LineDefaultProps.areaBaselineValue,\n    pointColor = LineDefaultProps.pointColor,\n    pointBorderColor = LineDefaultProps.pointBorderColor,\n    enableSlices = LineDefaultProps.enableSlicesTooltip,\n}) => {\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const { xScale, yScale, series: rawSeries } = useMemo(\n        () => computeXYScalesForSeries(data, xScaleSpec, yScaleSpec, width, height),\n        [data, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const series = useMemo(\n        () =>\n            rawSeries.map(serie => ({\n                ...serie,\n                color: getColor(serie),\n            })),\n        [rawSeries, getColor]\n    )\n\n    const points = usePoints({\n        series,\n        getPointColor,\n        getPointBorderColor,\n        formatX,\n        formatY,\n    })\n\n    const slices = useSlices({\n        enableSlices,\n        points,\n        width,\n        height,\n    })\n\n    const lineGenerator = useLineGenerator({ curve })\n    const areaGenerator = useAreaGenerator({\n        curve,\n        yScale,\n        areaBaselineValue,\n    })\n\n    return {\n        lineGenerator,\n        areaGenerator,\n        getColor,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from 'react-spring'\nimport { useAnimatedPath, useMotionConfig, blendModePropType } from '@nivo/core'\n\nconst AreaPath = ({ areaBlendMode, areaOpacity, color, fill, path }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={fill ? fill : animatedProps.color}\n            fillOpacity={areaOpacity}\n            strokeWidth={0}\n            style={{\n                mixBlendMode: areaBlendMode,\n            }}\n        />\n    )\n}\n\nAreaPath.propTypes = {\n    areaBlendMode: blendModePropType.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    color: PropTypes.string,\n    fill: PropTypes.string,\n    path: PropTypes.string.isRequired,\n}\n\nconst Areas = ({ areaGenerator, areaOpacity, areaBlendMode, lines }) => {\n    const computedLines = lines.slice(0).reverse()\n\n    return (\n        <g>\n            {computedLines.map(line => (\n                <AreaPath\n                    key={line.id}\n                    path={areaGenerator(line.data.map(d => d.position))}\n                    {...{ areaOpacity, areaBlendMode, ...line }}\n                />\n            ))}\n        </g>\n    )\n}\n\nAreas.propTypes = {\n    areaGenerator: PropTypes.func.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    lines: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default memo(Areas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from 'react-spring'\nimport { useAnimatedPath } from '@nivo/core'\n\nconst LinesItem = ({ lineGenerator, points, color, thickness }) => {\n    const path = useMemo(() => lineGenerator(points), [lineGenerator, points])\n    const animatedPath = useAnimatedPath(path)\n\n    return <animated.path d={animatedPath} fill=\"none\" strokeWidth={thickness} stroke={color} />\n}\n\nLinesItem.propTypes = {\n    points: PropTypes.arrayOf(\n        PropTypes.shape({\n            x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        })\n    ),\n    lineGenerator: PropTypes.func.isRequired,\n    color: PropTypes.string.isRequired,\n    thickness: PropTypes.number.isRequired,\n}\n\nexport default memo(LinesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport LinesItem from './LinesItem'\n\nconst Lines = ({ lines, lineGenerator, lineWidth }) => {\n    return lines\n        .reverse()\n        .map(({ id, data, color }) => (\n            <LinesItem\n                key={id}\n                id={id}\n                points={data.map(d => d.position)}\n                lineGenerator={lineGenerator}\n                color={color}\n                thickness={lineWidth}\n            />\n        ))\n}\n\nLines.propTypes = {\n    lines: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            color: PropTypes.string.isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    data: PropTypes.shape({\n                        x: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                        y: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                    }).isRequired,\n                    position: PropTypes.shape({\n                        x: PropTypes.number,\n                        y: PropTypes.number,\n                    }).isRequired,\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineGenerator: PropTypes.func.isRequired,\n}\n\nexport default memo(Lines)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst SlicesItem = ({ slice, axis, debug, tooltip, isCurrent, setCurrent }) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(React.createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n        },\n        [showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(React.createElement(tooltip, { slice, axis }), event, 'right')\n        },\n        [showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setCurrent(null)\n    }, [hideTooltip])\n\n    return (\n        <rect\n            x={slice.x0}\n            y={slice.y0}\n            width={slice.width}\n            height={slice.height}\n            stroke=\"red\"\n            strokeWidth={debug ? 1 : 0}\n            strokeOpacity={0.75}\n            fill=\"red\"\n            fillOpacity={isCurrent && debug ? 0.35 : 0}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n\nSlicesItem.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    isCurrent: PropTypes.bool.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n}\n\nexport default memo(SlicesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport SlicesItem from './SlicesItem'\n\nconst Slices = ({ slices, axis, debug, height, tooltip, current, setCurrent }) => {\n    return slices.map(slice => (\n        <SlicesItem\n            key={slice.id}\n            slice={slice}\n            axis={axis}\n            debug={debug}\n            height={height}\n            tooltip={tooltip}\n            setCurrent={setCurrent}\n            isCurrent={current !== null && current.id === slice.id}\n        />\n    ))\n}\n\nSlices.propTypes = {\n    slices: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired,\n            points: PropTypes.arrayOf(PropTypes.object).isRequired,\n        })\n    ).isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    current: PropTypes.object,\n    setCurrent: PropTypes.func.isRequired,\n}\n\nexport default memo(Slices)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { getLabelGenerator, DotsItem, useTheme } from '@nivo/core'\n\nconst Points = ({ points, symbol, size, borderWidth, enableLabel, label, labelYOffset }) => {\n    const theme = useTheme()\n    const getLabel = getLabelGenerator(label)\n\n    /**\n     * We reverse the `points` array so that points from the lower lines in stacked lines\n     * graph are drawn on top. See https://github.com/plouc/nivo/issues/1051.\n     */\n    const mappedPoints = points.reverse().map(point => {\n        const mappedPoint = {\n            id: point.id,\n            x: point.x,\n            y: point.y,\n            datum: point.data,\n            fill: point.color,\n            stroke: point.borderColor,\n            label: enableLabel ? getLabel(point.data) : null,\n        }\n\n        return mappedPoint\n    })\n\n    return (\n        <g>\n            {mappedPoints.map(point => (\n                <DotsItem\n                    key={point.id}\n                    x={point.x}\n                    y={point.y}\n                    datum={point.datum}\n                    symbol={symbol}\n                    size={size}\n                    color={point.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    theme={theme}\n                />\n            ))}\n        </g>\n    )\n}\n\nPoints.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object),\n    symbol: PropTypes.func,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelYOffset: PropTypes.number,\n}\n\nexport default memo(Points)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\n\nconst Mesh = ({\n    points,\n    width,\n    height,\n    margin,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                React.createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseEnter, margin]\n    )\n\n    const handleMouseMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                React.createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseMove && onMouseMove(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point, event) => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (point, event) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n\nMesh.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object).isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    margin: PropTypes.object.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    debug: PropTypes.bool.isRequired,\n}\n\nexport default memo(Mesh)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { Fragment, useState, useMemo } from 'react'\nimport {\n    bindDefs,\n    withContainer,\n    useDimensions,\n    useTheme,\n    SvgWrapper,\n    CartesianMarkers,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Crosshair } from '@nivo/tooltip'\nimport { useLine } from './hooks'\nimport { LinePropTypes, LineDefaultProps } from './props'\nimport Areas from './Areas'\nimport Lines from './Lines'\nimport Slices from './Slices'\nimport Points from './Points'\nimport Mesh from './Mesh'\n\nconst Line = props => {\n    const {\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        layers,\n        curve,\n        areaBaselineValue,\n\n        colors,\n\n        margin: partialMargin,\n        width,\n        height,\n\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        enableGridX,\n        enableGridY,\n        gridXValues,\n        gridYValues,\n\n        lineWidth,\n        enableArea,\n        areaOpacity,\n        areaBlendMode,\n\n        enablePoints,\n        pointSymbol,\n        pointSize,\n        pointColor,\n        pointBorderWidth,\n        pointBorderColor,\n        enablePointLabel,\n        pointLabel,\n        pointLabelYOffset,\n\n        defs,\n        fill,\n\n        markers,\n\n        legends,\n\n        isInteractive,\n\n        useMesh,\n        debugMesh,\n\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n\n        tooltip,\n\n        enableSlices,\n        debugSlices,\n        sliceTooltip,\n\n        enableCrosshair,\n        crosshairType,\n\n        role,\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, slices, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n        enableSlices,\n    })\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const [currentPoint, setCurrentPoint] = useState(null)\n    const [currentSlice, setCurrentSlice] = useState(null)\n\n    const legendData = useMemo(\n        () =>\n            series\n                .map(line => ({\n                    id: line.id,\n                    label: line.id,\n                    color: line.color,\n                }))\n                .reverse(),\n        [series]\n    )\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                theme={theme}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        ),\n        markers: (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n                theme={theme}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                theme={theme}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        areas: null,\n        lines: (\n            <Lines key=\"lines\" lines={series} lineGenerator={lineGenerator} lineWidth={lineWidth} />\n        ),\n        slices: null,\n        points: null,\n        crosshair: null,\n        mesh: null,\n        legends: legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={`legend.${i}`}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legend.data || legendData}\n                theme={theme}\n            />\n        )),\n    }\n\n    const boundDefs = bindDefs(defs, series, fill)\n\n    if (enableArea) {\n        layerById.areas = (\n            <Areas\n                key=\"areas\"\n                areaGenerator={areaGenerator}\n                areaOpacity={areaOpacity}\n                areaBlendMode={areaBlendMode}\n                lines={series}\n            />\n        )\n    }\n\n    if (isInteractive && enableSlices !== false) {\n        layerById.slices = (\n            <Slices\n                key=\"slices\"\n                slices={slices}\n                axis={enableSlices}\n                debug={debugSlices}\n                height={innerHeight}\n                tooltip={sliceTooltip}\n                current={currentSlice}\n                setCurrent={setCurrentSlice}\n            />\n        )\n    }\n\n    if (enablePoints) {\n        layerById.points = (\n            <Points\n                key=\"points\"\n                points={points}\n                symbol={pointSymbol}\n                size={pointSize}\n                color={getPointColor}\n                borderWidth={pointBorderWidth}\n                borderColor={getPointBorderColor}\n                enableLabel={enablePointLabel}\n                label={pointLabel}\n                labelYOffset={pointLabelYOffset}\n            />\n        )\n    }\n\n    if (isInteractive && enableCrosshair) {\n        if (currentPoint !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentPoint.x}\n                    y={currentPoint.y}\n                    type={crosshairType}\n                />\n            )\n        }\n        if (currentSlice !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentSlice.x}\n                    y={currentSlice.y}\n                    type={enableSlices}\n                />\n            )\n        }\n    }\n\n    if (isInteractive && useMesh && enableSlices === false) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                current={currentPoint}\n                setCurrent={setCurrentPoint}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                series,\n                                slices,\n                                points,\n                                xScale,\n                                yScale,\n                                lineGenerator,\n                                areaGenerator,\n                                currentPoint,\n                                setCurrentPoint,\n                                currentSlice,\n                                setCurrentSlice,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nLine.propTypes = LinePropTypes\nLine.defaultProps = LineDefaultProps\n\nexport default withContainer(Line)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Line from './Line'\n\nconst ResponsiveLine = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Line width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveLine\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { useRef, useEffect, useState, useCallback } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    getRelativeCursor,\n    isCursorInRect,\n} from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { LineCanvasPropTypes, LineCanvasDefaultProps } from './props'\nimport { useLine } from './hooks'\n\nconst LineCanvas = ({\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio,\n\n    data,\n    xScale: xScaleSpec,\n    xFormat,\n    yScale: yScaleSpec,\n    yFormat,\n    curve,\n\n    layers,\n\n    colors,\n    lineWidth,\n\n    enableArea,\n    areaBaselineValue,\n    areaOpacity,\n\n    enablePoints,\n    pointSize,\n    pointColor,\n    pointBorderWidth,\n    pointBorderColor,\n\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n\n    legends,\n\n    isInteractive,\n    debugMesh,\n    //onMouseEnter,\n    //onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}) => {\n    const canvasEl = useRef(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const theme = useTheme()\n    const [currentPoint, setCurrentPoint] = useState(null)\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n    })\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    useEffect(() => {\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (typeof layer === 'function') {\n                layer({\n                    ctx,\n                    innerWidth,\n                    innerHeight,\n                    series,\n                    points,\n                    xScale,\n                    yScale,\n                    lineWidth,\n                    lineGenerator,\n                    areaGenerator,\n                    currentPoint,\n                    setCurrentPoint,\n                })\n            }\n\n            if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'areas' && enableArea === true) {\n                ctx.save()\n                ctx.globalAlpha = areaOpacity\n\n                areaGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.fillStyle = serie.color\n                    ctx.beginPath()\n                    areaGenerator(serie.data.map(d => d.position))\n                    ctx.fill()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'lines') {\n                lineGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.strokeStyle = serie.color\n                    ctx.lineWidth = lineWidth\n                    ctx.beginPath()\n                    lineGenerator(serie.data.map(d => d.position))\n                    ctx.stroke()\n                })\n            }\n\n            if (layer === 'points' && enablePoints === true && pointSize > 0) {\n                points.forEach(point => {\n                    ctx.fillStyle = point.color\n                    ctx.beginPath()\n                    ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (pointBorderWidth > 0) {\n                        ctx.strokeStyle = point.borderColor\n                        ctx.lineWidth = pointBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh === true) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentPoint) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index)\n                }\n            }\n\n            if (layer === 'legends') {\n                const legendData = series\n                    .map(serie => ({\n                        id: serie.id,\n                        label: serie.id,\n                        color: serie.color,\n                    }))\n                    .reverse()\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legend.data || legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        lineGenerator,\n        series,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        points,\n        enablePoints,\n        pointSize,\n        currentPoint,\n    ])\n\n    const getPointFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const pointIndex = delaunay.find(x - margin.left, y - margin.top)\n            return points[pointIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const point = getPointFromMouseEvent(event)\n            setCurrentPoint(point)\n\n            if (point) {\n                showTooltipFromEvent(React.createElement(tooltip, { point }), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentPoint(null)\n            currentPoint && onMouseLeave && onMouseLeave(currentPoint, event)\n        },\n        [hideTooltip, setCurrentPoint, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const point = getPointFromMouseEvent(event)\n                point && onClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nLineCanvas.propTypes = LineCanvasPropTypes\nLineCanvas.defaultProps = LineCanvasDefaultProps\n\nexport default withContainer(LineCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport LineCanvas from './LineCanvas'\n\nconst ResponsiveLineCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <LineCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveLineCanvas\n"],"sourceRoot":""}