{"version":3,"file":"c1e6c2eaf947f32f90ccc50962888bf8467b71dd-d7639d3185035d45205a.js","mappings":"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","sources":["webpack://nivo-website/../src/CalendarYearLegends.tsx","webpack://nivo-website/../src/CalendarMonthPath.tsx","webpack://nivo-website/../src/CalendarMonthLegends.tsx","webpack://nivo-website/../src/CalendarDay.tsx","webpack://nivo-website/../src/CalendarTooltip.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/compute/calendar.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/Calendar.tsx","webpack://nivo-website/../src/compute/timeRange.ts","webpack://nivo-website/../src/TimeRangeDay.tsx","webpack://nivo-website/../src/TimeRange.tsx","webpack://nivo-website/../src/ResponsiveTimeRange.tsx","webpack://nivo-website/../src/ResponsiveCalendar.tsx","webpack://nivo-website/../src/CalendarCanvas.tsx","webpack://nivo-website/../src/ResponsiveCalendarCanvas.tsx"],"sourcesContent":["import { CalendarYearLegendsProps } from './types'\nimport { memo } from 'react'\n\nexport const CalendarYearLegends = memo(({ years, legend, theme }: CalendarYearLegendsProps) => {\n    return (\n        <>\n            {years.map(year => {\n                return (\n                    <text\n                        key={year.year}\n                        transform={`translate(${year.x},${year.y}) rotate(${year.rotation})`}\n                        textAnchor=\"middle\"\n                        style={theme.labels.text}\n                    >\n                        {legend(year.year)}\n                    </text>\n                )\n            })}\n        </>\n    )\n})\n","import { CalendarMonthPathProps } from './types'\nimport { memo } from 'react'\n\nexport const CalendarMonthPath = memo(\n    ({ path, borderWidth, borderColor }: CalendarMonthPathProps) => {\n        return (\n            <path\n                d={path}\n                style={{\n                    fill: 'none',\n                    strokeWidth: borderWidth,\n                    stroke: borderColor,\n                    pointerEvents: 'none',\n                }}\n            />\n        )\n    }\n)\n","import { CalendarMonthLegendsProps } from './types'\nimport { memo } from 'react'\n\nexport const CalendarMonthLegends = memo(({ months, legend, theme }: CalendarMonthLegendsProps) => {\n    return (\n        <>\n            {months.map(month => {\n                return (\n                    <text\n                        key={`${month.date.toString()}.legend`}\n                        transform={`translate(${month.x},${month.y}) rotate(${month.rotation})`}\n                        textAnchor=\"middle\"\n                        style={theme.labels.text}\n                    >\n                        {legend(month.year, month.month, month.date)}\n                    </text>\n                )\n            })}\n        </>\n    )\n})\n","import { CalendarDayProps } from './types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { memo, useCallback } from 'react'\nimport * as React from 'react'\n\nexport const CalendarDay = memo(\n    ({\n        data,\n        x,\n        y,\n        size,\n        color,\n        borderWidth,\n        borderColor,\n        isInteractive,\n        tooltip,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        formatValue,\n    }: CalendarDayProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useCallback(\n            (event: React.MouseEvent<SVGRectElement>) => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                const formatedData = {\n                    ...data,\n                    value: formatValue(data.value),\n                    data: { ...data.data },\n                }\n                showTooltipFromEvent(React.createElement(tooltip, { ...formatedData }), event)\n                onMouseEnter?.(data, event)\n            },\n            [showTooltipFromEvent, tooltip, data, onMouseEnter, formatValue]\n        )\n        const handleMouseMove = useCallback(\n            (event: React.MouseEvent<SVGRectElement>) => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                const formatedData = {\n                    ...data,\n                    value: formatValue(data.value),\n                    data: { ...data.data },\n                }\n                showTooltipFromEvent(React.createElement(tooltip, { ...formatedData }), event)\n                onMouseMove && onMouseMove(data, event)\n            },\n            [showTooltipFromEvent, tooltip, data, onMouseMove, formatValue]\n        )\n        const handleMouseLeave = useCallback(\n            (event: React.MouseEvent<SVGRectElement>) => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                hideTooltip()\n                onMouseLeave?.(data, event)\n            },\n            [hideTooltip, data, onMouseLeave]\n        )\n        const handleClick = useCallback(\n            (event: React.MouseEvent<SVGRectElement>) => onClick?.(data, event),\n            [data, onClick]\n        )\n\n        return (\n            <rect\n                x={x}\n                y={y}\n                width={size}\n                height={size}\n                style={{\n                    fill: color,\n                    strokeWidth: borderWidth,\n                    stroke: borderColor,\n                }}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleMouseMove : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n            />\n        )\n    }\n)\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { CalendarTooltipProps } from './types'\nimport { memo } from 'react'\n\nexport const CalendarTooltip = memo(({ value, day, color }: CalendarTooltipProps) => {\n    if (value === undefined || isNaN(Number(value))) return null\n    return <BasicTooltip id={day} value={value} color={color} enableChip={true} />\n})\n","import { timeFormat } from 'd3-time-format'\nimport { CalendarLegendProps } from './types'\nimport { CalendarTooltip } from './CalendarTooltip'\n\nconst monthLabelFormat = timeFormat('%b')\n\nconst commonDefaultProps = {\n    colors: ['#61cdbb', '#97e3d5', '#e8c1a0', '#f47560'] as string[],\n\n    align: 'center',\n    direction: 'horizontal',\n    emptyColor: '#fff',\n\n    minValue: 0,\n    maxValue: 'auto',\n\n    yearSpacing: 30,\n    yearLegend: (year: number) => year,\n    yearLegendPosition: 'before',\n    yearLegendOffset: 10,\n\n    monthBorderWidth: 2,\n    monthBorderColor: '#000',\n    monthSpacing: 0,\n    monthLegend: (_year: number, _month: number, date: Date) => monthLabelFormat(date),\n    monthLegendPosition: 'before',\n    monthLegendOffset: 10,\n\n    daySpacing: 0,\n    dayBorderWidth: 1,\n    dayBorderColor: '#000',\n\n    isInteractive: true,\n\n    legends: [] as CalendarLegendProps[],\n    tooltip: CalendarTooltip,\n} as const\n\nexport const calendarDefaultProps = {\n    ...commonDefaultProps,\n    role: 'img',\n} as const\n\nexport const calendarCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n} as const\n\nexport const timeRangeDefaultProps = {\n    ...calendarDefaultProps,\n    dayBorderColor: '#fff',\n    dayRadius: 0,\n    square: true,\n    weekdayLegendOffset: 75,\n} as const\n","import { isDate, memoize, range } from 'lodash'\nimport { alignBox } from '@nivo/core'\nimport { timeFormat } from 'd3-time-format'\nimport { timeDays, timeWeek, timeWeeks, timeMonths, timeYear } from 'd3-time'\nimport { ScaleQuantize } from 'd3-scale'\nimport { BBox, CalendarSvgProps, ColorScale, Datum, Year } from '../types'\n\n/**\n * Compute min/max values.\n */\nexport const computeDomain = (\n    data: CalendarSvgProps['data'],\n    minSpec: NonNullable<CalendarSvgProps['minValue']>,\n    maxSpec: NonNullable<CalendarSvgProps['maxValue']>\n) => {\n    const allValues = data.map(d => d.value)\n    const minValue = minSpec === 'auto' ? Math.min(...allValues) : minSpec\n    const maxValue = maxSpec === 'auto' ? Math.max(...allValues) : maxSpec\n\n    return [minValue, maxValue] as const\n}\n\n/**\n * Compute day cell size according to current context.\n */\nconst computeCellSize = ({\n    width,\n    height,\n    direction,\n    yearRange,\n    yearSpacing,\n    monthSpacing,\n    daySpacing,\n    maxWeeks,\n}: Pick<\n    Required<CalendarSvgProps>,\n    'direction' | 'width' | 'height' | 'yearSpacing' | 'monthSpacing' | 'daySpacing'\n> & {\n    maxWeeks: number\n    yearRange: number[]\n}) => {\n    let hCellSize\n    let vCellSize\n\n    if (direction === 'horizontal') {\n        hCellSize = (width - monthSpacing * 12 - daySpacing * maxWeeks) / maxWeeks\n        vCellSize =\n            (height - (yearRange.length - 1) * yearSpacing - yearRange.length * (8 * daySpacing)) /\n            (yearRange.length * 7)\n    } else {\n        hCellSize =\n            (width - (yearRange.length - 1) * yearSpacing - yearRange.length * (8 * daySpacing)) /\n            (yearRange.length * 7)\n        vCellSize = (height - monthSpacing * 12 - daySpacing * maxWeeks) / maxWeeks\n    }\n\n    return Math.min(hCellSize, vCellSize)\n}\n\n/**\n * Computes month path and bounding box.\n */\nconst monthPathAndBBox = ({\n    date,\n    cellSize,\n    yearIndex,\n    yearSpacing,\n    monthSpacing,\n    daySpacing,\n    direction,\n    originX,\n    originY,\n}: Record<'cellSize' | 'originX' | 'originY' | 'yearIndex', number> &\n    Pick<\n        Required<CalendarSvgProps>,\n        'direction' | 'yearSpacing' | 'monthSpacing' | 'daySpacing'\n    > & {\n        date: Date\n    }) => {\n    // first day of next month\n    const t1 = new Date(date.getFullYear(), date.getMonth() + 1, 0)\n\n    // ranges\n    const firstWeek = timeWeek.count(timeYear(date), date)\n    const lastWeek = timeWeek.count(timeYear(t1), t1)\n    const firstDay = date.getDay()\n    const lastDay = t1.getDay()\n\n    // offset according to year index and month\n    let xO = originX\n    let yO = originY\n    const yearOffset = yearIndex * (7 * (cellSize + daySpacing) + yearSpacing)\n    const monthOffset = date.getMonth() * monthSpacing\n    if (direction === 'horizontal') {\n        yO += yearOffset\n        xO += monthOffset\n    } else {\n        yO += monthOffset\n        xO += yearOffset\n    }\n\n    let path\n    const bbox = { x: xO, y: yO, width: 0, height: 0 }\n    if (direction === 'horizontal') {\n        path = [\n            `M${xO + (firstWeek + 1) * (cellSize + daySpacing)},${\n                yO + firstDay * (cellSize + daySpacing)\n            }`,\n            `H${xO + firstWeek * (cellSize + daySpacing)}V${yO + 7 * (cellSize + daySpacing)}`,\n            `H${xO + lastWeek * (cellSize + daySpacing)}V${\n                yO + (lastDay + 1) * (cellSize + daySpacing)\n            }`,\n            `H${xO + (lastWeek + 1) * (cellSize + daySpacing)}V${yO}`,\n            `H${xO + (firstWeek + 1) * (cellSize + daySpacing)}Z`,\n        ].join('')\n\n        bbox.x = xO + firstWeek * (cellSize + daySpacing)\n        bbox.width = xO + (lastWeek + 1) * (cellSize + daySpacing) - bbox.x\n        bbox.height = 7 * (cellSize + daySpacing)\n    } else {\n        path = [\n            `M${xO + firstDay * (cellSize + daySpacing)},${\n                yO + (firstWeek + 1) * (cellSize + daySpacing)\n            }`,\n            `H${xO}V${yO + (lastWeek + 1) * (cellSize + daySpacing)}`,\n            `H${xO + (lastDay + 1) * (cellSize + daySpacing)}V${\n                yO + lastWeek * (cellSize + daySpacing)\n            }`,\n            `H${xO + 7 * (cellSize + daySpacing)}V${yO + firstWeek * (cellSize + daySpacing)}`,\n            `H${xO + firstDay * (cellSize + daySpacing)}Z`,\n        ].join('')\n\n        bbox.y = yO + firstWeek * (cellSize + daySpacing)\n        bbox.width = 7 * (cellSize + daySpacing)\n        bbox.height = yO + (lastWeek + 1) * (cellSize + daySpacing) - bbox.y\n    }\n\n    return { path, bbox }\n}\n\n/**\n * Creates a memoized version of monthPathAndBBox function.\n */\nconst memoMonthPathAndBBox = memoize(\n    monthPathAndBBox,\n    ({\n        date,\n        cellSize,\n        yearIndex,\n        yearSpacing,\n        monthSpacing,\n        daySpacing,\n        direction,\n        originX,\n        originY,\n    }) => {\n        return `${date.toString()}.${cellSize}.${yearIndex}.${yearSpacing}.${monthSpacing}.${daySpacing}.${direction}.${originX}.${originY}`\n    }\n)\n\n/**\n * Returns a function to Compute day cell position for horizontal layout.\n */\nconst cellPositionHorizontal = (\n    cellSize: number,\n    yearSpacing: number,\n    monthSpacing: number,\n    daySpacing: number\n) => {\n    return (originX: number, originY: number, d: Date, yearIndex: number) => {\n        const weekOfYear = timeWeek.count(timeYear(d), d)\n\n        return {\n            x:\n                originX +\n                weekOfYear * (cellSize + daySpacing) +\n                daySpacing / 2 +\n                d.getMonth() * monthSpacing,\n            y:\n                originY +\n                d.getDay() * (cellSize + daySpacing) +\n                daySpacing / 2 +\n                yearIndex * (yearSpacing + 7 * (cellSize + daySpacing)),\n        }\n    }\n}\n\n/**\n * Returns a function to Compute day cell position for vertical layout.\n */\nconst cellPositionVertical = (\n    cellSize: number,\n    yearSpacing: number,\n    monthSpacing: number,\n    daySpacing: number\n) => {\n    return (originX: number, originY: number, d: Date, yearIndex: number) => {\n        const weekOfYear = timeWeek.count(timeYear(d), d)\n\n        return {\n            x:\n                originX +\n                d.getDay() * (cellSize + daySpacing) +\n                daySpacing / 2 +\n                yearIndex * (yearSpacing + 7 * (cellSize + daySpacing)),\n            y:\n                originY +\n                weekOfYear * (cellSize + daySpacing) +\n                daySpacing / 2 +\n                d.getMonth() * monthSpacing,\n        }\n    }\n}\n\n// used for days range and data matching\nconst dayFormat = timeFormat('%Y-%m-%d')\n\n/**\n * Compute base layout, without caring about the current data.\n */\nexport const computeLayout = ({\n    width,\n    height,\n    from,\n    to,\n    direction,\n    yearSpacing,\n    monthSpacing,\n    daySpacing,\n    align,\n}: Pick<\n    Required<CalendarSvgProps>,\n    | 'align'\n    | 'direction'\n    | 'from'\n    | 'to'\n    | 'width'\n    | 'height'\n    | 'yearSpacing'\n    | 'monthSpacing'\n    | 'daySpacing'\n>) => {\n    const fromDate = isDate(from) ? from : new Date(from)\n    const toDate = isDate(to) ? to : new Date(to)\n\n    const yearRange = range(fromDate.getFullYear(), toDate.getFullYear() + 1)\n    const maxWeeks =\n        Math.max(\n            ...yearRange.map(\n                year => timeWeeks(new Date(year, 0, 1), new Date(year + 1, 0, 1)).length\n            )\n        ) + 1\n\n    const cellSize = computeCellSize({\n        width,\n        height,\n        direction,\n        yearRange,\n        yearSpacing,\n        monthSpacing,\n        daySpacing,\n        maxWeeks,\n    })\n\n    const monthsSize = cellSize * maxWeeks + daySpacing * maxWeeks + monthSpacing * 12\n    const yearsSize =\n        (cellSize + daySpacing) * 7 * yearRange.length + yearSpacing * (yearRange.length - 1)\n\n    const calendarWidth = direction === 'horizontal' ? monthsSize : yearsSize\n    const calendarHeight = direction === 'horizontal' ? yearsSize : monthsSize\n    const [originX, originY] = alignBox(\n        {\n            x: 0,\n            y: 0,\n            width: calendarWidth,\n            height: calendarHeight,\n        },\n        {\n            x: 0,\n            y: 0,\n            width,\n            height,\n        },\n        align\n    )\n\n    let cellPosition: ReturnType<typeof cellPositionHorizontal>\n    if (direction === 'horizontal') {\n        cellPosition = cellPositionHorizontal(cellSize, yearSpacing, monthSpacing, daySpacing)\n    } else {\n        cellPosition = cellPositionVertical(cellSize, yearSpacing, monthSpacing, daySpacing)\n    }\n\n    const years: Array<{\n        year: number\n        bbox: BBox\n    }> = []\n\n    let months: Array<{\n        path: string\n        bbox: {\n            x: number\n            y: number\n            width: number\n            height: number\n        }\n        date: Date\n        year: number\n        month: number\n    }> = []\n\n    let days: Array<Omit<Datum, 'color' | 'data' | 'value'>> = []\n\n    yearRange.forEach((year, i) => {\n        const yearStart = new Date(year, 0, 1)\n        const yearEnd = new Date(year + 1, 0, 1)\n\n        days = days.concat(\n            timeDays(yearStart, yearEnd).map(dayDate => {\n                return {\n                    date: dayDate,\n                    day: dayFormat(dayDate),\n                    size: cellSize,\n                    ...cellPosition(originX, originY, dayDate, i),\n                }\n            })\n        )\n\n        const yearMonths = timeMonths(yearStart, yearEnd).map(monthDate => ({\n            date: monthDate,\n            year: monthDate.getFullYear(),\n            month: monthDate.getMonth(),\n            ...memoMonthPathAndBBox({\n                originX,\n                originY,\n                date: monthDate,\n                direction,\n                yearIndex: i,\n                yearSpacing,\n                monthSpacing,\n                daySpacing,\n                cellSize,\n            }),\n        }))\n\n        months = months.concat(yearMonths)\n\n        years.push({\n            year,\n            bbox: {\n                x: yearMonths[0].bbox.x,\n                y: yearMonths[0].bbox.y,\n                width: yearMonths[11].bbox.x - yearMonths[0].bbox.x + yearMonths[11].bbox.width,\n                height: yearMonths[11].bbox.y - yearMonths[0].bbox.y + yearMonths[11].bbox.height,\n            },\n        })\n    })\n\n    return { years, months, days, cellSize, calendarWidth, calendarHeight, originX, originY }\n}\n\n/**\n * Bind current data to computed day cells.\n */\nexport const bindDaysData = ({\n    days,\n    data,\n    colorScale,\n    emptyColor,\n}: Pick<Required<CalendarSvgProps>, 'data' | 'emptyColor'> & {\n    colorScale: ScaleQuantize<string> | ColorScale\n    days: Array<Omit<Datum, 'color' | 'data' | 'value'>>\n}) => {\n    return days.map(day => {\n        const dayData = data.find(item => item.day === day.day)\n\n        if (!dayData) {\n            return { ...day, color: emptyColor }\n        }\n\n        return {\n            ...day,\n            color: colorScale(dayData.value),\n            data: dayData,\n            value: dayData.value,\n        }\n    })\n}\n\nexport const computeYearLegendPositions = ({\n    years,\n    direction,\n    position,\n    offset,\n}: Pick<Required<CalendarSvgProps>, 'direction'> & {\n    offset: number\n    position: 'before' | 'after'\n    years: Year[]\n}) => {\n    return years.map(year => {\n        let x = 0\n        let y = 0\n        let rotation = 0\n        if (direction === 'horizontal' && position === 'before') {\n            x = year.bbox.x - offset\n            y = year.bbox.y + year.bbox.height / 2\n            rotation = -90\n        } else if (direction === 'horizontal' && position === 'after') {\n            x = year.bbox.x + year.bbox.width + offset\n            y = year.bbox.y + year.bbox.height / 2\n            rotation = -90\n        } else if (direction === 'vertical' && position === 'before') {\n            x = year.bbox.x + year.bbox.width / 2\n            y = year.bbox.y - offset\n        } else {\n            x = year.bbox.x + year.bbox.width / 2\n            y = year.bbox.y + year.bbox.height + offset\n        }\n\n        return {\n            ...year,\n            x,\n            y,\n            rotation,\n        }\n    })\n}\n\nexport const computeMonthLegendPositions = <Month extends { bbox: BBox }>({\n    months,\n    direction,\n    position,\n    offset,\n}: Pick<Required<CalendarSvgProps>, 'direction'> & {\n    offset: number\n    position: 'before' | 'after'\n    months: Month[]\n}) => {\n    return months.map(month => {\n        let x = 0\n        let y = 0\n        let rotation = 0\n        if (direction === 'horizontal' && position === 'before') {\n            x = month.bbox.x + month.bbox.width / 2\n            y = month.bbox.y - offset\n        } else if (direction === 'horizontal' && position === 'after') {\n            x = month.bbox.x + month.bbox.width / 2\n            y = month.bbox.y + month.bbox.height + offset\n        } else if (direction === 'vertical' && position === 'before') {\n            x = month.bbox.x - offset\n            y = month.bbox.y + month.bbox.height / 2\n            rotation = -90\n        } else {\n            x = month.bbox.x + month.bbox.width + offset\n            y = month.bbox.y + month.bbox.height / 2\n            rotation = -90\n        }\n\n        return {\n            ...month,\n            x,\n            y,\n            rotation,\n        }\n    })\n}\n","import { useMemo } from 'react'\nimport { ScaleQuantize, scaleQuantize } from 'd3-scale'\nimport {\n    computeDomain,\n    computeYearLegendPositions,\n    computeMonthLegendPositions,\n    bindDaysData,\n    computeLayout,\n} from './compute/calendar'\nimport { BBox, CalendarSvgProps, ColorScale, Year } from './types'\n\nexport const useCalendarLayout = ({\n    width,\n    height,\n    from,\n    to,\n    direction,\n    yearSpacing,\n    monthSpacing,\n    daySpacing,\n    align,\n}: Pick<\n    Required<CalendarSvgProps>,\n    | 'width'\n    | 'height'\n    | 'from'\n    | 'to'\n    | 'direction'\n    | 'yearSpacing'\n    | 'monthSpacing'\n    | 'daySpacing'\n    | 'align'\n>) =>\n    useMemo(\n        () =>\n            computeLayout({\n                width,\n                height,\n                from,\n                to,\n                direction,\n                yearSpacing,\n                monthSpacing,\n                daySpacing,\n                align,\n            }),\n        [width, height, from, to, direction, yearSpacing, monthSpacing, daySpacing, align]\n    )\n\nexport const useColorScale = ({\n    data,\n    minValue,\n    maxValue,\n    colors,\n    colorScale,\n}: Pick<Required<CalendarSvgProps>, 'data' | 'minValue' | 'maxValue' | 'colors'> &\n    Pick<CalendarSvgProps, 'colorScale'>) =>\n    useMemo(() => {\n        if (colorScale) return colorScale\n        const domain = computeDomain(data, minValue, maxValue)\n        const defaultColorScale = scaleQuantize<string>().domain(domain).range(colors)\n        return defaultColorScale\n    }, [data, minValue, maxValue, colors, colorScale])\n\nexport const useYearLegends = ({\n    years,\n    direction,\n    yearLegendPosition,\n    yearLegendOffset,\n}: {\n    years: Year[]\n    direction: 'horizontal' | 'vertical'\n    yearLegendPosition: 'before' | 'after'\n    yearLegendOffset: number\n}) =>\n    useMemo(\n        () =>\n            computeYearLegendPositions({\n                years,\n                direction,\n                position: yearLegendPosition,\n                offset: yearLegendOffset,\n            }),\n        [years, direction, yearLegendPosition, yearLegendOffset]\n    )\n\nexport const useMonthLegends = <Month extends { bbox: BBox }>({\n    months,\n    direction,\n    monthLegendPosition,\n    monthLegendOffset,\n}: {\n    months: Month[]\n    direction: 'horizontal' | 'vertical'\n    monthLegendPosition: 'before' | 'after'\n    monthLegendOffset: number\n}) =>\n    useMemo(\n        () =>\n            computeMonthLegendPositions({\n                months,\n                direction,\n                position: monthLegendPosition,\n                offset: monthLegendOffset,\n            }),\n        [months, direction, monthLegendPosition, monthLegendOffset]\n    )\n\nexport const useDays = ({\n    days,\n    data,\n    colorScale,\n    emptyColor,\n}: Pick<Required<CalendarSvgProps>, 'data' | 'emptyColor'> &\n    Pick<Parameters<typeof bindDaysData>[0], 'days'> & {\n        colorScale: ScaleQuantize<string> | ColorScale\n    }) =>\n    useMemo(\n        () =>\n            bindDaysData({\n                days,\n                data,\n                colorScale,\n                emptyColor,\n            }),\n        [days, data, colorScale, emptyColor]\n    )\n","import { CalendarSvgProps } from './types'\nimport { Container, SvgWrapper, useTheme, useDimensions, useValueFormatter } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { CalendarYearLegends } from './CalendarYearLegends'\nimport { CalendarMonthPath } from './CalendarMonthPath'\nimport { CalendarMonthLegends } from './CalendarMonthLegends'\nimport { CalendarDay } from './CalendarDay'\nimport { calendarDefaultProps } from './props'\nimport { useMonthLegends, useYearLegends, useCalendarLayout, useDays, useColorScale } from './hooks'\n\nconst InnerCalendar = ({\n    margin: partialMargin,\n    width,\n    height,\n\n    align = calendarDefaultProps.align,\n    colors = calendarDefaultProps.colors,\n    colorScale,\n    data,\n    direction = calendarDefaultProps.direction,\n    emptyColor = calendarDefaultProps.emptyColor,\n    from,\n    to,\n    minValue = calendarDefaultProps.minValue,\n    maxValue = calendarDefaultProps.maxValue,\n    valueFormat,\n    legendFormat,\n\n    yearLegend = calendarDefaultProps.yearLegend,\n    yearLegendOffset = calendarDefaultProps.yearLegendOffset,\n    yearLegendPosition = calendarDefaultProps.yearLegendPosition,\n    yearSpacing = calendarDefaultProps.yearSpacing,\n\n    monthBorderColor = calendarDefaultProps.monthBorderColor,\n    monthBorderWidth = calendarDefaultProps.monthBorderWidth,\n    monthLegend = calendarDefaultProps.monthLegend,\n    monthLegendOffset = calendarDefaultProps.monthLegendOffset,\n    monthLegendPosition = calendarDefaultProps.monthLegendPosition,\n    monthSpacing = calendarDefaultProps.monthSpacing,\n\n    dayBorderColor = calendarDefaultProps.dayBorderColor,\n    dayBorderWidth = calendarDefaultProps.dayBorderWidth,\n    daySpacing = calendarDefaultProps.daySpacing,\n\n    isInteractive = calendarDefaultProps.isInteractive,\n    tooltip = calendarDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n\n    legends = calendarDefaultProps.legends,\n    role = calendarDefaultProps.role,\n}: CalendarSvgProps) => {\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const { months, years, ...rest } = useCalendarLayout({\n        width: innerWidth,\n        height: innerHeight,\n        from,\n        to,\n        direction,\n        yearSpacing,\n        monthSpacing,\n        daySpacing,\n        align,\n    })\n    const colorScaleFn = useColorScale({ data, minValue, maxValue, colors, colorScale })\n    const monthLegends = useMonthLegends({\n        months,\n        direction,\n        monthLegendPosition,\n        monthLegendOffset,\n    })\n    const yearLegends = useYearLegends({ years, direction, yearLegendPosition, yearLegendOffset })\n    const days = useDays({ days: rest.days, data, colorScale: colorScaleFn, emptyColor })\n    const formatLegend = useValueFormatter(legendFormat)\n    const formatValue = useValueFormatter(valueFormat)\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {days.map(d => (\n                <CalendarDay\n                    key={d.date.toString()}\n                    data={d}\n                    x={d.x}\n                    y={d.y}\n                    size={d.size}\n                    color={d.color}\n                    borderWidth={dayBorderWidth}\n                    borderColor={dayBorderColor}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    onMouseMove={onMouseMove}\n                    isInteractive={isInteractive}\n                    tooltip={tooltip}\n                    onClick={onClick}\n                    formatValue={formatValue}\n                />\n            ))}\n            {months.map(m => (\n                <CalendarMonthPath\n                    key={m.date.toString()}\n                    path={m.path}\n                    borderWidth={monthBorderWidth}\n                    borderColor={monthBorderColor}\n                />\n            ))}\n            <CalendarMonthLegends months={monthLegends} legend={monthLegend} theme={theme} />\n            <CalendarYearLegends years={yearLegends} legend={yearLegend} theme={theme} />\n            {legends.map((legend, i) => {\n                const legendData = colorScaleFn.ticks(legend.itemCount).map(value => ({\n                    id: value,\n                    label: formatLegend(value),\n                    color: colorScaleFn(value),\n                }))\n\n                return (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={width}\n                        containerHeight={height}\n                        data={legendData}\n                    />\n                )\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Calendar = ({\n    isInteractive = calendarDefaultProps.isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: CalendarSvgProps) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerCalendar isInteractive={isInteractive} {...props} />\n    </Container>\n)\n","import { timeWeek, timeDays, timeDay } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport { DateOrString } from '../types'\nimport { isDate } from 'lodash'\n\n// Interfaces\ninterface ComputeBaseProps {\n    direction: 'horizontal' | 'vertical'\n}\n\ninterface ComputeBaseSpaceProps {\n    daySpacing: number\n    offset: number\n}\n\ninterface ComputeBaseDimensionProps {\n    cellWidth: number\n    cellHeight: number\n}\n\ninterface ComputeCellSize extends ComputeBaseProps, ComputeBaseSpaceProps {\n    totalDays: number\n    width: number\n    height: number\n    square: boolean\n}\n\ninterface ComputeCellPositions\n    extends ComputeBaseProps,\n        ComputeBaseSpaceProps,\n        ComputeBaseDimensionProps {\n    from?: DateOrString\n    to?: DateOrString\n    data: {\n        date: Date\n        day: string\n        value: number\n    }[]\n    colorScale: (value: number) => string\n    emptyColor: string\n}\n\ninterface ComputeWeekdays\n    extends Omit<ComputeBaseProps, 'daysInRange'>,\n        Omit<ComputeBaseSpaceProps, 'offset'>,\n        ComputeBaseDimensionProps {\n    ticks?: number[]\n    arrayOfWeekdays?: string[]\n}\n\ninterface Day {\n    coordinates: {\n        x: number\n        y: number\n    }\n    firstWeek: number\n    month: number\n    year: number\n    date: Date\n    color: string\n    day: string\n    value?: number\n}\n\ninterface Month {\n    date: Date\n    bbox: {\n        x: number\n        y: number\n        width: number\n        height: number\n    }\n    firstWeek: number\n    month: number\n    year: number\n}\n\ninterface ComputeMonths\n    extends ComputeBaseProps,\n        Omit<ComputeBaseSpaceProps, 'offset'>,\n        ComputeBaseDimensionProps {\n    days: Day[]\n}\n\ninterface ComputeTotalDays {\n    from?: DateOrString\n    to?: DateOrString\n    data: {\n        date: Date\n        day: string\n        value: number\n    }[]\n}\n\n// used for days range and data matching\nconst dayFormat = timeFormat('%Y-%m-%d')\n\n/**\n * Compute day cell size according to\n * current context.\n */\nexport const computeCellSize = ({\n    direction,\n    daySpacing,\n    offset,\n    square,\n    totalDays,\n    width,\n    height,\n}: ComputeCellSize) => {\n    const daysInRange = 7\n    let rows\n    let columns\n    let widthRest = width\n    let heightRest = height\n    if (direction === 'horizontal') {\n        widthRest -= offset\n        rows = daysInRange\n        columns = Math.ceil(totalDays / daysInRange)\n    } else {\n        heightRest -= offset\n        columns = daysInRange\n        rows = Math.ceil(totalDays / daysInRange)\n    }\n    // + 1 since we have to apply spacing to the rigth and left\n    const cellHeight = (heightRest - daySpacing * (rows + 1)) / rows\n    const cellWidth = (widthRest - daySpacing * (columns + 1)) / columns\n    // do we want square?\n    const size = Math.min(cellHeight, cellWidth)\n    return {\n        columns,\n        rows,\n        cellHeight: square ? size : cellHeight,\n        cellWidth: square ? size : cellWidth,\n    }\n}\n\nfunction computeGrid({\n    startDate,\n    date,\n    direction,\n}: {\n    startDate: Date\n    date: Date\n    direction: 'horizontal' | 'vertical'\n}) {\n    const firstWeek = timeWeek.count(startDate, date)\n    const month = date.getMonth()\n    const year = date.getFullYear()\n\n    let currentColumn = 0\n    let currentRow = 0\n    if (direction === 'horizontal') {\n        currentColumn = firstWeek\n        currentRow = date.getDay()\n    } else {\n        currentColumn = date.getDay()\n        currentRow = firstWeek\n    }\n\n    return { currentColumn, year, currentRow, firstWeek, month, date }\n}\n\nexport const computeCellPositions = ({\n    direction,\n    colorScale,\n    emptyColor,\n    from,\n    to,\n    data,\n    cellWidth,\n    cellHeight,\n    daySpacing,\n    offset,\n}: ComputeCellPositions) => {\n    let x = daySpacing\n    let y = daySpacing\n\n    if (direction === 'horizontal') {\n        x += offset\n    } else {\n        y += offset\n    }\n\n    // we need to determine whether we need to add days to move to correct position\n    const start = from ? from : data[0].date\n    const end = to ? to : data[data.length - 1].date\n    const startDate = isDate(start) ? start : new Date(start)\n    const endDate = isDate(end) ? end : new Date(end)\n    const dateRange = timeDays(startDate, endDate).map(dayDate => {\n        return {\n            date: dayDate,\n            day: dayFormat(dayDate),\n        }\n    })\n\n    const dataWithCellPosition = dateRange.map(day => {\n        const dayData = data.find(item => item.day === day.day)\n\n        const { currentColumn, currentRow, firstWeek, year, month, date } = computeGrid({\n            startDate,\n            date: day.date,\n            direction,\n        })\n\n        const coordinates = {\n            x: x + daySpacing * currentColumn + cellWidth * currentColumn,\n            y: y + daySpacing * currentRow + cellHeight * currentRow,\n        }\n\n        if (!dayData) {\n            return {\n                ...day,\n                coordinates,\n                firstWeek,\n                month,\n                year,\n                date,\n                color: emptyColor,\n                width: cellWidth,\n                height: cellHeight,\n            }\n        }\n\n        return {\n            ...dayData,\n            coordinates,\n            firstWeek,\n            month,\n            year,\n            date,\n            color: colorScale(dayData.value),\n            width: cellWidth,\n            height: cellHeight,\n        }\n    })\n\n    return dataWithCellPosition\n}\n\nexport const computeWeekdays = ({\n    cellHeight,\n    cellWidth,\n    direction,\n    daySpacing,\n    ticks = [1, 3, 5],\n    arrayOfWeekdays = [\n        'Sunday',\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday',\n    ],\n}: ComputeWeekdays) => {\n    const sizes = {\n        width: cellWidth + daySpacing,\n        height: cellHeight + daySpacing,\n    }\n    return ticks.map(day => ({\n        value: arrayOfWeekdays[day],\n        rotation: direction === 'horizontal' ? 0 : -90,\n        y: direction === 'horizontal' ? sizes.height * (day + 1) - sizes.height / 3 : 0,\n        x: direction === 'horizontal' ? 0 : sizes.width * (day + 1) - sizes.width / 3,\n    }))\n}\n\nexport const computeMonthLegends = ({\n    direction,\n    daySpacing,\n    days,\n    cellHeight,\n    cellWidth,\n}: ComputeMonths) => {\n    const accumulator: {\n        months: { [key: string]: Month }\n        weeks: Day[]\n    } = {\n        months: {},\n        weeks: [],\n    }\n\n    return days.reduce((acc, day) => {\n        if (acc.weeks.length === day.firstWeek) {\n            acc.weeks.push(day)\n\n            const key = `${day.year}-${day.month}`\n\n            if (!Object.keys(acc.months).includes(key)) {\n                const bbox = { x: 0, y: 0, width: 0, height: 0 }\n\n                if (direction === 'horizontal') {\n                    bbox.x = day.coordinates.x - daySpacing\n                    bbox.height = cellHeight + daySpacing\n                    bbox.width = cellWidth + daySpacing * 2\n                } else {\n                    bbox.y = day.coordinates.y - daySpacing\n                    bbox.height = cellHeight + daySpacing * 2\n                    bbox.width = cellWidth + daySpacing * 2\n                }\n\n                acc.months[key] = {\n                    date: day.date,\n                    bbox,\n                    firstWeek: day.firstWeek,\n                    month: 0,\n                    year: 0,\n                }\n            } else {\n                // enhance width/height\n                if (direction === 'horizontal') {\n                    acc.months[key].bbox.width =\n                        (day.firstWeek - acc.months[key].firstWeek) * (cellWidth + daySpacing)\n                } else {\n                    acc.months[key].bbox.height =\n                        (day.firstWeek - acc.months[key].firstWeek) * (cellHeight + daySpacing)\n                }\n            }\n        }\n        return acc\n    }, accumulator)\n}\n\nexport const computeTotalDays = ({ from, to, data }: ComputeTotalDays) => {\n    let startDate\n    let endDate\n    if (from) {\n        startDate = isDate(from) ? from : new Date(from)\n    } else {\n        startDate = data[0].date\n    }\n\n    if (from && to) {\n        endDate = isDate(to) ? to : new Date(to)\n    } else {\n        endDate = data[data.length - 1].date\n    }\n\n    return startDate.getDay() + timeDay.count(startDate, endDate)\n}\n","import { createElement, memo, useCallback } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { TimeRangeDayProps } from './types'\n\nexport const TimeRangeDay = memo(\n    ({\n        data,\n        x,\n        ry = 5,\n        rx = 5,\n        y,\n        width,\n        height,\n        color,\n        borderWidth,\n        borderColor,\n        isInteractive,\n        tooltip,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        formatValue,\n    }: TimeRangeDayProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useCallback(\n            event => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                const formatedData = {\n                    ...data,\n                    value: formatValue(data.value),\n                }\n                showTooltipFromEvent(createElement(tooltip, { ...formatedData }), event)\n                onMouseEnter?.(data, event)\n            },\n            [showTooltipFromEvent, tooltip, data, onMouseEnter, formatValue]\n        )\n        const handleMouseMove = useCallback(\n            event => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                const formatedData = {\n                    ...data,\n                    value: formatValue(data.value),\n                }\n                showTooltipFromEvent(createElement(tooltip, { ...formatedData }), event)\n                onMouseMove?.(data, event)\n            },\n            [showTooltipFromEvent, tooltip, data, onMouseMove, formatValue]\n        )\n        const handleMouseLeave = useCallback(\n            event => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                hideTooltip()\n                onMouseLeave?.(data, event)\n            },\n            [hideTooltip, data, onMouseLeave]\n        )\n        const handleClick = useCallback(event => onClick?.(data, event), [data, onClick])\n\n        return (\n            <rect\n                x={x}\n                y={y}\n                rx={rx}\n                ry={ry}\n                width={width}\n                height={height}\n                style={{\n                    fill: color,\n                    strokeWidth: borderWidth,\n                    stroke: borderColor,\n                }}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleMouseMove : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n            />\n        )\n    }\n)\n","import { useMemo } from 'react'\nimport { Container, SvgWrapper, useValueFormatter, useTheme, useDimensions } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport {\n    computeWeekdays,\n    computeCellSize,\n    computeCellPositions,\n    computeMonthLegends,\n    computeTotalDays,\n} from './compute/timeRange'\nimport { useMonthLegends, useColorScale } from './hooks'\nimport { TimeRangeDay } from './TimeRangeDay'\nimport { CalendarMonthLegends } from './CalendarMonthLegends'\nimport { TimeRangeSvgProps } from './types'\nimport { timeRangeDefaultProps } from './props'\n\nconst InnerTimeRange = ({\n    margin: partialMargin,\n    width,\n    height,\n\n    square = timeRangeDefaultProps.square,\n    colors = timeRangeDefaultProps.colors,\n    colorScale,\n    emptyColor = timeRangeDefaultProps.emptyColor,\n    from,\n    to,\n    data: _data,\n    direction = timeRangeDefaultProps.direction,\n    minValue = timeRangeDefaultProps.minValue,\n    maxValue = timeRangeDefaultProps.maxValue,\n    valueFormat,\n    legendFormat,\n\n    monthLegend = timeRangeDefaultProps.monthLegend,\n    monthLegendOffset = timeRangeDefaultProps.monthLegendOffset,\n    monthLegendPosition = timeRangeDefaultProps.monthLegendPosition,\n\n    weekdayLegendOffset = timeRangeDefaultProps.weekdayLegendOffset,\n    weekdayTicks,\n\n    dayBorderColor = timeRangeDefaultProps.dayBorderColor,\n    dayBorderWidth = timeRangeDefaultProps.dayBorderWidth,\n    daySpacing = timeRangeDefaultProps.daySpacing,\n    dayRadius = timeRangeDefaultProps.dayRadius,\n\n    isInteractive = timeRangeDefaultProps.isInteractive,\n    tooltip = timeRangeDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n\n    legends = timeRangeDefaultProps.legends,\n    role = timeRangeDefaultProps.role,\n}: TimeRangeSvgProps) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const data = useMemo(\n        () =>\n            _data\n                .map(data => ({ ...data, date: new Date(`${data.day}T00:00:00`) }))\n                .sort((left, right) => left.day.localeCompare(right.day)),\n        [_data]\n    )\n\n    const theme = useTheme()\n    const colorScaleFn = useColorScale({ data, minValue, maxValue, colors, colorScale })\n\n    const totalDays = computeTotalDays({\n        from,\n        to,\n        data,\n    })\n\n    const { cellHeight, cellWidth } = computeCellSize({\n        square,\n        offset: weekdayLegendOffset,\n        totalDays: totalDays,\n        width: innerWidth,\n        height: innerHeight,\n        daySpacing,\n        direction,\n    })\n\n    const days = computeCellPositions({\n        offset: weekdayLegendOffset,\n        colorScale: colorScaleFn,\n        emptyColor,\n        cellHeight,\n        cellWidth,\n        from,\n        to,\n        data,\n        direction,\n        daySpacing,\n    })\n\n    // map the days and reduce the month\n    const months = Object.values(\n        computeMonthLegends({\n            daySpacing,\n            direction,\n            cellHeight,\n            cellWidth,\n            days,\n        }).months\n    )\n\n    const weekdayLegends = computeWeekdays({\n        direction,\n        cellHeight,\n        cellWidth,\n        daySpacing,\n        ticks: weekdayTicks,\n    })\n\n    const monthLegends = useMonthLegends({\n        months,\n        direction,\n        monthLegendPosition,\n        monthLegendOffset,\n    })\n\n    const formatValue = useValueFormatter(valueFormat)\n    const formatLegend = useValueFormatter(legendFormat)\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {weekdayLegends.map(legend => (\n                <text\n                    key={legend.value}\n                    transform={`translate(${legend.x},${legend.y}) rotate(${legend.rotation})`}\n                    textAnchor=\"left\"\n                    style={theme.labels.text}\n                >\n                    {legend.value}\n                </text>\n            ))}\n            {days.map(d => {\n                return (\n                    <TimeRangeDay\n                        key={d.date.toString()}\n                        data={d}\n                        x={d.coordinates.x}\n                        rx={dayRadius}\n                        y={d.coordinates.y}\n                        ry={dayRadius}\n                        width={cellWidth}\n                        height={cellHeight}\n                        color={d.color}\n                        borderWidth={dayBorderWidth}\n                        borderColor={dayBorderColor}\n                        onMouseEnter={onMouseEnter}\n                        onMouseLeave={onMouseLeave}\n                        onMouseMove={onMouseMove}\n                        isInteractive={isInteractive}\n                        tooltip={tooltip}\n                        onClick={onClick}\n                        formatValue={formatValue}\n                    />\n                )\n            })}\n            <CalendarMonthLegends months={monthLegends} legend={monthLegend} theme={theme} />\n\n            {legends.map((legend, i) => {\n                const legendData = colorScaleFn.ticks(legend.itemCount).map(value => ({\n                    id: value,\n                    label: formatLegend(value),\n                    color: colorScaleFn(value),\n                }))\n\n                return (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={width}\n                        containerHeight={height}\n                        data={legendData}\n                    />\n                )\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const TimeRange = ({\n    isInteractive = timeRangeDefaultProps.isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: TimeRangeSvgProps) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerTimeRange isInteractive={isInteractive} {...props} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { TimeRange } from './TimeRange'\nimport { TimeRangeSvgProps } from './types'\n\nexport const ResponsiveTimeRange = (props: Omit<TimeRangeSvgProps, 'height' | 'width'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TimeRange width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { Calendar } from './Calendar'\nimport { CalendarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveCalendar = (props: Omit<CalendarSvgProps, 'height' | 'width'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Calendar width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { memo, useRef, useState, useEffect, useCallback } from 'react'\nimport * as React from 'react'\nimport {\n    Box,\n    Container,\n    isCursorInRect,\n    getRelativeCursor,\n    degreesToRadians,\n    useDimensions,\n    useTheme,\n    useValueFormatter,\n} from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { calendarCanvasDefaultProps } from './props'\nimport { useCalendarLayout, useColorScale, useMonthLegends, useYearLegends, useDays } from './hooks'\nimport { useTooltip } from '@nivo/tooltip'\nimport { CalendarCanvasProps } from './types'\n\nconst findDayUnderCursor = (\n    event: React.MouseEvent,\n    canvasEl: HTMLCanvasElement,\n    days: ReturnType<typeof useDays>,\n    size: number,\n    dayBorderWidth: number,\n    margin: Required<Box>\n) => {\n    const [x, y] = getRelativeCursor(canvasEl, event)\n    return days.find(day => {\n        return (\n            'value' in day &&\n            isCursorInRect(\n                day.x + margin.left - dayBorderWidth / 2,\n                day.y + margin.top - dayBorderWidth / 2,\n                size + dayBorderWidth,\n                size + dayBorderWidth,\n                x,\n                y\n            )\n        )\n    })\n}\n\nconst InnerCalendarCanvas = memo(\n    ({\n        margin: partialMargin,\n        width,\n        height,\n        pixelRatio = calendarCanvasDefaultProps.pixelRatio,\n\n        align = calendarCanvasDefaultProps.align,\n        colors = calendarCanvasDefaultProps.colors,\n        colorScale,\n        data,\n        direction = calendarCanvasDefaultProps.direction,\n        emptyColor = calendarCanvasDefaultProps.emptyColor,\n        from,\n        to,\n        minValue = calendarCanvasDefaultProps.minValue,\n        maxValue = calendarCanvasDefaultProps.maxValue,\n        valueFormat,\n        legendFormat,\n\n        yearLegend = calendarCanvasDefaultProps.yearLegend,\n        yearLegendOffset = calendarCanvasDefaultProps.yearLegendOffset,\n        yearLegendPosition = calendarCanvasDefaultProps.yearLegendPosition,\n        yearSpacing = calendarCanvasDefaultProps.yearSpacing,\n\n        monthLegend = calendarCanvasDefaultProps.monthLegend,\n        monthLegendOffset = calendarCanvasDefaultProps.monthLegendOffset,\n        monthLegendPosition = calendarCanvasDefaultProps.monthLegendPosition,\n        monthSpacing = calendarCanvasDefaultProps.monthSpacing,\n\n        dayBorderColor = calendarCanvasDefaultProps.dayBorderColor,\n        dayBorderWidth = calendarCanvasDefaultProps.dayBorderWidth,\n        daySpacing = calendarCanvasDefaultProps.daySpacing,\n\n        isInteractive = calendarCanvasDefaultProps.isInteractive,\n        tooltip = calendarCanvasDefaultProps.tooltip,\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        onMouseMove,\n\n        legends = calendarCanvasDefaultProps.legends,\n    }: CalendarCanvasProps) => {\n        const canvasEl = useRef<HTMLCanvasElement | null>(null)\n        const { innerWidth, innerHeight, outerWidth, outerHeight, margin } = useDimensions(\n            width,\n            height,\n            partialMargin\n        )\n        const { months, years, ...rest } = useCalendarLayout({\n            width: innerWidth,\n            height: innerHeight,\n            from,\n            to,\n            direction,\n            yearSpacing,\n            monthSpacing,\n            daySpacing,\n            align,\n        })\n        const colorScaleFn = useColorScale({ data, minValue, maxValue, colors, colorScale })\n        const monthLegends = useMonthLegends({\n            months,\n            direction,\n            monthLegendPosition,\n            monthLegendOffset,\n        })\n        const yearLegends = useYearLegends({\n            years,\n            direction,\n            yearLegendPosition,\n            yearLegendOffset,\n        })\n        const days = useDays({ days: rest.days, data, colorScale: colorScaleFn, emptyColor })\n        const [currentDay, setCurrentDay] = useState<ReturnType<typeof useDays>[number] | null>(\n            null\n        )\n        const theme = useTheme()\n        const formatValue = useValueFormatter(valueFormat)\n        const formatLegend = useValueFormatter(legendFormat)\n\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        useEffect(() => {\n            if (!canvasEl.current) return\n\n            canvasEl.current.width = outerWidth * pixelRatio\n            canvasEl.current.height = outerHeight * pixelRatio\n\n            const ctx = canvasEl.current.getContext('2d')\n\n            if (!ctx) return\n\n            ctx.scale(pixelRatio, pixelRatio)\n\n            ctx.fillStyle = theme.background\n            ctx.fillRect(0, 0, outerWidth, outerHeight)\n            ctx.translate(margin.left, margin.top)\n\n            days.forEach(day => {\n                ctx.fillStyle = day.color\n                if (dayBorderWidth > 0) {\n                    ctx.strokeStyle = dayBorderColor\n                    ctx.lineWidth = dayBorderWidth\n                }\n\n                ctx.beginPath()\n                ctx.rect(day.x, day.y, day.size, day.size)\n                ctx.fill()\n\n                if (dayBorderWidth > 0) {\n                    ctx.stroke()\n                }\n            })\n\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'middle'\n            ctx.fillStyle = theme.labels.text.fill ?? ''\n            ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n            monthLegends.forEach(month => {\n                ctx.save()\n                ctx.translate(month.x, month.y)\n                ctx.rotate(degreesToRadians(month.rotation))\n                ctx.fillText(String(monthLegend(month.year, month.month, month.date)), 0, 0)\n                ctx.restore()\n            })\n\n            yearLegends.forEach(year => {\n                ctx.save()\n                ctx.translate(year.x, year.y)\n                ctx.rotate(degreesToRadians(year.rotation))\n                ctx.fillText(String(yearLegend(year.year)), 0, 0)\n                ctx.restore()\n            })\n\n            legends.forEach(legend => {\n                const legendData = colorScaleFn.ticks(legend.itemCount).map(value => ({\n                    id: value,\n                    label: formatLegend(value),\n                    color: colorScaleFn(value),\n                }))\n\n                renderLegendToCanvas(ctx, {\n                    ...legend,\n                    data: legendData,\n                    containerWidth: innerWidth,\n                    containerHeight: innerHeight,\n                    theme,\n                })\n            })\n        }, [\n            canvasEl,\n            innerHeight,\n            innerWidth,\n            outerWidth,\n            outerHeight,\n            pixelRatio,\n            margin,\n            days,\n            dayBorderColor,\n            dayBorderWidth,\n            colorScale,\n            yearLegend,\n            yearLegends,\n            monthLegend,\n            monthLegends,\n            legends,\n            theme,\n            formatLegend,\n            colorScaleFn,\n        ])\n\n        const handleMouseHover = useCallback(\n            event => {\n                if (!canvasEl.current) return\n\n                const data = findDayUnderCursor(\n                    event,\n                    canvasEl.current,\n                    days,\n                    days[0].size,\n                    dayBorderWidth,\n                    margin\n                )\n\n                if (data) {\n                    setCurrentDay(data)\n\n                    if (!('value' in data)) {\n                        return\n                    }\n\n                    const formatedData = {\n                        ...data,\n                        value: formatValue(data.value),\n                        data: { ...data.data },\n                    }\n                    showTooltipFromEvent(React.createElement(tooltip, { ...formatedData }), event)\n                    !currentDay && onMouseEnter?.(data, event)\n                    onMouseMove?.(data, event)\n                    currentDay && onMouseLeave?.(data, event)\n                } else {\n                    hideTooltip()\n                    data && onMouseLeave?.(data, event)\n                }\n            },\n            [\n                canvasEl,\n                currentDay,\n                margin,\n                days,\n                setCurrentDay,\n                formatValue,\n                dayBorderWidth,\n                showTooltipFromEvent,\n                hideTooltip,\n                onMouseEnter,\n                onMouseMove,\n                onMouseLeave,\n                tooltip,\n            ]\n        )\n\n        const handleMouseLeave = useCallback(() => {\n            setCurrentDay(null)\n            hideTooltip()\n        }, [setCurrentDay, hideTooltip])\n\n        const handleClick = useCallback(\n            event => {\n                if (!onClick || !canvasEl.current) return\n\n                const data = findDayUnderCursor(\n                    event,\n                    canvasEl.current,\n                    days,\n                    days[0].size,\n                    daySpacing,\n                    margin\n                )\n\n                data && onClick(data, event)\n            },\n            [canvasEl, daySpacing, margin, days, onClick]\n        )\n\n        return (\n            <canvas\n                ref={canvasEl}\n                width={outerWidth * pixelRatio}\n                height={outerHeight * pixelRatio}\n                style={{\n                    width: outerWidth,\n                    height: outerHeight,\n                }}\n                onMouseEnter={isInteractive ? handleMouseHover : undefined}\n                onMouseMove={isInteractive ? handleMouseHover : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n            />\n        )\n    }\n)\n\nexport const CalendarCanvas = ({\n    isInteractive = calendarCanvasDefaultProps.isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: CalendarCanvasProps) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerCalendarCanvas isInteractive={isInteractive} {...props} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { CalendarCanvas } from './CalendarCanvas'\nimport { CalendarCanvasProps } from './types'\n\nexport const ResponsiveCalendarCanvas = (props: Omit<CalendarCanvasProps, 'width' | 'height'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <CalendarCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["CalendarYearLegends","memo","years","legend","theme","React","map","key","year","transform","x","y","rotation","textAnchor","style","labels","text","CalendarMonthPath","path","borderWidth","borderColor","d","fill","strokeWidth","stroke","pointerEvents","CalendarMonthLegends","months","month","date","toString","CalendarDay","data","size","color","isInteractive","tooltip","onMouseEnter","onMouseMove","onMouseLeave","onClick","formatValue","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","useCallback","event","formatedData","value","handleMouseMove","handleMouseLeave","handleClick","width","height","CalendarTooltip","day","isNaN","Number","BasicTooltip","id","enableChip","monthLabelFormat","timeFormat","commonDefaultProps","colors","align","direction","emptyColor","minValue","maxValue","yearSpacing","yearLegend","yearLegendPosition","yearLegendOffset","monthBorderWidth","monthBorderColor","monthSpacing","monthLegend","_year","_month","monthLegendPosition","monthLegendOffset","daySpacing","dayBorderWidth","dayBorderColor","legends","calendarDefaultProps","role","calendarCanvasDefaultProps","pixelRatio","window","devicePixelRatio","timeRangeDefaultProps","dayRadius","square","weekdayLegendOffset","memoMonthPathAndBBox","_memoize","cellSize","yearIndex","originX","originY","t1","Date","getFullYear","getMonth","firstWeek","timeWeek","timeYear","lastWeek","firstDay","getDay","lastDay","xO","yO","yearOffset","monthOffset","bbox","join","dayFormat","useCalendarLayout","from","to","useMemo","cellPosition","fromDate","_isDate","toDate","yearRange","_range","maxWeeks","Math","max","timeWeeks","length","hCellSize","vCellSize","min","monthsSize","yearsSize","calendarWidth","calendarHeight","alignBox","weekOfYear","days","forEach","i","yearStart","yearEnd","concat","timeDays","dayDate","yearMonths","timeMonths","monthDate","push","computeLayout","useColorScale","colorScale","domain","minSpec","maxSpec","allValues","computeDomain","scaleQuantize","range","useYearLegends","position","offset","computeYearLegendPositions","useMonthLegends","computeMonthLegendPositions","useDays","dayData","find","item","bindDaysData","InnerCalendar","partialMargin","margin","valueFormat","legendFormat","useTheme","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","rest","colorScaleFn","monthLegends","yearLegends","formatLegend","useValueFormatter","SvgWrapper","m","legendData","ticks","itemCount","label","BoxLegendSvg","containerWidth","containerHeight","Calendar","renderWrapper","props","Container","computeCellPositions","cellWidth","cellHeight","start","end","startDate","endDate","dataWithCellPosition","currentColumn","currentRow","coordinates","TimeRangeDay","ry","rx","e","createElement","undefined","InnerTimeRange","_data","weekdayTicks","sort","left","right","localeCompare","totalDays","timeDay","computeTotalDays","rows","columns","widthRest","heightRest","ceil","computeCellSize","Object","values","reduce","acc","weeks","keys","includes","computeMonthLegends","weekdayLegends","arrayOfWeekdays","sizes","computeWeekdays","TimeRange","ResponsiveTimeRange","ResponsiveWrapper","ResponsiveCalendar","findDayUnderCursor","canvasEl","getRelativeCursor","isCursorInRect","top","InnerCalendarCanvas","useRef","useState","currentDay","setCurrentDay","useEffect","current","ctx","getContext","scale","fillStyle","background","fillRect","translate","strokeStyle","lineWidth","beginPath","rect","textAlign","textBaseline","font","fontSize","fontFamily","save","rotate","degreesToRadians","fillText","String","restore","renderLegendToCanvas","handleMouseHover","ref","CalendarCanvas","ResponsiveCalendarCanvas"],"sourceRoot":""}