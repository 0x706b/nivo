{"version":3,"file":"977575df68e71af6d8da2702ed3efd83668f2f4d-7ed89e7304f70d5f1bfa.js","mappings":"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","sources":["webpack://nivo-website/../src/bump/compute.ts","webpack://nivo-website/../src/bump/hooks.ts","webpack://nivo-website/../src/bump/Point.tsx","webpack://nivo-website/../src/bump/defaults.ts","webpack://nivo-website/../src/bump/LineTooltip.tsx","webpack://nivo-website/../src/bump/Line.tsx","webpack://nivo-website/../src/bump/LinesLabels.tsx","webpack://nivo-website/../src/bump/Points.tsx","webpack://nivo-website/../src/bump/Bump.tsx","webpack://nivo-website/../src/bump/ResponsiveBump.tsx","webpack://nivo-website/../src/area-bump/hooks.ts","webpack://nivo-website/../src/area-bump/compute.ts","webpack://nivo-website/../src/area-bump/Area.tsx","webpack://nivo-website/../src/area-bump/AreasLabels.tsx","webpack://nivo-website/../src/area-bump/defaults.ts","webpack://nivo-website/../src/area-bump/AreaTooltip.tsx","webpack://nivo-website/../src/area-bump/AreaBump.tsx","webpack://nivo-website/../src/area-bump/ResponsiveAreaBump.tsx"],"sourcesContent":["import { scalePoint } from 'd3-scale'\nimport { castPointScale } from '@nivo/scales'\nimport {\n    BumpDataProps,\n    BumpDatum,\n    BumpComputedSerie,\n    BumpSeriePoint,\n    BumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    width,\n    height,\n    data,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    xPadding: number\n    xOuterPadding: number\n    yOuterPadding: number\n}) => {\n    const xValuesSet = new Set<Datum['x']>()\n    const yValuesSet = new Set<number>()\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            xValuesSet.add(datum.x)\n            if (datum.y !== null) {\n                yValuesSet.add(datum.y)\n            }\n        })\n    })\n\n    const xValues: Datum['x'][] = Array.from(xValuesSet)\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(xValues).range([0, width]).padding(xOuterPadding)\n    )\n\n    const yValues: number[] = Array.from(yValuesSet).sort((a, b) => a - b)\n    const yScale = castPointScale<number>(\n        scalePoint<number>().domain(yValues).range([0, height]).padding(yOuterPadding)\n    )\n\n    const linePointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series: Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>[] =\n        data.map(rawSerie => {\n            const serie: Omit<\n                BumpComputedSerie<Datum, ExtraProps>,\n                'color' | 'opacity' | 'lineWidth'\n            > = {\n                id: rawSerie.id,\n                data: rawSerie,\n                points: [],\n                linePoints: [],\n            }\n\n            rawSerie.data.forEach((datum, i) => {\n                let x = null\n                let y = null\n\n                if (datum.y !== null) {\n                    x = xScale(datum.x)!\n                    y = yScale(datum.y)!\n                }\n\n                const point: BumpSeriePoint<Datum, ExtraProps> = {\n                    id: `${rawSerie.id}.${i}`,\n                    serie: rawSerie,\n                    data: datum,\n                    x: x as number,\n                    y,\n                }\n                serie.points.push(point)\n\n                // only add pre transition point if the datum is not empty\n                if (point.x !== null) {\n                    if (i === 0) {\n                        serie.linePoints.push([0, point.y])\n                    } else {\n                        serie.linePoints.push([point.x - linePointPadding, point.y])\n                    }\n                }\n\n                serie.linePoints.push([point.x, point.y])\n\n                // only add post transition point if the datum is not empty\n                if (x !== null) {\n                    if (i === rawSerie.data.length - 1 && x) {\n                        serie.linePoints.push([width, point.y])\n                    } else {\n                        serie.linePoints.push([point.x + linePointPadding, point.y])\n                    }\n                }\n\n                // remove points having null coordinates\n                serie.points = serie.points.filter(point => point.x !== null)\n            })\n\n            return serie\n        })\n\n    return {\n        series,\n        xScale,\n        yScale,\n    }\n}\n","import { createElement, useMemo, useCallback, useState } from 'react'\nimport { line as d3Line, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    BumpInterpolation,\n    BumpCommonProps,\n    BumpDatum,\n    DefaultBumpDatum,\n    BumpDataProps,\n    BumpComputedSerie,\n    BumpPoint,\n    BumpLabel,\n    BumpLabelData,\n    BumpSerieExtraProps,\n} from './types'\nimport { computeSeries } from './compute'\n\nconst useLineGenerator = (interpolation: BumpInterpolation) =>\n    useMemo(\n        () =>\n            d3Line<[number, number | null]>()\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear)\n                .defined(d => d[0] !== null && d[1] !== null),\n\n        [interpolation]\n    )\n\nconst useSerieDerivedProp = <Target, Output extends string | number>(\n    instruction: ((target: Target) => Output) | Output\n): ((target: Target) => Output) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useSerieStyle = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    isInteractive,\n    activeSerieIds,\n}: {\n    lineWidth: BumpCommonProps<Datum, ExtraProps>['lineWidth']\n    activeLineWidth: BumpCommonProps<Datum, ExtraProps>['activeLineWidth']\n    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>['inactiveLineWidth']\n    opacity: BumpCommonProps<Datum, ExtraProps>['opacity']\n    activeOpacity: BumpCommonProps<Datum, ExtraProps>['activeOpacity']\n    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>['inactiveOpacity']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Serie = Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>\n\n    const getLineWidth = useSerieDerivedProp<Serie, number>(lineWidth)\n    const getActiveLineWidth = useSerieDerivedProp<Serie, number>(activeLineWidth)\n    const getInactiveLineWidth = useSerieDerivedProp<Serie, number>(inactiveLineWidth)\n\n    const getOpacity = useSerieDerivedProp<Serie, number>(opacity)\n    const getActiveOpacity = useSerieDerivedProp<Serie, number>(activeOpacity)\n    const getInactiveOpacity = useSerieDerivedProp<Serie, number>(inactiveOpacity)\n\n    const getNormalStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getOpacity(serie),\n            lineWidth: getLineWidth(serie),\n        }),\n        [getLineWidth, getOpacity]\n    )\n    const getActiveStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getActiveOpacity(serie),\n            lineWidth: getActiveLineWidth(serie),\n        }),\n        [getActiveLineWidth, getActiveOpacity]\n    )\n    const getInactiveStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getInactiveOpacity(serie),\n            lineWidth: getInactiveLineWidth(serie),\n        }),\n        [getInactiveLineWidth, getInactiveOpacity]\n    )\n\n    return useCallback(\n        (serie: Serie) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(serie)\n            if (activeSerieIds.includes(serie.id)) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nconst usePointStyle = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    isInteractive,\n    activeSerieIds,\n}: {\n    pointSize: BumpCommonProps<Datum, ExtraProps>['pointSize']\n    activePointSize: BumpCommonProps<Datum, ExtraProps>['activePointSize']\n    inactivePointSize: BumpCommonProps<Datum, ExtraProps>['inactivePointSize']\n    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>['pointBorderWidth']\n    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['activePointBorderWidth']\n    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['inactivePointBorderWidth']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Point = Omit<BumpPoint<Datum, ExtraProps>, 'size' | 'borderWidth'>\n\n    const getSize = useSerieDerivedProp(pointSize)\n    const getActiveSize = useSerieDerivedProp(activePointSize)\n    const getInactiveSize = useSerieDerivedProp(inactivePointSize)\n\n    const getBorderWidth = useSerieDerivedProp(pointBorderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp(activePointBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp(inactivePointBorderWidth)\n\n    const getNormalStyle = useCallback(\n        (point: Point) => ({\n            size: getSize(point),\n            borderWidth: getBorderWidth(point),\n        }),\n        [getSize, getBorderWidth]\n    )\n    const getActiveStyle = useCallback(\n        (point: Point) => ({\n            size: getActiveSize(point),\n            borderWidth: getActiveBorderWidth(point),\n        }),\n        [getActiveSize, getActiveBorderWidth]\n    )\n    const getInactiveStyle = useCallback(\n        (point: Point) => ({\n            size: getInactiveSize(point),\n            borderWidth: getInactiveBorderWidth(point),\n        }),\n        [getInactiveSize, getInactiveBorderWidth]\n    )\n\n    return useCallback(\n        (point: Point) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(point)\n            if (activeSerieIds.includes(point.serie.id)) return getActiveStyle(point)\n            return getInactiveStyle(point)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nexport const useBump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>({\n    width,\n    height,\n    data,\n    interpolation,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    colors,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointColor,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    pointBorderColor,\n    isInteractive,\n    defaultActiveSerieIds,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    interpolation: BumpCommonProps<Datum, ExtraProps>['interpolation']\n    xPadding: BumpCommonProps<Datum, ExtraProps>['xPadding']\n    xOuterPadding: BumpCommonProps<Datum, ExtraProps>['xOuterPadding']\n    yOuterPadding: BumpCommonProps<Datum, ExtraProps>['yOuterPadding']\n    lineWidth: BumpCommonProps<Datum, ExtraProps>['lineWidth']\n    activeLineWidth: BumpCommonProps<Datum, ExtraProps>['activeLineWidth']\n    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>['inactiveLineWidth']\n    colors: BumpCommonProps<Datum, ExtraProps>['colors']\n    opacity: BumpCommonProps<Datum, ExtraProps>['opacity']\n    activeOpacity: BumpCommonProps<Datum, ExtraProps>['activeOpacity']\n    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>['inactiveOpacity']\n    pointSize: BumpCommonProps<Datum, ExtraProps>['pointSize']\n    activePointSize: BumpCommonProps<Datum, ExtraProps>['activePointSize']\n    inactivePointSize: BumpCommonProps<Datum, ExtraProps>['inactivePointSize']\n    pointColor: BumpCommonProps<Datum, ExtraProps>['pointColor']\n    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>['pointBorderWidth']\n    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['activePointBorderWidth']\n    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['inactivePointBorderWidth']\n    pointBorderColor: BumpCommonProps<Datum, ExtraProps>['pointBorderColor']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    defaultActiveSerieIds: string[]\n}) => {\n    const [activeSerieIds, setActiveSerieIds] = useState<string[]>(defaultActiveSerieIds)\n\n    const {\n        series: rawSeries,\n        xScale,\n        yScale,\n    } = useMemo(\n        () =>\n            computeSeries<Datum, ExtraProps>({\n                width,\n                height,\n                data,\n                xPadding,\n                xOuterPadding,\n                yOuterPadding,\n            }),\n        [width, height, data, xPadding, xOuterPadding, yOuterPadding]\n    )\n\n    const lineGenerator = useLineGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle<Datum, ExtraProps>({\n        lineWidth,\n        activeLineWidth,\n        inactiveLineWidth,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        isInteractive,\n        activeSerieIds,\n    })\n\n    const series: BumpComputedSerie<Datum, ExtraProps>[] = useMemo(\n        () =>\n            rawSeries.map(serie => ({\n                ...serie,\n                color: getColor(serie.data),\n                ...getSerieStyle(serie),\n            })),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const getPointStyle = usePointStyle<Datum, ExtraProps>({\n        pointSize,\n        activePointSize,\n        inactivePointSize,\n        pointBorderWidth,\n        activePointBorderWidth,\n        inactivePointBorderWidth,\n        isInteractive,\n        activeSerieIds,\n    })\n    const points: BumpPoint<Datum, ExtraProps>[] = useMemo(() => {\n        const pts: BumpPoint<Datum, ExtraProps>[] = []\n        series.forEach(serie => {\n            serie.points.forEach(rawPoint => {\n                // @ts-ignore\n                const point: BumpPoint<Datum, ExtraProps> = {\n                    ...rawPoint,\n                    serie,\n                    isActive: activeSerieIds.includes(serie.id),\n                    isInactive: activeSerieIds.length > 0 && !activeSerieIds.includes(serie.id),\n                }\n                point.color = getPointColor(point)\n                point.borderColor = getPointBorderColor(point)\n\n                pts.push({\n                    ...point,\n                    ...getPointStyle(point),\n                })\n            })\n        })\n\n        return pts\n    }, [series, getPointColor, getPointBorderColor, getPointStyle, activeSerieIds])\n\n    return {\n        xScale,\n        yScale,\n        series,\n        points,\n        lineGenerator,\n        activeSerieIds,\n        setActiveSerieIds,\n    }\n}\n\nexport const useBumpSerieHandlers = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: BumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: BumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: BumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: BumpCommonProps<Datum, ExtraProps>['tooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setActiveSerieIds([serie.id])\n            onMouseEnter && onMouseEnter(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setActiveSerieIds, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove && onMouseMove(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useBumpSeriesLabels = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>({\n    series,\n    position,\n    padding,\n    color,\n    getLabel,\n}: {\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>\n}) => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor: 'start' | 'end'\n        let signedPadding: number\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        const labels: BumpLabelData<Datum, ExtraProps>[] = []\n        series.forEach(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie.data)\n            }\n\n            const point =\n                position === 'start'\n                    ? serie.linePoints[0]\n                    : serie.linePoints[serie.linePoints.length - 1]\n\n            // exclude labels for series having missing data at the beginning/end\n            if (point[0] === null || point[1] === null) {\n                return\n            }\n\n            labels.push({\n                id: serie.id,\n                label,\n                x: point[0] + signedPadding,\n                y: point[1],\n                color: getColor(serie),\n                opacity: serie.opacity,\n                serie,\n                textAnchor,\n            })\n        })\n\n        return labels\n    }, [series, position, padding, getColor, getLabel])\n}\n","import { SVGAttributes } from 'react'\nimport { useSpring, animated, to } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BumpDatum, BumpPoint, BumpSerieExtraProps } from './types'\n\nconst pointStyle: SVGAttributes<SVGCircleElement>['style'] = { pointerEvents: 'none' }\n\ninterface PointProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    point: BumpPoint<Datum, ExtraProps>\n}\n\nexport const Point = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    point,\n}: PointProps<Datum, ExtraProps>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring<{\n        x: number\n        y: number\n        radius: number\n        color: string\n        borderWidth: number\n    }>({\n        x: point.x,\n        y: point.y,\n        radius: point.size / 2,\n        color: point.color,\n        borderWidth: point.borderWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            data-testid={`point.${point.serie.id}.${point.data.x}`}\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            r={to(animatedProps.radius, v => Math.max(v, 0))}\n            fill={animatedProps.color}\n            strokeWidth={animatedProps.borderWidth}\n            stroke={point.borderColor}\n            style={pointStyle}\n        />\n    )\n}\n","import { ModernMotionProps } from '@nivo/core'\nimport { LineTooltip } from './LineTooltip'\nimport { Point } from './Point'\nimport { BumpCommonProps, BumpPointComponent, DefaultBumpDatum } from './types'\n\nconst commonDefaultProps: Omit<\n    BumpCommonProps<DefaultBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'margin'\n    | 'theme'\n    | 'axisRight'\n    | 'renderWrapper'\n> = {\n    layers: ['grid', 'axes', 'labels', 'lines', 'points'],\n\n    interpolation: 'smooth',\n    xPadding: 0.6,\n    xOuterPadding: 0.5,\n    yOuterPadding: 0.5,\n\n    colors: { scheme: 'nivo' },\n    lineWidth: 2,\n    activeLineWidth: 4,\n    inactiveLineWidth: 1,\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.3,\n\n    startLabel: false,\n    startLabelPadding: 16,\n    startLabelTextColor: { from: 'color' },\n    endLabel: true,\n    endLabelPadding: 16,\n    endLabelTextColor: { from: 'color' },\n\n    pointSize: 6,\n    activePointSize: 8,\n    inactivePointSize: 4,\n    pointColor: { from: 'serie.color' },\n    pointBorderWidth: 0,\n    activePointBorderWidth: 0,\n    inactivePointBorderWidth: 0,\n    pointBorderColor: { from: 'serie.color', modifiers: [['darker', 1.4]] },\n\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisBottom: {},\n    axisLeft: {},\n\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    tooltip: LineTooltip,\n\n    role: 'img',\n}\n\nexport const bumpSvgDefaultProps: typeof commonDefaultProps & {\n    pointComponent: BumpPointComponent<DefaultBumpDatum, Record<string, unknown>>\n    animate: boolean\n    motionConfig: ModernMotionProps['motionConfig']\n} = {\n    ...commonDefaultProps,\n    pointComponent: Point,\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BumpComputedSerie, BumpDatum, BumpSerieExtraProps } from './types'\n\ninterface LineTooltipProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const LineTooltip = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n}: LineTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip\n        data-testid={`tooltip.${serie.data.id}`}\n        id={serie.data.id}\n        enableChip={true}\n        color={serie.color}\n    />\n)\n","import { useSpring, animated } from '@react-spring/web'\nimport { Line as D3Line } from 'd3-shape'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { BumpCommonProps, BumpComputedSerie, BumpDatum, BumpSerieExtraProps } from './types'\nimport { useBumpSerieHandlers } from './hooks'\n\ninterface LineProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    lineGenerator: D3Line<[number, number | null]>\n    yStep: number\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: BumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: BumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: BumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: BumpCommonProps<Datum, ExtraProps>['tooltip']\n}\n\nexport const Line = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n    lineGenerator,\n    yStep,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: LineProps<Datum, ExtraProps>) => {\n    const handlers = useBumpSerieHandlers<Datum, ExtraProps>({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setActiveSerieIds,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const linePath = lineGenerator(serie.linePoints) || ''\n\n    const animatedPath = useAnimatedPath(linePath)\n    const animatedProps = useSpring<{\n        color: string\n        opacity: number\n        lineWidth: number\n    }>({\n        color: serie.color,\n        opacity: serie.opacity,\n        lineWidth: serie.lineWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            <animated.path\n                data-testid={`line.${serie.id}`}\n                fill=\"none\"\n                d={animatedPath}\n                stroke={animatedProps.color}\n                strokeWidth={animatedProps.lineWidth}\n                strokeLinecap=\"round\"\n                strokeOpacity={animatedProps.opacity}\n                style={{ pointerEvents: 'none' }}\n            />\n            {isInteractive && (\n                <path\n                    data-testid={`line.${serie.id}.interactive`}\n                    fill=\"none\"\n                    stroke=\"red\"\n                    strokeOpacity={0}\n                    strokeWidth={yStep}\n                    d={linePath}\n                    strokeLinecap=\"butt\"\n                    onMouseEnter={handlers.onMouseEnter}\n                    onMouseMove={handlers.onMouseMove}\n                    onMouseLeave={handlers.onMouseLeave}\n                    onClick={handlers.onClick}\n                />\n            )}\n        </>\n    )\n}\n","import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { BumpComputedSerie, BumpDatum, BumpLabel, BumpSerieExtraProps } from './types'\nimport { useBumpSeriesLabels } from './hooks'\n\ninterface LineLabelsProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n}\n\nexport const LinesLabels = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    series,\n    getLabel,\n    position,\n    padding,\n    color,\n}: LineLabelsProps<Datum, ExtraProps>) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useBumpSeriesLabels<Datum, ExtraProps>({\n        series,\n        getLabel,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings<{\n        x: number\n        y: number\n        opacity: number\n    }>(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        data-testid={`label.${position}.${label.serie.id}`}\n                        key={label.id}\n                        x={animatedProps.x}\n                        y={animatedProps.y}\n                        textAnchor={label.textAnchor}\n                        dominantBaseline=\"central\"\n                        opacity={animatedProps.opacity}\n                        style={{\n                            ...theme.labels.text,\n                            fill: label.color,\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n","import { createElement } from 'react'\nimport { BumpDatum, BumpPoint, BumpPointComponent, BumpSerieExtraProps } from './types'\n\ninterface PointsProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    points: BumpPoint<Datum, ExtraProps>[]\n    pointComponent: BumpPointComponent<Datum, ExtraProps>\n}\n\nexport const Points = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    points,\n    pointComponent,\n}: PointsProps<Datum, ExtraProps>) => (\n    <>\n        {points.map(point =>\n            createElement(pointComponent, {\n                key: point.id,\n                point,\n            })\n        )}\n    </>\n)\n","import { createElement, useMemo, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport {\n    BumpCustomLayerProps,\n    BumpDatum,\n    BumpLayerId,\n    BumpSerieExtraProps,\n    BumpSvgProps,\n    DefaultBumpDatum,\n} from './types'\nimport { useBump } from './hooks'\nimport { bumpSvgDefaultProps } from './defaults'\nimport { Line } from './Line'\nimport { LinesLabels } from './LinesLabels'\nimport { Points } from './Points'\n\ntype InnerBumpProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> = Omit<\n    BumpSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBump = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    data,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    layers = bumpSvgDefaultProps.layers as NonNullable<BumpSvgProps<Datum, ExtraProps>['layers']>,\n\n    interpolation = bumpSvgDefaultProps.interpolation,\n    xPadding = bumpSvgDefaultProps.xPadding,\n    xOuterPadding = bumpSvgDefaultProps.xOuterPadding,\n    yOuterPadding = bumpSvgDefaultProps.yOuterPadding,\n\n    colors = bumpSvgDefaultProps.colors as NonNullable<BumpSvgProps<Datum, ExtraProps>['colors']>,\n    lineWidth = bumpSvgDefaultProps.lineWidth,\n    activeLineWidth = bumpSvgDefaultProps.activeLineWidth,\n    inactiveLineWidth = bumpSvgDefaultProps.inactiveLineWidth,\n    opacity = bumpSvgDefaultProps.opacity,\n    activeOpacity = bumpSvgDefaultProps.activeOpacity,\n    inactiveOpacity = bumpSvgDefaultProps.inactiveOpacity,\n\n    startLabel = bumpSvgDefaultProps.startLabel as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['startLabel']\n    >,\n    startLabelPadding = bumpSvgDefaultProps.startLabelPadding,\n    startLabelTextColor = bumpSvgDefaultProps.startLabelTextColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['startLabelTextColor']\n    >,\n    endLabel = bumpSvgDefaultProps.endLabel as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['endLabel']\n    >,\n    endLabelPadding = bumpSvgDefaultProps.endLabelPadding,\n    endLabelTextColor = bumpSvgDefaultProps.endLabelTextColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['endLabelTextColor']\n    >,\n\n    pointComponent = bumpSvgDefaultProps.pointComponent as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointComponent']\n    >,\n    pointSize = bumpSvgDefaultProps.pointSize,\n    activePointSize = bumpSvgDefaultProps.activePointSize,\n    inactivePointSize = bumpSvgDefaultProps.inactivePointSize,\n    pointColor = bumpSvgDefaultProps.pointColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointColor']\n    >,\n    pointBorderWidth = bumpSvgDefaultProps.pointBorderWidth,\n    activePointBorderWidth = bumpSvgDefaultProps.activePointBorderWidth,\n    inactivePointBorderWidth = bumpSvgDefaultProps.inactivePointBorderWidth,\n    pointBorderColor = bumpSvgDefaultProps.pointBorderColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointBorderColor']\n    >,\n\n    enableGridX = bumpSvgDefaultProps.enableGridX,\n    enableGridY = bumpSvgDefaultProps.enableGridY,\n    axisTop = bumpSvgDefaultProps.axisTop,\n    axisRight,\n    axisBottom = bumpSvgDefaultProps.axisBottom,\n    axisLeft = bumpSvgDefaultProps.axisLeft,\n\n    isInteractive = bumpSvgDefaultProps.isInteractive,\n    defaultActiveSerieIds = bumpSvgDefaultProps.defaultActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = bumpSvgDefaultProps.tooltip as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['tooltip']\n    >,\n    role = bumpSvgDefaultProps.role,\n}: InnerBumpProps<Datum, ExtraProps>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { series, points, xScale, yScale, lineGenerator, activeSerieIds, setActiveSerieIds } =\n        useBump<Datum, ExtraProps>({\n            width: innerWidth,\n            height: innerHeight,\n            data,\n            interpolation,\n            xPadding,\n            xOuterPadding,\n            yOuterPadding,\n            lineWidth,\n            activeLineWidth,\n            inactiveLineWidth,\n            colors,\n            opacity,\n            activeOpacity,\n            inactiveOpacity,\n            pointSize,\n            activePointSize,\n            inactivePointSize,\n            pointColor,\n            pointBorderWidth,\n            activePointBorderWidth,\n            inactivePointBorderWidth,\n            pointBorderColor,\n            isInteractive,\n            defaultActiveSerieIds,\n        })\n\n    const layerById: Record<BumpLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        labels: null,\n        lines: null,\n        points: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('lines')) {\n        layerById.lines = (\n            <Fragment key=\"lines\">\n                {series.map(serie => (\n                    <Line<Datum, ExtraProps>\n                        key={serie.id}\n                        serie={serie}\n                        setActiveSerieIds={setActiveSerieIds}\n                        lineGenerator={lineGenerator}\n                        yStep={yScale.step()}\n                        isInteractive={isInteractive}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('points')) {\n        layerById.points = (\n            <Points<Datum, ExtraProps>\n                key=\"points\"\n                pointComponent={pointComponent}\n                points={points}\n            />\n        )\n    }\n\n    if (layers.includes('labels')) {\n        layerById.labels = (\n            <Fragment key=\"legends\">\n                {startLabel !== false && (\n                    <LinesLabels<Datum, ExtraProps>\n                        series={series}\n                        getLabel={startLabel}\n                        position=\"start\"\n                        padding={startLabelPadding}\n                        color={startLabelTextColor}\n                    />\n                )}\n                {endLabel !== false && (\n                    <LinesLabels<Datum, ExtraProps>\n                        series={series}\n                        getLabel={endLabel}\n                        position=\"end\"\n                        padding={endLabelPadding}\n                        color={endLabelTextColor}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    const customLayerProps: BumpCustomLayerProps<Datum, ExtraProps> = useMemo(\n        () => ({\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            xScale,\n            yScale,\n            activeSerieIds,\n            setActiveSerieIds,\n        }),\n        [\n            activeSerieIds,\n            setActiveSerieIds,\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            xScale,\n            yScale,\n        ]\n    )\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>({\n    isInteractive = bumpSvgDefaultProps.isInteractive,\n    animate = bumpSvgDefaultProps.animate,\n    motionConfig = bumpSvgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BumpSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBump<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { BumpDatum, BumpSerieExtraProps, BumpSvgProps, DefaultBumpDatum } from './types'\nimport { Bump } from './Bump'\n\nexport const ResponsiveBump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>(\n    props: Omit<BumpSvgProps<Datum, ExtraProps>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <Bump<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { createElement, useMemo, useCallback, useState } from 'react'\nimport { area as d3Area, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { computeSeries } from './compute'\nimport {\n    AreaBumpAreaPoint,\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDataProps,\n    AreaBumpDatum,\n    AreaBumpInterpolation,\n    AreaBumpLabel,\n    AreaBumpLabelData,\n    AreaBumpSerieExtraProps,\n    DefaultAreaBumpDatum,\n} from './types'\n\nconst useAreaBumpSeries = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n}) =>\n    useMemo(\n        () => computeSeries<Datum, ExtraProps>({ data, width, height, align, spacing, xPadding }),\n        [data, width, height, align, spacing, xPadding]\n    )\n\nconst useAreaGenerator = (interpolation: AreaBumpInterpolation) =>\n    useMemo(\n        () =>\n            d3Area<AreaBumpAreaPoint>()\n                .x(d => d.x)\n                .y0(d => d.y0)\n                .y1(d => d.y1)\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear),\n        [interpolation]\n    )\n\nconst useSerieDerivedProp = <Target, Output extends string | number>(\n    instruction: ((target: Target) => Output) | Output\n): ((target: Target) => Output) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useSerieStyle = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    activeSerieIds,\n}: {\n    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['fillOpacity']\n    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeFillOpacity']\n    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveFillOpacity']\n    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>['borderWidth']\n    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderWidth']\n    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderWidth']\n    borderColor: AreaBumpCommonProps<Datum, ExtraProps>['borderColor']\n    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['borderOpacity']\n    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderOpacity']\n    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderOpacity']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Serie = Omit<\n        AreaBumpComputedSerie<Datum, ExtraProps>,\n        'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n    >\n\n    const getFillOpacity = useSerieDerivedProp<Serie, number>(fillOpacity)\n    const getActiveFillOpacity = useSerieDerivedProp<Serie, number>(activeFillOpacity)\n    const getInactiveFillOpacity = useSerieDerivedProp<Serie, number>(inactiveFillOpacity)\n\n    const getBorderWidth = useSerieDerivedProp<Serie, number>(borderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp<Serie, number>(activeBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp<Serie, number>(inactiveBorderWidth)\n\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const getBorderOpacity = useSerieDerivedProp<Serie, number>(borderOpacity)\n    const getActiveBorderOpacity = useSerieDerivedProp<Serie, number>(activeBorderOpacity)\n    const getInactiveBorderOpacity = useSerieDerivedProp<Serie, number>(inactiveBorderOpacity)\n\n    const getNormalStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getFillOpacity(serie),\n            borderWidth: getBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getBorderOpacity(serie),\n        }),\n        [getFillOpacity, getBorderWidth, getBorderColor, getBorderOpacity]\n    )\n    const getActiveStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getActiveFillOpacity(serie),\n            borderWidth: getActiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getActiveBorderOpacity(serie),\n        }),\n        [getActiveFillOpacity, getActiveBorderWidth, getBorderColor, getActiveBorderOpacity]\n    )\n    const getInactiveStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getInactiveFillOpacity(serie),\n            borderWidth: getInactiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getInactiveBorderOpacity(serie),\n        }),\n        [getInactiveFillOpacity, getInactiveBorderWidth, getBorderColor, getInactiveBorderOpacity]\n    )\n\n    return useCallback(\n        (serie: Serie) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(serie)\n            if (activeSerieIds.includes(serie.id)) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nexport const useAreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n    interpolation,\n    colors,\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    defaultActiveSerieIds,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n    interpolation: AreaBumpCommonProps<Datum, ExtraProps>['interpolation']\n    colors: AreaBumpCommonProps<Datum, ExtraProps>['colors']\n    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['fillOpacity']\n    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeFillOpacity']\n    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveFillOpacity']\n    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>['borderWidth']\n    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderWidth']\n    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderWidth']\n    borderColor: AreaBumpCommonProps<Datum, ExtraProps>['borderColor']\n    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['borderOpacity']\n    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderOpacity']\n    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderOpacity']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    defaultActiveSerieIds: string[]\n}) => {\n    const [activeSerieIds, setActiveSerieIds] = useState<string[]>(defaultActiveSerieIds)\n\n    const {\n        series: rawSeries,\n        xScale,\n        heightScale,\n    } = useAreaBumpSeries<Datum, ExtraProps>({\n        data,\n        width,\n        height,\n        align,\n        spacing,\n        xPadding,\n    })\n\n    const areaGenerator = useAreaGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle<Datum, ExtraProps>({\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        activeSerieIds,\n    })\n\n    const series: AreaBumpComputedSerie<Datum, ExtraProps>[] = useMemo(\n        () =>\n            rawSeries.map(serie => {\n                const serieWithColor = {\n                    ...serie,\n                    color: getColor(serie.data),\n                }\n\n                return {\n                    ...serieWithColor,\n                    ...getSerieStyle(serieWithColor),\n                }\n            }),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    return {\n        series,\n        xScale,\n        heightScale,\n        areaGenerator,\n        activeSerieIds,\n        setActiveSerieIds,\n    }\n}\n\nexport const useAreaBumpSerieHandlers = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: AreaBumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: AreaBumpCommonProps<Datum, ExtraProps>['tooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setActiveSerieIds([serie.id])\n            onMouseEnter && onMouseEnter(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setActiveSerieIds, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove && onMouseMove(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useAreaBumpSeriesLabels = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    series,\n    position,\n    padding,\n    color,\n    getLabel,\n}: {\n    series: AreaBumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>\n    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>\n}): AreaBumpLabelData<Datum, ExtraProps>[] => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor: 'start' | 'end'\n        let signedPadding: number\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        return series.map(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie.data)\n            }\n\n            const point =\n                position === 'start' ? serie.points[0] : serie.points[serie.points.length - 1]\n\n            return {\n                id: serie.id,\n                label,\n                x: point.x + signedPadding,\n                y: point.y,\n                color: getColor(serie),\n                opacity: serie.fillOpacity,\n                serie,\n                textAnchor,\n            }\n        })\n    }, [getLabel, series, position, padding, getColor])\n}\n","import { scalePoint, scaleLinear } from 'd3-scale'\nimport { castPointScale, castLinearScale, ScalePoint, ScaleLinear } from '@nivo/scales'\nimport {\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDataProps,\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n}): {\n    series: Omit<\n        AreaBumpComputedSerie<Datum, ExtraProps>,\n        'color' | 'fill' | 'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n    >[]\n    xScale: ScalePoint<Datum['x']>\n    heightScale: ScaleLinear<number>\n} => {\n    const slices = new Map<\n        Datum['x'],\n        {\n            id: Datum['x']\n            total: number\n            x: number\n            values: Map<\n                string,\n                {\n                    serieId: string\n                    value: number\n                    position: number\n                    height: number\n                    beforeHeight: number\n                }\n            >\n        }\n    >()\n\n    let maxSum: number\n    let maxValues: number\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            if (!slices.has(datum.x)) {\n                slices.set(datum.x, {\n                    id: datum.x,\n                    total: 0,\n                    values: new Map(),\n                    x: 0,\n                })\n            }\n\n            const slice = slices.get(datum.x)!\n\n            const total = slice.total + datum.y\n            slice.total = total\n\n            slice.values.set(serie.id, {\n                serieId: serie.id,\n                value: datum.y,\n                position: 0,\n                height: 0,\n                beforeHeight: 0,\n            })\n\n            if (maxSum === undefined || total > maxSum) {\n                maxSum = total\n            }\n            if (maxValues === undefined || slice.values.size > maxValues) {\n                maxValues = slice.values.size\n            }\n        })\n    })\n\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(Array.from(slices.keys())).range([0, width])\n    )\n\n    const heightScale = castLinearScale<number, number>(\n        scaleLinear<number, number>()\n            .domain([0, maxSum!])\n            .range([0, height - maxValues! * spacing])\n    )\n\n    slices.forEach((slice, x) => {\n        slice.x = xScale(x)!\n        const sliceHeight = heightScale(slice.total) + slice.values.size * spacing\n\n        let offset = 0\n        if (align === 'middle') {\n            offset = (height - sliceHeight) / 2\n        } else if (align === 'end') {\n            offset = height - sliceHeight\n        }\n\n        Array.from(slice.values.values())\n            .sort((a, b) => b.value - a.value)\n            .forEach((value, position, all) => {\n                const previousValues = all.filter((_i, pos) => pos < position)\n                const beforeValue = previousValues.reduce((t, v) => t + v.value, 0)\n\n                const sliceValue = slice.values.get(value.serieId)!\n                sliceValue.position = position\n                sliceValue.height = heightScale(value.value)\n                sliceValue.beforeHeight =\n                    heightScale(beforeValue) + offset + spacing * (previousValues.length + 0.5)\n            })\n    })\n\n    const areaPointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series = data.map(serie => {\n        const computedSerie: Omit<\n            AreaBumpComputedSerie<Datum, ExtraProps>,\n            'color' | 'fill' | 'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n        > = {\n            id: serie.id,\n            data: serie,\n            points: [],\n            areaPoints: [],\n        }\n\n        serie.data.forEach((datum, i) => {\n            const slice = slices.get(datum.x)!\n            const position = slice.values.get(serie.id)!\n\n            const x = slice.x\n            const { beforeHeight, height } = position\n            const y = beforeHeight + height / 2\n            const y0 = beforeHeight\n            const y1 = beforeHeight + height\n\n            computedSerie.points.push({\n                x,\n                y,\n                height,\n                data: { ...datum },\n            })\n            if (i > 0) {\n                computedSerie.areaPoints.push({ x: x - areaPointPadding, y0, y1 })\n            }\n            computedSerie.areaPoints.push({ x, y0, y1 })\n            if (i < serie.data.length - 1) {\n                computedSerie.areaPoints.push({ x: x + areaPointPadding, y0, y1 })\n            }\n        })\n\n        return computedSerie\n    })\n\n    return {\n        series,\n        xScale,\n        heightScale,\n    }\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { useAreaBumpSerieHandlers } from './hooks'\nimport {\n    AreaBumpAreaGenerator,\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n} from './types'\n\ninterface AreaProps<Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n    areaGenerator: AreaBumpAreaGenerator\n    blendMode: AreaBumpCommonProps<Datum, ExtraProps>['blendMode']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: AreaBumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: AreaBumpCommonProps<Datum, ExtraProps>['tooltip']\n}\n\nexport const Area = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    serie,\n    areaGenerator,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: AreaProps<Datum, ExtraProps>) => {\n    const handlers = useAreaBumpSerieHandlers<Datum, ExtraProps>({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setActiveSerieIds,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(areaGenerator(serie.areaPoints) || '')\n    const animatedProps = useSpring<{\n        color: string\n        fillOpacity: number\n        stroke: string\n        strokeOpacity: number\n    }>({\n        color: serie.color,\n        fillOpacity: serie.fillOpacity,\n        stroke: serie.borderColor,\n        strokeOpacity: serie.borderOpacity,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            data-testid={`area.${serie.id}`}\n            d={animatedPath}\n            fill={serie.fill ? serie.fill : animatedProps.color}\n            fillOpacity={animatedProps.fillOpacity}\n            stroke={animatedProps.stroke}\n            strokeWidth={serie.borderWidth}\n            strokeOpacity={animatedProps.strokeOpacity}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={handlers.onMouseEnter}\n            onMouseMove={handlers.onMouseMove}\n            onMouseLeave={handlers.onMouseLeave}\n            onClick={handlers.onClick}\n        />\n    )\n}\n","import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport {\n    AreaBumpComputedSerie,\n    AreaBumpDatum,\n    AreaBumpLabel,\n    AreaBumpSerieExtraProps,\n} from './types'\nimport { useAreaBumpSeriesLabels } from './hooks'\n\ninterface AreaLabelsProps<Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps> {\n    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>\n    series: AreaBumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>\n}\n\nexport const AreasLabels = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    getLabel,\n    series,\n    position,\n    padding,\n    color,\n}: AreaLabelsProps<Datum, ExtraProps>) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useAreaBumpSeriesLabels<Datum, ExtraProps>({\n        getLabel,\n        series,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings<{\n        x: number\n        y: number\n        opacity: number\n    }>(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        data-testid={`label.${position}.${label.serie.id}`}\n                        key={label.id}\n                        x={animatedProps.x}\n                        y={animatedProps.y}\n                        textAnchor={label.textAnchor}\n                        dominantBaseline=\"central\"\n                        opacity={animatedProps.opacity}\n                        style={{\n                            ...theme.labels.text,\n                            fill: label.color,\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n","import { ModernMotionProps, SvgDefsAndFill } from '@nivo/core'\nimport { AreaBumpCommonProps, AreaBumpComputedSerie, DefaultAreaBumpDatum } from './types'\nimport { AreaTooltip } from './AreaTooltip'\n\nconst commonDefaultProps: Omit<\n    AreaBumpCommonProps<DefaultAreaBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'margin'\n    | 'theme'\n    | 'renderWrapper'\n> = {\n    align: 'middle',\n\n    layers: ['grid', 'axes', 'labels', 'areas'],\n\n    interpolation: 'smooth',\n    spacing: 0,\n    xPadding: 0.6,\n\n    colors: { scheme: 'nivo' },\n    blendMode: 'normal',\n    fillOpacity: 0.8,\n    activeFillOpacity: 1,\n    inactiveFillOpacity: 0.15,\n    borderWidth: 1,\n    activeBorderWidth: 1,\n    inactiveBorderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 0.4]] },\n    borderOpacity: 1,\n    activeBorderOpacity: 1,\n    inactiveBorderOpacity: 0,\n\n    startLabel: false,\n    startLabelPadding: 12,\n    startLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    endLabel: true,\n    endLabelPadding: 12,\n    endLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    enableGridX: true,\n    axisTop: {},\n    axisBottom: {},\n\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    tooltip: AreaTooltip,\n\n    role: 'img',\n}\n\nexport const areaBumpSvgDefaultProps: typeof commonDefaultProps &\n    SvgDefsAndFill<AreaBumpComputedSerie<DefaultAreaBumpDatum, Record<string, unknown>>> & {\n        animate: boolean\n        motionConfig: ModernMotionProps['motionConfig']\n    } = {\n    ...commonDefaultProps,\n    defs: [],\n    fill: [],\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { AreaBumpDatum, AreaBumpComputedSerie, AreaBumpSerieExtraProps } from './types'\n\ninterface AreaTooltipProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const AreaTooltip = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    serie,\n}: AreaTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip id={serie.id} enableChip={true} color={serie.color} />\n)\n","import { Fragment, useMemo, ReactNode, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    SvgWrapper,\n    Container,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { useAreaBump } from './hooks'\nimport { Area } from './Area'\nimport { AreasLabels } from './AreasLabels'\nimport {\n    AreaBumpSvgProps,\n    AreaBumpDatum,\n    DefaultAreaBumpDatum,\n    AreaBumpLayerId,\n    AreaBumpCustomLayerProps,\n    AreaBumpSerieExtraProps,\n} from './types'\nimport { areaBumpSvgDefaultProps } from './defaults'\n\ntype InnerAreaBumpProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n> = Omit<\n    AreaBumpSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerAreaBump = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    data,\n    align = areaBumpSvgDefaultProps.align,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    layers = areaBumpSvgDefaultProps.layers as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['layers']\n    >,\n\n    interpolation = areaBumpSvgDefaultProps.interpolation,\n    spacing = areaBumpSvgDefaultProps.spacing,\n    xPadding = areaBumpSvgDefaultProps.xPadding,\n\n    colors = areaBumpSvgDefaultProps.colors as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['colors']\n    >,\n    blendMode = areaBumpSvgDefaultProps.blendMode,\n    fillOpacity = areaBumpSvgDefaultProps.fillOpacity,\n    activeFillOpacity = areaBumpSvgDefaultProps.activeFillOpacity,\n    inactiveFillOpacity = areaBumpSvgDefaultProps.inactiveFillOpacity,\n    defs = areaBumpSvgDefaultProps.defs,\n    fill = areaBumpSvgDefaultProps.fill as NonNullable<AreaBumpSvgProps<Datum, ExtraProps>['fill']>,\n    borderWidth = areaBumpSvgDefaultProps.borderWidth,\n    activeBorderWidth = areaBumpSvgDefaultProps.activeBorderWidth,\n    inactiveBorderWidth = areaBumpSvgDefaultProps.inactiveBorderWidth,\n    borderColor = areaBumpSvgDefaultProps.borderColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['borderColor']\n    >,\n    borderOpacity = areaBumpSvgDefaultProps.borderOpacity,\n    activeBorderOpacity = areaBumpSvgDefaultProps.activeBorderOpacity,\n    inactiveBorderOpacity = areaBumpSvgDefaultProps.inactiveBorderOpacity,\n\n    startLabel = areaBumpSvgDefaultProps.startLabel as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['startLabel']\n    >,\n    startLabelPadding = areaBumpSvgDefaultProps.startLabelPadding,\n    startLabelTextColor = areaBumpSvgDefaultProps.startLabelTextColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['startLabelTextColor']\n    >,\n    endLabel = areaBumpSvgDefaultProps.endLabel as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['endLabel']\n    >,\n    endLabelPadding = areaBumpSvgDefaultProps.endLabelPadding,\n    endLabelTextColor = areaBumpSvgDefaultProps.endLabelTextColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['endLabelTextColor']\n    >,\n\n    enableGridX = areaBumpSvgDefaultProps.enableGridX,\n    axisTop = areaBumpSvgDefaultProps.axisTop,\n    axisBottom = areaBumpSvgDefaultProps.axisBottom,\n\n    isInteractive = areaBumpSvgDefaultProps.isInteractive,\n    defaultActiveSerieIds = areaBumpSvgDefaultProps.defaultActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = areaBumpSvgDefaultProps.tooltip as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['tooltip']\n    >,\n    role = areaBumpSvgDefaultProps.role,\n}: InnerAreaBumpProps<Datum, ExtraProps>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { series, xScale, heightScale, areaGenerator, setActiveSerieIds } = useAreaBump<\n        Datum,\n        ExtraProps\n    >({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        align,\n        spacing,\n        xPadding,\n        interpolation,\n        colors,\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        defaultActiveSerieIds,\n    })\n\n    const boundDefs = useMemo(\n        () => bindDefs(defs, series, fill, { targetKey: 'fill' }),\n        [defs, series, fill]\n    )\n\n    const layerById: Record<AreaBumpLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        labels: null,\n        areas: null,\n    }\n\n    if (layers.includes('grid') && enableGridX) {\n        layerById.grid = <Grid key=\"grid\" width={innerWidth} height={innerHeight} xScale={xScale} />\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={heightScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                bottom={axisBottom}\n            />\n        )\n    }\n\n    if (layers.includes('areas')) {\n        layerById.areas = (\n            <Fragment key=\"areas\">\n                {series.map(serie => (\n                    <Area<Datum, ExtraProps>\n                        key={serie.id}\n                        areaGenerator={areaGenerator}\n                        serie={serie}\n                        blendMode={blendMode}\n                        isInteractive={isInteractive}\n                        setActiveSerieIds={setActiveSerieIds}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('labels')) {\n        layerById.labels = (\n            <Fragment key=\"labels\">\n                {startLabel !== false && (\n                    <AreasLabels<Datum, ExtraProps>\n                        getLabel={startLabel}\n                        series={series}\n                        position=\"start\"\n                        padding={startLabelPadding}\n                        color={startLabelTextColor}\n                    />\n                )}\n                {endLabel !== false && (\n                    <AreasLabels<Datum, ExtraProps>\n                        getLabel={endLabel}\n                        series={series}\n                        position=\"end\"\n                        padding={endLabelPadding}\n                        color={endLabelTextColor}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    const customLayerProps: AreaBumpCustomLayerProps<Datum, ExtraProps> = useMemo(\n        () => ({\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            series,\n            xScale,\n            areaGenerator,\n        }),\n        [innerWidth, innerHeight, outerWidth, outerHeight, series, xScale, areaGenerator]\n    )\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const AreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>({\n    isInteractive = areaBumpSvgDefaultProps.isInteractive,\n    animate = areaBumpSvgDefaultProps.animate,\n    motionConfig = areaBumpSvgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: AreaBumpSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerAreaBump<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport {\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n    AreaBumpSvgProps,\n    DefaultAreaBumpDatum,\n} from './types'\nimport { AreaBump } from './AreaBump'\n\nexport const ResponsiveAreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>(\n    props: Omit<AreaBumpSvgProps<Datum, ExtraProps>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <AreaBump<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["useSerieDerivedProp","useMemo","instruction","useBump","width","height","data","interpolation","xPadding","xOuterPadding","yOuterPadding","lineWidth","activeLineWidth","inactiveLineWidth","colors","opacity","activeOpacity","inactiveOpacity","pointSize","activePointSize","inactivePointSize","pointColor","pointBorderWidth","activePointBorderWidth","inactivePointBorderWidth","pointBorderColor","isInteractive","defaultActiveSerieIds","useState","activeSerieIds","setActiveSerieIds","xValuesSet","yValuesSet","serie","datum","xValues","Array","xScale","castPointScale","scalePoint","yValues","a","yScale","linePointPadding","Math","series","rawSerie","id","points","linePoints","x","y","point","i","computeSeries","rawSeries","lineGenerator","d","useLineGenerator","getColor","useOrdinalColorScale","getSerieStyle","getLineWidth","getActiveLineWidth","getInactiveLineWidth","getOpacity","getActiveOpacity","getInactiveOpacity","getNormalStyle","useCallback","getActiveStyle","getInactiveStyle","useSerieStyle","color","theme","useTheme","getPointColor","useInheritedColor","getPointBorderColor","getPointStyle","getSize","getActiveSize","getInactiveSize","getBorderWidth","getActiveBorderWidth","getInactiveBorderWidth","size","borderWidth","usePointStyle","pts","rawPoint","isActive","isInactive","pointStyle","pointerEvents","bumpSvgDefaultProps","layers","scheme","startLabel","startLabelPadding","startLabelTextColor","from","endLabel","endLabelPadding","endLabelTextColor","modifiers","enableGridX","enableGridY","axisTop","axisBottom","axisLeft","tooltip","enableChip","role","pointComponent","useMotionConfig","animate","springConfig","animatedProps","useSpring","radius","config","immediate","cx","cy","r","to","v","fill","strokeWidth","stroke","style","motionConfig","Line","yStep","handlers","onMouseEnter","onMouseMove","onMouseLeave","onClick","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleClick","undefined","useBumpSerieHandlers","linePath","animatedPath","useAnimatedPath","strokeLinecap","strokeOpacity","LinesLabels","getLabel","position","padding","labels","textAnchor","signedPadding","label","useBumpSeriesLabels","springs","useSprings","dominantBaseline","Points","key","InnerBump","partialMargin","margin","axisRight","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","layerById","grid","axes","lines","top","right","bottom","left","customLayerProps","layer","Bump","renderWrapper","otherProps","ResponsiveBump","useAreaBumpSeries","align","spacing","slices","total","values","slice","serieId","value","beforeHeight","maxSum","maxValues","heightScale","castLinearScale","scaleLinear","sliceHeight","offset","b","previousValues","all","pos","beforeValue","t","sliceValue","areaPointPadding","computedSerie","areaPoints","y0","y1","useAreaBump","fillOpacity","activeFillOpacity","inactiveFillOpacity","activeBorderWidth","inactiveBorderWidth","borderColor","borderOpacity","activeBorderOpacity","inactiveBorderOpacity","areaGenerator","useAreaGenerator","getFillOpacity","getActiveFillOpacity","getInactiveFillOpacity","getBorderColor","getBorderOpacity","getActiveBorderOpacity","getInactiveBorderOpacity","serieWithColor","Area","blendMode","useAreaBumpSerieHandlers","mixBlendMode","AreasLabels","useAreaBumpSeriesLabels","areaBumpSvgDefaultProps","defs","InnerAreaBump","boundDefs","bindDefs","targetKey","areas","AreaBump","ResponsiveAreaBump"],"sourceRoot":""}