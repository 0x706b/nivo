{"version":3,"sources":["webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack:///../src/props.ts","webpack:///../src/SwarmPlotTooltip.tsx","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///../src/compute.ts","webpack:///../src/hooks.ts","webpack:///../src/Circles.tsx","webpack:///../src/CircleSvg.tsx","webpack:///../src/SwarmPlotAnnotations.tsx","webpack:///../src/SwarmPlot.tsx","webpack:///../src/ResponsiveSwarmPlot.tsx","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///../src/SwarmPlotCanvas.tsx","webpack:///../src/ResponsiveSwarmPlotCanvas.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","defaultProps","id","value","valueScale","type","min","max","groupBy","size","spacing","layout","gap","forceStrength","simulationIterations","colors","scheme","colorBy","borderWidth","borderColor","layers","enableGridX","enableGridY","axisTop","axisRight","axisBottom","axisLeft","isInteractive","useMesh","debugMesh","tooltip","formattedValue","color","enableChip","animate","motionConfig","annotations","role","pixelRatio","window","_defineProperty","obj","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","forEach","getOwnPropertyDescriptors","defineProperties","_arrayLikeToArray","arr","len","arr2","Array","_unsupportedIterableToArray","o","minLen","arrayLikeToArray","n","toString","slice","constructor","name","from","test","_toConsumableArray","isArray","arrayWithoutHoles","iter","Symbol","iterator","iterableToArray","unsupportedIterableToArray","TypeError","nonIterableSpread","computeNodes","scaleSpec","data","getId","getValue","getGroup","ordinalScale","getSize","forces","valueScaleConfig","config","horizontal","vertical","parseValue","createDateNormalizer","simulatedNodes","d","group","simulation","forceSimulation","useValueScale","width","height","axis","scale","useMemo","values","series","x","y","axes","generateSeriesAxis","computeScale","Math","all","computeValueScale","useOrdinalScale","groups","groupCount","groupSize","range","scaleOrdinal","computeOrdinalScale","useSize","isNumber","isPlainObject","isString","sizeScale","scaleLinear","get","getSizeGenerator","useForces","collisionForce","forceCollide","xForce","yForce","forceY","forceX","collision","computeForces","useSwarmPlot","valueFormat","usePropertyAccessor","formatValue","useValueFormatter","getColorId","getColor","useOrdinalColorScale","nodes","xScale","yScale","node","getNodeAnnotationPosition","getNodeAnnotationDimensions","Circles","component","onMouseEnter","onMouseMove","onMouseLeave","onClick","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","handleClick","useMotionConfig","springConfig","theme","useTheme","getBorderWidth","useBorderWidth","getBorderColor","useInheritedColor","transitionPhases","enter","radius","opacity","update","leave","getTransitionPhases","transition","useTransition","initial","immediate","style","radiusValue","transitionProps","to","CircleSvg","cx","cy","r","fill","stroke","strokeWidth","event","SwarmPlotAnnotations","boundAnnotations","useAnnotations","getPosition","getDimensions","useSwarmPlotAnnotations","InnerSwarmPlot","partialMargin","margin","circleComponent","gridXValues","gridYValues","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","props","handlers","useCallback","useNodeMouseHandlers","layerById","grid","circles","mesh","xValues","yValues","top","right","bottom","left","undefined","debug","layerContext","useSwarmPlotLayerContext","layer","SwarmPlot","renderWrapper","otherProps","ResponsiveSwarmPlot","_slicedToArray","arrayWithHoles","_arr","_n","_d","_e","_s","_i","next","done","err","iterableToArrayLimit","nonIterableRest","renderCircleDefault","nodeBorderWidth","ctx","InnerSwarmPlotCanvas","renderCircle","canvasEl","useRef","useState","currentNode","setCurrentNode","useVoronoiMesh","points","delaunay","voronoi","useEffect","renderGridLinesToCanvas","renderAxesToCanvas","renderVoronoiToCanvas","renderVoronoiCellToCanvas","getNodeFromMouseEvent","getRelativeCursor","isCursorInRect","nodeIndex","showNodeTooltip","handleMouseHover","ref","cursor","SwarmPlotCanvas","ResponsiveSwarmPlotCanvas"],"mappings":"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","file":"e76ad3aa5e029db5a9a58e7d82c20bea9226a7c2-9a0b9e15f5da8ffa719b.js","sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { ScaleLinearSpec } from '@nivo/scales'\nimport { SwarmPlotLayerId } from './types'\nimport { SwarmPlotTooltip } from './SwarmPlotTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    valueScale: { type: 'linear', min: 0, max: 'auto' } as ScaleLinearSpec,\n    groupBy: 'group',\n    size: 6,\n    spacing: 2,\n    layout: 'vertical' as const,\n    gap: 0,\n    forceStrength: 1,\n    simulationIterations: 120,\n    colors: { scheme: 'nivo' },\n    colorBy: 'group',\n    borderWidth: 0,\n    borderColor: 'rgba(0, 0, 0, 0)',\n    layers: ['grid', 'axes', 'circles', 'annotations', 'mesh'] as SwarmPlotLayerId[],\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisRight: {},\n    axisBottom: {},\n    axisLeft: {},\n    isInteractive: true,\n    useMesh: false,\n    debugMesh: false,\n    tooltip: SwarmPlotTooltip,\n    animate: true,\n    motionConfig: 'gentle',\n    annotations: [],\n    role: 'img',\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import React from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const SwarmPlotTooltip = <RawDatum,>({\n    id,\n    formattedValue,\n    color,\n}: ComputedDatum<RawDatum>) => (\n    <BasicTooltip id={id} value={formattedValue} enableChip={true} color={color} />\n)\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport isString from 'lodash/isString'\nimport get from 'lodash/get'\nimport { scaleLinear, ScaleOrdinal, scaleOrdinal } from 'd3-scale'\nimport { forceSimulation, forceX, forceY, forceCollide, ForceX, ForceY } from 'd3-force'\nimport {\n    computeScale,\n    createDateNormalizer,\n    generateSeriesAxis,\n    ScaleLinear,\n    ScaleLinearSpec,\n    ScaleTime,\n    ScaleTimeSpec,\n} from '@nivo/scales'\nimport { ComputedDatum, PreSimulationDatum, SizeSpec, SimulationForces } from './types'\n\nconst getParsedValue = (scaleSpec: ScaleLinearSpec | ScaleTimeSpec) => {\n    if (scaleSpec.type === 'time' && scaleSpec.format !== 'native') {\n        return createDateNormalizer(scaleSpec) as <T>(value: T) => T\n    }\n\n    return <T>(value: T) => value\n}\n\nexport const computeOrdinalScale = ({\n    width,\n    height,\n    axis,\n    groups,\n    gap,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    groups: string[]\n    gap: number\n}) => {\n    if (!Array.isArray(groups) || groups.length === 0) {\n        throw new Error(`'groups' should be an array containing at least one item`)\n    }\n\n    const groupCount = groups.length\n\n    let groupSize: number\n    if (axis === 'x') {\n        groupSize = (height - gap * (groupCount - 1)) / groupCount\n    } else if (axis === 'y') {\n        groupSize = (width - gap * (groupCount - 1)) / groupCount\n    }\n\n    const range = groups.map((_, i) => i * (groupSize + gap) + groupSize / 2)\n\n    return scaleOrdinal(range).domain(groups)\n}\n\nexport const computeValueScale = <RawDatum>({\n    width,\n    height,\n    axis,\n    getValue,\n    scale,\n    data,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    getValue: (datum: RawDatum) => number | Date\n    scale: ScaleLinearSpec | ScaleTimeSpec\n    data: RawDatum[]\n}) => {\n    const values = data.map(getValue)\n\n    if (scale.type === 'time') {\n        const series = [\n            { data: values.map(value => ({ data: { x: null, y: null, [axis]: value } })) },\n        ]\n        const axes = generateSeriesAxis(series, axis, scale)\n\n        return computeScale(scale, axes, axis === 'x' ? width : height, axis) as ScaleTime<\n            Date | string\n        >\n    }\n\n    const min = Math.min(...(values as number[]))\n    const max = Math.max(...(values as number[]))\n\n    return computeScale(\n        scale,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    ) as ScaleLinear<number>\n}\n\nexport const getSizeGenerator = <RawDatum>(size: SizeSpec<RawDatum>) => {\n    // user defined size function\n    if (typeof size === 'function') {\n        return size\n    }\n\n    // static size\n    if (isNumber(size)) {\n        return () => size\n    }\n\n    // dynamic size based on config\n    if (isPlainObject(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'Size is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'Size is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'Size is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return (d: RawDatum) => sizeScale(get(d, size.key))\n    }\n\n    throw new Error('Size is invalid, it should be either a function, a number or an object')\n}\n\nexport const computeForces = <RawDatum>({\n    axis,\n    valueScale,\n    ordinalScale,\n    spacing,\n    forceStrength,\n}: {\n    axis: 'x' | 'y'\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    ordinalScale: ScaleOrdinal<string, number>\n    spacing: number\n    forceStrength: number\n}): SimulationForces<RawDatum> => {\n    const collisionForce = forceCollide<PreSimulationDatum<RawDatum>>(d => d.size / 2 + spacing / 2)\n\n    let xForce: ForceX<PreSimulationDatum<RawDatum>>\n    let yForce: ForceY<PreSimulationDatum<RawDatum>>\n    if (axis === 'x') {\n        xForce = forceX<PreSimulationDatum<RawDatum>>(d => valueScale(d.value)).strength(\n            forceStrength\n        )\n        yForce = forceY<PreSimulationDatum<RawDatum>>(d => ordinalScale(d.group))\n    } else if (axis === 'y') {\n        xForce = forceX<PreSimulationDatum<RawDatum>>(d => ordinalScale(d.group))\n        yForce = forceY<PreSimulationDatum<RawDatum>>(d => valueScale(d.value)).strength(\n            forceStrength\n        )\n    } else {\n        throw new Error(`Invalid axis provided: ${axis}`)\n    }\n\n    return { x: xForce, y: yForce, collision: collisionForce }\n}\n\nexport const computeNodes = <RawDatum>({\n    data,\n    getId,\n    layout,\n    getValue,\n    valueScale,\n    getGroup,\n    ordinalScale,\n    getSize,\n    forces,\n    simulationIterations,\n    valueScaleConfig,\n}: {\n    data: RawDatum[]\n    getId: (datum: RawDatum) => string\n    layout: 'vertical' | 'horizontal'\n    getValue: (datum: RawDatum) => number | Date\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    getGroup: (datum: RawDatum) => string\n    ordinalScale: ScaleOrdinal<string, number>\n    getSize: (datum: RawDatum) => number\n    forces: SimulationForces<RawDatum>\n    simulationIterations: number\n    valueScaleConfig: ScaleLinearSpec | ScaleTimeSpec\n}) => {\n    const config = {\n        horizontal: ['x', 'y'],\n        vertical: ['y', 'x'],\n    }\n\n    const parseValue = getParsedValue(valueScaleConfig)\n\n    const simulatedNodes: PreSimulationDatum<RawDatum>[] = data.map(d => ({\n        id: getId(d),\n        group: getGroup(d),\n        value: parseValue(getValue(d)),\n        size: getSize(d),\n        data: { ...d },\n    }))\n\n    const simulation = forceSimulation<PreSimulationDatum<RawDatum>>(simulatedNodes)\n        .force('x', forces.x)\n        .force('y', forces.y)\n        .force('collide', forces.collision)\n        .stop()\n\n    simulation.tick(simulationIterations)\n\n    return {\n        [`${config[layout][0]}Scale`]: valueScale,\n        [`${config[layout][1]}Scale`]: ordinalScale,\n        nodes: simulation.nodes() as ComputedDatum<RawDatum>[],\n    }\n}\n","import { useCallback, useMemo } from 'react'\nimport { ScaleOrdinal } from 'd3-scale'\nimport { usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { AnnotationMatcher, useAnnotations } from '@nivo/annotations'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ScaleLinear, ScaleLinearSpec, ScaleTime, ScaleTimeSpec } from '@nivo/scales'\nimport {\n    computeValueScale,\n    computeOrdinalScale,\n    getSizeGenerator,\n    computeForces,\n    computeNodes,\n} from './compute'\nimport {\n    SwarmPlotCommonProps,\n    ComputedDatum,\n    SizeSpec,\n    SwarmPlotCustomLayerProps,\n    MouseHandlers,\n} from './types'\n\nexport const useValueScale = <RawDatum>({\n    width,\n    height,\n    axis,\n    getValue,\n    scale,\n    data,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    getValue: (datum: RawDatum) => number | Date\n    scale: ScaleLinearSpec | ScaleTimeSpec\n    data: RawDatum[]\n}) =>\n    useMemo(\n        () =>\n            computeValueScale<RawDatum>({\n                width,\n                height,\n                axis,\n                getValue,\n                scale,\n                data,\n            }),\n        [width, height, axis, getValue, scale, data]\n    )\n\nexport const useOrdinalScale = ({\n    width,\n    height,\n    axis,\n    groups,\n    gap,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    groups: string[]\n    gap: number\n}) =>\n    useMemo(() => computeOrdinalScale({ width, height, axis, groups, gap }), [\n        width,\n        height,\n        axis,\n        groups,\n        gap,\n    ])\n\nconst useSize = <RawDatum>(size: SizeSpec<RawDatum>) =>\n    useMemo(() => getSizeGenerator<RawDatum>(size), [size])\n\nexport const useForces = <RawDatum>({\n    axis,\n    valueScale,\n    ordinalScale,\n    spacing,\n    forceStrength,\n}: {\n    axis: 'x' | 'y'\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    ordinalScale: ScaleOrdinal<string, number>\n    spacing: number\n    forceStrength: number\n}) =>\n    useMemo(\n        () =>\n            computeForces<RawDatum>({\n                axis,\n                valueScale,\n                ordinalScale,\n                spacing,\n                forceStrength,\n            }),\n        [axis, valueScale, ordinalScale, spacing, forceStrength]\n    )\n\nexport const useSwarmPlot = <RawDatum>({\n    data,\n    width,\n    height,\n    id,\n    value,\n    valueFormat,\n    valueScale: valueScaleConfig,\n    groups,\n    groupBy,\n    size,\n    spacing,\n    layout,\n    gap,\n    forceStrength,\n    simulationIterations,\n    colors,\n    colorBy,\n}: {\n    data: RawDatum[]\n    width: number\n    height: number\n    id: SwarmPlotCommonProps<RawDatum>['id']\n    value: SwarmPlotCommonProps<RawDatum>['value']\n    valueScale: SwarmPlotCommonProps<RawDatum>['valueScale']\n    valueFormat?: SwarmPlotCommonProps<RawDatum>['valueFormat']\n    groups: SwarmPlotCommonProps<RawDatum>['groups']\n    groupBy: SwarmPlotCommonProps<RawDatum>['groupBy']\n    size: SwarmPlotCommonProps<RawDatum>['size']\n    spacing: SwarmPlotCommonProps<RawDatum>['spacing']\n    layout: SwarmPlotCommonProps<RawDatum>['layout']\n    gap: SwarmPlotCommonProps<RawDatum>['gap']\n    forceStrength: SwarmPlotCommonProps<RawDatum>['forceStrength']\n    simulationIterations: SwarmPlotCommonProps<RawDatum>['simulationIterations']\n    colors: SwarmPlotCommonProps<RawDatum>['colors']\n    colorBy: SwarmPlotCommonProps<RawDatum>['colorBy']\n}) => {\n    const axis = layout === 'horizontal' ? 'x' : 'y'\n\n    const getId = usePropertyAccessor<RawDatum, string>(id)\n    const getValue = usePropertyAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n    const getGroup = usePropertyAccessor<RawDatum, string>(groupBy)\n    const getSize = useSize<RawDatum>(size)\n    const getColorId = usePropertyAccessor<Omit<ComputedDatum<RawDatum>, 'color'>, string>(colorBy)\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'color'>>(\n        colors,\n        getColorId\n    )\n\n    const valueScale = useValueScale({\n        width,\n        height,\n        axis,\n        getValue,\n        scale: valueScaleConfig,\n        data,\n    })\n\n    const ordinalScale = useOrdinalScale({\n        width,\n        height,\n        axis,\n        groups,\n        gap,\n    })\n\n    const forces = useForces<RawDatum>({\n        axis,\n        valueScale,\n        ordinalScale,\n        spacing,\n        forceStrength,\n    })\n\n    const { nodes, xScale, yScale } = useMemo(\n        () =>\n            computeNodes<RawDatum>({\n                data,\n                getId,\n                layout,\n                getValue,\n                valueScale,\n                getGroup,\n                ordinalScale,\n                getSize,\n                forces,\n                simulationIterations,\n                valueScaleConfig,\n            }),\n        [\n            data,\n            getId,\n            layout,\n            getValue,\n            valueScale,\n            getGroup,\n            ordinalScale,\n            getSize,\n            forces,\n            simulationIterations,\n            valueScaleConfig,\n        ]\n    )\n\n    const augmentedNodes: ComputedDatum<RawDatum>[] = useMemo(\n        () =>\n            nodes.map(node => ({\n                ...node,\n                formattedValue: formatValue(node.value),\n                color: getColor(node),\n            })),\n        [nodes, formatValue, getColor]\n    )\n\n    return {\n        nodes: augmentedNodes,\n        xScale,\n        yScale,\n        getColor,\n    }\n}\n\nexport const useBorderWidth = <RawDatum>(\n    borderWidth: SwarmPlotCommonProps<RawDatum>['borderWidth']\n) =>\n    useMemo(() => {\n        if (typeof borderWidth === 'function') return borderWidth\n        return () => borderWidth\n    }, [borderWidth])\n\nexport const useNodeMouseHandlers = <RawDatum>({\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n    tooltip,\n}: Pick<SwarmPlotCommonProps<RawDatum>, 'isInteractive' | 'tooltip'> & MouseHandlers<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const mouseEnterHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            showTooltipFromEvent(tooltip(node), event)\n            onMouseEnter?.(node, event)\n        },\n        [isInteractive, onMouseEnter, showTooltipFromEvent, tooltip]\n    )\n\n    const mouseMoveHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            showTooltipFromEvent(tooltip(node), event)\n            onMouseMove?.(node, event)\n        },\n        [isInteractive, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const mouseLeaveHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [isInteractive, hideTooltip, onMouseLeave]\n    )\n\n    const clickHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            onClick?.(node, event)\n        },\n        [isInteractive, onClick]\n    )\n\n    return {\n        onMouseEnter: mouseEnterHandler,\n        onMouseMove: mouseMoveHandler,\n        onMouseLeave: mouseLeaveHandler,\n        onClick: clickHandler,\n    }\n}\n\nconst getNodeAnnotationPosition = (node: ComputedDatum<unknown>) => ({\n    x: node.x,\n    y: node.y,\n})\n\nconst getNodeAnnotationDimensions = (node: ComputedDatum<unknown>) => ({\n    size: node.size,\n    width: node.size,\n    height: node.size,\n})\n\nexport const useSwarmPlotAnnotations = <RawDatum>(\n    nodes: ComputedDatum<RawDatum>[],\n    annotations: AnnotationMatcher<ComputedDatum<RawDatum>>[]\n) =>\n    useAnnotations<ComputedDatum<RawDatum>>({\n        data: nodes,\n        annotations,\n        getPosition: getNodeAnnotationPosition,\n        getDimensions: getNodeAnnotationDimensions,\n    })\n\nexport const useSwarmPlotLayerContext = <\n    RawDatum,\n    Scale extends\n        | ScaleLinear<number>\n        | ScaleTime<string | Date>\n        | ScaleOrdinal<string, number, never>\n>({\n    nodes,\n    xScale,\n    yScale,\n    innerWidth,\n    innerHeight,\n    outerWidth,\n    outerHeight,\n    margin,\n}: SwarmPlotCustomLayerProps<RawDatum, Scale>): SwarmPlotCustomLayerProps<RawDatum, Scale> =>\n    useMemo(\n        () => ({\n            nodes,\n            xScale,\n            yScale,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            margin,\n        }),\n        [nodes, xScale, yScale, innerWidth, innerHeight, outerWidth, outerHeight, margin]\n    )\n","import React, { createElement, useMemo, MouseEvent } from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CircleComponent, MouseHandlers, SwarmPlotCommonProps } from './types'\nimport { useBorderWidth } from './hooks'\n\n/**\n * A negative radius value is invalid for an SVG circle,\n * this custom interpolation makes sure it's either\n * positive or zero.\n */\nexport const interpolateRadius = (radiusValue: SpringValue<number>) =>\n    to([radiusValue], radius => Math.max(0, radius))\n\ntype CirclesProps<RawDatum> = {\n    nodes: ComputedDatum<RawDatum>[]\n    borderWidth: SwarmPlotCommonProps<RawDatum>['borderWidth']\n    borderColor: SwarmPlotCommonProps<RawDatum>['borderColor']\n    component: CircleComponent<RawDatum>\n    isInteractive: SwarmPlotCommonProps<RawDatum>['isInteractive']\n    tooltip: SwarmPlotCommonProps<RawDatum>['tooltip']\n} & MouseHandlers<RawDatum>\n\nconst getTransitionPhases = <RawDatum,>(\n    getBorderColor: (node: ComputedDatum<RawDatum>) => string\n) => ({\n    enter: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n    update: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: node.size / 2,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 1,\n    }),\n    leave: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n})\n\nexport const Circles = <RawDatum,>({\n    nodes,\n    borderWidth,\n    borderColor,\n    component,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: CirclesProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseEnter?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseMove?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        }\n    }, [isInteractive, hideTooltip, onMouseLeave])\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            onClick?.(node, event)\n        }\n    }, [isInteractive, onClick])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getBorderWidth = useBorderWidth<RawDatum>(borderWidth)\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const transitionPhases = useMemo(() => getTransitionPhases<RawDatum>(getBorderColor), [\n        getBorderColor,\n    ])\n\n    const transition = useTransition<\n        ComputedDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            radius: number\n            color: string\n            borderColor: string\n            opacity: number\n        }\n    >(nodes, {\n        keys: node => node.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, node) => {\n                return React.createElement(component, {\n                    key: node.id,\n                    node,\n                    style: {\n                        ...transitionProps,\n                        radius: interpolateRadius(transitionProps.radius),\n                        borderWidth: getBorderWidth(node),\n                    },\n                    onMouseEnter: handleMouseEnter,\n                    onMouseMove: handleMouseMove,\n                    onMouseLeave: handleMouseLeave,\n                    onClick: handleClick,\n                })\n            })}\n        </>\n    )\n}\n","import React from 'react'\nimport { animated } from '@react-spring/web'\nimport { CircleProps } from './types'\n\nexport const CircleSvg = <RawDatum,>({\n    node,\n    style,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: CircleProps<RawDatum>) => {\n    return (\n        <animated.circle\n            key={node.id}\n            cx={style.x}\n            cy={style.y}\n            r={style.radius}\n            fill={style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            opacity={style.opacity}\n            onMouseEnter={event => onMouseEnter?.(node, event)}\n            onMouseMove={event => onMouseMove?.(node, event)}\n            onMouseLeave={event => onMouseLeave?.(node, event)}\n            onClick={event => onClick?.(node, event)}\n        />\n    )\n}\n","import React from 'react'\nimport { Annotation } from '@nivo/annotations'\nimport { ComputedDatum, SwarmPlotSvgProps } from './types'\nimport { useSwarmPlotAnnotations } from './hooks'\n\nexport const SwarmPlotAnnotations = <RawDatum,>({\n    nodes,\n    annotations,\n}: {\n    nodes: ComputedDatum<RawDatum>[]\n    annotations: SwarmPlotSvgProps<RawDatum>['annotations']\n}) => {\n    const boundAnnotations = useSwarmPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import React, { ReactNode, Fragment, createElement } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { AnyScale, Axes, Grid } from '@nivo/axes'\nimport { Mesh } from '@nivo/voronoi'\nimport { ComputedDatum, SwarmPlotLayerId, SwarmPlotSvgProps } from './types'\nimport { defaultProps } from './props'\nimport { useSwarmPlot, useSwarmPlotLayerContext, useNodeMouseHandlers } from './hooks'\nimport { Circles } from './Circles'\nimport { CircleSvg } from './CircleSvg'\nimport { SwarmPlotAnnotations } from './SwarmPlotAnnotations'\n\ntype InnerSwarmPlotProps<RawDatum> = Partial<\n    Omit<\n        SwarmPlotSvgProps<RawDatum>,\n        'data' | 'groups' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height' | 'isInteractive'>\n\nconst InnerSwarmPlot = <RawDatum,>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueScale = defaultProps.valueScale,\n    valueFormat,\n    groups,\n    groupBy = defaultProps.groupBy,\n    size = defaultProps.size,\n    forceStrength = defaultProps.forceStrength,\n    simulationIterations = defaultProps.simulationIterations,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<Omit<ComputedDatum<RawDatum>, 'color'>>,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    layout = defaultProps.layout,\n    spacing = defaultProps.spacing,\n    gap = defaultProps.gap,\n    layers = defaultProps.layers,\n    circleComponent = CircleSvg,\n    useMesh = defaultProps.useMesh,\n    debugMesh = defaultProps.debugMesh,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    axisTop = defaultProps.axisTop,\n    axisRight = defaultProps.axisRight,\n    axisBottom = defaultProps.axisBottom,\n    axisLeft = defaultProps.axisLeft,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    annotations = defaultProps.annotations,\n    role = defaultProps.role,\n}: InnerSwarmPlotProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, ...props } = useSwarmPlot<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        id,\n        value,\n        valueFormat,\n        valueScale,\n        groups,\n        groupBy,\n        size,\n        spacing,\n        layout,\n        gap,\n        colors,\n        colorBy,\n        forceStrength,\n        simulationIterations,\n    })\n\n    const xScale = props.xScale as Exclude<typeof props.xScale, ComputedDatum<RawDatum>[]>\n    const yScale = props.yScale as Exclude<typeof props.yScale, ComputedDatum<RawDatum>[]>\n\n    const handlers = useNodeMouseHandlers({\n        isInteractive,\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        onMouseMove,\n        tooltip,\n    })\n\n    const layerById: Record<SwarmPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        circles: null,\n        annotations: null,\n        mesh: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as AnyScale) : null}\n                xValues={gridXValues}\n                yScale={enableGridY ? (yScale as AnyScale) : null}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as AnyScale}\n                yScale={yScale as AnyScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop ?? undefined}\n                right={axisRight ?? undefined}\n                bottom={axisBottom ?? undefined}\n                left={axisLeft ?? undefined}\n            />\n        )\n    }\n\n    if (layers.includes('circles')) {\n        layerById.circles = (\n            <Circles<RawDatum>\n                key=\"circles\"\n                nodes={nodes}\n                borderWidth={0}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                component={circleComponent}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <SwarmPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={handlers.onMouseEnter}\n                onMouseMove={handlers.onMouseMove}\n                onMouseLeave={handlers.onMouseLeave}\n                onClick={handlers.onClick}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    const layerContext = useSwarmPlotLayerContext({\n        nodes,\n        xScale,\n        yScale,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin,\n    })\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (layerById[layer as SwarmPlotLayerId] !== undefined) {\n                    return layerById[layer as SwarmPlotLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const SwarmPlot = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSwarmPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport { SwarmPlotSvgProps } from './types'\nimport { SwarmPlot } from './SwarmPlot'\n\ntype ResponsiveSwarmPlotProps<RawDatum> = Partial<\n    Omit<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>\n> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups'>\n\nexport const ResponsiveSwarmPlot = <RawDatum,>(props: ResponsiveSwarmPlotProps<RawDatum>) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <SwarmPlot<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { createElement, useCallback, useEffect, useRef, useState } from 'react'\nimport isNumber from 'lodash/isNumber'\nimport { Container, getRelativeCursor, isCursorInRect, useDimensions, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig, useInheritedColor } from '@nivo/colors'\nimport { AnyScale, renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { ComputedDatum, SwarmPlotCanvasProps } from './types'\nimport { defaultProps } from './props'\nimport { useSwarmPlot } from './hooks'\n\nexport const renderCircleDefault = <RawDatum,>(\n    ctx: CanvasRenderingContext2D,\n    {\n        node,\n        getBorderWidth,\n        getBorderColor,\n    }: {\n        node: ComputedDatum<RawDatum>\n        getBorderWidth: (node: ComputedDatum<RawDatum>) => number\n        getBorderColor: (node: ComputedDatum<RawDatum>) => string\n    }\n) => {\n    const nodeBorderWidth = getBorderWidth(node)\n    if (nodeBorderWidth > 0) {\n        ctx.strokeStyle = getBorderColor(node)\n        ctx.lineWidth = nodeBorderWidth\n    }\n\n    ctx.beginPath()\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n    ctx.fillStyle = node.color\n    ctx.fill()\n\n    if (nodeBorderWidth > 0) {\n        ctx.stroke()\n    }\n}\n\ntype InnerSwarmCanvasPlotProps<RawDatum> = Partial<\n    Omit<\n        SwarmPlotCanvasProps<RawDatum>,\n        'data' | 'groups' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height' | 'isInteractive'>\n\nexport const InnerSwarmPlotCanvas = <RawDatum,>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    groups,\n    groupBy = defaultProps.groupBy,\n    size = defaultProps.size,\n    forceStrength = defaultProps.forceStrength,\n    simulationIterations = defaultProps.simulationIterations,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<Omit<ComputedDatum<RawDatum>, 'color'>>,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    layout = defaultProps.layout,\n    spacing = defaultProps.spacing,\n    gap = defaultProps.gap,\n    layers = defaultProps.layers,\n    renderCircle = renderCircleDefault,\n    debugMesh = defaultProps.debugMesh,\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop = defaultProps.axisTop,\n    axisRight = defaultProps.axisRight,\n    axisBottom = defaultProps.axisBottom,\n    axisLeft = defaultProps.axisLeft,\n    isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    role = defaultProps.role,\n    pixelRatio = defaultProps.pixelRatio,\n}: InnerSwarmCanvasPlotProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ComputedDatum<RawDatum> | null>(null)\n\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, ...scales } = useSwarmPlot<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        id,\n        value,\n        valueFormat,\n        valueScale: defaultProps.valueScale,\n        groups,\n        groupBy,\n        size,\n        spacing,\n        layout,\n        gap,\n        colors,\n        colorBy,\n        forceStrength,\n        simulationIterations,\n    })\n\n    const { xScale, yScale } = scales as Record<'xScale' | 'yScale', AnyScale>\n\n    const { delaunay, voronoi } = useVoronoiMesh<ComputedDatum<RawDatum>>({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getBorderWidth = () => 1\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        if (!ctx) return\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (\n                layer === 'grid' &&\n                isNumber(theme.grid.line.strokeWidth) &&\n                theme.grid.line.strokeWidth > 0\n            ) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'circles') {\n                nodes.forEach(node => {\n                    renderCircle(ctx, {\n                        node,\n                        getBorderWidth,\n                        getBorderColor,\n                    })\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh && voronoi) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentNode) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentNode.index)\n                }\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        pixelRatio,\n        margin,\n        theme,\n        layers,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        voronoi,\n        debugMesh,\n        currentNode,\n        nodes,\n        renderCircle,\n        getBorderWidth,\n        getBorderColor,\n    ])\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: React.MouseEvent) => {\n            if (!canvasEl.current) {\n                return null\n            }\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) {\n                return null\n            }\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay, nodes]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const showNodeTooltip = useCallback(\n        (node: ComputedDatum<RawDatum>, event: React.MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                onMouseMove?.(node, event)\n                showNodeTooltip(node, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getNodeFromMouseEvent, setCurrentNode, onMouseMove, showNodeTooltip, hideTooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setCurrentNode(null)\n    }, [hideTooltip, setCurrentNode])\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onClick?.(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            role={role}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const SwarmPlotCanvas = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSwarmPlotCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport { SwarmPlotCanvasProps } from './types'\nimport { SwarmPlotCanvas } from './SwarmPlotCanvas'\n\ntype ResponsiveSwarmPlotCanvasProps<RawDatum> = Partial<\n    Omit<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>\n> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups'>\n\nexport const ResponsiveSwarmPlotCanvas = <RawDatum,>(\n    props: ResponsiveSwarmPlotCanvasProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <SwarmPlotCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"sourceRoot":""}