{"version":3,"file":"component---src-pages-chord-canvas-js-bfe11d04ac25bad93779.js","mappings":"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","sources":["webpack://nivo-website/./src/data/components/chord/props.ts","webpack://nivo-website/./src/lib/settings.ts","webpack://nivo-website/./src/data/components/chord/mapper.js","webpack://nivo-website/./src/pages/chord/canvas.js"],"sourcesContent":["import { ChordDefaultProps as defaults } from '@nivo/chord'\nimport {\n    themeProperty,\n    motionProperties,\n    groupProperties,\n    getLegendsProps,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'keys',\n        group: 'Base',\n        help: 'Keys used to identify each cell in the matrix.',\n        description: `\n            Keys used to identify each cell in the matrix,\n            for example given this matrix:\n            \\`\\`\\`\n            [ [123, 37,  99 ],\n              [75,  103, 82 ],\n              [37,  65,  109] ]\n            \\`\\`\\`\n            and those keys:\n            \\`\\`\\`\n            ['John', 'Jane', 'Raoul']\n            \\`\\`\\`\n            it will result in the following mapping:\n            \\`\\`\\`\n            [ [null,    'John', 'Jane',  'Raoul']\n              ['John',   123,    37,      99    ],\n              ['Jane',   75,     103,     82    ],\n              ['Raoul',  37,     65,      109   ] ]\n            \\`\\`\\`\n        `,\n        required: true,\n        type: 'string[]',\n    },\n    {\n        key: 'matrix',\n        group: 'Base',\n        help: 'The matrix used to compute the chord diagram.',\n        description: `\n            The matrix used to compute the chord diagram,\n            it must be a square matrix, meaning each row length\n            must equal the row count.\n        `,\n        required: true,\n        type: 'Array<number[]>',\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        type: 'string | Function',\n        required: false,\n        help: `Optional value formatter.`,\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            not required if using\n            \\`<ResponsiveChord/>\\`.\n            Also note that width does not include labels,\n            so you should add enough margin to display them.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            not required if using\n            \\`<ResponsiveChord/>\\`.\n            Also note that width does not include labels,\n            so you should add enough margin to display them.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        required: false,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    {\n        key: 'padAngle',\n        help: 'Padding angle.',\n        required: false,\n        defaultValue: defaults.padAngle,\n        type: 'number',\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 1,\n            step: 0.01,\n        },\n    },\n    {\n        key: 'innerRadiusRatio',\n        help: 'Inner radius ratio.',\n        required: false,\n        defaultValue: defaults.innerRadiusRatio,\n        type: 'number',\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 1,\n            step: 0.01,\n        },\n    },\n    {\n        key: 'innerRadiusOffset',\n        help: 'Inner radius offset (minus innerRadiusRatio).',\n        required: false,\n        defaultValue: defaults.innerRadiusOffset,\n        type: 'number',\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 1,\n            step: 0.01,\n        },\n    },\n    themeProperty(['svg', 'canvas', 'api']),\n    {\n        key: 'colors',\n        help: 'Defines how to compute arc/ribbon color.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: defaults.colors,\n        flavors: ['svg', 'canvas', 'api'],\n        controlType: 'ordinalColors',\n        group: 'Style',\n    },\n    {\n        key: 'arcOpacity',\n        help: 'Arcs opacity.',\n        required: false,\n        defaultValue: defaults.arcOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Style',\n    },\n    {\n        key: 'arcBorderWidth',\n        help: 'Arcs border width.',\n        required: false,\n        defaultValue: defaults.arcBorderWidth,\n        type: 'number',\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'arcBorderColor',\n        help: 'Arcs border color.',\n        required: false,\n        defaultValue: defaults.arcBorderColor,\n        type: 'string | object | Function',\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    {\n        key: 'ribbonOpacity',\n        help: 'Ribbons opacity.',\n        required: false,\n        defaultValue: defaults.ribbonOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Style',\n    },\n    {\n        key: 'ribbonBorderWidth',\n        help: 'Ribbons border width.',\n        required: false,\n        defaultValue: defaults.ribbonBorderWidth,\n        type: 'number',\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'ribbonBorderColor',\n        help: 'Ribbons border color.',\n        required: false,\n        defaultValue: defaults.ribbonBorderColor,\n        type: 'string | object | Function',\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    {\n        key: 'enableLabel',\n        help: 'Enable/disable labels.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableLabel,\n        controlType: 'switch',\n        group: 'Labels',\n    },\n    {\n        key: 'label',\n        help: 'Defines how to get label text, can be a string (used to access current arc data property) or a function which will receive the actual arc data.',\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaults.label,\n        controlType: 'choices',\n        group: 'Labels',\n        controlOptions: {\n            choices: ['id', 'value', `d => \\`\\${d.id} [\\${d.value}]\\``].map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n    {\n        key: 'labelOffset',\n        help: 'Label offset from arc.',\n        required: false,\n        defaultValue: defaults.labelOffset,\n        type: 'number',\n        controlType: 'range',\n        group: 'Labels',\n        controlOptions: {\n            unit: 'px',\n            min: -80,\n            max: 80,\n        },\n    },\n    {\n        key: 'labelRotation',\n        help: 'Label rotation.',\n        required: false,\n        defaultValue: defaults.labelRotation,\n        type: 'number',\n        controlType: 'angle',\n        group: 'Labels',\n        controlOptions: {\n            min: -180,\n            max: 180,\n            step: 5,\n        },\n    },\n    {\n        key: 'labelTextColor',\n        description: `\n            How to compute label text color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        help: 'Method to compute label text color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.labelTextColor,\n        controlType: 'inheritedColor',\n        group: 'Labels',\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer must be a function.\n            \n            The layer function which will receive the chart's\n            context & computed data and must return a valid SVG element\n            for the \\`Chord\\` component.\n\n            When using the canvas implementation, the function\n            will receive the canvas 2d context as first argument\n            and the chart's context and computed data as second.\n\n            Please make sure to use \\`context.save()\\` and\n            \\`context.restore()\\` if you make some global\n            modifications to the 2d context inside this function\n            to avoid side effects.\n        `,\n        required: false,\n        type: 'Array<string | Function>',\n        defaultValue: defaults.layers,\n    },\n    {\n        key: 'isInteractive',\n        flavors: ['svg', 'canvas'],\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.isInteractive,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'arcHoverOpacity',\n        flavors: ['svg', 'canvas'],\n        help: 'Arc opacity when hover (0~1).',\n        required: false,\n        defaultValue: defaults.arcHoverOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Interactivity',\n    },\n    {\n        key: 'arcHoverOthersOpacity',\n        flavors: ['svg', 'canvas'],\n        help: 'Arc opacity when not hover (0~1).',\n        required: false,\n        defaultValue: defaults.arcHoverOthersOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Interactivity',\n    },\n    {\n        key: 'ribbonHoverOpacity',\n        flavors: ['svg', 'canvas'],\n        help: 'Ribbon opacity when hover (0~1).',\n        required: false,\n        defaultValue: defaults.ribbonHoverOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Interactivity',\n    },\n    {\n        key: 'ribbonHoverOthersOpacity',\n        flavors: ['svg', 'canvas'],\n        help: 'Ribbon opacity when not hover (0~1).',\n        required: false,\n        defaultValue: defaults.ribbonHoverOthersOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Interactivity',\n    },\n    {\n        key: 'onArcMouseEnter',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onMouseEnter handler for arcs.',\n        type: '(arc, event) => void',\n        required: false,\n    },\n    {\n        key: 'onArcMouseMove',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onMouseMove handler for arcs.',\n        type: '(arc, event) => void',\n        required: false,\n    },\n    {\n        key: 'onArcMouseLeave',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onMouseLeave handler for arcs.',\n        type: '(arc, event) => void',\n        required: false,\n    },\n    {\n        key: 'onArcClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onClick handler for arcs.',\n        type: '(arc, event) => void',\n        required: false,\n    },\n    {\n        key: 'arcTooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom arc tooltip component.',\n        description: `\n            A function allowing complete arc tooltip customisation,\n            it must return a valid HTML\n            element and will receive the arcs's data.\n        `,\n    },\n    {\n        key: 'onRibbonMouseEnter',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseEnter handler for ribbons.',\n        type: '(ribbon, event) => void',\n        required: false,\n    },\n    {\n        key: 'onRibbonMouseMove',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseMove handler for ribbons.',\n        type: '(ribbon, event) => void',\n        required: false,\n    },\n    {\n        key: 'onRibbonMouseLeave',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseLeave handler for ribbons.',\n        type: '(ribbon, event) => void',\n        required: false,\n    },\n    {\n        key: 'onRibbonClick',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onClick handler for ribbons.',\n        type: '(ribbon, event) => void',\n        required: false,\n    },\n    {\n        key: 'ribbonTooltip',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom ribbon tooltip component.',\n        description: `\n            A function allowing complete ribbon tooltip customisation,\n            it must return a valid HTML\n            element and will receive the ribbon's data.\n        `,\n    },\n    {\n        key: 'legends',\n        flavors: ['svg', 'canvas'],\n        type: 'object[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                dataFrom: 'keys',\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n    ...motionProperties(['svg'], defaults),\n]\n\nexport const groups = groupProperties(props)\n","import omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\n\nexport const settingsMapper =\n    (mapping: any, { exclude = [] } = {}) =>\n    (settings: any, options: any = {}) => {\n        const overrides: any = {}\n\n        Object.keys(settings).forEach(key => {\n            if (mapping[key]) {\n                overrides[key] = mapping[key](settings[key], settings, options)\n            }\n        })\n\n        return {\n            ...omit(settings, exclude),\n            ...overrides,\n        }\n    }\n\nexport const mapAxis = (type: string) => (value: any, settings: any) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }: { format: any; enabled: boolean }) =>\n    enabled ? format : undefined\n","import { settingsMapper } from '../../../lib/settings'\n\nexport default settingsMapper({\n    label: value => {\n        if (value === `d => \\`\\${d.id} [\\${d.value}]\\``) return d => `${d.id} [${d.value}]`\n        return value\n    },\n})\n","import React from 'react'\nimport { generateChordData } from '@nivo/generators'\nimport { ResponsiveChordCanvas } from '@nivo/chord'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/chord/meta.yml'\nimport mapper from '../../data/components/chord/mapper'\nimport { groups } from '../../data/components/chord/props'\n\nconst MATRIX_SIZE = 38\n\nconst initialProperties = {\n    margin: {\n        top: 60,\n        right: 200,\n        bottom: 60,\n        left: 60,\n    },\n\n    valueFormat: '.2f',\n\n    pixelRatio:\n        typeof window !== 'undefined' && window.devicePixelRatio ? window.devicePixelRatio : 1,\n\n    padAngle: 0.006,\n    innerRadiusRatio: 0.86,\n    innerRadiusOffset: 0,\n\n    arcOpacity: 1,\n    arcBorderWidth: 0,\n    arcBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n\n    ribbonOpacity: 0.5,\n    ribbonBorderWidth: 0,\n    ribbonBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n\n    enableLabel: true,\n    label: 'id',\n    labelOffset: 9,\n    labelRotation: -90,\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    colors: { scheme: 'paired' },\n\n    isInteractive: true,\n    arcHoverOpacity: 1,\n    arcHoverOthersOpacity: 0.4,\n    ribbonHoverOpacity: 0.75,\n    ribbonHoverOthersOpacity: 0,\n\n    legends: [\n        {\n            anchor: 'right',\n            direction: 'column',\n            justify: false,\n            translateX: 120,\n            translateY: 0,\n            itemWidth: 80,\n            itemHeight: 11,\n            itemsSpacing: 0,\n            itemTextColor: '#999',\n            itemDirection: 'left-to-right',\n            symbolSize: 12,\n            onClick: d => {\n                alert(JSON.stringify(d, null, '    '))\n            },\n            effects: [\n                {\n                    on: 'hover',\n                    style: {\n                        itemTextColor: '#000',\n                    },\n                },\n            ],\n        },\n    ],\n}\n\nconst generateData = () => generateChordData({ size: MATRIX_SIZE })\n\nconst ChordCanvas = () => {\n    return (\n        <ComponentTemplate\n            name=\"ChordCanvas\"\n            meta={meta.ChordCanvas}\n            icon=\"chord\"\n            flavors={meta.flavors}\n            currentFlavor=\"canvas\"\n            properties={groups}\n            initialProperties={initialProperties}\n            propertiesMapper={mapper}\n            codePropertiesMapper={(properties, data) => ({\n                keys: data.keys,\n                ...properties,\n            })}\n            generateData={generateData}\n            dataKey=\"matrix\"\n            getDataSize={() => MATRIX_SIZE * MATRIX_SIZE + MATRIX_SIZE}\n            getTabData={data => data.matrix}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveChordCanvas\n                        matrix={data.matrix}\n                        keys={data.keys}\n                        {...properties}\n                        theme={theme}\n                        onArcClick={arc => {\n                            logAction({\n                                type: 'click',\n                                label: `[arc] ${arc.label}`,\n                                color: arc.color,\n                                data: arc,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default ChordCanvas\n"],"names":["props","key","group","help","description","required","type","enableControlForFlavors","controlType","controlOptions","unit","min","max","step","flavors","defaultValue","defaults","themeProperty","choices","map","choice","label","value","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","dataFrom","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","data","alert","JSON","stringify","motionProperties","groups","groupProperties","settingsMapper","mapping","exclude","settings","options","overrides","Object","keys","forEach","omit","mapAxis","upperFirst","enable","mapFormat","format","enabled","undefined","d","id","initialProperties","margin","top","right","bottom","left","valueFormat","pixelRatio","window","devicePixelRatio","padAngle","innerRadiusRatio","innerRadiusOffset","arcOpacity","arcBorderWidth","arcBorderColor","from","modifiers","ribbonOpacity","ribbonBorderWidth","ribbonBorderColor","enableLabel","labelOffset","labelRotation","labelTextColor","colors","scheme","isInteractive","arcHoverOpacity","arcHoverOthersOpacity","ribbonHoverOpacity","ribbonHoverOthersOpacity","legends","itemTextColor","effects","on","style","generateData","generateChordData","size","name","meta","icon","currentFlavor","properties","propertiesMapper","mapper","codePropertiesMapper","dataKey","getDataSize","MATRIX_SIZE","getTabData","matrix","theme","logAction","onArcClick","arc","color"],"sourceRoot":""}