{"version":3,"file":"component---src-pages-network-index-tsx-c3fd4f5959ebd591c08e.js","mappings":"+aAgBA,IAAMA,EAAoBC,OAAOC,OAAO,CACpCC,OAAQ,CACJC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,GAGVC,aAAc,SAACC,GAAD,OAAgBA,EAAKC,UACnCC,kBAAmB,GACnBC,YAAa,EACbC,WAAYC,EAAAA,GAAAA,WAEZC,SAAUC,EAAAA,GACVC,eAAgBC,EAAAA,GAChBC,iBAAkBL,EAAAA,GAAAA,iBAClBM,UAAW,SAACC,GAAD,OAAeA,EAAKC,OAC/BC,gBAAiB,EACjBC,gBAAiB,CACbC,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU,MAG3BC,cAAeC,EAAAA,GACfC,UAAWf,EAAAA,GAAAA,UACXgB,cAAe,WAEfC,YAAajB,EAAAA,GAAAA,YAEbkB,eAAe,EAEfC,SAAS,EACTC,aAAc,WAGZC,EAAe,kBAAMC,EAAAA,EAAAA,OAqD3B,UAnDgB,WACZ,IAE4CC,GAExCC,EAAAA,EAAAA,gBAAe,cAHfD,MACIE,gBAAmBC,gBAY3B,OACI,SAAC,IAAD,CACIC,KAAK,UACLC,KAAMA,EAAAA,GACNC,KAAK,UACLC,QAASF,EAAAA,GACTG,cAAc,MACdC,WAAYC,EAAAA,EACZ/C,kBAAmBA,EACnBgD,kBAAmBlC,EAAAA,GACnBmC,iBAAkBC,EAAAA,GAClBf,aAAcA,EACdgB,YAAa,SAAAC,GAAI,OAAIA,EAAKC,MAAMC,QAChCjB,MAAOA,EAZX,SAcK,SAACS,EAAYM,EAAMG,EAAOC,GACvB,OACI,SAAC,KAAD,GACIJ,KAAMA,GACFN,EAFR,CAGIS,MAAOA,EACPE,QAAS,SAACpC,GACNmC,EAAU,CACNE,KAAM,QACNC,MAAM,cAAetC,EAAKuC,GAArB,YAAmCvC,EAAKwC,MAC7CvC,MAAOD,EAAKC,MACZ8B,KAAM/B","sources":["webpack://nivo-website/./src/pages/network/index.tsx"],"sourcesContent":["import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport { ComputedNode, ResponsiveNetwork, svgDefaultProps as defaults } from '@nivo/network'\nimport { generateNetworkData } from '@nivo/generators'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/network/meta.yml'\nimport mapper, {\n    dynamicNodeSizeValue,\n    dynamicActiveNodeSizeValue,\n    dynamicLinkThicknessValue,\n} from '../../data/components/network/mapper'\nimport { groups } from '../../data/components/network/props'\n\ntype Node = ReturnType<typeof generateData>['nodes'][number]\ntype Link = ReturnType<typeof generateData>['links'][number]\n\nconst initialProperties = Object.freeze({\n    margin: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    },\n\n    linkDistance: (link: Link) => link.distance,\n    centeringStrength: 0.3,\n    repulsivity: 6,\n    iterations: defaults.iterations,\n\n    nodeSize: dynamicNodeSizeValue,\n    activeNodeSize: dynamicActiveNodeSizeValue,\n    inactiveNodeSize: defaults.inactiveNodeSize,\n    nodeColor: (node: any) => node.color,\n    nodeBorderWidth: 1,\n    nodeBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.8]],\n    },\n\n    linkThickness: dynamicLinkThicknessValue,\n    linkColor: defaults.linkColor,\n    linkBlendMode: 'multiply',\n\n    annotations: defaults.annotations,\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'wobbly',\n})\n\nconst generateData = () => generateNetworkData()\n\nconst Network = () => {\n    const {\n        image: {\n            childImageSharp: { gatsbyImageData: image },\n        },\n    } = useStaticQuery(graphql`\n        query {\n            image: file(absolutePath: { glob: \"**/src/assets/captures/network.png\" }) {\n                childImageSharp {\n                    gatsbyImageData(layout: FIXED, width: 700, quality: 100)\n                }\n            }\n        }\n    `)\n\n    return (\n        <ComponentTemplate\n            name=\"Network\"\n            meta={meta.Network}\n            icon=\"network\"\n            flavors={meta.flavors}\n            currentFlavor=\"svg\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={defaults}\n            propertiesMapper={mapper}\n            generateData={generateData}\n            getDataSize={data => data.nodes.length}\n            image={image}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveNetwork<Node, Link>\n                        data={data}\n                        {...properties}\n                        theme={theme}\n                        onClick={(node: ComputedNode<any>) => {\n                            logAction({\n                                type: 'click',\n                                label: `[node] id: ${node.id}, index: ${node.index}`,\n                                color: node.color,\n                                data: node,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default Network\n"],"names":["initialProperties","Object","freeze","margin","top","right","bottom","left","linkDistance","link","distance","centeringStrength","repulsivity","iterations","defaults","nodeSize","dynamicNodeSizeValue","activeNodeSize","dynamicActiveNodeSizeValue","inactiveNodeSize","nodeColor","node","color","nodeBorderWidth","nodeBorderColor","from","modifiers","linkThickness","dynamicLinkThicknessValue","linkColor","linkBlendMode","annotations","isInteractive","animate","motionConfig","generateData","generateNetworkData","image","useStaticQuery","childImageSharp","gatsbyImageData","name","meta","icon","flavors","currentFlavor","properties","groups","defaultProperties","propertiesMapper","mapper","getDataSize","data","nodes","length","theme","logAction","onClick","type","label","id","index"],"sourceRoot":""}