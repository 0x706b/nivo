{"version":3,"file":"component---src-pages-radial-bar-index-tsx-8671463cf50b8b8160ea.js","mappings":"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","sources":["webpack://nivo-website/./src/data/components/radial-bar/mapper.ts","webpack://nivo-website/./src/data/components/radial-bar/props.ts","webpack://nivo-website/./src/pages/radial-bar/index.tsx","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/CircularAxisTick.tsx","webpack://nivo-website/../src/CircularAxis.tsx","webpack://nivo-website/../src/RadialGrid.tsx","webpack://nivo-website/../src/CircularGrid.tsx","webpack://nivo-website/../src/PolarGrid.tsx","webpack://nivo-website/../src/RadialAxisTick.tsx","webpack://nivo-website/../src/RadialAxis.tsx","webpack://nivo-website/../src/RadialBarTooltip.tsx","webpack://nivo-website/../src/RadialBarArcs.tsx","webpack://nivo-website/../src/RadialBarTracks.tsx","webpack://nivo-website/../src/RadialBar.tsx","webpack://nivo-website/../src/ResponsiveRadialBar.tsx"],"sourcesContent":["import omit from 'lodash/omit'\nimport { settingsMapper, mapFormat } from '../../../lib/settings'\n\nexport const mapAxis = (key: string) => (value: any, settings: any) =>\n    settings[key].enable ? omit(value, ['enable']) : null\n\nexport default settingsMapper({\n    valueFormat: mapFormat,\n    radialAxisStart: mapAxis('radialAxisStart'),\n    radialAxisEnd: mapAxis('radialAxisEnd'),\n    circularAxisInner: mapAxis('circularAxisInner'),\n    circularAxisOuter: mapAxis('circularAxisOuter'),\n})\n","import { svgDefaultProps } from '@nivo/radial-bar'\nimport { arcTransitionModes } from '@nivo/arcs'\nimport {\n    themeProperty,\n    motionProperties,\n    groupProperties,\n    getLegendsProps,\n    polarAxisProperty,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        type: 'object[]',\n        required: true,\n        help: 'Chart data.',\n        description: `\n            Here is what the data for a single chart with 2 bars would look like:\n            \n            \\`\\`\\`\n            [\n                {\n                    id: 'Fruits',\n                    data: [{ x: 'Apples', y: 32 }]\n                },\n                {\n                    id: 'Vegetables',\n                    data: [{ x: 'Eggplants', y: 27 }]\n                }\n            ]\n            \\`\\`\\`\n            \n            You can add several metrics per group:\n            \n            \\`\\`\\`\n            [\n                {\n                    id: 'Fruits',\n                    data: [\n                        { x: 'Apples', y: 32 },\n                        { x: 'Mangoes', y: 15 }\n                    ]\n                },\n                {\n                    id: 'Vegetables',\n                    data: [\n                        { x: 'Eggplants', y: 27 },\n                        { x: 'Avocados', y: 34 }\n                    ]\n                }\n            ]\n            \\`\\`\\`\n            \n            When a bar is computed, the \\`id\\` is going to be added\n            as the \\`groupId\\`, \\`x\\` as the \\`category\\` and \\`y\\`\n            as the value, for example the first bar for the number of Apples\n            in the Fruits group would be:\n            \n            \\`\\`\\`\n            {\n                groupId: 'Fruits',\n                category: 'Apples',\n                value: 32\n            }\n            \\`\\`\\`\n            \n            You might read those values when adding an \\`onClick\\` handler\n            for example, or when customizing the tooltip.\n        `,\n        flavors: ['svg'],\n    },\n    {\n        key: 'maxValue',\n        group: 'Base',\n        type: `'auto' | number`,\n        required: false,\n        help: `If 'auto', the max value is derived from the data, otherwise use a static value.`,\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.maxValue,\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        type: 'string | (value: number) => string',\n        required: false,\n        help: 'Optional formatter for values (`y`).',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        flavors: ['svg'],\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'width',\n        group: 'Base',\n        type: 'number',\n        required: true,\n        help: 'Chart width.',\n        description: `\n            not required if using\n            \\`<ResponsiveRadialBar/>\\`.\n        `,\n        flavors: ['svg', 'api'],\n        enableControlForFlavors: ['api'],\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        group: 'Base',\n        type: 'number',\n        required: true,\n        help: 'Chart height.',\n        description: `\n            not required if using\n            \\`<ResponsiveRadialBar/>\\`.\n        `,\n        flavors: ['svg', 'api'],\n        enableControlForFlavors: ['api'],\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'margin',\n        group: 'Base',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        flavors: ['svg'],\n        controlType: 'margin',\n    },\n    {\n        key: 'startAngle',\n        group: 'Base',\n        type: 'number',\n        required: false,\n        help: 'Start angle (in degrees).',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.startAngle,\n        controlType: 'angle',\n        controlOptions: {\n            min: -360,\n            max: 360,\n            step: 5,\n        },\n    },\n    {\n        key: 'endAngle',\n        group: 'Base',\n        type: 'number',\n        required: false,\n        help: 'End angle (in degrees).',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.endAngle,\n        controlType: 'angle',\n        controlOptions: {\n            min: -360,\n            max: 360,\n            step: 5,\n        },\n    },\n    {\n        key: 'innerRadius',\n        group: 'Base',\n        help: `Donut if greater than 0. Value should be between 0~1 as it's a ratio from outer radius.`,\n        type: 'number',\n        required: false,\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.innerRadius,\n        controlType: 'range',\n        controlOptions: {\n            min: 0,\n            max: 0.95,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'padding',\n        group: 'Base',\n        type: 'number',\n        required: false,\n        help: 'Padding between each ring (ratio).',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.padding,\n        controlType: 'range',\n        controlOptions: {\n            min: 0,\n            max: 0.9,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'padAngle',\n        group: 'Base',\n        type: 'number',\n        required: false,\n        help: 'Padding between each bar.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.padAngle,\n        controlType: 'range',\n        controlOptions: {\n            unit: '°',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'cornerRadius',\n        group: 'Base',\n        type: 'number',\n        required: false,\n        help: 'Rounded corners.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.cornerRadius,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    themeProperty(['svg']),\n    {\n        key: 'colors',\n        group: 'Style',\n        type: 'string | Function | string[]',\n        required: false,\n        help: 'Defines how to compute colors.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.colors,\n        controlType: 'ordinalColors',\n    },\n    {\n        key: 'borderWidth',\n        group: 'Style',\n        type: 'number',\n        required: false,\n        help: 'Bars border width.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.borderWidth,\n        controlType: 'lineWidth',\n    },\n    {\n        key: 'borderColor',\n        group: 'Style',\n        type: 'InheritedColorConfig<ComputedBar>',\n        required: false,\n        help: 'Method to compute border color.',\n        description: `\n            how to compute border color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.borderColor,\n        controlType: 'inheritedColor',\n    },\n    {\n        key: 'enableTracks',\n        group: 'Tracks',\n        type: 'boolean',\n        required: false,\n        help: 'Enable/disable tracks.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.enableTracks,\n        controlType: 'switch',\n    },\n    {\n        key: 'tracksColor',\n        group: 'Tracks',\n        type: 'string',\n        required: false,\n        help: 'Define tracks color.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.tracksColor,\n        controlType: 'colorPicker',\n    },\n    {\n        key: 'enableRadialGrid',\n        group: 'Grid & Axes',\n        type: 'boolean',\n        required: false,\n        help: 'Enable radial grid (rays)',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.enableRadialGrid,\n        controlType: 'switch',\n    },\n    {\n        key: 'enableCircularGrid',\n        group: 'Grid & Axes',\n        type: 'boolean',\n        required: false,\n        help: 'Enable circular grid (rings)',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.enableCircularGrid,\n        controlType: 'switch',\n    },\n    polarAxisProperty({\n        key: 'radialAxisStart',\n        flavors: ['svg'],\n        tickComponent: 'RadialAxisTickComponent',\n    }),\n    polarAxisProperty({\n        key: 'radialAxisEnd',\n        flavors: ['svg'],\n        tickComponent: 'RadialAxisTickComponent',\n    }),\n    polarAxisProperty({\n        key: 'circularAxisInner',\n        flavors: ['svg'],\n        tickComponent: 'CircularAxisTickComponent',\n    }),\n    polarAxisProperty({\n        key: 'circularAxisOuter',\n        flavors: ['svg'],\n        tickComponent: 'CircularAxisTickComponent',\n    }),\n    {\n        key: 'enableLabels',\n        group: 'Labels',\n        type: 'boolean',\n        required: false,\n        help: 'Enable/disable labels.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.enableLabels,\n        controlType: 'switch',\n    },\n    {\n        key: 'label',\n        group: 'Labels',\n        type: 'string | (bar: ComputedBar) => string',\n        required: false,\n        help: 'Defines how to get label text, can be a string (used to access current bar property) or a function which will receive the actual bar data.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.label,\n        controlType: 'choices',\n        controlOptions: {\n            choices: ['category', 'groupId', 'value', 'formattedValue'].map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n    {\n        key: 'labelsSkipAngle',\n        group: 'Labels',\n        type: 'number',\n        required: false,\n        help: `Skip label if corresponding arc's angle is lower than provided value.`,\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.labelsSkipAngle,\n        controlType: 'range',\n        controlOptions: {\n            unit: '°',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'labelsRadiusOffset',\n        group: 'Labels',\n        type: 'number',\n        required: false,\n        help: `\n            Define the radius to use to determine the label position, starting from inner radius,\n            this is expressed as a ratio. Centered at 0.5 by default.\n        `,\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.labelsRadiusOffset,\n        controlType: 'range',\n        controlOptions: {\n            min: 0,\n            max: 2,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'labelsTextColor',\n        group: 'Labels',\n        help: 'Defines how to compute label text color.',\n        type: 'string | object | Function',\n        required: false,\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.labelsTextColor,\n        controlType: 'inheritedColor',\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        type: '(RadialBarLayerId | RadialBarCustomLayer)[]',\n        required: false,\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer should be a component.\n            \n            The component will receive properties as defined in\n            the \\`RadialBarCustomLayerProps\\` interface\n            and must return a valid SVG element.\n        `,\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.layers,\n    },\n    {\n        key: 'isInteractive',\n        group: 'Interactivity',\n        type: 'boolean',\n        required: false,\n        help: 'Enable/disable interactivity.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.isInteractive,\n        controlType: 'switch',\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: 'RadialBarTooltipComponent',\n        required: false,\n        help: 'Override default tooltip.',\n        flavors: ['svg'],\n    },\n    {\n        key: 'onClick',\n        group: 'Interactivity',\n        type: '(bar: ComputedBar, event: MouseEvent) => void',\n        required: false,\n        help: 'onClick handler.',\n        flavors: ['svg'],\n    },\n    {\n        key: 'onMouseEnter',\n        group: 'Interactivity',\n        type: '(bar: ComputedBar, event: MouseEvent) => void',\n        required: false,\n        help: 'onMouseEnter handler.',\n        flavors: ['svg'],\n    },\n    {\n        key: 'onMouseMove',\n        group: 'Interactivity',\n        type: '(bar: ComputedBar, event: MouseEvent) => void',\n        required: false,\n        help: 'onMouseMove handler.',\n        flavors: ['svg'],\n    },\n    {\n        key: 'onMouseLeave',\n        group: 'Interactivity',\n        type: '(bar: ComputedBar, event: MouseEvent) => void',\n        required: false,\n        help: 'onMouseLeave handler.',\n        flavors: ['svg'],\n    },\n    {\n        key: 'legends',\n        group: 'Legends',\n        type: 'LegendProps[]',\n        required: false,\n        help: `Optional chart's legends.`,\n        flavors: ['svg'],\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            svgDefaultProps: {\n                dataFrom: 'keys',\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n    {\n        key: 'role',\n        group: 'Accessibility',\n        type: 'string',\n        required: false,\n        help: 'Main element role attribute.',\n        flavors: ['svg'],\n    },\n    {\n        key: 'ariaLabel',\n        group: 'Accessibility',\n        type: 'string',\n        required: false,\n        help: 'Main element [aria-label](https://www.w3.org/TR/wai-aria/#aria-label).',\n        flavors: ['svg'],\n    },\n    {\n        key: 'ariaLabelledBy',\n        group: 'Accessibility',\n        type: 'string',\n        required: false,\n        help: 'Main element [aria-labelledby](https://www.w3.org/TR/wai-aria/#aria-labelledby).',\n        flavors: ['svg'],\n    },\n    {\n        key: 'ariaDescribedBy',\n        group: 'Accessibility',\n        type: 'string',\n        required: false,\n        help: 'Main element [aria-describedby](https://www.w3.org/TR/wai-aria/#aria-describedby).',\n        flavors: ['svg'],\n    },\n    ...motionProperties(['svg'], svgDefaultProps, 'react-spring'),\n    {\n        key: 'transitionMode',\n        flavors: ['svg'],\n        help: 'Define how transitions behave.',\n        type: 'string',\n        required: false,\n        defaultValue: svgDefaultProps.transitionMode,\n        controlType: 'choices',\n        group: 'Motion',\n        controlOptions: {\n            choices: arcTransitionModes.map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n]\n\nexport const groups = groupProperties(props)\n","import React from 'react'\nimport { ResponsiveRadialBar, RadialBarSvgProps, svgDefaultProps } from '@nivo/radial-bar'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/radial-bar/meta.yml'\nimport mapper from '../../data/components/radial-bar/mapper'\nimport { groups } from '../../data/components/radial-bar/props'\n\ntype MappedRadarProps = Omit<RadialBarSvgProps, 'data' | 'width' | 'height'>\ntype UnmappedRadarProps = Omit<\n    MappedRadarProps,\n    'valueFormat' | 'radialAxisStart' | 'radialAxisEnd' | 'circularAxisInner' | 'circularAxisOuter'\n> & {\n    valueFormat: {\n        format: string\n        enabled: boolean\n    }\n    radialAxisStart: { enable: boolean } & RadialBarSvgProps['radialAxisStart']\n    radialAxisEnd: { enable: boolean } & RadialBarSvgProps['radialAxisEnd']\n    circularAxisInner: { enable: boolean } & RadialBarSvgProps['circularAxisInner']\n    circularAxisOuter: { enable: boolean } & RadialBarSvgProps['circularAxisOuter']\n}\n\nconst initialProperties: UnmappedRadarProps = {\n    valueFormat: { format: '>-.2f', enabled: true },\n\n    startAngle: svgDefaultProps.startAngle,\n    endAngle: svgDefaultProps.endAngle,\n    innerRadius: svgDefaultProps.innerRadius,\n    padding: 0.4,\n    padAngle: svgDefaultProps.padAngle,\n    cornerRadius: 2,\n\n    margin: {\n        top: 40,\n        right: 120,\n        bottom: 40,\n        left: 40,\n    },\n\n    colors: svgDefaultProps.colors,\n    borderWidth: svgDefaultProps.borderWidth,\n    borderColor: svgDefaultProps.borderColor,\n\n    enableTracks: svgDefaultProps.enableTracks,\n    tracksColor: svgDefaultProps.tracksColor,\n\n    enableRadialGrid: svgDefaultProps.enableRadialGrid,\n    enableCircularGrid: svgDefaultProps.enableCircularGrid,\n    radialAxisStart: {\n        enable: true,\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n    },\n    radialAxisEnd: {\n        enable: false,\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n    },\n    circularAxisInner: {\n        enable: false,\n        tickSize: 5,\n        tickPadding: 12,\n        tickRotation: 0,\n    },\n    circularAxisOuter: {\n        enable: true,\n        tickSize: 5,\n        tickPadding: 12,\n        tickRotation: 0,\n    },\n\n    enableLabels: svgDefaultProps.enableLabels,\n    label: svgDefaultProps.label,\n    labelsSkipAngle: svgDefaultProps.labelsSkipAngle,\n    labelsRadiusOffset: svgDefaultProps.labelsRadiusOffset,\n    labelsTextColor: svgDefaultProps.labelsTextColor,\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n    transitionMode: svgDefaultProps.transitionMode,\n\n    isInteractive: svgDefaultProps.isInteractive,\n\n    legends: [\n        {\n            anchor: 'right',\n            direction: 'column',\n            justify: false,\n            translateX: 80,\n            translateY: 0,\n            itemsSpacing: 6,\n            itemDirection: 'left-to-right',\n            itemWidth: 100,\n            itemHeight: 18,\n            itemTextColor: '#999',\n            symbolSize: 18,\n            symbolShape: 'square',\n            onClick: d => {\n                alert(JSON.stringify(d, null, '    '))\n            },\n            effects: [\n                {\n                    on: 'hover',\n                    style: {\n                        itemTextColor: '#000',\n                    },\n                },\n            ],\n        },\n    ],\n}\n\nconst generateData = () => {\n    const ids = ['Supermarket', 'Combini', 'Online']\n    if (Math.random() > 0.5) {\n        ids.push('Marché')\n    }\n\n    const categories = ['Vegetables', 'Fruits', 'Meat']\n    if (Math.random() < 0.5) {\n        categories.push('Fish')\n    }\n\n    return ids.map(id => ({\n        id,\n        data: categories.map(category => ({\n            x: category,\n            y: Math.round(Math.random() * 300),\n        })),\n    }))\n}\n\nconst RadialBar = () => (\n    <ComponentTemplate<UnmappedRadarProps, MappedRadarProps, any>\n        name=\"RadialBar\"\n        meta={meta.RadialBar}\n        icon=\"radial-bar\"\n        flavors={meta.flavors}\n        currentFlavor=\"svg\"\n        properties={groups}\n        initialProperties={initialProperties}\n        defaultProperties={svgDefaultProps}\n        propertiesMapper={mapper}\n        generateData={generateData}\n    >\n        {(properties, data, theme, logAction) => (\n            <ResponsiveRadialBar\n                data={data}\n                {...properties}\n                theme={theme}\n                onClick={bar => {\n                    logAction({\n                        type: 'click',\n                        label: `${bar.category} - ${bar.groupId}: ${bar.value}`,\n                        color: bar.color,\n                        data: bar,\n                    })\n                }}\n            />\n        )}\n    </ComponentTemplate>\n)\n\nexport default RadialBar\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { BoxLegendSvgProps, LegendAnchor, LegendItemDirection } from './types'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { computeDimensions, computePositionFromAnchor, computeItemLayout } from './compute'\nimport { LegendCanvasProps } from './types'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n        if (reverse === true) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n","import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { CircularAxisTickProps } from './types'\n\nexport const CircularAxisTick = ({ label, animated: animatedProps }: CircularAxisTickProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={animatedProps.opacity}>\n            <animated.line\n                x1={animatedProps.x1}\n                y1={animatedProps.y1}\n                x2={animatedProps.x2}\n                y2={animatedProps.y2}\n                style={theme.axis.ticks.line}\n            />\n            <animated.text\n                dx={animatedProps.textX}\n                dy={animatedProps.textY}\n                dominantBaseline=\"central\"\n                style={theme.axis.ticks.text}\n                textAnchor=\"middle\"\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { createElement, SVGProps, useMemo } from 'react'\nimport { useSpring, useTransition } from '@react-spring/web'\nimport { useMotionConfig, useTheme, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { ArcLine } from '@nivo/arcs'\nimport { CircularAxisConfig, CircularAxisTickAnimatedProps } from './types'\nimport { CircularAxisTick } from './CircularAxisTick'\n\ntype CircularAxisProps = {\n    type: 'inner' | 'outer'\n    center?: [number, number]\n    radius: number\n    startAngle: number\n    endAngle: number\n    scale: AnyScale\n} & CircularAxisConfig\n\nconst getLinePositions = (angle: number, innerRadius: number, outerRadius: number) => {\n    const start = positionFromAngle(degreesToRadians(angle), innerRadius)\n    const end = positionFromAngle(degreesToRadians(angle), outerRadius)\n\n    return {\n        x1: start.x,\n        y1: start.y,\n        x2: end.x,\n        y2: end.y,\n    }\n}\n\nconst getTextPosition = (angle: number, radius: number) => {\n    const position = positionFromAngle(degreesToRadians(angle), radius)\n\n    return {\n        textX: position.x,\n        textY: position.y,\n    }\n}\n\nexport const CircularAxis = ({\n    type,\n    center = [0, 0],\n    radius,\n    startAngle: originalStartAngle,\n    endAngle: originalEndAngle,\n    scale,\n    tickSize = 5,\n    tickPadding = 12,\n    tickComponent = CircularAxisTick,\n}: CircularAxisProps) => {\n    const startAngle = originalStartAngle - 90\n    const endAngle = originalEndAngle - 90\n\n    const theme = useTheme()\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const spring = useSpring<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>({\n        radius,\n        startAngle,\n        endAngle,\n        opacity: 1,\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    const ticks = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => ({\n            key: index,\n            label: value,\n            angle: scale(value) - 90,\n        }))\n    }, [scale])\n\n    const outerRadius = type === 'inner' ? radius - tickSize : radius + tickSize\n    const textRadius = type === 'inner' ? outerRadius - tickPadding : outerRadius + tickPadding\n\n    const transition = useTransition<typeof ticks[0], CircularAxisTickAnimatedProps>(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        from: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 0,\n        }),\n        enter: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        update: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        leave: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 0,\n        }),\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    return (\n        <g transform={`translate(${center[0]}, ${center[1]})`}>\n            <ArcLine\n                animated={spring}\n                {...(theme.axis.domain.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n                fill=\"none\"\n            />\n            {transition((animatedProps, tick) =>\n                createElement(tickComponent, {\n                    key: tick.key,\n                    label: tick.label,\n                    animated: animatedProps,\n                })\n            )}\n        </g>\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { useTransition, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\n\ninterface PolarGridProps {\n    scale: AnyScale\n    ticks?: number | number[]\n    innerRadius: number\n    outerRadius: number\n}\n\nexport const RadialGrid = ({ scale, innerRadius, outerRadius }: PolarGridProps) => {\n    const theme = useTheme()\n\n    const angles = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((angleValue, index) => ({\n            id: index,\n            angle: scale(angleValue) - 90,\n        }))\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        { id: number; angle: number },\n        { angle: number; opacity: number }\n    >(angles, {\n        keys: item => item.id,\n        initial: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        from: item => ({\n            angle: item.angle,\n            opacity: 0,\n        }),\n        enter: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        update: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        leave: item => ({\n            angle: item.angle,\n            opacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, angle) => (\n                <animated.g\n                    key={angle.id}\n                    transform={style.angle.to(v => `rotate(${v})`)}\n                    opacity={style.opacity}\n                >\n                    <line\n                        x1={innerRadius}\n                        x2={outerRadius}\n                        {...(theme.grid.line as SVGProps<SVGLineElement>)}\n                    />\n                </animated.g>\n            ))}\n        </>\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { ArcLine } from '@nivo/arcs'\n\ninterface CircularGridProps {\n    scale: AnyScale\n    startAngle: number\n    endAngle: number\n}\n\nexport const CircularGrid = ({\n    scale,\n    startAngle: originalStartAngle,\n    endAngle: originalEndAngle,\n}: CircularGridProps) => {\n    const theme = useTheme()\n\n    const startAngle = originalStartAngle - 90\n    const endAngle = originalEndAngle - 90\n\n    const radii = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => {\n            let radius = scale(value) as number\n            if ('bandwidth' in scale) {\n                radius += scale.bandwidth() / 2\n            }\n\n            return {\n                id: index,\n                radius,\n            }\n        })\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        { id: number; radius: number },\n        { radius: number; startAngle: number; endAngle: number; opacity: number }\n    >(radii, {\n        keys: item => item.id,\n        initial: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        from: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 0,\n        }),\n        enter: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        update: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        leave: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, item) => (\n                <ArcLine\n                    key={item.id}\n                    animated={style}\n                    {...(theme.grid.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n                    strokeOpacity={style.opacity}\n                    fill=\"none\"\n                />\n            ))}\n        </>\n    )\n}\n","import { AnyScale } from '@nivo/scales'\nimport { RadialGrid } from './RadialGrid'\nimport { CircularGrid } from './CircularGrid'\n\ninterface PolarGridProps {\n    center: [number, number]\n    enableRadialGrid: boolean\n    enableCircularGrid: boolean\n    angleScale: AnyScale\n    radiusScale: AnyScale\n    startAngle: number\n    endAngle: number\n}\n\nexport const PolarGrid = ({\n    center,\n    enableRadialGrid,\n    enableCircularGrid,\n    angleScale,\n    radiusScale,\n    startAngle,\n    endAngle,\n}: PolarGridProps) => {\n    const innerRadius = Math.min(...radiusScale.range())\n    const outerRadius = Math.max(...radiusScale.range())\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {enableRadialGrid && (\n                <RadialGrid\n                    scale={angleScale}\n                    innerRadius={innerRadius}\n                    outerRadius={outerRadius}\n                />\n            )}\n            {enableCircularGrid && (\n                <CircularGrid scale={radiusScale} startAngle={startAngle} endAngle={endAngle} />\n            )}\n        </g>\n    )\n}\n","import { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { RadialAxisTickProps } from './types'\n\nexport const RadialAxisTick = ({\n    label,\n    textAnchor,\n    animated: animatedProps,\n}: RadialAxisTickProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g\n            opacity={animatedProps.opacity}\n            transform={to(\n                [animatedProps.y, animatedProps.rotation],\n                (y, rotation) => `translate(${y}, 0) rotate(${rotation})`\n            )}\n        >\n            <animated.line x2={animatedProps.length} style={theme.axis.ticks.line} />\n            <animated.text\n                dx={animatedProps.textX}\n                textAnchor={textAnchor}\n                dominantBaseline=\"central\"\n                style={theme.axis.ticks.text}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { createElement, useMemo } from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useMotionConfig, normalizeAngle } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { RadialAxisConfig, RadialAxisTickAnimatedProps } from './types'\nimport { RadialAxisTick } from './RadialAxisTick'\n\ntype RadialAxisProps = {\n    type: 'start' | 'end'\n    center: [number, number]\n    angle: number\n    scale: AnyScale\n} & RadialAxisConfig\n\nexport const RadialAxis = ({\n    type,\n    center,\n    angle: rawAngle,\n    scale,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation: extraRotation = 0,\n    tickComponent = RadialAxisTick,\n}: RadialAxisProps) => {\n    const angle = normalizeAngle(rawAngle)\n\n    let textAnchor: 'start' | 'end'\n    let lineX: number\n    let textX: number\n    let tickRotation: number\n\n    if (type === 'start') {\n        tickRotation = 90 + extraRotation\n        if (angle <= 90) {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n        } else if (angle < 270) {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n            tickRotation -= 180\n        } else {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n        }\n    } else {\n        tickRotation = 90 + extraRotation\n        if (angle < 90) {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n        } else if (angle < 270) {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n            tickRotation -= 180\n        } else {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n        }\n    }\n\n    const ticks = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => {\n            let position = scale(value) as number\n            if ('bandwidth' in scale) {\n                position += scale.bandwidth() / 2\n            }\n\n            return {\n                key: index,\n                label: value,\n                position,\n            }\n        })\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const spring = useSpring<{ rotation: string }>({\n        rotation: rawAngle - 90,\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    const transition = useTransition<typeof ticks[0], RadialAxisTickAnimatedProps>(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        from: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 0,\n        }),\n        enter: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        update: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        leave: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 0,\n        }),\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    return (\n        <g transform={`translate(${center[0]}, ${center[1]})`}>\n            <animated.g transform={spring.rotation.to(value => `rotate(${value})`)}>\n                {transition((animatedProps, tick) =>\n                    createElement(tickComponent, {\n                        key: tick.key,\n                        label: tick.label,\n                        y: tick.position,\n                        textX,\n                        rotation: tickRotation,\n                        length: lineX,\n                        textAnchor,\n                        animated: animatedProps,\n                    })\n                )}\n            </animated.g>\n        </g>\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { RadialBarDatum, RadialBarTooltipProps } from './types'\n\nexport const RadialBarTooltip = <D extends RadialBarDatum>({ bar }: RadialBarTooltipProps<D>) => {\n    return (\n        <BasicTooltip\n            enableChip\n            id={\n                <span>\n                    {bar.category} - {bar.groupId}\n                </span>\n            }\n            value={bar.formattedValue}\n            color={bar.color}\n        />\n    )\n}\n","import { createElement, MouseEvent, useCallback } from 'react'\nimport { ArcsLayer, ArcGenerator } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedBar, RadialBarCommonProps, RadialBarDatum } from './types'\n\ninterface RadialBarArcsProps<D extends RadialBarDatum> {\n    center: [number, number]\n    bars: ComputedBar<D>[]\n    borderWidth: RadialBarCommonProps<D>['borderWidth']\n    borderColor: RadialBarCommonProps<D>['borderColor']\n    arcGenerator: ArcGenerator\n    isInteractive: RadialBarCommonProps<D>['isInteractive']\n    tooltip: RadialBarCommonProps<D>['tooltip']\n    onClick?: RadialBarCommonProps<D>['onClick']\n    onMouseEnter?: RadialBarCommonProps<D>['onMouseEnter']\n    onMouseMove?: RadialBarCommonProps<D>['onMouseMove']\n    onMouseLeave?: RadialBarCommonProps<D>['onMouseLeave']\n    transitionMode: RadialBarCommonProps<D>['transitionMode']\n}\n\nexport const RadialBarArcs = <D extends RadialBarDatum>({\n    center,\n    bars,\n    borderWidth,\n    borderColor,\n    arcGenerator,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode,\n}: RadialBarArcsProps<D>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            onClick?.(bar, event)\n        },\n        [onClick]\n    )\n\n    const handleMouseEnter = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { bar }), event)\n            onMouseEnter?.(bar, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { bar }), event)\n            onMouseMove?.(bar, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(bar, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    return (\n        <ArcsLayer<ComputedBar<D>>\n            center={center}\n            data={bars}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { ArcGenerator, ArcsLayer, ArcTransitionMode } from '@nivo/arcs'\nimport { RadialBarTrackDatum } from './types'\n\ninterface RadialBarTracksProps {\n    center: [number, number]\n    tracks: RadialBarTrackDatum[]\n    arcGenerator: ArcGenerator\n    transitionMode: ArcTransitionMode\n}\n\nexport const RadialBarTracks = ({\n    center,\n    tracks,\n    arcGenerator,\n    transitionMode,\n}: RadialBarTracksProps) => {\n    return (\n        <ArcsLayer<RadialBarTrackDatum>\n            center={center}\n            data={tracks}\n            arcGenerator={arcGenerator}\n            borderWidth={0}\n            borderColor=\"none\"\n            transitionMode={transitionMode}\n        />\n    )\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions, SvgWrapper, clampArc } from '@nivo/core'\nimport { ArcLabelsLayer } from '@nivo/arcs'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { PolarGrid, RadialAxis, CircularAxis } from '@nivo/polar-axes'\nimport { RadialBarLayerId, RadialBarSvgProps, ComputedBar, RadialBarDatum } from './types'\nimport { svgDefaultProps } from './props'\nimport { useRadialBar } from './hooks'\nimport { RadialBarArcs } from './RadialBarArcs'\nimport { RadialBarTracks } from './RadialBarTracks'\n\ntype InnerRadialBarProps<D extends RadialBarDatum = RadialBarDatum> = Omit<\n    RadialBarSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerRadialBar = <D extends RadialBarDatum>({\n    data,\n    maxValue = svgDefaultProps.maxValue,\n    valueFormat,\n    startAngle: originalStartAngle = svgDefaultProps.startAngle,\n    endAngle: originalEndAngle = svgDefaultProps.endAngle,\n    innerRadius: innerRadiusRatio = svgDefaultProps.innerRadius,\n    padding = svgDefaultProps.padding,\n    padAngle = svgDefaultProps.padAngle,\n    cornerRadius = svgDefaultProps.cornerRadius,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    enableTracks = svgDefaultProps.enableTracks,\n    tracksColor = svgDefaultProps.tracksColor,\n    enableRadialGrid = svgDefaultProps.enableRadialGrid,\n    enableCircularGrid = svgDefaultProps.enableCircularGrid,\n    radialAxisStart = svgDefaultProps.radialAxisStart,\n    radialAxisEnd = svgDefaultProps.radialAxisEnd,\n    circularAxisInner = svgDefaultProps.circularAxisInner,\n    circularAxisOuter = svgDefaultProps.circularAxisOuter,\n    colors = svgDefaultProps.colors,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    enableLabels = svgDefaultProps.enableLabels,\n    label = svgDefaultProps.label,\n    labelsSkipAngle = svgDefaultProps.labelsSkipAngle,\n    labelsRadiusOffset = svgDefaultProps.labelsRadiusOffset,\n    labelsTextColor = svgDefaultProps.labelsTextColor,\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode = svgDefaultProps.transitionMode,\n    legends = svgDefaultProps.legends,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerRadialBarProps<D>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const [startAngle, endAngle] = clampArc(originalStartAngle, originalEndAngle)\n\n    const {\n        center,\n        innerRadius,\n        outerRadius,\n        bars,\n        arcGenerator,\n        radiusScale,\n        valueScale,\n        tracks,\n        legendData,\n        customLayerProps,\n    } = useRadialBar<D>({\n        data,\n        maxValue,\n        valueFormat,\n        startAngle,\n        endAngle,\n        innerRadiusRatio,\n        padding,\n        padAngle,\n        cornerRadius,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        tracksColor,\n    })\n\n    const layerById: Record<RadialBarLayerId, ReactNode> = {\n        grid: null,\n        tracks: null,\n        bars: null,\n        labels: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Fragment key=\"grid\">\n                <PolarGrid\n                    center={center}\n                    enableRadialGrid={enableRadialGrid}\n                    enableCircularGrid={enableCircularGrid}\n                    angleScale={valueScale}\n                    radiusScale={radiusScale}\n                    startAngle={startAngle}\n                    endAngle={endAngle}\n                />\n                {radialAxisStart && (\n                    <RadialAxis\n                        type=\"start\"\n                        center={center}\n                        angle={Math.min(startAngle, endAngle)}\n                        scale={radiusScale}\n                        {...radialAxisStart}\n                    />\n                )}\n                {radialAxisEnd && (\n                    <RadialAxis\n                        type=\"end\"\n                        center={center}\n                        angle={Math.max(startAngle, endAngle)}\n                        scale={radiusScale}\n                        {...radialAxisEnd}\n                    />\n                )}\n                {circularAxisInner && (\n                    <CircularAxis\n                        type=\"inner\"\n                        center={center}\n                        radius={innerRadius}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        scale={valueScale}\n                        {...circularAxisInner}\n                    />\n                )}\n                {circularAxisOuter && (\n                    <CircularAxis\n                        type=\"outer\"\n                        center={center}\n                        radius={outerRadius}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        scale={valueScale}\n                        {...circularAxisOuter}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('tracks') && enableTracks) {\n        layerById.tracks = (\n            <RadialBarTracks\n                key=\"tracks\"\n                center={center}\n                tracks={tracks}\n                arcGenerator={arcGenerator}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <RadialBarArcs<D>\n                key=\"bars\"\n                center={center}\n                bars={bars}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                arcGenerator={arcGenerator}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (layers.includes('labels') && enableLabels) {\n        layerById.labels = (\n            <ArcLabelsLayer<ComputedBar<D>>\n                key=\"labels\"\n                center={center}\n                data={bars}\n                label={label}\n                radiusOffset={labelsRadiusOffset}\n                skipAngle={labelsSkipAngle}\n                textColor={labelsTextColor}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (layers.includes('legends') && legends.length > 0) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const RadialBar = <D extends RadialBarDatum = RadialBarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: RadialBarSvgProps<D>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerRadialBar<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { RadialBarDatum, RadialBarSvgProps } from './types'\nimport { RadialBar } from './RadialBar'\n\nexport const ResponsiveRadialBar = <D extends RadialBarDatum = RadialBarDatum>(\n    props: Omit<RadialBarSvgProps<D>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <RadialBar<D> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["mapAxis","key","value","settings","enable","omit","settingsMapper","valueFormat","mapFormat","radialAxisStart","radialAxisEnd","circularAxisInner","circularAxisOuter","props","group","type","required","help","description","flavors","defaultValue","svgDefaultProps","controlType","enableControlForFlavors","controlOptions","unit","min","max","step","themeProperty","polarAxisProperty","tickComponent","choices","map","choice","label","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","dataFrom","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","data","alert","JSON","stringify","motionProperties","arcTransitionModes","groups","groupProperties","initialProperties","format","enabled","startAngle","endAngle","innerRadius","padding","padAngle","cornerRadius","margin","top","right","bottom","left","colors","borderWidth","borderColor","enableTracks","tracksColor","enableRadialGrid","enableCircularGrid","tickSize","tickPadding","tickRotation","enableLabels","labelsSkipAngle","labelsRadiusOffset","labelsTextColor","animate","motionConfig","transitionMode","isInteractive","legends","itemTextColor","symbolShape","d","effects","on","style","generateData","ids","Math","random","push","categories","id","category","x","y","round","ComponentTemplate","name","meta","icon","currentFlavor","properties","defaultProperties","propertiesMapper","mapper","theme","logAction","bar","groupId","color","zeroPadding","computeDimensions","item","_padding","itemCount","Array","isArray","Error","horizontalPadding","verticalPadding","width","height","spacing","computePositionFromAnchor","containerWidth","containerHeight","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","symbolSpacing","symbolByShape","circle","size","fill","opacity","_jsx","r","cx","cy","strokeWidth","stroke","pointerEvents","diamond","transform","square","triangle","LegendSvgItem","textColor","background","symbolBorderWidth","symbolBorderColor","onMouseEnter","onMouseLeave","toggleSerie","useState","setStyle","useTheme","handleMouseEnter","useCallback","event","filter","reduce","acc","effect","handleMouseLeave","some","handler","SymbolShape","_jsxs","itemOpacity","itemBackground","cursor","e","React","hidden","symbol","textAnchor","text","dominantBaseline","userSelect","LegendSvg","length","xStep","yStep","i","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","ctx","save","translate","font","fontSize","fontFamily","forEach","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","useQuantizeColorScaleLegendData","scale","overriddenDomain","domain","reverse","v","separator","useMemo","items","range","domainValue","invertExtent","extent","LegendPropShape","PropTypes","isRequired","CircularAxisTick","animatedProps","animated","g","line","x1","y1","x2","y2","axis","ticks","dx","textX","dy","textY","getLinePositions","angle","outerRadius","positionFromAngle","degreesToRadians","getTextPosition","radius","position","CircularAxis","center","originalStartAngle","originalEndAngle","useMotionConfig","springConfig","config","spring","useSpring","immediate","getScaleTicks","textRadius","transition","useTransition","keys","tick","initial","from","enter","update","leave","ArcLine","createElement","RadialGrid","angles","angleValue","to","grid","CircularGrid","radii","bandwidth","strokeOpacity","PolarGrid","angleScale","radiusScale","RadialAxisTick","rotation","RadialAxis","lineX","rawAngle","extraRotation","normalizeAngle","commonDefaultProps","maxValue","layers","scheme","modifiers","tooltip","BasicTooltip","enableChip","formattedValue","renderWrapper","RadialBarArcs","bars","arcGenerator","onMouseMove","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","handleMouseMove","ArcsLayer","RadialBarTracks","tracks","InnerRadialBar","innerRadiusRatio","partialMargin","role","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","clampArc","maxValueDirective","getColor","useOrdinalColorScale","result","serieIds","serie","groupTotalValue","includes","datum","total","valueScale","castLinearScale","scaleLinear","castBandScale","scaleBand","d3Arc","formatValue","useValueFormatter","innerBars","currentValue","arcInnerRadius","arcOuterRadius","stackedValue","computedDatum","arc","startAngleRadians","endAngleRadians","trackRadius","legendData","barWithCategory","find","undefined","customLayerProps","layerById","labels","Fragment","ArcLabelsLayer","radiusOffset","skipAngle","SvgWrapper","layer","RadialBar","otherProps","Container","ResponsiveRadialBar","ResponsiveWrapper"],"sourceRoot":""}