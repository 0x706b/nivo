{"version":3,"file":"component---src-pages-guides-axes-tsx-0d690443b3dc23f6f332.js","mappings":"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","sources":["webpack://nivo-website/./src/components/PageContent.ts","webpack://nivo-website/./src/components/styled.ts","webpack://nivo-website/./src/components/guides/axes/scales.tsx","webpack://nivo-website/./src/components/guides/axes/theme.tsx","webpack://nivo-website/./src/components/guides/axes/AxesLegend.tsx","webpack://nivo-website/./src/components/guides/axes/AxesPosition.tsx","webpack://nivo-website/./src/components/guides/axes/AxesTicks.tsx","webpack://nivo-website/./src/pages/guides/axes.tsx","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../node_modules/lodash/_baseForOwn.js","webpack://nivo-website/../node_modules/lodash/_baseUniq.js","webpack://nivo-website/../node_modules/lodash/_createSet.js","webpack://nivo-website/../node_modules/lodash/noop.js","webpack://nivo-website/../node_modules/lodash/uniq.js"],"sourcesContent":["import styled from 'styled-components'\nimport media from '../theming/mediaQueries'\n\nexport default styled.div`\n    margin: 0 50px;\n    position: relative;\n\n    ${media.tablet`\n        & {\n            margin: 0 30px;\n        }\n    `}\n\n    ${media.mobile`\n        & {\n            margin: 0 15px;\n        }\n    `}\n`\n","import styled from 'styled-components'\nimport media from '../theming/mediaQueries'\n\nexport const FullWidthBanner = styled.div`\n    background: ${({ theme }) => theme.colors.cardBackground};\n    margin-bottom: 40px;\n    padding: 20px;\n`\n\nexport const DescriptionBlock = styled.div`\n    max-width: 800px;\n    margin: 0 auto 50px;\n\n    ${media.tablet`\n        & {\n            margin: 0 15px 50px;\n        }\n    `}\n\n    ${media.mobile`\n        & {\n            margin: 0 15px 50px;\n        }\n    `}\n`\n\nexport const Card = styled.div`\n    background: ${({ theme }) => theme.colors.cardBackground};\n    box-shadow: ${({ theme }) => theme.cardShadow};\n`\n","import { scaleLinear, scalePoint, scaleTime } from 'd3-scale'\nimport { castLinearScale } from '@nivo/scales'\n\nexport const linearXScale = castLinearScale(scaleLinear().range([0, 280]).domain([0, 80]))\n\nexport const linearYScale = castLinearScale(scaleLinear().range([160, 0]).domain([0, 35]))\n\nexport const pointXScale = scalePoint()\n    .range([0, 280])\n    .domain(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'])\npointXScale.type = 'point'\n\nexport const timeXScale = scaleTime()\n    .range([0, 280])\n    .domain([new Date(2019, 0, 1, 0, 0, 0, 0), new Date(2020, 0, 1, 0, 0, 0, 0)])\ntimeXScale.type = 'time'\n\nexport const timeXScaleHours = scaleTime()\n    .range([0, 280])\n    .domain([\n        new Date(Date.UTC(2020, 0, 1, 9, 0, 0, 0)),\n        new Date(Date.UTC(2020, 0, 1, 10, 0, 0, 0)),\n    ])\ntimeXScaleHours.type = 'time'\n","import { useMemo } from 'react'\nimport { Theme } from '@nivo/core'\nimport { useTheme } from 'styled-components'\n\nexport const useAxisTheme = (): Theme => {\n    const theme = useTheme()\n    const nivoTheme: Theme = useMemo(() => {\n        return {\n            ...theme.nivo,\n            axis: {\n                ...theme.nivo.axis,\n                domain: {\n                    ...theme.nivo.axis!.domain,\n                    line: {\n                        ...theme.nivo.axis!.domain!.line,\n                        strokeWidth: 1,\n                    },\n                },\n                legend: {\n                    ...theme.nivo.axis!.legend,\n                    text: {\n                        ...theme.nivo.axis!.legend!.text,\n                        fill: theme.colors.accent,\n                    },\n                },\n            },\n        }\n    }, [theme])\n\n    return nivoTheme\n}\n","import React from 'react'\nimport {\n    ThemeProvider,\n    // @ts-ignore\n    MotionConfigProvider,\n} from '@nivo/core'\nimport { Axis } from '@nivo/axes'\nimport { linearXScale, linearYScale } from './scales'\nimport { FullWidthBanner, DescriptionBlock } from '../../styled'\nimport { useAxisTheme } from './theme'\n\nconst axisPositions = ['start', 'middle', 'end'] as const\n\nexport const AxesLegend = () => {\n    const theme = useAxisTheme()\n\n    return (\n        <>\n            <DescriptionBlock>\n                <h2 id=\"legend\">Axis legend</h2>\n                <p>\n                    You can optionally add a legend to an axis by setting the value of the{' '}\n                    <code>legend</code> property.\n                </p>\n                <h3 id=\"legend-position\">Legend position</h3>\n                <p>\n                    Legend position is controlled by two properties, <code>legendPosition</code> and{' '}\n                    <code>legendOffset</code>.<code>legendPosition</code> must be one of:{' '}\n                    <code>start</code>, <code>middle</code> or <code>end</code>,{' '}\n                    <code>legendOffset</code> will affect y position for <strong>top</strong> and{' '}\n                    <strong>bottom</strong> axes and x position for <strong>left</strong> and{' '}\n                    <strong>right</strong> axes.\n                </p>\n            </DescriptionBlock>\n            <FullWidthBanner>\n                <ThemeProvider theme={theme}>\n                    <MotionConfigProvider animate={false}>\n                        <div\n                            className=\"guide__illustrations\"\n                            style={{ justifyContent: 'center', alignItems: 'center' }}\n                        >\n                            <svg role=\"img\" width={380} height={180}>\n                                {axisPositions.map((position, i) => (\n                                    <g key={position} transform={`translate(50,${i * 70 + 40})`}>\n                                        <Axis\n                                            axis=\"x\"\n                                            scale={linearXScale}\n                                            length={280}\n                                            legend={position}\n                                            legendPosition={position}\n                                            legendOffset={-32}\n                                            ticksPosition=\"before\"\n                                        />\n                                    </g>\n                                ))}\n                            </svg>\n                            <svg role=\"img\" width={260} height={260}>\n                                {axisPositions.map((position, i) => (\n                                    <g key={position} transform={`translate(${i * 90 + 50},50)`}>\n                                        <Axis\n                                            axis=\"y\"\n                                            scale={linearYScale}\n                                            length={160}\n                                            legend={position}\n                                            legendPosition={position}\n                                            legendOffset={-32}\n                                            ticksPosition=\"before\"\n                                        />\n                                    </g>\n                                ))}\n                            </svg>\n                        </div>\n                    </MotionConfigProvider>\n                </ThemeProvider>\n            </FullWidthBanner>\n        </>\n    )\n}\n","import React from 'react'\nimport {\n    ThemeProvider,\n    // @ts-ignore\n    MotionConfigProvider,\n} from '@nivo/core'\nimport { Axes } from '@nivo/axes'\nimport { linearXScale, linearYScale } from './scales'\nimport { FullWidthBanner, DescriptionBlock } from '../../styled'\nimport { useAxisTheme } from './theme'\n\nexport const AxesPosition = () => {\n    const theme = useAxisTheme()\n\n    return (\n        <>\n            <DescriptionBlock>\n                <h2 id=\"position\">Axis position</h2>\n                <p>\n                    Axis position is determined by the property you use{' '}\n                    <strong>(top|right|bottom|left)Axis</strong>.\n                </p>\n            </DescriptionBlock>\n            <FullWidthBanner>\n                <div className=\"guide__illustrations\">\n                    <svg role=\"img\" width={380} height={260}>\n                        <g transform=\"translate(50,50)\">\n                            <ThemeProvider theme={theme}>\n                                <MotionConfigProvider animate={false}>\n                                    <Axes\n                                        xScale={linearXScale}\n                                        yScale={linearYScale}\n                                        width={280}\n                                        height={160}\n                                        top={{\n                                            legend: 'axisTop',\n                                            legendPosition: 'middle',\n                                            legendOffset: -32,\n                                        }}\n                                        right={{\n                                            legend: 'axisRight',\n                                            legendPosition: 'middle',\n                                            legendOffset: 42,\n                                        }}\n                                        bottom={{\n                                            legend: 'axisBottom',\n                                            legendPosition: 'middle',\n                                            legendOffset: 38,\n                                        }}\n                                        left={{\n                                            legend: 'axisLeft',\n                                            legendPosition: 'middle',\n                                            legendOffset: -36,\n                                        }}\n                                    />\n                                </MotionConfigProvider>\n                            </ThemeProvider>\n                        </g>\n                    </svg>\n                </div>\n            </FullWidthBanner>\n        </>\n    )\n}\n","import React from 'react'\nimport {\n    ThemeProvider,\n    // @ts-ignore\n    MotionConfigProvider,\n} from '@nivo/core'\nimport { Axis } from '@nivo/axes'\nimport { linearXScale, pointXScale, timeXScale, timeXScaleHours } from './scales'\nimport { FullWidthBanner, DescriptionBlock } from '../../styled'\nimport { useAxisTheme } from './theme'\n\nexport const AxesTicks = () => {\n    const theme = useAxisTheme()\n\n    return (\n        <>\n            <DescriptionBlock>\n                <h2 id=\"ticks\">Axis ticks</h2>\n                <p>\n                    Axes are composed of <strong>ticks</strong>, you can control the way they are\n                    computed and their aspect. By default, computing which ticks are displayed is\n                    managed by the corresponding{' '}\n                    <a\n                        href=\"https://github.com/d3/d3-scale\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        d3 scale\n                    </a>\n                    .\n                </p>\n                <h3 id=\"ticks-values\">Ticks values</h3>\n                <p>\n                    You can use the <code>tickValues</code> property in order to customize the\n                    displayed ticks, it accepts several forms:\n                </p>\n                <ul>\n                    <li>\n                        an array of values, which should be numbers for a linear scale, values being\n                        part of the dataset for point scales, or dates for time scales.\n                    </li>\n                    <li>\n                        a number which define the number of ticks to display,{' '}\n                        <strong>doesn't work with point scale</strong>, also note that when using\n                        this form{' '}\n                        <strong>\n                            it's not guaranteed that you'll have exactly the number of ticks you\n                            asked for\n                        </strong>{' '}\n                        as d3 will make an educated guess to define them.\n                    </li>\n                    <li>\n                        a time interval, for example <code>every day</code> or{' '}\n                        <code>every 15 minutes</code>,{' '}\n                        <strong>only works when using time scales</strong>.\n                    </li>\n                </ul>\n            </DescriptionBlock>\n            <FullWidthBanner>\n                <ThemeProvider theme={theme}>\n                    <MotionConfigProvider animate={false}>\n                        <div\n                            className=\"guide__illustrations\"\n                            style={{ justifyContent: 'center', alignItems: 'center' }}\n                        >\n                            <svg role=\"img\" width={380} height={191}>\n                                <g transform={`translate(50,50)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={pointXScale as any}\n                                        tickValues={['A', 'C', 'E', 'G', 'I']}\n                                        length={280}\n                                        legend=\"point scale ['A', 'C', 'E', 'G', 'I']\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                                <g transform={`translate(50,120)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={linearXScale}\n                                        tickValues={[0, 20, 40, 60, 80]}\n                                        length={280}\n                                        legend=\"linear scale [0, 20, 40, 60, 80]\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                                <g transform={`translate(50,190)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={timeXScale as any}\n                                        tickValues={[\n                                            new Date(2019, 0, 1, 0, 0, 0, 0),\n                                            new Date(2019, 6, 1, 0, 0, 0, 0),\n                                            new Date(2020, 0, 1, 0, 0, 0, 0),\n                                        ]}\n                                        length={280}\n                                        format=\"%Y/%m\"\n                                        legend=\"time scale with three dates\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                            </svg>\n                            <svg role=\"img\" width={380} height={191}>\n                                <g transform={`translate(50,50)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={timeXScaleHours as any}\n                                        tickValues=\"every 15 minutes\"\n                                        format=\"%H:%M\"\n                                        length={280}\n                                        legend=\"time scale, every 15 minutes\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                                <g transform={`translate(50,120)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={linearXScale}\n                                        tickValues={5}\n                                        length={280}\n                                        legend=\"linear scale, tickValues: 5\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                                <g transform={`translate(50,190)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={timeXScale as any}\n                                        tickValues={5}\n                                        length={280}\n                                        format=\"%Y/%m\"\n                                        legend=\"time scale, tickValues: 5\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                            </svg>\n                        </div>\n                    </MotionConfigProvider>\n                </ThemeProvider>\n            </FullWidthBanner>\n        </>\n    )\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport Layout from '../../components/Layout'\nimport { Seo } from '../../components/Seo'\nimport PageContent from '../../components/PageContent'\nimport { AxesPosition, AxesTicks, AxesLegend } from '../../components/guides/axes'\nimport { DescriptionBlock } from '../../components/styled'\n\nconst AxesGuide = () => {\n    return (\n        <Layout>\n            <Seo title=\"Axes Guide\" description=\"Using chart axes in nivo components.\" />\n            <PageContent>\n                <div className=\"guide__header\">\n                    <h1>Axes</h1>\n                </div>\n            </PageContent>\n            <DescriptionBlock>\n                <h2>Using axes in nivo components</h2>\n                <p>\n                    Axes are built on top of{' '}\n                    <a\n                        href=\"https://github.com/d3/d3-scale\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        d3 scales\n                    </a>\n                    . A lot of nivo components make use of it (<Link to=\"/bar/\">Bar</Link>,{' '}\n                    <Link to=\"/line/\">Line</Link>, <Link to=\"/scatterplot/\">ScatterPlot</Link>\n                    …).\n                </p>\n            </DescriptionBlock>\n            <AxesPosition />\n            <AxesTicks />\n            <AxesLegend />\n        </Layout>\n    )\n}\n\nexport default AxesGuide\n","import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProp, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProp<X> | null\n        right?: CanvasAxisProp<Y> | null\n        bottom?: CanvasAxisProp<X> | null\n        left?: CanvasAxisProp<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProp<X> | undefined\n            : CanvasAxisProp<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    cacheHas = require('./_cacheHas'),\n    createSet = require('./_createSet'),\n    setToArray = require('./_setToArray');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseUniq;\n","var Set = require('./_Set'),\n    noop = require('./noop'),\n    setToArray = require('./_setToArray');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\nmodule.exports = createSet;\n","/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = noop;\n","var baseUniq = require('./_baseUniq');\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nmodule.exports = uniq;\n"],"names":["styled","media","FullWidthBanner","theme","colors","cardBackground","DescriptionBlock","Card","cardShadow","linearXScale","castLinearScale","scaleLinear","range","domain","linearYScale","pointXScale","scalePoint","type","timeXScale","scaleTime","Date","timeXScaleHours","UTC","useAxisTheme","useTheme","useMemo","nivo","axis","line","strokeWidth","legend","text","fill","accent","axisPositions","AxesLegend","id","animate","className","style","justifyContent","alignItems","role","width","height","map","position","i","transform","scale","length","legendPosition","legendOffset","ticksPosition","AxesPosition","xScale","yScale","top","right","bottom","left","AxesTicks","href","target","rel","tickValues","format","Layout","Seo","title","description","PageContent","Link","to","computeCartesianTicks","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","centerScale","lineX","lineY","textX","textY","isRTL","document","textAlign","textBaseline","translate","d","x","y","ticks","value","key","getFormatter","formatter","timeFormat","d3Format","computeGridLines","_values","isArray","Array","lines","x1","x2","y1","y2","AxisTick","_value","onClick","textAnchor","animatedProps","props","opacity","cursor","event","dominantBaseline","memoizedAxisTick","memo","Axis","renderTick","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","springConfig","useSpring","lineX2","lineY2","config","immediate","transition","useTransition","keys","tick","initial","textTransform","from","enter","update","leave","tickIndex","rotate","transitionProps","memoizedAxis","axisPropTypes","PropTypes","axisPropType","positions","Axes","axes","isXAxis","GridLine","_jsx","GridLines","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","_format","ctx","Number","degreesToRadians","String","renderAxesToCanvas","renderGridLinesToCanvas","baseFor","module","exports","object","iteratee","SetCache","arrayIncludes","arrayIncludesWith","cacheHas","createSet","setToArray","array","comparator","index","includes","isCommon","result","seen","set","outer","computed","seenIndex","push","Set","noop","baseUniq"],"sourceRoot":""}