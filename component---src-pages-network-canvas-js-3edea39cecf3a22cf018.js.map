{"version":3,"sources":["webpack:///./src/pages/network/canvas.js","webpack:///./src/data/components/network/props.js"],"names":["initialProperties","Object","freeze","pixelRatio","window","devicePixelRatio","margin","top","right","bottom","left","linkDistance","repulsivity","iterations","nodeColor","node","color","nodeBorderWidth","nodeBorderColor","theme","linkColor","NetworkCanvasDefaultProps","linkThickness","isInteractive","NetworkCanvas","name","meta","icon","flavors","currentFlavor","properties","groups","defaultProperties","generateData","generateNetworkData","getDataSize","data","nodes","length","logAction","links","onClick","type","label","id","index","props","key","enableControlForFlavors","help","description","required","controlType","group","controlOptions","unit","min","max","step","defaultValue","NetworkDefaultProps","distanceMin","distanceMax","inheritableProperties","layers","motionProperties","groupProperties"],"mappings":"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","file":"component---src-pages-network-canvas-js-3edea39cecf3a22cf018.js","sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveNetworkCanvas, NetworkCanvasDefaultProps } from '@nivo/network'\nimport ComponentTemplate from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/network/meta.yml'\nimport { groups } from '../../data/components/network/props'\nimport { generateNetworkData } from '@nivo/generators'\n\nconst initialProperties = Object.freeze({\n    pixelRatio:\n        typeof window !== 'undefined' && window.devicePixelRatio ? window.devicePixelRatio : 1,\n\n    margin: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    },\n\n    linkDistance: 'distance',\n    repulsivity: 4,\n    iterations: 60,\n\n    nodeColor: node => node.color,\n    nodeBorderWidth: 1,\n    nodeBorderColor: { theme: 'background' },\n\n    linkColor: NetworkCanvasDefaultProps.linkColor,\n    linkThickness: 1,\n\n    isInteractive: true,\n})\n\nconst generateData = () => generateNetworkData()\n\nconst NetworkCanvas = () => {\n    return (\n        <ComponentTemplate\n            name=\"NetworkCanvas\"\n            meta={meta.NetworkCanvas}\n            icon=\"network\"\n            flavors={meta.flavors}\n            currentFlavor=\"canvas\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={NetworkCanvasDefaultProps}\n            generateData={() =>\n                generateData({\n                    rootNodeRadius: 10,\n                    maxMidNodes: 32,\n                    midNodeRadius: 6,\n                    leafRadius: 3,\n                })\n            }\n            getDataSize={data => data.nodes.length}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveNetworkCanvas\n                        nodes={data.nodes}\n                        links={data.links}\n                        {...properties}\n                        theme={theme}\n                        onClick={node => {\n                            logAction({\n                                type: 'click',\n                                label: `[node] id: ${node.id}, index: ${node.index}`,\n                                color: node.color,\n                                data: node,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default NetworkCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { NetworkDefaultProps } from '@nivo/network'\nimport { motionProperties, groupProperties } from '../../../lib/componentProperties'\n\nconst props = [\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            Not required if using responsive component.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            Not required if using responsive component.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'margin',\n        group: 'Base',\n        type: 'object',\n        help: 'Chart margin.',\n        controlType: 'margin',\n        group: 'Base',\n    },\n    {\n        key: 'linkDistance',\n        group: 'Simulation',\n        type: 'number | string | (link: Link) => number',\n        help: `Control links' distance.`,\n        description: `\n            If you set a **number**, this value will be used for all links.\n\n            If you use a **string**, this will be used to pick the distance\n            from the corresponding link property, thus, this property\n            should exist on each link.\n\n            If you use a **function**, it will receive a link and must return\n            the desired distance.\n        `,\n    },\n    {\n        key: 'repulsivity',\n        group: 'Simulation',\n        type: 'number',\n        help: 'Control how nodes repel each other.',\n        description: `\n            This value will also affect the strength\n            of \\`distanceMin\\` and \\`distanceMax\\`.\n        `,\n        controlType: 'range',\n        controlOptions: {\n            min: 1,\n            max: 100,\n        },\n        defaultValue: NetworkDefaultProps.repulsivity,\n    },\n    {\n        key: 'distanceMin',\n        group: 'Simulation',\n        type: 'number',\n        help: 'Sets the minimum distance between nodes for the many-body force.',\n        defaultValue: NetworkDefaultProps.distanceMin,\n    },\n    {\n        key: 'distanceMax',\n        group: 'Simulation',\n        help: 'Sets the maximum distance between nodes for the many-body force.',\n        defaultValue: NetworkDefaultProps.distanceMax,\n    },\n    {\n        key: 'iterations',\n        group: 'Simulation',\n        help: 'Adjust the simulation quality.',\n        description: `\n            Increasing this number will result in a **more accurate simulation**,\n            however it will also involve more computing.\n        `,\n        type: 'number',\n        defaultValue: NetworkDefaultProps.iterations,\n        controlType: 'range',\n        controlOptions: {\n            min: 60,\n            max: 260,\n        },\n    },\n    {\n        key: 'nodeColor',\n        group: 'Nodes',\n        type: 'string | (node: Node) => string',\n        help: `Control nodes' color.`,\n    },\n    {\n        key: 'nodeBorderWidth',\n        group: 'Nodes',\n        type: 'number | (node: Node) => number',\n        help: `Control nodes' border width.`,\n        defaultValue: NetworkDefaultProps.nodeBorderWidth,\n        controlType: 'lineWidth',\n    },\n    {\n        key: 'nodeBorderColor',\n        group: 'Nodes',\n        type: 'string | object | (link: Link) => string',\n        help: `Control nodes' border color.`,\n        defaultValue: NetworkDefaultProps.nodeBorderColor,\n        controlType: 'inheritedColor',\n    },\n    {\n        key: 'linkThickness',\n        enableControlForFlavors: ['canvas'],\n        group: 'Links',\n        type: 'number | (link: Link) => number',\n        help: `Control links' thickness.`,\n        defaultValue: NetworkDefaultProps.linkThickness,\n        controlType: 'lineWidth',\n    },\n    {\n        key: 'linkColor',\n        group: 'Links',\n        type: 'string | (link: Link) => string',\n        help: `Control links' color.`,\n        defaultValue: NetworkDefaultProps.linkColor,\n        controlType: 'inheritedColor',\n        controlOptions: {\n            inheritableProperties: ['source.color', 'target.color'],\n        },\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom tooltip component.',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML\n            element and will receive the node's data.\n        `,\n    },\n    {\n        key: 'onClick',\n        group: 'Interactivity',\n        help: 'onClick handler.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        required: false,\n        defaultValue: NetworkDefaultProps.layers,\n    },\n    ...motionProperties(['svg'], NetworkDefaultProps),\n]\n\nexport const groups = groupProperties(props)\n"],"sourceRoot":""}