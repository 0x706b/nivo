{"version":3,"file":"23f4a609726e3cbc1b7446dae4823d7f061dce94-76516e6d02a5170cee4c.js","mappings":"mHAAO,SAASA,EAASC,GACvB,OAAY,MAALA,EAAY,KAAOC,EAASD,GAE9B,SAASC,EAASD,GACvB,GAAiB,mBAANA,EAAkB,MAAM,IAAIE,MACvC,OAAOF,E,2FCLF,SAASG,IACd,OAAO,EAEM,SAAS,EAACC,GACvB,OAAO,WACL,OAAOA,G,2FCLX,SAASC,EAAMC,GACb,IAAIC,EAAM,EACNC,EAAWF,EAAKE,SAChBC,EAAID,GAAYA,EAASE,OAC7B,GAAKD,EAAgB,OAASA,GAAK,GACjCF,GAAOC,EAASC,GAAGE,WADbJ,EAAM,EAGdD,EAAKK,MAAQJ,ECIA,SAASK,EAAUC,EAAML,GACtC,IAEIF,EAEAQ,EACAC,EACAN,EACAO,EAPAC,EAAO,IAAIC,EAAKL,GAChBM,GAAUN,EAAKF,QAAUM,EAAKN,MAAQE,EAAKF,OAE3CS,EAAQ,CAACH,GAOb,IAFgB,MAAZT,IAAkBA,EAAWa,GAE1Bf,EAAOc,EAAME,OAGlB,GAFIH,IAAQb,EAAKK,OAASL,EAAKO,KAAKF,QAE/BI,EAASP,EAASF,EAAKO,SAAWG,EAAID,EAAOL,QAGhD,IAFAJ,EAAKE,SAAW,IAAIe,MAAMP,GAErBP,EAAIO,EAAI,EAAGP,GAAK,IAAKA,EACxBW,EAAMI,KAAKV,EAAQR,EAAKE,SAASC,GAAK,IAAIS,EAAKH,EAAON,KACtDK,EAAMW,OAASnB,EACfQ,EAAMY,MAAQpB,EAAKoB,MAAQ,EAKjC,OAAOT,EAAKU,WAAWC,GAOzB,SAASP,EAAgBQ,GACvB,OAAOA,EAAErB,SAGX,SAASsB,EAASxB,GAChBA,EAAKO,KAAOP,EAAKO,KAAKA,KAGjB,SAASe,EAActB,GAC5B,IAAIyB,EAAS,EAEb,GACEzB,EAAKyB,OAASA,SACNzB,EAAOA,EAAKmB,SAAWnB,EAAKyB,SAAWA,GAE5C,SAASb,EAAKL,GACnBmB,KAAKnB,KAAOA,EACZmB,KAAKN,MAAQM,KAAKD,OAAS,EAC3BC,KAAKP,OAAS,K,iCAEhBP,EAAKe,UAAYrB,EAAUqB,UAAY,CACrCC,YAAahB,EACbb,MDvDa,WACb,OAAO2B,KAAKG,UAAU9B,ICuDtB+B,KClEa,SAAUC,GACvB,IACIC,EAEA9B,EACAC,EACAO,EALAV,EAAO0B,KAEPO,EAAO,CAACjC,GAKZ,GAGE,IAFAgC,EAAUC,EAAKC,UAAWD,EAAO,GAE1BjC,EAAOgC,EAAQhB,OAEpB,GADAe,EAAS/B,GAAOE,EAAWF,EAAKE,SAClB,IAAKC,EAAI,EAAGO,EAAIR,EAASE,OAAQD,EAAIO,IAAKP,EACtD8B,EAAKf,KAAKhB,EAASC,UAGhB8B,EAAK7B,QAEd,OAAOsB,MDgDPG,UEnEa,SAAUE,GAQvB,IAPA,IAGI7B,EACAC,EACAO,EALAV,EAAO0B,KACPZ,EAAQ,CAACd,GACTiC,EAAO,GAKJjC,EAAOc,EAAME,OAElB,GADAiB,EAAKf,KAAKlB,GAAOE,EAAWF,EAAKE,SACnB,IAAKC,EAAI,EAAGO,EAAIR,EAASE,OAAQD,EAAIO,IAAKP,EACtDW,EAAMI,KAAKhB,EAASC,IAIxB,KAAOH,EAAOiC,EAAKjB,OACjBe,EAAS/B,GAGX,OAAO0B,MFiDPL,WGpEa,SAAUU,GAMvB,IALA,IAEI7B,EACAC,EAHAH,EAAO0B,KACPZ,EAAQ,CAACd,GAINA,EAAOc,EAAME,OAElB,GADAe,EAAS/B,GAAOE,EAAWF,EAAKE,SAClB,IAAKC,EAAID,EAASE,OAAS,EAAGD,GAAK,IAAKA,EACpDW,EAAMI,KAAKhB,EAASC,IAIxB,OAAOuB,MHwDPzB,IIrEa,SAAUI,GACvB,OAAOqB,KAAKG,WAAU,SAAU7B,GAK9B,IAJA,IAAIC,GAAOI,EAAML,EAAKO,OAAS,EAC3BL,EAAWF,EAAKE,SAChBC,EAAID,GAAYA,EAASE,SAEpBD,GAAK,GACZF,GAAOC,EAASC,GAAGE,MAGrBL,EAAKK,MAAQJ,MJ4DfkC,KKtEa,SAAUC,GACvB,OAAOV,KAAKL,YAAW,SAAUrB,GAC3BA,EAAKE,UACPF,EAAKE,SAASiC,KAAKC,OLoEvBC,KMvEa,SAAUC,GAKvB,IAJA,IAAIC,EAAQb,KACRc,EAkBN,SAA6BC,EAAGC,GAC9B,GAAID,IAAMC,EAAG,OAAOD,EACpB,IAAIE,EAASF,EAAEG,YACXC,EAASH,EAAEE,YACXE,EAAI,KACRL,EAAIE,EAAO3B,MACX0B,EAAIG,EAAO7B,MAEX,KAAOyB,IAAMC,GACXI,EAAIL,EACJA,EAAIE,EAAO3B,MACX0B,EAAIG,EAAO7B,MAGb,OAAO8B,EAhCQC,CAAoBR,EAAOD,GACtCxB,EAAQ,CAACyB,GAENA,IAAUC,GACfD,EAAQA,EAAMpB,OACdL,EAAMI,KAAKqB,GAKb,IAFA,IAAIS,EAAIlC,EAAMV,OAEPkC,IAAQE,GACb1B,EAAMmC,OAAOD,EAAG,EAAGV,GACnBA,EAAMA,EAAInB,OAGZ,OAAOL,GNuDP8B,UOxEa,WAIb,IAHA,IAAI5C,EAAO0B,KACPZ,EAAQ,CAACd,GAENA,EAAOA,EAAKmB,QACjBL,EAAMI,KAAKlB,GAGb,OAAOc,GPiEPoC,YQzEa,WACb,IAAIpC,EAAQ,GAIZ,OAHAY,KAAKI,MAAK,SAAU9B,GAClBc,EAAMI,KAAKlB,MAENc,GRqEPqC,OS1Ea,WACb,IAAIA,EAAS,GAMb,OALAzB,KAAKL,YAAW,SAAUrB,GACnBA,EAAKE,UACRiD,EAAOjC,KAAKlB,MAGTmD,GToEPC,MU3Ea,WACb,IAAIzC,EAAOe,KACP0B,EAAQ,GAUZ,OATAzC,EAAKmB,MAAK,SAAU9B,GACdA,IAASW,GAEXyC,EAAMlC,KAAK,CACTmC,OAAQrD,EAAKmB,OACbmC,OAAQtD,OAIPoD,GVgEPG,KArCF,WACE,OAAOjD,EAAUoB,MAAML,WAAWG,M,mCWxCrB,SAAS,EAACL,EAAQqC,EAAIC,EAAIC,EAAIC,GAO3C,IANA,IACI3D,EADAc,EAAQK,EAAOjB,SAEfC,GAAK,EACLO,EAAII,EAAMV,OACV4C,EAAI7B,EAAOd,QAAUqD,EAAKF,GAAMrC,EAAOd,QAElCF,EAAIO,IACXV,EAAOc,EAAMX,IAASsD,GAAKA,EAAIzD,EAAK2D,GAAKA,EACzC3D,EAAKwD,GAAKA,EAAIxD,EAAK0D,GAAKF,GAAMxD,EAAKK,MAAQ2C,E,oECThC,SAAS,EAAChD,GACvBA,EAAKwD,GAAKI,KAAKC,MAAM7D,EAAKwD,IAC1BxD,EAAKyD,GAAKG,KAAKC,MAAM7D,EAAKyD,IAC1BzD,EAAK0D,GAAKE,KAAKC,MAAM7D,EAAK0D,IAC1B1D,EAAK2D,GAAKC,KAAKC,MAAM7D,EAAK2D,I,4XCJb,SAAS,EAACxC,EAAQqC,EAAIC,EAAIC,EAAIC,GAO3C,IANA,IACI3D,EADAc,EAAQK,EAAOjB,SAEfC,GAAK,EACLO,EAAII,EAAMV,OACV4C,EAAI7B,EAAOd,QAAUsD,EAAKF,GAAMtC,EAAOd,QAElCF,EAAIO,IACXV,EAAOc,EAAMX,IAASqD,GAAKA,EAAIxD,EAAK0D,GAAKA,EACzC1D,EAAKyD,GAAKA,EAAIzD,EAAK2D,GAAKF,GAAMzD,EAAKK,MAAQ2C,E,eCoD/C,MAAe,SAAUc,EAAOC,GAC9B,SAASC,EAAS7C,EAAQqC,EAAIC,EAAIC,EAAIC,IA3DjC,SAAuBI,EAAO5C,EAAQqC,EAAIC,EAAIC,EAAIC,GAmBvD,IAlBA,IAEIM,EACAC,EAIAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAhBAC,EAAO,GACP9D,EAAQK,EAAOjB,SAGf2E,EAAK,EACLC,EAAK,EACLpE,EAAII,EAAMV,OAGVC,EAAQc,EAAOd,MASZwE,EAAKnE,GAAG,CACbyD,EAAKT,EAAKF,EAAIY,EAAKT,EAAKF,EAExB,GACEY,EAAWvD,EAAMgE,KAAMzE,aACfgE,GAAYS,EAAKpE,GAO3B,IALA4D,EAAWC,EAAWF,EAEtBM,EAAON,EAAWA,GADlBK,EAAQd,KAAKmB,IAAIX,EAAKD,EAAIA,EAAKC,IAAO/D,EAAQ0D,IAE9CU,EAAWb,KAAKmB,IAAIR,EAAWI,EAAMA,EAAOL,GAErCQ,EAAKpE,IAAKoE,EAAI,CAOnB,GANAT,GAAYH,EAAYpD,EAAMgE,GAAIzE,MAC9B6D,EAAYI,IAAUA,EAAWJ,GACjCA,EAAYK,IAAUA,EAAWL,GACrCS,EAAON,EAAWA,EAAWK,GAC7BF,EAAWZ,KAAKmB,IAAIR,EAAWI,EAAMA,EAAOL,IAE7BG,EAAU,CACvBJ,GAAYH,EACZ,MAGFO,EAAWD,EAIbI,EAAK1D,KAAK+C,EAAM,CACd5D,MAAOgE,EACPW,KAAMb,EAAKC,EACXlE,SAAUY,EAAMmE,MAAMJ,EAAIC,KAExBb,EAAIe,MAAM,OAAYf,EAAKT,EAAIC,EAAIC,EAAIrD,EAAQoD,GAAMW,EAAKC,EAAWhE,EAAQsD,GAAS,EAAaM,EAAKT,EAAIC,EAAIpD,EAAQmD,GAAMW,EAAKE,EAAWhE,EAAQqD,EAAIC,GAC9JtD,GAASgE,EAAUQ,EAAKC,GAOxBI,CAAcnB,EAAO5C,EAAQqC,EAAIC,EAAIC,EAAIC,GAO3C,OAJAK,EAASD,MAAQ,SAAUjE,GACzB,OAAOgE,GAAQhE,GAAKA,GAAK,EAAIA,EAAI,IAG5BkE,EATT,EA3DkB,EAAIJ,KAAKuB,KAAK,IAAM,G,sbCMzBC,EAAoB,SAAC,EAAD,YAI5BC,EAAAA,EAAAA,IAAG,CAACvF,EAAE,EAAJ,IAAmB,iEAEbwF,EAAqB,SAAC,EAAD,YAI7BD,EAAAA,EAAAA,IAAG,CAACvF,EAAE,EAAJ,IAAmB,wEAEbyF,EAA2B,SAAC,EAAD,YAKpCF,EAAAA,EAAAA,IACI,CAACvF,EAAE,EADL,IAEE,oCACiBA,GAAK0F,IAAAA,EAAAA,EADtB,WAEQC,GAAKD,IAAAA,EAAAA,EAFb,+BCrBFE,EAAyB,YAON,IDXQ5F,EAAD,ECK5BE,EAMoB,EANpBA,KACA2F,EAKoB,EALpBA,cACAC,EAIoB,EAJpBA,YACAC,EAGoB,EAHpBA,YACAC,EAEoB,EAFpBA,kBACAC,EACoB,EADpBA,cAEMC,GAAQC,EAAAA,EAAAA,MAERC,EACFL,GACA7F,EADA6F,SAECE,IAAAA,GAAuBnC,KAAAA,IAAS5D,EAAT4D,MAAqB5D,EAArB4D,QAH5B,GAKMuC,EAAkBL,GAAqB9F,EAA7C,SAEA,OACI,UAAC,MAAD,CAAYoG,WDtBatG,ECsBe6F,EAAD,EDtBf,ECsBiCA,EAAzD,GDrBJN,EAAAA,EAAAA,IAAG,CAACvF,EAAF,IAAS,iDCqBP,WACI,SAAC,SAAD,CACI,sBAAqBE,EADzB,GAEIqG,OAAOhB,EAAAA,EAAAA,IAAGM,EAAD,OAAsB,SAAAW,GAAC,OAAI1C,KAAAA,IAAAA,EAAJ,MAChCnC,QAAQ4D,EAAAA,EAAAA,IAAGM,EAAD,QAAuB,SAAAW,GAAC,OAAI1C,KAAAA,IAAAA,EAAJ,MAClC2C,KAAMvG,EAAAA,KAAYA,EAAZA,KAAwB2F,EAJlC,MAKIa,YALJ,EAMIC,OAAQzG,EANZ,YAOI0G,YAAa1G,EAPjB,QAQI2G,aAAc3G,EARlB,aASI4G,YAAa5G,EATjB,YAUI6G,aAAc7G,EAVlB,aAWI8G,QAAS9G,EAAK8G,UAEjBZ,IACG,SAAC,SAAD,CACI,uBAAsBlG,EAD1B,GAEI+G,WAFJ,SAGIC,iBAHJ,UAIIC,MAAK,KACEjB,EAAAA,OADF,MAEDO,KAAMvG,EAFL,eAGDkH,cAAe,SAEnBR,YAAaf,EATjB,aAUIS,UAAWhB,EACPO,EADwB,OAExBA,EAFwB,OAGxBA,EAbR,wBAgBK3F,EAAKmH,QAGbhB,IACG,SAAC,SAAD,CACI,6BAA4BnG,EADhC,GAEIgH,iBAFJ,UAGIC,MAAK,KACEjB,EAAAA,OADF,MAEDO,KAAMvG,EAFL,qBAGDkH,cAAe,SAEnBR,YAAaf,EARjB,mBASIS,UAAWhB,EACPO,EADwB,aAExBA,EAFwB,aAGxBA,EAZR,8BAeK3F,EAAKoH,kBAObC,GAAcC,EAAAA,EAAAA,MAApB,GC7EDC,EAAgC,gBAAyBvH,EAAzB,cAClC,eAAcwH,GAAIxH,EAAlB,GAA2BK,MAAOL,EAAlC,eAAuDyH,YAAvD,EAAyEC,MAAO1H,EAAK0H,SAG5EC,GAAqBL,EAAAA,EAAAA,MAA3B,GCFDM,EAA6B,YAOV,IHRS9H,EAAD,EGE7BE,EAMoB,EANpBA,KACA2F,EAKoB,EALpBA,cACAC,EAIoB,EAJpBA,YACAC,EAGoB,EAHpBA,YACAC,EAEoB,EAFpBA,kBACAC,EACoB,EADpBA,cAEMC,GAAQC,EAAAA,EAAAA,MAERC,EACFL,GACA7F,EADA6F,SAECE,IAAAA,GAAuBnC,KAAAA,IAAS5D,EAAT4D,MAAqB5D,EAArB4D,QAH5B,GAKMuC,EAAkBL,GAAqB9F,EAA7C,SAEA,OACI,UAAC,QAAD,CACI,sBAAqBA,EADzB,GAEIwH,GAAIxH,EAAAA,KAAAA,QAAAA,UAFR,KAGIiH,MAAO,CACHY,UADG,aAEHC,SAFG,WAGHC,IAHG,EAIHC,KAJG,EAKH5B,WH3BkBtG,EG2BW6F,EAAD,EH3BX,EG2B6BA,EAL3C,GHrBfN,EAAAA,EAAAA,IAAG,CAACvF,EAAF,IAAS,sDG2BCuG,MAAOV,EANJ,MAOHlE,OAAQkE,EAPL,OAQHC,YARG,EASHqC,YATG,QAUHC,YAAalI,EAVV,YAWHmI,SAAU,UAdlB,WAiBI,SAAC,QAAD,CACIlB,MAAO,CACHY,UADG,aAEHC,SAFG,WAGHC,IAHG,EAIHC,KAJG,EAKHI,QAASpI,EALN,QAMHqG,MAAOV,EANJ,MAOHlE,OAAQkE,EAPL,OAQH0C,WAAY1C,EAAc+B,OAE9Bf,aAAc3G,EAXlB,aAYI4G,YAAa5G,EAZjB,YAaI6G,aAAc7G,EAblB,aAcI8G,QAAS9G,EAAK8G,UAEjBZ,IACG,SAAC,SAAD,CACI,uBAAsBlG,EAD1B,GAEIiH,MAAK,KACEjB,EAAAA,OADF,MAED8B,SAFC,WAGDQ,QAHC,OAIDP,KAJC,EAKDC,MALC,EAMD3B,MANC,GAOD5E,OAPC,GAQD8G,eARC,SASDC,WATC,SAUDC,WAVC,SAWDf,MAAO1H,EAXN,eAYD0I,gBAZC,gBAaDtC,UAAWd,EACPK,EADyB,OAEzBA,EAFyB,OAGzBA,EAhBH,eAkBDyC,QAASzC,EAlBR,aAmBDuB,cAAe,SArBvB,SAwBKlH,EAAKmH,QAGbhB,IACG,SAAC,SAAD,CACI,6BAA4BnG,EADhC,GAEIiH,MAAK,KACEjB,EAAAA,OADF,MAED8B,SAFC,WAGDQ,QAHC,OAIDC,eAJC,aAKDC,WALC,SAMDC,WANC,SAODpC,MAPC,GAQD5E,OARC,GASDiG,MAAO1H,EATN,qBAUD0I,gBAVC,WAWDtC,UAAWb,EACPI,EAD+B,aAE/BA,EAF+B,aAG/BA,EAdH,qBAgBDyC,QAASzC,EAhBR,mBAiBDuB,cAAe,SAnBvB,SAsBKlH,EAAKoH,kBAObuB,GAAkBrB,EAAAA,EAAAA,MAAxB,GC9GMsB,EAgBT,CACAC,OAAQ,CADR,SAGAC,SAHA,KAIAzI,MAJA,QAMA0I,KANA,WAOAC,YAPA,EAQAC,aARA,EASAC,aATA,EAWAC,OAAQ,CAAEC,OAAQ,QAClBC,QAZA,mBAaAC,YAbA,IAeAzD,aAfA,EAgBAsB,MAhBA,iBAiBApB,cAjBA,EAkBAwD,eAAgB,CAAEC,KAAF,QAAiBC,UAAW,CAAC,CAAC,SAAF,KAC5CC,aAnBA,EAqBA5D,mBArBA,EAsBAsB,YAtBA,KAuBAuC,gBAvBA,GAwBAC,oBAxBA,MAyBAC,mBAzBA,EA0BAC,qBAAsB,CAAEN,KAAF,QAAiBC,UAAW,CAAC,CAAC,SAAF,KAElD7D,YA5BA,EA6BAsC,YAAa,CAAEsB,KAAF,QAAiBC,UAAW,CAAC,CAAC,SAAF,KAEzCM,eA/BA,EAgCAC,QAhCA,EAkCAC,KAlCA,MAoCAC,SApCA,EAqCAC,aAAc,UAGLC,EAAe,QAExBC,cAFwB,EAGxBC,KAHwB,GAIxB/D,KAAM,KAGGgE,EAAgB,QAEzBF,cAAe1B,IAGN6B,EAAkB,QAE3BC,WAAY,oBAAOC,QAAyBA,OAAAA,kBAA+B,ICnElEC,EAAa,CACtBC,OCTW,SAAUzJ,EAAQqC,EAAIC,EAAIC,EAAIC,GAC3C,IACIxD,EAEAF,EAHAa,EAAQK,EAAOjB,SAEfQ,EAAII,EAAMV,OAEVyK,EAAO,IAAI5J,MAAMP,EAAI,GAEzB,IAAKmK,EAAK,GAAK5K,EAAME,EAAI,EAAGA,EAAIO,IAAKP,EACnC0K,EAAK1K,EAAI,GAAKF,GAAOa,EAAMX,GAAGE,OAKhC,SAASyK,EAAU3K,EAAG4K,EAAG1K,EAAOmD,EAAIC,EAAIC,EAAIC,GAC1C,GAAIxD,GAAK4K,EAAI,EAAG,CACd,IAAI/K,EAAOc,EAAMX,GAGjB,OAFAH,EAAKwD,GAAKA,EAAIxD,EAAKyD,GAAKA,EACxBzD,EAAK0D,GAAKA,OAAI1D,EAAK2D,GAAKA,GAI1B,IAAIqH,EAAcH,EAAK1K,GACnB8K,EAAc5K,EAAQ,EAAI2K,EAC1BhI,EAAI7C,EAAI,EACR+K,EAAKH,EAAI,EAEb,KAAO/H,EAAIkI,GAAI,CACb,IAAIC,EAAMnI,EAAIkI,IAAO,EACjBL,EAAKM,GAAOF,EAAajI,EAAImI,EAAM,EAAOD,EAAKC,EAGjDF,EAAcJ,EAAK7H,EAAI,GAAK6H,EAAK7H,GAAKiI,GAAe9K,EAAI,EAAI6C,KAAKA,EACtE,IAAIoI,EAAYP,EAAK7H,GAAKgI,EACtBK,EAAahL,EAAQ+K,EAEzB,GAAI1H,EAAKF,EAAKG,EAAKF,EAAI,CACrB,IAAI6H,GAAM9H,EAAK6H,EAAa3H,EAAK0H,GAAa/K,EAC9CyK,EAAU3K,EAAG6C,EAAGoI,EAAW5H,EAAIC,EAAI6H,EAAI3H,GACvCmH,EAAU9H,EAAG+H,EAAGM,EAAYC,EAAI7H,EAAIC,EAAIC,OACnC,CACL,IAAI4H,GAAM9H,EAAK4H,EAAa1H,EAAKyH,GAAa/K,EAC9CyK,EAAU3K,EAAG6C,EAAGoI,EAAW5H,EAAIC,EAAIC,EAAI6H,GACvCT,EAAU9H,EAAG+H,EAAGM,EAAY7H,EAAI+H,EAAI7H,EAAIC,IA/B5CmH,CAAU,EAAGpK,EAAGS,EAAOd,MAAOmD,EAAIC,EAAIC,EAAIC,IDDxCqB,KAFsB,IAGtBC,MAHsB,EAItBuG,UEVW,SAAUrK,EAAQqC,EAAIC,EAAIC,EAAIC,IAC3B,EAAfxC,EAAOC,MAAY6D,EAAQD,EAAA,GAAM7D,EAAQqC,EAAIC,EAAIC,EAAIC,IFUpDK,SAAUyH,GGYDC,EAAmB,gBAC5BrF,EAD4B,QAE5B5E,EAF4B,SAG5BsH,EAH4B,OAI5BE,EAJ4B,eAK5BC,EAL4B,eAM5BpD,EAN4B,oBAO5B6D,EAP4B,kBAQ5BC,EAR4B,sBAS5BZ,EAT4B,oBAqB5B2C,EAAAA,EAAAA,UAAQ,WACJ,IAAMC,EC3CC,WACb,IAAI7C,EAAO/E,EACPH,GAAQ,EACRM,EAAK,EACLC,EAAK,EACLyH,EAAe,CAAC,GAChBC,EAAeC,EAAA,EACfC,EAAaD,EAAA,EACbE,EAAeF,EAAA,EACfG,EAAgBH,EAAA,EAChBI,EAAcJ,EAAA,EAElB,SAASH,EAAQjL,GAOf,OANAA,EAAK6C,GAAK7C,EAAK8C,GAAK,EACpB9C,EAAK+C,GAAKS,EACVxD,EAAKgD,GAAKS,EACVzD,EAAKU,WAAW+K,GAChBP,EAAe,CAAC,GACZhI,GAAOlD,EAAKU,WAAW,KACpBV,EAGT,SAASyL,EAAapM,GACpB,IAAIqM,EAAIR,EAAa7L,EAAKoB,OACtBoC,EAAKxD,EAAKwD,GAAK6I,EACf5I,EAAKzD,EAAKyD,GAAK4I,EACf3I,EAAK1D,EAAK0D,GAAK2I,EACf1I,EAAK3D,EAAK2D,GAAK0I,EACf3I,EAAKF,IAAIA,EAAKE,GAAMF,EAAKE,GAAM,GAC/BC,EAAKF,IAAIA,EAAKE,GAAMF,EAAKE,GAAM,GACnC3D,EAAKwD,GAAKA,EACVxD,EAAKyD,GAAKA,EACVzD,EAAK0D,GAAKA,EACV1D,EAAK2D,GAAKA,EAEN3D,EAAKE,WACPmM,EAAIR,EAAa7L,EAAKoB,MAAQ,GAAK0K,EAAa9L,GAAQ,EACxDwD,GAAM2I,EAAYnM,GAAQqM,EAC1B5I,GAAMuI,EAAWhM,GAAQqM,GACzB3I,GAAMuI,EAAajM,GAAQqM,GAElB7I,IAAIA,EAAKE,GAAMF,EAAKE,GAAM,IADnCC,GAAMuI,EAAclM,GAAQqM,GAEnB5I,IAAIA,EAAKE,GAAMF,EAAKE,GAAM,GACnCoF,EAAK/I,EAAMwD,EAAIC,EAAIC,EAAIC,IA4C3B,OAxCAiI,EAAQ/H,MAAQ,SAAU/D,GACxB,OAAOwM,UAAUlM,QAAUyD,IAAU/D,EAAG8L,GAAW/H,GAGrD+H,EAAQW,KAAO,SAAUzM,GACvB,OAAOwM,UAAUlM,QAAU+D,GAAMrE,EAAE,GAAIsE,GAAMtE,EAAE,GAAI8L,GAAW,CAACzH,EAAIC,IAGrEwH,EAAQ7C,KAAO,SAAUjJ,GACvB,OAAOwM,UAAUlM,QAAU2I,GAAO,OAASjJ,GAAI8L,GAAW7C,GAG5D6C,EAAQY,QAAU,SAAU1M,GAC1B,OAAOwM,UAAUlM,OAASwL,EAAQE,aAAahM,GAAG2M,aAAa3M,GAAK8L,EAAQE,gBAG9EF,EAAQE,aAAe,SAAUhM,GAC/B,OAAOwM,UAAUlM,QAAU0L,EAA4B,mBAANhM,EAAmBA,GAAI,EAAAiM,EAAA,IAAUjM,GAAI8L,GAAWE,GAGnGF,EAAQa,aAAe,SAAU3M,GAC/B,OAAOwM,UAAUlM,OAASwL,EAAQI,WAAWlM,GAAGmM,aAAanM,GAAGoM,cAAcpM,GAAGqM,YAAYrM,GAAK8L,EAAQI,cAG5GJ,EAAQI,WAAa,SAAUlM,GAC7B,OAAOwM,UAAUlM,QAAU4L,EAA0B,mBAANlM,EAAmBA,GAAI,EAAAiM,EAAA,IAAUjM,GAAI8L,GAAWI,GAGjGJ,EAAQK,aAAe,SAAUnM,GAC/B,OAAOwM,UAAUlM,QAAU6L,EAA4B,mBAANnM,EAAmBA,GAAI,EAAAiM,EAAA,IAAUjM,GAAI8L,GAAWK,GAGnGL,EAAQM,cAAgB,SAAUpM,GAChC,OAAOwM,UAAUlM,QAAU8L,EAA6B,mBAANpM,EAAmBA,GAAI,EAAAiM,EAAA,IAAUjM,GAAI8L,GAAWM,GAGpGN,EAAQO,YAAc,SAAUrM,GAC9B,OAAOwM,UAAUlM,QAAU+L,EAA2B,mBAANrM,EAAmBA,GAAI,EAAAiM,EAAA,IAAUjM,GAAI8L,GAAWO,GAG3FP,ED5Cec,GAAAA,KACN,CAACrG,EADKqG,IAAAA,KAEN/B,EAFM+B,IAAAA,OAAAA,GAAAA,aAAAA,GAAAA,aAAhB,GAOA,GAAI5G,IAAJ,EAAsC,CAClC,IAAM+D,EAAqBF,EAA3B,EAA6CT,EAE7C0C,EAAQ,UAAUe,GAAAA,CAAlBf,IAAAA,GAGJ,OAAO,IACR,CAAC,EAAD,cApCyB,KAgDnBgB,EAAe,gBACxBjM,EADwB,OAExBkM,EAFwB,kBAMtBlB,EAAAA,EAAAA,UAAQ,kBAAMrL,EAAAA,EAAAA,IAAAA,GAAAA,IAAN,KAA4C,CAACK,EAN/B,KAoBfmM,EAAa,YAgDnB,IA/CHvM,EA+CE,EA/CFA,KACA8F,EA8CE,EA9CFA,MACA5E,EA6CE,EA7CFA,OA6CE,IA5CFqH,SAAAA,OA4CE,MA5CSF,EAAmBE,SA4C5B,MA3CFzI,MAAAA,OA2CE,MA3CMuI,EAAmBvI,MA2CzB,EA1CF0M,EA0CE,EA1CFA,YA0CE,IAzCF/D,WAAAA,OAyCE,MAzCWJ,EAAmBI,WAyC9B,MAxCFD,KAAAA,OAwCE,MAxCKH,EAAmBG,KAwCxB,MAvCFE,aAAAA,OAuCE,MAvCaL,EAAmBK,aAuChC,MAtCFC,aAAAA,OAsCE,MAtCaN,EAAmBM,aAsChC,MArCF/B,MAAAA,OAqCE,MArCMyB,EAAmBzB,MAqCzB,MApCFuC,YAAAA,OAoCE,MApCYd,EAAmBc,YAoC/B,MAnCF5D,kBAAAA,OAmCE,MAnCkB8C,EAAmB9C,kBAmCrC,MAlCFsB,YAAAA,OAkCE,MAlCYwB,EAAmBxB,YAkC/B,MAjCFuC,gBAAAA,OAiCE,MAjCgBf,EAAmBe,gBAiCnC,MAhCFC,oBAAAA,OAgCE,MAhCoBhB,EAAmBgB,oBAgCvC,MA/BFC,mBAAAA,OA+BE,MA/BmBjB,EAAmBiB,mBA+BtC,MA9BFV,OAAAA,OA8BE,MA9BOP,EAAmBO,OA8B1B,MA7BFE,QAAAA,OA6BE,MA7BQT,EAAmBS,QA6B3B,MA5BFC,YAAAA,OA4BE,MA5BYV,EAAmBU,YA4B/B,MA3BFpB,YAAAA,OA2BE,MA3BYU,EAAmBV,YA2B/B,MA1BFqB,eAAAA,OA0BE,MA1BeX,EAAmBW,eA0BlC,MAzBFO,qBAAAA,OAyBE,MAzBqBlB,EAAmBkB,qBAyBxC,EACIkD,GAAcC,EAAAA,EAAAA,IAApB,GACMJ,GAAWI,EAAAA,EAAAA,IAAjB,GACMC,IAAcC,EAAAA,EAAAA,IAApB,GACMC,IAAWH,EAAAA,EAAAA,IAAjB,GACMI,IAAiBJ,EAAAA,EAAAA,IAAvB,GAEMK,GAAS5B,EAAwB,CACnCrF,MADmC,EAEnC5E,OAFmC,EAGnCsH,KAHmC,EAInCE,aAJmC,EAKnCC,aALmC,EAMnCpD,kBANmC,EAOnC6D,gBAPmC,EAQnCC,oBARmC,EASnCZ,WAAAA,IAGE1I,GAAYsM,EAAoB,CAAEjM,KAAF,EAAckM,SAAAA,IAE9CU,IAAW5B,EAAAA,EAAAA,UAAQ,WAGrB,IAAMhL,EAAO6M,GAAAA,CAAb,IAGA,OAFAF,GAAAA,GAGItE,EAAarI,EAAH,SAAmBA,EADjC,gBAGD,CAACL,GAAU,GATd,IAWMQ,IAAQ6K,EAAAA,EAAAA,UACV,kBACI4B,GAAA,KAAa,SAAAE,GACT,MA/Fa,cAIzB,IAAMpL,EAAOrC,EAAA,iBAEJ,SAAAwC,GAAQ,OAAIwK,EAAYxK,EAAhB,SAFjB,UAKA,MAAO,CAAEH,KAAMA,EAAAA,KAAR,KAAwBqL,eAAgBrL,GAsFFsL,CAAqBF,EAAtD,GAAQpL,EAAR,OAAcqL,EAAd,iBAEM1N,EAAO,CACTwH,GAAIwF,EAAYS,EADP,MAETpL,KAFS,EAGTqL,eAHS,EAITnN,KAAMqN,GAAAA,CAAKH,EAAD,KAJD,YAKT3N,EAAG2N,EALM,GAMThI,EAAGgI,EANM,GAOTpH,MAAOoH,EAAAA,GAAaA,EAPX,GAQThM,OAAQgM,EAAAA,GAAaA,EARZ,GASTpN,MAAOoN,EATE,MAUTI,eAAgBX,GAAYO,EAVnB,OAWTK,UAAWL,EAXF,MAYTM,WAAYN,EAZH,OAaTO,SAAUP,EAAAA,OAbD,EAcTQ,OAdS,IAcDR,EAAAA,OACRS,aAfS,EAgBTC,aAhBS,EAiBTC,oBAAqB,GA2BzB,OAxBApO,EAAAA,cAAqB0J,GAAe1J,EAAAA,OAAcA,EAA7B0J,OAAAA,GAArB1J,EAEA,QAAI4J,IACA5J,EAAAA,aAAoBkJ,EAApBlJ,EACAA,EAAAA,aAAoBkJ,EAAeS,EAAnC3J,GAEJ,UAAI4J,IACA5J,EAAAA,aAAoBA,EAAAA,MAAAA,EAA4B2J,EAAhD3J,EACAA,EAAAA,aAAoBA,EAAAA,OAAAA,EAApBA,EACAA,EAAAA,qBAAAA,IAEJ,WAAI4J,IACA5J,EAAAA,aAAoBkJ,EAApBlJ,EACAA,EAAAA,aAAoBA,EAAAA,OAAAA,EAA6B2J,EAAjD3J,GAEJ,SAAI4J,IACA5J,EAAAA,aAAoBkJ,EAAeS,EAAnC3J,EACAA,EAAAA,aAAoBA,EAAAA,OAAAA,EAApBA,EACAA,EAAAA,qBAAAA,IAGJA,EAAAA,MAAaoN,GAAbpN,GACAA,EAAAA,YAAmBqN,GAAnBrN,GAEOA,OAEf,CAAC,GAAD,mBAnDJ,IAiEMgG,IAAQC,EAAAA,EAAAA,MACRoI,IAAWC,EAAAA,EAAAA,GAAqBnF,EAAtC,GACMoF,IAAiBC,EAAAA,EAAAA,IAAkBtG,EAAzC,IACMuG,IAAoBD,EAAAA,EAAAA,IAAkBjF,EAA5C,IACMmF,IAA0BF,EAAAA,EAAAA,IAAkB1E,EAAlD,IAEM6E,IAAkBhD,EAAAA,EAAAA,UACpB,kBACI7K,GAAA,KAAU,SAAAd,GACN,IAAM4O,EAAc,QAEhBlH,MAAO2G,GAFS,GAGhBjG,QAASkB,IAOb,OAJAsF,EAAAA,YAA6BL,GAA7BK,GACAA,EAAAA,eAAgCH,GAAhCG,GACAA,EAAAA,qBAAsCF,GAAtCE,GAEOA,OAEf,CAAC9N,GAAM,GAAP,QAfJ,KAkBA,MAAO,CACHR,UADG,GAEHQ,MAFG,GAGHwM,OAAAA,KA+EKuB,EAAsB,gBAC/B/N,EAD+B,eAG/B6K,EAAAA,EAAAA,UACI,iBAAO,CACH7K,MAAAA,KAEJ,CAP2B,KE5U7BgO,EAAuB,kBAEJ,CACrBhP,EAAGE,EADkB,EAErByF,EAAGzF,EAFkB,EAGrBqG,MAAOrG,EAHc,MAIrByB,OAAQzB,EAJa,OAKrB0H,MAAO1H,EALc,MAMrB+O,OAAQ/O,EAAAA,MANa,EAOrBgP,OAAQhP,EAAAA,OAPa,EAQrBiP,cAAejP,EARM,cASrBkP,aATqB,EAUrBhB,aAAclO,EAVO,aAWrBmO,aAAcnO,EAXO,aAYrBoO,oBAAqBpO,EAZA,oBAarBmP,mBAAoB,IAGlBC,EAA6B,YAM/B,MAAO,CACHtP,EAJME,EAAAA,EAASA,EAAAA,MAAnB,EAKIyF,EAJMzF,EAAAA,EAASA,EAAAA,OAAnB,EAKIqG,MAHG,EAIH5E,OAJG,EAKHiG,MAAO1H,EALJ,MAMH+O,OANG,EAOHC,OAPG,EAQHC,cAAejP,EARZ,cASHkP,aATG,EAUHhB,aAVG,EAWHC,aAXG,EAYHC,oBAAqBpO,EAZlB,oBAaHmP,mBAAoB,IAmBtBE,EAA0B,YAaC,IAZ7BvO,EAY4B,EAZ5BA,MACAuJ,EAW4B,EAX5BA,cACAzE,EAU4B,EAV5BA,YACAC,EAS4B,EAT5BA,YACAE,EAQ4B,EAR5BA,cACAD,EAO4B,EAP5BA,kBAQMwJ,EF2LgC,cAiBD,IAdjCvF,EAcgC,EAdhCA,cACApD,EAagC,EAbhCA,aACAC,EAYgC,EAZhCA,YACAC,EAWgC,EAXhCA,aACAC,EAUgC,EAVhCA,QACAkD,EASgC,EAThCA,QAUJ,GAA8CuF,EAAAA,EAAAA,MAAtCC,EAAR,uBAA8BC,EAA9B,cAEMC,GAAcC,EAAAA,EAAAA,cAChB,cACIH,GAAqBI,EAAAA,EAAAA,eAAc5F,EAAS,CAAEhK,KAAAA,IAA1B,EAApBwP,UAEJ,CAACA,EAJL,IAOMK,GAAmBF,EAAAA,EAAAA,cACrB,cACID,EAAY1P,EAAZ0P,GACA/I,MAAAA,GAAAA,EAAY,EAAZA,KAEJ,CAACA,EALL,IAQMmJ,GAAkBH,EAAAA,EAAAA,cACpB,cACID,EAAY1P,EAAZ0P,GACA9I,MAAAA,GAAAA,EAAW,EAAXA,KAEJ,CAACA,EALL,IAQMmJ,GAAmBJ,EAAAA,EAAAA,cACrB,cACIF,IACA5I,MAAAA,GAAAA,EAAY,EAAZA,KAEJ,CAACA,EALL,IAQMmJ,GAAcL,EAAAA,EAAAA,cAChB,cACI7I,MAAAA,GAAAA,EAAO,EAAPA,KAEJ,CAJJ,IAOA,OAAO6E,EAAAA,EAAAA,UACH,kBACI7K,EAAA,KAAU,SAAAd,GACN,SAEO,EAAP,MAEI2G,aAAc,mBAAuBkJ,EAAiB7P,EAAxC,IACd4G,YAAa,mBAAuBkJ,EAAgB9P,EAAvC,IACb6G,aAAc,mBAAuBkJ,EAAiB/P,EAAxC,IACd8G,QAAS,mBAAuBkJ,EAAYhQ,EAAnC,MAPcA,OAUnC,CAAC+J,EAAc,EAAf,MAbJ,IErP0BkG,CAA0B,EAAe,CAC/DlG,cAFwB,EAN5BA,cASIpD,aAHwB,EAL5BA,aASIC,YAJwB,EAJ5BA,YASIC,aALwB,EAH5BA,aASIC,QANwB,EAF5BA,QASIkD,QAPwB,EAD5BA,UAWA,GAA0CkG,EAAAA,EAAAA,MAAlChG,EAAR,UAAyBiG,EAAzB,SACMC,GAAaC,EAAAA,EAAAA,eAAa,EAE5B,CACIC,KAAM,SAAAtQ,GAAI,OAAIA,EAAJ,MACVuQ,QAFJ,EAGI/G,KAHJ,EAIIgH,MAJJ,EAKIC,OALJ,EAMIC,MANJ,EAOIC,OAPJ,EAQIC,WAAY1G,IAIpB,OACI,8BACKkG,GAAW,qBACRR,EAAAA,EAAAA,eAAcvF,EAAe,CACzBwG,IAAK7Q,EADoB,KAEzBA,KAFyB,EAGzB2F,cAHyB,EAIzBC,YAJyB,EAKzBC,YALyB,EAMzBE,cANyB,EAOzBD,kBAAAA,UAOPgL,GAAexJ,EAAAA,EAAAA,MAArB,wECnGDyJ,EAAe,YA0CY,IAzC7BxQ,EAyC4B,EAzC5BA,KAyC4B,IAxC5BuI,SAAAA,OAwC4B,MAxCjBsB,EAAgBtB,SAwCC,MAvC5BzI,MAAAA,OAuC4B,MAvCpB+J,EAAgB/J,MAuCI,EAtC5B0M,EAsC4B,EAtC5BA,YAsC4B,IArC5BhE,KAAAA,OAqC4B,MArCrBqB,EAAgBrB,KAqCK,MApC5BsB,cAAAA,OAoC4B,MApCZD,EAAgBC,cAoCJ,MAnC5BpB,aAAAA,OAmC4B,MAnCbmB,EAAgBnB,aAmCH,MAlC5BC,aAAAA,OAkC4B,MAlCbkB,EAAgBlB,aAkCH,MAjC5BF,WAAAA,OAiC4B,MAjCfoB,EAAgBpB,WAiCD,EAhC5B3C,EAgC4B,EAhC5BA,MACA5E,EA+B4B,EA/B5BA,OACQuP,EA8BoB,EA9B5BC,OA8B4B,IA7B5BpI,OAAAA,OA6B4B,MA7BnBuB,EAAgBvB,OA6BG,MA5B5BM,OAAAA,OA4B4B,MA5BnBiB,EAAgBjB,OA4BG,MA3B5BE,QAAAA,OA2B4B,MA3BlBe,EAAgBf,QA2BE,MA1B5BC,YAAAA,OA0B4B,MA1Bdc,EAAgBd,YA0BF,MAzB5B1D,YAAAA,OAyB4B,MAzBdwE,EAAgBxE,YAyBF,MAxB5BsC,YAAAA,OAwB4B,MAxBdkC,EAAgBlC,YAwBF,MAvB5BoC,KAAAA,OAuB4B,MAvBrBF,EAAgBE,KAuBK,MAtB5B/D,KAAAA,OAsB4B,MAtBrB6D,EAAgB7D,KAsBK,MArB5BV,YAAAA,OAqB4B,MArBduE,EAAgBvE,YAqBF,MApB5BsB,MAAAA,OAoB4B,MApBpBiD,EAAgBjD,MAoBI,MAnB5BoC,eAAAA,OAmB4B,MAnBXa,EAAgBb,eAmBL,MAlB5BG,YAAAA,OAkB4B,MAlBdU,EAAgBV,YAkBF,MAjB5B3D,cAAAA,OAiB4B,MAjBZqE,EAAgBrE,cAiBJ,MAhB5BD,kBAAAA,QAgB4B,MAhBRsE,EAAgBtE,kBAgBR,OAf5BsB,YAAAA,QAe4B,OAfdgD,EAAgBhD,YAeF,QAd5BuC,gBAAAA,QAc4B,OAdVS,EAAgBT,gBAcN,QAb5BC,oBAAAA,QAa4B,OAbNQ,EAAgBR,oBAaV,QAZ5BC,mBAAAA,QAY4B,OAZPO,EAAgBP,mBAYT,QAX5BC,qBAAAA,QAW4B,OAXLM,EAAgBN,qBAWX,QAV5BC,cAAAA,QAU4B,OAVZK,EAAgBL,cAUJ,GAT5BpD,GAS4B,EAT5BA,aACAC,GAQ4B,EAR5BA,YACAC,GAO4B,EAP5BA,aACAC,GAM4B,EAN5BA,QAM4B,KAL5BkD,QAAAA,QAK4B,OALlBI,EAAgBJ,QAKE,GAJ5BC,GAI4B,EAJ5BA,KACAiH,GAG4B,EAH5BA,UACAC,GAE4B,EAF5BA,eACAC,GAC4B,EAD5BA,gBAEA,IAAqEC,EAAAA,EAAAA,IAAc,EAAD,EAAlF,GAAQJ,GAAR,UAAgBK,GAAhB,cAA4BC,GAA5B,eAAyCC,GAAzC,cAAqDC,GAArD,eAMQ3Q,GAAUgM,EAAkB,CAChCvM,KADgC,EAEhCuI,SAFgC,EAGhCzI,MAHgC,EAIhC0M,YAJgC,EAKhC/D,WALgC,EAMhC3C,MANgC,GAOhC5E,OAPgC,GAQhCsH,KARgC,EAShCE,aATgC,EAUhCC,aAVgC,EAWhCC,OAXgC,EAYhCE,QAZgC,EAahCC,YAbgC,EAchCpB,YAdgC,EAehCf,MAfgC,EAgBhCoC,eAhBgC,EAiBhCG,YAjBgC,EAkBhC5D,kBAlBgC,GAmBhCsB,YAnBgC,GAoBhCuC,gBApBgC,GAqBhCC,oBArBgC,GAsBhCC,mBAtBgC,GAuBhCC,qBAAAA,KAvBJ,MA0BM4H,GAAwC,CAC1C5Q,MAAO,MAGP+H,EAAAA,SAAJ,WACI6I,GAAAA,OACI,YAEI5Q,MAFJ,GAGIuJ,cAHJ,EAIIzE,YAJJ,EAKIC,YALJ,EAMIE,cANJ,EAOID,kBAPJ,GAQIiE,cARJ,GASIpD,aATJ,GAUIC,YAVJ,GAWIC,aAXJ,GAYIC,QAZJ,GAaIkD,QAASA,IAdjB0H,UAmBJ,IAAMC,GAAmB9C,EAA2B,CAAE/N,MAAAA,KAEhD8Q,IAAYC,EAAAA,EAAAA,IAASvH,EAAK,GAAhC,GAEA,OACI,eACIjE,MADJ,GAEI5E,OAFJ,GAGIwP,OAHJ,GAII3G,KAJJ,GAKIL,KALJ,GAMIiH,UANJ,GAOIC,eAPJ,GAQIC,gBARJ,YAUKvI,EAAA,KAAW,cAAe,IAAD,EACtB,yBAAWiJ,GACA,+BAAmBlC,EAAAA,EAAAA,eAAckC,EAAM,KAA9C,GAGJ,eAAOJ,QAAP,EAAOA,GAAP,iBAMHK,EAAU,kCACnBhI,OADmB,MACHK,EADG,4BAEnBF,OAFmB,MAETE,EAFS,2BAGnBD,OAHmB,MAGJC,EAHI,eAInBpE,EAJmB,QAKnBgM,EALmB,gBAMhBC,EANgB,cAQnB,eAEQ/H,QAFR,EAGQH,cAHR,EAIQI,aAJR,EAKQ6H,cALR,EAMQhM,MANR,YASI,cAAqB+D,cAAeA,GAApC,OClKKmI,EAAoB,mBAG7B,uBACK,gBAAG7L,EAAH,QAAU5E,EAAV,gBAAuB,cAAgB4E,MAAhB,EAA8B5E,OAAQA,GAA7D,QAJwB,qECQ3B0Q,EAAmB,YAwCY,IAvCjC5R,EAuCgC,EAvChCA,KAuCgC,IAtChCuI,SAAAA,OAsCgC,MAtCrByB,EAAiBzB,SAsCI,MArChCzI,MAAAA,OAqCgC,MArCxBkK,EAAiBlK,MAqCO,MApChC0I,KAAAA,OAoCgC,MApCzBwB,EAAiBxB,KAoCQ,MAnChCsB,cAAAA,OAmCgC,MAnChBE,EAAiBF,cAmCD,EAlChC0C,EAkCgC,EAlChCA,YAkCgC,IAjChC9D,aAAAA,OAiCgC,MAjCjBsB,EAAiBtB,aAiCA,MAhChCC,aAAAA,OAgCgC,MAhCjBqB,EAAiBrB,aAgCA,MA/BhCF,WAAAA,OA+BgC,MA/BnBuB,EAAiBvB,WA+BE,EA9BhC3C,EA8BgC,EA9BhCA,MACA5E,EA6BgC,EA7BhCA,OACQuP,EA4BwB,EA5BhCC,OA4BgC,IA3BhCpI,OAAAA,OA2BgC,MA3BvBuB,EAAgBvB,OA2BO,MA1BhCM,OAAAA,OA0BgC,MA1BvBoB,EAAiBpB,OA0BM,MAzBhCE,QAAAA,OAyBgC,MAzBtBkB,EAAiBlB,QAyBK,MAxBhCC,YAAAA,OAwBgC,MAxBlBiB,EAAiBjB,YAwBC,MAvBhC1D,YAAAA,OAuBgC,MAvBlB2E,EAAiB3E,YAuBC,MAtBhCsC,YAAAA,OAsBgC,MAtBlBqC,EAAiBrC,YAsBC,MArBhCrC,YAAAA,OAqBgC,MArBlB0E,EAAiB1E,YAqBC,MApBhCsB,MAAAA,OAoBgC,MApBxBoD,EAAiBpD,MAoBO,MAnBhCoC,eAAAA,OAmBgC,MAnBfgB,EAAiBhB,eAmBF,MAlBhCG,YAAAA,OAkBgC,MAlBlBa,EAAiBb,YAkBC,MAjBhC3D,cAAAA,OAiBgC,MAjBhBwE,EAAiBxE,cAiBD,MAhBhCD,kBAAAA,OAgBgC,MAhBZyE,EAAiBzE,kBAgBL,MAfhCsB,YAAAA,OAegC,MAflBmD,EAAiBnD,YAeC,OAdhCuC,gBAAAA,QAcgC,OAddY,EAAiBZ,gBAcH,QAbhCC,oBAAAA,QAagC,OAbVW,EAAiBX,oBAaP,QAZhCC,mBAAAA,QAYgC,OAZXU,EAAiBV,mBAYN,QAXhCC,qBAAAA,QAWgC,OAXTS,EAAiBT,qBAWR,QAVhCC,cAAAA,QAUgC,OAVhBQ,EAAiBR,cAUD,GAThCpD,GASgC,EAThCA,aACAC,GAQgC,EARhCA,YACAC,GAOgC,EAPhCA,aACAC,GAMgC,EANhCA,QAMgC,KALhCkD,QAAAA,QAKgC,OALtBO,EAAiBP,QAKK,GAJhCC,GAIgC,EAJhCA,KACAiH,GAGgC,EAHhCA,UACAC,GAEgC,EAFhCA,eACAC,GACgC,EADhCA,gBAEA,IAAqEC,EAAAA,EAAAA,IAAc,EAAD,EAAlF,GAAQJ,GAAR,UAAgBK,GAAhB,cAA4BC,GAA5B,eAAyCC,GAAzC,cAAqDC,GAArD,eAMQ3Q,GAAUgM,EAAkB,CAChCvM,KADgC,EAEhCuI,SAFgC,EAGhCzI,MAHgC,EAIhC0M,YAJgC,EAKhC/D,WALgC,EAMhC3C,MANgC,GAOhC5E,OAPgC,GAQhCsH,KARgC,EAShCE,aATgC,EAUhCC,aAVgC,EAWhCC,OAXgC,EAYhCE,QAZgC,EAahCC,YAbgC,EAchCpB,YAdgC,EAehCf,MAfgC,EAgBhCoC,eAhBgC,EAiBhCG,YAjBgC,EAkBhC5D,kBAlBgC,EAmBhCsB,YAnBgC,EAoBhCuC,gBApBgC,GAqBhCC,oBArBgC,GAsBhCC,mBAtBgC,GAuBhCC,qBAAAA,KAvBJ,MA0BM4H,GAAwC,CAC1C5Q,MAAO,MAGP+H,EAAAA,SAAJ,WACI6I,GAAAA,OACI,YAEI5Q,MAFJ,GAGIuJ,cAHJ,EAIIzE,YAJJ,EAKIC,YALJ,EAMIE,cANJ,EAOID,kBAPJ,EAQIiE,cARJ,GASIpD,aATJ,GAUIC,YAVJ,GAWIC,aAXJ,GAYIC,QAZJ,GAaIkD,QAASA,IAdjB0H,UAmBJ,IAAMC,GAAmB9C,EAA2B,CAAE/N,MAAAA,KAEtD,OACI,gBACImJ,KADJ,GAEI,aAFJ,GAGI,kBAHJ,GAII,mBAJJ,GAKIhD,MAAO,CACHa,SADG,WAEHzB,MAFG,GAGH5E,OAAQgQ,IARhB,UAWI,gBAAKxK,MAAO,CAAEa,SAAF,WAAwBC,IAAKkJ,GAA7B,IAAyCjJ,KAAMiJ,GAAOjJ,MAAlE,SACKa,EAAA,KAAW,cAAe,IAAD,EACtB,yBAAWiJ,GACA,+BAAmBlC,EAAAA,EAAAA,eAAckC,EAAM,KAA9C,GAGJ,eAAOJ,QAAP,EAAOA,GAAP,mBAOPU,EAAc,kCACvBrI,OADuB,MACPQ,EADO,4BAEvBL,OAFuB,MAEbK,EAFa,2BAGvBJ,OAHuB,MAGRI,EAHQ,eAIvBvE,EAJuB,QAKvBgM,EALuB,gBAMpBC,EANoB,cAQvB,eAEQ/H,QAFR,EAGQH,cAHR,EAIQI,aAJR,EAKQ6H,cALR,EAMQhM,MANR,YASI,cAAyB+D,cAAeA,GAAxC,OCrJKsI,EAAwB,mBAGjC,uBACK,gBAAGhM,EAAH,QAAU5E,EAAV,gBAAuB,cAAoB4E,MAApB,EAAkC5E,OAAQA,GAAjE,QAJ4B,sECW/B6Q,GAAsB,yBAMxBxR,EAAA,MAAW,SAAAd,GAAI,OACXuS,EAAAA,EAAAA,IAAevS,EAAAA,EAASiR,EAAV,KAAuBjR,EAAAA,EAASiR,EAAhC,IAA4CjR,EAA5C,MAAwDA,EAAxD,SADH,OASbwS,GAAqB,YA+BY,IA9BnCjS,EA8BkC,EA9BlCA,KA8BkC,IA7BlCuI,SAAAA,OA6BkC,MA7BvB0B,EAAmB1B,SA6BI,MA5BlCzI,MAAAA,OA4BkC,MA5B1BmK,EAAmB1B,SA4BO,MA3BlCC,KAAAA,OA2BkC,MA3B3ByB,EAAmBzB,KA2BQ,EA1BlCgE,EA0BkC,EA1BlCA,YA0BkC,IAzBlC9D,aAAAA,OAyBkC,MAzBnBuB,EAAmBvB,aAyBA,MAxBlCC,aAAAA,OAwBkC,MAxBnBsB,EAAmBtB,aAwBA,MAvBlCF,WAAAA,OAuBkC,MAvBrBwB,EAAmBxB,WAuBE,EAtBlC3C,EAsBkC,EAtBlCA,MACA5E,EAqBkC,EArBlCA,OACQuP,EAoB0B,EApBlCC,OAoBkC,IAnBlC9H,OAAAA,OAmBkC,MAnBzBqB,EAAmBrB,OAmBM,MAlBlCE,QAAAA,OAkBkC,MAlBxBmB,EAAmBnB,QAkBK,MAjBlCC,YAAAA,OAiBkC,MAjBpBkB,EAAmBlB,YAiBC,MAhBlC1D,YAAAA,OAgBkC,MAhBpB4E,EAAmB5E,YAgBC,MAflCsC,YAAAA,OAekC,MAfpBsC,EAAmBtC,YAeC,MAdlCrC,YAAAA,OAckC,MAdpB2E,EAAmB3E,YAcC,MAblCsB,MAAAA,OAakC,MAb1BqD,EAAmBrD,MAaO,MAZlCoC,eAAAA,OAYkC,MAZjBiB,EAAmBjB,eAYF,MAXlCG,YAAAA,OAWkC,MAXpBc,EAAmBd,YAWC,MAVlC3D,cAAAA,OAUkC,MAVlByE,EAAmBzE,cAUD,MATlCgE,cAAAA,OASkC,MATlBS,EAAmBT,cASD,EARlCnD,EAQkC,EARlCA,YACAE,EAOkC,EAPlCA,QAOkC,IANlCkD,QAAAA,OAMkC,MANxBQ,EAAmBR,QAMK,MALlCS,WAAAA,OAKkC,MALrBD,EAAmBC,WAKE,EAJlCR,EAIkC,EAJlCA,KACAiH,EAGkC,EAHlCA,UACAC,GAEkC,EAFlCA,eACAC,GACkC,EADlCA,gBAEMqB,IAAWC,EAAAA,EAAAA,QAAjB,MAEA,IAAqErB,EAAAA,EAAAA,IAAc,EAAD,EAAlF,GAAQJ,GAAR,UAAgBK,GAAhB,cAA4BC,GAA5B,eAAyCC,GAAzC,cAAqDC,GAArD,eAMQ3Q,GAAUgM,EAAkB,CAChCvM,KADgC,EAEhCuI,SAFgC,EAGhCzI,MAHgC,EAIhC0M,YAJgC,EAKhC/D,WALgC,EAMhC3C,MANgC,GAOhC5E,OAPgC,GAQhCsH,KARgC,EAShCE,aATgC,EAUhCC,aAVgC,EAWhCC,OAXgC,EAYhCE,QAZgC,EAahCC,YAbgC,EAchCpB,YAdgC,EAehCf,MAfgC,EAgBhCoC,eAhBgC,EAiBhCG,YAjBgC,EAkBhC5D,mBAAmB,IAlBvB,MAqBME,IAAQC,EAAAA,EAAAA,OAEd0M,EAAAA,EAAAA,YAAU,WACN,UAAIF,GAAAA,QAAJ,CAEA,IAAMG,EAAMH,GAAAA,QAAAA,WAAZ,MACA,OAAIG,IAEJH,GAAAA,QAAAA,MAAyBjB,GAAzBiB,EACAA,GAAAA,QAAAA,OAA0BhB,GAA1BgB,EAEAG,EAAAA,MAAAA,EAAAA,GAEAA,EAAAA,UAAgB5M,GAAhB4M,WACAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IACAA,EAAAA,UAAc3B,GAAd2B,KAA2B3B,GAA3B2B,KAEA9R,GAAAA,SAAc,SAAAd,GACV4S,EAAAA,UAAgB5S,EAAhB4S,MACAA,EAAAA,SAAa5S,EAAb4S,EAAqB5S,EAArB4S,EAA6B5S,EAA7B4S,MAAyC5S,EAAzC4S,QAEIhN,EAAJ,IACIgN,EAAAA,YAAkB5S,EAAlB4S,YACAA,EAAAA,UAAAA,EACAA,EAAAA,WAAe5S,EAAf4S,EAAuB5S,EAAvB4S,EAA+B5S,EAA/B4S,MAA2C5S,EAA3C4S,YAIR,IACIA,EAAAA,UAAAA,SACAA,EAAAA,aAAAA,SACAA,EAAAA,KAAc5M,GAAAA,OAAAA,KAAd4M,SAAAA,MAA8C5M,GAAAA,OAAAA,KAA9C4M,WAEA9R,GAAAA,SAAc,SAAAd,GAKV,GAHIA,EAAAA,SACC+F,IAAAA,GAAuBnC,KAAAA,IAAS5D,EAAT4D,MAAqB5D,EAArB4D,QAF5B,GAIA,CAEA,IAAMiP,EAASnJ,GAAe1J,EAAAA,OAAcA,EAA5C,MAEA4S,EAAAA,OACAA,EAAAA,UAAc5S,EAAAA,EAASA,EAAAA,MAAvB4S,EAAuC5S,EAAAA,EAASA,EAAAA,OAAhD4S,GACAA,EAAAA,QAAWE,EAAAA,EAAAA,IAAiBD,GAAM,GAAlCD,IAEAA,EAAAA,UAAgB5S,EAAhB4S,eACAA,EAAAA,SAAAA,GAAgB5S,EAAhB4S,MAAAA,EAAAA,GAEAA,EAAAA,mBAGT,CAAC,GAAD,6BAlDHD,IAkEA,QAA8CpD,EAAAA,EAAAA,MAAtCC,GAAR,wBAA8BC,GAA9B,eAEMsD,IAAmBpD,EAAAA,EAAAA,cACrB,SAAAqD,GACI,UAAIP,GAAAA,QAAJ,CAEA,OAAeQ,EAAAA,EAAAA,IAAkBR,GAAD,QAAhC,GAAO3S,EAAP,KAAU2F,EAAV,KACMzF,EAAOsS,GAAoBxR,GAAM,GAAP,EAAhC,QAEA,IAAId,GACAwP,IAAqBI,EAAAA,EAAAA,eAAc5F,EAAS,CAAEhK,KAAAA,IAA1B,EAApBwP,QACA5I,MAAAA,GAAAA,EAAW,EAAXA,IAEA6I,QAGR,CAACgD,GAAS,GAAV,WAdJ,IAiBM1C,IAAmBJ,EAAAA,EAAAA,cAAY,WACjCF,OACD,CAFH,KAIMO,IAAcL,EAAAA,EAAAA,cAChB,SAAAqD,GACI,UAAIP,GAAAA,QAAJ,CAEA,OAAeQ,EAAAA,EAAAA,IAAkBR,GAAD,QAAhC,GAAO3S,EAAP,KAAU2F,EAAV,KACMzF,EAAOsS,GAAoBxR,GAAM,GAAP,EAAhC,QAEA,IAAId,IAEJ8G,MAAAA,GAAAA,EAAO,EAAPA,OAEJ,CAAC2L,GAAS,GAAV,GAXJ,IAcA,OACI,mBACIS,IADJ,GAEI7M,MAAOmL,GAFX,EAGI/P,OAAQgQ,GAHZ,EAIIxK,MAAO,CACHZ,MADG,GAEH5E,OAAQgQ,IAEZ9K,aAAcoD,EAAa,QAR/B,EASInD,YAAamD,EAAa,QAT9B,EAUIlD,aAAckD,EAAa,QAV/B,EAWIjD,QAASiD,EAAa,QAX1B,EAYIE,KAZJ,EAaI,aAbJ,EAcI,kBAdJ,GAeI,mBAAkBmH,MAKjB+B,GAAgB,gBACzBnN,EADyB,0BAEzB+D,OAFyB,MAETS,EAFS,4BAGzBN,OAHyB,MAGfM,EAHe,2BAIzBL,OAJyB,MAIVK,EAJU,eAKzBwH,EALyB,gBAMtBC,EANsB,eAQzB,eAAiBlI,cAAjB,EAAgCG,QAAhC,EAAyCC,aAAzC,EAAuDnE,MAAvD,EAA8DgM,cAA9D,YACI,eAA2BjI,cAAeA,GAA1C,OC9NKqJ,GAA0B,mBAGnC,uBACK,gBAAG/M,EAAH,QAAU5E,EAAV,gBAAuB,eAAsB4E,MAAtB,EAAoC5E,OAAQA,GAAnE,S,sBCRT,IAAI4R,EAAY,EAAQ,OA4BxBC,EAAOC,QAJP,SAAmBlT,GACjB,OAAOgT,EAAUhT,EAAOmT","sources":["webpack://nivo-website/../node_modules/d3-hierarchy/src/accessors.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/constant.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/count.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/index.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/each.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/sum.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/sort.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/path.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/ancestors.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/descendants.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/leaves.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/links.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/treemap/dice.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/treemap/round.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/treemap/slice.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/treemap/squarify.js","webpack://nivo-website/../src/transitions.ts","webpack://nivo-website/../src/TreeMapNode.tsx","webpack://nivo-website/../src/TreeMapNodeTooltip.tsx","webpack://nivo-website/../src/TreeMapHtmlNode.tsx","webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../src/tiling.ts","webpack://nivo-website/../node_modules/d3-hierarchy/src/treemap/binary.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/treemap/sliceDice.js","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../node_modules/d3-hierarchy/src/treemap/index.js","webpack://nivo-website/../src/TreeMapNodes.tsx","webpack://nivo-website/../src/TreeMap.tsx","webpack://nivo-website/../src/ResponsiveTreeMap.tsx","webpack://nivo-website/../src/TreeMapHtml.tsx","webpack://nivo-website/../src/ResponsiveTreeMapHtml.tsx","webpack://nivo-website/../src/TreeMapCanvas.tsx","webpack://nivo-website/../src/ResponsiveTreeMapCanvas.tsx","webpack://nivo-website/../node_modules/lodash/cloneDeep.js"],"sourcesContent":["export function optional(f) {\n  return f == null ? null : required(f);\n}\nexport function required(f) {\n  if (typeof f !== \"function\") throw new Error();\n  return f;\n}","export function constantZero() {\n  return 0;\n}\nexport default function (x) {\n  return function () {\n    return x;\n  };\n}","function count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;else while (--i >= 0) {\n    sum += children[i].value;\n  }\n  node.value = sum;\n}\n\nexport default function () {\n  return this.eachAfter(count);\n}","import node_count from \"./count.js\";\nimport node_each from \"./each.js\";\nimport node_eachBefore from \"./eachBefore.js\";\nimport node_eachAfter from \"./eachAfter.js\";\nimport node_sum from \"./sum.js\";\nimport node_sort from \"./sort.js\";\nimport node_path from \"./path.js\";\nimport node_ancestors from \"./ancestors.js\";\nimport node_descendants from \"./descendants.js\";\nimport node_leaves from \"./leaves.js\";\nimport node_links from \"./links.js\";\nexport default function hierarchy(data, children) {\n  var root = new Node(data),\n      valued = +data.value && (root.value = data.value),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n  if (children == null) children = defaultChildren;\n\n  while (node = nodes.pop()) {\n    if (valued) node.value = +node.data.value;\n\n    if ((childs = children(node.data)) && (n = childs.length)) {\n      node.children = new Array(n);\n\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction defaultChildren(d) {\n  return d.children;\n}\n\nfunction copyData(node) {\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n\n  do {\n    node.height = height;\n  } while ((node = node.parent) && node.height < ++height);\n}\nexport function Node(data) {\n  this.data = data;\n  this.depth = this.height = 0;\n  this.parent = null;\n}\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy\n};","export default function (callback) {\n  var node = this,\n      current,\n      next = [node],\n      children,\n      i,\n      n;\n\n  do {\n    current = next.reverse(), next = [];\n\n    while (node = current.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        next.push(children[i]);\n      }\n    }\n  } while (next.length);\n\n  return this;\n}","export default function (callback) {\n  var node = this,\n      nodes = [node],\n      next = [],\n      children,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    next.push(node), children = node.children;\n    if (children) for (i = 0, n = children.length; i < n; ++i) {\n      nodes.push(children[i]);\n    }\n  }\n\n  while (node = next.pop()) {\n    callback(node);\n  }\n\n  return this;\n}","export default function (callback) {\n  var node = this,\n      nodes = [node],\n      children,\n      i;\n\n  while (node = nodes.pop()) {\n    callback(node), children = node.children;\n    if (children) for (i = children.length - 1; i >= 0; --i) {\n      nodes.push(children[i]);\n    }\n  }\n\n  return this;\n}","export default function (value) {\n  return this.eachAfter(function (node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n\n    while (--i >= 0) {\n      sum += children[i].value;\n    }\n\n    node.value = sum;\n  });\n}","export default function (compare) {\n  return this.eachBefore(function (node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n}","export default function (end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n\n  var k = nodes.length;\n\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n\n  return c;\n}","export default function () {\n  var node = this,\n      nodes = [node];\n\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n\n  return nodes;\n}","export default function () {\n  var nodes = [];\n  this.each(function (node) {\n    nodes.push(node);\n  });\n  return nodes;\n}","export default function () {\n  var leaves = [];\n  this.eachBefore(function (node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n}","export default function () {\n  var root = this,\n      links = [];\n  root.each(function (node) {\n    if (node !== root) {\n      // Don’t include the root’s parent, if any.\n      links.push({\n        source: node.parent,\n        target: node\n      });\n    }\n  });\n  return links;\n}","export default function (parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (x1 - x0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.y0 = y0, node.y1 = y1;\n    node.x0 = x0, node.x1 = x0 += node.value * k;\n  }\n}","export default function (node) {\n  node.x0 = Math.round(node.x0);\n  node.y0 = Math.round(node.y0);\n  node.x1 = Math.round(node.x1);\n  node.y1 = Math.round(node.y1);\n}","export default function (parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (y1 - y0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.x0 = x0, node.x1 = x1;\n    node.y0 = y0, node.y1 = y0 += node.value * k;\n  }\n}","import treemapDice from \"./dice.js\";\nimport treemapSlice from \"./slice.js\";\nexport var phi = (1 + Math.sqrt(5)) / 2;\nexport function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [],\n      nodes = parent.children,\n      row,\n      nodeValue,\n      i0 = 0,\n      i1 = 0,\n      n = nodes.length,\n      dx,\n      dy,\n      value = parent.value,\n      sumValue,\n      minValue,\n      maxValue,\n      newRatio,\n      minRatio,\n      alpha,\n      beta;\n\n  while (i0 < n) {\n    dx = x1 - x0, dy = y1 - y0; // Find the next non-empty node.\n\n    do {\n      sumValue = nodes[i1++].value;\n    } while (!sumValue && i1 < n);\n\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.\n\n    for (; i1 < n; ++i1) {\n      sumValue += nodeValue = nodes[i1].value;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n\n      if (newRatio > minRatio) {\n        sumValue -= nodeValue;\n        break;\n      }\n\n      minRatio = newRatio;\n    } // Position and record the row orientation.\n\n\n    rows.push(row = {\n      value: sumValue,\n      dice: dx < dy,\n      children: nodes.slice(i0, i1)\n    });\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n    value -= sumValue, i0 = i1;\n  }\n\n  return rows;\n}\nexport default (function custom(ratio) {\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n\n  squarify.ratio = function (x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return squarify;\n})(phi);","import { to, SpringValue } from '@react-spring/web'\n\nexport const svgNodeTransform = (x: SpringValue<number>, y: SpringValue<number>) =>\n    to([x, y], (x, y) => `translate(${x},${y})`)\n\nexport const htmlNodeTransform = (x: SpringValue<number>, y: SpringValue<number>) =>\n    to([x, y], (x, y) => `translate(${x}px, ${y}px)`)\n\nexport const svgLabelTransform = (\n    x: SpringValue<number>,\n    y: SpringValue<number>,\n    rotation: SpringValue<number>\n) => to([x, y, rotation], (x, y, rotation) => `translate(${x},${y}) rotate(${rotation})`)\n\nexport const htmlLabelTransform = (\n    x: SpringValue<number>,\n    y: SpringValue<number>,\n    rotation: SpringValue<number>\n) => to([x, y, rotation], (x, y, rotation) => `translate(${x}px,${y}px) rotate(${rotation}deg)`)\n\nexport const htmlParentLabelTransform = (\n    x: SpringValue<number>,\n    y: SpringValue<number>,\n    rotation: SpringValue<number>\n) =>\n    to(\n        [x, y, rotation],\n        (x, y, rotation) =>\n            `translate(${x - (rotation === 0 ? 0 : 5)}px,${\n                y - (rotation === 0 ? 5 : 0)\n            }px) rotate(${rotation}deg)`\n    )\n","import { memo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { NodeProps } from './types'\nimport { svgNodeTransform, svgLabelTransform } from './transitions'\n\nconst NonMemoizedTreeMapNode = <Datum extends object>({\n    node,\n    animatedProps,\n    borderWidth,\n    enableLabel,\n    enableParentLabel,\n    labelSkipSize,\n}: NodeProps<Datum>) => {\n    const theme = useTheme()\n\n    const showLabel =\n        enableLabel &&\n        node.isLeaf &&\n        (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n    const showParentLabel = enableParentLabel && node.isParent\n\n    return (\n        <animated.g transform={svgNodeTransform(animatedProps.x, animatedProps.y)}>\n            <animated.rect\n                data-testid={`node.${node.id}`}\n                width={to(animatedProps.width, v => Math.max(v, 0))}\n                height={to(animatedProps.height, v => Math.max(v, 0))}\n                fill={node.fill ? node.fill : animatedProps.color}\n                strokeWidth={borderWidth}\n                stroke={node.borderColor}\n                fillOpacity={node.opacity}\n                onMouseEnter={node.onMouseEnter}\n                onMouseMove={node.onMouseMove}\n                onMouseLeave={node.onMouseLeave}\n                onClick={node.onClick}\n            />\n            {showLabel && (\n                <animated.text\n                    data-testid={`label.${node.id}`}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: node.labelTextColor,\n                        pointerEvents: 'none',\n                    }}\n                    fillOpacity={animatedProps.labelOpacity}\n                    transform={svgLabelTransform(\n                        animatedProps.labelX,\n                        animatedProps.labelY,\n                        animatedProps.labelRotation\n                    )}\n                >\n                    {node.label}\n                </animated.text>\n            )}\n            {showParentLabel && (\n                <animated.text\n                    data-testid={`parentLabel.${node.id}`}\n                    dominantBaseline=\"central\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: node.parentLabelTextColor,\n                        pointerEvents: 'none',\n                    }}\n                    fillOpacity={animatedProps.parentLabelOpacity}\n                    transform={svgLabelTransform(\n                        animatedProps.parentLabelX,\n                        animatedProps.parentLabelY,\n                        animatedProps.parentLabelRotation\n                    )}\n                >\n                    {node.parentLabel}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nexport const TreeMapNode = memo(NonMemoizedTreeMapNode) as typeof NonMemoizedTreeMapNode\n","import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { TooltipProps } from './types'\n\nconst NonMemoizedTreeMapNodeTooltip = <Datum extends object>({ node }: TooltipProps<Datum>) => (\n    <BasicTooltip id={node.id} value={node.formattedValue} enableChip={true} color={node.color} />\n)\n\nexport const TreeMapNodeTooltip = memo(\n    NonMemoizedTreeMapNodeTooltip\n) as typeof NonMemoizedTreeMapNodeTooltip\n","import { memo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { NodeProps } from './types'\nimport { htmlNodeTransform, htmlLabelTransform, htmlParentLabelTransform } from './transitions'\n\nconst NonMemoizedTreeMapHtmlNode = <Datum extends object>({\n    node,\n    animatedProps,\n    borderWidth,\n    enableLabel,\n    enableParentLabel,\n    labelSkipSize,\n}: NodeProps<Datum>) => {\n    const theme = useTheme()\n\n    const showLabel =\n        enableLabel &&\n        node.isLeaf &&\n        (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n    const showParentLabel = enableParentLabel && node.isParent\n\n    return (\n        <animated.div\n            data-testid={`node.${node.id}`}\n            id={node.path.replace(/[^\\w]/gi, '-')}\n            style={{\n                boxSizing: 'border-box',\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                transform: htmlNodeTransform(animatedProps.x, animatedProps.y),\n                width: animatedProps.width,\n                height: animatedProps.height,\n                borderWidth,\n                borderStyle: 'solid',\n                borderColor: node.borderColor,\n                overflow: 'hidden',\n            }}\n        >\n            <animated.div\n                style={{\n                    boxSizing: 'border-box',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    opacity: node.opacity,\n                    width: animatedProps.width,\n                    height: animatedProps.height,\n                    background: animatedProps.color,\n                }}\n                onMouseEnter={node.onMouseEnter}\n                onMouseMove={node.onMouseMove}\n                onMouseLeave={node.onMouseLeave}\n                onClick={node.onClick}\n            />\n            {showLabel && (\n                <animated.span\n                    data-testid={`label.${node.id}`}\n                    style={{\n                        ...theme.labels.text,\n                        position: 'absolute',\n                        display: 'flex',\n                        top: -5,\n                        left: -5,\n                        width: 10,\n                        height: 10,\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        whiteSpace: 'nowrap',\n                        color: node.labelTextColor,\n                        transformOrigin: 'center center',\n                        transform: htmlLabelTransform(\n                            animatedProps.labelX,\n                            animatedProps.labelY,\n                            animatedProps.labelRotation\n                        ),\n                        opacity: animatedProps.labelOpacity,\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {node.label}\n                </animated.span>\n            )}\n            {showParentLabel && (\n                <animated.span\n                    data-testid={`parentLabel.${node.id}`}\n                    style={{\n                        ...theme.labels.text,\n                        position: 'absolute',\n                        display: 'flex',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                        whiteSpace: 'nowrap',\n                        width: 10,\n                        height: 10,\n                        color: node.parentLabelTextColor,\n                        transformOrigin: 'top left',\n                        transform: htmlParentLabelTransform(\n                            animatedProps.parentLabelX,\n                            animatedProps.parentLabelY,\n                            animatedProps.parentLabelRotation\n                        ),\n                        opacity: animatedProps.parentLabelOpacity,\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {node.parentLabel}\n                </animated.span>\n            )}\n        </animated.div>\n    )\n}\n\nexport const TreeMapHtmlNode = memo(NonMemoizedTreeMapHtmlNode) as typeof NonMemoizedTreeMapHtmlNode\n","import { TreeMapCommonProps, DefaultTreeMapDatum, LayerId } from './types'\nimport { TreeMapNode } from './TreeMapNode'\nimport { TreeMapNodeTooltip } from './TreeMapNodeTooltip'\nimport { TreeMapHtmlNode } from './TreeMapHtmlNode'\n\nexport const commonDefaultProps: Omit<\n    TreeMapCommonProps<DefaultTreeMapDatum>,\n    | 'valueFormat'\n    | 'margin'\n    | 'theme'\n    | 'labelFormat'\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'renderWrapper'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['nodes'],\n\n    identity: 'id',\n    value: 'value',\n\n    tile: 'squarify',\n    leavesOnly: false,\n    innerPadding: 0,\n    outerPadding: 0,\n\n    colors: { scheme: 'nivo' as const },\n    colorBy: 'pathComponents.1',\n    nodeOpacity: 0.33,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipSize: 0,\n    labelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    orientLabel: true,\n\n    enableParentLabel: true,\n    parentLabel: 'id',\n    parentLabelSize: 20,\n    parentLabelPosition: 'top',\n    parentLabelPadding: 6,\n    parentLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    borderWidth: 1,\n    borderColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    isInteractive: true,\n    tooltip: TreeMapNodeTooltip,\n\n    role: 'img',\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: TreeMapNode,\n    defs: [],\n    fill: [],\n}\n\nexport const htmlDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: TreeMapHtmlNode,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import {\n    treemapBinary,\n    treemapDice,\n    treemapSlice,\n    treemapSliceDice,\n    treemapSquarify,\n} from 'd3-hierarchy'\n\nexport const tileByType = {\n    binary: treemapBinary,\n    dice: treemapDice,\n    slice: treemapSlice,\n    sliceDice: treemapSliceDice,\n    squarify: treemapSquarify,\n} as const\n\nexport type TileType = keyof typeof tileByType\n","export default function (parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      i,\n      n = nodes.length,\n      sum,\n      sums = new Array(n + 1);\n\n  for (sums[0] = sum = i = 0; i < n; ++i) {\n    sums[i + 1] = sum += nodes[i].value;\n  }\n\n  partition(0, n, parent.value, x0, y0, x1, y1);\n\n  function partition(i, j, value, x0, y0, x1, y1) {\n    if (i >= j - 1) {\n      var node = nodes[i];\n      node.x0 = x0, node.y0 = y0;\n      node.x1 = x1, node.y1 = y1;\n      return;\n    }\n\n    var valueOffset = sums[i],\n        valueTarget = value / 2 + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n\n    while (k < hi) {\n      var mid = k + hi >>> 1;\n      if (sums[mid] < valueTarget) k = mid + 1;else hi = mid;\n    }\n\n    if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;\n    var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n\n    if (x1 - x0 > y1 - y0) {\n      var xk = (x0 * valueRight + x1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, xk, y1);\n      partition(k, j, valueRight, xk, y0, x1, y1);\n    } else {\n      var yk = (y0 * valueRight + y1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, x1, yk);\n      partition(k, j, valueRight, x0, yk, x1, y1);\n    }\n  }\n}","import dice from \"./dice.js\";\nimport slice from \"./slice.js\";\nexport default function (parent, x0, y0, x1, y1) {\n  (parent.depth & 1 ? slice : dice)(parent, x0, y0, x1, y1);\n}","import { createElement, useCallback, useMemo, MouseEvent } from 'react'\nimport omit from 'lodash/omit'\nimport cloneDeep from 'lodash/cloneDeep'\nimport startCase from 'lodash/startCase'\nimport {\n    treemap as d3Treemap,\n    hierarchy,\n    HierarchyNode,\n    HierarchyRectangularNode,\n} from 'd3-hierarchy'\nimport { useTheme, useValueFormatter, PropertyAccessor, usePropertyAccessor } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { commonDefaultProps } from './defaults'\nimport {\n    DefaultTreeMapDatum,\n    TreeMapCommonProps,\n    TreeMapDataProps,\n    ComputedNode,\n    ComputedNodeWithoutStyles,\n    ComputedNodeWithHandlers,\n    CustomLayerProps,\n} from './types'\nimport { tileByType } from './tiling'\n\nexport const useTreeMapLayout = <Datum extends object>({\n    width,\n    height,\n    tile,\n    innerPadding,\n    outerPadding,\n    enableParentLabel,\n    parentLabelSize,\n    parentLabelPosition,\n    leavesOnly,\n}: {\n    width: number\n    height: number\n    tile: TreeMapCommonProps<Datum>['tile']\n    innerPadding: TreeMapCommonProps<Datum>['innerPadding']\n    outerPadding: TreeMapCommonProps<Datum>['outerPadding']\n    enableParentLabel: TreeMapCommonProps<Datum>['enableParentLabel']\n    parentLabelSize: TreeMapCommonProps<Datum>['parentLabelSize']\n    parentLabelPosition: TreeMapCommonProps<Datum>['parentLabelPosition']\n    leavesOnly: TreeMapCommonProps<Datum>['leavesOnly']\n}) =>\n    useMemo(() => {\n        const treemap = d3Treemap<Datum>()\n            .size([width, height])\n            .tile(tileByType[tile])\n            .round(true)\n            .paddingInner(innerPadding)\n            .paddingOuter(outerPadding)\n\n        if (enableParentLabel && !leavesOnly) {\n            const parentLabelPadding = parentLabelSize + outerPadding * 2\n            // @ts-ignore\n            treemap[`padding${startCase(parentLabelPosition)}`](parentLabelPadding)\n        }\n\n        return treemap\n    }, [\n        width,\n        height,\n        tile,\n        innerPadding,\n        outerPadding,\n        enableParentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        leavesOnly,\n    ])\n\nexport const useHierarchy = <Datum extends object>({\n    root,\n    getValue,\n}: {\n    root: Datum\n    getValue: (datum: Datum) => number\n}) => useMemo(() => hierarchy<Datum>(root).sum(getValue), [root, getValue])\n\nconst computeNodeIdAndPath = <Datum extends object>(\n    node: HierarchyNode<Datum>,\n    getIdentity: (node: Datum) => string\n) => {\n    const path = node\n        .ancestors()\n        .map(ancestor => getIdentity(ancestor.data))\n        .reverse()\n\n    return { path: path.join('.'), pathComponents: path }\n}\n\nexport const useTreeMap = <Datum extends object = DefaultTreeMapDatum>({\n    data,\n    width,\n    height,\n    identity = commonDefaultProps.identity as PropertyAccessor<Datum, string>,\n    value = commonDefaultProps.value as PropertyAccessor<Datum, number>,\n    valueFormat,\n    leavesOnly = commonDefaultProps.leavesOnly,\n    tile = commonDefaultProps.tile,\n    innerPadding = commonDefaultProps.innerPadding,\n    outerPadding = commonDefaultProps.outerPadding,\n    label = commonDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    orientLabel = commonDefaultProps.orientLabel,\n    enableParentLabel = commonDefaultProps.enableParentLabel,\n    parentLabel = commonDefaultProps.parentLabel as TreeMapCommonProps<Datum>['parentLabel'],\n    parentLabelSize = commonDefaultProps.parentLabelSize,\n    parentLabelPosition = commonDefaultProps.parentLabelPosition,\n    parentLabelPadding = commonDefaultProps.parentLabelPadding,\n    colors = commonDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = commonDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = commonDefaultProps.nodeOpacity,\n    borderColor = commonDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    labelTextColor = commonDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    parentLabelTextColor = commonDefaultProps.parentLabelTextColor as TreeMapCommonProps<Datum>['parentLabelTextColor'],\n}: {\n    data: TreeMapDataProps<Datum>['data']\n    width: number\n    height: number\n    identity?: TreeMapCommonProps<Datum>['identity']\n    value?: TreeMapCommonProps<Datum>['value']\n    valueFormat?: TreeMapCommonProps<Datum>['valueFormat']\n    tile?: TreeMapCommonProps<Datum>['tile']\n    leavesOnly?: TreeMapCommonProps<Datum>['leavesOnly']\n    innerPadding?: TreeMapCommonProps<Datum>['innerPadding']\n    outerPadding?: TreeMapCommonProps<Datum>['outerPadding']\n    label?: TreeMapCommonProps<Datum>['label']\n    orientLabel?: TreeMapCommonProps<Datum>['orientLabel']\n    enableParentLabel?: TreeMapCommonProps<Datum>['enableParentLabel']\n    parentLabel?: TreeMapCommonProps<Datum>['parentLabel']\n    parentLabelSize?: TreeMapCommonProps<Datum>['parentLabelSize']\n    parentLabelPosition?: TreeMapCommonProps<Datum>['parentLabelPosition']\n    parentLabelPadding?: TreeMapCommonProps<Datum>['parentLabelPadding']\n    colors?: TreeMapCommonProps<Datum>['colors']\n    colorBy?: TreeMapCommonProps<Datum>['colorBy']\n    nodeOpacity?: TreeMapCommonProps<Datum>['nodeOpacity']\n    borderColor?: TreeMapCommonProps<Datum>['borderColor']\n    labelTextColor?: TreeMapCommonProps<Datum>['labelTextColor']\n    parentLabelTextColor?: TreeMapCommonProps<Datum>['parentLabelTextColor']\n}) => {\n    const getIdentity = usePropertyAccessor(identity)\n    const getValue = usePropertyAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n    const getLabel = usePropertyAccessor(label)\n    const getParentLabel = usePropertyAccessor(parentLabel)\n\n    const layout = useTreeMapLayout<Datum>({\n        width,\n        height,\n        tile,\n        innerPadding,\n        outerPadding,\n        enableParentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        leavesOnly,\n    })\n\n    const hierarchy = useHierarchy<Datum>({ root: data, getValue })\n\n    const rawNodes = useMemo(() => {\n        // d3 treemap mutates the data, so we need to copy it\n        // to have proper behavior for subsequents useMemo()\n        const root = cloneDeep(hierarchy)\n        layout(root)\n\n        return (\n            leavesOnly ? root.leaves() : root.descendants()\n        ) as HierarchyRectangularNode<Datum>[]\n    }, [hierarchy, layout, leavesOnly])\n\n    const nodes = useMemo(\n        () =>\n            rawNodes.map(rawNode => {\n                const { path, pathComponents } = computeNodeIdAndPath(rawNode, getIdentity)\n\n                const node = {\n                    id: getIdentity(rawNode.data),\n                    path,\n                    pathComponents,\n                    data: omit(rawNode.data, 'children'),\n                    x: rawNode.x0,\n                    y: rawNode.y0,\n                    width: rawNode.x1 - rawNode.x0,\n                    height: rawNode.y1 - rawNode.y0,\n                    value: rawNode.value!,\n                    formattedValue: formatValue(rawNode.value!),\n                    treeDepth: rawNode.depth,\n                    treeHeight: rawNode.height,\n                    isParent: rawNode.height > 0,\n                    isLeaf: rawNode.height === 0,\n                    parentLabelX: 0,\n                    parentLabelY: 0,\n                    parentLabelRotation: 0,\n                } as ComputedNodeWithoutStyles<Datum>\n\n                node.labelRotation = orientLabel && node.height > node.width ? -90 : 0\n\n                if (parentLabelPosition === 'top') {\n                    node.parentLabelX = outerPadding + parentLabelPadding\n                    node.parentLabelY = outerPadding + parentLabelSize / 2\n                }\n                if (parentLabelPosition === 'right') {\n                    node.parentLabelX = node.width - outerPadding - parentLabelSize / 2\n                    node.parentLabelY = node.height - outerPadding - parentLabelPadding\n                    node.parentLabelRotation = -90\n                }\n                if (parentLabelPosition === 'bottom') {\n                    node.parentLabelX = outerPadding + parentLabelPadding\n                    node.parentLabelY = node.height - outerPadding - parentLabelSize / 2\n                }\n                if (parentLabelPosition === 'left') {\n                    node.parentLabelX = outerPadding + parentLabelSize / 2\n                    node.parentLabelY = node.height - outerPadding - parentLabelPadding\n                    node.parentLabelRotation = -90\n                }\n\n                node.label = getLabel(node)\n                node.parentLabel = getParentLabel(node)\n\n                return node\n            }),\n        [\n            rawNodes,\n            getIdentity,\n            formatValue,\n            getLabel,\n            orientLabel,\n            getParentLabel,\n            parentLabelSize,\n            parentLabelPosition,\n            parentLabelPadding,\n            outerPadding,\n        ]\n    )\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const getParentLabelTextColor = useInheritedColor(parentLabelTextColor, theme)\n\n    const nodesWithStyles = useMemo(\n        () =>\n            nodes.map(node => {\n                const nodeWithStyles = {\n                    ...node,\n                    color: getColor(node),\n                    opacity: nodeOpacity,\n                } as ComputedNode<Datum>\n\n                nodeWithStyles.borderColor = getBorderColor(nodeWithStyles)\n                nodeWithStyles.labelTextColor = getLabelTextColor(nodeWithStyles)\n                nodeWithStyles.parentLabelTextColor = getParentLabelTextColor(nodeWithStyles)\n\n                return nodeWithStyles\n            }),\n        [nodes, getColor, nodeOpacity, getBorderColor, getLabelTextColor, getParentLabelTextColor]\n    )\n\n    return {\n        hierarchy,\n        nodes: nodesWithStyles,\n        layout,\n    }\n}\n\nexport const useInteractiveTreeMapNodes = <Datum extends object>(\n    nodes: ComputedNode<Datum>[],\n    {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: {\n        isInteractive: TreeMapCommonProps<Datum>['isInteractive']\n        onMouseEnter?: TreeMapCommonProps<Datum>['onMouseEnter']\n        onMouseMove?: TreeMapCommonProps<Datum>['onMouseMove']\n        onMouseLeave?: TreeMapCommonProps<Datum>['onMouseLeave']\n        onClick?: TreeMapCommonProps<Datum>['onClick']\n        tooltip: TreeMapCommonProps<Datum>['tooltip']\n    }\n): ComputedNodeWithHandlers<Datum>[] => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event, 'left')\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseEnter = useCallback(\n        (node, event) => {\n            showTooltip(node, event)\n            onMouseEnter?.(node, event)\n        },\n        [onMouseEnter, showTooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (node, event) => {\n            showTooltip(node, event)\n            onMouseMove?.(node, event)\n        },\n        [onMouseMove, showTooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node, event) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [onMouseLeave, hideTooltip]\n    )\n\n    const handleClick = useCallback(\n        (node, event) => {\n            onClick?.(node, event)\n        },\n        [onClick]\n    )\n\n    return useMemo(\n        () =>\n            nodes.map(node => {\n                if (!isInteractive) return node\n\n                return {\n                    ...node,\n                    onMouseEnter: (event: MouseEvent) => handleMouseEnter(node, event),\n                    onMouseMove: (event: MouseEvent) => handleMouseMove(node, event),\n                    onMouseLeave: (event: MouseEvent) => handleMouseLeave(node, event),\n                    onClick: (event: MouseEvent) => handleClick(node, event),\n                }\n            }),\n        [isInteractive, nodes, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useCustomLayerProps = <Datum extends object>({\n    nodes,\n}: CustomLayerProps<Datum>): CustomLayerProps<Datum> =>\n    useMemo(\n        () => ({\n            nodes,\n        }),\n        [nodes]\n    )\n","import roundNode from \"./round.js\";\nimport squarify from \"./squarify.js\";\nimport { required } from \"../accessors.js\";\nimport constant, { constantZero } from \"../constant.js\";\nexport default function () {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 = root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function (x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function (x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function (x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function (x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function (x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function (x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function (x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function (x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function (x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function (x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n}","import { createElement, memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useInteractiveTreeMapNodes } from './hooks'\nimport {\n    ComputedNode,\n    TreeMapCommonProps,\n    NodeAnimatedProps,\n    NodeComponent,\n    ComputedNodeWithHandlers,\n} from './types'\n\nconst getAnimatedNodeProps = <Datum extends object>(\n    node: ComputedNodeWithHandlers<Datum>\n): NodeAnimatedProps => ({\n    x: node.x,\n    y: node.y,\n    width: node.width,\n    height: node.height,\n    color: node.color,\n    labelX: node.width / 2,\n    labelY: node.height / 2,\n    labelRotation: node.labelRotation,\n    labelOpacity: 1,\n    parentLabelX: node.parentLabelX,\n    parentLabelY: node.parentLabelY,\n    parentLabelRotation: node.parentLabelRotation,\n    parentLabelOpacity: 1,\n})\n\nconst getEndingAnimatedNodeProps = <Datum extends object>(\n    node: ComputedNodeWithHandlers<Datum>\n): NodeAnimatedProps => {\n    const x = node.x + node.width / 2\n    const y = node.y + node.height / 2\n\n    return {\n        x,\n        y,\n        width: 0,\n        height: 0,\n        color: node.color,\n        labelX: 0,\n        labelY: 0,\n        labelRotation: node.labelRotation,\n        labelOpacity: 0,\n        parentLabelX: 0,\n        parentLabelY: 0,\n        parentLabelRotation: node.parentLabelRotation,\n        parentLabelOpacity: 0,\n    }\n}\n\ninterface TreeMapNodesProps<Datum extends object> {\n    nodes: ComputedNode<Datum>[]\n    nodeComponent: NodeComponent<Datum>\n    borderWidth: TreeMapCommonProps<Datum>['borderWidth']\n    enableLabel: TreeMapCommonProps<Datum>['enableLabel']\n    labelSkipSize: TreeMapCommonProps<Datum>['labelSkipSize']\n    enableParentLabel: TreeMapCommonProps<Datum>['enableParentLabel']\n    isInteractive: TreeMapCommonProps<Datum>['isInteractive']\n    onMouseEnter?: TreeMapCommonProps<Datum>['onMouseEnter']\n    onMouseMove?: TreeMapCommonProps<Datum>['onMouseMove']\n    onMouseLeave?: TreeMapCommonProps<Datum>['onMouseLeave']\n    onClick?: TreeMapCommonProps<Datum>['onClick']\n    tooltip: TreeMapCommonProps<Datum>['tooltip']\n}\n\nconst NonMemoizedTreeMapNodes = <Datum extends object>({\n    nodes,\n    nodeComponent,\n    borderWidth,\n    enableLabel,\n    labelSkipSize,\n    enableParentLabel,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: TreeMapNodesProps<Datum>) => {\n    const nodesWithHandlers = useInteractiveTreeMapNodes<Datum>(nodes, {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<ComputedNodeWithHandlers<Datum>, NodeAnimatedProps>(\n        nodesWithHandlers,\n        {\n            keys: node => node.path,\n            initial: getAnimatedNodeProps,\n            from: getEndingAnimatedNodeProps,\n            enter: getAnimatedNodeProps,\n            update: getAnimatedNodeProps,\n            leave: getEndingAnimatedNodeProps,\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <>\n            {transition((animatedProps, node) =>\n                createElement(nodeComponent, {\n                    key: node.path,\n                    node,\n                    animatedProps,\n                    borderWidth,\n                    enableLabel,\n                    labelSkipSize,\n                    enableParentLabel,\n                })\n            )}\n        </>\n    )\n}\n\nexport const TreeMapNodes = memo(NonMemoizedTreeMapNodes) as typeof NonMemoizedTreeMapNodes\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    SvgWrapper,\n    Container,\n    useDimensions,\n    // @ts-ignore\n    bindDefs,\n} from '@nivo/core'\nimport { useTreeMap, useCustomLayerProps } from './hooks'\nimport { TreeMapNodes } from './TreeMapNodes'\nimport {\n    DefaultTreeMapDatum,\n    NodeComponent,\n    TreeMapCommonProps,\n    TreeMapSvgProps,\n    LayerId,\n} from './types'\nimport { svgDefaultProps } from './defaults'\n\ntype InnerTreeMapProps<Datum extends object> = Omit<\n    TreeMapSvgProps<Datum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerTreeMap = <Datum extends object>({\n    data,\n    identity = svgDefaultProps.identity as TreeMapCommonProps<Datum>['identity'],\n    value = svgDefaultProps.value as TreeMapCommonProps<Datum>['value'],\n    valueFormat,\n    tile = svgDefaultProps.tile,\n    nodeComponent = svgDefaultProps.nodeComponent as NodeComponent<Datum>,\n    innerPadding = svgDefaultProps.innerPadding,\n    outerPadding = svgDefaultProps.outerPadding,\n    leavesOnly = svgDefaultProps.leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers as NonNullable<TreeMapSvgProps<Datum>['layers']>,\n    colors = svgDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = svgDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = svgDefaultProps.nodeOpacity,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    enableLabel = svgDefaultProps.enableLabel,\n    label = svgDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    labelTextColor = svgDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    orientLabel = svgDefaultProps.orientLabel,\n    labelSkipSize = svgDefaultProps.labelSkipSize,\n    enableParentLabel = svgDefaultProps.enableParentLabel,\n    parentLabel = svgDefaultProps.parentLabel as TreeMapCommonProps<Datum>['parentLabel'],\n    parentLabelSize = svgDefaultProps.parentLabelSize,\n    parentLabelPosition = svgDefaultProps.parentLabelPosition,\n    parentLabelPadding = svgDefaultProps.parentLabelPadding,\n    parentLabelTextColor = svgDefaultProps.parentLabelTextColor as TreeMapCommonProps<Datum>['parentLabelTextColor'],\n    isInteractive = svgDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip as TreeMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeMapProps<Datum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap<Datum>({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel,\n        parentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        parentLabelPadding,\n        parentLabelTextColor,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        nodes: null,\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <TreeMapNodes<Datum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                borderWidth={borderWidth}\n                enableLabel={enableLabel}\n                labelSkipSize={labelSkipSize}\n                enableParentLabel={enableParentLabel}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    const customLayerProps = useCustomLayerProps<Datum>({ nodes })\n\n    const boundDefs = bindDefs(defs, nodes, fill)\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const TreeMap = <Datum extends object = DefaultTreeMapDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: TreeMapSvgProps<Datum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerTreeMap<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultTreeMapDatum, TreeMapSvgProps } from './types'\nimport { TreeMap } from './TreeMap'\n\nexport const ResponsiveTreeMap = <Datum extends object = DefaultTreeMapDatum>(\n    props: Omit<TreeMapSvgProps<Datum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMap<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions } from '@nivo/core'\nimport { useCustomLayerProps, useTreeMap } from './hooks'\nimport { TreeMapNodes } from './TreeMapNodes'\nimport { DefaultTreeMapDatum, TreeMapCommonProps, TreeMapHtmlProps, LayerId } from './types'\nimport { htmlDefaultProps, svgDefaultProps } from './defaults'\n\ntype InnerTreeMapHtmlProps<Datum extends object> = Omit<\n    TreeMapHtmlProps<Datum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerTreeMapHtml = <Datum extends object>({\n    data,\n    identity = htmlDefaultProps.identity as TreeMapCommonProps<Datum>['identity'],\n    value = htmlDefaultProps.value as TreeMapCommonProps<Datum>['value'],\n    tile = htmlDefaultProps.tile,\n    nodeComponent = htmlDefaultProps.nodeComponent,\n    valueFormat,\n    innerPadding = htmlDefaultProps.innerPadding,\n    outerPadding = htmlDefaultProps.outerPadding,\n    leavesOnly = htmlDefaultProps.leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers as NonNullable<TreeMapHtmlProps<Datum>['layers']>,\n    colors = htmlDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = htmlDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = htmlDefaultProps.nodeOpacity,\n    borderWidth = htmlDefaultProps.borderWidth,\n    borderColor = htmlDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    enableLabel = htmlDefaultProps.enableLabel,\n    label = htmlDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    labelTextColor = htmlDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    orientLabel = htmlDefaultProps.orientLabel,\n    labelSkipSize = htmlDefaultProps.labelSkipSize,\n    enableParentLabel = htmlDefaultProps.enableParentLabel,\n    parentLabel = htmlDefaultProps.parentLabel as TreeMapCommonProps<Datum>['parentLabel'],\n    parentLabelSize = htmlDefaultProps.parentLabelSize,\n    parentLabelPosition = htmlDefaultProps.parentLabelPosition,\n    parentLabelPadding = htmlDefaultProps.parentLabelPadding,\n    parentLabelTextColor = htmlDefaultProps.parentLabelTextColor as TreeMapCommonProps<Datum>['parentLabelTextColor'],\n    isInteractive = htmlDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = htmlDefaultProps.tooltip as TreeMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeMapHtmlProps<Datum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap<Datum>({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel,\n        parentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        parentLabelPadding,\n        parentLabelTextColor,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        nodes: null,\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <TreeMapNodes<Datum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                borderWidth={borderWidth}\n                enableLabel={enableLabel}\n                labelSkipSize={labelSkipSize}\n                enableParentLabel={enableParentLabel}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    const customLayerProps = useCustomLayerProps<Datum>({ nodes })\n\n    return (\n        <div\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n            style={{\n                position: 'relative',\n                width: outerWidth,\n                height: outerHeight,\n            }}\n        >\n            <div style={{ position: 'absolute', top: margin.top, left: margin.left }}>\n                {layers.map((layer, i) => {\n                    if (typeof layer === 'function') {\n                        return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                    }\n\n                    return layerById?.[layer] ?? null\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport const TreeMapHtml = <Datum extends object = DefaultTreeMapDatum>({\n    isInteractive = htmlDefaultProps.isInteractive,\n    animate = htmlDefaultProps.animate,\n    motionConfig = htmlDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: TreeMapHtmlProps<Datum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerTreeMapHtml<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultTreeMapDatum, TreeMapHtmlProps } from './types'\nimport { TreeMapHtml } from './TreeMapHtml'\n\nexport const ResponsiveTreeMapHtml = <Datum extends object = DefaultTreeMapDatum>(\n    props: Omit<TreeMapHtmlProps<Datum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMapHtml<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { createElement, useCallback, useEffect, useRef } from 'react'\nimport {\n    degreesToRadians,\n    getRelativeCursor,\n    isCursorInRect,\n    Container,\n    useDimensions,\n    useTheme,\n    Margin,\n} from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useTreeMap } from './hooks'\nimport { ComputedNode, DefaultTreeMapDatum, TreeMapCanvasProps, TreeMapCommonProps } from './types'\nimport { canvasDefaultProps } from './defaults'\n\nconst findNodeUnderCursor = <Datum extends object>(\n    nodes: ComputedNode<Datum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\ntype InnerTreeMapCanvasProps<Datum extends object> = Omit<\n    TreeMapCanvasProps<Datum>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerTreeMapCanvas = <Datum extends object>({\n    data,\n    identity = canvasDefaultProps.identity as TreeMapCommonProps<Datum>['identity'],\n    value = canvasDefaultProps.identity as TreeMapCommonProps<Datum>['value'],\n    tile = canvasDefaultProps.tile,\n    valueFormat,\n    innerPadding = canvasDefaultProps.innerPadding,\n    outerPadding = canvasDefaultProps.outerPadding,\n    leavesOnly = canvasDefaultProps.leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    colors = canvasDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = canvasDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = canvasDefaultProps.nodeOpacity,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor = canvasDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    enableLabel = canvasDefaultProps.enableLabel,\n    label = canvasDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    labelTextColor = canvasDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    orientLabel = canvasDefaultProps.orientLabel,\n    labelSkipSize = canvasDefaultProps.labelSkipSize,\n    isInteractive = canvasDefaultProps.isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip as TreeMapCommonProps<Datum>['tooltip'],\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeMapCanvasProps<Datum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap<Datum>({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel: false,\n    })\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        const ctx = canvasEl.current.getContext('2d')\n        if (ctx === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        nodes.forEach(node => {\n            ctx.fillStyle = node.color\n            ctx.fillRect(node.x, node.y, node.width, node.height)\n\n            if (borderWidth > 0) {\n                ctx.strokeStyle = node.borderColor\n                ctx.lineWidth = borderWidth\n                ctx.strokeRect(node.x, node.y, node.width, node.height)\n            }\n        })\n\n        if (enableLabel) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'middle'\n            ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n            nodes.forEach(node => {\n                const showLabel =\n                    node.isLeaf &&\n                    (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n                if (!showLabel) return\n\n                const rotate = orientLabel && node.height > node.width\n\n                ctx.save()\n                ctx.translate(node.x + node.width / 2, node.y + node.height / 2)\n                ctx.rotate(degreesToRadians(rotate ? -90 : 0))\n\n                ctx.fillStyle = node.labelTextColor\n                ctx.fillText(`${node.label}`, 0, 0)\n\n                ctx.restore()\n            })\n        }\n    }, [\n        canvasEl,\n        nodes,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        borderWidth,\n        enableLabel,\n        orientLabel,\n        labelSkipSize,\n        theme,\n        pixelRatio,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            if (canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const node = findNodeUnderCursor(nodes, margin, x, y)\n\n            if (node !== undefined) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event, 'left')\n                onMouseMove?.(node, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [canvasEl, nodes, margin, showTooltipFromEvent, hideTooltip, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            if (canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const node = findNodeUnderCursor(nodes, margin, x, y)\n\n            if (node === undefined) return\n\n            onClick?.(node, event)\n        },\n        [canvasEl, nodes, margin, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n        />\n    )\n}\n\nexport const TreeMapCanvas = <Datum extends object = DefaultTreeMapDatum>({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: TreeMapCanvasProps<Datum>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerTreeMapCanvas<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultTreeMapDatum, TreeMapCanvasProps } from './types'\nimport { TreeMapCanvas } from './TreeMapCanvas'\n\nexport const ResponsiveTreeMapCanvas = <Datum extends object = DefaultTreeMapDatum>(\n    props: Omit<TreeMapCanvasProps<Datum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMapCanvas<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = cloneDeep;\n"],"names":["optional","f","required","Error","constantZero","x","count","node","sum","children","i","length","value","hierarchy","data","child","childs","n","root","Node","valued","nodes","defaultChildren","pop","Array","push","parent","depth","eachBefore","computeHeight","d","copyData","height","this","prototype","constructor","eachAfter","each","callback","current","next","reverse","sort","compare","path","end","start","ancestor","a","b","aNodes","ancestors","bNodes","c","leastCommonAncestor","k","splice","descendants","leaves","links","source","target","copy","x0","y0","x1","y1","Math","round","custom","ratio","squarify","row","nodeValue","dx","dy","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","rows","i0","i1","max","dice","slice","squarifyRatio","sqrt","svgLabelTransform","to","htmlLabelTransform","htmlParentLabelTransform","rotation","y","NonMemoizedTreeMapNode","animatedProps","borderWidth","enableLabel","enableParentLabel","labelSkipSize","theme","useTheme","showLabel","showParentLabel","transform","width","v","fill","strokeWidth","stroke","fillOpacity","onMouseEnter","onMouseMove","onMouseLeave","onClick","textAnchor","dominantBaseline","style","pointerEvents","label","parentLabel","TreeMapNode","memo","NonMemoizedTreeMapNodeTooltip","id","enableChip","color","TreeMapNodeTooltip","NonMemoizedTreeMapHtmlNode","boxSizing","position","top","left","borderStyle","borderColor","overflow","opacity","background","display","justifyContent","alignItems","whiteSpace","transformOrigin","TreeMapHtmlNode","commonDefaultProps","layers","identity","tile","leavesOnly","innerPadding","outerPadding","colors","scheme","colorBy","nodeOpacity","labelTextColor","from","modifiers","orientLabel","parentLabelSize","parentLabelPosition","parentLabelPadding","parentLabelTextColor","isInteractive","tooltip","role","animate","motionConfig","svgDefaultProps","nodeComponent","defs","htmlDefaultProps","canvasDefaultProps","pixelRatio","window","tileByType","binary","sums","partition","j","valueOffset","valueTarget","hi","mid","valueLeft","valueRight","xk","yk","sliceDice","treemapSquarify","useTreeMapLayout","useMemo","treemap","paddingStack","paddingInner","constant","paddingTop","paddingRight","paddingBottom","paddingLeft","positionNode","p","arguments","size","padding","paddingOuter","d3Treemap","startCase","useHierarchy","getValue","useTreeMap","valueFormat","getIdentity","usePropertyAccessor","formatValue","useValueFormatter","getLabel","getParentLabel","layout","rawNodes","cloneDeep","rawNode","pathComponents","computeNodeIdAndPath","omit","formattedValue","treeDepth","treeHeight","isParent","isLeaf","parentLabelX","parentLabelY","parentLabelRotation","getColor","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelTextColor","getParentLabelTextColor","nodesWithStyles","nodeWithStyles","useCustomLayerProps","getAnimatedNodeProps","labelX","labelY","labelRotation","labelOpacity","parentLabelOpacity","getEndingAnimatedNodeProps","NonMemoizedTreeMapNodes","nodesWithHandlers","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","createElement","handleMouseEnter","handleMouseMove","handleMouseLeave","handleClick","useInteractiveTreeMapNodes","useMotionConfig","springConfig","transition","useTransition","keys","initial","enter","update","leave","config","immediate","key","TreeMapNodes","InnerTreeMap","partialMargin","margin","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","layerById","customLayerProps","boundDefs","bindDefs","layer","TreeMap","renderWrapper","otherProps","ResponsiveTreeMap","InnerTreeMapHtml","TreeMapHtml","ResponsiveTreeMapHtml","findNodeUnderCursor","isCursorInRect","InnerTreeMapCanvas","canvasEl","useRef","useEffect","ctx","rotate","degreesToRadians","handleMouseHover","event","getRelativeCursor","ref","TreeMapCanvas","ResponsiveTreeMapCanvas","baseClone","module","exports","CLONE_DEEP_FLAG"],"sourceRoot":""}