{"version":3,"sources":["webpack:///../node_modules/lodash/startCase.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack:///../src/TreeMapNode.js","webpack:///../src/TreeMapHtmlNode.js","webpack:///../src/props.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///../src/TreeMapNodeTooltip.js","webpack:///../src/hooks.js","webpack:///../src/TreeMapNodes.js","webpack:///../src/TreeMap.js","webpack:///../src/ResponsiveTreeMap.js","webpack:///../src/TreeMapHtml.js","webpack:///../src/ResponsiveTreeMapHtml.js","webpack:///../src/TreeMapCanvas.js","webpack:///../src/ResponsiveTreeMapCanvas.js","webpack:///../node_modules/lodash/cloneDeep.js"],"names":["createCompounder","upperFirst","startCase","result","word","index","module","exports","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","TreeMapNode","node","animatedProps","borderWidth","enableLabel","enableParentLabel","labelSkipSize","theme","useTheme","showLabel","Math","showParentLabel","transform","width","to","v","height","fill","strokeWidth","stroke","fillOpacity","onMouseEnter","onMouseMove","onMouseLeave","onClick","textAnchor","dominantBaseline","style","pointerEvents","labelTransform","parentLabelTransform","memo","TreeMapHtmlNode","id","boxSizing","position","top","left","borderStyle","borderColor","overflow","opacity","background","color","display","justifyContent","alignItems","whiteSpace","transformOrigin","commonPropTypes","identity","PropTypes","valueFormat","colors","ordinalColorsPropType","colorBy","colorPropertyAccessorPropType","nodeOpacity","leavesOnly","tile","treeMapTilePropType","innerPadding","outerPadding","label","labelFormat","labelTextColor","inheritedColorPropType","orientLabel","parentLabel","parentLabelSize","parentLabelPosition","parentLabelPadding","parentLabelTextColor","isInteractive","tooltip","func","commonDefaultProps","nodeComponent","role","isRequired","pixelRatio","scheme","from","modifiers","animate","motionConfig","TreeMapDefaultProps","defs","TreeMapHtmlDefaultProps","TreeMapCanvasDefaultProps","global","_arrayLikeToArray","arr","len","arr2","Array","_slicedToArray","isArray","arrayWithHoles","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","iterableToArrayLimit","o","minLen","arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","test","unsupportedIterableToArray","TypeError","nonIterableRest","TreeMapNodeTooltip","enableChip","renderContent","useAccessor","accessor","useMemo","d","get","useTreeMap","data","getIdentity","getValue","formatValue","useValueFormatter","getLabel","getParentLabel","layout","treemap","d3Treemap","treeMapTileFromProp","useTreeMapLayout","hierarchy","root","useHierarchy","rawNodes","cloneDeep","nodes","rawNode","path","ancestor","computeNodeIdAndPath","pathComponents","omit","x","y","formattedValue","treeDepth","treeHeight","isParent","isLeaf","getColor","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelTextColor","getParentLabelTextColor","enhancedNodes","getAnimatedNodeProps","htmlTransform","labelOpacity","labelHtmlTransform","parentLabelOpacity","parentLabelHtmlTransform","getEndingAnimatedNodeProps","transformPixels","TreeMapNodes","interactiveNodes","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","handleMouseEnter","handleMouseMove","handleMouseLeave","handleClick","event","useInteractiveTreeMapNodes","useMotionConfig","springConfig","useTransition","initial","enter","update","leave","config","immediate","transition","WrappedTreeMap","withContainer","partialMargin","margin","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","boundDefs","bindDefs","ResponsiveTreeMap","props","WrappedTreeMapHtml","ResponsiveTreeMapHtml","findNodeUnderCursor","isCursorInRect","WrappedTreeMapCanvas","canvasEl","useRef","useEffect","ctx","rotate","degreesToRadians","handleMouseHover","getRelativeCursor","ref","ResponsiveTreeMapCanvas","baseClone","CLONE_DEEP_FLAG"],"mappings":"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","file":"5f65adf4628e15d3294389c8ecf8c8ed6fd5c048-0f03b77f4708693c430a.js","sourcesContent":["var createCompounder = require('./_createCompounder'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts `string` to\n * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n *\n * @static\n * @memberOf _\n * @since 3.1.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the start cased string.\n * @example\n *\n * _.startCase('--foo-bar--');\n * // => 'Foo Bar'\n *\n * _.startCase('fooBar');\n * // => 'Foo Bar'\n *\n * _.startCase('__FOO_BAR__');\n * // => 'FOO BAR'\n */\nvar startCase = createCompounder(function(result, word, index) {\n  return result + (index ? ' ' : '') + upperFirst(word);\n});\n\nmodule.exports = startCase;\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated, to } from 'react-spring'\nimport { useTheme } from '@nivo/core'\n\nconst TreeMapNode = ({\n    node,\n    animatedProps,\n    borderWidth,\n    enableLabel,\n    enableParentLabel,\n    labelSkipSize,\n}) => {\n    const theme = useTheme()\n\n    const showLabel =\n        enableLabel &&\n        node.isLeaf &&\n        (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n    const showParentLabel = enableParentLabel && node.isParent\n\n    return (\n        <animated.g transform={animatedProps.transform}>\n            <animated.rect\n                width={to(animatedProps.width, v => Math.max(v, 0))}\n                height={to(animatedProps.height, v => Math.max(v, 0))}\n                fill={node.fill ? node.fill : animatedProps.color}\n                strokeWidth={borderWidth}\n                stroke={node.borderColor}\n                fillOpacity={node.opacity}\n                onMouseEnter={node.onMouseEnter}\n                onMouseMove={node.onMouseMove}\n                onMouseLeave={node.onMouseLeave}\n                onClick={node.onClick}\n            />\n            {showLabel && (\n                <animated.text\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: node.labelTextColor,\n                        pointerEvents: 'none',\n                    }}\n                    fillOpacity={animatedProps.labelOpacity}\n                    transform={animatedProps.labelTransform}\n                >\n                    {node.label}\n                </animated.text>\n            )}\n            {showParentLabel && (\n                <animated.text\n                    dominantBaseline=\"central\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: node.parentLabelTextColor,\n                        pointerEvents: 'none',\n                    }}\n                    fillOpacity={animatedProps.parentLabelOpacity}\n                    transform={animatedProps.parentLabelTransform}\n                >\n                    {node.parentLabel}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nTreeMapNode.propTypes = {\n    node: PropTypes.object.isRequired,\n    animatedProps: PropTypes.object.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    enableParentLabel: PropTypes.bool.isRequired,\n    labelSkipSize: PropTypes.number.isRequired,\n}\n\nexport default memo(TreeMapNode)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from 'react-spring'\nimport { useTheme } from '@nivo/core'\n\nconst TreeMapHtmlNode = ({\n    node,\n    animatedProps,\n    borderWidth,\n    enableLabel,\n    enableParentLabel,\n    labelSkipSize,\n}) => {\n    const theme = useTheme()\n\n    const showLabel =\n        enableLabel &&\n        node.isLeaf &&\n        (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n    const showParentLabel = enableParentLabel && node.isParent\n\n    return (\n        <animated.div\n            id={node.path.replace(/[^\\w]/gi, '-')}\n            style={{\n                boxSizing: 'border-box',\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                transform: animatedProps.htmlTransform,\n                width: animatedProps.width,\n                height: animatedProps.height,\n                borderWidth,\n                borderStyle: 'solid',\n                borderColor: node.borderColor,\n                overflow: 'hidden',\n            }}\n        >\n            <animated.div\n                style={{\n                    boxSizing: 'border-box',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    opacity: node.opacity,\n                    width: animatedProps.width,\n                    height: animatedProps.height,\n                    background: animatedProps.color,\n                }}\n                onMouseEnter={node.onMouseEnter}\n                onMouseMove={node.onMouseMove}\n                onMouseLeave={node.onMouseLeave}\n                onClick={node.onClick}\n            />\n            {showLabel && (\n                <animated.span\n                    style={{\n                        ...theme.labels.text,\n                        position: 'absolute',\n                        display: 'flex',\n                        top: -5,\n                        left: -5,\n                        width: 10,\n                        height: 10,\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        whiteSpace: 'nowrap',\n                        color: node.labelTextColor,\n                        transformOrigin: 'center center',\n                        transform: animatedProps.labelHtmlTransform,\n                        opacity: animatedProps.labelOpacity,\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {node.label}\n                </animated.span>\n            )}\n            {showParentLabel && (\n                <animated.span\n                    style={{\n                        ...theme.labels.text,\n                        position: 'absolute',\n                        display: 'flex',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                        whiteSpace: 'nowrap',\n                        width: 10,\n                        height: 10,\n                        color: node.parentLabelTextColor,\n                        transformOrigin: 'top left',\n                        transform: animatedProps.parentLabelHtmlTransform,\n                        opacity: animatedProps.parentLabelOpacity,\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {node.parentLabel}\n                </animated.span>\n            )}\n        </animated.div>\n    )\n}\n\nTreeMapHtmlNode.propTypes = {\n    node: PropTypes.object.isRequired,\n    animatedProps: PropTypes.object.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    enableParentLabel: PropTypes.bool.isRequired,\n    labelSkipSize: PropTypes.number.isRequired,\n}\n\nexport default memo(TreeMapHtmlNode)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { treeMapTilePropType, defsPropTypes } from '@nivo/core'\nimport {\n    ordinalColorsPropType,\n    colorPropertyAccessorPropType,\n    inheritedColorPropType,\n} from '@nivo/colors'\nimport TreeMapNode from './TreeMapNode'\nimport TreeMapHtmlNode from './TreeMapHtmlNode'\n\nconst commonPropTypes = {\n    identity: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    valueFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n    colors: ordinalColorsPropType.isRequired,\n    colorBy: colorPropertyAccessorPropType.isRequired,\n    nodeOpacity: PropTypes.number.isRequired,\n\n    leavesOnly: PropTypes.bool.isRequired,\n    tile: treeMapTilePropType.isRequired,\n    innerPadding: PropTypes.number.isRequired,\n    outerPadding: PropTypes.number.isRequired,\n\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelFormat: PropTypes.string,\n    labelSkipSize: PropTypes.number.isRequired,\n    labelTextColor: inheritedColorPropType.isRequired,\n    orientLabel: PropTypes.bool.isRequired,\n\n    enableParentLabel: PropTypes.bool.isRequired,\n    parentLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    parentLabelSize: PropTypes.number.isRequired,\n    parentLabelPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']).isRequired,\n    parentLabelPadding: PropTypes.number.isRequired,\n    parentLabelTextColor: inheritedColorPropType.isRequired,\n\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: inheritedColorPropType.isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.func,\n}\n\nexport const TreeMapPropTypes = {\n    ...commonPropTypes,\n    nodeComponent: PropTypes.elementType.isRequired,\n    role: PropTypes.string.isRequired,\n    ...defsPropTypes,\n}\n\nexport const TreeMapHtmlPropTypes = {\n    ...commonPropTypes,\n    nodeComponent: PropTypes.elementType.isRequired,\n}\n\nexport const TreeMapCanvasPropTypes = {\n    ...commonPropTypes,\n    pixelRatio: PropTypes.number.isRequired,\n}\n\nconst commonDefaultProps = {\n    identity: 'id',\n    value: 'value',\n\n    tile: 'squarify',\n    leavesOnly: false,\n    innerPadding: 0,\n    outerPadding: 0,\n\n    colors: { scheme: 'nivo' },\n    colorBy: 'pathComponents.1',\n    nodeOpacity: 0.33,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipSize: 0,\n    labelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    orientLabel: true,\n\n    enableParentLabel: true,\n    parentLabel: 'id',\n    parentLabelSize: 20,\n    parentLabelPosition: 'top',\n    parentLabelPadding: 6,\n    parentLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    borderWidth: 1,\n    borderColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n\nexport const TreeMapDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: TreeMapNode,\n    role: 'img',\n    defs: [],\n    fill: [],\n}\n\nexport const TreeMapHtmlDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: TreeMapHtmlNode,\n}\n\nexport const TreeMapCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio:\n        global.window && global.window.devicePixelRatio ? global.window.devicePixelRatio : 1,\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst TreeMapNodeTooltip = ({ node, tooltip }) => {\n    return (\n        <BasicTooltip\n            id={node.id}\n            value={node.formattedValue}\n            enableChip={true}\n            color={node.color}\n            renderContent={typeof tooltip === 'function' ? tooltip.bind(null, { node }) : null}\n        />\n    )\n}\n\nTreeMapNodeTooltip.propTypes = {\n    node: PropTypes.shape({\n        id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        formattedValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        color: PropTypes.string.isRequired,\n    }).isRequired,\n    tooltip: PropTypes.elementType,\n}\n\nexport default memo(TreeMapNodeTooltip)\n","import React, { useCallback, useMemo } from 'react'\nimport get from 'lodash/get'\nimport omit from 'lodash/omit'\nimport cloneDeep from 'lodash/cloneDeep'\nimport startCase from 'lodash/startCase'\nimport { treemap as d3Treemap, hierarchy } from 'd3-hierarchy'\nimport { treeMapTileFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { TreeMapDefaultProps } from './props'\nimport TreeMapNodeTooltip from './TreeMapNodeTooltip'\n\nexport const useTreeMapLayout = ({\n    width,\n    height,\n    tile,\n    innerPadding,\n    outerPadding,\n    enableParentLabel,\n    parentLabelSize,\n    parentLabelPosition,\n    leavesOnly,\n}) =>\n    useMemo(() => {\n        const treemap = d3Treemap()\n            .size([width, height])\n            .tile(treeMapTileFromProp(tile))\n            .round(true)\n            .paddingInner(innerPadding)\n            .paddingOuter(outerPadding)\n\n        if (enableParentLabel && !leavesOnly) {\n            const parentLabelPadding = parentLabelSize + outerPadding * 2\n            treemap[`padding${startCase(parentLabelPosition)}`](parentLabelPadding)\n        }\n\n        return treemap\n    }, [\n        width,\n        height,\n        tile,\n        innerPadding,\n        outerPadding,\n        enableParentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        leavesOnly,\n    ])\n\nexport const useHierarchy = ({ root, getValue }) =>\n    useMemo(() => hierarchy(root).sum(getValue), [root, getValue])\n\nexport const useAccessor = accessor =>\n    useMemo(() => {\n        if (typeof accessor === 'function') return accessor\n        return d => get(d, accessor)\n    }, [accessor])\n\nconst computeNodeIdAndPath = (node, getIdentity) => {\n    const path = node\n        .ancestors()\n        .map(ancestor => getIdentity(ancestor.data))\n        .reverse()\n\n    return [path.join('.'), path]\n}\n\nexport const useTreeMap = ({\n    data,\n    identity = TreeMapDefaultProps.identity,\n    value = TreeMapDefaultProps.value,\n    valueFormat,\n    leavesOnly = TreeMapDefaultProps.leavesOnly,\n    width,\n    height,\n    tile = TreeMapDefaultProps.tile,\n    innerPadding = TreeMapDefaultProps.innerPadding,\n    outerPadding = TreeMapDefaultProps.outerPadding,\n    label = TreeMapDefaultProps.label,\n    orientLabel = TreeMapDefaultProps.orientLabel,\n    enableParentLabel = TreeMapDefaultProps.enableParentLabel,\n    parentLabel = TreeMapDefaultProps.parentLabel,\n    parentLabelSize = TreeMapDefaultProps.parentLabelSize,\n    parentLabelPosition = TreeMapDefaultProps.parentLabelPosition,\n    parentLabelPadding = TreeMapDefaultProps.parentLabelPadding,\n    colors = TreeMapDefaultProps.colors,\n    colorBy = TreeMapDefaultProps.colorBy,\n    nodeOpacity = TreeMapDefaultProps.nodeOpacity,\n    borderColor = TreeMapDefaultProps.borderColor,\n    labelTextColor = TreeMapDefaultProps.labelTextColor,\n    parentLabelTextColor = TreeMapDefaultProps.parentLabelTextColor,\n}) => {\n    const getIdentity = useAccessor(identity)\n    const getValue = useAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n    const getLabel = useAccessor(label)\n    const getParentLabel = useAccessor(parentLabel)\n\n    const layout = useTreeMapLayout({\n        width,\n        height,\n        tile,\n        innerPadding,\n        outerPadding,\n        enableParentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        leavesOnly,\n    })\n\n    const hierarchy = useHierarchy({ root: data, getValue })\n\n    const rawNodes = useMemo(() => {\n        // d3 treemap mutates the data, so we need to copy it\n        // to have proper behavior for subsequents useMemo()\n        const root = cloneDeep(hierarchy)\n        layout(root)\n\n        return leavesOnly ? root.leaves() : root.descendants()\n    }, [hierarchy, layout, leavesOnly])\n\n    const nodes = useMemo(\n        () =>\n            rawNodes.map(rawNode => {\n                const [path, pathComponents] = computeNodeIdAndPath(rawNode, getIdentity)\n\n                const node = {\n                    id: getIdentity(rawNode.data),\n                    path,\n                    pathComponents,\n                    data: omit(rawNode.data, 'children'),\n                    x: rawNode.x0,\n                    y: rawNode.y0,\n                    width: rawNode.x1 - rawNode.x0,\n                    height: rawNode.y1 - rawNode.y0,\n                    value: rawNode.value,\n                    formattedValue: formatValue(rawNode.value),\n                    treeDepth: rawNode.depth,\n                    treeHeight: rawNode.height,\n                    isParent: rawNode.height > 0,\n                    isLeaf: rawNode.height === 0,\n                }\n\n                node.label = getLabel(node)\n                node.parentLabel = getParentLabel(node)\n                node.parentLabelRotation = 0\n\n                if (parentLabelPosition === 'top') {\n                    node.parentLabelX = outerPadding + parentLabelPadding\n                    node.parentLabelY = outerPadding + parentLabelSize / 2\n                }\n                if (parentLabelPosition === 'right') {\n                    node.parentLabelX = node.width - outerPadding - parentLabelSize / 2\n                    node.parentLabelY = node.height - outerPadding - parentLabelPadding\n                    node.parentLabelRotation = -90\n                }\n                if (parentLabelPosition === 'bottom') {\n                    node.parentLabelX = outerPadding + parentLabelPadding\n                    node.parentLabelY = node.height - outerPadding - parentLabelSize / 2\n                }\n                if (parentLabelPosition === 'left') {\n                    node.parentLabelX = outerPadding + parentLabelSize / 2\n                    node.parentLabelY = node.height - outerPadding - parentLabelPadding\n                    node.parentLabelRotation = -90\n                }\n\n                return node\n            }),\n        [\n            rawNodes,\n            leavesOnly,\n            getIdentity,\n            formatValue,\n            getLabel,\n            getParentLabel,\n            parentLabelSize,\n            parentLabelPosition,\n            parentLabelPadding,\n            outerPadding,\n        ]\n    )\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const getParentLabelTextColor = useInheritedColor(parentLabelTextColor, theme)\n\n    const enhancedNodes = useMemo(\n        () =>\n            nodes.map(node => {\n                node.opacity = nodeOpacity\n                node.labelRotation = orientLabel && node.height > node.width ? -90 : 0\n                node.color = getColor(node)\n                node.borderColor = getBorderColor(node)\n                node.labelTextColor = getLabelTextColor(node)\n                node.parentLabelTextColor = getParentLabelTextColor(node)\n\n                return node\n            }),\n        [\n            nodes,\n            getColor,\n            nodeOpacity,\n            getBorderColor,\n            getLabelTextColor,\n            getParentLabelTextColor,\n            orientLabel,\n        ]\n    )\n\n    return {\n        hierarchy,\n        nodes: enhancedNodes,\n        layout,\n    }\n}\n\nexport const useInteractiveTreeMapNodes = (\n    nodes,\n    { isInteractive, onMouseEnter, onMouseMove, onMouseLeave, onClick, tooltip }\n) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(\n                <TreeMapNodeTooltip node={node} tooltip={tooltip} />,\n                event,\n                'left'\n            )\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseEnter = useCallback(\n        (node, event) => {\n            showTooltip(node, event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [onMouseEnter, showTooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (node, event) => {\n            showTooltip(node, event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [onMouseMove, showTooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node, event) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [onMouseLeave, hideTooltip]\n    )\n\n    const handleClick = useCallback(\n        (node, event) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n\n    return useMemo(() => {\n        return nodes.map(node => {\n            if (!isInteractive) return node\n\n            return {\n                ...node,\n                onMouseEnter: event => handleMouseEnter(node, event),\n                onMouseMove: event => handleMouseMove(node, event),\n                onMouseLeave: event => handleMouseLeave(node, event),\n                onClick: event => handleClick(node, event),\n            }\n        })\n    }, [nodes, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick])\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTransition } from 'react-spring'\nimport { useMotionConfig } from '@nivo/core'\nimport { useInteractiveTreeMapNodes } from './hooks'\n\nconst getAnimatedNodeProps = node => {\n    return {\n        transform: `translate(${node.x},${node.y})`,\n        htmlTransform: `translate(${node.x}px,${node.y}px)`,\n        labelOpacity: 1,\n        labelTransform: `translate(${node.width / 2},${node.height / 2}) rotate(${\n            node.labelRotation\n        })`,\n        labelHtmlTransform: `translate(${node.width / 2}px,${node.height / 2}px) rotate(${\n            node.labelRotation\n        }deg)`,\n        parentLabelOpacity: 1,\n        parentLabelTransform: `translate(${node.parentLabelX},${node.parentLabelY}) rotate(${node.parentLabelRotation})`,\n        parentLabelHtmlTransform: `translate(${\n            node.parentLabelX - (node.parentLabelRotation === 0 ? 0 : 5)\n        }px,${node.parentLabelY - (node.parentLabelRotation === 0 ? 5 : 0)}px) rotate(${\n            node.parentLabelRotation\n        }deg)`,\n        width: node.width,\n        height: node.height,\n        color: node.color,\n    }\n}\n\nconst getEndingAnimatedNodeProps = node => {\n    const x = node.x + node.width / 2\n    const y = node.y + node.height / 2\n\n    return {\n        transform: `translate(${x},${y})`,\n        transformPixels: `translate(${x}px,${y}px)`,\n        labelOpacity: 0,\n        labelTransform: `translate(0,0) rotate(${node.labelRotation})`,\n        parentLabelOpacity: 0,\n        parentLabelTransform: `translate(0,0) rotate(${node.parentLabelRotation})`,\n        parentLabelHtmlTransform: `translate(0px,0px) rotate(${node.parentLabelRotation}deg)`,\n        width: 0,\n        height: 0,\n        color: node.color,\n    }\n}\n\nconst TreeMapNodes = ({\n    nodes,\n    nodeComponent,\n    borderWidth,\n    enableLabel,\n    labelSkipSize,\n    enableParentLabel,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}) => {\n    const interactiveNodes = useInteractiveTreeMapNodes(nodes, {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition(interactiveNodes, {\n        key: node => node.path,\n        initial: node => getAnimatedNodeProps(node),\n        from: node => getEndingAnimatedNodeProps(node),\n        enter: node => getAnimatedNodeProps(node),\n        update: node => getAnimatedNodeProps(node),\n        leave: node => getEndingAnimatedNodeProps(node),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return transition((animatedProps, node) => {\n        return React.createElement(nodeComponent, {\n            key: node.path,\n            node,\n            animatedProps,\n            borderWidth,\n            enableLabel,\n            labelSkipSize,\n            enableParentLabel,\n        })\n    })\n}\n\nTreeMapNodes.propTypes = {\n    nodes: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    nodeComponent: PropTypes.elementType.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    labelSkipSize: PropTypes.number.isRequired,\n    enableParentLabel: PropTypes.bool.isRequired,\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.elementType,\n}\n\nexport default memo(TreeMapNodes)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { SvgWrapper, withContainer, useDimensions, bindDefs } from '@nivo/core'\nimport { TreeMapDefaultProps, TreeMapPropTypes } from './props'\nimport { useTreeMap } from './hooks'\nimport TreeMapNodes from './TreeMapNodes'\n\nconst TreeMap = ({\n    data,\n    identity,\n    value,\n    tile,\n    nodeComponent,\n    valueFormat,\n    innerPadding,\n    outerPadding,\n    leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    colors,\n    colorBy,\n    nodeOpacity,\n    borderWidth,\n    borderColor,\n    defs,\n    fill,\n    enableLabel,\n    label,\n    labelTextColor,\n    orientLabel,\n    labelSkipSize,\n    enableParentLabel,\n    parentLabel,\n    parentLabelSize,\n    parentLabelPosition,\n    parentLabelPadding,\n    parentLabelTextColor,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    role,\n}) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel,\n        parentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        parentLabelPadding,\n        parentLabelTextColor,\n    })\n\n    const boundDefs = bindDefs(defs, nodes, fill)\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            <TreeMapNodes\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                borderWidth={borderWidth}\n                enableLabel={enableLabel}\n                labelSkipSize={labelSkipSize}\n                enableParentLabel={enableParentLabel}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n            />\n        </SvgWrapper>\n    )\n}\n\nTreeMap.propTypes = TreeMapPropTypes\n\nconst WrappedTreeMap = withContainer(TreeMap)\nWrappedTreeMap.defaultProps = TreeMapDefaultProps\n\nexport default WrappedTreeMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport TreeMap from './TreeMap'\n\nconst ResponsiveTreeMap = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMap width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveTreeMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { withContainer, useDimensions } from '@nivo/core'\nimport { TreeMapHtmlPropTypes, TreeMapHtmlDefaultProps } from './props'\nimport { useTreeMap } from './hooks'\nimport TreeMapNodes from './TreeMapNodes'\n\nconst TreeMapHtml = ({\n    data,\n    identity,\n    value,\n    tile,\n    nodeComponent,\n    valueFormat,\n    innerPadding,\n    outerPadding,\n    leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    colors,\n    colorBy,\n    nodeOpacity,\n    borderWidth,\n    borderColor,\n    enableLabel,\n    label,\n    labelTextColor,\n    orientLabel,\n    labelSkipSize,\n    enableParentLabel,\n    parentLabel,\n    parentLabelSize,\n    parentLabelPosition,\n    parentLabelPadding,\n    parentLabelTextColor,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel,\n        parentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        parentLabelPadding,\n        parentLabelTextColor,\n    })\n\n    return (\n        <div\n            style={{\n                position: 'relative',\n                width: outerWidth,\n                height: outerHeight,\n            }}\n        >\n            <div style={{ position: 'absolute', top: margin.top, left: margin.left }}>\n                <TreeMapNodes\n                    nodes={nodes}\n                    nodeComponent={nodeComponent}\n                    borderWidth={borderWidth}\n                    enableLabel={enableLabel}\n                    labelSkipSize={labelSkipSize}\n                    enableParentLabel={enableParentLabel}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                    onClick={onClick}\n                    tooltip={tooltip}\n                />\n            </div>\n        </div>\n    )\n}\n\nTreeMapHtml.propTypes = TreeMapHtmlPropTypes\n\nconst WrappedTreeMapHtml = withContainer(TreeMapHtml)\nWrappedTreeMapHtml.defaultProps = TreeMapHtmlDefaultProps\n\nexport default WrappedTreeMapHtml\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport TreeMapHtml from './TreeMapHtml'\n\nconst ResponsiveTreeMapHtml = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMapHtml width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveTreeMapHtml\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { useCallback, useEffect, useRef } from 'react'\nimport {\n    degreesToRadians,\n    getRelativeCursor,\n    isCursorInRect,\n    withContainer,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { TreeMapCanvasPropTypes, TreeMapCanvasDefaultProps } from './props'\nimport { useTreeMap } from './hooks'\nimport TreeMapNodeTooltip from './TreeMapNodeTooltip'\n\nconst findNodeUnderCursor = (nodes, margin, x, y) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst TreeMapCanvas = ({\n    data,\n    identity,\n    value,\n    tile,\n    valueFormat,\n    innerPadding,\n    outerPadding,\n    leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    colors,\n    colorBy,\n    nodeOpacity,\n    borderWidth,\n    borderColor,\n    enableLabel,\n    label,\n    labelTextColor,\n    orientLabel,\n    labelSkipSize,\n    isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip,\n    pixelRatio,\n}) => {\n    const canvasEl = useRef(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel: false,\n    })\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        nodes.forEach(node => {\n            ctx.fillStyle = node.color\n            ctx.fillRect(node.x, node.y, node.width, node.height)\n\n            if (borderWidth > 0) {\n                ctx.strokeStyle = node.borderColor\n                ctx.lineWidth = borderWidth\n                ctx.strokeRect(node.x, node.y, node.width, node.height)\n            }\n        })\n\n        if (enableLabel) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'middle'\n            ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n            nodes.forEach(node => {\n                const showLabel =\n                    node.isLeaf &&\n                    (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n                if (!showLabel) return\n\n                const rotate = orientLabel && node.height > node.width\n\n                ctx.save()\n                ctx.translate(node.x + node.width / 2, node.y + node.height / 2)\n                ctx.rotate(degreesToRadians(rotate ? -90 : 0))\n\n                ctx.fillStyle = node.labelTextColor\n                ctx.fillText(node.label, 0, 0)\n\n                ctx.restore()\n            })\n        }\n    }, [\n        canvasEl,\n        nodes,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        borderWidth,\n        enableLabel,\n        orientLabel,\n        labelSkipSize,\n        theme,\n        pixelRatio,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const node = findNodeUnderCursor(nodes, margin, x, y)\n\n            if (node !== undefined) {\n                showTooltipFromEvent(\n                    <TreeMapNodeTooltip node={node} tooltip={tooltip} />,\n                    event,\n                    'left'\n                )\n                onMouseMove && onMouseMove(node, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [canvasEl, nodes, margin, showTooltipFromEvent, hideTooltip, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const node = findNodeUnderCursor(nodes, margin, x, y)\n\n            if (node === undefined) return\n\n            onClick && onClick(node, event)\n        },\n        [canvasEl, nodes, margin, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nTreeMapCanvas.propTypes = TreeMapCanvasPropTypes\n\nconst WrappedTreeMapCanvas = withContainer(TreeMapCanvas)\nWrappedTreeMapCanvas.defaultProps = TreeMapCanvasDefaultProps\n\nexport default WrappedTreeMapCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport TreeMapCanvas from './TreeMapCanvas'\n\nconst ResponsiveTreeMapCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMapCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveTreeMapCanvas\n","var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = cloneDeep;\n"],"sourceRoot":""}