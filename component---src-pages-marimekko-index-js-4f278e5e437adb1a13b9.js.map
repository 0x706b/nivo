{"version":3,"sources":["webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack:///../src/props.ts","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack:///../src/types.ts","webpack:///../src/hooks.ts","webpack:///../src/Bar.tsx","webpack:///../src/Bars.tsx","webpack:///../src/BarTooltip.tsx","webpack:///../src/Marimekko.tsx","webpack:///../src/ResponsiveMarimekko.tsx","webpack:///../node_modules/lodash/random.js","webpack:///../node_modules/lodash/_baseRandom.js","webpack:///./src/lib/settings.js","webpack:///./src/data/components/marimekko/mapper.js","webpack:///./src/data/components/marimekko/props.js","webpack:///./src/pages/marimekko/index.js","webpack:///../src/compute.ts","webpack:///../src/components/AxisTick.tsx","webpack:///../src/components/Axis.tsx","webpack:///../src/components/Axes.tsx","webpack:///../src/components/GridLine.tsx","webpack:///../src/components/GridLines.tsx","webpack:///../src/components/Grid.tsx","webpack:///../src/canvas.ts"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","defaultProps","layout","offset","outerPadding","innerPadding","layers","enableGridX","enableGridY","colors","scheme","borderWidth","borderColor","from","modifiers","isInteractive","animate","motionConfig","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","forEach","getOwnPropertyDescriptors","defineProperties","offsetById","expand","diverging","none","silouhette","wiggle","stackOffsetWiggle","useMarimekko","data","id","valueFormat","rawDimensions","dimensions","width","height","useMemo","dimensionIds","dimension","useDataDimensions","stacked","stack","allValues","datum","min","Math","max","useStackedData","offsetFunction","useStack","normalizedData","getId","getValue","normalized","datumId","datumValue","index","useNormalizedData","thicknessScale","totalValue","acc","scaleLinear","totalPadding","useThicknessScale","dimensionsScale","useDimensionsScale","computedData","getColor","useOrdinalColorScale","formatValue","useValueFormatter","position","thickness","computedDatum","x","y","allPositions","totalSize","dimensionId","dimensionPoint","dimensionDatum","formattedValue","color","position0","position1","useComputedData","bars","theme","useTheme","getBorderColor","useInheritedColor","all","useBars","Bar","bar","animatedProps","tooltip","onClick","onMouseEnter","onMouseMove","onMouseLeave","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","event","createElement","handleClick","handleMouseEnter","handleMouseMove","handleMouseLeave","to","fill","stroke","strokeWidth","undefined","Bars","useMotionConfig","springConfig","transition","useTransition","initial","opacity","enter","update","leave","config","immediate","BarTooltip","enableChip","InnerMarimekko","partialMargin","margin","axisTop","axisRight","axisBottom","axisLeft","gridXValues","gridYValues","defs","legends","role","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","layerById","grid","axes","boundDefs","bindDefs","xScale","yScale","xValues","yValues","top","right","bottom","left","legendData","label","useLegendData","containerWidth","containerHeight","layerContext","useLayerContext","layer","Marimekko","otherProps","ResponsiveMarimekko","baseRandom","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","nativeRandom","random","module","exports","lower","upper","floating","temp","rand","nativeFloor","floor","settingsMapper","mapping","exclude","settings","options","overrides","omit","mapAxis","type","upperFirst","enable","mapFormat","format","enabled","TooltipWrapper","styled","div","TooltipKey","span","TooltipValue","CustomTooltip","style","values","patternLinesDef","background","rotation","lineWidth","spacing","match","props","group","help","description","required","controlType","defaultValue","defaults","controlOptions","choices","map","unit","enableControlForFlavors","step","themeProperty","defsProperties","flavors","axesProperties","motionProperties","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","legend","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","alert","JSON","stringify","groups","groupProperties","getRandomValue","generateData","statement","participation","stronglyAgree","agree","disagree","stronglyDisagree","initialProperties","orient","tickSize","tickPadding","tickRotation","legendOffset","legendPosition","itemTextColor","itemOpacity","symbolShape","effects","on","ComponentTemplate","name","meta","icon","currentFlavor","properties","defaultProperties","propertiesMapper","mapper","logAction","centerScale","bandwidth","scale","timeByType","millisecond","second","minute","hour","day","week","sunday","monday","tuesday","wednesday","thursday","friday","saturday","month","year","timeTypes","timeIntervalRegexp","RegExp","isInteger","isFinite","getScaleTicks","Array","spec","matches","timeType","interval","Number","computeCartesianTicks","axis","ticksPosition","tickValues","engine","textProps","textPropsByEngine","line","lineX","lineY","text","textX","textY","isRTL","document","textAlign","textBaseline","translate","d","ticks","getFormatter","formatter","timeFormat","Date","d3Format","computeGridLines","_values","lineValues","isArray","lineCount","x1","x2","y1","y2","AxisTick","_value","textAnchor","cursor","transform","dominantBaseline","Axis","renderTick","ariaHidden","legendNode","legendX","legendY","legendRotation","useSpring","lineX2","lineY2","tick","textTransform","aria-hidden","tickIndex","rotate","transitionProps","axisPropTypes","PropTypes","bool","axisPropType","positions","Axes","isXAxis","GridLine","GridLines","lines","Grid","xLines","yLines","renderAxisToCanvas","_format","ctx","degreesToRadians","String","renderAxesToCanvas","renderGridLinesToCanvas"],"mappings":"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","file":"component---src-pages-marimekko-index-js-4f278e5e437adb1a13b9.js","sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import * as React from 'react'\nimport {\n    stackOffsetDiverging,\n    stackOffsetExpand,\n    stackOffsetNone,\n    stackOffsetSilhouette,\n    stackOffsetWiggle,\n} from 'd3-shape'\nimport { ScaleLinear } from 'd3-scale'\nimport { Box, Dimensions, Theme, SvgDefsAndFill, ModernMotionProps, ValueFormat } from '@nivo/core'\nimport { AxisProps } from '@nivo/axes'\nimport { OrdinalColorScaleConfig, InheritedColorConfig } from '@nivo/colors'\nimport { LegendProps } from '@nivo/legends'\n\nexport type DatumId = string | number\nexport type DatumValue = number\nexport type DatumFormattedValue = string | number\n\nexport type DatumPropertyAccessor<RawDatum, T> = (datum: RawDatum) => T\n\nexport interface DataProps<RawDatum> {\n    data: RawDatum[]\n    id: string | number | DatumPropertyAccessor<RawDatum, DatumId>\n    value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    dimensions: {\n        id: string\n        value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    }[]\n    valueFormat?: ValueFormat<number>\n}\n\nexport interface NormalizedDatum<RawDatum> {\n    index: number\n    id: DatumId\n    value: DatumValue\n    data: RawDatum\n}\n\nexport interface DimensionDatum<RawDatum> {\n    id: string\n    value: number\n    formattedValue: string | number\n    color: string\n    x: number\n    y: number\n    width: number\n    height: number\n    datum: ComputedDatum<RawDatum>\n}\n\nexport interface ComputedDatum<RawDatum> extends NormalizedDatum<RawDatum> {\n    x: number\n    y: number\n    width: number\n    height: number\n    dimensions: DimensionDatum<RawDatum>[]\n}\n\nexport interface BarDatum<RawDatum> extends DimensionDatum<RawDatum> {\n    key: string\n    fill?: string\n    borderColor: string\n    borderWidth: number\n}\n\nexport type LabelAccessorFunction<RawDatum> = (datum: ComputedDatum<RawDatum>) => string | number\n\nexport type LayerId = 'grid' | 'axes' | 'bars' | 'legends'\n\nexport interface CustomLayerProps<RawDatum> {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n}\n\nexport type CustomLayer<RawDatum> = React.FC<CustomLayerProps<RawDatum>>\n\nexport type Layer<RawDatum> = LayerId | CustomLayer<RawDatum>\n\nexport interface TooltipProps<RawDatum> {\n    bar: BarDatum<RawDatum>\n}\n\nexport type BarTooltipType<RawDatum> = (props: TooltipProps<RawDatum>) => JSX.Element\n\nexport type Layout = 'horizontal' | 'vertical'\n\nexport const offsetById = {\n    // Applies a zero baseline and normalizes the values\n    // for each point such that the topline is always one.\n    expand: stackOffsetExpand,\n    // Positive values are stacked above zero, negative values\n    // are stacked below zero, and zero values are stacked at zero.\n    diverging: stackOffsetDiverging,\n    // Applies a zero baseline.\n    none: stackOffsetNone,\n    // Shifts the baseline down such that the center of the streamgraph\n    // is always at zero.\n    silouhette: stackOffsetSilhouette,\n    // Shifts the baseline so as to minimize the weighted wiggle of layers.\n    // This offset is recommended for streamgraphs in conjunction with the inside-out order.\n    // See Stacked Graphs—Geometry & Aesthetics by Bryon & Wattenberg for more information.\n    wiggle: stackOffsetWiggle,\n}\n\nexport type OffsetId = keyof typeof offsetById\n\nexport type CommonProps<RawDatum> = {\n    margin: Box\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n\n    // axes and grid\n    axisTop?: AxisProps\n    axisRight?: AxisProps\n    axisBottom?: AxisProps\n    axisLeft?: AxisProps\n    enableGridX: boolean\n    gridXValues?: number[]\n    enableGridY: boolean\n    gridYValues?: number[]\n\n    // colors, theme and border\n    colors: OrdinalColorScaleConfig<Omit<DimensionDatum<RawDatum>, 'color' | 'fill'>>\n    theme: Theme\n    borderWidth: number\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // labels\n    enableLabels: boolean\n    label: string | LabelAccessorFunction<RawDatum>\n    labelSkipWidth: number\n    labelSkipHeight: number\n    labelTextColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // interactivity\n    isInteractive: boolean\n    tooltip: BarTooltipType<RawDatum>\n\n    legends: LegendProps[]\n\n    role: string\n}\n\nexport type MouseEventHandler<RawDatum, ElementType> = (\n    datum: BarDatum<RawDatum>,\n    event: React.MouseEvent<ElementType>\n) => void\n\nexport type MouseEventHandlers<RawDatum, ElementType> = Partial<{\n    onClick: MouseEventHandler<RawDatum, ElementType>\n    onMouseEnter: MouseEventHandler<RawDatum, ElementType>\n    onMouseMove: MouseEventHandler<RawDatum, ElementType>\n    onMouseLeave: MouseEventHandler<RawDatum, ElementType>\n}>\n\nexport type SvgProps<RawDatum> = DataProps<RawDatum> &\n    Dimensions &\n    Partial<CommonProps<RawDatum>> &\n    ModernMotionProps &\n    SvgDefsAndFill<BarDatum<RawDatum>> &\n    MouseEventHandlers<RawDatum, SVGRectElement> & {\n        layers?: Layer<RawDatum>[]\n    }\n","import { useMemo } from 'react'\nimport { get } from 'lodash'\nimport { stack as d3Stack, Stack, Series } from 'd3-shape'\nimport { ScaleLinear, scaleLinear } from 'd3-scale'\nimport { useValueFormatter, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport {\n    NormalizedDatum,\n    ComputedDatum,\n    DataProps,\n    DatumPropertyAccessor,\n    Layout,\n    DimensionDatum,\n    CommonProps,\n    CustomLayerProps,\n    BarDatum,\n    OffsetId,\n    offsetById,\n} from './types'\n\n// d3 stack does not support defining `.keys()` using\n// a mix of keys and custom value accessors, so we're\n// building a map of accessors in any case, we're gonna\n// use it later for `stack.value()`.\nexport const useDataDimensions = <RawDatum>(rawDimensions: DataProps<RawDatum>['dimensions']) =>\n    useMemo(() => {\n        const dimensions: Record<string, (datum: RawDatum) => number> = {}\n        const dimensionIds: string[] = []\n        rawDimensions.forEach(dimension => {\n            dimensionIds.push(dimension.id)\n            dimensions[dimension.id] =\n                typeof dimension.value === 'function'\n                    ? dimension.value\n                    : (datum: RawDatum) => get(datum, dimension.value as string, 0)\n        })\n\n        return { dimensionIds, dimensions }\n    }, [rawDimensions])\n\nexport const useStack = <RawDatum>(\n    dimensionIds: string[],\n    dimensions: Record<string, (datum: RawDatum) => number>,\n    offset: OffsetId\n) =>\n    useMemo(() => {\n        const offsetFunction = offsetById[offset]\n\n        return d3Stack<RawDatum>()\n            .keys(dimensionIds)\n            .value((datum, key) => dimensions[key](datum))\n            .offset(offsetFunction)\n    }, [dimensionIds, dimensions, offset])\n\nexport const useStackedData = <RawDatum>(\n    stack: Stack<any, RawDatum, string>,\n    data: DataProps<RawDatum>['data']\n) =>\n    useMemo(() => {\n        const stacked = stack(data)\n\n        const allValues: number[] = []\n        stacked.forEach(dimension => {\n            dimension.forEach(datum => {\n                allValues.push(datum[0])\n                allValues.push(datum[1])\n            })\n        })\n\n        const min = Math.min(...allValues)\n        const max = Math.max(...allValues)\n\n        return {\n            stacked,\n            min,\n            max,\n        }\n    }, [stack, data])\n\nexport const useDimensionsScale = (\n    min: number,\n    max: number,\n    width: number,\n    height: number,\n    layout: Layout\n) =>\n    useMemo(() => {\n        if (layout === 'vertical') {\n            return scaleLinear().domain([max, min]).range([0, height])\n        }\n\n        return scaleLinear().domain([min, max]).range([0, width])\n    }, [min, max, width, height, layout])\n\nexport const useNormalizedData = <RawDatum>(\n    data: DataProps<RawDatum>['data'],\n    id: DataProps<RawDatum>['id'],\n    value: DataProps<RawDatum>['value']\n) => {\n    const getId: DatumPropertyAccessor<RawDatum, string | number> =\n        typeof id === 'function' ? id : (datum: RawDatum) => get(datum, id)\n    const getValue: DatumPropertyAccessor<RawDatum, number> =\n        typeof value === 'function' ? value : (datum: RawDatum) => get(datum, value, 0)\n\n    return useMemo(() => {\n        const normalized: NormalizedDatum<RawDatum>[] = []\n        data.forEach((datum, index) => {\n            const datumId = getId(datum)\n            const datumValue = getValue(datum)\n\n            normalized.push({\n                index,\n                id: datumId,\n                value: datumValue,\n                data: datum,\n            })\n        })\n\n        return normalized\n    }, [data, getId, getValue])\n}\n\nexport const useThicknessScale = <RawDatum>({\n    data,\n    width,\n    height,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    width: number\n    height: number\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) =>\n    useMemo(() => {\n        const totalValue = data.reduce((acc, datum) => acc + datum.value, 0)\n\n        const thicknessScale = scaleLinear().domain([0, totalValue])\n\n        const totalPadding = 2 * outerPadding + (data.length - 1) * innerPadding\n\n        if (layout === 'vertical') {\n            thicknessScale.range([0, width - totalPadding])\n        } else {\n            thicknessScale.range([0, height - totalPadding])\n        }\n\n        return thicknessScale\n    }, [data, width, height, layout])\n\nexport const useComputedData = <RawDatum>({\n    data,\n    stacked,\n    dimensionIds,\n    valueFormat,\n    thicknessScale,\n    dimensionsScale,\n    colors,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    stacked: Series<RawDatum, string>[]\n    dimensionIds: string[]\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n    colors: CommonProps<RawDatum>['colors']\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) => {\n    const getColor = useOrdinalColorScale<Omit<DimensionDatum<RawDatum>, 'color'>>(colors, 'id')\n\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    return useMemo(() => {\n        const computedData: ComputedDatum<RawDatum>[] = []\n\n        let position = outerPadding\n\n        data.forEach(datum => {\n            const thickness = thicknessScale(datum.value)\n\n            const computedDatum: ComputedDatum<RawDatum> = {\n                ...datum,\n                x: layout === 'vertical' ? position : 0,\n                y: layout === 'vertical' ? 0 : position,\n                width: layout === 'vertical' ? thickness : 0,\n                height: layout === 'vertical' ? 0 : thickness,\n                dimensions: [],\n            }\n\n            const allPositions: number[] = []\n            let totalSize = 0\n\n            position += thickness + innerPadding\n\n            dimensionIds.forEach(dimensionId => {\n                const dimension = stacked.find(stack => stack.key === dimensionId)\n                if (dimension) {\n                    const dimensionPoint = dimension[datum.index]\n                    const dimensionDatum: DimensionDatum<RawDatum> = {\n                        id: dimensionId,\n                        datum: computedDatum,\n                        value: dimensionPoint[1] - dimensionPoint[0],\n                        formattedValue: formatValue(dimensionPoint[1] - dimensionPoint[0]),\n                        color: 'rgba(0, 0, 0, 0)',\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    }\n\n                    const position0 = dimensionsScale(dimensionPoint[0])\n                    const position1 = dimensionsScale(dimensionPoint[1])\n\n                    if (layout === 'vertical') {\n                        dimensionDatum.x = computedDatum.x\n                        dimensionDatum.y = Math.min(position0, position1)\n                        dimensionDatum.width = computedDatum.width\n                        dimensionDatum.height = Math.max(position0, position1) - dimensionDatum.y\n\n                        allPositions.push(dimensionDatum.y)\n                        totalSize += dimensionDatum.height\n                    } else {\n                        dimensionDatum.x = Math.min(position0, position1)\n                        dimensionDatum.y = computedDatum.y\n                        dimensionDatum.width = Math.max(position0, position1) - dimensionDatum.x\n                        dimensionDatum.height = computedDatum.height\n\n                        allPositions.push(dimensionDatum.x)\n                        totalSize += dimensionDatum.width\n                    }\n\n                    dimensionDatum.color = getColor(dimensionDatum)\n\n                    computedDatum.dimensions.push(dimensionDatum)\n                }\n\n                if (layout === 'vertical') {\n                    computedDatum.y = Math.min(...allPositions)\n                    computedDatum.height = totalSize\n                } else {\n                    computedDatum.x = Math.min(...allPositions)\n                    computedDatum.width = totalSize\n                }\n            })\n\n            computedData.push(computedDatum)\n        })\n\n        return computedData\n    }, [\n        data,\n        stacked,\n        dimensionIds,\n        thicknessScale,\n        dimensionsScale,\n        layout,\n        outerPadding,\n        innerPadding,\n        getColor,\n        formatValue,\n    ])\n}\n\nexport const useBars = <RawDatum>(\n    data: ComputedDatum<RawDatum>[],\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>,\n    borderWidth: number\n) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<DimensionDatum<RawDatum>>(borderColor, theme)\n\n    return useMemo(() => {\n        const all: BarDatum<RawDatum>[] = []\n        data.forEach(datum => {\n            datum.dimensions.forEach(dimension => {\n                all.push({\n                    key: `${datum.id}-${dimension.id}`,\n                    ...dimension,\n                    borderColor: getBorderColor(dimension),\n                    borderWidth,\n                })\n            })\n        })\n\n        return all\n    }, [data, borderWidth, getBorderColor])\n}\n\nexport const useMarimekko = <RawDatum>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions: rawDimensions,\n    layout,\n    offset,\n    outerPadding,\n    innerPadding,\n    colors,\n    borderColor,\n    borderWidth,\n    width,\n    height,\n}: {\n    data: DataProps<RawDatum>['data']\n    id: DataProps<RawDatum>['id']\n    value: DataProps<RawDatum>['value']\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    dimensions: DataProps<RawDatum>['dimensions']\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n    colors: CommonProps<RawDatum>['colors']\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n    borderWidth: number\n    width: number\n    height: number\n}) => {\n    const { dimensionIds, dimensions } = useDataDimensions<RawDatum>(rawDimensions)\n    const stack = useStack<RawDatum>(dimensionIds, dimensions, offset)\n    const { stacked, min, max } = useStackedData<RawDatum>(stack, data)\n    const normalizedData = useNormalizedData<RawDatum>(data, id, value)\n    const thicknessScale = useThicknessScale({\n        data: normalizedData,\n        width,\n        height,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const dimensionsScale = useDimensionsScale(min, max, width, height, layout)\n    const computedData = useComputedData<RawDatum>({\n        data: normalizedData,\n        stacked,\n        dimensionIds,\n        valueFormat,\n        thicknessScale,\n        dimensionsScale,\n        colors,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const bars = useBars<RawDatum>(computedData, borderColor, borderWidth)\n\n    return {\n        computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n        dimensionIds,\n    }\n}\n\nexport const useLayerContext = <RawDatum>({\n    data,\n    bars,\n    thicknessScale,\n    dimensionsScale,\n}: {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n}): CustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            data,\n            bars,\n            thicknessScale,\n            dimensionsScale,\n        }),\n        [data, bars, thicknessScale, dimensionsScale]\n    )\n\nexport const useLegendData = <RawDatum>(dimensionIds: string[], bars: BarDatum<RawDatum>[]) => {\n    const legendData: {\n        id: string\n        label: string\n        color: string\n        fill?: string\n    }[] = []\n\n    dimensionIds.forEach(dimensionId => {\n        const bar = bars.find(bar => bar.id === dimensionId)\n        if (bar) {\n            legendData.push({\n                id: dimensionId,\n                label: dimensionId,\n                color: bar.color,\n                fill: bar.fill,\n            })\n        }\n    })\n\n    return legendData\n}\n","import React, { createElement, MouseEvent, useCallback } from 'react'\nimport { animated, SpringValues, to } from 'react-spring'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\n\ninterface BarProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    bar: BarDatum<RawDatum>\n    animatedProps: SpringValues<{\n        x: number\n        y: number\n        width: number\n        height: number\n        opacity: number\n        color: string\n        borderColor: string\n    }>\n    isInteractive: boolean\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bar = <RawDatum,>({\n    bar,\n    animatedProps,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        event => showTooltipFromEvent(createElement(tooltip, { bar }), event),\n        [showTooltipFromEvent, tooltip, bar]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.(bar, event)\n        },\n        [onClick, bar]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseMove?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(bar, event)\n            hideTooltip()\n        },\n        [onMouseLeave, bar, hideTooltip]\n    )\n\n    return (\n        <animated.rect\n            x={animatedProps.x}\n            y={animatedProps.y}\n            width={to(animatedProps.width, value => Math.max(value, 0))}\n            height={to(animatedProps.height, value => Math.max(value, 0))}\n            fill={bar.fill ?? animatedProps.color}\n            stroke={animatedProps.borderColor}\n            strokeWidth={bar.borderWidth}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import React from 'react'\nimport { useTransition } from 'react-spring'\nimport { useMotionConfig } from '@nivo/core'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\nimport { Bar } from './Bar'\n\ninterface BarsProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    isInteractive: boolean\n    bars: BarDatum<RawDatum>[]\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bars = <RawDatum,>({\n    bars,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarsProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<\n        BarDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            width: number\n            height: number\n            color: string\n            opacity: number\n            borderColor: string\n        }\n    >(bars, {\n        keys: bar => bar.key,\n        initial: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        from: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 0,\n            borderColor: bar.borderColor,\n        }),\n        enter: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        update: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        leave: bar => ({\n            opacity: 0,\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, bar) => (\n                <Bar<RawDatum>\n                    key={bar.key}\n                    bar={bar}\n                    animatedProps={style}\n                    isInteractive={isInteractive}\n                    tooltip={tooltip}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                />\n            ))}\n        </>\n    )\n}\n","import React from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { BarDatum } from './types'\n\nexport const BarTooltip = <RawDatum,>({ bar }: { bar: BarDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={`${bar.datum.id} - ${bar.id}`}\n        value={bar.formattedValue}\n        enableChip={true}\n        color={bar.color}\n    />\n)\n","import React, { createElement, Fragment, ReactNode } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { SvgProps, LayerId, DimensionDatum } from './types'\nimport { defaultProps } from './props'\nimport { useMarimekko, useLayerContext, useLegendData } from './hooks'\nimport { Bars } from './Bars'\nimport { BarTooltip } from './BarTooltip'\n\nconst InnerMarimekko = <RawDatum,>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions,\n    width,\n    height,\n    margin: partialMargin,\n    layout = defaultProps.layout,\n    offset = defaultProps.offset,\n    outerPadding = defaultProps.outerPadding,\n    innerPadding = defaultProps.innerPadding,\n    layers = defaultProps.layers,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<DimensionDatum<RawDatum>, 'color'>\n    >,\n    defs = [],\n    fill = [],\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<DimensionDatum<RawDatum>>,\n    isInteractive = defaultProps.isInteractive,\n    tooltip = BarTooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    legends = [],\n    role,\n}: SvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { computedData, bars, thicknessScale, dimensionsScale, dimensionIds } = useMarimekko<\n        RawDatum\n    >({\n        data,\n        id,\n        value,\n        dimensions,\n        valueFormat,\n        layout,\n        offset,\n        outerPadding,\n        innerPadding,\n        colors,\n        borderColor,\n        borderWidth,\n        width: innerWidth,\n        height: innerHeight,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        bars: null,\n        legends: null,\n    }\n\n    const boundDefs = bindDefs(defs, bars, fill)\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Bars<RawDatum>\n                key=\"bars\"\n                bars={bars}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n            />\n        )\n    }\n\n    const xScale = layout === 'vertical' ? thicknessScale : dimensionsScale\n    const yScale = layout === 'vertical' ? dimensionsScale : thicknessScale\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                xScale={enableGridX ? (xScale as any) : undefined}\n                yScale={enableGridY ? (yScale as any) : undefined}\n                width={innerWidth}\n                height={innerHeight}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    const legendData = useLegendData<RawDatum>(dimensionIds, bars)\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <g key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    const layerContext = useLayerContext<RawDatum>({\n        data: computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as LayerId] !== undefined) {\n                    return layerById[layer as LayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Marimekko = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    ...otherProps\n}: SvgProps<RawDatum>) => (\n    <Container\n        theme={otherProps.theme}\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n    >\n        <InnerMarimekko<RawDatum>\n            isInteractive={isInteractive}\n            animate={animate}\n            motionConfig={motionConfig}\n            {...otherProps}\n        />\n    </Container>\n)\n","import React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport { Marimekko } from './Marimekko'\nimport { SvgProps } from './types'\n\nexport const ResponsiveMarimekko = <RawDatum,>(\n    props: Omit<SvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Marimekko<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\n\nexport const settingsMapper = (mapping, { exclude = [] } = {}) => (settings, options = {}) => {\n    const overrides = {}\n\n    Object.keys(settings).forEach(key => {\n        if (mapping[key]) {\n            overrides[key] = mapping[key](settings[key], settings, options)\n        }\n    })\n\n    return {\n        ...omit(settings, exclude),\n        ...overrides,\n    }\n}\n\nexport const mapAxis = type => (value, settings) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }) => (enabled === true ? format : undefined)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { patternDotsDef, patternLinesDef } from '@nivo/core'\nimport { mapAxis, mapFormat, settingsMapper } from '../../../lib/settings'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n    background: #333;\n    padding: 12px 16px;\n    font-size: 12px;\n    border-radius: 2px;\n`\nconst TooltipKey = styled.span``\nconst TooltipValue = styled.span`\n    font-weight: 600;\n`\n\nconst CustomTooltip = ({ bar }) => (\n    <TooltipWrapper style={{ color: bar.color }}>\n        <TooltipKey>datum.id</TooltipKey>\n        <TooltipValue>{bar.datum.id}</TooltipValue>\n        <TooltipKey>id</TooltipKey>\n        <TooltipValue>{bar.id}</TooltipValue>\n        <TooltipKey>value</TooltipKey>\n        <TooltipValue>{bar.value}</TooltipValue>\n        <TooltipKey>color</TooltipKey>\n        <TooltipValue>{bar.color}</TooltipValue>\n        <TooltipKey>thickness</TooltipKey>\n        <TooltipValue>{bar.datum.thickness}</TooltipValue>\n    </TooltipWrapper>\n)\n\nexport default settingsMapper(\n    {\n        valueFormat: mapFormat,\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return undefined\n\n            return CustomTooltip\n        },\n        defs: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                patternLinesDef('lines', {\n                    background: 'rgba(0, 0, 0, 0)',\n                    color: 'inherit',\n                    rotation: -45,\n                    lineWidth: 4,\n                    spacing: 8,\n                }),\n            ]\n        },\n        fill: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                { match: { id: 'agree strongly' }, id: 'lines' },\n                { match: { id: 'disagree strongly' }, id: 'lines' },\n            ]\n        },\n    },\n    {\n        exclude: ['custom tooltip example', 'showcase pattern usage'],\n    }\n)\n","import { defaultProps as defaults, offsetById } from '@nivo/marimekko'\nimport {\n    themeProperty,\n    defsProperties,\n    groupProperties,\n    getLegendsProps,\n    motionProperties,\n    axesProperties,\n} from '../../../lib/componentProperties'\n\nconst props = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data, which should be immutable.',\n        description: `\n            The data doesn't have to conform to a specific schema,\n            it's gonna depend on how you configure \\`id\\`, \\`value\\`\n            and \\`dimensions\\`.\n        `,\n        type: 'RawDatum[]',\n        required: true,\n    },\n    {\n        key: 'id',\n        group: 'Base',\n        help: 'ID accessor.',\n        description: `\n            Define how to access the ID of each datum,\n            by default, nivo will look for the \\`id\\` property.\n        `,\n        type: 'string | (datum: RawDatum): string | number',\n        required: true,\n    },\n    {\n        key: 'value',\n        group: 'Base',\n        help: 'Value accessor.',\n        description: `\n            Define how to access the value of each datum,\n            which will dictate the thickness of the bars,\n            by default, nivo will look for the \\`value\\` property.\n        `,\n        type: 'string | (datum: RawDatum): number',\n        required: true,\n    },\n    {\n        key: 'dimensions',\n        group: 'Base',\n        help: 'Data dimensions configuration.',\n        type: '{ id: string, value: string | (datum: RawDatum) => number }',\n        required: true,\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'string | (value: number) => string | number',\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'layout',\n        help: `How to display bars.`,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.layout,\n        controlType: 'radio',\n        group: 'Base',\n        controlOptions: {\n            choices: [\n                { label: 'horizontal', value: 'horizontal' },\n                { label: 'vertical', value: 'vertical' },\n            ],\n        },\n    },\n    {\n        key: 'offset',\n        help: 'Offset type.',\n        type: 'OffsetId',\n        required: false,\n        controlType: 'choices',\n        group: 'Base',\n        defaultValue: defaults.offset,\n        controlOptions: {\n            choices: Object.keys(offsetById).map(key => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'outerPadding',\n        help: 'Space before the first bar and after the last one.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.outerPadding,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 20,\n            unit: 'px',\n        },\n    },\n    {\n        key: 'innerPadding',\n        help: 'Space between bars.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.innerPadding,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 20,\n            unit: 'px',\n        },\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            not required if using\n            \\`<ResponsiveMarimekko />\\`.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            not required if using\n            \\`<ResponsiveMarimekko />\\`.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    themeProperty,\n    {\n        key: 'colors',\n        help: 'Defines color range.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: defaults.colors,\n        controlType: 'ordinalColors',\n        group: 'Style',\n    },\n    ...defsProperties('Style', ['svg', 'api']),\n    {\n        key: 'showcase pattern usage',\n        flavors: ['svg'],\n        help: 'Patterns.',\n        description: `\n            You can use \\`defs\\` and \\`fill\\` properties\n            to use patterns, see\n            [dedicated guide](self:/guides/patterns)\n            for further information.\n        `,\n        type: 'boolean',\n        controlType: 'switch',\n        group: 'Style',\n    },\n    {\n        key: 'borderWidth',\n        help: 'Slices border width.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.borderWidth,\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute border color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.borderColor,\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    ...axesProperties(),\n    {\n        key: 'enableGridX',\n        help: 'Enable/disable x grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableGridX,\n        controlType: 'switch',\n        group: 'Grid & Axes',\n    },\n    {\n        key: 'gridXValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for vertical grid lines.',\n        type: 'number[]',\n        required: false,\n    },\n    {\n        key: 'enableGridY',\n        help: 'Enable/disable y grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableGridY,\n        controlType: 'switch',\n        group: 'Grid & Axes',\n    },\n    {\n        key: 'gridYValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for horizontal grid lines.',\n        type: 'number[]',\n        required: false,\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer must be a component.\n            \n            The layer component which will receive the chart's\n            context & computed data and must return a valid SVG element\n            for the \\`Marimekko\\` component.\n            \n            The props passed to layers have the following structure:\n            \n            \\`\\`\\`\n            {\n                data: ComputedDatum<RawDatum>[]\n                bars: BarDatum<RawDatum>[]\n                thicknessScale: ScaleLinear<number, number>\n                dimensionsScale: ScaleLinear<number, number>\n            }\n            \\`\\`\\`\n        `,\n        required: false,\n        type: 'Array<string | Function>',\n        defaultValue: defaults.layers,\n    },\n    {\n        key: 'isInteractive',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.isInteractive,\n        controlType: 'switch',\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onClick handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseEnter handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseMove handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseLeave handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: 'Component',\n        required: false,\n        help: 'Custom tooltip component',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will receive\n            the following props:\n            \n            \\`\\`\\`\n            {\n                bar: BarDatum<RawDatum>\n            }\n            \\`\\`\\`\n            \n            You can also customize the style of the tooltip using\n            the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        help: 'Showcase custom tooltip.',\n        type: 'boolean',\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    ...motionProperties(['svg'], defaults, 'react-spring'),\n    {\n        key: 'legends',\n        flavors: ['svg'],\n        type: 'Legend[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n]\n\nexport const groups = groupProperties(props)\n","import React, { Fragment } from 'react'\nimport { ResponsiveMarimekko, defaultProps } from '@nivo/marimekko'\nimport { random, omit } from 'lodash'\nimport ComponentTemplate from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/marimekko/meta.yml'\nimport mapper from '../../data/components/marimekko/mapper'\nimport { groups } from '../../data/components/marimekko/props'\n\nconst getRandomValue = () => random(0, 32)\n\nconst generateData = () =>\n    [`it's good`, `it's sweet`, `it's spicy`, 'worth eating', 'worth buying'].map(statement => ({\n        statement,\n        participation: getRandomValue(),\n        stronglyAgree: getRandomValue(),\n        agree: getRandomValue(),\n        disagree: getRandomValue(),\n        stronglyDisagree: getRandomValue(),\n    }))\n\nconst initialProperties = {\n    id: 'statement',\n    value: 'participation',\n    dimensions: [\n        {\n            id: 'disagree strongly',\n            value: 'stronglyDisagree',\n        },\n        {\n            id: 'disagree',\n            value: 'disagree',\n        },\n        {\n            id: 'agree',\n            value: 'agree',\n        },\n        {\n            id: 'agree strongly',\n            value: 'stronglyAgree',\n        },\n    ],\n    layout: defaultProps.layout,\n    offset: defaultProps.offset,\n    outerPadding: defaultProps.outerPadding,\n    innerPadding: 9,\n\n    axisTop: {\n        enable: false,\n        orient: 'top',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 36,\n    },\n    axisRight: {\n        enable: true,\n        orient: 'right',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 0,\n    },\n    axisBottom: {\n        enable: true,\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'participation',\n        legendOffset: 36,\n        legendPosition: 'middle',\n    },\n    axisLeft: {\n        enable: true,\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'opinions',\n        legendOffset: -40,\n        legendPosition: 'middle',\n    },\n    enableGridX: defaultProps.enableGridX,\n    enableGridY: defaultProps.enableGridY,\n\n    margin: {\n        top: 40,\n        right: 80,\n        bottom: 100,\n        left: 80,\n    },\n\n    valueFormat: { format: '', enabled: false },\n\n    colors: { scheme: 'spectral' },\n\n    borderWidth: 1,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.2]],\n    },\n\n    isInteractive: true,\n    'custom tooltip example': false,\n    tooltip: null,\n    'showcase pattern usage': true,\n\n    defs: [],\n    fill: [],\n\n    animate: defaultProps.animate,\n    motionConfig: defaultProps.motionConfig,\n\n    legends: [\n        {\n            anchor: 'bottom',\n            direction: 'row',\n            justify: false,\n            translateX: 0,\n            translateY: 80,\n            itemsSpacing: 0,\n            itemWidth: 140,\n            itemHeight: 18,\n            itemTextColor: '#999',\n            itemDirection: 'right-to-left',\n            itemOpacity: 1,\n            symbolSize: 18,\n            symbolShape: 'square',\n            effects: [\n                {\n                    on: 'hover',\n                    style: {\n                        itemTextColor: '#000',\n                    },\n                },\n            ],\n        },\n    ],\n}\n\nconst Marimekko = () => {\n    return (\n        <ComponentTemplate\n            name=\"Marimekko\"\n            meta={meta.Marimekko}\n            icon=\"marimekko\"\n            flavors={meta.flavors}\n            currentFlavor=\"svg\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={defaultProps}\n            propertiesMapper={mapper}\n            generateData={generateData}\n        >\n            {(properties, data, theme, logAction) => {\n                const handleClick = bar => {\n                    logAction({\n                        type: 'click',\n                        label: `[bar] ${bar.datum.id} - ${bar.id}: ${bar.value}`,\n                        color: bar.color,\n                        // prevent cyclic dependency\n                        data: {\n                            ...omit(bar, ['datum']),\n                            datum: omit(bar.datum, ['dimensions']),\n                        },\n                    })\n                }\n\n                return (\n                    <ResponsiveMarimekko\n                        data={data}\n                        {...properties}\n                        theme={theme}\n                        onClick={handleClick}\n                        legends={properties.legends.map(legend => ({\n                            ...legend,\n                        }))}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default Marimekko\n","import {\n    CountableTimeInterval,\n    timeMillisecond,\n    utcMillisecond,\n    timeSecond,\n    utcSecond,\n    timeMinute,\n    utcMinute,\n    timeHour,\n    utcHour,\n    timeDay,\n    utcDay,\n    timeWeek,\n    utcWeek,\n    timeSunday,\n    utcSunday,\n    timeMonday,\n    utcMonday,\n    timeTuesday,\n    utcTuesday,\n    timeWednesday,\n    utcWednesday,\n    timeThursday,\n    utcThursday,\n    timeFriday,\n    utcFriday,\n    timeSaturday,\n    utcSaturday,\n    timeMonth,\n    utcMonth,\n    timeYear,\n    utcYear,\n} from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport {\n    AxisValue,\n    Point,\n    TicksSpec,\n    AnyScale,\n    ScaleWithBandwidth,\n    ValueFormatter,\n    Line,\n} from './types'\n\nexport const centerScale = <Value>(scale: ScaleWithBandwidth) => {\n    const bandwidth = scale.bandwidth()\n\n    if (bandwidth === 0) return scale\n\n    let offset = bandwidth / 2\n    if (scale.round()) {\n        offset = Math.round(offset)\n    }\n\n    return <T extends Value>(d: T) => (scale(d) ?? 0) + offset\n}\n\nconst timeByType: Record<string, [CountableTimeInterval, CountableTimeInterval]> = {\n    millisecond: [timeMillisecond, utcMillisecond],\n    second: [timeSecond, utcSecond],\n    minute: [timeMinute, utcMinute],\n    hour: [timeHour, utcHour],\n    day: [timeDay, utcDay],\n    week: [timeWeek, utcWeek],\n    sunday: [timeSunday, utcSunday],\n    monday: [timeMonday, utcMonday],\n    tuesday: [timeTuesday, utcTuesday],\n    wednesday: [timeWednesday, utcWednesday],\n    thursday: [timeThursday, utcThursday],\n    friday: [timeFriday, utcFriday],\n    saturday: [timeSaturday, utcSaturday],\n    month: [timeMonth, utcMonth],\n    year: [timeYear, utcYear],\n}\n\nconst timeTypes = Object.keys(timeByType)\nconst timeIntervalRegexp = new RegExp(`^every\\\\s*(\\\\d+)?\\\\s*(${timeTypes.join('|')})s?$`, 'i')\n\nconst isInteger = (value: unknown): value is number =>\n    typeof value === 'number' && isFinite(value) && Math.floor(value) === value\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const getScaleTicks = <Value extends AxisValue>(\n    scale: AnyScale,\n    spec?: TicksSpec<Value>\n) => {\n    // specific values\n    if (Array.isArray(spec)) {\n        return spec\n    }\n\n    // continuous scales\n    if ('ticks' in scale) {\n        // default behaviour\n        if (spec === undefined) {\n            return scale.ticks()\n        }\n\n        // specific tick count\n        if (isInteger(spec)) {\n            return scale.ticks(spec)\n        }\n\n        if (typeof spec === 'string' && 'useUTC' in scale) {\n            // time interval\n            const matches = spec.match(timeIntervalRegexp)\n            if (matches) {\n                // UTC is used as it's more predictible\n                // however local time could be used too\n                // let's see how it fits users' requirements\n                const timeType = timeByType[matches[2]][scale.useUTC ? 1 : 0]\n\n                if (matches[1] === undefined) {\n                    return scale.ticks(timeType)\n                }\n\n                const interval = timeType.every(Number(matches[1]))\n\n                if (interval) {\n                    return scale.ticks(interval)\n                }\n            }\n\n            throw new Error(`Invalid tickValues: ${spec}`)\n        }\n    }\n\n    // non linear scale default\n    return scale.domain()\n}\n\nexport const computeCartesianTicks = <Value extends AxisValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends AxisValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return (d => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return (d3Format(format) as unknown) as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends AxisValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const lineCount = isInteger(_values) ? _values : undefined\n\n    const values = lineValues || getScaleTicks(scale, lineCount)\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import React, { useMemo } from 'react'\nimport { animated } from 'react-spring'\nimport { useTheme } from '@nivo/core'\nimport { AxisTickProps, AxisValue } from '../types'\n\nexport const AxisTick = <Value extends AxisValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { useSpring, useTransition, animated } from 'react-spring'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AnyScale, AxisProps, AxisValue } from '../types'\n\nexport const Axis = <Value extends AxisValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n","import React from 'react'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AnyScale, AxisProps, AxisValue } from '../types'\n\nexport const Axes = <X extends AxisValue, Y extends AxisValue>({\n    xScale,\n    yScale,\n    width,\n    height,\n    top,\n    right,\n    bottom,\n    left,\n}: {\n    xScale: AnyScale\n    yScale: AnyScale\n    width: number\n    height: number\n    top?: AxisProps<X>\n    right?: AxisProps<Y>\n    bottom?: AxisProps<X>\n    left?: AxisProps<Y>\n}) => {\n    const axes = { top, right, bottom, left }\n\n    return (\n        <>\n            {positions.map(position => {\n                const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                    ? AxisProps<X> | undefined\n                    : AxisProps<Y> | undefined\n\n                if (!axis) return null\n\n                const isXAxis = position === 'top' || position === 'bottom'\n                const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n\n                return (\n                    <Axis\n                        key={position}\n                        {...axis}\n                        axis={isXAxis ? 'x' : 'y'}\n                        x={position === 'right' ? width : 0}\n                        y={position === 'bottom' ? height : 0}\n                        scale={isXAxis ? xScale : yScale}\n                        length={isXAxis ? width : height}\n                        ticksPosition={ticksPosition}\n                    />\n                )\n            })}\n        </>\n    )\n}\n","import React from 'react'\nimport { SpringValues, animated } from 'react-spring'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = ({\n    animatedProps,\n}: {\n    animatedProps: SpringValues<{\n        opacity: number\n        x1: number\n        x2: number\n        y1: number\n        y2: number\n    }>\n}) => {\n    const theme = useTheme()\n\n    return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n}\n","import React from 'react'\nimport { useTransition } from 'react-spring'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = ({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\nimport { AnyScale, AxisValue } from '../types'\n\nexport const Grid = <X extends AxisValue, Y extends AxisValue>({\n    width,\n    height,\n    xScale,\n    yScale,\n    xValues,\n    yValues,\n}: {\n    width: number\n    height: number\n    xScale?: AnyScale\n    xValues?: number | X[]\n    yScale?: AnyScale\n    yValues?: number | Y[]\n}) => {\n    const xLines = useMemo(() => {\n        if (!xScale) return false\n\n        return computeGridLines({\n            width,\n            height,\n            scale: xScale,\n            axis: 'x',\n            values: xValues,\n        })\n    }, [xScale, xValues, width, height])\n\n    const yLines = useMemo(() => {\n        if (!yScale) return false\n\n        return computeGridLines({\n            width,\n            height,\n            scale: yScale,\n            axis: 'y',\n            values: yValues,\n        })\n    }, [height, width, yScale, yValues])\n\n    return (\n        <>\n            {xLines && <GridLines lines={xLines} />}\n            {yLines && <GridLines lines={yLines} />}\n        </>\n    )\n}\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport {\n    AxisValue,\n    TicksSpec,\n    AnyScale,\n    AxisLegendPosition,\n    CanvasAxisProp,\n    ValueFormatter,\n} from './types'\n\nexport const renderAxisToCanvas = <Value extends AxisValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontSize}px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends AxisValue, Y extends AxisValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProp<X>\n        right?: CanvasAxisProp<Y>\n        bottom?: CanvasAxisProp<X>\n        left?: CanvasAxisProp<Y>\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProp<X> | undefined\n            : CanvasAxisProp<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends AxisValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n"],"sourceRoot":""}