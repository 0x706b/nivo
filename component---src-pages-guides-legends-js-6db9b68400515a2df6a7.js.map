{"version":3,"file":"component---src-pages-guides-legends-js-6db9b68400515a2df6a7.js","mappings":"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","sources":["webpack://nivo-website/./src/components/PageContent.ts","webpack://nivo-website/./src/components/styled.ts","webpack://nivo-website/./src/components/guides/legends/LegendPosition.js","webpack://nivo-website/./src/components/guides/legends/LegendDirection.js","webpack://nivo-website/./src/components/guides/legends/LegendItemDirection.js","webpack://nivo-website/./src/components/guides/legends/SymbolShape.js","webpack://nivo-website/./src/pages/guides/legends.js","webpack://nivo-website/../node_modules/lodash/_baseSlice.js"],"sourcesContent":["import styled from 'styled-components'\nimport media from '../theming/mediaQueries'\n\nexport default styled.div`\n    margin: 0 50px;\n    position: relative;\n\n    ${media.tablet`\n        & {\n            margin: 0 30px;\n        }\n    `}\n\n    ${media.mobile`\n        & {\n            margin: 0 15px;\n        }\n    `}\n`\n","import styled from 'styled-components'\nimport media from '../theming/mediaQueries'\n\nexport const FullWidthBanner = styled.div`\n    background: ${({ theme }) => theme.colors.cardBackground};\n    margin-bottom: 40px;\n    padding: 20px;\n`\n\nexport const DescriptionBlock = styled.div`\n    max-width: 800px;\n    margin: 0 auto 50px;\n\n    ${media.tablet`\n        & {\n            margin: 0 15px 50px;\n        }\n    `}\n\n    ${media.mobile`\n        & {\n            margin: 0 15px 50px;\n        }\n    `}\n`\n\nexport const Card = styled.div`\n    background: ${({ theme }) => theme.colors.cardBackground};\n    box-shadow: ${({ theme }) => theme.cardShadow};\n`\n","import React from 'react'\nimport omit from 'lodash/omit'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useTheme } from '../../../theming/context'\n\nconst anchors = [\n    'top-left',\n    'top',\n    'top-right',\n    'right',\n    'bottom-right',\n    'bottom',\n    'bottom-left',\n    'left',\n    'center',\n]\n\nconst translateExamples = [\n    {\n        anchor: 'top',\n        translateX: -160,\n        translateY: -30,\n    },\n    {\n        anchor: 'left',\n        translateX: -30,\n        translateY: 50,\n    },\n    {\n        anchor: 'right',\n        translateX: -30,\n        translateY: -60,\n    },\n    {\n        anchor: 'bottom',\n        translateX: 160,\n        translateY: 30,\n    },\n]\n\nconst margin = 30\nconst legendProps = {\n    containerWidth: 800 - margin * 2,\n    containerHeight: 300 - margin * 2,\n    itemWidth: 120,\n    itemHeight: 16,\n    itemsSpacing: 4,\n    direction: 'column',\n}\n\nconst LegendPosition = () => {\n    const theme = useTheme()\n\n    return (\n        <div>\n            <h2>Legend position</h2>\n            <p>\n                The legend can be positioned in your chart area using the <code>anchor</code>{' '}\n                property.\n                <br />\n                You have 9 available directives:\n            </p>\n            <svg\n                width={legendProps.containerWidth + margin * 2}\n                height={legendProps.containerHeight + margin * 2}\n                style={{\n                    background: theme.colors.cardBackground,\n                }}\n            >\n                <text\n                    x={legendProps.containerWidth / 2 + margin}\n                    y={margin / 2}\n                    textAnchor=\"middle\"\n                    style={{\n                        alignmentBaseline: 'middle',\n                        fill: theme.colors.textLight,\n                        fontSize: '14px',\n                    }}\n                >\n                    margin\n                </text>\n                <g transform={`translate(${margin},${margin})`}>\n                    <rect\n                        fill={theme.colors.background}\n                        width={legendProps.containerWidth}\n                        height={legendProps.containerHeight}\n                    />\n                    {anchors.map(anchor => (\n                        <BoxLegendSvg\n                            {...legendProps}\n                            itemTextColor={theme.colors.text}\n                            key={anchor}\n                            anchor={anchor}\n                            data={[\n                                { id: 'a', label: anchor, color: theme.colors.accent },\n                                { id: 'b', label: '...', color: theme.colors.accent },\n                                { id: 'c', label: '...', color: theme.colors.accent },\n                            ]}\n                        />\n                    ))}\n                </g>\n            </svg>\n            <p>\n                The legend's anchor is relative to the inner chart area (with margin applied), but\n                depending on the chart type, you'll probably want to move it outside of this area.\n                <br />\n                That's where <code>translateX</code> & <code>translateY</code> come into play,\n                allowing to adjust the legend position from its original anchor.\n            </p>\n            <svg\n                width={legendProps.containerWidth + margin * 2}\n                height={legendProps.containerHeight + margin * 2}\n                style={{\n                    background: theme.colors.cardBackground,\n                }}\n            >\n                <text\n                    x={legendProps.containerWidth / 2 + margin}\n                    y={margin / 2}\n                    textAnchor=\"middle\"\n                    style={{\n                        alignmentBaseline: 'middle',\n                        fill: theme.colors.textLight,\n                        fontSize: '14px',\n                    }}\n                >\n                    margin\n                </text>\n                <g transform={`translate(${margin},${margin})`}>\n                    <rect\n                        fill={theme.colors.background}\n                        width={legendProps.containerWidth}\n                        height={legendProps.containerHeight}\n                    />\n                    {translateExamples.map((example, i) => (\n                        <BoxLegendSvg\n                            key={i}\n                            {...legendProps}\n                            {...omit(example, ['translateX', 'translateY'])}\n                            itemTextColor={theme.colors.text}\n                            data={[\n                                {\n                                    id: example.anchor,\n                                    label: `${example.anchor} (regular)`,\n                                    color: theme.colors.text,\n                                },\n                            ]}\n                        />\n                    ))}\n                    {translateExamples.map((example, i) => (\n                        <BoxLegendSvg\n                            key={i}\n                            {...legendProps}\n                            {...example}\n                            itemTextColor={theme.colors.text}\n                            data={[\n                                {\n                                    id: 'a',\n                                    label: `${example.anchor} (translated)`,\n                                    color: theme.colors.accent,\n                                },\n                                {\n                                    id: 'b',\n                                    label: `translateX: ${example.translateX}`,\n                                    color: theme.colors.accent,\n                                },\n                                {\n                                    id: 'c',\n                                    label: `translateY: ${example.translateY}`,\n                                    color: theme.colors.accent,\n                                },\n                            ]}\n                        />\n                    ))}\n                </g>\n            </svg>\n        </div>\n    )\n}\n\nexport default LegendPosition\n","import React from 'react'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useTheme } from '../../../theming/context'\n\nconst legendProps = {\n    containerWidth: 800,\n    containerHeight: 90,\n    itemWidth: 70,\n    itemHeight: 24,\n}\n\nconst LegendDirection = () => {\n    const theme = useTheme()\n\n    return (\n        <div>\n            <h2>Legend direction</h2>\n            <p>\n                Legends support two directions, using the <code>direction</code> property,{' '}\n                <code>column</code> or <code>row</code>.\n            </p>\n            <svg width={legendProps.containerWidth} height={legendProps.containerHeight}>\n                <BoxLegendSvg\n                    {...legendProps}\n                    itemTextColor={theme.colors.text}\n                    anchor=\"left\"\n                    direction=\"column\"\n                    data={[\n                        { id: 'a', label: `column`, color: theme.colors.accent },\n                        { id: 'b', label: `column`, color: theme.colors.accent },\n                        { id: 'c', label: `column`, color: theme.colors.accent },\n                    ]}\n                />\n                <BoxLegendSvg\n                    {...legendProps}\n                    itemTextColor={theme.colors.text}\n                    anchor=\"left\"\n                    translateX={260}\n                    direction=\"row\"\n                    data={[\n                        { id: 'a', label: `row`, color: theme.colors.accent },\n                        { id: 'b', label: `row`, color: theme.colors.accent },\n                        { id: 'c', label: `row`, color: theme.colors.accent },\n                    ]}\n                />\n            </svg>\n        </div>\n    )\n}\n\nexport default LegendDirection\n","import React from 'react'\nimport { LegendSvgItem } from '@nivo/legends'\nimport { useTheme } from '../../../theming/context'\n\nconst itemDirections = ['left-to-right', 'right-to-left', 'top-to-bottom', 'bottom-to-top']\n\nconst LegendItemDirection = () => {\n    const theme = useTheme()\n\n    const itemsProps = {\n        x: 0,\n        y: 0,\n        width: 160,\n        height: 40,\n        data: {\n            id: 'demo',\n            color: theme.colors.accent,\n        },\n    }\n\n    return (\n        <div>\n            <h2>Legend item direction</h2>\n            <p>\n                The <code>itemDirection</code> property defines how symbol and label are positioned.\n                <br />\n                You have 4 available directives:\n            </p>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                }}\n            >\n                {itemDirections.map(dir => (\n                    <div\n                        key={dir}\n                        style={{\n                            background: theme.colors.cardBackground,\n                            padding: '10px 15px',\n                            borderRadius: 2,\n                            display: 'flex',\n                            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n                        }}\n                    >\n                        <svg width={itemsProps.width} height={itemsProps.height}>\n                            <LegendSvgItem\n                                {...itemsProps}\n                                textColor={theme.colors.text}\n                                data={{\n                                    ...itemsProps.data,\n                                    label: dir,\n                                }}\n                                direction={dir}\n                            />\n                        </svg>\n                    </div>\n                ))}\n            </div>\n            <p>\n                The behavior is slightly different if you set <code>justify</code> to{' '}\n                <code>true</code> as the label will be positioned at the opposite of the symbol,\n                filling up the whole width/height of the legend's item.\n            </p>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                }}\n            >\n                {itemDirections.map(dir => (\n                    <div\n                        key={dir}\n                        style={{\n                            background: theme.colors.cardBackground,\n                            padding: '9px 12px',\n                            display: 'flex',\n                            boxShadow: '0 1px 2px rgba(0, 0, 0, 0.1)',\n                        }}\n                    >\n                        <svg key={dir} width={itemsProps.width} height={itemsProps.height}>\n                            <LegendSvgItem\n                                {...itemsProps}\n                                textColor={theme.colors.text}\n                                data={{\n                                    ...itemsProps.data,\n                                    label: dir,\n                                }}\n                                direction={dir}\n                                justify={true}\n                            />\n                        </svg>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default LegendItemDirection\n","import React from 'react'\nimport { LegendSvgItem } from '@nivo/legends'\nimport { Highlight } from '../../Highlight'\nimport { useTheme } from '../../../theming/context'\n\nconst shapes = ['square', 'circle', 'triangle', 'diamond']\n\nconst code = `\nconst CustomSymbolShape = ({\n    x, y, size, fill, borderWidth, borderColor\n}) => (\n    <rect\n        x={x}\n        y={y}\n        transform={\\`rotate(45 \\${size/2} \\${size/2})\\`}\n        fill={fill}\n        strokeWidth={borderWidth}\n        stroke={borderColor}\n        width={size}\n        height={size}\n        style={{ pointerEvents: 'none' }}\n    />\n)\n`.trim()\n\nconst SymbolShape = () => {\n    const theme = useTheme()\n\n    const itemsProps = {\n        x: 0,\n        y: 0,\n        width: 160,\n        height: 40,\n        data: {\n            id: 'demo',\n            color: theme.colors.accent,\n        },\n    }\n\n    return (\n        <div>\n            <h2>Symbol shape</h2>\n            <p>\n                You can customize symbols using <code>symbolShape</code> property.\n            </p>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                }}\n            >\n                {shapes.map(shape => (\n                    <div\n                        key={shape}\n                        style={{\n                            background: theme.colors.cardBackground,\n                            padding: '10px 15px',\n                            borderRadius: 2,\n                            display: 'flex',\n                            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n                        }}\n                    >\n                        <svg width={itemsProps.width} height={itemsProps.height}>\n                            <LegendSvgItem\n                                {...itemsProps}\n                                textColor={theme.colors.text}\n                                data={{\n                                    ...itemsProps.data,\n                                    label: shape,\n                                }}\n                                direction=\"left-to-right\"\n                                symbolShape={shape}\n                            />\n                        </svg>\n                    </div>\n                ))}\n            </div>\n            <p>\n                You can also use a custom shape passing a component to <code>symbolShape</code>:\n            </p>\n            <Highlight code={code} language=\"jsx\" />\n        </div>\n    )\n}\n\nexport default SymbolShape\n","import React from 'react'\nimport { themeContext } from '@nivo/core'\nimport { useTheme } from '../../theming/context'\nimport Layout from '../../components/Layout'\nimport { Seo } from '../../components/Seo'\nimport PageContent from '../../components/PageContent'\nimport LegendPosition from '../../components/guides/legends/LegendPosition'\nimport LegendDirection from '../../components/guides/legends/LegendDirection'\nimport LegendItemDirection from '../../components/guides/legends/LegendItemDirection'\nimport SymbolShape from '../../components/guides/legends/SymbolShape'\nimport { DescriptionBlock } from '../../components/styled'\n\nconst Legends = () => {\n    const theme = useTheme()\n\n    return (\n        <Layout>\n            <themeContext.Provider value={theme.nivo}>\n                <Seo title=\"Legends Guide\" />\n                <PageContent>\n                    <div className=\"guide__header\">\n                        <h1>Legends</h1>\n                    </div>\n                </PageContent>\n                <DescriptionBlock>\n                    <p>Let's see how to add legends to your charts.</p>\n                    <p>\n                        Legend components are available via the <code>@nivo/legends</code> package,\n                        however it's added as a dependency for most chart packages supporting them,\n                        in most cases you won't have to add it as a direct dependency.\n                    </p>\n                    <LegendPosition />\n                    <LegendDirection />\n                    <LegendItemDirection />\n                    <SymbolShape />\n                </DescriptionBlock>\n            </themeContext.Provider>\n        </Layout>\n    )\n}\n\nexport default Legends\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n"],"names":["styled","media","FullWidthBanner","theme","colors","cardBackground","DescriptionBlock","Card","cardShadow","anchors","translateExamples","anchor","translateX","translateY","margin","legendProps","containerWidth","containerHeight","itemWidth","itemHeight","itemsSpacing","direction","useTheme","width","height","style","background","x","y","textAnchor","alignmentBaseline","fill","textLight","fontSize","transform","map","itemTextColor","text","key","data","id","label","color","accent","example","i","omit","itemDirections","itemsProps","display","justifyContent","dir","padding","borderRadius","boxShadow","textColor","justify","shapes","code","trim","shape","symbolShape","Highlight","language","Layout","value","nivo","Seo","title","PageContent","className","module","exports","array","start","end","index","length","result","Array"],"sourceRoot":""}