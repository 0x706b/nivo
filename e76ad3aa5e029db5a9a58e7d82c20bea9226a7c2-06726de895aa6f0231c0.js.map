{"version":3,"sources":["webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack:///../src/props.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///../src/SwarmPlotTooltip.js","webpack:///../src/hooks.js","webpack:///../src/compute.js","webpack:///../src/AnimatedSwarmPlotNodes.js","webpack:///../src/StaticSwarmPlotNodes.js","webpack:///../src/SwarmPlotNode.js","webpack:///../src/SwarmPlotAnnotations.js","webpack:///../src/SwarmPlot.js","webpack:///../src/ResponsiveSwarmPlot.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///../src/SwarmPlotCanvas.js","webpack:///../src/ResponsiveSwarmPlotCanvas.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","commonPropTypes","data","PropTypes","groups","groupBy","identity","label","valueScale","scalePropType","size","values","sizes","isRequired","layout","gap","forceStrength","simulationIterations","layers","renderNode","colors","ordinalColorsPropType","colorBy","colorPropertyAccessorPropType","borderWidth","borderColor","inheritedColorPropType","enableGridX","gridXValues","enableGridY","gridYValues","axisTop","axisRight","axisBottom","axisLeft","annotations","isInteractive","onMouseEnter","onMouseMove","onMouseLeave","onClick","useMesh","debugMesh","tooltip","any","commonDefaultProps","role","pixelRatio","type","min","max","spacing","scheme","SwarmPlotDefaultProps","animate","motionStiffness","motionDamping","SwarmPlotCanvasDefaultProps","global","_arrayLikeToArray","arr","len","arr2","Array","_unsupportedIterableToArray","o","minLen","arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","from","test","_toConsumableArray","isArray","arrayWithoutHoles","iter","Symbol","iterator","iterableToArray","unsupportedIterableToArray","TypeError","nonIterableSpread","SwarmPlotTooltip","node","id","enableChip","color","useValueScale","width","height","axis","getValue","scale","useMemo","series","p","axes","generateSeriesAxis","computeScale","Math","computeValueScale","useOrdinalScale","groupCount","groupSize","range","scaleOrdinal","computeOrdinalScale","useForces","ordinalScale","getSize","collisionForce","forceCollide","d","xForce","yForce","forceY","forceX","x","y","collision","computeForces","useSize","isNumber","isPlainObject","isString","sizeScale","scaleLinear","get","getSizeGenerator","getAccessor","instruction","useSwarmPlot","valueFormat","valueScaleConfig","getIdentity","getLabel","formatValue","useValueFormatter","getGroup","getColor","useOrdinalColorScale","forces","config","horizontal","vertical","simulatedNodes","group","scaleSpec","getParsedValue","parseFloat","createDateNormalizer","simulation","forceSimulation","computeNodes","nodes","xScale","yScale","index","formattedValue","useBorderWidth","useSwarmPlotAnnotations","items","useAnnotations","getDimensions","offset","willEnter","style","colorR","colorG","colorB","willLeave","springConfig","spring","AnimatedSwarmPlotNodes","memo","getBorderWidth","getBorderColor","stiffness","damping","styles","interpolateColor","interpolatedStyles","getInterpolatedColor","StaticSwarmPlotNodes","SwarmPlotNode","handleMouseEnter","useCallback","event","handleMouseMove","handleMouseLeave","handleClick","transform","r","fill","strokeWidth","stroke","SwarmPlotAnnotations","innerWidth","innerHeight","containerWidth","containerHeight","SwarmPlot","partialMargin","margin","useDimensions","outerWidth","outerHeight","theme","useTheme","useInheritedColor","layerById","grid","xValues","yValues","top","right","bottom","left","mesh","enableNodeInteractivity","handlers","isEnabled","useTooltip","showTooltipFromEvent","hideTooltip","showNodeTooltip","useNodeMouseHandlers","undefined","debug","layerContext","layer","props","withContainer","ResponsiveSwarmPlot","_slicedToArray","arrayWithHoles","_arr","_n","_d","_e","_s","_i","next","done","err","iterableToArrayLimit","nonIterableRest","SwarmPlotCanvas","canvasEl","useRef","useState","currentNode","setCurrentNode","boundAnnotations","computedAnnotations","useComputedAnnotations","useVoronoiMesh","points","delaunay","voronoi","useEffect","ctx","renderGridLinesToCanvas","renderAxesToCanvas","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderAnnotationsToCanvas","getNodeFromMouseEvent","getRelativeCursor","isCursorInRect","nodeIndex","handleMouseHover","ref","cursor","nodeBorderWidth","ResponsiveSwarmPlotCanvas"],"mappings":"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","file":"e76ad3aa5e029db5a9a58e7d82c20bea9226a7c2-06726de895aa6f0231c0.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { axisPropType } from '@nivo/axes'\nimport { motionPropTypes } from '@nivo/core'\nimport {\n    ordinalColorsPropType,\n    inheritedColorPropType,\n    colorPropertyAccessorPropType,\n} from '@nivo/colors'\nimport { scalePropType } from '@nivo/scales'\nimport { annotationSpecPropType } from '@nivo/annotations'\n\nconst commonPropTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n    groups: PropTypes.arrayOf(PropTypes.string).isRequired,\n    groupBy: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    identity: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    valueScale: scalePropType.isRequired,\n    size: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.shape({\n            key: PropTypes.string.isRequired,\n            values: PropTypes.arrayOf(PropTypes.number).isRequired,\n            sizes: PropTypes.arrayOf(PropTypes.number).isRequired,\n        }),\n        PropTypes.func,\n    ]).isRequired,\n    layout: PropTypes.oneOf(['horizontal', 'vertical']).isRequired,\n    gap: PropTypes.number.isRequired,\n\n    forceStrength: PropTypes.number.isRequired,\n    simulationIterations: PropTypes.number.isRequired,\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf(['grid', 'axes', 'nodes', 'mesh', 'annotations']),\n            PropTypes.func,\n        ])\n    ).isRequired,\n    renderNode: PropTypes.func.isRequired,\n\n    colors: ordinalColorsPropType.isRequired,\n    colorBy: colorPropertyAccessorPropType.isRequired,\n    borderWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n    borderColor: inheritedColorPropType.isRequired,\n\n    enableGridX: PropTypes.bool.isRequired,\n    gridXValues: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n    enableGridY: PropTypes.bool.isRequired,\n    gridYValues: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    annotations: PropTypes.arrayOf(annotationSpecPropType).isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    useMesh: PropTypes.bool.isRequired,\n    debugMesh: PropTypes.bool.isRequired,\n    tooltip: PropTypes.any,\n}\n\nexport const SwarmPlotPropTypes = {\n    ...commonPropTypes,\n    role: PropTypes.string.isRequired,\n    ...motionPropTypes,\n}\n\nexport const SwarmPlotCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    groupBy: 'group',\n    identity: 'id',\n    label: 'id',\n    value: 'value',\n    valueScale: { type: 'linear', min: 0, max: 'auto' },\n    size: 6,\n    spacing: 2,\n    layout: 'vertical',\n    gap: 0,\n\n    forceStrength: 1,\n    simulationIterations: 120,\n\n    layers: ['grid', 'axes', 'nodes', 'mesh', 'annotations'],\n\n    colors: { scheme: 'nivo' },\n    colorBy: 'group',\n    borderWidth: 0,\n    borderColor: 'none',\n\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisRight: {},\n    axisBottom: {},\n    axisLeft: {},\n\n    annotations: [],\n\n    isInteractive: true,\n    useMesh: false,\n    debugMesh: false,\n}\n\nexport const SwarmPlotDefaultProps = {\n    ...commonDefaultProps,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 15,\n    role: 'img',\n}\n\nexport const SwarmPlotCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio:\n        global.window && global.window.devicePixelRatio ? global.window.devicePixelRatio : 1,\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst SwarmPlotTooltip = ({ node }) => (\n    <BasicTooltip\n        id={node.label}\n        value={node.formattedValue}\n        enableChip={true}\n        color={node.color}\n    />\n)\n\nSwarmPlotTooltip.propTypes = {\n    node: PropTypes.shape({\n        label: PropTypes.string.isRequired,\n        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        formattedValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        color: PropTypes.string.isRequired,\n    }).isRequired,\n}\n\nexport default SwarmPlotTooltip\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { useMemo, useCallback } from 'react'\nimport get from 'lodash/get'\nimport { useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\n\nimport {\n    computeValueScale,\n    computeOrdinalScale,\n    computeForces,\n    computeNodes,\n    getSizeGenerator,\n} from './compute'\nimport { useAnnotations } from '@nivo/annotations'\nimport SwarmPlotTooltip from './SwarmPlotTooltip'\n\nexport const useValueScale = ({ width, height, axis, getValue, scale, data }) =>\n    useMemo(\n        () =>\n            computeValueScale({\n                width,\n                height,\n                axis,\n                getValue,\n                scale,\n                data,\n            }),\n        [width, height, axis, getValue, scale, data]\n    )\n\nexport const useOrdinalScale = ({ width, height, axis, groups, gap }) =>\n    useMemo(() => computeOrdinalScale({ width, height, axis, groups, gap }), [\n        width,\n        height,\n        axis,\n        groups,\n        gap,\n    ])\n\nexport const useForces = ({ axis, valueScale, ordinalScale, getSize, spacing, forceStrength }) =>\n    useMemo(\n        () =>\n            computeForces({\n                axis,\n                valueScale,\n                ordinalScale,\n                getSize,\n                spacing,\n                forceStrength,\n            }),\n        [axis, valueScale, ordinalScale, getSize, spacing, forceStrength]\n    )\n\nconst useSize = size => useMemo(() => getSizeGenerator(size), [size])\n\nconst getAccessor = instruction => {\n    if (typeof instruction === 'function') return instruction\n    return d => get(d, instruction)\n}\n\nexport const useSwarmPlot = ({\n    width,\n    height,\n    data,\n    identity,\n    label,\n    groups,\n    groupBy,\n    value,\n    valueFormat,\n    valueScale: valueScaleConfig,\n    size,\n    spacing,\n    layout,\n    gap,\n    colors,\n    colorBy,\n    forceStrength,\n    simulationIterations,\n}) => {\n    const axis = layout === 'horizontal' ? 'x' : 'y'\n\n    const getIdentity = useMemo(() => getAccessor(identity), [identity])\n    const getLabel = useMemo(() => getAccessor(label), [label])\n    const getValue = useMemo(() => getAccessor(value), [value])\n    const formatValue = useValueFormatter(valueFormat)\n    const getGroup = useMemo(() => getAccessor(groupBy), [groupBy])\n    const getSize = useSize(size)\n    const getColor = useOrdinalColorScale(colors, colorBy)\n\n    const valueScale = useValueScale({\n        width,\n        height,\n        axis,\n        getValue,\n        scale: valueScaleConfig,\n        data,\n    })\n\n    const ordinalScale = useOrdinalScale({\n        width,\n        height,\n        axis,\n        groups,\n        gap,\n    })\n\n    const forces = useForces({\n        axis,\n        valueScale,\n        ordinalScale,\n        spacing,\n        forceStrength,\n    })\n\n    const { nodes, xScale, yScale } = useMemo(\n        () =>\n            computeNodes({\n                data,\n                getIdentity,\n                layout,\n                getValue,\n                valueScale,\n                getGroup,\n                ordinalScale,\n                getSize,\n                forces,\n                simulationIterations,\n                valueScaleConfig,\n            }),\n        [\n            data,\n            getIdentity,\n            layout,\n            getValue,\n            valueScale,\n            getGroup,\n            ordinalScale,\n            getSize,\n            forces,\n            simulationIterations,\n        ]\n    )\n\n    const augmentedNodes = useMemo(\n        () =>\n            nodes.map(node => ({\n                id: node.id,\n                index: node.index,\n                group: node.group,\n                label: getLabel(node),\n                value: node.value,\n                formattedValue: formatValue(node.value),\n                x: node.x,\n                y: node.y,\n                size: node.size,\n                color: getColor(node),\n                data: node.data,\n            })),\n        [nodes, getLabel, formatValue, getColor]\n    )\n\n    return {\n        nodes: augmentedNodes,\n        xScale,\n        yScale,\n        getColor,\n    }\n}\n\nexport const useBorderWidth = borderWidth =>\n    useMemo(() => {\n        if (typeof borderWidth === 'function') return borderWidth\n        return () => borderWidth\n    }, [borderWidth])\n\nexport const useNodeMouseHandlers = ({\n    isEnabled,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const showNodeTooltip = useMemo(() => {\n        if (tooltip) return (node, event) => showTooltipFromEvent(tooltip({ node }), event)\n        return (node, event) => showTooltipFromEvent(<SwarmPlotTooltip node={node} />, event)\n    }, [showTooltipFromEvent])\n\n    const mouseEnterHandler = useCallback(\n        (node, event) => {\n            if (!isEnabled) return\n            showNodeTooltip(node, event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [isEnabled, onMouseEnter]\n    )\n\n    const mouseMoveHandler = useCallback(\n        (node, event) => {\n            if (!isEnabled) return\n            showNodeTooltip(node, event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [isEnabled, onMouseMove]\n    )\n\n    const mouseLeaveHandler = useCallback(\n        (node, event) => {\n            if (!isEnabled) return\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [isEnabled, onMouseLeave],\n        hideTooltip\n    )\n\n    const clickHandler = useCallback(\n        (node, event) => {\n            isEnabled && onClick && onClick(node, event)\n        },\n        [isEnabled, onClick]\n    )\n\n    return {\n        onMouseEnter: mouseEnterHandler,\n        onMouseMove: mouseMoveHandler,\n        onMouseLeave: mouseLeaveHandler,\n        onClick: clickHandler,\n    }\n}\n\nexport const useSwarmPlotAnnotations = (items, annotations) =>\n    useAnnotations({\n        items,\n        annotations,\n        getDimensions: (node, offset) => {\n            const size = node.size + offset * 2\n\n            return { size, width: size, height: size }\n        },\n    })\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport get from 'lodash/get'\nimport isString from 'lodash/isString'\nimport isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport { scaleOrdinal, scaleLinear } from 'd3-scale'\nimport { forceSimulation, forceX, forceY, forceCollide } from 'd3-force'\nimport { computeScale, generateSeriesAxis, createDateNormalizer } from '@nivo/scales'\n\nexport const getSizeGenerator = size => {\n    if (typeof size === 'function') return size\n    if (isNumber(size)) return () => size\n    if (isPlainObject(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'Size is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'Size is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'Size is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return d => sizeScale(get(d, size.key))\n    }\n\n    throw new Error('Size is invalid, it should be either a function, a number or an object')\n}\n\nexport const computeValueScale = ({ width, height, axis, getValue, scale, data }) => {\n    const values = data.map(getValue)\n    if (scale.type === 'time') {\n        const series = [{ data: values.map(p => ({ data: { [axis]: p } })) }]\n        const axes = generateSeriesAxis(series, axis, scale)\n        return computeScale({ ...scale, axis }, { [axis]: axes }, width, height)\n    } else {\n        const min = Math.min(...values)\n        const max = Math.max(...values)\n        return computeScale({ ...scale, axis }, { [axis]: { min, max } }, width, height)\n    }\n}\n\nexport const computeOrdinalScale = ({ width, height, axis, groups, gap }) => {\n    if (!Array.isArray(groups) || groups.length === 0) {\n        throw new Error(`'groups' should be an array containing at least one item`)\n    }\n\n    const groupCount = groups.length\n\n    let groupSize\n    if (axis === 'x') {\n        groupSize = (height - gap * (groupCount - 1)) / groupCount\n    } else if (axis === 'y') {\n        groupSize = (width - gap * (groupCount - 1)) / groupCount\n    }\n\n    const range = groups.map((g, i) => i * (groupSize + gap) + groupSize / 2)\n\n    return scaleOrdinal(range).domain(groups)\n}\n\nexport const computeForces = ({ axis, valueScale, ordinalScale, spacing, forceStrength }) => {\n    const collisionForce = forceCollide(d => d.size / 2 + spacing / 2)\n\n    let xForce\n    let yForce\n    if (axis === 'x') {\n        xForce = forceX(d => {\n            //console.log(d)\n            return valueScale(d.value)\n        }).strength(forceStrength)\n        yForce = forceY(d => ordinalScale(d.group))\n    } else if (axis === 'y') {\n        xForce = forceX(d => ordinalScale(d.group))\n        yForce = forceY(d => valueScale(d.value)).strength(forceStrength)\n    }\n\n    return { x: xForce, y: yForce, collision: collisionForce }\n}\n\nexport const getParsedValue = scaleSpec => {\n    if (scaleSpec.type === 'linear') {\n        return parseFloat\n    } else if (scaleSpec.type === 'time' && scaleSpec.format !== 'native') {\n        return createDateNormalizer(scaleSpec)\n    } else {\n        return x => x\n    }\n}\n\nexport const computeNodes = ({\n    data,\n    getIdentity,\n    layout,\n    getValue,\n    valueScale,\n    getGroup,\n    ordinalScale,\n    getSize,\n    forces,\n    simulationIterations,\n    valueScaleConfig,\n}) => {\n    const config = {\n        horizontal: ['x', 'y'],\n        vertical: ['y', 'x'],\n    }\n\n    const simulatedNodes = data.map(d => ({\n        id: getIdentity(d),\n        group: getGroup(d),\n        value: getParsedValue(valueScaleConfig)(getValue(d)),\n        size: getSize(d),\n        data: { ...d },\n    }))\n    const simulation = forceSimulation(simulatedNodes)\n        .force('x', forces.x)\n        .force('y', forces.y)\n        .force('collide', forces.collision)\n        .stop()\n\n    simulation.tick(simulationIterations)\n\n    return {\n        [`${config[layout][0]}Scale`]: valueScale,\n        [`${config[layout][1]}Scale`]: ordinalScale,\n        nodes: simulation.nodes(),\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport { TransitionMotion, spring } from 'react-motion'\nimport { interpolateColor, getInterpolatedColor } from '@nivo/colors'\n\nconst willEnter = ({ style }) => ({\n    x: style.x.val,\n    y: style.y.val,\n    size: style.size.val,\n    colorR: style.colorR.val,\n    colorG: style.colorG.val,\n    colorB: style.colorB.val,\n    scale: 0,\n})\n\nconst willLeave = springConfig => ({ style }) => ({\n    x: style.x,\n    y: style.y,\n    size: style.size,\n    colorR: style.colorR,\n    colorG: style.colorG,\n    colorB: style.colorB,\n    scale: spring(0, springConfig),\n})\n\nconst AnimatedSwarmPlotNodes = memo(\n    ({\n        nodes,\n        renderNode,\n        getBorderWidth,\n        getBorderColor,\n        motionStiffness,\n        motionDamping,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n    }) => {\n        const springConfig = {\n            stiffness: motionStiffness,\n            damping: motionDamping,\n        }\n\n        return (\n            <TransitionMotion\n                willEnter={willEnter}\n                willLeave={willLeave(springConfig)}\n                styles={nodes.map(node => ({\n                    key: node.id,\n                    data: node,\n                    style: {\n                        x: spring(node.x, springConfig),\n                        y: spring(node.y, springConfig),\n                        size: spring(node.size, springConfig),\n                        ...interpolateColor(node.color, springConfig),\n                        scale: spring(1, springConfig),\n                    },\n                }))}\n            >\n                {interpolatedStyles => (\n                    <>\n                        {interpolatedStyles.map(({ key, style, data: node }) => {\n                            const color = getInterpolatedColor(style)\n\n                            return (\n                                <Fragment key={key}>\n                                    {renderNode({\n                                        node,\n                                        x: style.x,\n                                        y: style.y,\n                                        size: style.size,\n                                        scale: style.scale,\n                                        color,\n                                        borderWidth: getBorderWidth(node),\n                                        borderColor: getBorderColor(node),\n                                        isInteractive,\n                                        onMouseEnter,\n                                        onMouseMove,\n                                        onMouseLeave,\n                                        onClick,\n                                    })}\n                                </Fragment>\n                            )\n                        })}\n                    </>\n                )}\n            </TransitionMotion>\n        )\n    }\n)\n\nAnimatedSwarmPlotNodes.displayName = 'AnimatedSwarmPlotNodes'\nAnimatedSwarmPlotNodes.propTypes = {\n    nodes: PropTypes.array.isRequired,\n    renderNode: PropTypes.func.isRequired,\n    getBorderWidth: PropTypes.func.isRequired,\n    getBorderColor: PropTypes.func.isRequired,\n    motionStiffness: PropTypes.number.isRequired,\n    motionDamping: PropTypes.number.isRequired,\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default AnimatedSwarmPlotNodes\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, Fragment } from 'react'\nimport PropTypes from 'prop-types'\n\nconst StaticSwarmPlotNodes = memo(\n    ({\n        nodes,\n        renderNode,\n        getBorderWidth,\n        getBorderColor,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n    }) => {\n        return nodes.map(node => {\n            return (\n                <Fragment key={node.id}>\n                    {renderNode({\n                        node,\n                        x: node.x,\n                        y: node.y,\n                        size: node.size,\n                        color: node.color,\n                        borderWidth: getBorderWidth(node),\n                        borderColor: getBorderColor(node),\n                        isInteractive,\n                        onMouseEnter,\n                        onMouseMove,\n                        onMouseLeave,\n                        onClick,\n                    })}\n                </Fragment>\n            )\n        })\n    }\n)\n\nStaticSwarmPlotNodes.displayName = 'StaticSwarmPlotNodes'\nStaticSwarmPlotNodes.propTypes = {\n    nodes: PropTypes.array.isRequired,\n    renderNode: PropTypes.func.isRequired,\n    getBorderWidth: PropTypes.func.isRequired,\n    getBorderColor: PropTypes.func.isRequired,\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default StaticSwarmPlotNodes\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\n\nconst SwarmPlotNode = memo(\n    ({\n        node,\n        x,\n        y,\n        size,\n        scale,\n        color,\n        borderWidth,\n        borderColor,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n    }) => {\n        const handleMouseEnter = useCallback(event => onMouseEnter && onMouseEnter(node, event), [\n            node,\n            onMouseEnter,\n        ])\n        const handleMouseMove = useCallback(event => onMouseMove && onMouseEnter(node, event), [\n            node,\n            onMouseMove,\n        ])\n        const handleMouseLeave = useCallback(event => onMouseLeave && onMouseLeave(node, event), [\n            node,\n            onMouseLeave,\n        ])\n        const handleClick = useCallback(event => onClick && onClick(node, event), [node, onClick])\n\n        return (\n            <circle\n                transform={`translate(${x},${y}) scale(${scale})`}\n                r={size / 2}\n                fill={color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n\nSwarmPlotNode.displayName = 'SwarmPlotNode'\nSwarmPlotNode.propTypes = {\n    node: PropTypes.object.isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    size: PropTypes.number.isRequired,\n    scale: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\nSwarmPlotNode.defaultProps = {\n    scale: 1,\n}\n\nexport default SwarmPlotNode\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { Annotation } from '@nivo/annotations'\nimport { useSwarmPlotAnnotations } from './hooks'\n\nconst SwarmPlotAnnotations = ({ nodes, annotations, innerWidth, innerHeight }) => {\n    const boundAnnotations = useSwarmPlotAnnotations(nodes, annotations)\n\n    return boundAnnotations.map((annotation, i) => (\n        <Annotation\n            key={i}\n            {...annotation}\n            containerWidth={innerWidth}\n            containerHeight={innerHeight}\n        />\n    ))\n}\n\nSwarmPlotAnnotations.propTypes = {}\n\nexport default SwarmPlotAnnotations\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, Fragment } from 'react'\nimport { SvgWrapper, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { Mesh } from '@nivo/voronoi'\nimport { SwarmPlotPropTypes, SwarmPlotDefaultProps } from './props'\nimport { useSwarmPlot, useBorderWidth, useNodeMouseHandlers } from './hooks'\nimport AnimatedSwarmPlotNodes from './AnimatedSwarmPlotNodes'\nimport StaticSwarmPlotNodes from './StaticSwarmPlotNodes'\nimport SwarmPlotNode from './SwarmPlotNode'\nimport SwarmPlotAnnotations from './SwarmPlotAnnotations'\n\nconst SwarmPlot = memo(\n    ({\n        width,\n        height,\n        margin: partialMargin,\n        data,\n        groups,\n        groupBy,\n        identity,\n        label,\n        value,\n        valueFormat,\n        valueScale,\n        size,\n        spacing,\n        layout,\n        gap,\n\n        forceStrength,\n        simulationIterations,\n\n        layers,\n        renderNode,\n\n        colors,\n        colorBy,\n        borderWidth,\n        borderColor,\n\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n\n        annotations,\n\n        isInteractive,\n        useMesh,\n        debugMesh,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n        role,\n\n        animate,\n        motionStiffness,\n        motionDamping,\n    }) => {\n        const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n            width,\n            height,\n            partialMargin\n        )\n        const theme = useTheme()\n\n        const { nodes, xScale, yScale } = useSwarmPlot({\n            width: innerWidth,\n            height: innerHeight,\n            data,\n            groups,\n            groupBy,\n            identity,\n            label,\n            value,\n            valueFormat,\n            valueScale,\n            size,\n            spacing,\n            layout,\n            gap,\n            colors,\n            colorBy,\n            forceStrength,\n            simulationIterations,\n        })\n\n        const getBorderWidth = useBorderWidth(borderWidth)\n        const getBorderColor = useInheritedColor(borderColor, theme)\n\n        const layerById = {\n            grid: (\n                <Grid\n                    key=\"grid\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    xScale={enableGridX ? xScale : null}\n                    xValues={gridXValues}\n                    yScale={enableGridY ? yScale : null}\n                    yValues={gridYValues}\n                />\n            ),\n            axes: (\n                <Axes\n                    key=\"axes\"\n                    xScale={xScale}\n                    yScale={yScale}\n                    width={innerWidth}\n                    height={innerHeight}\n                    top={axisTop}\n                    right={axisRight}\n                    bottom={axisBottom}\n                    left={axisLeft}\n                />\n            ),\n            mesh: null,\n            annotations: (\n                <SwarmPlotAnnotations\n                    key=\"annotations\"\n                    nodes={nodes}\n                    annotations={annotations}\n                    innerWidth={innerWidth}\n                    innerHeight={innerHeight}\n                    animate={animate}\n                    motionStiffness={motionStiffness}\n                    motionDamping={motionDamping}\n                />\n            ),\n        }\n\n        const enableNodeInteractivity = isInteractive && !useMesh\n        const handlers = useNodeMouseHandlers({\n            isEnabled: isInteractive,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n            onClick,\n            tooltip,\n        })\n\n        if (animate) {\n            layerById.nodes = (\n                <AnimatedSwarmPlotNodes\n                    key=\"nodes\"\n                    nodes={nodes}\n                    renderNode={renderNode}\n                    getBorderWidth={getBorderWidth}\n                    getBorderColor={getBorderColor}\n                    motionStiffness={motionStiffness}\n                    motionDamping={motionDamping}\n                    isInteractive={enableNodeInteractivity}\n                    onMouseEnter={!useMesh ? handlers.onMouseEnter : undefined}\n                    onMouseMove={!useMesh ? handlers.onMouseMove : undefined}\n                    onMouseLeave={!useMesh ? handlers.onMouseLeave : undefined}\n                    onClick={!useMesh ? handlers.onClick : undefined}\n                />\n            )\n        } else {\n            layerById.nodes = (\n                <StaticSwarmPlotNodes\n                    key=\"nodes\"\n                    nodes={nodes}\n                    renderNode={renderNode}\n                    getBorderWidth={getBorderWidth}\n                    getBorderColor={getBorderColor}\n                    isInteractive={enableNodeInteractivity}\n                    onMouseEnter={!useMesh ? handlers.onMouseEnter : undefined}\n                    onMouseMove={!useMesh ? handlers.onMouseMove : undefined}\n                    onMouseLeave={!useMesh ? handlers.onMouseLeave : undefined}\n                    onClick={!useMesh ? handlers.onClick : undefined}\n                />\n            )\n        }\n\n        if (isInteractive === true && useMesh === true) {\n            layerById.mesh = (\n                <Mesh\n                    key=\"mesh\"\n                    nodes={nodes}\n                    width={innerWidth}\n                    height={innerHeight}\n                    onMouseEnter={handlers.onMouseEnter}\n                    onMouseMove={handlers.onMouseMove}\n                    onMouseLeave={handlers.onMouseLeave}\n                    onClick={handlers.onClick}\n                    debug={debugMesh}\n                />\n            )\n        }\n\n        const layerContext = {\n            nodes,\n            xScale,\n            yScale,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            margin,\n            getBorderColor,\n            getBorderWidth,\n            animate,\n            motionStiffness,\n            motionDamping,\n        }\n\n        return (\n            <SvgWrapper\n                width={outerWidth}\n                height={outerHeight}\n                margin={margin}\n                theme={theme}\n                role={role}\n            >\n                {layers.map((layer, i) => {\n                    if (layerById[layer] !== undefined) {\n                        return layerById[layer]\n                    }\n                    if (typeof layer === 'function') {\n                        return <Fragment key={i}>{layer(layerContext)}</Fragment>\n                    }\n\n                    return null\n                })}\n            </SvgWrapper>\n        )\n    }\n)\n\nSwarmPlot.displayName = 'SwarmPlot'\nSwarmPlot.propTypes = SwarmPlotPropTypes\nSwarmPlot.defaultProps = {\n    ...SwarmPlotDefaultProps,\n    renderNode: props => <SwarmPlotNode {...props} />, // eslint-disable-line react/display-name\n}\n\nexport default withContainer(SwarmPlot)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport SwarmPlot from './SwarmPlot'\n\nconst ResponsiveSwarmPlot = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <SwarmPlot width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveSwarmPlot\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useRef, useState, useEffect, useCallback, useMemo } from 'react'\nimport {\n    getRelativeCursor,\n    isCursorInRect,\n    withContainer,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { useComputedAnnotations, renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { SwarmPlotCanvasDefaultProps, SwarmPlotCanvasPropTypes } from './props'\nimport { useSwarmPlot, useBorderWidth, useSwarmPlotAnnotations } from './hooks'\nimport SwarmPlotTooltip from './SwarmPlotTooltip'\n\nexport const renderCanvasNode = (ctx, { node, getBorderWidth, getBorderColor }) => {\n    const nodeBorderWidth = getBorderWidth(node)\n    if (nodeBorderWidth > 0) {\n        ctx.strokeStyle = getBorderColor(node)\n        ctx.lineWidth = nodeBorderWidth\n    }\n\n    ctx.beginPath()\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n    ctx.fillStyle = node.color\n    ctx.fill()\n\n    if (nodeBorderWidth > 0) {\n        ctx.stroke()\n    }\n}\n\nconst SwarmPlotCanvas = memo(\n    ({\n        pixelRatio,\n        width,\n        height,\n        margin: partialMargin,\n        data,\n        groups,\n        groupBy,\n        identity,\n        label,\n        value,\n        valueFormat,\n        valueScale,\n        size,\n        spacing,\n        layout,\n        gap,\n        forceStrength,\n        simulationIterations,\n        layers,\n        renderNode,\n        colors,\n        colorBy,\n        borderWidth,\n        borderColor,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        annotations,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n        debugMesh,\n    }) => {\n        const canvasEl = useRef(null)\n        const [currentNode, setCurrentNode] = useState(null)\n        const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n            width,\n            height,\n            partialMargin\n        )\n        const theme = useTheme()\n\n        const { nodes, xScale, yScale } = useSwarmPlot({\n            width: innerWidth,\n            height: innerHeight,\n            data,\n            groups,\n            groupBy,\n            identity,\n            label,\n            value,\n            valueFormat,\n            valueScale,\n            size,\n            spacing,\n            layout,\n            gap,\n            colors,\n            colorBy,\n            forceStrength,\n            simulationIterations,\n        })\n\n        const boundAnnotations = useSwarmPlotAnnotations(nodes, annotations)\n        const computedAnnotations = useComputedAnnotations({\n            annotations: boundAnnotations,\n            innerWidth,\n            innerHeight,\n        })\n\n        const getBorderWidth = useBorderWidth(borderWidth)\n        const getBorderColor = useInheritedColor(borderColor, theme)\n\n        const { delaunay, voronoi } = useVoronoiMesh({\n            points: nodes,\n            width: innerWidth,\n            height: innerHeight,\n            debug: debugMesh,\n        })\n\n        useEffect(() => {\n            canvasEl.current.width = outerWidth * pixelRatio\n            canvasEl.current.height = outerHeight * pixelRatio\n\n            const ctx = canvasEl.current.getContext('2d')\n\n            ctx.scale(pixelRatio, pixelRatio)\n\n            ctx.fillStyle = theme.background\n            ctx.fillRect(0, 0, outerWidth, outerHeight)\n            ctx.translate(margin.left, margin.top)\n\n            layers.forEach(layer => {\n                if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke\n\n                    enableGridX &&\n                        renderGridLinesToCanvas(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n\n                    enableGridY &&\n                        renderGridLinesToCanvas(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                }\n\n                if (layer === 'axes') {\n                    renderAxesToCanvas(ctx, {\n                        xScale,\n                        yScale,\n                        width: innerWidth,\n                        height: innerHeight,\n                        top: axisTop,\n                        right: axisRight,\n                        bottom: axisBottom,\n                        left: axisLeft,\n                        theme,\n                    })\n                }\n\n                if (layer === 'nodes') {\n                    nodes.forEach(node => {\n                        renderNode(ctx, {\n                            node,\n                            getBorderWidth,\n                            getBorderColor,\n                        })\n                    })\n                }\n\n                if (layer === 'mesh' && debugMesh === true) {\n                    renderVoronoiToCanvas(ctx, voronoi)\n                    if (currentNode) {\n                        renderVoronoiCellToCanvas(ctx, voronoi, currentNode.index)\n                    }\n                }\n\n                if (layer === 'annotations') {\n                    renderAnnotationsToCanvas(ctx, {\n                        annotations: computedAnnotations,\n                        theme,\n                    })\n                }\n\n                if (typeof layer === 'function') {\n                    layer(ctx, {\n                        nodes,\n                        innerWidth,\n                        innerHeight,\n                        outerWidth,\n                        outerHeight,\n                        margin,\n                        xScale,\n                        yScale,\n                    })\n                }\n            })\n        }, [\n            canvasEl,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            margin,\n            pixelRatio,\n            theme,\n            layers,\n            nodes,\n            xScale,\n            yScale,\n            getBorderWidth,\n            getBorderColor,\n            voronoi,\n            currentNode,\n            computedAnnotations,\n        ])\n\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n        const showNodeTooltip = useMemo(() => {\n            if (tooltip) return (node, event) => showTooltipFromEvent(tooltip({ node }), event)\n            return (node, event) => showTooltipFromEvent(<SwarmPlotTooltip node={node} />, event)\n        }, [showTooltipFromEvent, tooltip])\n\n        const getNodeFromMouseEvent = useCallback(\n            event => {\n                const [x, y] = getRelativeCursor(canvasEl.current, event)\n                if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y))\n                    return null\n\n                const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n                return nodes[nodeIndex]\n            },\n            [canvasEl, margin, innerWidth, innerHeight, delaunay]\n        )\n\n        const handleMouseHover = useCallback(\n            event => {\n                const node = getNodeFromMouseEvent(event)\n                setCurrentNode(node)\n                onMouseMove && onMouseMove(node, event)\n                if (node) {\n                    showNodeTooltip(node, event)\n                    if ((!currentNode || currentNode.id !== node.id) && onMouseEnter) {\n                        onMouseEnter(node, event)\n                    }\n                    if (currentNode && currentNode.id !== node.id && onMouseLeave) {\n                        onMouseLeave(currentNode, event)\n                    }\n                } else {\n                    currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n                    hideTooltip()\n                }\n            },\n            [\n                getNodeFromMouseEvent,\n                currentNode,\n                onMouseEnter,\n                onMouseLeave,\n                showNodeTooltip,\n                hideTooltip,\n            ]\n        )\n\n        const handleMouseLeave = useCallback(\n            event => {\n                hideTooltip()\n                setCurrentNode(null)\n                onMouseLeave && onMouseLeave(currentNode, event)\n            },\n            [hideTooltip, setCurrentNode, currentNode, onMouseLeave]\n        )\n\n        const handleClick = useCallback(\n            event => {\n                const node = getNodeFromMouseEvent(event)\n                node && onClick && onClick(node, event)\n            },\n            [getNodeFromMouseEvent, onClick]\n        )\n\n        return (\n            <canvas\n                ref={canvasEl}\n                width={outerWidth * pixelRatio}\n                height={outerHeight * pixelRatio}\n                style={{\n                    width: outerWidth,\n                    height: outerHeight,\n                    cursor: isInteractive ? 'auto' : 'normal',\n                }}\n                onMouseEnter={isInteractive ? handleMouseHover : undefined}\n                onMouseMove={isInteractive ? handleMouseHover : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n            />\n        )\n    }\n)\n\nSwarmPlotCanvas.displayName = 'SwarmPlotCanvas'\nSwarmPlotCanvas.propTypes = SwarmPlotCanvasPropTypes\nSwarmPlotCanvas.defaultProps = {\n    ...SwarmPlotCanvasDefaultProps,\n    renderNode: renderCanvasNode,\n}\n\nexport default withContainer(SwarmPlotCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport SwarmPlotCanvas from './SwarmPlotCanvas'\n\nconst ResponsiveSwarmPlotCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <SwarmPlotCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveSwarmPlotCanvas\n"],"sourceRoot":""}