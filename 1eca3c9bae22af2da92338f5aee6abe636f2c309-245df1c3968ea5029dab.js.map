{"version":3,"file":"1eca3c9bae22af2da92338f5aee6abe636f2c309-245df1c3968ea5029dab.js","mappings":"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B,EAAD,CACItC,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,OACD,OACI,SAAC2C,EAAD,CACIrD,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,iBACD,OACI,SAACyP,GAAD,CACInQ,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,YACD,OACI,SAACiF,GAAD,CACI3F,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,SACD,OACI,SAACyF,GAAD,CACInG,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,eACD,OACI,SAACoH,GAAD,CACI9H,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,UACD,OACI,SAACsR,GAAD,CACIhS,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,YACD,OACI,SAACoF,GAAD,CACI9F,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,cACD,OACI,SAACF,EAAD,CACIR,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,iBACD,OACI,SAAC+R,GAAD,CACIzS,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,gBACD,OACI,SAAC4R,GAAD,CACItS,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,cACD,OACI,SAACmO,GAAD,CACI7O,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,QACD,OACI,SAAC6C,EAAD,CACIvD,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,YACD,OACI,SAACqK,GAAD,CACI/K,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,cACD,OACI,SAACsI,GAAD,CACIhJ,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,cACD,OACI,SAACkE,GAAD,CACI5E,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,oBACD,OACI,SAACyO,GAAD,CACInP,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,sBACD,OACI,SAACkO,GAAD,CACI5O,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,IAAK,gBACD,OACI,SAAC4N,GAAD,CACItO,GAAIA,EACJrE,SAAUA,EACVC,QAASA,EACTC,cAAeA,EACfG,OAAQmX,EACRrX,MAAOA,EACPU,QAASA,EACTT,SAAU2E,IAItB,QACI,MAAM,IAAIgT,MAAJ,yBACuBP,EAAe1R,KADtC,kBAC4D9F,EAASqC,UAgB9EgB,GAAgB,SAAC,GAAD,IACzBhB,EADyB,EACzBA,KADyB,IAEzBpC,QAAAA,OAFyB,MAEf,CAAC,OAFc,MAGzBC,cAAAA,OAHyB,MAGT,MAHS,EAIzBoD,EAJyB,EAIzBA,SACAC,EALyB,EAKzBA,SACAnD,EANyB,EAMzBA,SACAS,EAPyB,EAOzBA,QAPyB,OASzB,8BACKyC,EAASxB,KAAI,SAACsH,EAAS/H,GAAV,OACV,SAAC+V,GAAD,CAEIC,UAAWhV,EACXpC,QAASA,EACTC,cAAeA,EACfF,SAAUoJ,EACV7F,SAAUA,EACVnD,SAAUA,EACVS,QAASA,GAPDuI,EAAQ/G,KADpB,IAC4BhB,U,sBCnfxC,IAuBIiW,EAvBmB,EAAQ,MAuBfU,EAAiB,SAASC,EAAQC,EAAM7W,GACtD,OAAO4W,GAAU5W,EAAQ,IAAM,IAAM6W,EAAKC,iBAG5CC,EAAOC,QAAUf","sources":["webpack://nivo-website/./src/components/controls/generics/ArrayControl.tsx","webpack://nivo-website/./src/components/controls/generics/ChoicesControl.tsx","webpack://nivo-website/./src/components/controls/generics/NumberArrayControl.tsx","webpack://nivo-website/./src/components/controls/generics/ObjectControl.tsx","webpack://nivo-website/./src/components/controls/generics/PropertyDocumentation.tsx","webpack://nivo-website/./src/components/controls/generics/RadioControl.tsx","webpack://nivo-website/./src/components/controls/generics/RangeControl.tsx","webpack://nivo-website/./src/components/controls/generics/SwitchableRangeControl.tsx","webpack://nivo-website/./src/components/controls/generics/SwitchControl.tsx","webpack://nivo-website/./src/components/controls/generics/TextControl.tsx","webpack://nivo-website/./src/components/controls/specialized/AngleControl.tsx","webpack://nivo-website/./src/components/controls/specialized/AnnotationsControl.tsx","webpack://nivo-website/./src/components/controls/specialized/BoxAnchorControl.tsx","webpack://nivo-website/./src/components/controls/specialized/LineWidthControl.tsx","webpack://nivo-website/./src/components/controls/specialized/MarginControl.tsx","webpack://nivo-website/./src/components/controls/specialized/MotionConfigControl.tsx","webpack://nivo-website/./src/components/controls/specialized/ValueFormatControl.tsx","webpack://nivo-website/./src/components/controls/colors/BlendModeControl.tsx","webpack://nivo-website/./src/components/controls/colors/ColorsControlItem.tsx","webpack://nivo-website/./src/components/controls/colors/colorSchemeSelect.tsx","webpack://nivo-website/./src/components/controls/colors/BulletColorsControl.tsx","webpack://nivo-website/./src/components/controls/colors/ColorInterpolatorsControl.tsx","webpack://nivo-website/./src/components/controls/colors/ColorPickerControl.tsx","webpack://nivo-website/./src/components/controls/colors/ContinuousColorsControl.tsx","webpack://nivo-website/./src/components/controls/colors/InheritedColorModifierControl.tsx","webpack://nivo-website/./src/components/controls/colors/InheritedColorControl.tsx","webpack://nivo-website/./src/components/controls/colors/OpacityControl.tsx","webpack://nivo-website/./src/components/controls/colors/OrdinalColorsControl.tsx","webpack://nivo-website/./src/components/controls/colors/QuantizeColorsControl.tsx","webpack://nivo-website/./src/components/controls/ControlsGroup.tsx","webpack://nivo-website/../node_modules/lodash/snakeCase.js"],"sourcesContent":["import React, { memo, Fragment, useMemo, useState, useCallback, MouseEvent } from 'react'\nimport styled from 'styled-components'\nimport { Flavor, ChartProperty } from '../../../types'\nimport { ArrayControlConfig, ControlContext } from '../types'\nimport { PropertyHeader, Help, Cell, Toggle } from '../ui'\nimport { ControlsGroup } from '../ControlsGroup'\n\ninterface ArrayControlProps<Item> {\n    id: string\n    property: ChartProperty\n    value: Item[]\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    config: ArrayControlConfig<Item>\n    onChange: (value: Item[]) => void\n    context?: ControlContext\n}\n\nfunction NonMemoizedArrayControl<Item = object>({\n    property,\n    flavors,\n    currentFlavor,\n    value,\n    onChange,\n    config: {\n        props,\n        shouldCreate = false,\n        addLabel = 'add',\n        shouldRemove = false,\n        removeLabel = 'remove',\n        defaults = {} as Item,\n        getItemTitle,\n    },\n    context,\n}: ArrayControlProps<Item>) {\n    const [activeItems, setActiveItems] = useState([0])\n    const append = useCallback(() => {\n        onChange([...value, { ...defaults }])\n        setActiveItems([value.length])\n    }, [value, onChange, defaults, setActiveItems])\n\n    const remove = useCallback(\n        (index: number) => (event: MouseEvent) => {\n            event.stopPropagation()\n            const items = value.filter((_item: any, i) => i !== index)\n            setActiveItems([])\n            onChange(items)\n        },\n        [value, onChange, setActiveItems]\n    )\n    const change = useCallback(\n        (index: number) => (itemValue: Item) => {\n            onChange(\n                value.map((v, i) => {\n                    if (i === index) return itemValue\n                    return v\n                })\n            )\n        },\n        [value, onChange]\n    )\n    const toggle = useCallback(\n        (index: number) => () => {\n            setActiveItems(items => {\n                if (items.includes(index)) {\n                    return items.filter(i => i !== index)\n                }\n                return [...activeItems, index]\n            })\n        },\n        [setActiveItems]\n    )\n\n    const subProps = useMemo(\n        () =>\n            props.map(prop => ({\n                ...prop,\n                name: prop.key,\n                group: property.group,\n            })),\n        [props]\n    )\n\n    const newContext = {\n        path: [...(context ? context.path : ([] as string[])), (property.key || property.name)!],\n    }\n\n    return (\n        <>\n            <Header>\n                <PropertyHeader {...property} context={context} />\n                <Help>{property.help}</Help>\n                {shouldCreate && <AddButton onClick={append}>{addLabel}</AddButton>}\n            </Header>\n            {value.map((item, index) => (\n                <Fragment key={index}>\n                    <SubHeader isOpened={activeItems.includes(index)} onClick={toggle(index)}>\n                        <Title>\n                            {getItemTitle !== undefined\n                                ? getItemTitle(index, item)\n                                : `${property.key}[${index}]`}\n                            {shouldRemove && (\n                                <RemoveButton onClick={remove(index)}>{removeLabel}</RemoveButton>\n                            )}\n                        </Title>\n                        <Toggle isOpened={activeItems.includes(index)} />\n                    </SubHeader>\n                    {activeItems.includes(index) && (\n                        <ControlsGroup\n                            name={property.key}\n                            flavors={flavors}\n                            currentFlavor={currentFlavor}\n                            controls={subProps}\n                            settings={item}\n                            onChange={change(index)}\n                            context={{ path: [...newContext.path, `${index}`] }}\n                        />\n                    )}\n                </Fragment>\n            ))}\n        </>\n    )\n}\n\nexport const ArrayControl = memo(NonMemoizedArrayControl) as typeof NonMemoizedArrayControl\n\nconst Header = styled(Cell)`\n    border-bottom: 1px solid ${({ theme }) => theme.colors.borderLight};\n\n    &:last-child {\n        border-bottom-width: 0;\n    }\n`\n\nconst Title = styled.div`\n    white-space: nowrap;\n    font-weight: 600;\n    color: ${({ theme }) => theme.colors.textLight};\n`\n\nconst SubHeader = styled(Cell)<{\n    isOpened: boolean\n}>`\n    cursor: pointer;\n    font-weight: 600;\n    user-select: none;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.borderLight};\n\n    &:last-child {\n        border-bottom-width: 0;\n    }\n\n    &:hover {\n        background: ${({ theme }) => theme.colors.cardAltBackground};\n\n        ${Title} {\n            color: ${({ theme }) => theme.colors.text};\n        }\n    }\n\n    ${Title} {\n        ${({ isOpened, theme }) => (isOpened ? `color: ${theme.colors.text};` : '')}\n    }\n`\n\nconst AddButton = styled.div`\n    position: absolute;\n    top: 9px;\n    right: 20px;\n    font-weight: 600;\n    cursor: pointer;\n    font-size: 12px;\n    color: ${({ theme }) => theme.colors.accent};\n    border: 1px solid ${({ theme }) => theme.colors.accent};\n    padding: 3px 9px;\n    border-radius: 2px;\n    user-select: none;\n\n    &:hover {\n        color: ${({ theme }) => theme.colors.cardBackground};\n        background: ${({ theme }) => theme.colors.accent};\n    }\n`\n\nconst RemoveButton = styled.span`\n    display: inline-block;\n    font-size: 12px;\n    margin-left: 12px;\n    background: ${({ theme }) => theme.colors.cardBackground};\n    color: ${({ theme }) => theme.colors.accent};\n    border: 1px solid ${({ theme }) => theme.colors.accent};\n    padding: 1px 9px;\n    border-radius: 1px;\n\n    &:hover {\n        color: ${({ theme }) => theme.colors.cardBackground};\n        background: ${({ theme }) => theme.colors.accent};\n    }\n`\n","import React, { memo, useCallback } from 'react'\nimport { Flavor } from '../../../types'\nimport { ChoicesControlConfig, ControlContext } from '../types'\nimport { Control, PropertyHeader, Help, Select } from '../ui'\n\ninterface ChoicesControlProps {\n    id: string\n    property: any\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    value: string | number | boolean\n    onChange: (value: string | number | boolean) => void\n    config: ChoicesControlConfig\n    context?: ControlContext\n}\n\nexport const ChoicesControl = memo(\n    ({\n        id,\n        property,\n        flavors,\n        currentFlavor,\n        value: _value,\n        config,\n        onChange,\n        context,\n    }: ChoicesControlProps) => {\n        const handleUpdate = useCallback(value => onChange(value.value), [onChange])\n        const value = config.choices.find(({ value: v }) => v === _value)\n\n        return (\n            <Control\n                id={id}\n                description={property.description}\n                flavors={flavors}\n                currentFlavor={currentFlavor}\n                supportedFlavors={property.flavors}\n            >\n                <PropertyHeader id={id} {...property} context={context} />\n                <Select options={config.choices} value={value} onChange={handleUpdate} />\n                <Help>{property.help}</Help>\n            </Control>\n        )\n    }\n)\n","import React, { ChangeEvent, Fragment, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { ControlContext, NumberArrayControlConfig } from '../types'\nimport { Control, PropertyHeader, Label, Help, TextInput } from '../ui'\n\ninterface NumberArrayControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    config: NumberArrayControlConfig\n    value: number[]\n    onChange: (value: number[]) => void\n    context?: ControlContext\n}\n\nexport const NumberArrayControl = ({\n    id,\n    property,\n    flavors,\n    currentFlavor,\n    config: { unit, items },\n    value,\n    onChange,\n    context,\n}: NumberArrayControlProps) => {\n    const handleChange = useCallback(\n        (index: number) => (event: ChangeEvent<HTMLInputElement>) => {\n            const updatedArray = [...value]\n            updatedArray[index] = Number(event.target.value)\n            onChange(updatedArray)\n        },\n        [onChange, value]\n    )\n\n    return (\n        <Control\n            id={id}\n            description={property.description}\n            flavors={flavors}\n            currentFlavor={currentFlavor}\n            supportedFlavors={property.flavors}\n        >\n            <PropertyHeader {...property} context={context} />\n            <Value>\n                <span>value</span>\n                <code>\n                    [\n                    {value.map((v, i) => {\n                        return (\n                            <Fragment key={i}>\n                                {i > 0 && <span>, </span>}\n                                <code className=\"code-number\">{v}</code>\n                            </Fragment>\n                        )\n                    })}\n                    ]\n                </code>\n            </Value>\n            {items.map(({ label, min, max, step }, i) => {\n                const itemId = `${id}-${i}`\n\n                return (\n                    <Row key={itemId}>\n                        <Label htmlFor={itemId}>{label}</Label>\n                        <TextInput\n                            id={itemId}\n                            value={value[i]}\n                            isNumber={true}\n                            unit={unit}\n                            onChange={handleChange(i)}\n                        />\n                        <Range\n                            type=\"range\"\n                            value={value[i]}\n                            onChange={handleChange(i)}\n                            min={min}\n                            max={max}\n                            step={step || 1}\n                        />\n                    </Row>\n                )\n            })}\n            <Help>{property.help}</Help>\n        </Control>\n    )\n}\n\nconst Range = styled.input`\n    max-width: 160px;\n`\n\nconst Value = styled.div`\n    margin-bottom: 5px;\n    padding-left: 89px;\n    display: grid;\n    grid-column-gap: 9px;\n    grid-template-columns: 60px auto;\n\n    & > *:first-child {\n        text-align: right;\n        font-weight: 500;\n    }\n`\n\nconst Row = styled.div`\n    display: grid;\n    grid-template-columns: 80px 60px auto;\n    grid-column-gap: 9px;\n    max-width: 240px;\n    margin-bottom: 5px;\n`\n","import React, { memo, useMemo, useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { ObjectControlConfig, ControlContext } from '../types'\nimport { PropertyHeader, Help, Cell, Toggle } from '../ui'\nimport { ControlsGroup } from '../ControlsGroup'\n\ninterface ObjectControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    onChange: (value: object) => void\n    value: object\n    isOpenedByDefault?: boolean\n    config: ObjectControlConfig\n    context?: ControlContext\n}\n\nexport const ObjectControl = memo(\n    ({\n        property,\n        config,\n        flavors,\n        currentFlavor,\n        value,\n        onChange,\n        context,\n    }: ObjectControlProps) => {\n        const [isOpened, setIsOpened] = useState(\n            config.isOpenedByDefault !== undefined ? config.isOpenedByDefault : false\n        )\n        const toggle = useCallback(() => setIsOpened(flag => !flag), [setIsOpened])\n\n        const subProps = useMemo(\n            () =>\n                config.props.map(prop => ({\n                    ...prop,\n                    name: prop.key,\n                    group: property.group,\n                })),\n            [config.props]\n        )\n\n        const newContext = {\n            path: [...(context ? context.path : []), property.key || property.name],\n        }\n\n        return (\n            <>\n                <Header isOpened={isOpened} onClick={toggle}>\n                    <PropertyHeader {...property} context={context} />\n                    <Help>{property.help}</Help>\n                    <Toggle isOpened={isOpened} />\n                </Header>\n                {isOpened && (\n                    <ControlsGroup\n                        name={property.key}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        controls={subProps}\n                        settings={value}\n                        onChange={onChange}\n                        context={newContext}\n                    />\n                )}\n            </>\n        )\n    }\n)\n\nconst Title = styled.div`\n    white-space: nowrap;\n    font-weight: 600;\n    color: ${({ theme }) => theme.colors.accentLight};\n`\n\nconst Header = styled(Cell)<{\n    isOpened: boolean\n}>`\n    cursor: pointer;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.borderLight};\n\n    &:last-child {\n        border-bottom-width: 0;\n    }\n\n    &:hover {\n        background: ${({ theme }) => theme.colors.cardAltBackground};\n\n        ${Title} {\n            color: ${({ theme }) => theme.colors.accent};\n        }\n    }\n\n    ${Title} {\n        ${({ isOpened, theme }) => (isOpened ? `color: ${theme.colors.accent};` : '')}\n    }\n`\n","import React from 'react'\nimport { Flavor } from '../../../types'\nimport { ControlContext } from '../types'\nimport { Control, PropertyHeader, Help } from '../ui'\n\ninterface PropertyDocumentationProps {\n    id: string\n    property: any\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    context?: ControlContext\n}\n\nexport const PropertyDocumentation = ({\n    id,\n    property,\n    flavors,\n    currentFlavor,\n    context,\n}: PropertyDocumentationProps) => {\n    return (\n        <Control\n            id={id}\n            description={property.description}\n            flavors={flavors}\n            currentFlavor={currentFlavor}\n            supportedFlavors={property.flavors}\n        >\n            <PropertyHeader {...property} context={context} />\n            <Help>{property.help}</Help>\n        </Control>\n    )\n}\n","import React, { memo, useCallback } from 'react'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { ControlContext, RadioControlConfig } from '../types'\nimport { Control, PropertyHeader, Help, Radio } from '../ui'\n\ninterface RadioControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    value: string\n    config: RadioControlConfig\n    onChange: (value: string) => void\n    context?: ControlContext\n}\n\nexport const RadioControl = memo(\n    ({\n        id,\n        property,\n        flavors,\n        currentFlavor,\n        config: { choices, columns },\n        value,\n        onChange,\n        context,\n    }: RadioControlProps) => {\n        const handleUpdate = useCallback(event => onChange(event.target.value), [onChange])\n\n        return (\n            <Control\n                id={id}\n                description={property.description}\n                flavors={flavors}\n                currentFlavor={currentFlavor}\n                supportedFlavors={property.flavors}\n            >\n                <PropertyHeader {...property} context={context} />\n                <Radio options={choices} columns={columns} value={value} onChange={handleUpdate} />\n                <Help>{property.help}</Help>\n            </Control>\n        )\n    }\n)\n","import React, { memo, useCallback } from 'react'\nimport styled from 'styled-components'\nimport pick from 'lodash/pick'\nimport { Flavor } from '../../../types'\nimport { ControlContext, RangeControlConfig } from '../types'\nimport { Control, PropertyHeader, Help, TextInput } from '../ui'\n\ninterface RangeControlProps {\n    id: string\n    property: any\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    value: number\n    onChange: (value: number) => void\n    config: RangeControlConfig\n    context?: ControlContext\n}\n\nexport const RangeControl = memo(\n    ({\n        id,\n        property,\n        flavors,\n        currentFlavor,\n        config,\n        value,\n        onChange,\n        context,\n    }: RangeControlProps) => {\n        const handleChange = useCallback(event => onChange(Number(event.target.value)), [onChange])\n\n        return (\n            <Control\n                id={id}\n                description={property.description}\n                flavors={flavors}\n                currentFlavor={currentFlavor}\n                supportedFlavors={property.flavors}\n            >\n                <PropertyHeader id={id} {...property} context={context} />\n                <Row>\n                    <TextInput\n                        id={id}\n                        value={value}\n                        unit={config.unit}\n                        isNumber={true}\n                        onChange={handleChange}\n                    />\n                    <input\n                        type=\"range\"\n                        value={value}\n                        onChange={handleChange}\n                        {...pick(config, ['min', 'max', 'step'])}\n                    />\n                </Row>\n                <Help>{property.help}</Help>\n            </Control>\n        )\n    }\n)\n\nconst Row = styled.div`\n    display: grid;\n    grid-template-columns: 60px auto;\n    grid-column-gap: 9px;\n    max-width: 240px;\n    margin-bottom: 5px;\n`\n","import React, { useCallback, useState, ChangeEvent } from 'react'\nimport styled from 'styled-components'\nimport pick from 'lodash/pick'\nimport { ControlContext, SwitchableRangeControlConfig } from '../types'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { Control, PropertyHeader, Help, TextInput, Switch } from '../ui'\n\nconst SwitchRow = styled.div`\n    display: flex;\n    align-items: center;\n    margin-bottom: 5px;\n\n    & > *:first-child {\n        margin-right: 9px;\n    }\n`\n\nconst RangeRow = styled.div`\n    display: grid;\n    grid-template-columns: 60px auto;\n    grid-column-gap: 9px;\n    align-items: center;\n    max-width: 240px;\n    margin-bottom: 5px;\n`\n\ninterface SwitchableRangeControlProps {\n    id: string\n    property: ChartProperty\n    config: SwitchableRangeControlConfig\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    value: number | string\n    onChange: (value: number | string) => void\n    context?: ControlContext\n}\n\nexport const SwitchableRangeControl = ({\n    id,\n    property,\n    flavors,\n    currentFlavor,\n    value,\n    config,\n    onChange,\n    context,\n}: SwitchableRangeControlProps) => {\n    const [isSliderEnabled, setIsSliderEnabled] = useState(value !== config.disabledValue)\n    const [sliderValue, setSliderValue] = useState(\n        value === config.disabledValue ? config.defaultValue : value\n    )\n\n    const handleSliderUpdate = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => {\n            setSliderValue(Number(e.target.value))\n            onChange(Number(e.target.value))\n        },\n        [setSliderValue, onChange]\n    )\n\n    const handleSwitchUpdate = useCallback(\n        (checked: boolean) => {\n            if (!checked) {\n                setIsSliderEnabled(true)\n                onChange(Number(sliderValue))\n            } else {\n                setIsSliderEnabled(false)\n                onChange(config.disabledValue)\n            }\n        },\n        [onChange, config.disabledValue, sliderValue, setIsSliderEnabled]\n    )\n\n    return (\n        <Control\n            id={id}\n            description={property.description}\n            flavors={flavors}\n            currentFlavor={currentFlavor}\n            supportedFlavors={property.flavors}\n        >\n            <PropertyHeader {...property} context={context} />\n            <SwitchRow>\n                <Switch\n                    id={`${id}.switch`}\n                    value={!isSliderEnabled}\n                    onChange={handleSwitchUpdate}\n                />\n                <span\n                    style={{\n                        color: isSliderEnabled ? '#bbbbbb' : 'inherit',\n                    }}\n                >\n                    {config.disabledValue}\n                </span>\n            </SwitchRow>\n            {isSliderEnabled && (\n                <RangeRow>\n                    <TextInput value={value} unit={config.unit} isNumber={true} disabled={true} />\n                    <input\n                        id={`${id}.slider`}\n                        type=\"range\"\n                        value={sliderValue}\n                        onChange={handleSliderUpdate}\n                        {...pick(config, ['min', 'max', 'step'])}\n                    />\n                </RangeRow>\n            )}\n            <Help>{property.help}</Help>\n        </Control>\n    )\n}\n","import React, { memo } from 'react'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { Control, PropertyHeader, Help, Switch } from '../ui'\nimport { ControlContext } from '../types'\n\ninterface SwitchControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    value: boolean\n    onChange: (value: boolean) => void\n    context?: ControlContext\n}\n\nexport const SwitchControl = memo(\n    ({ id, property, flavors, currentFlavor, value, onChange, context }: SwitchControlProps) => {\n        return (\n            <Control\n                id={id}\n                description={property.description}\n                flavors={flavors}\n                currentFlavor={currentFlavor}\n                supportedFlavors={property.flavors}\n            >\n                <PropertyHeader id={id} {...property} context={context} />\n                <Switch id={id} value={value} onChange={onChange} />\n                &nbsp;&nbsp;&nbsp;\n                <Help>{property.help}</Help>\n            </Control>\n        )\n    }\n)\n","import React, { memo, useCallback } from 'react'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { ControlContext, TextControlConfig } from '../types'\nimport { Control, PropertyHeader, Help, TextInput } from '../ui'\n\ninterface TextControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    value: string | number\n    onChange: (value: string) => void\n    config: TextControlConfig\n    context?: ControlContext\n}\n\nexport const TextControl = memo(\n    ({\n        id,\n        property,\n        flavors,\n        currentFlavor,\n        value,\n        onChange,\n        config,\n        context,\n    }: TextControlProps) => {\n        const handleUpdate = useCallback(event => onChange(event.target.value), [onChange])\n\n        return (\n            <Control\n                id={id}\n                description={property.description}\n                flavors={flavors}\n                currentFlavor={currentFlavor}\n                supportedFlavors={property.flavors}\n            >\n                <PropertyHeader id={id} {...property} context={context} />\n                <TextInput\n                    id={id}\n                    type=\"text\"\n                    value={value}\n                    onChange={handleUpdate}\n                    disabled={config.disabled === true}\n                />\n                <Help>{property.help}</Help>\n            </Control>\n        )\n    }\n)\n","import React, { memo, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { AngleControlConfig, ControlContext } from '../types'\nimport { Control, PropertyHeader, Help, TextInput } from '../ui'\n\nconst size = 36\nconst center = size / 2\nconst markerSize = 6\n\ninterface AngleControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    value: number\n    config: AngleControlConfig\n    onChange: (value: number) => void\n    context?: ControlContext\n}\n\nexport const AngleControl = memo(\n    ({\n        id,\n        property,\n        flavors,\n        currentFlavor,\n        value,\n        config,\n        onChange,\n        context,\n    }: AngleControlProps) => {\n        const start = config.start || 0\n        const min = config.min || 0\n        const max = config.max || 360\n\n        const handleChange = useCallback(\n            event => {\n                onChange(Number(event.target.value))\n            },\n            [onChange]\n        )\n\n        return (\n            <Control\n                id={id}\n                description={property.description}\n                flavors={flavors}\n                currentFlavor={currentFlavor}\n                supportedFlavors={property.flavors}\n            >\n                <PropertyHeader id={id} {...property} context={context} />\n                <Row>\n                    <TextInput\n                        id={id}\n                        value={value}\n                        onChange={handleChange}\n                        unit=\"°\"\n                        isNumber={true}\n                    />\n                    <svg width={size} height={size}>\n                        <Circle cx={center} cy={center} r={center - markerSize / 2} />\n                        <g transform={`translate(${center},${center})`}>\n                            <g transform={`rotate(${start + value})`}>\n                                <Line y2={-size / 2 + markerSize / 2} />\n                                <Marker r={markerSize / 4} />\n                                <Marker cy={-size / 2 + markerSize / 2} r={markerSize / 2} />\n                            </g>\n                        </g>\n                    </svg>\n                    <input type=\"range\" value={value} onChange={handleChange} min={min} max={max} />\n                </Row>\n                <Help>{property.help}</Help>\n            </Control>\n        )\n    }\n)\n\nconst Row = styled.div`\n    display: grid;\n    grid-template-columns: 60px ${size}px auto;\n    grid-column-gap: 9px;\n    align-items: center;\n    max-width: 240px;\n    margin-bottom: 5px;\n`\n\nconst Circle = styled.circle`\n    fill: ${({ theme }) => theme.colors.background};\n    stroke-width: 1px;\n    stroke: ${({ theme }) => theme.colors.border};\n`\n\nconst Line = styled.line`\n    stroke: ${({ theme }) => theme.colors.accent};\n`\n\nconst Marker = styled.circle`\n    fill: ${({ theme }) => theme.colors.accent};\n`\n","import React, { memo, useCallback, useMemo } from 'react'\nimport omit from 'lodash/omit'\nimport { AnnotationMatcher } from '@nivo/annotations'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { AnnotationsControlConfig, ArrayControlConfig, ControlContext } from '../types'\nimport { ArrayControl } from '../generics'\n\nconst fixAnnotation = (annotation: AnnotationMatcher<any>): AnnotationMatcher<any> => {\n    let adjusted: AnnotationMatcher<any> = annotation\n\n    if (annotation.type === 'rect') {\n        if (annotation.borderRadius === undefined) {\n            adjusted = { ...annotation, borderRadius: 2 }\n        }\n    } else {\n        if ((annotation as any).borderRadius !== undefined) {\n            adjusted = omit(annotation as any, 'borderRadius') as AnnotationMatcher<any>\n        }\n    }\n\n    return adjusted\n}\n\ninterface AnnotationsControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    config: AnnotationsControlConfig\n    value: AnnotationMatcher<any>[]\n    onChange: (annotations: AnnotationMatcher<any>[]) => void\n    context?: ControlContext\n}\n\nexport const AnnotationsControl = memo(\n    ({\n        id,\n        property,\n        flavors,\n        currentFlavor,\n        value,\n        config: { createDefaults },\n        onChange,\n        context,\n    }: AnnotationsControlProps) => {\n        const arrayProperty: Omit<ChartProperty, 'control'> & {\n            control: ArrayControlConfig<AnnotationMatcher<any>>\n        } = useMemo(\n            () => ({\n                ...property,\n                control: {\n                    type: 'array',\n                    shouldCreate: true,\n                    addLabel: 'add annotation',\n                    shouldRemove: true,\n                    getItemTitle: (index, annotation) =>\n                        `annotations[${index}] '${annotation.note}' (${annotation.type})`,\n                    defaults: createDefaults,\n                    props: [\n                        {\n                            key: 'type',\n                            flavors: property.flavors,\n                            help: `Annotation type.`,\n                            type: `'dot' | 'circle' | 'rect'`,\n                            required: true,\n                            control: {\n                                type: 'choices',\n                                choices: [\n                                    { value: 'dot', label: 'dot' },\n                                    { value: 'circle', label: 'circle' },\n                                    { value: 'rect', label: 'rect' },\n                                ],\n                            },\n                        },\n                        {\n                            key: 'match',\n                            flavors: property.flavors,\n                            help: 'Annotation matcher.',\n                            required: true,\n                            type: 'object',\n                            control: {\n                                type: 'object',\n                                isOpenedByDefault: true,\n                                props: [\n                                    {\n                                        key: 'id',\n                                        required: false,\n                                        flavors: property.flavors,\n                                        help: 'Match elements having the provided ID.',\n                                        type: 'string | number',\n                                        control: {\n                                            type: 'text',\n                                        },\n                                    },\n                                ],\n                            },\n                        },\n                        {\n                            key: 'borderRadius',\n                            flavors,\n                            help: `Rect border radius.`,\n                            type: 'number',\n                            required: false,\n                            when: (settings: any) => settings.type === 'rect',\n                            control: {\n                                type: 'range',\n                                min: 0,\n                                max: 12,\n                            },\n                        },\n                        {\n                            key: 'note',\n                            flavors,\n                            help: `Annotation note.`,\n                            type: 'text',\n                            required: true,\n                            control: { type: 'text' },\n                        },\n                        {\n                            key: 'noteX',\n                            flavors,\n                            help: `Annotation note x position.`,\n                            type: 'number',\n                            required: true,\n                            control: {\n                                type: 'range',\n                                min: -300,\n                                max: 300,\n                                step: 5,\n                            },\n                        },\n                        {\n                            key: 'noteY',\n                            flavors,\n                            help: `Annotation note y position.`,\n                            type: 'number',\n                            required: true,\n                            control: {\n                                type: 'range',\n                                min: -300,\n                                max: 300,\n                                step: 5,\n                            },\n                        },\n                        {\n                            key: 'noteTextOffset',\n                            flavors,\n                            help: `Annotation note text offset.`,\n                            type: 'number',\n                            required: false,\n                            control: {\n                                type: 'range',\n                                min: -64,\n                                max: 64,\n                            },\n                        },\n                        {\n                            key: 'offset',\n                            flavors,\n                            help: `Offset from annotated element.`,\n                            type: 'number',\n                            required: false,\n                            control: {\n                                type: 'range',\n                                min: 0,\n                                max: 32,\n                            },\n                        },\n                    ],\n                },\n            }),\n            [property, createDefaults]\n        )\n\n        const handleChange = useCallback(\n            (annotations: AnnotationMatcher<any>[]) => onChange(annotations.map(fixAnnotation)),\n            [onChange]\n        )\n\n        return (\n            <ArrayControl<AnnotationMatcher<any>>\n                id={id}\n                property={arrayProperty as ChartProperty<any>}\n                value={value}\n                flavors={flavors}\n                currentFlavor={currentFlavor}\n                config={arrayProperty.control}\n                onChange={handleChange}\n                context={context}\n            />\n        )\n    }\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { BoxAnchorControlConfig, ControlContext } from '../types'\nimport { Control, PropertyHeader, Help } from '../ui'\n\nconst boxWidth = 80\nconst boxHeight = 50\nconst boxPadding = 10\nconst outlineRadius = 8\n\nconst anchors: [string, number, number][] = [\n    ['center', boxWidth / 2, boxHeight / 2],\n    ['top-left', 0, 0],\n    ['top', boxWidth / 2, 0],\n    ['top-right', boxWidth, 0],\n    ['right', boxWidth, boxHeight / 2],\n    ['bottom-right', boxWidth, boxHeight],\n    ['bottom', boxWidth / 2, boxHeight],\n    ['bottom-left', 0, boxHeight],\n    ['left', 0, boxHeight / 2],\n]\n\nconst Row = styled.div`\n    display: flex;\n    align-items: center;\n`\n\nconst Rect = styled.rect`\n    fill: none;\n    stroke: ${({ theme }) => theme.colors.textLight};\n    stroke-width: 2px;\n    stroke-opacity: 0.6;\n`\n\nconst Dot = styled.circle<{\n    isSelected: boolean\n}>`\n    fill: ${({ isSelected, theme }) => (isSelected ? theme.colors.accent : theme.colors.textLight)};\n`\n\nconst DotOutline = styled.circle<{\n    isSelected: boolean\n}>`\n    fill: red;\n    fill-opacity: 0;\n    stroke-width: 2px;\n    stroke: ${({ isSelected, theme }) =>\n        isSelected ? theme.colors.accent : theme.colors.textLight};\n    stroke-opacity: ${({ isSelected }) => (isSelected ? 1 : 0)};\n\n    &:hover {\n        stroke-opacity: 1;\n    }\n`\n\nconst Value = styled.span`\n    margin-left: 20px;\n`\n\ninterface BoxAnchorControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    value: string\n    config: BoxAnchorControlConfig\n    onChange: (value: string) => void\n    context?: ControlContext\n}\n\nexport const BoxAnchorControl = ({\n    id,\n    property,\n    flavors,\n    currentFlavor,\n    value,\n    onChange,\n    context,\n}: BoxAnchorControlProps) => {\n    return (\n        <Control\n            id={id}\n            description={property.description}\n            flavors={flavors}\n            currentFlavor={currentFlavor}\n            supportedFlavors={property.flavors}\n        >\n            <PropertyHeader {...property} context={context} />\n            <Row>\n                <svg width={boxWidth + boxPadding * 2} height={boxHeight + boxPadding * 2}>\n                    <g transform={`translate(${boxPadding},${boxPadding})`}>\n                        <Rect width={boxWidth} height={boxHeight} />\n                        {anchors.map(anchor => {\n                            const isSelected = value === anchor[0]\n\n                            return (\n                                <g\n                                    key={anchor[0]}\n                                    transform={`translate(${anchor[1]},${anchor[2]})`}\n                                >\n                                    <Dot isSelected={isSelected} r={isSelected ? 3 : 2} />\n                                    <DotOutline\n                                        isSelected={isSelected}\n                                        r={outlineRadius}\n                                        style={{\n                                            cursor: 'pointer',\n                                        }}\n                                        onClick={() => {\n                                            onChange(anchor[0])\n                                        }}\n                                    />\n                                </g>\n                            )\n                        })}\n                    </g>\n                </svg>\n                <Value>{value}</Value>\n            </Row>\n            <Help>{property.help}</Help>\n        </Control>\n    )\n}\n","import React, { memo, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { ControlContext, LineWidthControlConfig } from '../types'\nimport { Control, PropertyHeader, Help, TextInput } from '../ui'\n\nconst size = 24\n\ninterface LineWidthControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    config: LineWidthControlConfig\n    value: number\n    onChange: (value: number) => void\n    context?: ControlContext\n}\n\nexport const LineWidthControl = memo(\n    ({\n        id,\n        property,\n        flavors,\n        currentFlavor,\n        value,\n        context,\n        onChange,\n        config,\n    }: LineWidthControlProps) => {\n        const handleChange = useCallback(\n            event => {\n                onChange(Number(event.target.value))\n            },\n            [onChange]\n        )\n\n        return (\n            <Control\n                id={id}\n                description={property.description}\n                flavors={flavors}\n                currentFlavor={currentFlavor}\n                supportedFlavors={property.flavors}\n            >\n                <PropertyHeader id={id} {...property} context={context} />\n                <Row>\n                    <TextInput value={value} onChange={handleChange} unit=\"px\" isNumber={true} />\n                    <svg width={size} height={size}>\n                        <Line y1={size / 2} x2={size} y2={size / 2} />\n                        <Marker\n                            x1={size * 0.2}\n                            y1={size / 2}\n                            x2={size * 0.8}\n                            y2={size / 2}\n                            strokeWidth={value}\n                        />\n                    </svg>\n                    <input\n                        type=\"range\"\n                        value={value}\n                        onChange={handleChange}\n                        min={0}\n                        max={20}\n                        step={config.step}\n                    />\n                </Row>\n                <Help>{property.help}</Help>\n            </Control>\n        )\n    }\n)\n\nconst Row = styled.div`\n    display: grid;\n    grid-template-columns: 60px ${size}px auto;\n    grid-column-gap: 9px;\n    align-items: center;\n    max-width: 240px;\n    margin-bottom: 5px;\n`\n\nconst Line = styled.line`\n    stroke: ${({ theme }) => theme.colors.border};\n    stroke-width: 1px;\n    fill: none;\n`\n\nconst Marker = styled.line`\n    stroke: ${({ theme }) => theme.colors.accent};\n    fill: none;\n`\n","import React, { ChangeEvent, useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Box as BoxType } from '@nivo/core'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { ControlContext, MarginControlConfig } from '../types'\nimport { Control, PropertyHeader, Help, TextInput } from '../ui'\n\ntype Side = keyof BoxType\n\ninterface MarginControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    value: BoxType\n    config: MarginControlConfig\n    onChange: (value: BoxType) => void\n    context?: ControlContext\n}\n\nexport const MarginControl = ({\n    id,\n    property,\n    flavors,\n    currentFlavor,\n    value,\n    onChange,\n    context,\n}: MarginControlProps) => {\n    const [side, setSide] = useState<null | Side>(null)\n\n    const handleChange = (side: Side) => (e: ChangeEvent<HTMLInputElement>) => {\n        onChange({\n            ...value,\n            [side]: Number(e.target.value),\n        })\n    }\n\n    const handleFocus = (side: Side) => () => {\n        setSide(side)\n    }\n\n    const handleBlur = useCallback(() => {\n        setSide(null)\n    }, [setSide])\n\n    return (\n        <Control\n            id={id}\n            description={property.description}\n            flavors={flavors}\n            currentFlavor={currentFlavor}\n            supportedFlavors={property.flavors}\n        >\n            <PropertyHeader {...property} context={context} />\n            <Grid>\n                <Label htmlFor={`${id}-top`}>top</Label>\n                <TextInput\n                    id={`${id}-top`}\n                    value={value.top}\n                    unit=\"px\"\n                    isNumber={true}\n                    onChange={handleChange('top')}\n                    onFocus={handleFocus('top')}\n                    onBlur={handleBlur}\n                />\n                <Label htmlFor={`${id}-right`}>right</Label>\n                <TextInput\n                    id={`${id}-right`}\n                    value={value.right}\n                    unit=\"px\"\n                    isNumber={true}\n                    onChange={handleChange('right')}\n                    onFocus={handleFocus('right')}\n                    onBlur={handleBlur}\n                />\n                <BoxCell>\n                    <Box side={side} />\n                </BoxCell>\n                <Label htmlFor={`${id}-bottom`}>bottom</Label>\n                <TextInput\n                    id={`${id}-bottom`}\n                    value={value.bottom}\n                    unit=\"px\"\n                    isNumber={true}\n                    onChange={handleChange('bottom')}\n                    onFocus={handleFocus('bottom')}\n                    onBlur={handleBlur}\n                />\n                <Label htmlFor={`${id}-left`}>left</Label>\n                <TextInput\n                    id={`${id}-left`}\n                    value={value.left}\n                    unit=\"px\"\n                    isNumber={true}\n                    onChange={handleChange('left')}\n                    onFocus={handleFocus('left')}\n                    onBlur={handleBlur}\n                />\n            </Grid>\n            <Help>{property.help}</Help>\n        </Control>\n    )\n}\n\nconst Grid = styled.div`\n    display: grid;\n    grid-template-columns: 50px 60px 50px 60px auto;\n    grid-column-gap: 9px;\n    grid-row-gap: 5px;\n    margin-bottom: 5px;\n`\n\nconst Label = styled.label`\n    text-align: right;\n`\n\nconst BoxCell = styled.div`\n    grid-column-start: 5;\n    grid-row-start: 1;\n    grid-row-end: 3;\n    padding: 5px 0;\n`\n\nconst Box = styled.div<{\n    side: Side | null\n}>`\n    width: 100%;\n    height: 100%;\n    max-width: 80px;\n    margin-left: 12px;\n    border: 2px solid ${({ theme }) => theme.colors.border};\n    ${({ side, theme }) => {\n        if (side === null) return ''\n\n        return `\n            border-${side}-color: ${theme.colors.accent};\n            border-${side}-width: 3px;\n        `\n    }}\n`\n","import React, { ChangeEvent, memo, useCallback, useState } from 'react'\nimport { config as springConfig } from '@react-spring/web'\nimport { isString } from 'lodash'\nimport styled from 'styled-components'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { ControlContext, MotionConfigControlConfig } from '../types'\nimport { Control, PropertyHeader, Help, Radio, Select, Switch } from '../ui'\n\nconst presetOptions = Object.keys(springConfig).map(presetId => ({\n    value: presetId,\n    label: presetId,\n}))\n\nconst defaultConfig = {\n    mass: 1,\n    tension: 170,\n    friction: 26,\n    clamp: false,\n    precision: 0.01,\n    velocity: 0,\n}\n\ninterface MotionConfigControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    config: MotionConfigControlConfig\n    value: any\n    onChange: (value: any) => void\n    context?: ControlContext\n}\n\nexport const MotionConfigControl = memo(\n    ({\n        id,\n        property,\n        flavors,\n        currentFlavor,\n        value,\n        onChange,\n        context,\n    }: MotionConfigControlProps) => {\n        const type = isString(value) ? 'preset' : 'custom'\n        const [preset, setPreset] = useState(type === 'preset' ? value : 'default')\n        const [customConfig, setCustomConfig] = useState(type === 'custom' ? value : defaultConfig)\n\n        const handleTypeChange = useCallback(\n            event => {\n                const newType = event.target.value\n                if (newType === 'preset') {\n                    onChange(preset)\n                } else {\n                    onChange(customConfig)\n                }\n            },\n            [onChange]\n        )\n\n        const handlePresetChange = useCallback(\n            option => {\n                setPreset(option.value)\n                onChange(option.value)\n            },\n            [onChange]\n        )\n\n        const handleMassChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const mass = Number(event.target.value)\n            const newCustomConfig = {\n                ...customConfig,\n                mass,\n            }\n            setCustomConfig(newCustomConfig)\n            onChange(newCustomConfig)\n        }\n\n        const handleTensionChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const tension = Number(event.target.value)\n            const newCustomConfig = {\n                ...customConfig,\n                tension,\n            }\n            setCustomConfig(newCustomConfig)\n            onChange(newCustomConfig)\n        }\n\n        const handleFrictionChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const friction = Number(event.target.value)\n            const newCustomConfig = {\n                ...customConfig,\n                friction,\n            }\n            setCustomConfig(newCustomConfig)\n            onChange(newCustomConfig)\n        }\n\n        const handleClampChange = (clamp: boolean) => {\n            const newCustomConfig = {\n                ...customConfig,\n                clamp,\n            }\n            setCustomConfig(newCustomConfig)\n            onChange(newCustomConfig)\n        }\n\n        return (\n            <Control\n                id={id}\n                description={property.description}\n                flavors={flavors}\n                currentFlavor={currentFlavor}\n                supportedFlavors={property.flavors}\n            >\n                <PropertyHeader id={id} {...property} context={context} />\n                <Row>\n                    <Radio\n                        options={[\n                            { value: 'preset', label: 'preset' },\n                            { value: 'custom', label: 'custom' },\n                        ]}\n                        value={type}\n                        onChange={handleTypeChange}\n                    />\n                    {type === 'preset' && (\n                        <Select\n                            options={presetOptions}\n                            value={presetOptions.find(option => option.value === value)}\n                            onChange={handlePresetChange}\n                        />\n                    )}\n                    {type === 'custom' && (\n                        <CustomControls>\n                            <label>mass</label>\n                            <code className=\"code-number\">{value.mass}</code>\n                            <input\n                                type=\"range\"\n                                value={value.mass}\n                                onChange={handleMassChange}\n                                min={1}\n                                max={500}\n                            />\n\n                            <label>tension</label>\n                            <code className=\"code-number\">{value.tension}</code>\n                            <input\n                                type=\"range\"\n                                value={value.tension}\n                                onChange={handleTensionChange}\n                                min={1}\n                                max={500}\n                            />\n\n                            <label>friction</label>\n                            <code className=\"code-number\">{value.friction}</code>\n                            <input\n                                type=\"range\"\n                                value={value.friction}\n                                onChange={handleFrictionChange}\n                                min={1}\n                                max={500}\n                            />\n\n                            <Switch\n                                value={value.clamp}\n                                id={`${id}clamp`}\n                                onChange={handleClampChange}\n                            />\n                            <span />\n                            <label htmlFor={`${id}clamp.switch`}>clamp</label>\n                        </CustomControls>\n                    )}\n                </Row>\n                <Help>{property.help}</Help>\n            </Control>\n        )\n    }\n)\n\nconst Row = styled.div`\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-row-gap: 9px;\n`\n\nconst CustomControls = styled.div`\n    display: grid;\n    grid-template-columns: 50px 25px auto 50px 25px auto;\n    align-items: center;\n    column-gap: 9px;\n    row-gap: 9px;\n    margin-bottom: 9px;\n`\n","import React, { memo, useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { formatSpecifier as parseFormat, FormatSpecifier } from 'd3-format'\n// @ts-ignore\nimport { components } from 'react-select'\nimport { FaChevronUp, FaChevronDown } from 'react-icons/fa'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { ControlContext, ValueFormatControlConfig } from '../types'\nimport { Control, PropertyHeader, Help, TextInput, Switch, Select } from '../ui'\n\nconst typeOptions = [\n    {\n        value: undefined,\n        label: 'none',\n        description: 'none',\n    },\n    {\n        value: 'e',\n        label: 'e',\n        description: 'exponent notation.',\n    },\n    {\n        value: 'f',\n        label: 'f',\n        description: 'fixed point notation.',\n    },\n    {\n        value: 'g',\n        label: 'g',\n        description: 'either decimal or exponent notation, rounded to significant digits.',\n    },\n    {\n        value: 'r',\n        label: 'r',\n        description: 'decimal notation, rounded to significant digits.',\n    },\n    {\n        value: 's',\n        label: 's',\n        description: 'decimal notation with an SI prefix, rounded to significant digits.',\n    },\n    {\n        value: '%',\n        label: '%',\n        description: 'multiply by 100, and then decimal notation with a percent sign.',\n    },\n    {\n        value: 'p',\n        label: 'p',\n        description:\n            'multiply by 100, round to significant digits, and then decimal notation with a percent sign.',\n    },\n    {\n        value: 'b',\n        label: 'b',\n        description: 'binary notation, rounded to integer.',\n    },\n    {\n        value: 'o',\n        label: 'o',\n        description: 'octal notation, rounded to integer.',\n    },\n    {\n        value: 'd',\n        label: 'd',\n        description: 'decimal notation, rounded to integer.',\n    },\n    {\n        value: 'x',\n        label: 'x',\n        description: 'hexadecimal notation, using lower-case letters, rounded to integer.',\n    },\n    {\n        value: 'X',\n        label: 'X',\n        description: 'hexadecimal notation, using upper-case letters, rounded to integer.',\n    },\n    {\n        value: 'c',\n        label: 'c',\n        description: 'converts the integer to the corresponding unicode character before printing.',\n    },\n]\n\nconst alignOptions = [\n    {\n        value: '>',\n        label: '>',\n        description: 'Force the field to be right-aligned within the available space.',\n    },\n    {\n        value: '<',\n        label: '<',\n        description: 'Force the field to be left-aligned within the available space.',\n    },\n    {\n        value: '^',\n        label: '^',\n        description: 'Force the field to be centered within the available space.',\n    },\n    {\n        value: '=',\n        label: '=',\n        description: 'like >, but with any sign and symbol to the left of any padding.',\n    },\n]\n\nconst signOptions = [\n    {\n        value: '-',\n        label: '-',\n        description: 'nothing for zero or positive and a minus sign for negative.',\n    },\n    {\n        value: '+',\n        label: '+',\n        description: 'a plus sign for zero or positive and a minus sign for negative.',\n    },\n    {\n        value: '(',\n        label: '(',\n        description: 'nothing for zero or positive and parentheses for negative.',\n    },\n    {\n        value: ' ',\n        label: '(space)',\n        description: 'a space for zero or positive and a minus sign for negative.',\n    },\n]\n\nconst symbolOptions = [\n    {\n        value: undefined,\n        label: 'none',\n    },\n    {\n        value: '#',\n        label: '#',\n    },\n    {\n        value: '$',\n        label: '$',\n    },\n]\n\nconst Option = (props: any) => (\n    <components.Option {...props}>\n        {props.value === undefined && 'none'}\n        {props.value !== undefined && (\n            <>\n                <strong>{props.label}</strong> {props.data.description}\n            </>\n        )}\n    </components.Option>\n)\n\ninterface ValueFormatControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    config: ValueFormatControlConfig\n    value: { format: string; enabled: boolean }\n    onChange: (value: { format: string; enabled: boolean }) => void\n    context?: ControlContext\n}\n\nexport const ValueFormatControl = memo(\n    ({\n        id,\n        property,\n        flavors,\n        currentFlavor,\n        value,\n        onChange,\n        context,\n    }: ValueFormatControlProps) => {\n        const [isEditing, setIsEditing] = useState(false)\n        const formatSpecifier = useMemo(() => parseFormat(value.format), [value.format])\n\n        const handleSwitch = useCallback(\n            enabled => {\n                onChange({\n                    format: formatSpecifier.toString(),\n                    enabled,\n                })\n            },\n            [formatSpecifier, onChange]\n        )\n\n        const updateFormat = useCallback(\n            (property, propertyValue) => {\n                const updatedFormatSpecifier = new FormatSpecifier({\n                    ...formatSpecifier,\n                    [property]: propertyValue,\n                })\n\n                onChange({\n                    format: updatedFormatSpecifier.toString(),\n                    enabled: value.enabled,\n                })\n            },\n            [formatSpecifier, onChange, value.enabled]\n        )\n\n        const handleTypeChange = option => {\n            updateFormat('type', option.value)\n        }\n\n        const handleFillChange = e => {\n            updateFormat('fill', e.target.value.slice(1))\n        }\n\n        const handleAlignChange = option => {\n            updateFormat('align', option.value)\n        }\n\n        const handleSignChange = option => {\n            updateFormat('sign', option.value)\n        }\n\n        const handleSymbolChange = option => {\n            updateFormat('symbol', option.value)\n        }\n\n        const handleZeroChange = flag => {\n            updateFormat('zero', flag)\n        }\n\n        const handleWidthChange = e => {\n            updateFormat('width', e.target.value)\n        }\n\n        const handleCommaChange = flag => {\n            updateFormat('comma', flag)\n        }\n\n        const handlePrecisionChange = e => {\n            updateFormat('precision', e.target.value)\n        }\n\n        const handleTrimChange = flag => {\n            updateFormat('trim', flag)\n        }\n\n        return (\n            <Control\n                id={id}\n                description={property.description}\n                flavors={flavors}\n                currentFlavor={currentFlavor}\n                supportedFlavors={property.flavors}\n            >\n                <PropertyHeader id={id} {...property} context={context} />\n                <MainControls>\n                    <Switch value={value.enabled} id={`${id}-enable`} onChange={handleSwitch} />\n                    <label\n                        htmlFor={`${id}-enable.switch`}\n                        style={{ gridColumnStart: 2, gridColumnEnd: 4 }}\n                    >\n                        enable formatting\n                    </label>\n\n                    <label>format</label>\n                    <TextInput value={value.format} readOnly />\n                    <ToggleButton onClick={() => setIsEditing(flag => !flag)}>\n                        <span>{isEditing ? 'close' : 'open'} editor</span>\n                        {isEditing ? <FaChevronUp /> : <FaChevronDown />}\n                    </ToggleButton>\n                </MainControls>\n                {isEditing && (\n                    <SubControls>\n                        <label>type</label>\n                        <Select\n                            options={typeOptions}\n                            value={typeOptions.find(\n                                option => option.value === formatSpecifier.type\n                            )}\n                            clearable={false}\n                            onChange={handleTypeChange}\n                            components={{ Option }}\n                        />\n\n                        <label>sign</label>\n                        <Select\n                            options={signOptions}\n                            value={signOptions.find(\n                                option => option.value === formatSpecifier.sign\n                            )}\n                            clearable={false}\n                            onChange={handleSignChange}\n                            components={{ Option }}\n                        />\n\n                        <label>symbol</label>\n                        <Select\n                            options={symbolOptions}\n                            value={symbolOptions.find(\n                                option => option.value === formatSpecifier.symbol\n                            )}\n                            clearable={false}\n                            onChange={handleSymbolChange}\n                        />\n\n                        <label>precision</label>\n                        <TextInput\n                            value={formatSpecifier.precision}\n                            isNumber\n                            onChange={handlePrecisionChange}\n                        />\n\n                        <label>width</label>\n                        <TextInput\n                            value={formatSpecifier.width}\n                            isNumber\n                            onChange={handleWidthChange}\n                        />\n\n                        <label htmlFor={`${id}.fill`}>fill</label>\n                        <TextInput\n                            id={`${id}.fill`}\n                            value={formatSpecifier.fill}\n                            onChange={handleFillChange}\n                        />\n\n                        <label>align</label>\n                        <Select\n                            options={alignOptions}\n                            value={alignOptions.find(\n                                option => option.value === formatSpecifier.align\n                            )}\n                            clearable={false}\n                            onChange={handleAlignChange}\n                            components={{ Option }}\n                        />\n\n                        <Switch\n                            value={formatSpecifier.zero}\n                            id={`${id}zero`}\n                            onChange={handleZeroChange}\n                        />\n                        <label htmlFor={`${id}zero.switch`}>zero-padding</label>\n\n                        <Switch\n                            value={formatSpecifier.comma}\n                            id={`${id}comma`}\n                            onChange={handleCommaChange}\n                        />\n                        <label htmlFor={`${id}comma.switch`}>comma</label>\n\n                        <Switch\n                            value={formatSpecifier.trim}\n                            id={`${id}trim`}\n                            onChange={handleTrimChange}\n                        />\n                        <label htmlFor={`${id}trim.switch`}>trim trailing zeros</label>\n                    </SubControls>\n                )}\n                <Help>{property.help}</Help>\n            </Control>\n        )\n    }\n)\n\nconst MainControls = styled.div`\n    display: grid;\n    grid-template-columns: 60px auto 100px;\n    align-items: center;\n    row-gap: 9px;\n    column-gap: 9px;\n    margin: 12px 0;\n`\n\nconst SubControls = styled.div`\n    display: grid;\n    grid-template-columns: 60px auto 60px auto;\n    align-items: center;\n    row-gap: 9px;\n    column-gap: 9px;\n    margin: 12px 0;\n`\n\nconst ToggleButton = styled.span`\n    cursor: pointer;\n    display: grid;\n    grid-template-columns: auto 24px;\n    grid-column-gap: 9px;\n    align-items: center;\n    white-space: nowrap;\n    color: ${props => props.theme.colors.accent};\n\n    path {\n        fill: ${props => props.theme.colors.border};\n    }\n`\n","import React from 'react'\n// @ts-ignore\nimport { blendModes, CssMixBlendMode } from '@nivo/core'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { BlendModeControlConfig, ControlContext } from '../types'\nimport { ChoicesControl } from '../generics'\n\nconst choices = blendModes.map((mode: string) => ({\n    label: mode,\n    value: mode,\n}))\n\ninterface BlendModeControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    config: BlendModeControlConfig\n    value: CssMixBlendMode\n    onChange: (blendMode: CssMixBlendMode) => void\n    context?: ControlContext\n}\n\nexport const BlendModeControl = ({ config, ...props }: BlendModeControlProps) => (\n    <ChoicesControl\n        {...props}\n        config={{\n            ...config,\n            type: 'choices',\n            choices,\n        }}\n    />\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport const ColorsControlItem = ({ id, colors }: { id: string; colors: string[] }) => (\n    <Container>\n        <Name>{id}</Name>\n        {colors.map((color, index) => (\n            <Swatch key={`${color}.${index}`} style={{ background: color }} />\n        ))}\n    </Container>\n)\n\nconst Container = styled.div`\n    display: flex;\n    align-items: center;\n`\n\nconst Name = styled.span`\n    font-weight: 500;\n    font-size: 0.8rem;\n    margin-right: 14px;\n    width: 260px;\n    white-space: nowrap;\n`\n\nconst Swatch = styled.div`\n    display: block;\n    width: 10px;\n    height: 10px;\n`\n","import React, { useMemo } from 'react'\nimport range from 'lodash/range'\nimport { startCase } from 'lodash'\n// @ts-ignore\nimport { components } from 'react-select'\n// @ts-ignore\nimport { quantizeColorScales } from '@nivo/core'\nimport {\n    ColorSchemeId,\n    ColorInterpolatorId,\n    colorInterpolators,\n    colorInterpolatorIds,\n    isCategoricalColorScheme,\n    isDivergingColorScheme,\n    isSequentialColorScheme,\n    colorSchemes,\n    colorSchemeIds,\n} from '@nivo/colors'\nimport { ColorsControlItem } from './ColorsControlItem'\n\nexport const getColorSchemeType = (scheme: ColorSchemeId | ColorInterpolatorId) => {\n    let type = ''\n    if (isCategoricalColorScheme(scheme as ColorSchemeId)) {\n        type = 'Categorical'\n    } else if (isDivergingColorScheme(scheme as ColorSchemeId)) {\n        type = 'Diverging'\n    } else if (isSequentialColorScheme(scheme as ColorSchemeId)) {\n        type = 'Sequential'\n    }\n\n    return type\n}\n\nexport const humanizeColorSchemeId = (schemeId: ColorSchemeId | ColorInterpolatorId) => {\n    const parts = schemeId.split('_').map(startCase)\n\n    return parts.join(' → ')\n}\n\nexport const getColorSchemeLabel = (scheme: ColorSchemeId | ColorInterpolatorId) => {\n    const type = getColorSchemeType(scheme)\n\n    return `${type ? `${type}: ` : ''}${humanizeColorSchemeId(scheme)}`\n}\n\nexport const getColorSchemeSwatches = (scheme: ColorSchemeId | ColorInterpolatorId) => {\n    let colors: string[] = []\n    if (isCategoricalColorScheme(scheme as ColorSchemeId)) {\n        colors = colorSchemes[scheme as ColorSchemeId] as string[]\n    } else if (isDivergingColorScheme(scheme as ColorSchemeId)) {\n        colors = colorSchemes[scheme as ColorSchemeId][11] as string[]\n    } else if (isSequentialColorScheme(scheme as ColorSchemeId)) {\n        colors = colorSchemes[scheme as ColorSchemeId][9] as string[]\n    }\n\n    return colors\n}\n\nexport const getColorInterpolatorSwatches = (interpolator: ColorInterpolatorId) =>\n    range(0, 1.1, 0.1).map(t => colorInterpolators[interpolator](t)) as string[]\n\nexport const getInterpolatorConfig = (interpolatorId: ColorInterpolatorId) => ({\n    id: getColorSchemeLabel(interpolatorId),\n    colors: getColorInterpolatorSwatches(interpolatorId),\n})\n\nexport const ColorSchemeSelectValue = (props: any) => (\n    <components.SingleValue {...props}>\n        <ColorsControlItem id={props.data.label} colors={props.data.colors} />\n    </components.SingleValue>\n)\n\nexport const ColorSchemeSelectOption = (props: any) => (\n    <components.Option {...props}>\n        <ColorsControlItem id={props.data.label} colors={props.data.colors} />\n    </components.Option>\n)\n\nexport const useOrdinalColorSchemes = () =>\n    useMemo(\n        () =>\n            colorSchemeIds.map(scheme => ({\n                label: getColorSchemeLabel(scheme),\n                value: scheme,\n                colors: getColorSchemeSwatches(scheme),\n            })),\n        []\n    )\n\nexport const useColorInterpolators = () =>\n    useMemo(\n        () =>\n            colorInterpolatorIds.map(scheme => ({\n                label: getColorSchemeLabel(scheme),\n                value: scheme,\n                colors: getColorInterpolatorSwatches(scheme),\n            })),\n        []\n    )\n\nconst legacyThemesMapping: Partial<Record<ColorSchemeId, string>> = {\n    brown_blueGreen: 'BrBG',\n    blue_green: 'BuGn',\n    blue_purple: 'BuPu',\n    green_blue: 'GnBu',\n    orange_red: 'OrRd',\n    purpleRed_green: 'PRGn',\n    pink_yellowGreen: 'PiYG',\n    purple_blue: 'PuBu',\n    purple_blue_green: 'PuBuGn',\n    purple_orange: 'PuOr',\n    purple_red: 'PuRd',\n    red_blue: 'RdBu',\n    red_grey: 'RdGy',\n    red_purple: 'RdPu',\n    red_yellow_blue: 'RdYlBu',\n    red_yellow_green: 'RdYlGn',\n    yellow_green: 'YlGn',\n    yellow_green_blue: 'YlGnBu',\n    yellow_orange_brown: 'YlOrBr',\n    yellow_orange_red: 'YlOrRd',\n    blues: 'blues',\n    greens: 'greens',\n    greys: 'greys',\n    nivo: 'nivo',\n    oranges: 'oranges',\n    purples: 'purples',\n    reds: 'reds',\n    spectral: 'spectral',\n}\n\nexport const useLegacyQuantizeColors = () => {\n    const allSchemes = useOrdinalColorSchemes()\n\n    return useMemo(() => {\n        const filtered: {\n            label: string\n            value: string\n            colors: string[]\n        }[] = []\n\n        allSchemes.forEach(scheme => {\n            const legacyId = legacyThemesMapping[scheme.value]\n\n            if (legacyId !== undefined) {\n                filtered.push({\n                    ...scheme,\n                    value: legacyId,\n                })\n            }\n        })\n\n        return filtered\n    }, [allSchemes])\n}\n\nexport const useBulletColors = () => {\n    const schemes = useOrdinalColorSchemes()\n\n    const interpolators = useColorInterpolators()\n    const mappedInterpolators = useMemo(\n        () =>\n            interpolators.map(interpolator => ({\n                ...interpolator,\n                value: `seq:${interpolator.value}`,\n            })),\n        [interpolators]\n    )\n\n    return useMemo(() => [...schemes, ...mappedInterpolators], [schemes, mappedInterpolators])\n}\n","import React, { useCallback } from 'react'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { ControlContext, BulletColorsControlConfig } from '../types'\nimport { Control, PropertyHeader, Help, Select } from '../ui'\nimport {\n    ColorSchemeSelectOption,\n    ColorSchemeSelectValue,\n    useBulletColors,\n} from './colorSchemeSelect'\n\ninterface QuantizeColorsControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    config: BulletColorsControlConfig\n    onChange: (value: string) => void\n    value: string\n    context?: ControlContext\n}\n\nexport const BulletColorsControl = ({\n    id,\n    property,\n    flavors,\n    currentFlavor,\n    value: _value,\n    onChange,\n    context,\n}: QuantizeColorsControlProps) => {\n    const options = useBulletColors()\n\n    const handleChange = useCallback(value => onChange(value.value), [onChange])\n    const value = options.find(({ value: v }) => v === _value)\n\n    return (\n        <Control\n            id={id}\n            description={property.description}\n            flavors={flavors}\n            currentFlavor={currentFlavor}\n            supportedFlavors={property.flavors}\n        >\n            <PropertyHeader {...property} context={context} />\n            <Select\n                options={options}\n                onChange={handleChange}\n                value={value}\n                isSearchable\n                clearable={false}\n                components={{\n                    SingleValue: ColorSchemeSelectValue,\n                    Option: ColorSchemeSelectOption,\n                }}\n            />\n            <Help>{property.help}</Help>\n        </Control>\n    )\n}\n","import React, { useCallback } from 'react'\n// @ts-ignore\nimport { components } from 'react-select'\nimport { ColorInterpolatorId } from '@nivo/colors'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { ControlContext, ColorInterpolatorsControlConfig } from '../types'\nimport { Control, PropertyHeader, Help, Select } from '../ui'\nimport {\n    ColorSchemeSelectOption,\n    ColorSchemeSelectValue,\n    useColorInterpolators,\n} from './colorSchemeSelect'\n\ninterface OrdinalColorsControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    config: ColorInterpolatorsControlConfig\n    value: ColorInterpolatorId\n    onChange: (value: ColorInterpolatorId) => void\n    context?: ControlContext\n}\n\nexport const ColorInterpolatorsControl = ({\n    id,\n    property,\n    flavors,\n    currentFlavor,\n    value: _value,\n    onChange,\n    context,\n}: OrdinalColorsControlProps) => {\n    const options = useColorInterpolators()\n\n    const handleChange = useCallback(value => onChange(value.value), [onChange])\n    const value = options.find(({ value: v }) => v === _value)\n\n    return (\n        <Control\n            id={id}\n            description={property.description}\n            flavors={flavors}\n            currentFlavor={currentFlavor}\n            supportedFlavors={property.flavors}\n        >\n            <PropertyHeader {...property} context={context} />\n            <Select\n                options={options}\n                onChange={handleChange}\n                value={value}\n                isSearchable\n                clearable={false}\n                components={{\n                    SingleValue: ColorSchemeSelectValue,\n                    Option: ColorSchemeSelectOption,\n                }}\n            />\n            <Help>{property.help}</Help>\n        </Control>\n    )\n}\n","import React, { useCallback } from 'react'\nimport { Flavor } from '../../../types'\nimport { ColorPickerControlConfig, ControlContext } from '../types'\nimport { Control, PropertyHeader, Help } from '../ui'\n\ninterface ColorPickerControlProps {\n    id: string\n    property: any\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    config: ColorPickerControlConfig\n    value: string\n    onChange: (value: string) => void\n    context?: ControlContext\n}\n\nexport const ColorPickerControl = ({\n    id,\n    property,\n    flavors,\n    currentFlavor,\n    value,\n    context,\n    onChange,\n}: ColorPickerControlProps) => {\n    const handleChange = useCallback(\n        e => {\n            onChange(e.target.value)\n        },\n        [onChange]\n    )\n\n    return (\n        <Control\n            id={id}\n            description={property.description}\n            flavors={flavors}\n            currentFlavor={currentFlavor}\n            supportedFlavors={property.flavors}\n        >\n            <PropertyHeader id={id} {...property} context={context} />\n            <div>\n                <input type=\"color\" id={id} onChange={handleChange} value={value} />\n                &nbsp;&nbsp;&nbsp;\n                <code className=\"code code-string\">{value}</code>\n            </div>\n            <Help>{property.help}</Help>\n        </Control>\n    )\n}\n","import React, { useCallback, useState, useMemo } from 'react'\nimport { upperFirst } from 'lodash'\nimport {\n    ContinuousColorScaleConfig,\n    divergingColorScaleDefaults,\n    quantizeColorScaleDefaults,\n} from '@nivo/colors'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { ContinuousColorsControlConfig, ControlContext, ObjectControlConfig } from '../types'\nimport { ObjectControl } from '../generics'\n\ninterface ContinuousColorsControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    config: ContinuousColorsControlConfig\n    value: ContinuousColorScaleConfig\n    onChange: (config: ContinuousColorScaleConfig) => void\n    context?: ControlContext\n}\n\nconst scaleTypes = ['sequential', 'diverging', 'quantize']\nconst scaleTypeChoices = scaleTypes.map(type => ({\n    label: upperFirst(type),\n    value: type,\n}))\n\nconst helpByType: Record<ContinuousColorScaleConfig['type'], string> = {\n    sequential: `\n    The \\`sequential\\` color scale maps colors linearly from min to max value.\n    It is intended to be used with a sequential color scheme, \n    but also supports others.\n    `,\n    diverging: `\n    The \\`diverging\\` color scale maps colors from min to max value,\n    with a diverging point which can be configured via \\`divergeAt\\`.\n    It is intended to be used with a diverging color scheme, \n    but also supports others.\n    `,\n    quantize: `\n    The \\`quantize\\` color scale maps colors from min to max value\n    to a discrete color range, dividing the domain into uniform segments.\n    You can either use a predefined color scheme or pass a\n    custom array of colors.\n    `,\n}\n\nexport const ContinuousColorsControl = ({\n    id,\n    property,\n    flavors,\n    currentFlavor,\n    value,\n    onChange,\n    context,\n}: ContinuousColorsControlProps) => {\n    const [lastDivergeAtValue, setLastDivergeAtValue] = useState(\n        'divergeAt' in value ? value.divergeAt : divergingColorScaleDefaults.divergeAt\n    )\n    const [lastStepsValue, setLastStepsValue] = useState(\n        'steps' in value ? value.steps : quantizeColorScaleDefaults.steps\n    )\n\n    const objectProperty: Omit<ChartProperty, 'control'> & {\n        control: ObjectControlConfig\n    } = useMemo(() => {\n        return {\n            ...property,\n            control: {\n                type: 'object',\n                isOpenedByDefault: true,\n                props: [\n                    {\n                        key: 'type',\n                        type: `'sequential' | 'diverging' | 'quantize'`,\n                        required: true,\n                        help: helpByType[value.type],\n                        control: {\n                            type: 'radio',\n                            columns: 3,\n                            choices: scaleTypeChoices,\n                        },\n                    },\n                    {\n                        key: 'scheme',\n                        type: 'string',\n                        control: {\n                            type: 'color_interpolators',\n                        },\n                    },\n                    {\n                        key: 'minValue',\n                        type: 'number',\n                        help: 'If omitted, will use the min value from the data.',\n                    },\n                    {\n                        key: 'maxValue',\n                        type: 'number',\n                        help: 'If omitted, will use the max value from the data.',\n                    },\n                    {\n                        key: 'divergeAt',\n                        type: 'number',\n                        help: 'Define the divergence point between min & max values (0~1).',\n                        when: config => config.type === 'diverging',\n                        defaultValue: divergingColorScaleDefaults.divergeAt,\n                        control: {\n                            type: 'range',\n                            min: 0,\n                            max: 1,\n                            step: 0.05,\n                        },\n                    },\n                    {\n                        key: 'steps',\n                        type: 'number',\n                        help: `\n                        Customize the number of steps you want to use for a \\`quantize\\` scale\n                        unless you specify a custom array of colors, in which case the number of\n                        steps is equal to the number of colors you defined.\n                        `,\n                        when: config => config.type === 'quantize',\n                        defaultValue: quantizeColorScaleDefaults.steps,\n                        control: {\n                            type: 'range',\n                            min: 2,\n                            max: 16,\n                        },\n                    },\n                ],\n            },\n        }\n    }, [value.type, flavors])\n\n    const handleChange = useCallback(\n        ({ divergeAt, steps, ...genericProps }: any) => {\n            let fixedValue = genericProps\n\n            if (fixedValue.type === 'diverging') {\n                if (divergeAt === undefined) {\n                    fixedValue = {\n                        ...fixedValue,\n                        divergeAt: lastDivergeAtValue,\n                    }\n                } else {\n                    fixedValue = { ...fixedValue, divergeAt }\n                    setLastDivergeAtValue(divergeAt)\n                }\n            }\n\n            if (fixedValue.type === 'quantize') {\n                if (steps === undefined) {\n                    fixedValue = {\n                        ...fixedValue,\n                        steps: lastStepsValue,\n                    }\n                } else {\n                    fixedValue = { ...fixedValue, steps }\n                    setLastStepsValue(steps)\n                }\n            }\n\n            onChange(fixedValue)\n        },\n        [onChange, lastDivergeAtValue, setLastDivergeAtValue, lastStepsValue, setLastStepsValue]\n    )\n\n    return (\n        <ObjectControl\n            id={id}\n            property={objectProperty}\n            value={value}\n            flavors={flavors}\n            currentFlavor={currentFlavor}\n            config={objectProperty.control}\n            onChange={handleChange}\n            context={context}\n        />\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { TextInput, Select } from '../ui'\n\nconst modifierTypes = ['brighter', 'darker', 'opacity'].map(prop => ({\n    label: prop,\n    value: prop,\n}))\n\ninterface InheritedColorModifierControlProps {\n    modifier: any[]\n    onChange: (modifier: any[]) => void\n}\n\nexport const InheritedColorModifierControl = ({\n    modifier,\n    onChange,\n}: InheritedColorModifierControlProps) => {\n    return (\n        <Container>\n            <Select\n                options={modifierTypes}\n                value={modifierTypes.find(prop => prop.value === modifier[0])}\n                onChange={(value: any) => onChange([value.value, modifier[1]])}\n            />\n            <TextInput\n                value={modifier[1]}\n                isNumber={true}\n                onChange={event => onChange([modifier[0], event.target.value])}\n            />\n            <input\n                type=\"range\"\n                value={modifier[1]}\n                min={0}\n                max={3}\n                step={0.1}\n                onChange={event => onChange([modifier[0], event.target.value])}\n            />\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    display: grid;\n    grid-template-columns: 110px 40px auto;\n    margin-bottom: 5px;\n    align-items: center;\n    grid-column-gap: 12px;\n`\n","import React, { useState, useCallback } from 'react'\nimport isString from 'lodash/isString'\nimport isPlainObject from 'lodash/isPlainObject'\nimport styled from 'styled-components'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { ControlContext, InheritedColorControlConfig } from '../types'\nimport { Control, PropertyHeader, Help, Select } from '../ui'\nimport { InheritedColorModifierControl } from './InheritedColorModifierControl'\n\nconst themeProperties = ['background', 'grid.line.stroke', 'labels.text.fill'].map(prop => ({\n    label: prop,\n    value: prop,\n}))\n\nconst defaultInheritableProperties = ['color']\n\ninterface InheritedColorControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    value: InheritedColorConfig<any>\n    config: InheritedColorControlConfig\n    onChange: (value: InheritedColorConfig<any>) => any\n    context?: ControlContext\n}\n\nexport const InheritedColorControl = ({\n    id,\n    property,\n    flavors,\n    currentFlavor,\n    value,\n    onChange,\n    config: {\n        inheritableProperties = defaultInheritableProperties,\n        defaultCustomColor = 'black',\n        defaultThemeProperty = 'background',\n        defaultFrom = 'color',\n    },\n}: InheritedColorControlProps) => {\n    const [customColor, setCustomColor] = useState(isString(value) ? value : defaultCustomColor)\n    const [themeProp, setThemeProp] = useState(\n        isPlainObject(value) && value.theme !== undefined ? value.theme : defaultThemeProperty\n    )\n    const [fromProp, setFromProp] = useState(\n        isPlainObject(value) && value.from !== undefined ? value.from : defaultFrom\n    )\n    const [modifiers, setModifiers] = useState(\n        isPlainObject(value) && value.modifiers !== undefined ? value.modifiers : []\n    )\n\n    let type\n    let subControl = null\n\n    const handleTypeChange = useCallback(\n        type => {\n            if (type === 'custom') onChange(customColor)\n            if (type === 'theme') onChange({ theme: themeProp })\n            if (type === 'inherit') onChange({ from: fromProp, modifiers })\n        },\n        [onChange]\n    )\n    const handleThemePropertyChange = useCallback(\n        value => {\n            setThemeProp(value.value)\n            onChange({ theme: value.value })\n        },\n        [onChange, setThemeProp]\n    )\n    const handleFromPropertyChange = useCallback(\n        value => {\n            setFromProp(value.value)\n            onChange({\n                from: value.value,\n                modifiers,\n            })\n        },\n        [onChange, setThemeProp]\n    )\n    const handleModifierChange = useCallback(\n        index => modifier => {\n            const newModifiers = [...modifiers]\n            newModifiers[index] = modifier\n            setModifiers(newModifiers)\n            onChange({\n                from: fromProp,\n                modifiers: newModifiers,\n            })\n        },\n        [onChange, modifiers]\n    )\n    const handleCustomColorChange = useCallback(\n        event => {\n            setCustomColor(event.target.value)\n            onChange(event.target.value)\n        },\n        [onChange, setCustomColor]\n    )\n\n    if (isString(value)) {\n        type = 'custom'\n        subControl = (\n            <CustomColor>\n                <input type=\"color\" onChange={handleCustomColorChange} value={value} />\n                <code>{value}</code>\n            </CustomColor>\n        )\n    } else if (isPlainObject(value)) {\n        if (value.theme !== undefined) {\n            type = 'theme'\n            subControl = (\n                <>\n                    <SubLabel>theme property</SubLabel>\n                    <Select\n                        options={themeProperties}\n                        value={themeProperties.find(prop => prop.value === value.theme)}\n                        onChange={handleThemePropertyChange}\n                    />\n                </>\n            )\n        } else if (value.from !== undefined) {\n            type = 'inherit'\n            const propertyOptions = inheritableProperties.map(prop => ({\n                label: prop,\n                value: prop,\n            }))\n            subControl = (\n                <>\n                    <SubLabel>inherited property</SubLabel>\n                    <Select\n                        options={propertyOptions}\n                        value={propertyOptions.find(prop => prop.value === value.from)}\n                        onChange={handleFromPropertyChange}\n                    />\n                    <SubLabel>modifiers</SubLabel>\n                    {modifiers.length === 0 && <NoModifiers>No modifier.</NoModifiers>}\n                    {modifiers.map((modifier, i: number) => (\n                        <InheritedColorModifierControl\n                            key={i}\n                            modifier={modifier}\n                            onChange={handleModifierChange(i)}\n                        />\n                    ))}\n                </>\n            )\n        }\n    }\n\n    return (\n        <Control\n            id={id}\n            description={property.description}\n            flavors={flavors}\n            currentFlavor={currentFlavor}\n            supportedFlavors={property.flavors}\n        >\n            <PropertyHeader {...property} />\n            <TypeSelector>\n                <TypeSelectorItem\n                    isActive={type === 'inherit'}\n                    onClick={() => handleTypeChange('inherit')}\n                >\n                    inherit\n                </TypeSelectorItem>\n                <TypeSelectorItem\n                    isActive={type === 'theme'}\n                    onClick={() => handleTypeChange('theme')}\n                >\n                    theme\n                </TypeSelectorItem>\n                <TypeSelectorItem\n                    isActive={type === 'custom'}\n                    onClick={() => handleTypeChange('custom')}\n                >\n                    custom\n                </TypeSelectorItem>\n            </TypeSelector>\n            {subControl}\n            <Help>{property.help}</Help>\n        </Control>\n    )\n}\n\nconst TypeSelector = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    margin-bottom: 10px;\n`\n\nconst TypeSelectorItem = styled.span<{\n    isActive: boolean\n}>`\n    cursor: pointer;\n    padding: 5px 9px;\n    text-align: center;\n    font-weight: ${({ isActive }) => (isActive ? 600 : 400)};\n    background: ${({ isActive, theme }) =>\n        isActive ? theme.colors.cardBackground : theme.colors.background};\n    color: ${({ isActive, theme }) => (isActive ? theme.colors.accent : theme.colors.textLight)};\n    border: 1px solid ${({ theme }) => theme.colors.border};\n    border-left-width: 0;\n    box-shadow: ${({ isActive }) => (isActive ? 'none' : '0 1px 1px rgba(0, 0, 0, 0.1) inset')};\n\n    &:first-child {\n        border-left-width: 1px;\n        border-top-left-radius: 3px;\n        border-bottom-left-radius: 3px;\n    }\n    &:last-child {\n        border-top-right-radius: 3px;\n        border-bottom-right-radius: 3px;\n    }\n\n    &:hover {\n        color: ${({ isActive, theme }) => (isActive ? theme.colors.accent : theme.colors.text)};\n        box-shadow: none;\n    }\n`\n\nconst SubLabel = styled.div`\n    margin-bottom: 5px;\n    font-size: 0.8rem;\n`\n\nconst CustomColor = styled.div`\n    display: grid;\n    grid-template-columns: auto 1fr;\n    align-items: center;\n    grid-column-gap: 10px;\n    margin-bottom: 5px;\n`\n\nconst NoModifiers = styled.div`\n    color: ${({ theme }) => theme.colors.textLight};\n    font-style: italic;\n    font-size: 0.8rem;\n    margin-bottom: 5px;\n`\n","import React, { useCallback } from 'react'\nimport styled, { useTheme } from 'styled-components'\nimport { Flavor, ChartProperty } from '../../../types'\nimport { ControlContext, OpacityControlConfig } from '../types'\nimport { Control, PropertyHeader, Help, TextInput } from '../ui'\n\nconst size = 24\n\ninterface OpacityControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    config: OpacityControlConfig\n    value: number\n    onChange: (value: number) => void\n    context?: ControlContext\n}\n\nexport const OpacityControl = ({\n    id,\n    property,\n    flavors,\n    currentFlavor,\n    value,\n    onChange,\n    context,\n}: OpacityControlProps) => {\n    const theme = useTheme()\n    const handleChange = useCallback(\n        event => {\n            onChange(Number(event.target.value))\n        },\n        [onChange]\n    )\n\n    return (\n        <Control\n            id={id}\n            description={property.description}\n            flavors={flavors}\n            currentFlavor={currentFlavor}\n            supportedFlavors={property.flavors}\n        >\n            <PropertyHeader id={id} {...property} context={context} />\n            <Row>\n                <TextInput value={value} onChange={handleChange} isNumber={true} />\n                <svg width={size} height={size}>\n                    <defs>\n                        <pattern\n                            id=\"opacityControlChecker\"\n                            width={8}\n                            height={8}\n                            patternUnits=\"userSpaceOnUse\"\n                        >\n                            <rect fill=\"black\" width={4} height={4} />\n                            <rect fill=\"black\" x={4} y={4} width={4} height={4} />\n                        </pattern>\n                    </defs>\n                    <rect fill=\"url(#opacityControlChecker)\" width={size} height={size} />\n                    <rect\n                        fill={theme.colors.accent}\n                        width={size}\n                        height={size}\n                        fillOpacity={value}\n                    />\n                </svg>\n                <input\n                    type=\"range\"\n                    value={value}\n                    onChange={handleChange}\n                    min={0}\n                    max={1}\n                    step={0.05}\n                />\n            </Row>\n            <Help>{property.help}</Help>\n        </Control>\n    )\n}\n\nconst Row = styled.div`\n    display: grid;\n    grid-template-columns: 60px ${size}px auto;\n    grid-column-gap: 9px;\n    align-items: center;\n    max-width: 240px;\n    margin-bottom: 5px;\n`\n","import React, { useCallback } from 'react'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { ControlContext, OrdinalColorsControlConfig } from '../types'\nimport { Control, PropertyHeader, Help, Select } from '../ui'\nimport {\n    ColorSchemeSelectOption,\n    ColorSchemeSelectValue,\n    useOrdinalColorSchemes,\n} from './colorSchemeSelect'\n\ninterface OrdinalColorsControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    config: OrdinalColorsControlConfig\n    value: { scheme: string }\n    onChange: (value: { scheme: string }) => void\n    context?: ControlContext\n}\n\nexport const OrdinalColorsControl = ({\n    id,\n    property,\n    flavors,\n    currentFlavor,\n    value,\n    onChange,\n    context,\n}: OrdinalColorsControlProps) => {\n    const options = useOrdinalColorSchemes()\n\n    const selectedOption = options.find(o => o.value === value.scheme)\n    const handleChange = useCallback(\n        option => {\n            onChange({ scheme: option.value })\n        },\n        [onChange]\n    )\n\n    return (\n        <Control\n            id={id}\n            description={property.description}\n            flavors={flavors}\n            currentFlavor={currentFlavor}\n            supportedFlavors={property.flavors}\n        >\n            <PropertyHeader {...property} context={context} />\n            <Select\n                options={options}\n                onChange={handleChange}\n                value={selectedOption}\n                isSearchable\n                components={{\n                    SingleValue: ColorSchemeSelectValue,\n                    Option: ColorSchemeSelectOption,\n                }}\n            />\n            <Help>{property.help}</Help>\n        </Control>\n    )\n}\n","import React, { useCallback } from 'react'\nimport { ChartProperty, Flavor } from '../../../types'\nimport { ControlContext, QuantizeColorsControlConfig } from '../types'\nimport { Control, PropertyHeader, Help, Select } from '../ui'\nimport {\n    ColorSchemeSelectOption,\n    ColorSchemeSelectValue,\n    useLegacyQuantizeColors,\n} from './colorSchemeSelect'\n\ninterface QuantizeColorsControlProps {\n    id: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    config: QuantizeColorsControlConfig\n    onChange: (value: string) => void\n    value: string\n    context?: ControlContext\n}\n\nexport const QuantizeColorsControl = ({\n    id,\n    property,\n    flavors,\n    currentFlavor,\n    value: _value,\n    onChange,\n    context,\n}: QuantizeColorsControlProps) => {\n    const options = useLegacyQuantizeColors()\n\n    const handleChange = useCallback(value => onChange(value.value), [onChange])\n    const value = options.find(({ value: v }) => v === _value)\n\n    return (\n        <Control\n            id={id}\n            description={property.description}\n            flavors={flavors}\n            currentFlavor={currentFlavor}\n            supportedFlavors={property.flavors}\n        >\n            <PropertyHeader {...property} context={context} />\n            <Select\n                options={options}\n                onChange={handleChange}\n                value={value}\n                isSearchable\n                clearable={false}\n                components={{\n                    SingleValue: ColorSchemeSelectValue,\n                    Option: ColorSchemeSelectOption,\n                }}\n            />\n            <Help>{property.help}</Help>\n        </Control>\n    )\n}\n","import React, { memo, useCallback } from 'react'\nimport get from 'lodash/get'\nimport snakeCase from 'lodash/snakeCase'\nimport { ChartProperty, Flavor } from '../../types'\nimport { ControlContext } from './types'\nimport {\n    ArrayControl,\n    ObjectControl,\n    SwitchControl,\n    SwitchableRangeControl,\n    TextControl,\n    RadioControl,\n    RangeControl,\n    ChoicesControl,\n    NumberArrayControl,\n    PropertyDocumentation,\n} from './generics'\nimport {\n    BoxAnchorControl,\n    MarginControl,\n    LineWidthControl,\n    MotionConfigControl,\n    AngleControl,\n    ValueFormatControl,\n    AnnotationsControl,\n} from './specialized'\nimport {\n    BlendModeControl,\n    BulletColorsControl,\n    ColorInterpolatorsControl,\n    ContinuousColorsControl,\n    ColorPickerControl,\n    OrdinalColorsControl,\n    OpacityControl,\n    InheritedColorControl,\n    QuantizeColorsControl,\n} from './colors'\n\n// add some extra logic to render properties conditionally\n// depending on the current settings.\nexport const shouldRenderProperty = (property: ChartProperty, currentSettings: any) => {\n    if (typeof property.when !== 'function') return true\n    return property.when(currentSettings)\n}\n\ninterface ControlSwitcherProps {\n    groupName: string\n    property: ChartProperty\n    flavors: Flavor[]\n    currentFlavor: Flavor\n    settings: any\n    onChange: any\n    context?: ControlContext\n}\n\nconst ControlSwitcher = memo(\n    ({\n        groupName,\n        flavors = ['svg'],\n        currentFlavor = 'svg',\n        property,\n        settings,\n        onChange,\n        context,\n    }: ControlSwitcherProps) => {\n        // generate a unique identifier for the property\n        const id = `${snakeCase(groupName)}-${property.name}`\n        const value = get(settings, property.name)\n        const controlConfig = 'control' in property ? property.control : undefined\n        const handleChange = useCallback(\n            value => {\n                onChange({\n                    ...settings,\n                    [property.name]: value,\n                })\n            },\n            [onChange, settings, property.name]\n        )\n\n        if (!shouldRenderProperty(property, settings)) {\n            return null\n        }\n\n        let shouldRenderControl = controlConfig !== undefined\n\n        // the property is not available for the current flavor\n        if (Array.isArray(property.flavors) && !property.flavors.includes(currentFlavor)) {\n            shouldRenderControl = false\n        }\n\n        // the control is only available for certain flavors in the UI\n        // while being available for usage, this is typically used for\n        // `width` & `height` properties, which cannot be set for the demos\n        // as we use the responsive version of the charts, but has to be defined\n        // when using the HTTP API.\n        if (\n            Array.isArray(property.enableControlForFlavors) &&\n            !property.enableControlForFlavors.includes(currentFlavor)\n        ) {\n            shouldRenderControl = false\n        }\n\n        if (!shouldRenderControl) {\n            return (\n                <PropertyDocumentation\n                    id={id}\n                    property={property}\n                    flavors={flavors}\n                    currentFlavor={currentFlavor}\n                    context={context}\n                />\n            )\n        }\n\n        // every property which has a control should have a value\n        if (value === undefined) {\n            throw new Error(`no value defined for property: ${property.name}`)\n        }\n\n        switch (controlConfig!.type) {\n            case 'array':\n                return (\n                    <ArrayControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        value={value}\n                        config={controlConfig}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'object':\n                return (\n                    <ObjectControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'choices':\n                return (\n                    <ChoicesControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'radio':\n                return (\n                    <RadioControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'range':\n                return (\n                    <RangeControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'switch':\n                return (\n                    <SwitchControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'switchableRange':\n                return (\n                    <SwitchableRangeControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'text':\n                return (\n                    <TextControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'inheritedColor':\n                return (\n                    <InheritedColorControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'boxAnchor':\n                return (\n                    <BoxAnchorControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'margin':\n                return (\n                    <MarginControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'motionConfig':\n                return (\n                    <MotionConfigControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'opacity':\n                return (\n                    <OpacityControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'lineWidth':\n                return (\n                    <LineWidthControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'numberArray':\n                return (\n                    <NumberArrayControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'quantizeColors':\n                return (\n                    <QuantizeColorsControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'ordinalColors':\n                return (\n                    <OrdinalColorsControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'colorPicker':\n                return (\n                    <ColorPickerControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'angle':\n                return (\n                    <AngleControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'blendMode':\n                return (\n                    <BlendModeControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'valueFormat':\n                return (\n                    <ValueFormatControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'annotations':\n                return (\n                    <AnnotationsControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'continuous_colors':\n                return (\n                    <ContinuousColorsControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'color_interpolators':\n                return (\n                    <ColorInterpolatorsControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            case 'bullet_colors':\n                return (\n                    <BulletColorsControl\n                        id={id}\n                        property={property}\n                        flavors={flavors}\n                        currentFlavor={currentFlavor}\n                        config={controlConfig}\n                        value={value}\n                        context={context}\n                        onChange={handleChange}\n                    />\n                )\n\n            default:\n                throw new Error(\n                    `invalid control type: ${controlConfig!.type} for property: ${property.name}`\n                )\n        }\n    }\n)\n\ninterface ControlsGroupProps {\n    name: string\n    flavors?: Flavor[]\n    currentFlavor?: Flavor\n    controls: ChartProperty[]\n    settings: any\n    onChange: any\n    context?: ControlContext\n}\n\nexport const ControlsGroup = ({\n    name,\n    flavors = ['svg'],\n    currentFlavor = 'svg',\n    controls,\n    settings,\n    onChange,\n    context,\n}: ControlsGroupProps) => (\n    <>\n        {controls.map((control, index) => (\n            <ControlSwitcher\n                key={`${control.name}.${index}`}\n                groupName={name}\n                flavors={flavors}\n                currentFlavor={currentFlavor}\n                property={control}\n                settings={settings}\n                onChange={onChange}\n                context={context}\n            />\n        ))}\n    </>\n)\n","var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to\n * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the snake cased string.\n * @example\n *\n * _.snakeCase('Foo Bar');\n * // => 'foo_bar'\n *\n * _.snakeCase('fooBar');\n * // => 'foo_bar'\n *\n * _.snakeCase('--FOO-BAR--');\n * // => 'foo_bar'\n */\nvar snakeCase = createCompounder(function(result, word, index) {\n  return result + (index ? '_' : '') + word.toLowerCase();\n});\n\nmodule.exports = snakeCase;\n"],"names":["NonMemoizedArrayControl","property","flavors","currentFlavor","value","onChange","config","props","shouldCreate","addLabel","shouldRemove","removeLabel","defaults","getItemTitle","context","useState","activeItems","setActiveItems","append","useCallback","length","remove","index","event","stopPropagation","items","filter","_item","i","change","itemValue","map","v","toggle","includes","subProps","useMemo","prop","name","key","group","newContext","path","Header","help","AddButton","onClick","item","Fragment","SubHeader","isOpened","Title","undefined","RemoveButton","ControlsGroup","controls","settings","ArrayControl","memo","styled","Cell","theme","colors","borderLight","textLight","cardAltBackground","text","accent","cardBackground","ChoicesControl","id","_value","handleUpdate","choices","find","description","supportedFlavors","options","NumberArrayControl","unit","handleChange","updatedArray","Number","target","Value","className","label","min","max","step","itemId","Row","htmlFor","isNumber","Range","type","ObjectControl","isOpenedByDefault","setIsOpened","flag","accentLight","PropertyDocumentation","RadioControl","columns","RangeControl","pick","SwitchRow","RangeRow","SwitchableRangeControl","disabledValue","isSliderEnabled","setIsSliderEnabled","defaultValue","sliderValue","setSliderValue","handleSliderUpdate","e","handleSwitchUpdate","checked","style","color","disabled","SwitchControl","TextControl","size","AngleControl","start","width","height","Circle","cx","cy","r","center","transform","Line","y2","Marker","markerSize","background","border","fixAnnotation","annotation","adjusted","borderRadius","omit","AnnotationsControl","createDefaults","arrayProperty","control","note","required","when","annotations","boxWidth","boxHeight","anchors","Rect","Dot","isSelected","DotOutline","BoxAnchorControl","anchor","cursor","LineWidthControl","y1","x2","x1","strokeWidth","MarginControl","side","setSide","handleFocus","handleBlur","Grid","Label","top","onFocus","onBlur","right","BoxCell","Box","bottom","left","presetOptions","Object","keys","springConfig","presetId","defaultConfig","mass","tension","friction","clamp","precision","velocity","MotionConfigControl","preset","setPreset","customConfig","setCustomConfig","handleTypeChange","newType","handlePresetChange","option","CustomControls","newCustomConfig","typeOptions","alignOptions","signOptions","symbolOptions","Option","c","data","ValueFormatControl","isEditing","setIsEditing","formatSpecifier","parseFormat","format","handleSwitch","enabled","toString","updateFormat","propertyValue","updatedFormatSpecifier","FormatSpecifier","MainControls","gridColumnStart","gridColumnEnd","readOnly","ToggleButton","SubControls","clearable","components","sign","symbol","fill","slice","align","zero","comma","trim","blendModes","mode","BlendModeControl","ColorsControlItem","Container","Name","Swatch","getColorSchemeLabel","scheme","isCategoricalColorScheme","isDivergingColorScheme","isSequentialColorScheme","getColorSchemeType","split","join","getColorSchemeSwatches","colorSchemes","getColorInterpolatorSwatches","interpolator","range","t","colorInterpolators","ColorSchemeSelectValue","ColorSchemeSelectOption","useOrdinalColorSchemes","colorSchemeIds","useColorInterpolators","colorInterpolatorIds","legacyThemesMapping","brown_blueGreen","blue_green","blue_purple","green_blue","orange_red","purpleRed_green","pink_yellowGreen","purple_blue","purple_blue_green","purple_orange","purple_red","red_blue","red_grey","red_purple","red_yellow_blue","red_yellow_green","yellow_green","yellow_green_blue","yellow_orange_brown","yellow_orange_red","blues","greens","greys","nivo","oranges","purples","reds","spectral","BulletColorsControl","schemes","interpolators","mappedInterpolators","isSearchable","SingleValue","ColorInterpolatorsControl","ColorPickerControl","scaleTypeChoices","helpByType","sequential","diverging","quantize","ContinuousColorsControl","divergeAt","divergingColorScaleDefaults","lastDivergeAtValue","setLastDivergeAtValue","steps","quantizeColorScaleDefaults","lastStepsValue","setLastStepsValue","objectProperty","fixedValue","modifierTypes","InheritedColorModifierControl","modifier","themeProperties","defaultInheritableProperties","InheritedColorControl","inheritableProperties","defaultCustomColor","defaultThemeProperty","defaultFrom","isString","customColor","setCustomColor","isPlainObject","themeProp","setThemeProp","from","fromProp","setFromProp","modifiers","setModifiers","subControl","handleThemePropertyChange","handleFromPropertyChange","handleModifierChange","newModifiers","handleCustomColorChange","CustomColor","SubLabel","propertyOptions","NoModifiers","TypeSelector","TypeSelectorItem","isActive","OpacityControl","useTheme","patternUnits","x","y","fillOpacity","OrdinalColorsControl","selectedOption","o","QuantizeColorsControl","allSchemes","filtered","forEach","legacyId","push","ControlSwitcher","groupName","snakeCase","get","controlConfig","currentSettings","shouldRenderProperty","shouldRenderControl","Array","isArray","enableControlForFlavors","Error","createCompounder","result","word","toLowerCase","module","exports"],"sourceRoot":""}