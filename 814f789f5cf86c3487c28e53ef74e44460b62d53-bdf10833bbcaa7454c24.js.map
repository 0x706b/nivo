{"version":3,"file":"814f789f5cf86c3487c28e53ef74e44460b62d53-bdf10833bbcaa7454c24.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/ascending.js","webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/bisector.js","webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/bisect.js","webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/array.js","webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/ticks.js","webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/range.js","webpack://nivo-website/../node_modules/d3-chord/src/math.js","webpack://nivo-website/../node_modules/d3-chord/src/chord.js","webpack://nivo-website/../node_modules/d3-chord/src/array.js","webpack://nivo-website/../node_modules/d3-chord/src/constant.js","webpack://nivo-website/../node_modules/d3-chord/src/ribbon.js","webpack://nivo-website/../src/ChordArcTooltip.js","webpack://nivo-website/../src/ChordRibbonTooltip.js","webpack://nivo-website/../src/props.js","webpack://nivo-website/../src/compute.js","webpack://nivo-website/../src/hooks.js","webpack://nivo-website/../src/ChordRibbon.js","webpack://nivo-website/../src/ChordRibbons.js","webpack://nivo-website/../src/ChordArc.js","webpack://nivo-website/../src/ChordArcs.js","webpack://nivo-website/../src/ChordLabels.js","webpack://nivo-website/../src/Chord.js","webpack://nivo-website/../src/ChordCanvas.js","webpack://nivo-website/../src/ResponsiveChord.js","webpack://nivo-website/../src/ResponsiveChordCanvas.js","webpack://nivo-website/../node_modules/lodash/mapValues.js"],"sourcesContent":["export default function (a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}","import ascending from \"./ascending\";\nexport default function (compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function left(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      }\n\n      return lo;\n    },\n    right: function right(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;\n      }\n\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function (d, x) {\n    return ascending(f(d), x);\n  };\n}","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;","var array = Array.prototype;\nexport var slice = array.slice;\nexport var map = array.map;","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\nexport default function (start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n\n    while (++i < n) {\n      ticks[i] = (start + i) * step;\n    }\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n\n    while (++i < n) {\n      ticks[i] = (start - i) / step;\n    }\n  }\n\n  if (reverse) ticks.reverse();\n  return ticks;\n}\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}","export default function (start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}","export var cos = Math.cos;\nexport var sin = Math.sin;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var tau = pi * 2;\nexport var max = Math.max;","import { range } from \"d3-array\";\nimport { max, tau } from \"./math\";\n\nfunction compareValue(compare) {\n  return function (a, b) {\n    return compare(a.source.value + a.target.value, b.source.value + b.target.value);\n  };\n}\n\nexport default function () {\n  var padAngle = 0,\n      sortGroups = null,\n      sortSubgroups = null,\n      sortChords = null;\n\n  function chord(matrix) {\n    var n = matrix.length,\n        groupSums = [],\n        groupIndex = range(n),\n        subgroupIndex = [],\n        chords = [],\n        groups = chords.groups = new Array(n),\n        subgroups = new Array(n * n),\n        k,\n        x,\n        x0,\n        dx,\n        i,\n        j; // Compute the sum.\n\n    k = 0, i = -1;\n\n    while (++i < n) {\n      x = 0, j = -1;\n\n      while (++j < n) {\n        x += matrix[i][j];\n      }\n\n      groupSums.push(x);\n      subgroupIndex.push(range(n));\n      k += x;\n    } // Sort groups…\n\n\n    if (sortGroups) groupIndex.sort(function (a, b) {\n      return sortGroups(groupSums[a], groupSums[b]);\n    }); // Sort subgroups…\n\n    if (sortSubgroups) subgroupIndex.forEach(function (d, i) {\n      d.sort(function (a, b) {\n        return sortSubgroups(matrix[i][a], matrix[i][b]);\n      });\n    }); // Convert the sum to scaling factor for [0, 2pi].\n    // TODO Allow start and end angle to be specified?\n    // TODO Allow padding to be specified as percentage?\n\n    k = max(0, tau - padAngle * n) / k;\n    dx = k ? padAngle : tau / n; // Compute the start and end angle for each group and subgroup.\n    // Note: Opera has a bug reordering object literal properties!\n\n    x = 0, i = -1;\n\n    while (++i < n) {\n      x0 = x, j = -1;\n\n      while (++j < n) {\n        var di = groupIndex[i],\n            dj = subgroupIndex[di][j],\n            v = matrix[di][dj],\n            a0 = x,\n            a1 = x += v * k;\n        subgroups[dj * n + di] = {\n          index: di,\n          subindex: dj,\n          startAngle: a0,\n          endAngle: a1,\n          value: v\n        };\n      }\n\n      groups[di] = {\n        index: di,\n        startAngle: x0,\n        endAngle: x,\n        value: groupSums[di]\n      };\n      x += dx;\n    } // Generate chords for each (non-empty) subgroup-subgroup link.\n\n\n    i = -1;\n\n    while (++i < n) {\n      j = i - 1;\n\n      while (++j < n) {\n        var source = subgroups[j * n + i],\n            target = subgroups[i * n + j];\n\n        if (source.value || target.value) {\n          chords.push(source.value < target.value ? {\n            source: target,\n            target: source\n          } : {\n            source: source,\n            target: target\n          });\n        }\n      }\n    }\n\n    return sortChords ? chords.sort(sortChords) : chords;\n  }\n\n  chord.padAngle = function (_) {\n    return arguments.length ? (padAngle = max(0, _), chord) : padAngle;\n  };\n\n  chord.sortGroups = function (_) {\n    return arguments.length ? (sortGroups = _, chord) : sortGroups;\n  };\n\n  chord.sortSubgroups = function (_) {\n    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\n  };\n\n  chord.sortChords = function (_) {\n    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\n  };\n\n  return chord;\n}","export var slice = Array.prototype.slice;","export default function (x) {\n  return function () {\n    return x;\n  };\n}","import { slice } from \"./array\";\nimport constant from \"./constant\";\nimport { cos, halfPi, sin } from \"./math\";\nimport { path } from \"d3-path\";\n\nfunction defaultSource(d) {\n  return d.source;\n}\n\nfunction defaultTarget(d) {\n  return d.target;\n}\n\nfunction defaultRadius(d) {\n  return d.radius;\n}\n\nfunction defaultStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction defaultEndAngle(d) {\n  return d.endAngle;\n}\n\nexport default function () {\n  var source = defaultSource,\n      target = defaultTarget,\n      radius = defaultRadius,\n      startAngle = defaultStartAngle,\n      endAngle = defaultEndAngle,\n      context = null;\n\n  function ribbon() {\n    var buffer,\n        argv = slice.call(arguments),\n        s = source.apply(this, argv),\n        t = target.apply(this, argv),\n        sr = +radius.apply(this, (argv[0] = s, argv)),\n        sa0 = startAngle.apply(this, argv) - halfPi,\n        sa1 = endAngle.apply(this, argv) - halfPi,\n        sx0 = sr * cos(sa0),\n        sy0 = sr * sin(sa0),\n        tr = +radius.apply(this, (argv[0] = t, argv)),\n        ta0 = startAngle.apply(this, argv) - halfPi,\n        ta1 = endAngle.apply(this, argv) - halfPi;\n    if (!context) context = buffer = path();\n    context.moveTo(sx0, sy0);\n    context.arc(0, 0, sr, sa0, sa1);\n\n    if (sa0 !== ta0 || sa1 !== ta1) {\n      // TODO sr !== tr?\n      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));\n      context.arc(0, 0, tr, ta0, ta1);\n    }\n\n    context.quadraticCurveTo(0, 0, sx0, sy0);\n    context.closePath();\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  ribbon.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), ribbon) : radius;\n  };\n\n  ribbon.startAngle = function (_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : startAngle;\n  };\n\n  ribbon.endAngle = function (_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : endAngle;\n  };\n\n  ribbon.source = function (_) {\n    return arguments.length ? (source = _, ribbon) : source;\n  };\n\n  ribbon.target = function (_) {\n    return arguments.length ? (target = _, ribbon) : target;\n  };\n\n  ribbon.context = function (_) {\n    return arguments.length ? (context = _ == null ? null : _, ribbon) : context;\n  };\n\n  return ribbon;\n}","import { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst ChordArcTooltip = memo(({ arc }) => {\n    return (\n        <BasicTooltip\n            id={arc.label}\n            value={arc.formattedValue}\n            color={arc.color}\n            enableChip={true}\n        />\n    )\n})\n\nChordArcTooltip.displayName = 'ChordArcTooltip'\nChordArcTooltip.propTypes = {\n    arc: PropTypes.object.isRequired,\n}\n\nexport default ChordArcTooltip\n","import { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@nivo/core'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\n\nconst ChordRibbonTooltip = memo(({ ribbon }) => {\n    const theme = useTheme()\n\n    return (\n        <TableTooltip\n            theme={theme}\n            rows={[\n                [\n                    <Chip key=\"chip\" color={ribbon.source.color} />,\n                    <strong key=\"id\">{ribbon.source.label}</strong>,\n                    ribbon.source.formattedValue,\n                ],\n                [\n                    <Chip key=\"chip\" color={ribbon.target.color} />,\n                    <strong key=\"id\">{ribbon.target.label}</strong>,\n                    ribbon.target.formattedValue,\n                ],\n            ]}\n        />\n    )\n})\n\nChordRibbonTooltip.displayName = 'ChordRibbonTooltip'\nChordRibbonTooltip.propTypes = {\n    ribbon: PropTypes.object.isRequired,\n}\n\nexport default ChordRibbonTooltip\n","import PropTypes from 'prop-types'\nimport { blendModePropType, motionPropTypes } from '@nivo/core'\nimport { ordinalColorsPropType, inheritedColorPropType } from '@nivo/colors'\nimport { LegendPropShape } from '@nivo/legends'\nimport ChordArcTooltip from './ChordArcTooltip'\nimport ChordRibbonTooltip from './ChordRibbonTooltip'\n\nconst commonPropTypes = {\n    keys: PropTypes.arrayOf(PropTypes.string).isRequired,\n    matrix: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n    valueFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n    padAngle: PropTypes.number.isRequired,\n    innerRadiusRatio: PropTypes.number.isRequired,\n    innerRadiusOffset: PropTypes.number.isRequired,\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf(['ribbons', 'arcs', 'labels', 'legends']),\n            PropTypes.func,\n        ])\n    ).isRequired,\n\n    arcOpacity: PropTypes.number.isRequired,\n    arcHoverOpacity: PropTypes.number.isRequired,\n    arcHoverOthersOpacity: PropTypes.number.isRequired,\n    arcBorderWidth: PropTypes.number.isRequired,\n    arcBorderColor: inheritedColorPropType.isRequired,\n    onArcMouseEnter: PropTypes.func,\n    onArcMouseMove: PropTypes.func,\n    onArcMouseLeave: PropTypes.func,\n    onArcClick: PropTypes.func,\n    arcTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    ribbonOpacity: PropTypes.number.isRequired,\n    ribbonHoverOpacity: PropTypes.number.isRequired,\n    ribbonHoverOthersOpacity: PropTypes.number.isRequired,\n    ribbonBorderWidth: PropTypes.number.isRequired,\n    ribbonBorderColor: inheritedColorPropType.isRequired,\n    ribbonBlendMode: blendModePropType.isRequired,\n    onRibbonMouseEnter: PropTypes.func,\n    onRibbonMouseMove: PropTypes.func,\n    onRibbonMouseLeave: PropTypes.func,\n    onRibbonClick: PropTypes.func,\n    ribbonTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelOffset: PropTypes.number.isRequired,\n    labelRotation: PropTypes.number.isRequired,\n    labelTextColor: inheritedColorPropType.isRequired,\n\n    colors: ordinalColorsPropType.isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n}\n\nexport const ChordPropTypes = {\n    ...commonPropTypes,\n    ...motionPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const ChordCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    padAngle: 0,\n    innerRadiusRatio: 0.9,\n    innerRadiusOffset: 0,\n\n    layers: ['ribbons', 'arcs', 'labels', 'legends'],\n\n    arcOpacity: 1,\n    arcHoverOpacity: 1,\n    arcHoverOthersOpacity: 0.15,\n    arcBorderWidth: 1,\n    arcBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n    arcTooltip: ChordArcTooltip,\n\n    ribbonOpacity: 0.5,\n    ribbonHoverOpacity: 0.85,\n    ribbonHoverOthersOpacity: 0.15,\n    ribbonBorderWidth: 1,\n    ribbonBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n    ribbonBlendMode: 'normal',\n    ribbonTooltip: ChordRibbonTooltip,\n\n    enableLabel: true,\n    label: 'id',\n    labelOffset: 12,\n    labelRotation: 0,\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    colors: { scheme: 'nivo' },\n\n    legends: [],\n\n    isInteractive: true,\n}\n\nexport const ChordDefaultProps = {\n    ...commonDefaultProps,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 15,\n    role: 'img',\n}\n\nexport const ChordCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import { arc as d3Arc } from 'd3-shape'\nimport { chord as d3Chord, ribbon as d3Ribbon } from 'd3-chord'\n\nexport const computeChordLayout = ({ padAngle }) => d3Chord().padAngle(padAngle)\n\nexport const computeChordGenerators = ({ width, height, innerRadiusRatio, innerRadiusOffset }) => {\n    const center = [width / 2, height / 2]\n    const radius = Math.min(width, height) / 2\n    const innerRadius = radius * innerRadiusRatio\n    const ribbonRadius = radius * (innerRadiusRatio - innerRadiusOffset)\n\n    const arcGenerator = d3Arc().outerRadius(radius).innerRadius(innerRadius)\n\n    const ribbonGenerator = d3Ribbon().radius(ribbonRadius)\n\n    return { center, radius, innerRadius, arcGenerator, ribbonGenerator }\n}\n\nexport const computeChordArcsAndRibbons = ({\n    chord,\n    getColor,\n    keys,\n    matrix,\n    getLabel,\n    formatValue,\n}) => {\n    const ribbons = chord(matrix)\n\n    const arcs = ribbons.groups.map(arc => {\n        arc.id = keys[arc.index]\n        arc.color = getColor(arc)\n        arc.formattedValue = formatValue(arc.value)\n        arc.label = getLabel(arc)\n\n        return arc\n    })\n\n    ribbons.forEach(ribbon => {\n        ribbon.source.id = keys[ribbon.source.index]\n        ribbon.source.color = getColor(ribbon.source)\n        ribbon.source.formattedValue = formatValue(ribbon.source.value)\n        ribbon.source.label = getLabel(ribbon.source)\n\n        ribbon.target.id = keys[ribbon.target.index]\n        ribbon.target.color = getColor(ribbon.target)\n        ribbon.target.formattedValue = formatValue(ribbon.target.value)\n        ribbon.target.label = getLabel(ribbon.target)\n\n        // ensure id remains the same even if source/target are reversed\n        ribbon.id = [ribbon.source.id, ribbon.target.id].sort().join('.')\n    })\n\n    return { arcs, ribbons }\n}\n","import { useMemo, useState } from 'react'\nimport { useValueFormatter, getLabelGenerator } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { computeChordLayout, computeChordGenerators, computeChordArcsAndRibbons } from './compute'\n\nexport const useChordLayout = ({ padAngle }) =>\n    useMemo(() => computeChordLayout({ padAngle }), [padAngle])\n\nexport const useChordGenerators = ({ width, height, innerRadiusRatio, innerRadiusOffset }) =>\n    useMemo(\n        () =>\n            computeChordGenerators({\n                width,\n                height,\n                innerRadiusRatio,\n                innerRadiusOffset,\n            }),\n        [width, height, innerRadiusRatio, innerRadiusOffset]\n    )\n\nexport const useChordArcsAndRibbons = ({ chord, getColor, keys, matrix, getLabel, formatValue }) =>\n    useMemo(\n        () =>\n            computeChordArcsAndRibbons({\n                chord,\n                getColor,\n                keys,\n                matrix,\n                getLabel,\n                formatValue,\n            }),\n        [chord, getColor, keys, matrix, getLabel, formatValue]\n    )\n\nexport const useChord = ({\n    keys,\n    matrix,\n    label,\n    valueFormat,\n    width,\n    height,\n    innerRadiusRatio,\n    innerRadiusOffset,\n    padAngle,\n    colors,\n}) => {\n    const chord = useChordLayout({ padAngle })\n    const { center, radius, innerRadius, arcGenerator, ribbonGenerator } = useChordGenerators({\n        width,\n        height,\n        innerRadiusRatio,\n        innerRadiusOffset,\n    })\n    const getLabel = useMemo(() => getLabelGenerator(label), [label])\n    const formatValue = useValueFormatter(valueFormat)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const { arcs, ribbons } = useChordArcsAndRibbons({\n        chord,\n        getColor,\n        keys,\n        matrix,\n        getLabel,\n        formatValue,\n    })\n\n    return {\n        center,\n        chord,\n        radius,\n        innerRadius,\n        arcGenerator,\n        ribbonGenerator,\n        getColor,\n        arcs,\n        ribbons,\n    }\n}\n\nexport const useChordSelection = ({\n    arcs,\n    arcOpacity,\n    arcHoverOpacity,\n    arcHoverOthersOpacity,\n    ribbons,\n    ribbonOpacity,\n    ribbonHoverOpacity,\n    ribbonHoverOthersOpacity,\n}) => {\n    const [currentArc, setCurrentArc] = useState(null)\n    const [currentRibbon, setCurrentRibbon] = useState(null)\n\n    const selection = useMemo(() => {\n        const selectedArcIds = []\n        const selectedRibbonIds = []\n\n        if (currentArc) {\n            selectedArcIds.push(currentArc.id)\n            ribbons\n                .filter(\n                    ribbon =>\n                        ribbon.source.id === currentArc.id || ribbon.target.id === currentArc.id\n                )\n                .forEach(ribbon => {\n                    selectedRibbonIds.push(ribbon.id)\n                })\n        }\n\n        if (currentRibbon) {\n            selectedArcIds.push(currentRibbon.source.id)\n            selectedArcIds.push(currentRibbon.target.id)\n            selectedRibbonIds.push(currentRibbon.id)\n        }\n\n        return { selectedArcIds, selectedRibbonIds }\n    }, [currentArc, currentRibbon, arcs, ribbons])\n\n    const hasSelection =\n        selection.selectedArcIds.length > 1 || selection.selectedRibbonIds.length > 0\n\n    const getArcOpacity = useMemo(\n        () => arc => {\n            if (!hasSelection) return arcOpacity\n            return selection.selectedArcIds.includes(arc.id)\n                ? arcHoverOpacity\n                : arcHoverOthersOpacity\n        },\n        [selection.selectedArcIds, arcOpacity, arcHoverOpacity, arcHoverOthersOpacity]\n    )\n    const getRibbonOpacity = useMemo(\n        () => ribbon => {\n            if (!hasSelection) return ribbonOpacity\n            return selection.selectedRibbonIds.includes(ribbon.id)\n                ? ribbonHoverOpacity\n                : ribbonHoverOthersOpacity\n        },\n        [selection.selectedRibbonIds, ribbonOpacity, ribbonHoverOpacity, ribbonHoverOthersOpacity]\n    )\n\n    return {\n        currentArc,\n        setCurrentArc,\n        currentRibbon,\n        setCurrentRibbon,\n        hasSelection,\n        ...selection,\n        getArcOpacity,\n        getRibbonOpacity,\n    }\n}\n\nexport const useChordLayerContext = ({\n    center,\n    radius,\n    arcs,\n    arcGenerator,\n    ribbons,\n    ribbonGenerator,\n}) =>\n    useMemo(\n        () => ({\n            center,\n            radius,\n            arcs,\n            arcGenerator,\n            ribbons,\n            ribbonGenerator,\n        }),\n        [center, radius, arcs, arcGenerator, ribbons, ribbonGenerator]\n    )\n","import { createElement, memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { blendModePropType } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst ChordRibbon = memo(\n    ({\n        ribbon,\n        ribbonGenerator,\n        sourceStartAngle,\n        sourceEndAngle,\n        targetStartAngle,\n        targetEndAngle,\n        color,\n        opacity,\n        borderWidth,\n        getBorderColor,\n        blendMode,\n        isInteractive,\n        setCurrent,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useMemo(() => {\n            if (!isInteractive) return undefined\n            return event => {\n                setCurrent(ribbon)\n                showTooltipFromEvent(createElement(tooltip, { ribbon }), event)\n                onMouseEnter && onMouseEnter(ribbon, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, ribbon, onMouseEnter])\n        const handleMouseMove = useMemo(() => {\n            if (!isInteractive) return undefined\n            return event => {\n                showTooltipFromEvent(createElement(tooltip, { ribbon }), event)\n                onMouseMove && onMouseMove(ribbon, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, ribbon, onMouseMove])\n        const handleMouseLeave = useMemo(() => {\n            if (!isInteractive) return undefined\n            return event => {\n                setCurrent(null)\n                hideTooltip()\n                onMouseLeave && onMouseLeave(ribbon, event)\n            }\n        }, [isInteractive, hideTooltip, ribbon, onMouseLeave])\n        const handleClick = useMemo(() => {\n            if (!isInteractive || !onClick) return undefined\n            return event => onClick(ribbon, event)\n        }, [isInteractive, ribbon, onClick])\n\n        return (\n            <path\n                d={ribbonGenerator({\n                    source: {\n                        startAngle: sourceStartAngle,\n                        endAngle: sourceEndAngle,\n                    },\n                    target: {\n                        startAngle: targetStartAngle,\n                        endAngle: targetEndAngle,\n                    },\n                })}\n                fill={color}\n                fillOpacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={getBorderColor({ ...ribbon, color })}\n                strokeOpacity={opacity}\n                style={{ mixBlendMode: blendMode }}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n\nChordRibbon.displayName = 'ChordRibbon'\nChordRibbon.propTypes = {\n    ribbon: PropTypes.object.isRequired,\n    ribbonGenerator: PropTypes.func.isRequired,\n    sourceStartAngle: PropTypes.number.isRequired,\n    sourceEndAngle: PropTypes.number.isRequired,\n    targetStartAngle: PropTypes.number.isRequired,\n    targetEndAngle: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    blendMode: blendModePropType.isRequired,\n    opacity: PropTypes.number.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    getBorderColor: PropTypes.func.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n}\n\nexport default ChordRibbon\n","import { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport mapValues from 'lodash/mapValues'\nimport { TransitionMotion, spring } from 'react-motion'\nimport { blendModePropType, midAngle, useMotionConfig } from '@nivo/core'\nimport { interpolateColor, getInterpolatedColor } from '@nivo/colors'\nimport ChordRibbon from './ChordRibbon'\n\n/**\n * Used to get ribbon angles, instead of using source and target arcs,\n * we sort arcs by value to have smooth transitions, otherwise,\n * if source|target arc value becomes greater than the other,\n * the ribbon will be reversed.\n *\n * @param {Object}  source\n * @param {Object}  target\n * @param {boolean} useMiddleAngle\n * @param {Object}  [springConfig]\n * @return {Object}\n */\nconst getRibbonAngles = ({ source, target }, useMiddleAngle, springConfig) => {\n    let firstArc\n    let secondArc\n    if (source.startAngle < target.startAngle) {\n        firstArc = source\n        secondArc = target\n    } else {\n        firstArc = target\n        secondArc = source\n    }\n\n    let angles\n    if (useMiddleAngle === true) {\n        const firstMiddleAngle = midAngle(firstArc)\n        const secondMiddleAngle = midAngle(secondArc)\n\n        angles = {\n            sourceStartAngle: firstMiddleAngle,\n            sourceEndAngle: firstMiddleAngle,\n            targetStartAngle: secondMiddleAngle,\n            targetEndAngle: secondMiddleAngle,\n        }\n    } else {\n        angles = {\n            sourceStartAngle: firstArc.startAngle,\n            sourceEndAngle: firstArc.endAngle,\n            targetStartAngle: secondArc.startAngle,\n            targetEndAngle: secondArc.endAngle,\n        }\n    }\n\n    if (!springConfig) return angles\n\n    return mapValues(angles, angle => spring(angle, springConfig))\n}\n\nconst ribbonWillEnter = ({ data: ribbon }) => ({\n    ...getRibbonAngles(ribbon, true),\n    opacity: 0,\n    ...interpolateColor(ribbon.source.color),\n})\n\nconst ribbonWillLeave =\n    springConfig =>\n    ({ data: ribbon }) => ({\n        ...getRibbonAngles(ribbon, true, springConfig),\n        opacity: 0,\n        ...interpolateColor(ribbon.source.color, springConfig),\n    })\n\nconst ChordRibbons = memo(\n    ({\n        ribbons,\n        ribbonGenerator,\n        borderWidth,\n        getBorderColor,\n        getOpacity,\n        blendMode,\n        isInteractive,\n        setCurrent,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }) => {\n        const { animate, springConfig: _springConfig } = useMotionConfig()\n\n        if (animate !== true) {\n            return (\n                <g>\n                    {ribbons.map(ribbon => {\n                        return (\n                            <ChordRibbon\n                                key={ribbon.id}\n                                ribbon={ribbon}\n                                ribbonGenerator={ribbonGenerator}\n                                sourceStartAngle={ribbon.source.startAngle}\n                                sourceEndAngle={ribbon.source.endAngle}\n                                targetStartAngle={ribbon.target.startAngle}\n                                targetEndAngle={ribbon.target.endAngle}\n                                color={ribbon.source.color}\n                                blendMode={blendMode}\n                                opacity={getOpacity(ribbon)}\n                                borderWidth={borderWidth}\n                                getBorderColor={getBorderColor}\n                                isInteractive={isInteractive}\n                                setCurrent={setCurrent}\n                                onMouseEnter={onMouseEnter}\n                                onMouseMove={onMouseMove}\n                                onMouseLeave={onMouseLeave}\n                                onClick={onClick}\n                                tooltip={tooltip}\n                            />\n                        )\n                    })}\n                </g>\n            )\n        }\n\n        const springConfig = {\n            ..._springConfig,\n            precision: 0.001,\n        }\n\n        return (\n            <TransitionMotion\n                willEnter={ribbonWillEnter}\n                willLeave={ribbonWillLeave(springConfig)}\n                styles={ribbons.map(ribbon => {\n                    return {\n                        key: ribbon.id,\n                        data: ribbon,\n                        style: {\n                            ...getRibbonAngles(ribbon, false, springConfig),\n                            opacity: spring(getOpacity(ribbon), springConfig),\n                            ...interpolateColor(ribbon.source.color, springConfig),\n                        },\n                    }\n                })}\n            >\n                {interpolatedStyles => (\n                    <>\n                        {interpolatedStyles.map(({ key, style, data: ribbon }) => {\n                            const color = getInterpolatedColor(style)\n\n                            return (\n                                <ChordRibbon\n                                    key={key}\n                                    ribbon={ribbon}\n                                    ribbonGenerator={ribbonGenerator}\n                                    sourceStartAngle={style.sourceStartAngle}\n                                    sourceEndAngle={Math.max(\n                                        style.sourceEndAngle,\n                                        style.sourceStartAngle\n                                    )}\n                                    targetStartAngle={style.targetStartAngle}\n                                    targetEndAngle={Math.max(\n                                        style.targetEndAngle,\n                                        style.targetStartAngle\n                                    )}\n                                    color={color}\n                                    blendMode={blendMode}\n                                    opacity={style.opacity}\n                                    borderWidth={borderWidth}\n                                    getBorderColor={getBorderColor}\n                                    isInteractive={isInteractive}\n                                    setCurrent={setCurrent}\n                                    onMouseEnter={onMouseEnter}\n                                    onMouseMove={onMouseMove}\n                                    onMouseLeave={onMouseLeave}\n                                    onClick={onClick}\n                                    tooltip={tooltip}\n                                />\n                            )\n                        })}\n                    </>\n                )}\n            </TransitionMotion>\n        )\n    }\n)\n\nChordRibbons.displayName = 'ChordRibbons'\nChordRibbons.propTypes = {\n    ribbons: PropTypes.array.isRequired,\n    ribbonGenerator: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    getBorderColor: PropTypes.func.isRequired,\n    getOpacity: PropTypes.func.isRequired,\n    blendMode: blendModePropType.isRequired,\n    isInteractive: PropTypes.bool.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default ChordRibbons\n","import { createElement, memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst ChordArc = memo(\n    ({\n        arc,\n        startAngle,\n        endAngle,\n        borderWidth,\n        getBorderColor,\n        opacity,\n        arcGenerator,\n        setCurrent,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useMemo(() => {\n            if (!isInteractive) return undefined\n            return event => {\n                setCurrent(arc)\n                showTooltipFromEvent(createElement(tooltip, { arc }), event)\n                onMouseEnter && onMouseEnter(arc, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, arc, onMouseEnter])\n        const handleMouseMove = useMemo(() => {\n            if (!isInteractive) return undefined\n            return event => {\n                showTooltipFromEvent(createElement(tooltip, { arc }), event)\n                onMouseMove && onMouseMove(arc, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, arc, onMouseMove])\n        const handleMouseLeave = useMemo(() => {\n            if (!isInteractive) return undefined\n            return event => {\n                setCurrent(null)\n                hideTooltip()\n                onMouseLeave && onMouseLeave(arc, event)\n            }\n        }, [isInteractive, hideTooltip, arc, onMouseLeave])\n        const handleClick = useMemo(() => {\n            if (!isInteractive || !onClick) return undefined\n            return event => onClick(arc, event)\n        }, [isInteractive, arc, onClick])\n\n        return (\n            <path\n                d={arcGenerator({ startAngle, endAngle })}\n                fill={arc.color}\n                fillOpacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={getBorderColor(arc)}\n                strokeOpacity={opacity}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n\nChordArc.displayName = 'ChordArc'\nChordArc.propTypes = {\n    arc: PropTypes.object.isRequired,\n    startAngle: PropTypes.number.isRequired,\n    endAngle: PropTypes.number.isRequired,\n    arcGenerator: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    getBorderColor: PropTypes.func.isRequired,\n    opacity: PropTypes.number.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n}\n\nexport default ChordArc\n","import { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { TransitionMotion, spring } from 'react-motion'\nimport { interpolateColor, getInterpolatedColor } from '@nivo/colors'\nimport { useMotionConfig } from '@nivo/core'\nimport ChordArc from './ChordArc'\n\nconst ChordArcs = memo(\n    ({\n        arcs,\n        borderWidth,\n        getBorderColor,\n        getOpacity,\n        arcGenerator,\n        setCurrent,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }) => {\n        const { animate, springConfig: _springConfig } = useMotionConfig()\n\n        if (animate !== true) {\n            return arcs.map(arc => {\n                return (\n                    <ChordArc\n                        key={arc.id}\n                        arc={arc}\n                        arcGenerator={arcGenerator}\n                        startAngle={arc.startAngle}\n                        endAngle={arc.endAngle}\n                        color={arc.color}\n                        opacity={getOpacity(arc)}\n                        borderWidth={borderWidth}\n                        getBorderColor={getBorderColor}\n                        getOpacity={getOpacity}\n                        isInteractive={isInteractive}\n                        setCurrent={setCurrent}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                )\n            })\n        }\n\n        const springConfig = {\n            ..._springConfig,\n            precision: 0.001,\n        }\n\n        return (\n            <TransitionMotion\n                styles={arcs.map(arc => {\n                    return {\n                        key: arc.id,\n                        data: arc,\n                        style: {\n                            startAngle: spring(arc.startAngle, springConfig),\n                            endAngle: spring(arc.endAngle, springConfig),\n                            opacity: spring(getOpacity(arc), springConfig),\n                            ...interpolateColor(arc.color, springConfig),\n                        },\n                    }\n                })}\n            >\n                {interpolatedStyles => (\n                    <>\n                        {interpolatedStyles.map(({ key, style, data: arc }) => {\n                            const color = getInterpolatedColor(style)\n\n                            return (\n                                <ChordArc\n                                    key={key}\n                                    arc={arc}\n                                    arcGenerator={arcGenerator}\n                                    startAngle={style.startAngle}\n                                    endAngle={style.endAngle}\n                                    color={color}\n                                    opacity={style.opacity}\n                                    borderWidth={borderWidth}\n                                    getBorderColor={getBorderColor}\n                                    getOpacity={getOpacity}\n                                    isInteractive={isInteractive}\n                                    setCurrent={setCurrent}\n                                    onMouseEnter={onMouseEnter}\n                                    onMouseMove={onMouseMove}\n                                    onMouseLeave={onMouseLeave}\n                                    onClick={onClick}\n                                    tooltip={tooltip}\n                                />\n                            )\n                        })}\n                    </>\n                )}\n            </TransitionMotion>\n        )\n    }\n)\n\nChordArcs.displayName = 'ChordArcs'\nChordArcs.propTypes = {\n    arcs: PropTypes.array.isRequired,\n    arcGenerator: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    getBorderColor: PropTypes.func.isRequired,\n    getOpacity: PropTypes.func.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n}\n\nexport default ChordArcs\n","import PropTypes from 'prop-types'\nimport { TransitionMotion, spring } from 'react-motion'\nimport { midAngle, getPolarLabelProps, useTheme } from '@nivo/core'\nimport { useMotionConfig } from '@nivo/core'\n\nconst ChordLabels = ({ arcs, radius, rotation, getColor }) => {\n    const theme = useTheme()\n    const { animate, springConfig } = useMotionConfig()\n\n    if (animate !== true) {\n        return (\n            <>\n                {arcs.map(arc => {\n                    const color = getColor(arc, theme)\n                    const angle = midAngle(arc)\n                    const textProps = getPolarLabelProps(radius, angle, rotation)\n\n                    return (\n                        <text\n                            key={arc.id}\n                            transform={`translate(${textProps.x}, ${textProps.y}) rotate(${textProps.rotate})`}\n                            style={{\n                                ...theme.labels.text,\n                                pointerEvents: 'none',\n                                fill: color,\n                            }}\n                            textAnchor={textProps.align}\n                            dominantBaseline={textProps.baseline}\n                        >\n                            {arc.label}\n                        </text>\n                    )\n                })}\n            </>\n        )\n    }\n\n    return (\n        <TransitionMotion\n            styles={arcs.map(arc => {\n                const angle = midAngle(arc)\n\n                return {\n                    key: arc.id,\n                    data: arc,\n                    style: {\n                        angle: spring(angle, springConfig),\n                    },\n                }\n            })}\n        >\n            {interpolatedStyles => (\n                <>\n                    {interpolatedStyles.map(({ key, style, data: arc }) => {\n                        const color = getColor(arc, theme)\n                        const textProps = getPolarLabelProps(radius, style.angle, rotation)\n\n                        return (\n                            <text\n                                key={key}\n                                transform={`translate(${textProps.x}, ${textProps.y}) rotate(${textProps.rotate})`}\n                                style={{\n                                    ...theme.labels.text,\n                                    pointerEvents: 'none',\n                                    fill: color,\n                                }}\n                                textAnchor={textProps.align}\n                                dominantBaseline={textProps.baseline}\n                            >\n                                {arc.label}\n                            </text>\n                        )\n                    })}\n                </>\n            )}\n        </TransitionMotion>\n    )\n}\n\nChordLabels.propTypes = {\n    arcs: PropTypes.array.isRequired,\n    radius: PropTypes.number.isRequired,\n    rotation: PropTypes.number.isRequired,\n    getColor: PropTypes.func.isRequired,\n}\n\nexport default ChordLabels\n","import { Fragment } from 'react'\nimport { withContainer, SvgWrapper, useDimensions, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { ChordPropTypes, ChordDefaultProps } from './props'\nimport { useChord, useChordSelection, useChordLayerContext } from './hooks'\nimport ChordRibbons from './ChordRibbons'\nimport ChordArcs from './ChordArcs'\nimport ChordLabels from './ChordLabels'\n\nconst Chord = ({\n    margin: partialMargin,\n    width,\n    height,\n\n    keys,\n    matrix,\n    label,\n    valueFormat,\n    innerRadiusRatio,\n    innerRadiusOffset,\n    padAngle,\n\n    layers,\n\n    colors,\n\n    arcBorderWidth,\n    arcBorderColor,\n    arcOpacity,\n    arcHoverOpacity,\n    arcHoverOthersOpacity,\n    arcTooltip,\n\n    ribbonBorderWidth,\n    ribbonBorderColor,\n    ribbonBlendMode,\n    ribbonOpacity,\n    ribbonHoverOpacity,\n    ribbonHoverOthersOpacity,\n    ribbonTooltip,\n\n    enableLabel,\n    labelOffset,\n    labelRotation,\n    labelTextColor,\n\n    isInteractive,\n    onArcMouseEnter,\n    onArcMouseMove,\n    onArcMouseLeave,\n    onArcClick,\n    onRibbonMouseEnter,\n    onRibbonMouseMove,\n    onRibbonMouseLeave,\n    onRibbonClick,\n\n    legends,\n    role,\n}) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { center, radius, arcGenerator, ribbonGenerator, arcs, ribbons } = useChord({\n        keys,\n        matrix,\n        label,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        innerRadiusRatio,\n        innerRadiusOffset,\n        padAngle,\n        colors,\n    })\n\n    const { setCurrentArc, setCurrentRibbon, getArcOpacity, getRibbonOpacity } = useChordSelection({\n        arcs,\n        arcOpacity,\n        arcHoverOpacity,\n        arcHoverOthersOpacity,\n        ribbons,\n        ribbonOpacity,\n        ribbonHoverOpacity,\n        ribbonHoverOthersOpacity,\n    })\n\n    const theme = useTheme()\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const getArcBorderColor = useInheritedColor(arcBorderColor, theme)\n    const getRibbonBorderColor = useInheritedColor(ribbonBorderColor, theme)\n\n    const layerContext = useChordLayerContext({\n        center,\n        radius,\n        arcs,\n        arcGenerator,\n        ribbons,\n        ribbonGenerator,\n    })\n\n    if (radius <= 0) return null\n\n    const legendData = arcs.map(arc => ({\n        id: arc.id,\n        label: arc.label,\n        color: arc.color,\n    }))\n\n    const layerById = {\n        ribbons: (\n            <g key=\"ribbons\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordRibbons\n                    ribbons={ribbons}\n                    ribbonGenerator={ribbonGenerator}\n                    borderWidth={ribbonBorderWidth}\n                    getBorderColor={getRibbonBorderColor}\n                    getOpacity={getRibbonOpacity}\n                    blendMode={ribbonBlendMode}\n                    setCurrent={setCurrentRibbon}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onRibbonMouseEnter}\n                    onMouseMove={onRibbonMouseMove}\n                    onMouseLeave={onRibbonMouseLeave}\n                    onClick={onRibbonClick}\n                    tooltip={ribbonTooltip}\n                />\n            </g>\n        ),\n        arcs: (\n            <g key=\"arcs\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordArcs\n                    arcs={arcs}\n                    arcGenerator={arcGenerator}\n                    borderWidth={arcBorderWidth}\n                    getBorderColor={getArcBorderColor}\n                    getOpacity={getArcOpacity}\n                    setCurrent={setCurrentArc}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onArcMouseEnter}\n                    onMouseMove={onArcMouseMove}\n                    onMouseLeave={onArcMouseLeave}\n                    onClick={onArcClick}\n                    tooltip={arcTooltip}\n                />\n            </g>\n        ),\n        labels: null,\n        legends: (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                        theme={theme}\n                    />\n                ))}\n            </Fragment>\n        ),\n    }\n\n    if (enableLabel === true) {\n        layerById.labels = (\n            <g key=\"labels\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordLabels\n                    arcs={arcs}\n                    radius={radius + labelOffset}\n                    rotation={labelRotation}\n                    getColor={getLabelTextColor}\n                />\n            </g>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            theme={theme}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer] !== undefined) {\n                    return layerById[layer]\n                }\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{layer(layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nChord.propTypes = ChordPropTypes\nChord.defaultProps = ChordDefaultProps\n\nexport default withContainer(Chord)\n","import { createElement, memo, useRef, useEffect, useCallback } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    midAngle,\n    getPolarLabelProps,\n    degreesToRadians,\n    getRelativeCursor,\n} from '@nivo/core'\nimport { findArcUnderCursor } from '@nivo/arcs'\nimport { useInheritedColor } from '@nivo/colors'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useChord, useChordSelection, useChordLayerContext } from './hooks'\nimport { ChordCanvasPropTypes, ChordCanvasDefaultProps } from './props'\n\nconst getArcFromMouseEvent = ({ event, canvasEl, center, margin, radius, innerRadius, arcs }) => {\n    const [x, y] = getRelativeCursor(canvasEl, event)\n    const centerX = margin.left + center[0]\n    const centerY = margin.top + center[1]\n\n    return findArcUnderCursor(centerX, centerY, radius, innerRadius, arcs, x, y)\n}\n\nconst ChordCanvas = memo(\n    ({\n        pixelRatio,\n        margin: partialMargin,\n        width,\n        height,\n        keys,\n        matrix,\n        label,\n        valueFormat,\n        innerRadiusRatio,\n        innerRadiusOffset,\n        padAngle,\n        layers,\n        colors,\n        arcBorderWidth,\n        arcBorderColor,\n        arcOpacity,\n        arcHoverOpacity,\n        arcHoverOthersOpacity,\n        arcTooltip,\n        ribbonBorderWidth,\n        ribbonBorderColor,\n        ribbonOpacity,\n        ribbonHoverOpacity,\n        ribbonHoverOthersOpacity,\n        enableLabel,\n        labelOffset,\n        labelRotation,\n        labelTextColor,\n        isInteractive,\n        onArcMouseEnter,\n        onArcMouseMove,\n        onArcMouseLeave,\n        onArcClick,\n        legends,\n    }) => {\n        const canvasEl = useRef(null)\n        const { innerWidth, innerHeight, outerWidth, outerHeight, margin } = useDimensions(\n            width,\n            height,\n            partialMargin\n        )\n\n        const { center, radius, innerRadius, arcGenerator, ribbonGenerator, arcs, ribbons } =\n            useChord({\n                keys,\n                matrix,\n                label,\n                valueFormat,\n                width: innerWidth,\n                height: innerHeight,\n                innerRadiusRatio,\n                innerRadiusOffset,\n                padAngle,\n                colors,\n            })\n\n        const { currentArc, setCurrentArc, getArcOpacity, getRibbonOpacity } = useChordSelection({\n            arcs,\n            arcOpacity,\n            arcHoverOpacity,\n            arcHoverOthersOpacity,\n            ribbons,\n            ribbonOpacity,\n            ribbonHoverOpacity,\n            ribbonHoverOthersOpacity,\n        })\n\n        const theme = useTheme()\n        const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n        const getArcBorderColor = useInheritedColor(arcBorderColor, theme)\n        const getRibbonBorderColor = useInheritedColor(ribbonBorderColor, theme)\n\n        const layerContext = useChordLayerContext({\n            center,\n            radius,\n            arcs,\n            arcGenerator,\n            ribbons,\n            ribbonGenerator,\n        })\n\n        useEffect(() => {\n            canvasEl.current.width = outerWidth * pixelRatio\n            canvasEl.current.height = outerHeight * pixelRatio\n\n            const ctx = canvasEl.current.getContext('2d')\n\n            ctx.scale(pixelRatio, pixelRatio)\n\n            ctx.fillStyle = theme.background\n            ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n            if (radius <= 0) return\n\n            layers.forEach(layer => {\n                if (layer === 'ribbons') {\n                    ctx.save()\n                    ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                    ribbonGenerator.context(ctx)\n                    ribbons.forEach(ribbon => {\n                        ctx.save()\n\n                        ctx.globalAlpha = getRibbonOpacity(ribbon)\n                        ctx.fillStyle = ribbon.source.color\n                        ctx.beginPath()\n                        ribbonGenerator(ribbon)\n                        ctx.fill()\n\n                        if (ribbonBorderWidth > 0) {\n                            ctx.strokeStyle = getRibbonBorderColor({\n                                ...ribbon,\n                                color: ribbon.source.color,\n                            })\n                            ctx.lineWidth = ribbonBorderWidth\n                            ctx.stroke()\n                        }\n\n                        ctx.restore()\n                    })\n\n                    ctx.restore()\n                }\n\n                if (layer === 'arcs') {\n                    ctx.save()\n                    ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                    arcGenerator.context(ctx)\n                    arcs.forEach(arc => {\n                        ctx.save()\n\n                        ctx.globalAlpha = getArcOpacity(arc)\n                        ctx.fillStyle = arc.color\n                        ctx.beginPath()\n                        arcGenerator(arc)\n                        ctx.fill()\n\n                        if (arcBorderWidth > 0) {\n                            ctx.strokeStyle = getArcBorderColor(arc)\n                            ctx.lineWidth = arcBorderWidth\n                            ctx.stroke()\n                        }\n\n                        ctx.restore()\n                    })\n\n                    ctx.restore()\n                }\n\n                if (layer === 'labels' && enableLabel === true) {\n                    ctx.save()\n                    ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                    ctx.font = `${theme.labels.text.fontSize}px ${\n                        theme.labels.text.fontFamily || 'sans-serif'\n                    }`\n\n                    arcs.forEach(arc => {\n                        const angle = midAngle(arc)\n                        const props = getPolarLabelProps(radius + labelOffset, angle, labelRotation)\n\n                        ctx.save()\n                        ctx.translate(props.x, props.y)\n                        ctx.rotate(degreesToRadians(props.rotate))\n\n                        ctx.textAlign = props.align\n                        ctx.textBaseline = props.baseline\n                        ctx.fillStyle = getLabelTextColor(arc, theme)\n                        ctx.fillText(arc.label, 0, 0)\n\n                        ctx.restore()\n                    })\n\n                    ctx.restore()\n                }\n\n                if (layer === 'legends') {\n                    ctx.save()\n                    ctx.translate(margin.left, margin.top)\n\n                    const legendData = arcs.map(arc => ({\n                        id: arc.id,\n                        label: arc.label,\n                        color: arc.color,\n                    }))\n\n                    legends.forEach(legend => {\n                        renderLegendToCanvas(ctx, {\n                            ...legend,\n                            data: legendData,\n                            containerWidth: innerWidth,\n                            containerHeight: innerHeight,\n                            theme,\n                        })\n                    })\n\n                    ctx.restore()\n                }\n\n                if (typeof layer === 'function') {\n                    layer(ctx, layerContext)\n                }\n            })\n        }, [\n            canvasEl,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            margin,\n            pixelRatio,\n            theme,\n            layers,\n            arcs,\n            arcGenerator,\n            getArcOpacity,\n            arcBorderWidth,\n            getArcBorderColor,\n            ribbons,\n            ribbonGenerator,\n            getRibbonOpacity,\n            ribbonBorderWidth,\n            getRibbonBorderColor,\n            enableLabel,\n            labelOffset,\n            labelRotation,\n            getLabelTextColor,\n            legends,\n            layerContext,\n        ])\n\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseHover = useCallback(\n            event => {\n                const arc = getArcFromMouseEvent({\n                    event,\n                    canvasEl: canvasEl.current,\n                    center,\n                    margin,\n                    radius,\n                    innerRadius,\n                    arcs,\n                })\n\n                if (arc) {\n                    setCurrentArc(arc)\n                    showTooltipFromEvent(createElement(arcTooltip, { arc }), event)\n                    !currentArc && onArcMouseEnter && onArcMouseEnter(arc, event)\n                    onArcMouseMove && onArcMouseMove(arc, event)\n                    currentArc &&\n                        currentArc.id !== arc.id &&\n                        onArcMouseLeave &&\n                        onArcMouseLeave(arc, event)\n                } else {\n                    setCurrentArc(null)\n                    hideTooltip()\n                    currentArc && onArcMouseLeave && onArcMouseLeave(currentArc, event)\n                }\n            },\n            [\n                canvasEl,\n                center,\n                margin,\n                radius,\n                innerRadius,\n                arcs,\n                setCurrentArc,\n                showTooltipFromEvent,\n                hideTooltip,\n                onArcMouseEnter,\n                onArcMouseMove,\n                onArcMouseLeave,\n            ]\n        )\n\n        const handleMouseLeave = useCallback(() => {\n            setCurrentArc(null)\n            hideTooltip()\n        }, [setCurrentArc, hideTooltip])\n\n        const handleClick = useCallback(\n            event => {\n                if (!onArcClick) return\n\n                const arc = getArcFromMouseEvent({\n                    event,\n                    canvasEl: canvasEl.current,\n                    center,\n                    margin,\n                    radius,\n                    innerRadius,\n                    arcs,\n                })\n\n                arc && onArcClick(arc, event)\n            },\n            [canvasEl, center, margin, radius, innerRadius, arcs, onArcClick]\n        )\n\n        return (\n            <canvas\n                ref={canvasEl}\n                width={outerWidth * pixelRatio}\n                height={outerHeight * pixelRatio}\n                style={{\n                    width: outerWidth,\n                    height: outerHeight,\n                    cursor: isInteractive ? 'auto' : 'normal',\n                }}\n                onMouseEnter={isInteractive ? handleMouseHover : undefined}\n                onMouseMove={isInteractive ? handleMouseHover : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n            />\n        )\n    }\n)\n\nChordCanvas.propTypes = ChordCanvasPropTypes\nChordCanvas.defaultProps = ChordCanvasDefaultProps\n\nexport default withContainer(ChordCanvas)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport Chord from './Chord'\n\nconst ResponsiveChord = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Chord width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChord\n","import { ResponsiveWrapper } from '@nivo/core'\nimport ChordCanvas from './ChordCanvas'\n\nconst ResponsiveChordCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ChordCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChordCanvas\n","var baseAssignValue = require('./_baseAssignValue'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee');\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nmodule.exports = mapValues;\n"],"names":["a","b","NaN","compare","length","f","d","x","array","Array","prototype","slice","map","Math","sqrt","start","stop","step","n","arguments","i","max","ceil","range","cos","sin","pi","PI","halfPi","tau","compareValue","source","value","target","defaultSource","defaultTarget","defaultRadius","radius","defaultStartAngle","startAngle","defaultEndAngle","endAngle","context","ribbon","buffer","argv","s","apply","this","t","sr","sa0","sa1","sx0","sy0","tr","ta0","ta1","path","moveTo","arc","quadraticCurveTo","closePath","_","ChordArcTooltip","memo","_jsx","BasicTooltip","id","label","formattedValue","color","enableChip","displayName","propTypes","PropTypes","ChordRibbonTooltip","theme","useTheme","TableTooltip","rows","Chip","commonPropTypes","keys","isRequired","matrix","valueFormat","padAngle","innerRadiusRatio","innerRadiusOffset","layers","arcOpacity","arcHoverOpacity","arcHoverOthersOpacity","arcBorderWidth","arcBorderColor","inheritedColorPropType","onArcMouseEnter","onArcMouseMove","onArcMouseLeave","onArcClick","arcTooltip","ribbonOpacity","ribbonHoverOpacity","ribbonHoverOthersOpacity","ribbonBorderWidth","ribbonBorderColor","ribbonBlendMode","blendModePropType","onRibbonMouseEnter","onRibbonMouseMove","onRibbonMouseLeave","onRibbonClick","ribbonTooltip","enableLabel","labelOffset","labelRotation","labelTextColor","colors","ordinalColorsPropType","isInteractive","legends","LegendPropShape","ChordPropTypes","motionPropTypes","role","ChordCanvasPropTypes","pixelRatio","commonDefaultProps","from","modifiers","scheme","ChordDefaultProps","animate","motionStiffness","motionDamping","ChordCanvasDefaultProps","window","devicePixelRatio","computeChordLayout","sortGroups","sortSubgroups","sortChords","chord","k","x0","dx","j","groupSums","groupIndex","subgroupIndex","chords","groups","subgroups","push","sort","forEach","di","dj","v","a0","a1","index","subindex","d3Chord","useChordGenerators","width","height","useMemo","center","min","innerRadius","ribbonRadius","arcGenerator","d3Arc","outerRadius","ribbonGenerator","d3Ribbon","computeChordGenerators","useChord","useChordLayout","getLabel","getLabelGenerator","formatValue","useValueFormatter","getColor","useOrdinalColorScale","ribbons","arcs","join","computeChordArcsAndRibbons","useChordArcsAndRibbons","useChordSelection","useState","currentArc","setCurrentArc","currentRibbon","setCurrentRibbon","selection","selectedArcIds","selectedRibbonIds","filter","hasSelection","getArcOpacity","includes","getRibbonOpacity","useChordLayerContext","ChordRibbon","sourceStartAngle","sourceEndAngle","targetStartAngle","targetEndAngle","opacity","borderWidth","getBorderColor","blendMode","setCurrent","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","e","createElement","event","handleMouseMove","handleMouseLeave","handleClick","fill","fillOpacity","strokeWidth","stroke","strokeOpacity","style","mixBlendMode","getRibbonAngles","useMiddleAngle","springConfig","firstArc","secondArc","angles","firstMiddleAngle","midAngle","secondMiddleAngle","mapValues","spring","angle","ribbonWillEnter","data","interpolateColor","ribbonWillLeave","ChordRibbons","getOpacity","useMotionConfig","_springConfig","precision","TransitionMotion","willEnter","willLeave","styles","key","interpolatedStyles","getInterpolatedColor","ChordArc","ChordArcs","ChordLabels","rotation","textProps","getPolarLabelProps","transform","y","rotate","labels","text","pointerEvents","textAnchor","align","dominantBaseline","baseline","Chord","partialMargin","margin","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","getLabelTextColor","useInheritedColor","getArcBorderColor","getRibbonBorderColor","layerContext","legendData","layerById","Fragment","legend","BoxLegendSvg","containerWidth","containerHeight","SvgWrapper","layer","defaultProps","withContainer","getArcFromMouseEvent","canvasEl","getRelativeCursor","centerX","left","centerY","top","findArcUnderCursor","ChordCanvas","useRef","useEffect","current","ctx","getContext","scale","fillStyle","background","fillRect","save","translate","r","globalAlpha","beginPath","strokeStyle","lineWidth","restore","font","fontSize","fontFamily","props","degreesToRadians","textAlign","textBaseline","fillText","renderLegendToCanvas","handleMouseHover","useCallback","ref","cursor","ResponsiveChord","ResponsiveWrapper","ResponsiveChordCanvas","baseAssignValue","baseForOwn","baseIteratee","module","exports","object","iteratee","result"],"sourceRoot":""}