{"version":3,"sources":["webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///../src/compute.ts","webpack:///../src/components/AxisTick.tsx","webpack:///../src/components/Axis.tsx","webpack:///../src/props.ts","webpack:///../src/components/Axes.tsx","webpack:///../src/components/GridLine.tsx","webpack:///../src/components/GridLines.tsx","webpack:///../src/components/Grid.tsx","webpack:///../src/canvas.ts"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_arrayLikeToArray","arr","len","arr2","Array","_slicedToArray","isArray","arrayWithHoles","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","iterableToArrayLimit","o","minLen","arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","from","test","unsupportedIterableToArray","TypeError","nonIterableRest","centerScale","bandwidth","scale","offset","Math","timeDay","timeInterval","date","end","start","utcDay","timeByType","millisecond","second","minute","hour","day","week","sunday","monday","tuesday","wednesday","thursday","friday","saturday","month","year","timeTypes","timeIntervalRegexp","RegExp","getScaleTicks","spec","matches","amount","type","timeType","originalStop","stop","Date","Number","interval","isFinite","computeCartesianTicks","axis","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","textProps","textPropsByEngine","position","line","lineX","lineY","text","textX","textY","isRTL","document","textAlign","textBaseline","translate","d","x","y","ticks","getFormatter","formatter","timeFormat","d3Format","computeGridLines","width","height","_values","x1","x2","y1","y2","AxisTick","_value","format","onClick","textAnchor","animatedProps","theme","useTheme","props","useMemo","style","opacity","cursor","event","transform","dominantBaseline","memoizedAxisTick","memo","Axis","renderTick","legend","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","useSpring","lineX2","lineY2","config","immediate","transition","useTransition","tick","initial","textTransform","enter","update","leave","aria-hidden","tickIndex","rotate","transitionProps","memoizedAxis","axisPropTypes","PropTypes","bool","axisPropType","positions","Axes","xScale","yScale","axes","top","right","bottom","left","isXAxis","GridLine","GridLines","lines","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","_format","ctx","degreesToRadians","String","renderAxesToCanvas","renderGridLinesToCanvas"],"mappings":"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","file":"b75e84cfea9fe9725c34ff9e854ecf6714aeb264-90f533745b35f6cfbaa5.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import {\n    CountableTimeInterval,\n    timeMillisecond,\n    utcMillisecond,\n    timeSecond,\n    utcSecond,\n    timeMinute,\n    utcMinute,\n    timeHour,\n    utcHour,\n    timeWeek,\n    utcWeek,\n    timeSunday,\n    utcSunday,\n    timeMonday,\n    utcMonday,\n    timeTuesday,\n    utcTuesday,\n    timeWednesday,\n    utcWednesday,\n    timeThursday,\n    utcThursday,\n    timeFriday,\n    utcFriday,\n    timeSaturday,\n    utcSaturday,\n    timeMonth,\n    utcMonth,\n    timeYear,\n    utcYear,\n    timeInterval,\n} from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport {\n    AxisValue,\n    Point,\n    TicksSpec,\n    AnyScale,\n    ScaleWithBandwidth,\n    ValueFormatter,\n    Line,\n} from './types'\n\nexport const centerScale = <Value>(scale: ScaleWithBandwidth) => {\n    const bandwidth = scale.bandwidth()\n\n    if (bandwidth === 0) return scale\n\n    let offset = bandwidth / 2\n    if (scale.round()) {\n        offset = Math.round(offset)\n    }\n\n    return <T extends Value>(d: T) => (scale(d) ?? 0) + offset\n}\n\nconst timeDay = timeInterval(\n    date => date.setHours(0, 0, 0, 0),\n    (date, step) => date.setDate(date.getDate() + step),\n    (start, end) => (end.getTime() - start.getTime()) / 864e5,\n    date => Math.floor(date.getTime() / 864e5)\n)\n\nconst utcDay = timeInterval(\n    date => date.setUTCHours(0, 0, 0, 0),\n    (date, step) => date.setUTCDate(date.getUTCDate() + step),\n    (start, end) => (end.getTime() - start.getTime()) / 864e5,\n    date => Math.floor(date.getTime() / 864e5)\n)\n\nconst timeByType: Record<string, [CountableTimeInterval, CountableTimeInterval]> = {\n    millisecond: [timeMillisecond, utcMillisecond],\n    second: [timeSecond, utcSecond],\n    minute: [timeMinute, utcMinute],\n    hour: [timeHour, utcHour],\n    day: [timeDay, utcDay],\n    week: [timeWeek, utcWeek],\n    sunday: [timeSunday, utcSunday],\n    monday: [timeMonday, utcMonday],\n    tuesday: [timeTuesday, utcTuesday],\n    wednesday: [timeWednesday, utcWednesday],\n    thursday: [timeThursday, utcThursday],\n    friday: [timeFriday, utcFriday],\n    saturday: [timeSaturday, utcSaturday],\n    month: [timeMonth, utcMonth],\n    year: [timeYear, utcYear],\n}\n\nconst timeTypes = Object.keys(timeByType)\nconst timeIntervalRegexp = new RegExp(`^every\\\\s*(\\\\d+)?\\\\s*(${timeTypes.join('|')})s?$`, 'i')\n\nconst isInteger = (value: unknown): value is number =>\n    typeof value === 'number' && isFinite(value) && Math.floor(value) === value\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const getScaleTicks = <Value extends AxisValue>(\n    scale: AnyScale,\n    spec?: TicksSpec<Value>\n) => {\n    // specific values\n    if (Array.isArray(spec)) {\n        return spec\n    }\n\n    if (typeof spec === 'string' && 'useUTC' in scale) {\n        // time interval\n        const matches = spec.match(timeIntervalRegexp)\n\n        if (matches) {\n            const [, amount, type] = matches\n            // UTC is used as it's more predictible\n            // however local time could be used too\n            // let's see how it fits users' requirements\n            const timeType = timeByType[type][scale.useUTC ? 1 : 0]\n\n            if (type === 'day') {\n                const [start, originalStop] = scale.domain()\n                const stop = new Date(originalStop)\n\n                // Set range to include last day in the domain since `interval.range` function is exclusive stop\n                stop.setDate(stop.getDate() + 1)\n\n                return timeType.every(Number(amount ?? 1))?.range(start, stop) ?? []\n            }\n\n            if (amount === undefined) {\n                return scale.ticks(timeType)\n            }\n\n            const interval = timeType.every(Number(amount))\n\n            if (interval) {\n                return scale.ticks(interval)\n            }\n        }\n\n        throw new Error(`Invalid tickValues: ${spec}`)\n    }\n\n    // continuous scales\n    if ('ticks' in scale) {\n        // default behaviour\n        if (spec === undefined) {\n            return scale.ticks()\n        }\n\n        // specific tick count\n        if (isInteger(spec)) {\n            return scale.ticks(spec)\n        }\n    }\n\n    // non linear scale default\n    return scale.domain()\n}\n\nexport const computeCartesianTicks = <Value extends AxisValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends AxisValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return (d => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return (d3Format(format) as unknown) as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends AxisValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import React, { useMemo, memo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { AxisTickProps, AxisValue } from '../types'\n\nconst AxisTick = <Value extends AxisValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import React, { useMemo, memo } from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AnyScale, AxisProps, AxisValue } from '../types'\n\nconst Axis = <Value extends AxisValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import React, { memo } from 'react'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AnyScale, AxisProps, AxisValue } from '../types'\n\nexport const Axes = memo(\n    <X extends AxisValue, Y extends AxisValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X>\n        right?: AxisProps<Y>\n        bottom?: AxisProps<X>\n        left?: AxisProps<Y>\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import React, { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import React, { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import React, { useMemo, memo } from 'react'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\nimport { AnyScale, AxisValue, TicksSpec } from '../types'\n\nexport const Grid = memo(\n    <X extends AxisValue, Y extends AxisValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport {\n    AxisValue,\n    TicksSpec,\n    AnyScale,\n    AxisLegendPosition,\n    CanvasAxisProp,\n    ValueFormatter,\n} from './types'\n\nexport const renderAxisToCanvas = <Value extends AxisValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontSize}px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends AxisValue, Y extends AxisValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProp<X> | null\n        right?: CanvasAxisProp<Y> | null\n        bottom?: CanvasAxisProp<X> | null\n        left?: CanvasAxisProp<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProp<X> | undefined\n            : CanvasAxisProp<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends AxisValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n"],"sourceRoot":""}