{"version":3,"file":"6666de6dab7f94f08cc85374ee8758e5b1e78771-dbbbc969fc27829d513b.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-shape/src/area.js","webpack://nivo-website/../src/PointTooltip.js","webpack://nivo-website/../src/SliceTooltip.js","webpack://nivo-website/../src/props.js","webpack://nivo-website/../src/hooks.js","webpack://nivo-website/../src/Areas.js","webpack://nivo-website/../src/LinesItem.js","webpack://nivo-website/../src/Lines.js","webpack://nivo-website/../src/SlicesItem.js","webpack://nivo-website/../src/Slices.js","webpack://nivo-website/../src/Points.js","webpack://nivo-website/../src/Mesh.js","webpack://nivo-website/../src/Line.js","webpack://nivo-website/../src/ResponsiveLine.js","webpack://nivo-website/../src/LineCanvas.js","webpack://nivo-website/../src/ResponsiveLineCanvas.js"],"sourcesContent":["import { path } from \"d3-path\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport line from \"./line.js\";\nimport { x as pointX, y as pointY } from \"./point.js\";\nexport default function () {\n  var x0 = pointX,\n      x1 = null,\n      y0 = constant(0),\n      y1 = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function area(data) {\n    var i,\n        j,\n        k,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer,\n        x0z = new Array(n),\n        y0z = new Array(n);\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) {\n          j = i;\n          output.areaStart();\n          output.lineStart();\n        } else {\n          output.lineEnd();\n          output.lineStart();\n\n          for (k = i - 1; k >= j; --k) {\n            output.point(x0z[k], y0z[k]);\n          }\n\n          output.lineEnd();\n          output.areaEnd();\n        }\n      }\n\n      if (defined0) {\n        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n      }\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  function arealine() {\n    return line().defined(defined).curve(curve).context(context);\n  }\n\n  area.x = function (_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), x1 = null, area) : x0;\n  };\n\n  area.x0 = function (_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), area) : x0;\n  };\n\n  area.x1 = function (_) {\n    return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : x1;\n  };\n\n  area.y = function (_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), y1 = null, area) : y0;\n  };\n\n  area.y0 = function (_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), area) : y0;\n  };\n\n  area.y1 = function (_) {\n    return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : y1;\n  };\n\n  area.lineX0 = area.lineY0 = function () {\n    return arealine().x(x0).y(y0);\n  };\n\n  area.lineY1 = function () {\n    return arealine().x(x0).y(y1);\n  };\n\n  area.lineX1 = function () {\n    return arealine().x(x1).y(y0);\n  };\n\n  area.defined = function (_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), area) : defined;\n  };\n\n  area.curve = function (_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n  };\n\n  area.context = function (_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n  };\n\n  return area;\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst LinePointTooltip = ({ point }) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.xFormatted}</strong>, y:{' '}\n                    <strong>{point.data.yFormatted}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serieColor}\n        />\n    )\n}\n\nLinePointTooltip.propTypes = {\n    point: PropTypes.object.isRequired,\n}\n\nexport default memo(LinePointTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@nivo/core'\nimport { Chip, TableTooltip } from '@nivo/tooltip'\n\nconst SliceTooltip = ({ slice, axis }) => {\n    const theme = useTheme()\n    const otherAxis = axis === 'x' ? 'y' : 'x'\n\n    return (\n        <TableTooltip\n            rows={slice.points.map(point => [\n                <Chip key=\"chip\" color={point.serieColor} style={theme.tooltip.chip} />,\n                point.serieId,\n                <span key=\"value\" style={theme.tooltip.tableCellValue}>\n                    {point.data[`${otherAxis}Formatted`]}\n                </span>,\n            ])}\n        />\n    )\n}\n\nSliceTooltip.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n}\n\nexport default memo(SliceTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { lineCurvePropType, blendModePropType, motionPropTypes, defsPropTypes } from '@nivo/core'\nimport { ordinalColorsPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\nimport { LegendPropShape } from '@nivo/legends'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst commonPropTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                    y: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n\n    xScale: PropTypes.object.isRequired,\n    xFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    yScale: PropTypes.object.isRequired,\n    yFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf([\n                'grid',\n                'markers',\n                'axes',\n                'areas',\n                'crosshair',\n                'lines',\n                'slices',\n                'points',\n                'mesh',\n                'legends',\n            ]),\n            PropTypes.func,\n        ])\n    ).isRequired,\n\n    curve: lineCurvePropType.isRequired,\n\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n    gridXValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n    gridYValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n\n    enablePoints: PropTypes.bool.isRequired,\n    pointSymbol: PropTypes.func,\n    pointSize: PropTypes.number.isRequired,\n    pointColor: PropTypes.any.isRequired,\n    pointBorderWidth: PropTypes.number.isRequired,\n    pointBorderColor: PropTypes.any.isRequired,\n    enablePointLabel: PropTypes.bool.isRequired,\n    pointLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n\n    markers: PropTypes.arrayOf(\n        PropTypes.shape({\n            axis: PropTypes.oneOf(['x', 'y']).isRequired,\n            value: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            style: PropTypes.object,\n        })\n    ),\n\n    colors: ordinalColorsPropType.isRequired,\n\n    enableArea: PropTypes.bool.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    areaBaselineValue: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n        PropTypes.instanceOf(Date),\n    ]).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    debugMesh: PropTypes.bool.isRequired,\n\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableSlices: PropTypes.oneOf(['x', 'y', false]).isRequired,\n    debugSlices: PropTypes.bool.isRequired,\n    sliceTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableCrosshair: PropTypes.bool.isRequired,\n    crosshairType: PropTypes.string.isRequired,\n}\n\nexport const LinePropTypes = {\n    ...commonPropTypes,\n    enablePointLabel: PropTypes.bool.isRequired,\n    role: PropTypes.string.isRequired,\n    useMesh: PropTypes.bool.isRequired,\n    ...motionPropTypes,\n    ...defsPropTypes,\n}\n\nexport const LineCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    curve: 'linear',\n\n    xScale: {\n        type: 'point',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n\n    layers: [\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n    ],\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: true,\n    enableGridY: true,\n\n    enablePoints: true,\n    pointSize: 6,\n    pointColor: { from: 'color' },\n    pointBorderWidth: 0,\n    pointBorderColor: { theme: 'background' },\n    enablePointLabel: false,\n    pointLabel: 'yFormatted',\n\n    colors: { scheme: 'nivo' },\n    enableArea: false,\n    areaBaselineValue: 0,\n    areaOpacity: 0.2,\n    areaBlendMode: 'normal',\n    lineWidth: 2,\n\n    legends: [],\n\n    isInteractive: true,\n    tooltip: PointTooltip,\n    enableSlices: false,\n    debugSlices: false,\n    sliceTooltip: SliceTooltip,\n    debugMesh: false,\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n\nexport const LineDefaultProps = {\n    ...commonDefaultProps,\n    enablePointLabel: false,\n    useMesh: false,\n    animate: true,\n    motionConfig: 'gentle',\n    defs: [],\n    fill: [],\n    role: 'img',\n}\n\nexport const LineCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useCallback, useMemo, useState } from 'react'\nimport { area, line } from 'd3-shape'\nimport { curveFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { LineDefaultProps } from './props'\n\nexport const useLineGenerator = ({ curve }) => {\n    return useMemo(\n        () =>\n            line()\n                .defined(d => d.x !== null && d.y !== null)\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n}\n\nexport const useAreaGenerator = ({ curve, yScale, areaBaselineValue }) => {\n    return useMemo(() => {\n        return area()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y1(d => d.y)\n            .curve(curveFromProp(curve))\n            .y0(yScale(areaBaselineValue))\n    }, [curve, yScale, areaBaselineValue])\n}\n\nconst usePoints = ({ series, getPointColor, getPointBorderColor, formatX, formatY }) => {\n    return useMemo(() => {\n        return series.reduce((acc, serie) => {\n            return [\n                ...acc,\n                ...serie.data\n                    .filter(datum => datum.position.x !== null && datum.position.y !== null)\n                    .map((datum, i) => {\n                        const point = {\n                            id: `${serie.id}.${i}`,\n                            index: acc.length + i,\n                            serieId: serie.id,\n                            serieColor: serie.color,\n                            x: datum.position.x,\n                            y: datum.position.y,\n                        }\n                        point.color = getPointColor(serie)\n                        point.borderColor = getPointBorderColor(point)\n                        point.data = {\n                            ...datum.data,\n                            xFormatted: formatX(datum.data.x),\n                            yFormatted: formatY(datum.data.y),\n                        }\n\n                        return point\n                    }),\n            ]\n        }, [])\n    }, [series, getPointColor, getPointBorderColor, formatX, formatY])\n}\n\nexport const useSlices = ({ enableSlices, points, width, height }) => {\n    return useMemo(() => {\n        if (enableSlices === false) return []\n\n        if (enableSlices === 'x') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.x)) map.set(point.x, [point])\n                else map.get(point.x).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([x, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let x0\n                    if (!prevSlice) x0 = x\n                    else x0 = x - (x - prevSlice[0]) / 2\n\n                    let sliceWidth\n                    if (!nextSlice) sliceWidth = width - x0\n                    else sliceWidth = x - x0 + (nextSlice[0] - x) / 2\n\n                    return {\n                        id: x,\n                        x0,\n                        x,\n                        y0: 0,\n                        y: 0,\n                        width: sliceWidth,\n                        height,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        } else if (enableSlices === 'y') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.y)) map.set(point.y, [point])\n                else map.get(point.y).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([y, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let y0\n                    if (!prevSlice) y0 = y\n                    else y0 = y - (y - prevSlice[0]) / 2\n\n                    let sliceHeight\n                    if (!nextSlice) sliceHeight = height - y0\n                    else sliceHeight = y - y0 + (nextSlice[0] - y) / 2\n\n                    return {\n                        id: y,\n                        x0: 0,\n                        x: 0,\n                        y0,\n                        y,\n                        width,\n                        height: sliceHeight,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        }\n    }, [enableSlices, points])\n}\n\nexport const useLine = ({\n    data,\n    xScale: xScaleSpec = LineDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = LineDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    colors = LineDefaultProps.colors,\n    curve = LineDefaultProps.curve,\n    areaBaselineValue = LineDefaultProps.areaBaselineValue,\n    pointColor = LineDefaultProps.pointColor,\n    pointBorderColor = LineDefaultProps.pointBorderColor,\n    enableSlices = LineDefaultProps.enableSlicesTooltip,\n}) => {\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const [hiddenIds, setHiddenIds] = useState([])\n\n    const {\n        xScale,\n        yScale,\n        series: rawSeries,\n    } = useMemo(\n        () =>\n            computeXYScalesForSeries(\n                data.filter(item => hiddenIds.indexOf(item.id) === -1),\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, hiddenIds, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const { legendData, series } = useMemo(() => {\n        const dataWithColor = data.map(line => ({\n            id: line.id,\n            label: line.id,\n            color: getColor(line),\n        }))\n        const series = dataWithColor\n            .map(datum => ({\n                ...rawSeries.find(serie => serie.id === datum.id),\n                color: datum.color,\n            }))\n            .filter(item => Boolean(item.id))\n        const legendData = dataWithColor\n            .map(item => ({ ...item, hidden: !series.find(serie => serie.id === item.id) }))\n            .reverse()\n\n        return { legendData, series }\n    }, [data, rawSeries, getColor])\n\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const points = usePoints({\n        series,\n        getPointColor,\n        getPointBorderColor,\n        formatX,\n        formatY,\n    })\n\n    const slices = useSlices({\n        enableSlices,\n        points,\n        width,\n        height,\n    })\n\n    const lineGenerator = useLineGenerator({ curve })\n    const areaGenerator = useAreaGenerator({\n        curve,\n        yScale,\n        areaBaselineValue,\n    })\n\n    return {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        getColor,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig, blendModePropType } from '@nivo/core'\n\nconst AreaPath = ({ areaBlendMode, areaOpacity, color, fill, path }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={fill ? fill : animatedProps.color}\n            fillOpacity={areaOpacity}\n            strokeWidth={0}\n            style={{\n                mixBlendMode: areaBlendMode,\n            }}\n        />\n    )\n}\n\nAreaPath.propTypes = {\n    areaBlendMode: blendModePropType.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    color: PropTypes.string,\n    fill: PropTypes.string,\n    path: PropTypes.string.isRequired,\n}\n\nconst Areas = ({ areaGenerator, areaOpacity, areaBlendMode, lines }) => {\n    const computedLines = lines.slice(0).reverse()\n\n    return (\n        <g>\n            {computedLines.map(line => (\n                <AreaPath\n                    key={line.id}\n                    path={areaGenerator(line.data.map(d => d.position))}\n                    {...{ areaOpacity, areaBlendMode, ...line }}\n                />\n            ))}\n        </g>\n    )\n}\n\nAreas.propTypes = {\n    areaGenerator: PropTypes.func.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    lines: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default memo(Areas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath } from '@nivo/core'\n\nconst LinesItem = ({ lineGenerator, points, color, thickness }) => {\n    const path = useMemo(() => lineGenerator(points), [lineGenerator, points])\n    const animatedPath = useAnimatedPath(path)\n\n    return <animated.path d={animatedPath} fill=\"none\" strokeWidth={thickness} stroke={color} />\n}\n\nLinesItem.propTypes = {\n    points: PropTypes.arrayOf(\n        PropTypes.shape({\n            x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        })\n    ),\n    lineGenerator: PropTypes.func.isRequired,\n    color: PropTypes.string.isRequired,\n    thickness: PropTypes.number.isRequired,\n}\n\nexport default memo(LinesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport LinesItem from './LinesItem'\n\nconst Lines = ({ lines, lineGenerator, lineWidth }) => {\n    return lines\n        .slice(0)\n        .reverse()\n        .map(({ id, data, color }) => (\n            <LinesItem\n                key={id}\n                id={id}\n                points={data.map(d => d.position)}\n                lineGenerator={lineGenerator}\n                color={color}\n                thickness={lineWidth}\n            />\n        ))\n}\n\nLines.propTypes = {\n    lines: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            color: PropTypes.string.isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    data: PropTypes.shape({\n                        x: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                        y: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                    }).isRequired,\n                    position: PropTypes.shape({\n                        x: PropTypes.number,\n                        y: PropTypes.number,\n                    }).isRequired,\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineGenerator: PropTypes.func.isRequired,\n}\n\nexport default memo(Lines)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst SlicesItem = ({ slice, axis, debug, tooltip, isCurrent, setCurrent }) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n        },\n        [showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n        },\n        [showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setCurrent(null)\n    }, [hideTooltip])\n\n    return (\n        <rect\n            x={slice.x0}\n            y={slice.y0}\n            width={slice.width}\n            height={slice.height}\n            stroke=\"red\"\n            strokeWidth={debug ? 1 : 0}\n            strokeOpacity={0.75}\n            fill=\"red\"\n            fillOpacity={isCurrent && debug ? 0.35 : 0}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n\nSlicesItem.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    isCurrent: PropTypes.bool.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n}\n\nexport default memo(SlicesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport SlicesItem from './SlicesItem'\n\nconst Slices = ({ slices, axis, debug, height, tooltip, current, setCurrent }) => {\n    return slices.map(slice => (\n        <SlicesItem\n            key={slice.id}\n            slice={slice}\n            axis={axis}\n            debug={debug}\n            height={height}\n            tooltip={tooltip}\n            setCurrent={setCurrent}\n            isCurrent={current !== null && current.id === slice.id}\n        />\n    ))\n}\n\nSlices.propTypes = {\n    slices: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired,\n            points: PropTypes.arrayOf(PropTypes.object).isRequired,\n        })\n    ).isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    current: PropTypes.object,\n    setCurrent: PropTypes.func.isRequired,\n}\n\nexport default memo(Slices)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { getLabelGenerator, DotsItem, useTheme } from '@nivo/core'\n\nconst Points = ({ points, symbol, size, borderWidth, enableLabel, label, labelYOffset }) => {\n    const theme = useTheme()\n    const getLabel = getLabelGenerator(label)\n\n    /**\n     * We reverse the `points` array so that points from the lower lines in stacked lines\n     * graph are drawn on top. See https://github.com/plouc/nivo/issues/1051.\n     */\n    const mappedPoints = points.reverse().map(point => {\n        const mappedPoint = {\n            id: point.id,\n            x: point.x,\n            y: point.y,\n            datum: point.data,\n            fill: point.color,\n            stroke: point.borderColor,\n            label: enableLabel ? getLabel(point.data) : null,\n        }\n\n        return mappedPoint\n    })\n\n    return (\n        <g>\n            {mappedPoints.map(point => (\n                <DotsItem\n                    key={point.id}\n                    x={point.x}\n                    y={point.y}\n                    datum={point.datum}\n                    symbol={symbol}\n                    size={size}\n                    color={point.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    theme={theme}\n                />\n            ))}\n        </g>\n    )\n}\n\nPoints.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object),\n    symbol: PropTypes.func,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelYOffset: PropTypes.number,\n}\n\nexport default memo(Points)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\n\nconst Mesh = ({\n    points,\n    width,\n    height,\n    margin,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseEnter, margin]\n    )\n\n    const handleMouseMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseMove && onMouseMove(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point, event) => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (point, event) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n\nMesh.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object).isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    margin: PropTypes.object.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    debug: PropTypes.bool.isRequired,\n}\n\nexport default memo(Mesh)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { Fragment, useState } from 'react'\nimport {\n    bindDefs,\n    withContainer,\n    useDimensions,\n    useTheme,\n    SvgWrapper,\n    CartesianMarkers,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Crosshair } from '@nivo/tooltip'\nimport { useLine } from './hooks'\nimport { LinePropTypes, LineDefaultProps } from './props'\nimport Areas from './Areas'\nimport Lines from './Lines'\nimport Slices from './Slices'\nimport Points from './Points'\nimport Mesh from './Mesh'\n\nconst Line = props => {\n    const {\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        layers,\n        curve,\n        areaBaselineValue,\n\n        colors,\n\n        margin: partialMargin,\n        width,\n        height,\n\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        enableGridX,\n        enableGridY,\n        gridXValues,\n        gridYValues,\n\n        lineWidth,\n        enableArea,\n        areaOpacity,\n        areaBlendMode,\n\n        enablePoints,\n        pointSymbol,\n        pointSize,\n        pointColor,\n        pointBorderWidth,\n        pointBorderColor,\n        enablePointLabel,\n        pointLabel,\n        pointLabelYOffset,\n\n        defs,\n        fill,\n\n        markers,\n\n        legends,\n\n        isInteractive,\n\n        useMesh,\n        debugMesh,\n\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n\n        tooltip,\n\n        enableSlices,\n        debugSlices,\n        sliceTooltip,\n\n        enableCrosshair,\n        crosshairType,\n\n        role,\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n        enableSlices,\n    })\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const [currentPoint, setCurrentPoint] = useState(null)\n    const [currentSlice, setCurrentSlice] = useState(null)\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                theme={theme}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        ),\n        markers: (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n                theme={theme}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                theme={theme}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        areas: null,\n        lines: (\n            <Lines key=\"lines\" lines={series} lineGenerator={lineGenerator} lineWidth={lineWidth} />\n        ),\n        slices: null,\n        points: null,\n        crosshair: null,\n        mesh: null,\n        legends: legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={`legend.${i}`}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legend.data || legendData}\n                theme={theme}\n                toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n            />\n        )),\n    }\n\n    const boundDefs = bindDefs(defs, series, fill)\n\n    if (enableArea) {\n        layerById.areas = (\n            <Areas\n                key=\"areas\"\n                areaGenerator={areaGenerator}\n                areaOpacity={areaOpacity}\n                areaBlendMode={areaBlendMode}\n                lines={series}\n            />\n        )\n    }\n\n    if (isInteractive && enableSlices !== false) {\n        layerById.slices = (\n            <Slices\n                key=\"slices\"\n                slices={slices}\n                axis={enableSlices}\n                debug={debugSlices}\n                height={innerHeight}\n                tooltip={sliceTooltip}\n                current={currentSlice}\n                setCurrent={setCurrentSlice}\n            />\n        )\n    }\n\n    if (enablePoints) {\n        layerById.points = (\n            <Points\n                key=\"points\"\n                points={points}\n                symbol={pointSymbol}\n                size={pointSize}\n                color={getPointColor}\n                borderWidth={pointBorderWidth}\n                borderColor={getPointBorderColor}\n                enableLabel={enablePointLabel}\n                label={pointLabel}\n                labelYOffset={pointLabelYOffset}\n            />\n        )\n    }\n\n    if (isInteractive && enableCrosshair) {\n        if (currentPoint !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentPoint.x}\n                    y={currentPoint.y}\n                    type={crosshairType}\n                />\n            )\n        }\n        if (currentSlice !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentSlice.x}\n                    y={currentSlice.y}\n                    type={enableSlices}\n                />\n            )\n        }\n    }\n\n    if (isInteractive && useMesh && enableSlices === false) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                current={currentPoint}\n                setCurrent={setCurrentPoint}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                series,\n                                slices,\n                                points,\n                                xScale,\n                                yScale,\n                                lineGenerator,\n                                areaGenerator,\n                                currentPoint,\n                                setCurrentPoint,\n                                currentSlice,\n                                setCurrentSlice,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nLine.propTypes = LinePropTypes\nLine.defaultProps = LineDefaultProps\n\nexport default withContainer(Line)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Line from './Line'\n\nconst ResponsiveLine = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Line width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveLine\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, useRef, useEffect, useState, useCallback, forwardRef } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    getRelativeCursor,\n    isCursorInRect,\n} from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { LineCanvasPropTypes, LineCanvasDefaultProps } from './props'\nimport { useLine } from './hooks'\n\nconst LineCanvas = ({\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio,\n\n    data,\n    xScale: xScaleSpec,\n    xFormat,\n    yScale: yScaleSpec,\n    yFormat,\n    curve,\n\n    layers,\n\n    colors,\n    lineWidth,\n\n    enableArea,\n    areaBaselineValue,\n    areaOpacity,\n\n    enablePoints,\n    pointSize,\n    pointColor,\n    pointBorderWidth,\n    pointBorderColor,\n\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n\n    legends,\n\n    isInteractive,\n    debugMesh,\n    //onMouseEnter,\n    //onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n\n    canvasRef,\n}) => {\n    const canvasEl = useRef(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const theme = useTheme()\n    const [currentPoint, setCurrentPoint] = useState(null)\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n    })\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    useEffect(() => {\n        if (canvasRef) {\n            canvasRef.current = canvasEl.current\n        }\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (typeof layer === 'function') {\n                layer({\n                    ctx,\n                    innerWidth,\n                    innerHeight,\n                    series,\n                    points,\n                    xScale,\n                    yScale,\n                    lineWidth,\n                    lineGenerator,\n                    areaGenerator,\n                    currentPoint,\n                    setCurrentPoint,\n                })\n            }\n\n            if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'areas' && enableArea === true) {\n                ctx.save()\n                ctx.globalAlpha = areaOpacity\n\n                areaGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.fillStyle = serie.color\n                    ctx.beginPath()\n                    areaGenerator(serie.data.map(d => d.position))\n                    ctx.fill()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'lines') {\n                lineGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.strokeStyle = serie.color\n                    ctx.lineWidth = lineWidth\n                    ctx.beginPath()\n                    lineGenerator(serie.data.map(d => d.position))\n                    ctx.stroke()\n                })\n            }\n\n            if (layer === 'points' && enablePoints === true && pointSize > 0) {\n                points.forEach(point => {\n                    ctx.fillStyle = point.color\n                    ctx.beginPath()\n                    ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (pointBorderWidth > 0) {\n                        ctx.strokeStyle = point.borderColor\n                        ctx.lineWidth = pointBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh === true) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentPoint) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index)\n                }\n            }\n\n            if (layer === 'legends') {\n                const legendData = series\n                    .map(serie => ({\n                        id: serie.id,\n                        label: serie.id,\n                        color: serie.color,\n                    }))\n                    .reverse()\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legend.data || legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        lineGenerator,\n        series,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        points,\n        enablePoints,\n        pointSize,\n        currentPoint,\n    ])\n\n    const getPointFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const pointIndex = delaunay.find(x - margin.left, y - margin.top)\n            return points[pointIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const point = getPointFromMouseEvent(event)\n            setCurrentPoint(point)\n\n            if (point) {\n                showTooltipFromEvent(createElement(tooltip, { point }), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentPoint(null)\n            currentPoint && onMouseLeave && onMouseLeave(currentPoint, event)\n        },\n        [hideTooltip, setCurrentPoint, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const point = getPointFromMouseEvent(event)\n                point && onClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nLineCanvas.propTypes = LineCanvasPropTypes\nLineCanvas.defaultProps = LineCanvasDefaultProps\n\nconst LineCanvasWithContainer = withContainer(LineCanvas)\n\nexport default forwardRef((props, ref) => <LineCanvasWithContainer {...props} canvasRef={ref} />)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport LineCanvas from './LineCanvas'\n\nconst ResponsiveLineCanvas = (props, ref) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <LineCanvas width={width} height={height} {...props} ref={ref} />}\n    </ResponsiveWrapper>\n)\n\nexport default forwardRef(ResponsiveLineCanvas)\n"],"names":["x0","x1","y0","y1","defined","context","curve","output","area","data","i","j","k","d","buffer","n","length","defined0","x0z","Array","y0z","areaStart","lineStart","lineEnd","point","areaEnd","arealine","x","_","arguments","y","lineX0","lineY0","lineY1","lineX1","LinePointTooltip","_jsx","BasicTooltip","id","_jsxs","xFormatted","yFormatted","enableChip","color","serieColor","propTypes","PropTypes","memo","SliceTooltip","slice","axis","theme","useTheme","otherAxis","TableTooltip","rows","points","map","Chip","style","tooltip","chip","serieId","tableCellValue","isRequired","commonPropTypes","Date","xScale","xFormat","yScale","yFormat","layers","lineCurvePropType","axisTop","axisPropType","axisRight","axisBottom","axisLeft","enableGridX","enableGridY","gridXValues","gridYValues","enablePoints","pointSymbol","pointSize","pointColor","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","markers","value","colors","ordinalColorsPropType","enableArea","areaOpacity","areaBlendMode","blendModePropType","areaBaselineValue","lineWidth","legends","LegendPropShape","isInteractive","debugMesh","enableSlices","debugSlices","sliceTooltip","enableCrosshair","crosshairType","LinePropTypes","role","useMesh","motionPropTypes","defsPropTypes","LineCanvasPropTypes","pixelRatio","commonDefaultProps","type","min","max","from","scheme","PointTooltip","LineDefaultProps","animate","motionConfig","defs","fill","LineCanvasDefaultProps","window","devicePixelRatio","useLineGenerator","useMemo","line","curveFromProp","useAreaGenerator","useLine","xScaleSpec","yScaleSpec","width","height","enableSlicesTooltip","formatX","useValueFormatter","formatY","getColor","useOrdinalColorScale","getPointColor","useInheritedColor","getPointBorderColor","useState","hiddenIds","setHiddenIds","computeXYScalesForSeries","filter","indexOf","item","rawSeries","series","dataWithColor","label","find","serie","datum","Boolean","legendData","hidden","reverse","toggleSerie","useCallback","state","reduce","acc","position","index","borderColor","slices","Map","forEach","has","get","push","set","entries","sort","a","b","slicePoints","prevSlice","nextSlice","sliceHeight","useSlices","lineGenerator","areaGenerator","AreaPath","path","useMotionConfig","springConfig","config","animatedPath","useAnimatedPath","animatedProps","useSpring","immediate","animated","fillOpacity","strokeWidth","mixBlendMode","Areas","computedLines","lines","LinesItem","thickness","stroke","Lines","SlicesItem","debug","isCurrent","setCurrent","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","e","createElement","event","handleMouseMove","handleMouseLeave","strokeOpacity","onMouseEnter","onMouseMove","onMouseLeave","Slices","current","Points","symbol","size","borderWidth","enableLabel","labelYOffset","getLabel","getLabelGenerator","mappedPoints","DotsItem","Mesh","margin","onClick","showTooltipAt","left","top","handleClick","BaseMesh","nodes","Line","props","partialMargin","pointLabelYOffset","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","currentPoint","setCurrentPoint","currentSlice","setCurrentSlice","layerById","grid","Grid","xValues","yValues","CartesianMarkers","axes","Axes","right","bottom","areas","crosshair","mesh","legend","BoxLegendSvg","containerWidth","containerHeight","undefined","boundDefs","bindDefs","Crosshair","SvgWrapper","layer","Fragment","defaultProps","withContainer","ResponsiveLine","ResponsiveWrapper","LineCanvas","canvasRef","canvasEl","useRef","useVoronoiMesh","delaunay","voronoi","useEffect","ctx","getContext","scale","fillStyle","background","fillRect","translate","strokeStyle","renderGridLinesToCanvas","values","renderAxesToCanvas","save","globalAlpha","beginPath","restore","arc","Math","PI","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","getPointFromMouseEvent","getRelativeCursor","isCursorInRect","pointIndex","handleMouseHover","ref","cursor","LineCanvasWithContainer","forwardRef"],"sourceRoot":""}