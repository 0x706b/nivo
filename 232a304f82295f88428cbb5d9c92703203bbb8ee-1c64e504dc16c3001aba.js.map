{"version":3,"sources":["webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack:///../src/SunburstTooltip.tsx","webpack:///../src/props.ts","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///../src/Arcs.tsx","webpack:///../src/Sunburst.tsx","webpack:///../src/hooks.ts","webpack:///../src/ResponsiveSunburst.tsx","webpack:///./src/data/components/sunburst/props.js","webpack:///./src/data/components/sunburst/mapper.js","webpack:///../node_modules/lodash/cloneDeep.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_objectWithoutProperties","excluded","sourceKeys","indexOf","objectWithoutPropertiesLoose","sourceSymbolKeys","prototype","propertyIsEnumerable","call","defaultProps","id","cornerRadius","layers","colors","scheme","colorBy","inheritColorFromParent","childColor","from","borderWidth","borderColor","enableArcLabels","arcLabel","arcLabelsRadiusOffset","arcLabelsSkipAngle","arcLabelsTextColor","theme","animate","motionConfig","transitionMode","isInteractive","defs","fill","tooltip","formattedValue","color","enableChip","role","_arrayLikeToArray","arr","len","arr2","Array","_toConsumableArray","isArray","arrayLikeToArray","arrayWithoutHoles","iter","Symbol","iterator","iterableToArray","o","minLen","n","toString","slice","constructor","name","test","unsupportedIterableToArray","TypeError","nonIterableSpread","Arcs","center","data","arcGenerator","onClick","onMouseEnter","onMouseMove","onMouseLeave","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","useMemo","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","InnerSunburst","valueFormat","partialMargin","margin","width","height","arcLabelsComponent","useDimensions","innerHeight","innerWidth","outerHeight","outerWidth","radius","Math","centerX","centerY","useTheme","getColor","useOrdinalColorScale","getChildColor","useInheritedColor","getId","usePropertyAccessor","getValue","formatValue","useValueFormatter","nodes","clonedData","cloneDeep","hierarchy","d3Hierarchy","descendants","d3Partition","partition","total","sortBy","descendant","percentage","path","ancestor","arc","startAngle","endAngle","innerRadius","outerRadius","parent","acc","node","normalizedNode","depth","useArcGenerator","useSunburst","boundDefs","bindDefs","dataKey","colorKey","targetKey","layerById","arcs","arcLabels","label","radiusOffset","skipAngle","textColor","component","layerContext","useSunburstLayerContext","layer","Sunburst","otherProps","ResponsiveSunburst","props","group","help","description","type","required","defaultValue","controlType","controlOptions","unit","min","max","step","enableControlForFlavors","themeProperty","choices","defsProperties","flavors","map","choice","motionProperties","arcTransitionModes","groups","groupProperties","TooltipWrapper","styled","div","TooltipKey","span","TooltipValue","CustomTooltip","style","round","settingsMapper","mapFormat","d","values","patternLinesDef","background","rotation","lineWidth","spacing","match","exclude","baseClone","module","exports","CLONE_DEEP_FLAG"],"mappings":"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","file":"232a304f82295f88428cbb5d9c92703203bbb8ee-1c64e504dc16c3001aba.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const SunburstTooltip = <RawDatum,>({\n    id,\n    formattedValue,\n    color,\n}: ComputedDatum<RawDatum>) => (\n    <BasicTooltip id={id} value={formattedValue} enableChip={true} color={color} />\n)\n","import { ArcTransitionMode } from '@nivo/arcs'\nimport { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { SunburstTooltip } from './SunburstTooltip'\nimport { SunburstLayerId } from './types'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    cornerRadius: 0,\n    layers: ['arcs', 'arcLabels'] as SunburstLayerId[],\n    colors: ({ scheme: 'nivo' } as unknown) as OrdinalColorScaleConfig,\n    colorBy: 'id' as const,\n    inheritColorFromParent: true,\n    childColor: { from: 'color' },\n    borderWidth: 1,\n    borderColor: 'white',\n    enableArcLabels: false,\n    arcLabel: 'formattedValue',\n    arcLabelsRadiusOffset: 0.5,\n    arcLabelsSkipAngle: 0,\n    arcLabelsTextColor: { theme: 'labels.text.fill' },\n    animate: true,\n    motionConfig: 'gentle',\n    transitionMode: 'innerRadius' as ArcTransitionMode,\n    isInteractive: true,\n    defs: [],\n    fill: [],\n    tooltip: SunburstTooltip,\n    role: 'img',\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { ComputedDatum, SunburstCommonProps, MouseHandlers } from './types'\nimport { useTooltip } from '@nivo/tooltip'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: SunburstCommonProps<RawDatum>['borderWidth']\n    borderColor: SunburstCommonProps<RawDatum>['borderColor']\n    isInteractive: SunburstCommonProps<RawDatum>['isInteractive']\n    onClick?: MouseHandlers<RawDatum>['onClick']\n    onMouseEnter?: MouseHandlers<RawDatum>['onMouseEnter']\n    onMouseMove?: MouseHandlers<RawDatum>['onMouseMove']\n    onMouseLeave?: MouseHandlers<RawDatum>['onMouseLeave']\n    tooltip: SunburstCommonProps<RawDatum>['tooltip']\n    transitionMode: SunburstCommonProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, datum), event)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, datum), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n","import { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { ArcLabelsLayer } from '@nivo/arcs'\nimport { defaultProps } from './props'\nimport { useSunburst, useSunburstLayerContext } from './hooks'\nimport { SunburstSvgProps, SunburstLayerId, SunburstLayer, ComputedDatum } from './types'\nimport { Arcs } from './Arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\n\ntype InnerSunburstProps<RawDatum> = Partial<\n    Omit<\n        SunburstSvgProps<RawDatum>,\n        'data' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height' | 'isInteractive'>\n\nconst InnerSunburst = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    cornerRadius = defaultProps.cornerRadius,\n    layers = defaultProps.layers as SunburstLayer<RawDatum>[],\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor,\n    margin: partialMargin,\n    width,\n    height,\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsComponent,\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n    transitionMode = defaultProps.transitionMode,\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n    role = defaultProps.role,\n}: InnerSunburstProps<RawDatum>) => {\n    const { innerHeight, innerWidth, margin, outerHeight, outerWidth } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { centerX, centerY, radius } = useMemo(() => {\n        const radius = Math.min(innerWidth, innerHeight) / 2\n\n        return { radius, centerX: innerWidth / 2, centerY: innerHeight / 2 }\n    }, [innerHeight, innerWidth])\n\n    const { arcGenerator, nodes } = useSunburst({\n        data,\n        id,\n        value,\n        valueFormat,\n        radius,\n        cornerRadius,\n        colors,\n        colorBy,\n        inheritColorFromParent,\n        childColor,\n    })\n\n    const boundDefs = bindDefs(defs, nodes, fill, {\n        dataKey: '.',\n        colorKey: 'color',\n        targetKey: 'fill',\n    })\n\n    const layerById: Record<SunburstLayerId, ReactNode> = {\n        arcs: null,\n        arcLabels: null,\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={nodes}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                transitionMode={transitionMode}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseLeave={onMouseLeave}\n                onMouseMove={onMouseMove}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={nodes}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    const layerContext = useSunburstLayerContext<RawDatum>({\n        nodes,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            defs={boundDefs}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as SunburstLayerId] !== undefined) {\n                    return layerById[layer as SunburstLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Sunburst = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    ...otherProps\n}: Partial<Omit<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>> &\n    Pick<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme }}>\n        <InnerSunburst<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { useMemo } from 'react'\nimport { partition as d3Partition, hierarchy as d3Hierarchy } from 'd3-hierarchy'\nimport cloneDeep from 'lodash/cloneDeep'\nimport sortBy from 'lodash/sortBy'\nimport { usePropertyAccessor, useTheme, useValueFormatter } from '@nivo/core'\nimport { Arc, useArcGenerator } from '@nivo/arcs'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport {\n    SunburstCommonProps,\n    ComputedDatum,\n    DataProps,\n    DatumId,\n    SunburstCustomLayerProps,\n} from './types'\nimport { defaultProps } from './props'\n\nexport const useSunburst = <RawDatum>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    radius,\n    cornerRadius = defaultProps.cornerRadius,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n}: {\n    data: DataProps<RawDatum>['data']\n    id?: DataProps<RawDatum>['id']\n    value?: DataProps<RawDatum>['value']\n    valueFormat?: DataProps<RawDatum>['valueFormat']\n    radius: number\n    cornerRadius?: SunburstCommonProps<RawDatum>['cornerRadius']\n    colors?: SunburstCommonProps<RawDatum>['colors']\n    colorBy?: SunburstCommonProps<RawDatum>['colorBy']\n    inheritColorFromParent?: SunburstCommonProps<RawDatum>['inheritColorFromParent']\n    childColor?: SunburstCommonProps<RawDatum>['childColor']\n}) => {\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'color' | 'fill'>>(\n        colors,\n        colorBy\n    )\n    const getChildColor = useInheritedColor<ComputedDatum<RawDatum>>(childColor, theme)\n\n    const getId = usePropertyAccessor<RawDatum, DatumId>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const nodes: ComputedDatum<RawDatum>[] = useMemo(() => {\n        // d3 mutates the data for performance reasons,\n        // however it does not work well with reactive programming,\n        // this ensures that we don't mutate the input data\n        const clonedData = cloneDeep(data)\n\n        const hierarchy = d3Hierarchy(clonedData).sum(getValue)\n\n        const partition = d3Partition<RawDatum>().size([2 * Math.PI, radius * radius])\n        // exclude root node\n        const descendants = partition(hierarchy).descendants().slice(1)\n\n        const total = hierarchy.value ?? 0\n\n        // It's important to sort node by depth,\n        // it ensures that we assign a parent node\n        // which has already been computed, because parent nodes\n        // are going to be computed first\n        const sortedNodes = sortBy(descendants, 'depth')\n\n        return sortedNodes.reduce<ComputedDatum<RawDatum>[]>((acc, descendant) => {\n            const id = getId(descendant.data)\n            // d3 hierarchy node value is optional by default as it depends on\n            // a call to `count()` or `sum()`, and we previously called `sum()`,\n            // d3 typings could be improved and make it non optional when calling\n            // one of those.\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const value = descendant.value!\n            const percentage = (100 * value) / total\n            const path = descendant.ancestors().map(ancestor => getId(ancestor.data))\n\n            const arc: Arc = {\n                startAngle: descendant.x0,\n                endAngle: descendant.x1,\n                innerRadius: Math.sqrt(descendant.y0),\n                outerRadius: Math.sqrt(descendant.y1),\n            }\n\n            let parent: ComputedDatum<RawDatum> | undefined\n            if (descendant.parent) {\n                // as the parent is defined by the input data, and we sorted the data\n                // by `depth`, we can safely assume it's defined.\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                parent = acc.find(node => node.id === getId(descendant.parent!.data))\n            }\n\n            const normalizedNode: ComputedDatum<RawDatum> = {\n                id,\n                path,\n                value,\n                percentage,\n                formattedValue: valueFormat ? formatValue(value) : `${percentage.toFixed(2)}%`,\n                color: '',\n                arc,\n                data: descendant.data,\n                depth: descendant.depth,\n                height: descendant.height,\n            }\n\n            if (inheritColorFromParent && parent && normalizedNode.depth > 1) {\n                normalizedNode.color = getChildColor(parent, normalizedNode)\n            } else {\n                normalizedNode.color = getColor(normalizedNode)\n            }\n\n            return [...acc, normalizedNode]\n        }, [])\n    }, [\n        data,\n        radius,\n        getValue,\n        getId,\n        valueFormat,\n        formatValue,\n        getColor,\n        inheritColorFromParent,\n        getChildColor,\n    ])\n\n    const arcGenerator = useArcGenerator({ cornerRadius })\n\n    return { arcGenerator, nodes }\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const useSunburstLayerContext = <RawDatum>({\n    nodes,\n    arcGenerator,\n    centerX,\n    centerY,\n    radius,\n}: SunburstCustomLayerProps<RawDatum>): SunburstCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            nodes,\n            arcGenerator,\n            centerX,\n            centerY,\n            radius,\n        }),\n        [nodes, arcGenerator, centerX, centerY, radius]\n    )\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Sunburst } from './Sunburst'\nimport { SunburstSvgProps } from './types'\n\ntype ResponsiveSunburstProps<RawDatum> = Partial<\n    Omit<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>\n> &\n    Pick<SunburstSvgProps<RawDatum>, 'data'>\n\nexport const ResponsiveSunburst = <RawDatum,>(props: ResponsiveSunburstProps<RawDatum>) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Sunburst<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { defaultProps } from '@nivo/sunburst'\nimport { arcTransitionModes } from '@nivo/arcs'\nimport {\n    groupProperties,\n    defsProperties,\n    motionProperties,\n    themeProperty,\n} from '../../../lib/componentProperties'\n\nconst props = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data, which should be immutable.',\n        description: `\n            Chart data, which must conform to this structure\n            if using the default \\`id\\` and \\`value\\` accessors:\n\n            \\`\\`\\`\n            {\n                // must be unique for the whole dataset\n                id: string | number\n                value: number\n                children: {\n                    id: string | number\n                    value: number\n                    children: ...\n                }[]\n            }\n            \\`\\`\\`\n\n            If using a different data structure, you must make sure\n            to adjust both \\`id\\` and \\`value\\`. Meaning you can provide\n            a completely different data structure as long as \\`id\\` and \\`value\\`\n            return the appropriate values.\n\n            Immutability of the data is important as re-computations\n            depends on it.\n        `,\n        type: 'object',\n        required: true,\n    },\n    {\n        key: 'id',\n        group: 'Base',\n        help: 'Id accessor.',\n        description: `\n            define id accessor, if string given,\n            will use \\`node[value]\\`,\n            if function given, it will be invoked\n            for each node and will receive the node as\n            first argument, it must return the node\n            id (string | number).\n        `,\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaultProps.id,\n    },\n    {\n        key: 'value',\n        group: 'Base',\n        help: 'Value accessor',\n        description: `\n            define value accessor, if string given,\n            will use \\`node[value]\\`,\n            if function given, it will be invoked\n            for each node and will receive the node as\n            first argument, it must return the node\n            value (number).\n        `,\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaultProps.value,\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'string | (value: number) => string | number',\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'cornerRadius',\n        help: 'Round node shape.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.cornerRadius,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        description: `\n            not required if using\n            \\`<ResponsiveSunburst/>\\`.\n        `,\n        help: 'Chart width.',\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        description: `\n            not required if using\n            \\`<ResponsiveSunburst/>\\`.\n        `,\n        help: 'Chart height.',\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    themeProperty,\n    {\n        key: 'colors',\n        help: 'Defines how to compute node color.',\n        required: false,\n        defaultValue: defaultProps.colors,\n        controlType: 'ordinalColors',\n        type: 'string | Function | string[]',\n        group: 'Style',\n    },\n    {\n        key: 'colorBy',\n        help: `Define the property to use to assign a color to arcs.`,\n        description: `\n            When using \\`id\\`, each node will get a new color,\n            and when using \\`depth\\` the nodes' color will depend on their depth.\n        `,\n        type: `'id' | 'depth'`,\n        required: false,\n        defaultValue: defaultProps.colorBy,\n        controlType: 'radio',\n        group: 'Style',\n        controlOptions: {\n            choices: [\n                { label: 'id', value: 'id' },\n                { label: 'depth', value: 'depth' },\n            ],\n        },\n    },\n    {\n        key: 'inheritColorFromParent',\n        help: 'Inherit color from parent node starting from 2nd level.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.inheritColorFromParent,\n        controlType: 'switch',\n        group: 'Style',\n    },\n    {\n        key: 'childColor',\n        help: 'Defines how to compute child nodes color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.childColor,\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    {\n        key: 'borderWidth',\n        help: 'Node border width.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.borderWidth,\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Defines how to compute arcs color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.borderColor,\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    ...defsProperties('Style', ['svg', 'api']),\n    {\n        key: 'showcase pattern usage',\n        flavors: ['svg'],\n        help: 'Patterns.',\n        description: `\n            You can use \\`defs\\` and \\`fill\\` properties\n            to use patterns, see\n            [dedicated guide](self:/guides/patterns)\n            for further information.\n        `,\n        type: 'boolean',\n        controlType: 'switch',\n        group: 'Style',\n    },\n    {\n        key: 'enableArcLabels',\n        help: 'Enable/disable arc labels.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.enableArcLabels,\n        controlType: 'switch',\n        group: 'Arc labels',\n    },\n    {\n        key: 'arcLabel',\n        help:\n            'Defines how to get label text, can be a string (used to access current node data property) or a function which will receive the actual node data.',\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaultProps.arcLabel,\n        controlType: 'choices',\n        group: 'Arc labels',\n        controlOptions: {\n            choices: ['id', 'value', 'formattedValue', `d => \\`\\${d.id} (\\${d.value})\\``].map(\n                choice => ({\n                    label: choice,\n                    value: choice,\n                })\n            ),\n        },\n    },\n    {\n        key: 'arcLabelsRadiusOffset',\n        help: `\n            Define the radius to use to determine the label position, starting from inner radius,\n            this is expressed as a ratio.\n        `,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLabelsRadiusOffset,\n        controlType: 'range',\n        group: 'Arc labels',\n        controlOptions: {\n            min: 0,\n            max: 2,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'arcLabelsSkipAngle',\n        help: `Skip label if corresponding arc's angle is lower than provided value.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLabelsSkipAngle,\n        controlType: 'range',\n        group: 'Arc labels',\n        controlOptions: {\n            unit: '°',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLabelsTextColor',\n        help: 'Defines how to compute arc label text color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.arcLabelsTextColor,\n        controlType: 'inheritedColor',\n        group: 'Arc labels',\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer must be a function.\n\n            The layer component which will receive the chart's\n            context & computed data and must return a valid SVG element\n            for the \\`Sunburst\\` component.\n\n            The context passed to layers has the following structure:\n\n            \\`\\`\\`\n            {\n                nodes:  ComputedDatum<RawDatum>[],\n                arcGenerator: Function\n                centerX:      number\n                centerY:      number\n                radius:       number\n            }\n            \\`\\`\\`\n        `,\n        required: false,\n        type: 'Array<string | Function>',\n        defaultValue: defaultProps.layers,\n    },\n    {\n        key: 'isInteractive',\n        flavors: ['svg'],\n        help: 'Enable/disable interactivity.',\n        type: '{boolean}',\n        required: false,\n        defaultValue: defaultProps.isInteractive,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    ...motionProperties(['svg'], defaultProps, 'react-spring'),\n    {\n        key: 'transitionMode',\n        flavors: ['svg'],\n        help: 'Define how transitions behave.',\n        type: 'string',\n        required: false,\n        defaultValue: defaultProps.transitionMode,\n        controlType: 'choices',\n        group: 'Motion',\n        controlOptions: {\n            choices: arcTransitionModes.map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n    {\n        key: 'tooltip',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Tooltip custom component',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will receive\n            the following data:\n            \\`\\`\\`\n            {\n                id:         string | number,\n                value:      number,\n                depth:      number,\n                color:      string,\n                name:       string\n                loc:        number\n                percentage: number\n                // the parent datum\n                ancestor:   object\n            }\n            \\`\\`\\`\n            You can also customize the style of the tooltip\n            using the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'Showcase custom tooltip component.',\n        type: 'boolean',\n        controlType: 'switch',\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'onClick handler',\n        description: `\n            onClick handler, will receive node data as first argument\n            & event as second one. The node data has the following shape:\n\n            \\`\\`\\`\n            {\n                id:         string | number,\n                value:      number,\n                depth:      number,\n                color:      string,\n                name:       string\n                loc:        number\n                percentage: number\n                // the parent datum\n                ancestor:   object\n            }\n            \\`\\`\\`\n        `,\n    },\n]\n\nexport const groups = groupProperties(props)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { patternLinesDef } from '@nivo/core'\nimport { mapFormat, settingsMapper } from '../../../lib/settings'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    background: #fff;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n    font-size: 12px;\n    border-radius: 2px;\n    box-shadow: 1px 1px 0 rgba(0, 0, 0, 0.15);\n`\nconst TooltipKey = styled.span`\n    font-weight: 600;\n`\nconst TooltipValue = styled.span``\n\nconst CustomTooltip = node => {\n    return (\n        <TooltipWrapper style={{ color: node.color }}>\n            <TooltipKey>id</TooltipKey>\n            <TooltipValue>{node.id}</TooltipValue>\n            <TooltipKey>value</TooltipKey>\n            <TooltipValue>{node.value}</TooltipValue>\n            <TooltipKey>percentage</TooltipKey>\n            <TooltipValue>{Math.round(node.percentage * 100) / 100}%</TooltipValue>\n            <TooltipKey>color</TooltipKey>\n            <TooltipValue>{node.color}</TooltipValue>\n        </TooltipWrapper>\n    )\n}\n\nexport default settingsMapper(\n    {\n        valueFormat: mapFormat,\n        arcLabel: value => {\n            if (value === `d => \\`\\${d.id} (\\${d.value})\\``) return d => `${d.id} (${d.value})`\n            return value\n        },\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return undefined\n\n            return CustomTooltip\n        },\n        defs: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                patternLinesDef('lines', {\n                    background: 'rgba(0, 0, 0, 0)',\n                    color: 'inherit',\n                    rotation: -45,\n                    lineWidth: 4,\n                    spacing: 8,\n                }),\n            ]\n        },\n        fill: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                { match: { id: 'set' }, id: 'lines' },\n                { match: { id: 'misc' }, id: 'lines' },\n            ]\n        },\n    },\n    {\n        exclude: ['custom tooltip example', 'showcase pattern usage'],\n    }\n)\n","var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = cloneDeep;\n"],"sourceRoot":""}