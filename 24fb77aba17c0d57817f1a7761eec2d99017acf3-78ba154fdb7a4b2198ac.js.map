{"version":3,"sources":["webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///../src/props.js","webpack:///../src/hooks.js","webpack:///../src/Node.js","webpack:///../src/AnimatedNodes.js","webpack:///../src/StaticNodes.js","webpack:///../src/Link.js","webpack:///../src/AnimatedLinks.js","webpack:///../src/StaticLinks.js","webpack:///../src/NetworkNodeTooltip.js","webpack:///../src/Network.js","webpack:///../src/ResponsiveNetwork.js","webpack:///../src/NetworkCanvas.js","webpack:///../src/ResponsiveNetworkCanvas.js","webpack:///./src/data/components/network/props.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_arrayLikeToArray","arr","len","arr2","Array","_slicedToArray","isArray","arrayWithHoles","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","iterableToArrayLimit","o","minLen","arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","from","test","unsupportedIterableToArray","TypeError","nonIterableRest","commonPropTypes","nodes","id","PropTypes","isRequired","links","layers","linkDistance","repulsivity","distanceMin","distanceMax","iterations","nodeColor","nodeBorderWidth","nodeBorderColor","inheritedColorPropType","linkThickness","linkColor","isInteractive","commonDefaultProps","role","pixelRatio","NetworkDefaultProps","animate","motionStiffness","motionDamping","NetworkCanvasDefaultProps","window","useNetwork","center","useState","currentNodes","setCurrentNodes","currentLinks","setCurrentLinks","useEffect","forces","isNumber","computedLinkDistance","isString","link","get","d","charge","forceManyBody","forceCenter","computeForces","nodesCopy","node","linksCopy","simulation","forceSimulation","useNodeColor","color","useMemo","useLinkThickness","thickness","Node","x","y","radius","borderWidth","borderColor","scale","handleNodeHover","handleNodeLeave","transform","r","fill","strokeWidth","stroke","onMouseEnter","event","onMouseMove","onMouseLeave","memo","willEnter","style","willLeave","springConfig","spring","AnimatedNodes","useMotionConfig","styles","data","interpolatedStyles","Math","StaticNodes","Link","sourceX","sourceY","targetX","targetY","strokeLinecap","x1","y1","x2","y2","AnimatedLinks","StaticLinks","NetworkNodeTooltip","format","tooltip","enableChip","renderContent","Network","props","width","height","partialMargin","rawNodes","rawLinks","useDimensions","margin","innerWidth","innerHeight","outerWidth","outerHeight","theme","useTheme","getColor","getBorderColor","useInheritedColor","getLinkThickness","getLinkColor","useTooltip","showTooltipFromEvent","hideTooltip","useCallback","layerById","layer","withContainer","ResponsiveNetwork","NetworkCanvas","canvasEl","useRef","getNodeColor","ctx","ref","cursor","ResponsiveNetworkCanvas","enableControlForFlavors","help","description","type","required","controlType","group","controlOptions","unit","min","max","step","flavors","defaultValue","inheritableProperties","motionProperties","groups","groupProperties"],"mappings":"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","file":"24fb77aba17c0d57817f1a7761eec2d99017acf3-78ba154fdb7a4b2198ac.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { motionPropTypes } from '@nivo/core'\nimport { inheritedColorPropType } from '@nivo/colors'\n\nconst commonPropTypes = {\n    nodes: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n        })\n    ).isRequired,\n    links: PropTypes.arrayOf(\n        PropTypes.shape({\n            source: PropTypes.string.isRequired,\n            target: PropTypes.string.isRequired,\n        })\n    ).isRequired,\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.oneOf(['links', 'nodes']), PropTypes.func])\n    ).isRequired,\n\n    linkDistance: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.number])\n        .isRequired,\n    repulsivity: PropTypes.number.isRequired,\n    distanceMin: PropTypes.number.isRequired,\n    distanceMax: PropTypes.number.isRequired,\n    iterations: PropTypes.number.isRequired,\n\n    nodeColor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    nodeBorderWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    nodeBorderColor: inheritedColorPropType.isRequired,\n\n    linkThickness: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    linkColor: inheritedColorPropType.isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n}\n\nexport const NetworkPropTypes = {\n    ...commonPropTypes,\n    role: PropTypes.string.isRequired,\n    ...motionPropTypes,\n}\n\nexport const NetworkCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    layers: ['links', 'nodes'],\n\n    linkDistance: 30,\n    repulsivity: 10,\n    distanceMin: 1,\n    distanceMax: Infinity,\n    iterations: 90,\n\n    nodeBorderWidth: 0,\n    nodeBorderColor: { from: 'color' },\n\n    linkThickness: 1,\n    linkColor: { from: 'source.color' },\n\n    isInteractive: true,\n}\n\nexport const NetworkDefaultProps = {\n    ...commonDefaultProps,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 15,\n    role: 'img',\n}\n\nexport const NetworkCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useState, useEffect, useMemo } from 'react'\nimport get from 'lodash/get'\nimport isString from 'lodash/isString'\nimport isNumber from 'lodash/isNumber'\nimport { forceSimulation, forceManyBody, forceCenter, forceLink } from 'd3-force'\n\nconst computeForces = ({ linkDistance, repulsivity, distanceMin, distanceMax, center }) => {\n    let computedLinkDistance\n    if (typeof linkDistance === 'function') {\n        computedLinkDistance = linkDistance\n    } else if (isNumber(linkDistance)) {\n        computedLinkDistance = linkDistance\n    } else if (isString(linkDistance)) {\n        computedLinkDistance = link => get(link, linkDistance)\n    }\n\n    const linkForce = forceLink()\n        .id(d => d.id)\n        .distance(computedLinkDistance)\n\n    const chargeForce = forceManyBody()\n        .strength(-repulsivity)\n        .distanceMin(distanceMin)\n        .distanceMax(distanceMax)\n\n    const centerForce = forceCenter(center[0], center[1])\n\n    return { link: linkForce, charge: chargeForce, center: centerForce }\n}\n\nexport const useNetwork = ({\n    nodes,\n    links,\n    linkDistance,\n    repulsivity,\n    distanceMin,\n    distanceMax,\n    center,\n    iterations,\n}) => {\n    const [currentNodes, setCurrentNodes] = useState([])\n    const [currentLinks, setCurrentLinks] = useState([])\n\n    useEffect(() => {\n        const forces = computeForces({\n            linkDistance,\n            repulsivity,\n            distanceMin,\n            distanceMax,\n            center,\n        })\n\n        const nodesCopy = nodes.map(node => ({ ...node }))\n        const linksCopy = links.map(link => ({\n            id: `${link.source}.${link.target}`,\n            ...link,\n        }))\n\n        const simulation = forceSimulation(nodesCopy)\n            .force('link', forces.link.links(linksCopy))\n            .force('charge', forces.charge)\n            .force('center', forces.center)\n            .stop()\n\n        simulation.tick(iterations)\n\n        setCurrentNodes(nodesCopy)\n        setCurrentLinks(\n            linksCopy.map(link => {\n                link.previousSource = currentNodes.find(n => n.id === link.source.id)\n                link.previousTarget = currentNodes.find(n => n.id === link.target.id)\n\n                return link\n            })\n        )\n\n        return () => {\n            simulation.stop()\n        }\n    }, [\n        nodes,\n        links,\n        linkDistance,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        center[0],\n        center[1],\n    ])\n\n    return [currentNodes, currentLinks]\n}\n\nexport const useNodeColor = color =>\n    useMemo(() => {\n        if (typeof color === 'function') return color\n        return () => color\n    }, [color])\n\nexport const useLinkThickness = thickness =>\n    useMemo(() => {\n        if (typeof thickness === 'function') return thickness\n        return () => thickness\n    }, [thickness])\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Node = ({\n    node,\n    x,\n    y,\n    radius,\n    color,\n    borderWidth,\n    borderColor,\n    scale = 1,\n    handleNodeHover,\n    handleNodeLeave,\n}) => {\n    return (\n        <circle\n            transform={`translate(${x},${y}) scale(${scale})`}\n            r={radius}\n            fill={color}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            onMouseEnter={event => handleNodeHover(node, event)}\n            onMouseMove={event => handleNodeHover(node, event)}\n            onMouseLeave={handleNodeLeave}\n        />\n    )\n}\n\nNode.propTypes = {\n    node: PropTypes.object.isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    radius: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n    scale: PropTypes.number,\n    handleNodeHover: PropTypes.func.isRequired,\n    handleNodeLeave: PropTypes.func.isRequired,\n}\n\nexport default memo(Node)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { TransitionMotion, spring } from 'react-motion'\nimport { useMotionConfig } from '@nivo/core'\nimport Node from './Node'\n\nconst willEnter = ({ style }) => ({\n    x: style.x.val,\n    y: style.y.val,\n    radius: style.radius.val,\n    scale: 0,\n})\n\nconst willLeave = springConfig => ({ style }) => ({\n    x: style.x,\n    y: style.y,\n    radius: style.radius,\n    scale: spring(0, springConfig),\n})\n\nconst AnimatedNodes = ({\n    nodes,\n    color,\n    borderWidth,\n    borderColor,\n    handleNodeHover,\n    handleNodeLeave,\n}) => {\n    const { springConfig } = useMotionConfig()\n\n    return (\n        <TransitionMotion\n            willEnter={willEnter}\n            willLeave={willLeave(springConfig)}\n            styles={nodes.map(node => ({\n                key: node.id,\n                data: node,\n                style: {\n                    x: spring(node.x, springConfig),\n                    y: spring(node.y, springConfig),\n                    radius: spring(node.radius, springConfig),\n                    scale: spring(1, springConfig),\n                },\n            }))}\n        >\n            {interpolatedStyles => (\n                <>\n                    {interpolatedStyles.map(({ key, style, data: node }) => {\n                        return (\n                            <Node\n                                key={key}\n                                node={node}\n                                x={style.x}\n                                y={style.y}\n                                radius={Math.max(style.radius, 0)}\n                                color={color(node)}\n                                borderWidth={borderWidth}\n                                borderColor={borderColor(node)}\n                                scale={Math.max(style.scale, 0)}\n                                handleNodeHover={handleNodeHover}\n                                handleNodeLeave={handleNodeLeave}\n                            />\n                        )\n                    })}\n                </>\n            )}\n        </TransitionMotion>\n    )\n}\n\nAnimatedNodes.propTypes = {\n    nodes: PropTypes.array.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n    handleNodeHover: PropTypes.func.isRequired,\n    handleNodeLeave: PropTypes.func.isRequired,\n}\n\nexport default memo(AnimatedNodes)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport Node from './Node'\n\nconst StaticNodes = ({\n    nodes,\n    color,\n    borderWidth,\n    borderColor,\n    handleNodeHover,\n    handleNodeLeave,\n}) => {\n    return nodes.map(node => {\n        return (\n            <Node\n                key={node.id}\n                node={node}\n                x={node.x}\n                y={node.y}\n                radius={node.radius}\n                color={color(node)}\n                borderWidth={borderWidth}\n                borderColor={borderColor(node)}\n                handleNodeHover={handleNodeHover}\n                handleNodeLeave={handleNodeLeave}\n            />\n        )\n    })\n}\n\nStaticNodes.propTypes = {\n    nodes: PropTypes.array.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n    handleNodeHover: PropTypes.func.isRequired,\n    handleNodeLeave: PropTypes.func.isRequired,\n}\n\nexport default memo(StaticNodes)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Link = ({ sourceX, sourceY, targetX, targetY, thickness, color }) => {\n    return (\n        <line\n            stroke={color}\n            strokeWidth={thickness}\n            strokeLinecap=\"round\"\n            x1={sourceX}\n            y1={sourceY}\n            x2={targetX}\n            y2={targetY}\n        />\n    )\n}\n\nLink.propTypes = {\n    link: PropTypes.object.isRequired,\n    sourceX: PropTypes.number.isRequired,\n    sourceY: PropTypes.number.isRequired,\n    targetX: PropTypes.number.isRequired,\n    targetY: PropTypes.number.isRequired,\n    thickness: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n}\n\nexport default memo(Link)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { TransitionMotion, spring } from 'react-motion'\nimport { useMotionConfig } from '@nivo/core'\nimport Link from './Link'\n\nconst willEnter = ({ style, data }) => {\n    const sourceX = data.previousSource ? data.previousSource.x : style.sourceX.val\n    const sourceY = data.previousSource ? data.previousSource.y : style.sourceY.val\n\n    return {\n        sourceX,\n        sourceY,\n        targetX: sourceX,\n        targetY: sourceY,\n    }\n}\n\nconst AnimatedLinks = ({ links, linkThickness, linkColor }) => {\n    const { springConfig } = useMotionConfig()\n\n    return (\n        <TransitionMotion\n            willEnter={willEnter}\n            styles={links.map(link => ({\n                key: link.id,\n                data: link,\n                style: {\n                    sourceX: spring(link.source.x, springConfig),\n                    sourceY: spring(link.source.y, springConfig),\n                    targetX: spring(link.target.x, springConfig),\n                    targetY: spring(link.target.y, springConfig),\n                },\n            }))}\n        >\n            {interpolatedStyles => (\n                <>\n                    {interpolatedStyles.map(({ key, style, data: link }) => {\n                        return (\n                            <Link\n                                key={key}\n                                link={link}\n                                color={linkColor(link)}\n                                thickness={linkThickness(link)}\n                                sourceX={style.sourceX}\n                                sourceY={style.sourceY}\n                                targetX={style.targetX}\n                                targetY={style.targetY}\n                            />\n                        )\n                    })}\n                </>\n            )}\n        </TransitionMotion>\n    )\n}\n\nAnimatedLinks.propTypes = {\n    links: PropTypes.array.isRequired,\n    linkThickness: PropTypes.func.isRequired,\n    linkColor: PropTypes.func.isRequired,\n}\n\nexport default memo(AnimatedLinks)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport Link from './Link'\n\nconst StaticLinks = ({ links, linkThickness, linkColor }) => {\n    return links.map(link => {\n        return (\n            <Link\n                key={link.id}\n                link={link}\n                color={linkColor(link)}\n                thickness={linkThickness(link)}\n                sourceX={link.source.x}\n                sourceY={link.source.y}\n                targetX={link.target.x}\n                targetY={link.target.y}\n            />\n        )\n    })\n}\n\nStaticLinks.propTypes = {\n    links: PropTypes.array.isRequired,\n    linkThickness: PropTypes.func.isRequired,\n    linkColor: PropTypes.func.isRequired,\n}\n\nexport default memo(StaticLinks)\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst NetworkNodeTooltip = ({ node, format, tooltip }) => (\n    <BasicTooltip\n        id={node.id}\n        enableChip={true}\n        color={node.color}\n        format={format}\n        renderContent={typeof tooltip === 'function' ? tooltip.bind(null, { ...node }) : null}\n    />\n)\n\nNetworkNodeTooltip.propTypes = {\n    node: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        color: PropTypes.string.isRequired,\n    }).isRequired,\n    format: PropTypes.func,\n    tooltip: PropTypes.func,\n}\n\nexport default memo(NetworkNodeTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { Fragment, useCallback } from 'react'\nimport { withContainer, useDimensions, SvgWrapper, useTheme, useMotionConfig } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { NetworkPropTypes, NetworkDefaultProps } from './props'\nimport { useNetwork, useNodeColor, useLinkThickness } from './hooks'\nimport AnimatedNodes from './AnimatedNodes'\nimport StaticNodes from './StaticNodes'\nimport AnimatedLinks from './AnimatedLinks'\nimport StaticLinks from './StaticLinks'\nimport NetworkNodeTooltip from './NetworkNodeTooltip'\n\nconst Network = props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n\n        nodes: rawNodes,\n        links: rawLinks,\n\n        linkDistance,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n\n        layers,\n\n        nodeColor,\n        nodeBorderWidth,\n        nodeBorderColor,\n\n        linkThickness,\n        linkColor,\n        tooltip,\n        isInteractive,\n        role,\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { animate } = useMotionConfig()\n    const theme = useTheme()\n    const getColor = useNodeColor(nodeColor)\n    const getBorderColor = useInheritedColor(nodeBorderColor, theme)\n    const getLinkThickness = useLinkThickness(linkThickness)\n    const getLinkColor = useInheritedColor(linkColor, theme)\n\n    const [nodes, links] = useNetwork({\n        nodes: rawNodes,\n        links: rawLinks,\n        linkDistance,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        center: [innerWidth / 2, innerHeight / 2],\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleNodeHover = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(<NetworkNodeTooltip node={node} tooltip={tooltip} />, event)\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleNodeLeave = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    const layerById = {\n        links: React.createElement(animate === true ? AnimatedLinks : StaticLinks, {\n            key: 'links',\n            links,\n            linkThickness: getLinkThickness,\n            linkColor: getLinkColor,\n        }),\n        nodes: React.createElement(animate === true ? AnimatedNodes : StaticNodes, {\n            key: 'nodes',\n            nodes,\n            color: getColor,\n            borderWidth: nodeBorderWidth,\n            borderColor: getBorderColor,\n            handleNodeHover: isInteractive ? handleNodeHover : undefined,\n            handleNodeLeave: isInteractive ? handleNodeLeave : undefined,\n        }),\n    }\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                nodes,\n                                links,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nNetwork.propTypes = NetworkPropTypes\nNetwork.defaultProps = NetworkDefaultProps\n\nexport default withContainer(Network)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Network from './Network'\n\nconst ResponsiveNetwork = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Network width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveNetwork\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { useRef, useEffect } from 'react'\nimport { withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { NetworkCanvasPropTypes, NetworkCanvasDefaultProps } from './props'\nimport { useNetwork, useNodeColor, useLinkThickness } from './hooks'\n\nconst NetworkCanvas = props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio,\n\n        nodes: rawNodes,\n        links: rawLinks,\n\n        linkDistance,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n\n        layers,\n\n        nodeColor,\n        nodeBorderWidth,\n        nodeBorderColor,\n\n        linkThickness,\n        linkColor,\n\n        isInteractive,\n    } = props\n\n    const canvasEl = useRef(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const [nodes, links] = useNetwork({\n        nodes: rawNodes,\n        links: rawLinks,\n        linkDistance,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        center: [innerWidth / 2, innerHeight / 2],\n    })\n\n    const theme = useTheme()\n    const getNodeColor = useNodeColor(nodeColor)\n    const getBorderColor = useInheritedColor(nodeBorderColor, theme)\n    const getLinkThickness = useLinkThickness(linkThickness)\n    const getLinkColor = useInheritedColor(linkColor, theme)\n\n    useEffect(() => {\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'links') {\n                links.forEach(link => {\n                    ctx.strokeStyle = getLinkColor(link)\n                    ctx.lineWidth = getLinkThickness(link)\n                    ctx.beginPath()\n                    ctx.moveTo(link.source.x, link.source.y)\n                    ctx.lineTo(link.target.x, link.target.y)\n                    ctx.stroke()\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    ctx.fillStyle = getNodeColor(node)\n                    ctx.beginPath()\n                    ctx.arc(node.x, node.y, node.radius, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (nodeBorderWidth > 0) {\n                        ctx.strokeStyle = getBorderColor(node)\n                        ctx.lineWidth = nodeBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, {\n                    ...props,\n                    nodes,\n                    links,\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        nodes,\n        links,\n        getNodeColor,\n        nodeBorderWidth,\n        getBorderColor,\n        getLinkThickness,\n        getLinkColor,\n    ])\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n        />\n    )\n}\n\nNetworkCanvas.propTypes = NetworkCanvasPropTypes\nNetworkCanvas.defaultProps = NetworkCanvasDefaultProps\n\nexport default withContainer(NetworkCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport NetworkCanvas from './NetworkCanvas'\n\nconst ResponsiveNetworkCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <NetworkCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveNetworkCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { NetworkDefaultProps } from '@nivo/network'\nimport { motionProperties, groupProperties } from '../../../lib/componentProperties'\n\nconst props = [\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            Not required if using responsive component.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            Not required if using responsive component.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'margin',\n        group: 'Base',\n        type: 'object',\n        help: 'Chart margin.',\n        controlType: 'margin',\n        group: 'Base',\n    },\n    {\n        key: 'linkDistance',\n        group: 'Simulation',\n        type: 'number | string | (link: Link) => number',\n        help: `Control links' distance.`,\n        description: `\n            If you set a **number**, this value will be used for all links.\n\n            If you use a **string**, this will be used to pick the distance\n            from the corresponding link property, thus, this property\n            should exist on each link.\n\n            If you use a **function**, it will receive a link and must return\n            the desired distance.\n        `,\n    },\n    {\n        key: 'repulsivity',\n        group: 'Simulation',\n        type: 'number',\n        help: 'Control how nodes repel each other.',\n        description: `\n            This value will also affect the strength\n            of \\`distanceMin\\` and \\`distanceMax\\`.\n        `,\n        controlType: 'range',\n        controlOptions: {\n            min: 1,\n            max: 100,\n        },\n        defaultValue: NetworkDefaultProps.repulsivity,\n    },\n    {\n        key: 'distanceMin',\n        group: 'Simulation',\n        type: 'number',\n        help: 'Sets the minimum distance between nodes for the many-body force.',\n        defaultValue: NetworkDefaultProps.distanceMin,\n    },\n    {\n        key: 'distanceMax',\n        group: 'Simulation',\n        help: 'Sets the maximum distance between nodes for the many-body force.',\n        defaultValue: NetworkDefaultProps.distanceMax,\n    },\n    {\n        key: 'iterations',\n        group: 'Simulation',\n        help: 'Adjust the simulation quality.',\n        description: `\n            Increasing this number will result in a **more accurate simulation**,\n            however it will also involve more computing.\n        `,\n        type: 'number',\n        defaultValue: NetworkDefaultProps.iterations,\n        controlType: 'range',\n        controlOptions: {\n            min: 60,\n            max: 260,\n        },\n    },\n    {\n        key: 'nodeColor',\n        group: 'Nodes',\n        type: 'string | (node: Node) => string',\n        help: `Control nodes' color.`,\n    },\n    {\n        key: 'nodeBorderWidth',\n        group: 'Nodes',\n        type: 'number | (node: Node) => number',\n        help: `Control nodes' border width.`,\n        defaultValue: NetworkDefaultProps.nodeBorderWidth,\n        controlType: 'lineWidth',\n    },\n    {\n        key: 'nodeBorderColor',\n        group: 'Nodes',\n        type: 'string | object | (link: Link) => string',\n        help: `Control nodes' border color.`,\n        defaultValue: NetworkDefaultProps.nodeBorderColor,\n        controlType: 'inheritedColor',\n    },\n    {\n        key: 'linkThickness',\n        enableControlForFlavors: ['canvas'],\n        group: 'Links',\n        type: 'number | (link: Link) => number',\n        help: `Control links' thickness.`,\n        defaultValue: NetworkDefaultProps.linkThickness,\n        controlType: 'lineWidth',\n    },\n    {\n        key: 'linkColor',\n        group: 'Links',\n        type: 'string | (link: Link) => string',\n        help: `Control links' color.`,\n        defaultValue: NetworkDefaultProps.linkColor,\n        controlType: 'inheritedColor',\n        controlOptions: {\n            inheritableProperties: ['source.color', 'target.color'],\n        },\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom tooltip component.',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML\n            element and will receive the node's data.\n        `,\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        required: false,\n        defaultValue: NetworkDefaultProps.layers,\n    },\n    ...motionProperties(['svg'], NetworkDefaultProps),\n]\n\nexport const groups = groupProperties(props)\n"],"sourceRoot":""}