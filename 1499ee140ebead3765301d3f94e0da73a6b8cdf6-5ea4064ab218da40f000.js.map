{"version":3,"file":"1499ee140ebead3765301d3f94e0da73a6b8cdf6-5ea4064ab218da40f000.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-force/src/collide.js","webpack://nivo-website/../node_modules/d3-force/src/x.js","webpack://nivo-website/../node_modules/d3-force/src/y.js","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/SwarmPlotTooltip.tsx","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/Circles.tsx","webpack://nivo-website/../src/CircleSvg.tsx","webpack://nivo-website/../src/SwarmPlotAnnotations.tsx","webpack://nivo-website/../src/SwarmPlot.tsx","webpack://nivo-website/../src/ResponsiveSwarmPlot.tsx","webpack://nivo-website/../src/SwarmPlotCanvas.tsx","webpack://nivo-website/../src/ResponsiveSwarmPlotCanvas.tsx"],"sourcesContent":["import { quadtree } from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nexport default function (radius) {\n  var nodes,\n      radii,\n      random,\n      strength = 1,\n      iterations = 1;\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i,\n        n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data,\n          rj = quad.r,\n          r = ri + rj;\n\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n\n          if (l < r * r) {\n            if (x === 0) x = jiggle(random), l += x * x;\n            if (y === 0) y = jiggle(random), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n\n        return;\n      }\n\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        node;\n    radii = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n    }\n  }\n\n  force.initialize = function (_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.iterations = function (_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}","import constant from \"./constant.js\";\nexport default function (x) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      xz;\n  if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length;\n    strengths = new Array(n);\n    xz = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function (_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n  };\n\n  return force;\n}","import constant from \"./constant.js\";\nexport default function (y) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      yz;\n  if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length;\n    strengths = new Array(n);\n    yz = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function (_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n  };\n\n  return force;\n}","import { ScaleLinearSpec } from '@nivo/scales'\nimport { SwarmPlotLayerId } from './types'\nimport { SwarmPlotTooltip } from './SwarmPlotTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    valueScale: { type: 'linear', min: 0, max: 'auto' } as ScaleLinearSpec,\n    groupBy: 'group',\n    size: 6,\n    spacing: 2,\n    layout: 'vertical' as const,\n    gap: 0,\n    forceStrength: 1,\n    simulationIterations: 120,\n    colors: { scheme: 'nivo' },\n    colorBy: 'group',\n    borderWidth: 0,\n    borderColor: 'rgba(0, 0, 0, 0)',\n    layers: ['grid', 'axes', 'circles', 'annotations', 'mesh'] as SwarmPlotLayerId[],\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisRight: {},\n    axisBottom: {},\n    axisLeft: {},\n    isInteractive: true,\n    useMesh: false,\n    debugMesh: false,\n    tooltip: SwarmPlotTooltip,\n    animate: true,\n    motionConfig: 'gentle',\n    annotations: [],\n    role: 'img',\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const SwarmPlotTooltip = <RawDatum,>({\n    id,\n    formattedValue,\n    color,\n}: ComputedDatum<RawDatum>) => (\n    <BasicTooltip id={id} value={formattedValue} enableChip={true} color={color} />\n)\n","import isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport isString from 'lodash/isString'\nimport get from 'lodash/get'\nimport { scaleLinear, ScaleOrdinal, scaleOrdinal } from 'd3-scale'\nimport { forceSimulation, forceX, forceY, forceCollide, ForceX, ForceY } from 'd3-force'\nimport {\n    computeScale,\n    createDateNormalizer,\n    generateSeriesAxis,\n    ScaleLinear,\n    ScaleLinearSpec,\n    ScaleTime,\n    ScaleTimeSpec,\n} from '@nivo/scales'\nimport { ComputedDatum, PreSimulationDatum, SizeSpec, SimulationForces } from './types'\n\nconst getParsedValue = (scaleSpec: ScaleLinearSpec | ScaleTimeSpec) => {\n    if (scaleSpec.type === 'time' && scaleSpec.format !== 'native') {\n        return createDateNormalizer(scaleSpec) as <T>(value: T) => T\n    }\n\n    return <T>(value: T) => value\n}\n\nexport const computeOrdinalScale = ({\n    width,\n    height,\n    axis,\n    groups,\n    gap,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    groups: string[]\n    gap: number\n}) => {\n    if (!Array.isArray(groups) || groups.length === 0) {\n        throw new Error(`'groups' should be an array containing at least one item`)\n    }\n\n    const groupCount = groups.length\n\n    let groupSize: number\n    if (axis === 'x') {\n        groupSize = (height - gap * (groupCount - 1)) / groupCount\n    } else if (axis === 'y') {\n        groupSize = (width - gap * (groupCount - 1)) / groupCount\n    }\n\n    const range = groups.map((_, i) => i * (groupSize + gap) + groupSize / 2)\n\n    return scaleOrdinal(range).domain(groups)\n}\n\nexport const computeValueScale = <RawDatum>({\n    width,\n    height,\n    axis,\n    getValue,\n    scale,\n    data,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    getValue: (datum: RawDatum) => number | Date\n    scale: ScaleLinearSpec | ScaleTimeSpec\n    data: RawDatum[]\n}) => {\n    const values = data.map(getValue)\n\n    if (scale.type === 'time') {\n        const series = [\n            { data: values.map(value => ({ data: { x: null, y: null, [axis]: value } })) },\n        ]\n        const axes = generateSeriesAxis(series, axis, scale)\n\n        return computeScale(scale, axes, axis === 'x' ? width : height, axis) as ScaleTime<\n            Date | string\n        >\n    }\n\n    const min = Math.min(...(values as number[]))\n    const max = Math.max(...(values as number[]))\n\n    return computeScale(\n        scale,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    ) as ScaleLinear<number>\n}\n\nexport const getSizeGenerator = <RawDatum>(size: SizeSpec<RawDatum>) => {\n    // user defined size function\n    if (typeof size === 'function') {\n        return size\n    }\n\n    // static size\n    if (isNumber(size)) {\n        return () => size\n    }\n\n    // dynamic size based on config\n    if (isPlainObject(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'Size is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'Size is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'Size is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return (d: RawDatum) => sizeScale(get(d, size.key))\n    }\n\n    throw new Error('Size is invalid, it should be either a function, a number or an object')\n}\n\nexport const computeForces = <RawDatum>({\n    axis,\n    valueScale,\n    ordinalScale,\n    spacing,\n    forceStrength,\n}: {\n    axis: 'x' | 'y'\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    ordinalScale: ScaleOrdinal<string, number>\n    spacing: number\n    forceStrength: number\n}): SimulationForces<RawDatum> => {\n    const collisionForce = forceCollide<PreSimulationDatum<RawDatum>>(d => d.size / 2 + spacing / 2)\n\n    let xForce: ForceX<PreSimulationDatum<RawDatum>>\n    let yForce: ForceY<PreSimulationDatum<RawDatum>>\n    if (axis === 'x') {\n        xForce = forceX<PreSimulationDatum<RawDatum>>(d => valueScale(d.value)).strength(\n            forceStrength\n        )\n        yForce = forceY<PreSimulationDatum<RawDatum>>(d => ordinalScale(d.group))\n    } else if (axis === 'y') {\n        xForce = forceX<PreSimulationDatum<RawDatum>>(d => ordinalScale(d.group))\n        yForce = forceY<PreSimulationDatum<RawDatum>>(d => valueScale(d.value)).strength(\n            forceStrength\n        )\n    } else {\n        throw new Error(`Invalid axis provided: ${axis}`)\n    }\n\n    return { x: xForce, y: yForce, collision: collisionForce }\n}\n\nexport const computeNodes = <RawDatum>({\n    data,\n    getId,\n    layout,\n    getValue,\n    valueScale,\n    getGroup,\n    ordinalScale,\n    getSize,\n    forces,\n    simulationIterations,\n    valueScaleConfig,\n}: {\n    data: RawDatum[]\n    getId: (datum: RawDatum) => string\n    layout: 'vertical' | 'horizontal'\n    getValue: (datum: RawDatum) => number | Date\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    getGroup: (datum: RawDatum) => string\n    ordinalScale: ScaleOrdinal<string, number>\n    getSize: (datum: RawDatum) => number\n    forces: SimulationForces<RawDatum>\n    simulationIterations: number\n    valueScaleConfig: ScaleLinearSpec | ScaleTimeSpec\n}) => {\n    const config = {\n        horizontal: ['x', 'y'],\n        vertical: ['y', 'x'],\n    }\n\n    const parseValue = getParsedValue(valueScaleConfig)\n\n    const simulatedNodes: PreSimulationDatum<RawDatum>[] = data.map(d => ({\n        id: getId(d),\n        group: getGroup(d),\n        value: parseValue(getValue(d)),\n        size: getSize(d),\n        data: { ...d },\n    }))\n\n    const simulation = forceSimulation<PreSimulationDatum<RawDatum>>(simulatedNodes)\n        .force('x', forces.x)\n        .force('y', forces.y)\n        .force('collide', forces.collision)\n        .stop()\n\n    simulation.tick(simulationIterations)\n\n    return {\n        [`${config[layout][0]}Scale`]: valueScale,\n        [`${config[layout][1]}Scale`]: ordinalScale,\n        nodes: simulation.nodes() as ComputedDatum<RawDatum>[],\n    }\n}\n","import { useCallback, useMemo } from 'react'\nimport { ScaleOrdinal } from 'd3-scale'\nimport { usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { AnnotationMatcher, useAnnotations } from '@nivo/annotations'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ScaleLinear, ScaleLinearSpec, ScaleTime, ScaleTimeSpec } from '@nivo/scales'\nimport {\n    computeValueScale,\n    computeOrdinalScale,\n    getSizeGenerator,\n    computeForces,\n    computeNodes,\n} from './compute'\nimport {\n    SwarmPlotCommonProps,\n    ComputedDatum,\n    SizeSpec,\n    SwarmPlotCustomLayerProps,\n    MouseHandlers,\n} from './types'\n\nexport const useValueScale = <RawDatum>({\n    width,\n    height,\n    axis,\n    getValue,\n    scale,\n    data,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    getValue: (datum: RawDatum) => number | Date\n    scale: ScaleLinearSpec | ScaleTimeSpec\n    data: RawDatum[]\n}) =>\n    useMemo(\n        () =>\n            computeValueScale<RawDatum>({\n                width,\n                height,\n                axis,\n                getValue,\n                scale,\n                data,\n            }),\n        [width, height, axis, getValue, scale, data]\n    )\n\nexport const useOrdinalScale = ({\n    width,\n    height,\n    axis,\n    groups,\n    gap,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    groups: string[]\n    gap: number\n}) =>\n    useMemo(\n        () => computeOrdinalScale({ width, height, axis, groups, gap }),\n        [width, height, axis, groups, gap]\n    )\n\nconst useSize = <RawDatum>(size: SizeSpec<RawDatum>) =>\n    useMemo(() => getSizeGenerator<RawDatum>(size), [size])\n\nexport const useForces = <RawDatum>({\n    axis,\n    valueScale,\n    ordinalScale,\n    spacing,\n    forceStrength,\n}: {\n    axis: 'x' | 'y'\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    ordinalScale: ScaleOrdinal<string, number>\n    spacing: number\n    forceStrength: number\n}) =>\n    useMemo(\n        () =>\n            computeForces<RawDatum>({\n                axis,\n                valueScale,\n                ordinalScale,\n                spacing,\n                forceStrength,\n            }),\n        [axis, valueScale, ordinalScale, spacing, forceStrength]\n    )\n\nexport const useSwarmPlot = <RawDatum>({\n    data,\n    width,\n    height,\n    id,\n    value,\n    valueFormat,\n    valueScale: valueScaleConfig,\n    groups,\n    groupBy,\n    size,\n    spacing,\n    layout,\n    gap,\n    forceStrength,\n    simulationIterations,\n    colors,\n    colorBy,\n}: {\n    data: RawDatum[]\n    width: number\n    height: number\n    id: SwarmPlotCommonProps<RawDatum>['id']\n    value: SwarmPlotCommonProps<RawDatum>['value']\n    valueScale: SwarmPlotCommonProps<RawDatum>['valueScale']\n    valueFormat?: SwarmPlotCommonProps<RawDatum>['valueFormat']\n    groups: SwarmPlotCommonProps<RawDatum>['groups']\n    groupBy: SwarmPlotCommonProps<RawDatum>['groupBy']\n    size: SwarmPlotCommonProps<RawDatum>['size']\n    spacing: SwarmPlotCommonProps<RawDatum>['spacing']\n    layout: SwarmPlotCommonProps<RawDatum>['layout']\n    gap: SwarmPlotCommonProps<RawDatum>['gap']\n    forceStrength: SwarmPlotCommonProps<RawDatum>['forceStrength']\n    simulationIterations: SwarmPlotCommonProps<RawDatum>['simulationIterations']\n    colors: SwarmPlotCommonProps<RawDatum>['colors']\n    colorBy: SwarmPlotCommonProps<RawDatum>['colorBy']\n}) => {\n    const axis = layout === 'horizontal' ? 'x' : 'y'\n\n    const getId = usePropertyAccessor<RawDatum, string>(id)\n    const getValue = usePropertyAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n    const getGroup = usePropertyAccessor<RawDatum, string>(groupBy)\n    const getSize = useSize<RawDatum>(size)\n    const getColorId = usePropertyAccessor<Omit<ComputedDatum<RawDatum>, 'color'>, string>(colorBy)\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'color'>>(\n        colors,\n        getColorId\n    )\n\n    const valueScale = useValueScale({\n        width,\n        height,\n        axis,\n        getValue,\n        scale: valueScaleConfig,\n        data,\n    })\n\n    const ordinalScale = useOrdinalScale({\n        width,\n        height,\n        axis,\n        groups,\n        gap,\n    })\n\n    const forces = useForces<RawDatum>({\n        axis,\n        valueScale,\n        ordinalScale,\n        spacing,\n        forceStrength,\n    })\n\n    const { nodes, xScale, yScale } = useMemo(\n        () =>\n            computeNodes<RawDatum>({\n                data,\n                getId,\n                layout,\n                getValue,\n                valueScale,\n                getGroup,\n                ordinalScale,\n                getSize,\n                forces,\n                simulationIterations,\n                valueScaleConfig,\n            }),\n        [\n            data,\n            getId,\n            layout,\n            getValue,\n            valueScale,\n            getGroup,\n            ordinalScale,\n            getSize,\n            forces,\n            simulationIterations,\n            valueScaleConfig,\n        ]\n    )\n\n    const augmentedNodes: ComputedDatum<RawDatum>[] = useMemo(\n        () =>\n            nodes.map(node => ({\n                ...node,\n                formattedValue: formatValue(node.value),\n                color: getColor(node),\n            })),\n        [nodes, formatValue, getColor]\n    )\n\n    return {\n        nodes: augmentedNodes,\n        xScale,\n        yScale,\n        getColor,\n    }\n}\n\nexport const useBorderWidth = <RawDatum>(\n    borderWidth: SwarmPlotCommonProps<RawDatum>['borderWidth']\n) =>\n    useMemo(() => {\n        if (typeof borderWidth === 'function') return borderWidth\n        return () => borderWidth\n    }, [borderWidth])\n\nexport const useNodeMouseHandlers = <RawDatum>({\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n    tooltip,\n}: Pick<SwarmPlotCommonProps<RawDatum>, 'isInteractive' | 'tooltip'> & MouseHandlers<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const mouseEnterHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            showTooltipFromEvent(tooltip(node), event)\n            onMouseEnter?.(node, event)\n        },\n        [isInteractive, onMouseEnter, showTooltipFromEvent, tooltip]\n    )\n\n    const mouseMoveHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            showTooltipFromEvent(tooltip(node), event)\n            onMouseMove?.(node, event)\n        },\n        [isInteractive, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const mouseLeaveHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [isInteractive, hideTooltip, onMouseLeave]\n    )\n\n    const clickHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            onClick?.(node, event)\n        },\n        [isInteractive, onClick]\n    )\n\n    return {\n        onMouseEnter: mouseEnterHandler,\n        onMouseMove: mouseMoveHandler,\n        onMouseLeave: mouseLeaveHandler,\n        onClick: clickHandler,\n    }\n}\n\nconst getNodeAnnotationPosition = (node: ComputedDatum<unknown>) => ({\n    x: node.x,\n    y: node.y,\n})\n\nconst getNodeAnnotationDimensions = (node: ComputedDatum<unknown>) => ({\n    size: node.size,\n    width: node.size,\n    height: node.size,\n})\n\nexport const useSwarmPlotAnnotations = <RawDatum>(\n    nodes: ComputedDatum<RawDatum>[],\n    annotations: AnnotationMatcher<ComputedDatum<RawDatum>>[]\n) =>\n    useAnnotations<ComputedDatum<RawDatum>>({\n        data: nodes,\n        annotations,\n        getPosition: getNodeAnnotationPosition,\n        getDimensions: getNodeAnnotationDimensions,\n    })\n\nexport const useSwarmPlotLayerContext = <\n    RawDatum,\n    Scale extends\n        | ScaleLinear<number>\n        | ScaleTime<string | Date>\n        | ScaleOrdinal<string, number, never>\n>({\n    nodes,\n    xScale,\n    yScale,\n    innerWidth,\n    innerHeight,\n    outerWidth,\n    outerHeight,\n    margin,\n}: SwarmPlotCustomLayerProps<RawDatum, Scale>): SwarmPlotCustomLayerProps<RawDatum, Scale> =>\n    useMemo(\n        () => ({\n            nodes,\n            xScale,\n            yScale,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            margin,\n        }),\n        [nodes, xScale, yScale, innerWidth, innerHeight, outerWidth, outerHeight, margin]\n    )\n","import { createElement, useMemo, MouseEvent } from 'react'\nimport * as React from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CircleComponent, MouseHandlers, SwarmPlotCommonProps } from './types'\nimport { useBorderWidth } from './hooks'\n\n/**\n * A negative radius value is invalid for an SVG circle,\n * this custom interpolation makes sure it's either\n * positive or zero.\n */\nexport const interpolateRadius = (radiusValue: SpringValue<number>) =>\n    to([radiusValue], radius => Math.max(0, radius))\n\ntype CirclesProps<RawDatum> = {\n    nodes: ComputedDatum<RawDatum>[]\n    borderWidth: SwarmPlotCommonProps<RawDatum>['borderWidth']\n    borderColor: SwarmPlotCommonProps<RawDatum>['borderColor']\n    component: CircleComponent<RawDatum>\n    isInteractive: SwarmPlotCommonProps<RawDatum>['isInteractive']\n    tooltip: SwarmPlotCommonProps<RawDatum>['tooltip']\n} & MouseHandlers<RawDatum>\n\nconst getTransitionPhases = <RawDatum,>(\n    getBorderColor: (node: ComputedDatum<RawDatum>) => string\n) => ({\n    enter: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n    update: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: node.size / 2,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 1,\n    }),\n    leave: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n})\n\nexport const Circles = <RawDatum,>({\n    nodes,\n    borderWidth,\n    borderColor,\n    component,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: CirclesProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseEnter?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseMove?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        }\n    }, [isInteractive, hideTooltip, onMouseLeave])\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            onClick?.(node, event)\n        }\n    }, [isInteractive, onClick])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getBorderWidth = useBorderWidth<RawDatum>(borderWidth)\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const transitionPhases = useMemo(\n        () => getTransitionPhases<RawDatum>(getBorderColor),\n        [getBorderColor]\n    )\n\n    const transition = useTransition<\n        ComputedDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            radius: number\n            color: string\n            borderColor: string\n            opacity: number\n        }\n    >(nodes, {\n        keys: node => node.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, node) => {\n                return React.createElement(component, {\n                    key: node.id,\n                    node,\n                    style: {\n                        ...transitionProps,\n                        radius: interpolateRadius(transitionProps.radius),\n                        borderWidth: getBorderWidth(node),\n                    },\n                    onMouseEnter: handleMouseEnter,\n                    onMouseMove: handleMouseMove,\n                    onMouseLeave: handleMouseLeave,\n                    onClick: handleClick,\n                })\n            })}\n        </>\n    )\n}\n","import { animated } from '@react-spring/web'\nimport { CircleProps } from './types'\n\nexport const CircleSvg = <RawDatum,>({\n    node,\n    style,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: CircleProps<RawDatum>) => {\n    return (\n        <animated.circle\n            key={node.id}\n            cx={style.x}\n            cy={style.y}\n            r={style.radius}\n            fill={style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            opacity={style.opacity}\n            onMouseEnter={event => onMouseEnter?.(node, event)}\n            onMouseMove={event => onMouseMove?.(node, event)}\n            onMouseLeave={event => onMouseLeave?.(node, event)}\n            onClick={event => onClick?.(node, event)}\n        />\n    )\n}\n","import { Annotation } from '@nivo/annotations'\nimport { ComputedDatum, SwarmPlotSvgProps } from './types'\nimport { useSwarmPlotAnnotations } from './hooks'\n\nexport const SwarmPlotAnnotations = <RawDatum,>({\n    nodes,\n    annotations,\n}: {\n    nodes: ComputedDatum<RawDatum>[]\n    annotations: SwarmPlotSvgProps<RawDatum>['annotations']\n}) => {\n    const boundAnnotations = useSwarmPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { AnyScale } from '@nivo/scales'\nimport { Axes, Grid } from '@nivo/axes'\nimport { Mesh } from '@nivo/voronoi'\nimport { ComputedDatum, SwarmPlotLayerId, SwarmPlotSvgProps } from './types'\nimport { defaultProps } from './props'\nimport { useSwarmPlot, useSwarmPlotLayerContext, useNodeMouseHandlers } from './hooks'\nimport { Circles } from './Circles'\nimport { CircleSvg } from './CircleSvg'\nimport { SwarmPlotAnnotations } from './SwarmPlotAnnotations'\n\ntype InnerSwarmPlotProps<RawDatum> = Partial<\n    Omit<\n        SwarmPlotSvgProps<RawDatum>,\n        'data' | 'groups' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height' | 'isInteractive'>\n\nconst InnerSwarmPlot = <RawDatum,>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueScale = defaultProps.valueScale,\n    valueFormat,\n    groups,\n    groupBy = defaultProps.groupBy,\n    size = defaultProps.size,\n    forceStrength = defaultProps.forceStrength,\n    simulationIterations = defaultProps.simulationIterations,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<Omit<ComputedDatum<RawDatum>, 'color'>>,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    layout = defaultProps.layout,\n    spacing = defaultProps.spacing,\n    gap = defaultProps.gap,\n    layers = defaultProps.layers,\n    circleComponent = CircleSvg,\n    useMesh = defaultProps.useMesh,\n    debugMesh = defaultProps.debugMesh,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    axisTop = defaultProps.axisTop,\n    axisRight = defaultProps.axisRight,\n    axisBottom = defaultProps.axisBottom,\n    axisLeft = defaultProps.axisLeft,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    annotations = defaultProps.annotations,\n    role = defaultProps.role,\n}: InnerSwarmPlotProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, ...props } = useSwarmPlot<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        id,\n        value,\n        valueFormat,\n        valueScale,\n        groups,\n        groupBy,\n        size,\n        spacing,\n        layout,\n        gap,\n        colors,\n        colorBy,\n        forceStrength,\n        simulationIterations,\n    })\n\n    const xScale = props.xScale as Exclude<typeof props.xScale, ComputedDatum<RawDatum>[]>\n    const yScale = props.yScale as Exclude<typeof props.yScale, ComputedDatum<RawDatum>[]>\n\n    const handlers = useNodeMouseHandlers({\n        isInteractive,\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        onMouseMove,\n        tooltip,\n    })\n\n    const layerById: Record<SwarmPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        circles: null,\n        annotations: null,\n        mesh: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as AnyScale) : null}\n                xValues={gridXValues}\n                yScale={enableGridY ? (yScale as AnyScale) : null}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as AnyScale}\n                yScale={yScale as AnyScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop ?? undefined}\n                right={axisRight ?? undefined}\n                bottom={axisBottom ?? undefined}\n                left={axisLeft ?? undefined}\n            />\n        )\n    }\n\n    if (layers.includes('circles')) {\n        layerById.circles = (\n            <Circles<RawDatum>\n                key=\"circles\"\n                nodes={nodes}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                component={circleComponent}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <SwarmPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={handlers.onMouseEnter}\n                onMouseMove={handlers.onMouseMove}\n                onMouseLeave={handlers.onMouseLeave}\n                onClick={handlers.onClick}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    const layerContext = useSwarmPlotLayerContext({\n        nodes,\n        xScale,\n        yScale,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin,\n    })\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (layerById[layer as SwarmPlotLayerId] !== undefined) {\n                    return layerById[layer as SwarmPlotLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const SwarmPlot = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSwarmPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { SwarmPlotSvgProps } from './types'\nimport { SwarmPlot } from './SwarmPlot'\n\ntype ResponsiveSwarmPlotProps<RawDatum> = Partial<\n    Omit<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>\n> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups'>\n\nexport const ResponsiveSwarmPlot = <RawDatum,>(props: ResponsiveSwarmPlotProps<RawDatum>) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <SwarmPlot<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { createElement, useCallback, useEffect, useRef, useState } from 'react'\nimport * as React from 'react'\nimport isNumber from 'lodash/isNumber'\nimport { Container, getRelativeCursor, isCursorInRect, useDimensions, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig, useInheritedColor } from '@nivo/colors'\nimport { AnyScale } from '@nivo/scales'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { ComputedDatum, SwarmPlotCanvasProps } from './types'\nimport { defaultProps } from './props'\nimport { useSwarmPlot } from './hooks'\n\nexport const renderCircleDefault = <RawDatum,>(\n    ctx: CanvasRenderingContext2D,\n    {\n        node,\n        getBorderWidth,\n        getBorderColor,\n    }: {\n        node: ComputedDatum<RawDatum>\n        getBorderWidth: (node: ComputedDatum<RawDatum>) => number\n        getBorderColor: (node: ComputedDatum<RawDatum>) => string\n    }\n) => {\n    const nodeBorderWidth = getBorderWidth(node)\n    if (nodeBorderWidth > 0) {\n        ctx.strokeStyle = getBorderColor(node)\n        ctx.lineWidth = nodeBorderWidth\n    }\n\n    ctx.beginPath()\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n    ctx.fillStyle = node.color\n    ctx.fill()\n\n    if (nodeBorderWidth > 0) {\n        ctx.stroke()\n    }\n}\n\ntype InnerSwarmCanvasPlotProps<RawDatum> = Partial<\n    Omit<\n        SwarmPlotCanvasProps<RawDatum>,\n        'data' | 'groups' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height' | 'isInteractive'>\n\nexport const InnerSwarmPlotCanvas = <RawDatum,>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    valueScale = defaultProps.valueScale,\n    groups,\n    groupBy = defaultProps.groupBy,\n    size = defaultProps.size,\n    forceStrength = defaultProps.forceStrength,\n    simulationIterations = defaultProps.simulationIterations,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<Omit<ComputedDatum<RawDatum>, 'color'>>,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    layout = defaultProps.layout,\n    spacing = defaultProps.spacing,\n    gap = defaultProps.gap,\n    layers = defaultProps.layers,\n    renderCircle = renderCircleDefault,\n    debugMesh = defaultProps.debugMesh,\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop = defaultProps.axisTop,\n    axisRight = defaultProps.axisRight,\n    axisBottom = defaultProps.axisBottom,\n    axisLeft = defaultProps.axisLeft,\n    isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    role = defaultProps.role,\n    pixelRatio = defaultProps.pixelRatio,\n}: InnerSwarmCanvasPlotProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ComputedDatum<RawDatum> | null>(null)\n\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, ...scales } = useSwarmPlot<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        id,\n        value,\n        valueFormat,\n        valueScale,\n        groups,\n        groupBy,\n        size,\n        spacing,\n        layout,\n        gap,\n        colors,\n        colorBy,\n        forceStrength,\n        simulationIterations,\n    })\n\n    const { xScale, yScale } = scales as Record<'xScale' | 'yScale', AnyScale>\n\n    const { delaunay, voronoi } = useVoronoiMesh<ComputedDatum<RawDatum>>({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getBorderWidth = () => 1\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        if (!ctx) return\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (\n                layer === 'grid' &&\n                isNumber(theme.grid.line.strokeWidth) &&\n                theme.grid.line.strokeWidth > 0\n            ) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'circles') {\n                nodes.forEach(node => {\n                    renderCircle(ctx, {\n                        node,\n                        getBorderWidth,\n                        getBorderColor,\n                    })\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh && voronoi) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentNode) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentNode.index)\n                }\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        pixelRatio,\n        margin,\n        theme,\n        layers,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        voronoi,\n        debugMesh,\n        currentNode,\n        nodes,\n        renderCircle,\n        getBorderWidth,\n        getBorderColor,\n    ])\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: React.MouseEvent) => {\n            if (!canvasEl.current) {\n                return null\n            }\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) {\n                return null\n            }\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay, nodes]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const showNodeTooltip = useCallback(\n        (node: ComputedDatum<RawDatum>, event: React.MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                onMouseMove?.(node, event)\n                showNodeTooltip(node, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getNodeFromMouseEvent, setCurrentNode, onMouseMove, showNodeTooltip, hideTooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setCurrentNode(null)\n    }, [hideTooltip, setCurrentNode])\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onClick?.(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            role={role}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const SwarmPlotCanvas = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSwarmPlotCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { SwarmPlotCanvasProps } from './types'\nimport { SwarmPlotCanvas } from './SwarmPlotCanvas'\n\ntype ResponsiveSwarmPlotCanvasProps<RawDatum> = Partial<\n    Omit<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>\n> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups'>\n\nexport const ResponsiveSwarmPlotCanvas = <RawDatum,>(\n    props: ResponsiveSwarmPlotCanvasProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <SwarmPlotCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["x","d","vx","y","vy","nodes","strengths","xz","strength","constant","force","alpha","node","i","n","length","initialize","Array","isNaN","_","arguments","yz","defaultProps","id","value","valueScale","type","min","max","groupBy","size","spacing","layout","gap","forceStrength","simulationIterations","colors","scheme","colorBy","borderWidth","borderColor","layers","enableGridX","enableGridY","axisTop","axisRight","axisBottom","axisLeft","isInteractive","useMesh","debugMesh","tooltip","formattedValue","color","_jsx","BasicTooltip","enableChip","animate","motionConfig","annotations","role","pixelRatio","window","devicePixelRatio","computeForces","xForce","yForce","axis","ordinalScale","collisionForce","radius","radii","random","iterations","tree","xi","yi","ri","ri2","k","quadtree","visitAfter","prepare","index","visit","apply","quad","x0","y0","x1","y1","data","rj","r","l","jiggle","Math","sqrt","_nodes","_random","forceCollide","forceX","forceY","group","Error","collision","useValueScale","width","height","getValue","scale","useMemo","values","map","series","axes","generateSeriesAxis","computeScale","all","computeValueScale","useOrdinalScale","groups","isArray","groupSize","groupCount","range","scaleOrdinal","domain","computeOrdinalScale","useSwarmPlot","valueFormat","valueScaleConfig","getId","usePropertyAccessor","formatValue","useValueFormatter","getGroup","getSize","isNumber","isPlainObject","isString","key","sizes","sizeScale","scaleLinear","get","getSizeGenerator","getColorId","getColor","useOrdinalColorScale","forces","useForces","scaleSpec","config","horizontal","vertical","parseValue","format","createDateNormalizer","simulatedNodes","simulation","forceSimulation","stop","tick","computeNodes","xScale","yScale","getNodeAnnotationPosition","getNodeAnnotationDimensions","Circles","component","onMouseEnter","onMouseMove","onMouseLeave","onClick","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleClick","useMotionConfig","springConfig","theme","useTheme","getBorderWidth","getBorderColor","useInheritedColor","transitionPhases","enter","opacity","update","leave","transition","useTransition","keys","initial","from","immediate","transitionProps","React","style","radiusValue","to","CircleSvg","animated","circle","cx","cy","fill","stroke","strokeWidth","e","SwarmPlotAnnotations","boundAnnotations","useAnnotations","getPosition","getDimensions","useSwarmPlotAnnotations","annotation","Annotation","InnerSwarmPlot","partialMargin","margin","circleComponent","gridXValues","gridYValues","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","props","handlers","useCallback","useNodeMouseHandlers","layerById","grid","circles","mesh","includes","Grid","xValues","yValues","Axes","top","right","bottom","left","Mesh","debug","layerContext","useSwarmPlotLayerContext","SvgWrapper","layer","Fragment","SwarmPlot","renderWrapper","otherProps","Container","ResponsiveSwarmPlot","ResponsiveWrapper","renderCircleDefault","ctx","nodeBorderWidth","strokeStyle","lineWidth","beginPath","arc","PI","fillStyle","InnerSwarmPlotCanvas","renderCircle","canvasEl","useRef","useState","currentNode","setCurrentNode","useVoronoiMesh","points","delaunay","voronoi","useEffect","current","getContext","background","fillRect","save","translate","forEach","line","renderGridLinesToCanvas","renderAxesToCanvas","renderVoronoiToCanvas","renderVoronoiCellToCanvas","getNodeFromMouseEvent","getRelativeCursor","isCursorInRect","nodeIndex","find","showNodeTooltip","handleMouseHover","ref","cursor","SwarmPlotCanvas","ResponsiveSwarmPlotCanvas"],"sourceRoot":""}