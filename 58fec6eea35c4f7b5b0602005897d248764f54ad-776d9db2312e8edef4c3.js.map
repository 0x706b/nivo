{"version":3,"file":"58fec6eea35c4f7b5b0602005897d248764f54ad-776d9db2312e8edef4c3.js","mappings":"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","sources":["webpack://nivo-website/./src/data/components/line/props.ts","webpack://nivo-website/./src/lib/settings.ts","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/./src/data/components/line/defaults.js","webpack://nivo-website/./src/data/components/line/generator.js","webpack://nivo-website/./src/data/components/line/mapper.js"],"sourcesContent":["import { lineCurvePropKeys } from '@nivo/core'\nimport { LineDefaultProps as defaults } from '@nivo/line'\nimport {\n    themeProperty,\n    axesProperties,\n    motionProperties,\n    getLegendsProps,\n    groupProperties,\n    defsProperties,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                id:   string | number\n                data: Array<{\n                    x: number | string | Date\n                    y: number | string | Date\n                }>\n            }>\n            \\`\\`\\`\n        `,\n        required: true,\n        type: 'object[]',\n    },\n    {\n        key: 'xScale',\n        type: 'object',\n        group: 'Base',\n        help: `X scale configuration.`,\n        controlType: 'object',\n        controlOptions: {\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type.`,\n                    type: 'string',\n                    controlType: 'choices',\n                    controlOptions: {\n                        disabled: true,\n                        choices: ['linear', 'point'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'xFormat',\n        group: 'Base',\n        help: 'Optional formatter for x values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'Function | string',\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'yScale',\n        type: 'object',\n        help: `Y scale configuration.`,\n        group: 'Base',\n        controlType: 'object',\n        controlOptions: {\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type.`,\n                    type: 'string',\n                    controlType: 'choices',\n                    controlOptions: {\n                        disabled: true,\n                        choices: ['linear', 'point'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n                {\n                    key: 'stacked',\n                    help: 'Enable/disable stacked mode.',\n                    type: 'boolean',\n                    required: false,\n                    controlType: 'switch',\n                },\n                {\n                    key: 'min',\n                    help: 'Minimum scale value.',\n                    required: false,\n                    type: `number | 'auto'`,\n                    controlType: 'switchableRange',\n                    controlOptions: {\n                        disabledValue: 'auto',\n                        defaultValue: 0,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n                {\n                    key: 'max',\n                    help: 'Maximum scale value.',\n                    required: false,\n                    type: `number | 'auto'`,\n                    controlType: 'switchableRange',\n                    controlOptions: {\n                        disabledValue: 'auto',\n                        defaultValue: 1200,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'yFormat',\n        group: 'Base',\n        help: 'Optional formatter for y values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'Function | string',\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width, not required when using responsive variant.',\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height, not required when using responsive variant.',\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    {\n        key: 'curve',\n        help: 'Curve interpolation.',\n        description: `\n            Defines the curve factory to use for the line generator.\n        `,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.curve,\n        controlType: 'choices',\n        group: 'Style',\n        controlOptions: {\n            choices: lineCurvePropKeys.map((key: string) => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    themeProperty(['svg', 'canvas', 'api']),\n    {\n        key: 'colors',\n        help: 'Defines color range.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: defaults.colors,\n        controlType: 'ordinalColors',\n        group: 'Style',\n    },\n    {\n        key: 'lineWidth',\n        help: 'Line width.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.lineWidth,\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'enableArea',\n        help: 'Enable/disable area below each line.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableArea,\n        controlType: 'switch',\n        group: 'Style',\n    },\n    {\n        key: 'areaBaselineValue',\n        help: 'Define the value to be used for area baseline.',\n        description: `\n            Define the value to be used for area baseline.\n            Please note that this value isn't the\n            position of the baseline but the value used\n            to compute it.\n        `,\n        type: 'number | string | Date',\n        required: false,\n        defaultValue: defaults.areaBaselineValue,\n        controlType: 'range',\n        group: 'Style',\n        controlOptions: {\n            min: 0,\n            max: 200,\n            step: 10,\n        },\n    },\n    {\n        key: 'areaOpacity',\n        help: 'Area opacity (0~1), depends on enableArea.',\n        required: false,\n        defaultValue: defaults.areaOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Style',\n    },\n    {\n        key: 'areaBlendMode',\n        flavors: ['svg'],\n        help: 'Defines CSS mix-blend-mode property.',\n        description: `\n            Defines CSS \\`mix-blend-mode\\` property for areas,\n            see\n            [MDN documentation](https://developer.mozilla.org/fr/docs/Web/CSS/mix-blend-mode).\n        `,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.areaBlendMode,\n        controlType: 'blendMode',\n        group: 'Style',\n    },\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this property to insert extra layers\n            to the chart, this extra layer must be\n            a function which will receive the chart\n            computed data and must return a valid SVG element.\n        `,\n        required: false,\n        defaultValue: defaults.layers,\n    },\n    {\n        key: 'enablePoints',\n        help: 'Enable/disable points.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enablePoints,\n        controlType: 'switch',\n        group: 'Points',\n    },\n    {\n        key: 'pointSymbol',\n        flavors: ['svg'],\n        help:\n            'Overrides default point circle. The function will receive `size`, `color`, `borderWidth` and `borderColor` props and must return a valid SVG element.',\n        type: 'Function',\n        required: false,\n        group: 'Points',\n    },\n    {\n        key: 'pointSize',\n        help: 'Size of the points.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.pointSize,\n        group: 'Points',\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 2,\n            max: 20,\n        },\n    },\n    {\n        key: 'pointColor',\n        help: 'Method to compute points color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.pointColor,\n        group: 'Points',\n        controlType: 'inheritedColor',\n    },\n    {\n        key: 'pointBorderWidth',\n        help: 'Width of the points border.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.pointBorderWidth,\n        group: 'Points',\n        controlType: 'lineWidth',\n    },\n    {\n        key: 'pointBorderColor',\n        help: 'Method to compute points border color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.pointBorderColor,\n        group: 'Points',\n        controlType: 'inheritedColor',\n    },\n    {\n        key: 'enablePointLabel',\n        flavors: ['svg', 'api'],\n        group: 'Points',\n        help: 'Enable/disable points label.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enablePointLabel,\n        controlType: 'switch',\n    },\n    {\n        key: 'pointLabel',\n        flavors: ['svg', 'api'],\n        group: 'Points',\n        help:\n            'Property to use to determine point label. If a function is provided, it will receive current point data and should return the desired label.',\n        type: 'string',\n        required: false,\n        controlType: 'choices',\n        controlOptions: {\n            choices: ['y', 'yFormatted', 'x', 'xFormatted', `d => \\`\\${d.x}: \\${d.y}\\``].map(\n                choice => ({\n                    label: choice,\n                    value: choice,\n                })\n            ),\n        },\n    },\n    {\n        key: 'pointLabelYOffset',\n        flavors: ['svg', 'api'],\n        group: 'Points',\n        help: 'Label Y offset from point shape.',\n        type: 'number',\n        required: false,\n        defaultValue: -12,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: -24,\n            max: 24,\n        },\n    },\n    {\n        key: 'enableGridX',\n        help: 'Enable/disable x grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableGridX,\n        controlType: 'switch',\n        group: 'Grid & Axes',\n    },\n    {\n        key: 'gridXValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for vertical grid lines.',\n        type: 'Array<number | string | Date>',\n        required: false,\n    },\n    {\n        key: 'enableGridY',\n        help: 'Enable/disable y grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableGridY,\n        controlType: 'switch',\n        group: 'Grid & Axes',\n    },\n    {\n        key: 'gridYValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for horizontal grid lines.',\n        type: 'Array<number | string | Date>',\n        required: false,\n    },\n    ...axesProperties(),\n    {\n        key: 'isInteractive',\n        flavors: ['svg', 'canvas'],\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.isInteractive,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'useMesh',\n        flavors: ['svg'],\n        help: 'Use a voronoi mesh to detect mouse interactions, enableSlices must be disabled',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.useMesh,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'debugMesh',\n        flavors: ['svg', 'canvas'],\n        help: 'Display mesh used to detect mouse interactions (voronoi cells).',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.debugMesh,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: `onMouseEnter handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: `onMouseMove handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `onMouseLeave handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `onClick handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `Custom point tooltip`,\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'enableSlices',\n        group: 'Interactivity',\n        flavors: ['svg'],\n        help: `Enable/disable slices tooltip for x or y axis, automatically disable mesh.`,\n        type: `'x' | 'y' | false`,\n        required: false,\n        defaultValue: defaults.enableSlicesTooltip,\n        controlType: 'choices',\n        controlOptions: {\n            choices: [\n                {\n                    label: 'false',\n                    value: false,\n                },\n                {\n                    label: 'x',\n                    value: 'x',\n                },\n                {\n                    label: 'y',\n                    value: 'y',\n                },\n            ],\n        },\n    },\n    {\n        key: 'debugSlices',\n        flavors: ['svg'],\n        help: 'Display area used to detect mouse interactions for slices.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.debugSlices,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'sliceTooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `Custom slice tooltip`,\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'enableCrosshair',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'Enable/disable crosshair.',\n        type: 'boolean',\n        required: false,\n        controlType: 'switch',\n        defaultValue: defaults.enableCrosshair,\n    },\n    {\n        key: 'crosshairType',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        required: false,\n        defaultValue: defaults.crosshairType,\n        help: `Crosshair type, forced to slices axis if enabled.`,\n        type: 'string',\n        controlType: 'choices',\n        controlOptions: {\n            disabled: true,\n            choices: [\n                'x',\n                'y',\n                'top-left',\n                'top',\n                'top-right',\n                'right',\n                'bottom-right',\n                'bottom',\n                'bottom-left',\n                'left',\n                'cross',\n            ].map(v => ({\n                label: v,\n                value: v,\n            })),\n        },\n    },\n    {\n        key: 'legends',\n        flavors: ['svg', 'canvas'],\n        type: 'object[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 4,\n                symbolSize: 20,\n                symbolShape: 'circle',\n                itemDirection: 'left-to-right',\n                itemTextColor: '#777',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1,\n                        },\n                    },\n                ],\n            },\n        },\n    },\n    ...motionProperties(['svg'], defaults, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","import omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\n\nexport const settingsMapper = (mapping: any, { exclude = [] } = {}) => (\n    settings: any,\n    options: any = {}\n) => {\n    const overrides: any = {}\n\n    Object.keys(settings).forEach(key => {\n        if (mapping[key]) {\n            overrides[key] = mapping[key](settings[key], settings, options)\n        }\n    })\n\n    return {\n        ...omit(settings, exclude),\n        ...overrides,\n    }\n}\n\nexport const mapAxis = (type: string) => (value: any, settings: any) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }: { format: any; enabled: boolean }) =>\n    enabled ? format : undefined\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return (d3Format(format) as unknown) as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProp, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProp<X> | null\n        right?: CanvasAxisProp<Y> | null\n        bottom?: CanvasAxisProp<X> | null\n        left?: CanvasAxisProp<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProp<X> | undefined\n            : CanvasAxisProp<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n","import { LineDefaultProps } from '@nivo/line'\n\nexport default {\n    width: 600,\n    height: 400,\n\n    margin: {\n        top: 50,\n        right: 110,\n        bottom: 50,\n        left: 60,\n    },\n\n    xScale: {\n        type: 'point',\n    },\n    xFormat: { format: '', enabled: false },\n    yScale: {\n        type: 'linear',\n        min: 'auto',\n        max: 'auto',\n        stacked: true,\n        reverse: false,\n    },\n    yFormat: { format: ' >-.2f', enabled: true },\n\n    curve: LineDefaultProps.curve,\n\n    axisTop: {\n        enable: false,\n        orient: 'top',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 36,\n    },\n    axisRight: {\n        enable: false,\n        orient: 'right',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 0,\n    },\n    axisBottom: {\n        enable: true,\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'transportation',\n        legendOffset: 36,\n        legendPosition: 'middle',\n    },\n    axisLeft: {\n        enable: true,\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'count',\n        legendOffset: -40,\n        legendPosition: 'middle',\n    },\n\n    enableGridX: LineDefaultProps.enableGridX,\n    enableGridY: LineDefaultProps.enableGridY,\n\n    colors: LineDefaultProps.colors,\n    lineWidth: 2,\n\n    enablePoints: true,\n    pointSize: 10,\n    pointColor: { theme: 'background' },\n    pointBorderWidth: 2,\n    pointBorderColor: { from: 'serieColor' },\n    enablePointLabel: LineDefaultProps.enablePointLabel,\n    pointLabel: LineDefaultProps.pointLabel,\n    pointLabelYOffset: -12,\n\n    enableArea: LineDefaultProps.enableArea,\n    areaBlendMode: LineDefaultProps.areaBlendMode,\n    areaBaselineValue: LineDefaultProps.areaBaselineValue,\n    areaOpacity: LineDefaultProps.areaOpacity,\n\n    isInteractive: LineDefaultProps.isInteractive,\n    enableSlices: false,\n    debugSlices: false,\n\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n","import range from 'lodash/range'\nimport { generateSeries } from '@nivo/generators'\n\nexport const generateLightDataSet = () => {\n    return generateSeries(\n        ['japan', 'france', 'us', 'germany', 'norway'],\n        [\n            'plane',\n            'helicopter',\n            'boat',\n            'train',\n            'subway',\n            'bus',\n            'car',\n            'moto',\n            'bicycle',\n            'horse',\n            'skateboard',\n            'others',\n        ]\n    )\n}\n\nexport const generateHeavyDataSet = () => {\n    return generateSeries(\n        [\n            'japan',\n            'brazil',\n            'france',\n            'us',\n            'germany',\n            'norway',\n            'china',\n            'algeria',\n            'mexico',\n            'finland',\n            'australia',\n        ],\n        range(121)\n    )\n}\n","import { settingsMapper, mapAxis, mapFormat } from '../../../lib/settings'\n\nexport default settingsMapper(\n    {\n        pointLabel: value => {\n            if (value === `d => \\`\\${d.x}: \\${d.y}\\``) return d => `${d.x}: ${d.y}`\n            return value\n        },\n        xFormat: mapFormat,\n        yFormat: mapFormat,\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n    },\n    {\n        exclude: ['enable axisTop', 'enable axisRight', 'enable axisBottom', 'enable axisLeft'],\n    }\n)\n"],"names":["props","key","group","help","description","required","type","controlType","controlOptions","disabled","choices","map","v","label","value","disabledValue","defaultValue","min","max","enableControlForFlavors","unit","step","defaults","lineCurvePropKeys","themeProperty","flavors","defsProperties","choice","axesProperties","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","symbolShape","itemDirection","itemTextColor","onClick","data","alert","JSON","stringify","effects","on","style","itemBackground","itemOpacity","motionProperties","groups","groupProperties","settingsMapper","mapping","exclude","settings","options","overrides","Object","keys","forEach","omit","mapAxis","upperFirst","enable","mapFormat","format","enabled","undefined","_defineProperty","obj","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","getOwnPropertyDescriptors","defineProperties","computeCartesianTicks","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","position","centerScale","line","lineX","lineY","text","textX","textY","isRTL","document","textAlign","textBaseline","translate","d","x","y","ticks","getFormatter","formatter","timeFormat","Date","d3Format","computeGridLines","width","height","_values","isArray","Array","x1","x2","y1","y2","AxisTick","_value","textAnchor","animatedProps","theme","useTheme","useMemo","opacity","cursor","event","transform","dominantBaseline","memoizedAxisTick","memo","Axis","renderTick","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","useSpring","lineX2","lineY2","config","immediate","transition","useTransition","tick","initial","textTransform","from","enter","update","leave","tickIndex","rotate","transitionProps","memoizedAxis","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","axes","top","right","bottom","left","isXAxis","GridLine","_jsx","GridLines","lines","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","_format","ctx","Number","degreesToRadians","String","renderAxesToCanvas","renderGridLinesToCanvas","margin","xFormat","stacked","reverse","yFormat","curve","LineDefaultProps","axisTop","orient","axisRight","axisBottom","axisLeft","enableGridX","enableGridY","colors","lineWidth","enablePoints","pointSize","pointColor","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","pointLabelYOffset","enableArea","areaBlendMode","areaBaselineValue","areaOpacity","isInteractive","enableSlices","debugSlices","enableCrosshair","crosshairType","generateLightDataSet","generateSeries","generateHeavyDataSet","range"],"sourceRoot":""}