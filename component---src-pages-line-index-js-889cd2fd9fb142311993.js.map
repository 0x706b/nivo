{"version":3,"sources":["webpack:///./src/data/components/line/props.js","webpack:///./src/data/components/line/generator.js","webpack:///./src/data/components/line/mapper.js","webpack:///./src/pages/line/index.js","webpack:///./src/data/components/line/defaults.js"],"names":["props","key","group","help","description","required","type","controlType","controlOptions","disabled","choices","map","v","label","value","disabledValue","defaultValue","min","max","enableControlForFlavors","unit","step","defaults","curve","lineCurvePropKeys","themeProperty","colors","lineWidth","enableArea","areaBaselineValue","areaOpacity","flavors","areaBlendMode","defsProperties","layers","enablePoints","pointSize","pointColor","pointBorderWidth","pointBorderColor","enablePointLabel","choice","dotDefaults","labelYOffset","enableGridX","enableGridY","axesProperties","isInteractive","useMesh","debugMesh","enableSlicesTooltip","debugSlices","enableCrosshair","crosshairType","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","symbolShape","itemDirection","itemTextColor","onClick","data","alert","JSON","stringify","effects","on","style","itemBackground","itemOpacity","motionProperties","groups","groupProperties","generateLightDataSet","generateSeries","generateHeavyDataSet","range","settingsMapper","pointLabel","d","x","y","xFormat","mapFormat","yFormat","axisTop","mapAxis","axisRight","axisBottom","axisLeft","exclude","initialProperties","omit","defaultSettings","legends","symbolBorderColor","animate","LineDefaultProps","motionConfig","linearData","id","Line","name","meta","icon","currentFlavor","properties","defaultProperties","propertiesMapper","mapper","generateData","theme","logAction","xScale","point","serieId","color","serieColor","width","height","margin","top","right","bottom","left","format","enabled","yScale","stacked","reverse","enable","orient","tickSize","tickPadding","tickRotation","legendOffset","legendPosition","from","pointLabelYOffset","enableSlices"],"mappings":"kLAmBMA,EAAK,CACP,CACIC,IAAK,OACLC,MAAO,OACPC,KAAM,cACNC,YAAY,2UAYZC,UAAU,EACVC,KAAM,YAEV,CACIL,IAAK,SACLK,KAAM,SACNJ,MAAO,OACPC,KAAK,yBACLI,YAAa,SACbC,eAAgB,CACZR,MAAO,CACH,CACIC,IAAK,OACLE,KAAK,cACLG,KAAM,SACNC,YAAa,UACbC,eAAgB,CACZC,UAAU,EACVC,QAAS,CAAC,SAAU,SAASC,KAAI,SAAAC,GAAC,MAAK,CACnCC,MAAOD,EACPE,MAAOF,WAO/B,CACIX,IAAK,UACLC,MAAO,OACPC,KAAM,mCACNC,YAAY,meAUZC,UAAU,EACVC,KAAM,oBACNC,YAAa,eAEjB,CACIN,IAAK,SACLK,KAAM,SACNH,KAAK,yBACLD,MAAO,OACPK,YAAa,SACbC,eAAgB,CACZR,MAAO,CACH,CACIC,IAAK,OACLE,KAAK,cACLG,KAAM,SACNC,YAAa,UACbC,eAAgB,CACZC,UAAU,EACVC,QAAS,CAAC,SAAU,SAASC,KAAI,SAAAC,GAAC,MAAK,CACnCC,MAAOD,EACPE,MAAOF,QAInB,CACIX,IAAK,UACLE,KAAM,+BACNG,KAAM,UACND,UAAU,EACVE,YAAa,UAEjB,CACIN,IAAK,MACLE,KAAM,uBACNE,UAAU,EACVC,KAAK,kBACLC,YAAa,kBACbC,eAAgB,CACZO,cAAe,OACfC,aAAc,EACdC,KAAM,IACNC,IAAK,MAGb,CACIjB,IAAK,MACLE,KAAM,uBACNE,UAAU,EACVC,KAAK,kBACLC,YAAa,kBACbC,eAAgB,CACZO,cAAe,OACfC,aAAc,KACdC,KAAM,IACNC,IAAK,SAMzB,CACIjB,IAAK,UACLC,MAAO,OACPC,KAAM,mCACNC,YAAY,meAUZC,UAAU,EACVC,KAAM,oBACNC,YAAa,eAEjB,CACIN,IAAK,QACLkB,wBAAyB,CAAC,OAC1BhB,KAAM,2DACNG,KAAM,SACND,UAAU,EACVE,YAAa,QACbL,MAAO,OACPM,eAAgB,CACZY,KAAM,KACNH,IAAK,IACLC,IAAK,IACLG,KAAM,IAGd,CACIpB,IAAK,SACLkB,wBAAyB,CAAC,OAC1BhB,KAAM,4DACNG,KAAM,SACND,UAAU,EACVE,YAAa,QACbL,MAAO,OACPM,eAAgB,CACZY,KAAM,KACNH,IAAK,IACLC,IAAK,IACLG,KAAM,IAGd,CACIpB,IAAK,SACLE,KAAM,gBACNG,KAAM,SACND,UAAU,EACVE,YAAa,SACbL,MAAO,QAEX,CACID,IAAK,QACLE,KAAM,uBACNC,YAAY,mFAGZE,KAAM,SACND,UAAU,EACVW,aAAcM,IAASC,MACvBhB,YAAa,UACbL,MAAO,QACPM,eAAgB,CACZE,QAASc,IAAkBb,KAAI,SAAAV,GAAG,MAAK,CACnCY,MAAOZ,EACPa,MAAOb,QAInBwB,IACA,CACIxB,IAAK,SACLE,KAAM,uBACNG,KAAM,+BACND,UAAU,EACVW,aAAcM,IAASI,OACvBnB,YAAa,gBACbL,MAAO,SAEX,CACID,IAAK,YACLE,KAAM,cACNG,KAAM,SACND,UAAU,EACVW,aAAcM,IAASK,UACvBpB,YAAa,YACbL,MAAO,SAEX,CACID,IAAK,aACLE,KAAM,uCACNG,KAAM,UACND,UAAU,EACVW,aAAcM,IAASM,WACvBrB,YAAa,SACbL,MAAO,SAEX,CACID,IAAK,oBACLE,KAAM,iDACNC,YAAY,iNAMZE,KAAM,yBACND,UAAU,EACVW,aAAcM,IAASO,kBACvBtB,YAAa,QACbL,MAAO,QACPM,eAAgB,CACZS,IAAK,EACLC,IAAK,IACLG,KAAM,KAGd,CACIpB,IAAK,cACLE,KAAM,6CACNE,UAAU,EACVW,aAAcM,IAASQ,YACvBxB,KAAM,SACNC,YAAa,UACbL,MAAO,SAEX,CACID,IAAK,gBACL8B,QAAS,CAAC,OACV5B,KAAM,uCACNC,YAAY,4LAKZE,KAAM,SACND,UAAU,EACVW,aAAcM,IAASU,cACvBzB,YAAa,YACbL,MAAO,UAvQJ,mBAyQJ+B,YAAe,QAAS,CAAC,SAzQrB,CA0QP,CACIhC,IAAK,SACLC,MAAO,gBACPC,KAAM,qDACNC,YAAY,yPAMZC,UAAU,EACVW,aAAcM,IAASY,QAE3B,CACIjC,IAAK,eACLE,KAAM,yBACNG,KAAM,UACND,UAAU,EACVW,aAAcM,IAASa,aACvB5B,YAAa,SACbL,MAAO,UAEX,CACID,IAAK,cACL8B,QAAS,CAAC,OACV5B,KACI,wJACJG,KAAM,WACND,UAAU,EACVH,MAAO,UAEX,CACID,IAAK,YACLE,KAAM,sBACNG,KAAM,SACND,UAAU,EACVW,aAAcM,IAASc,UACvB7B,YAAa,QACbL,MAAO,SACPM,eAAgB,CACZY,KAAM,KACNH,IAAK,EACLC,IAAK,KAGb,CACIjB,IAAK,aACLE,KAAM,kCACNG,KAAM,6BACND,UAAU,EACVW,aAAcM,IAASe,WACvB9B,YAAa,iBACbL,MAAO,UAEX,CACID,IAAK,mBACLE,KAAM,8BACNG,KAAM,SACND,UAAU,EACVW,aAAcM,IAASgB,iBACvB/B,YAAa,YACbL,MAAO,UAEX,CACID,IAAK,mBACLE,KAAM,yCACNG,KAAM,6BACND,UAAU,EACVW,aAAcM,IAASiB,iBACvBhC,YAAa,iBACbL,MAAO,UAEX,CACID,IAAK,mBACL8B,QAAS,CAAC,MAAO,OACjB7B,MAAO,SACPC,KAAM,+BACNG,KAAM,UACND,UAAU,EACVW,aAAcM,IAASkB,iBACvBjC,YAAa,UAEjB,CACIN,IAAK,aACL8B,QAAS,CAAC,MAAO,OACjB7B,MAAO,SACPC,KACI,+IACJG,KAAM,SACND,UAAU,EACVE,YAAa,UACbC,eAAgB,CACZE,QAAS,CAAC,IAAK,aAAc,IAAK,aAAzB,yBAAoEC,KACzE,SAAA8B,GAAM,MAAK,CACP5B,MAAO4B,EACP3B,MAAO2B,QAKvB,CACIxC,IAAK,oBACL8B,QAAS,CAAC,MAAO,OACjB7B,MAAO,SACPC,KAAM,mCACNG,KAAM,SACND,UAAU,EACVW,aAAc0B,IAAYC,aAC1BpC,YAAa,QACbC,eAAgB,CACZY,KAAM,KACNH,KAAM,GACNC,IAAK,KAGb,CACIjB,IAAK,cACLE,KAAM,yBACNG,KAAM,UACND,UAAU,EACVW,aAAcM,IAASsB,YACvBrC,YAAa,SACbL,MAAO,eAEX,CACID,IAAK,cACLC,MAAO,cACPC,KAAM,iDACNG,KAAM,gCACND,UAAU,GAEd,CACIJ,IAAK,cACLE,KAAM,yBACNG,KAAM,UACND,UAAU,EACVW,aAAcM,IAASuB,YACvBtC,YAAa,SACbL,MAAO,eAEX,CACID,IAAK,cACLC,MAAO,cACPC,KAAM,mDACNG,KAAM,gCACND,UAAU,IA3ZP,YA6ZJyC,eA7ZI,CA8ZP,CACI7C,IAAK,gBACL8B,QAAS,CAAC,MAAO,UACjB5B,KAAM,gCACNG,KAAM,UACND,UAAU,EACVW,aAAcM,IAASyB,cACvBxC,YAAa,SACbL,MAAO,iBAEX,CACID,IAAK,UACL8B,QAAS,CAAC,OACV5B,KAAM,iFACNG,KAAM,UACND,UAAU,EACVW,aAAcM,IAAS0B,QACvBzC,YAAa,SACbL,MAAO,iBAEX,CACID,IAAK,YACL8B,QAAS,CAAC,MAAO,UACjB5B,KAAM,kEACNG,KAAM,UACND,UAAU,EACVW,aAAcM,IAAS2B,UACvB1C,YAAa,SACbL,MAAO,iBAEX,CACID,IAAK,eACL8B,QAAS,CAAC,OACV7B,MAAO,gBACPC,KAAK,yDACLG,KAAM,yBACND,UAAU,GAEd,CACIJ,IAAK,cACL8B,QAAS,CAAC,OACV7B,MAAO,gBACPC,KAAK,wDACLG,KAAM,yBACND,UAAU,GAEd,CACIJ,IAAK,eACL8B,QAAS,CAAC,MAAO,UACjB7B,MAAO,gBACPC,KAAK,yDACLG,KAAM,yBACND,UAAU,GAEd,CACIJ,IAAK,UACL8B,QAAS,CAAC,MAAO,UACjB7B,MAAO,gBACPC,KAAK,oDACLG,KAAM,yBACND,UAAU,GAEd,CACIJ,IAAK,UACL8B,QAAS,CAAC,MAAO,UACjB7B,MAAO,gBACPC,KAAK,uBACLG,KAAM,WACND,UAAU,GAEd,CACIJ,IAAK,eACLC,MAAO,gBACP6B,QAAS,CAAC,OACV5B,KAAK,6EACLG,KAAK,oBACLD,UAAU,EACVW,aAAcM,IAAS4B,oBACvB3C,YAAa,UACbC,eAAgB,CACZE,QAAS,CACL,CACIG,MAAO,QACPC,OAAO,GAEX,CACID,MAAO,IACPC,MAAO,KAEX,CACID,MAAO,IACPC,MAAO,QAKvB,CACIb,IAAK,cACL8B,QAAS,CAAC,OACV5B,KAAM,6DACNG,KAAM,UACND,UAAU,EACVW,aAAcM,IAAS6B,YACvB5C,YAAa,SACbL,MAAO,iBAEX,CACID,IAAK,eACL8B,QAAS,CAAC,MAAO,UACjB7B,MAAO,gBACPC,KAAK,uBACLG,KAAM,WACND,UAAU,GAEd,CACIJ,IAAK,kBACL8B,QAAS,CAAC,OACV7B,MAAO,gBACPC,KAAM,4BACNG,KAAM,UACND,UAAU,EACVE,YAAa,SACbS,aAAcM,IAAS8B,iBAE3B,CACInD,IAAK,gBACL8B,QAAS,CAAC,OACV7B,MAAO,gBACPG,UAAU,EACVW,aAAcM,IAAS+B,cACvBlD,KAAK,oDACLG,KAAM,SACNC,YAAa,UACbC,eAAgB,CACZC,UAAU,EACVC,QAAS,CACL,IACA,IACA,WACA,MACA,YACA,QACA,eACA,SACA,cACA,OACA,SACFC,KAAI,SAAAC,GAAC,MAAK,CACRC,MAAOD,EACPE,MAAOF,QAInB,CACIX,IAAK,UACL8B,QAAS,CAAC,MAAO,UACjBzB,KAAM,WACNH,KAAK,4BACLD,MAAO,UACPK,YAAa,QACbC,eAAgB,CACZR,MAAOsD,YAAgB,CAAC,MAAO,WAC/BC,cAAc,EACdC,SAAU,aACVC,cAAc,EACdC,aAAc,SAACC,EAAOC,GAAR,gBACAD,EADA,MACWC,EAAOC,OADlB,KAC6BD,EAAOE,WAClDxC,SAAU,CACNuC,OAAQ,OACRC,UAAW,SACXC,SAAS,EACTC,WAAY,EACZC,WAAY,EACZC,UAAW,IACXC,WAAY,GACZC,aAAc,EACdC,WAAY,GACZC,YAAa,SACbC,cAAe,gBACfC,cAAe,OACfC,QAAS,SAAAC,GACLC,MAAMC,KAAKC,UAAUH,EAAM,KAAM,UAErCI,QAAS,CACL,CACIC,GAAI,QACJC,MAAO,CACHC,eAAgB,qBAChBC,YAAa,SA1lB9B,YAimBJC,YAAiB,CAAC,OAAQ7D,IAAU,kBAG9B8D,EAASC,YAAgBrF,I,kCCvnBtC,yGAWasF,EAAuB,WAChC,OAAOC,YACH,CAAC,QAAS,SAAU,KAAM,UAAW,UACrC,CACI,QACA,aACA,OACA,QACA,SACA,MACA,MACA,OACA,UACA,QACA,aACA,YAKCC,EAAuB,WAChC,OAAOD,YACH,CACI,QACA,SACA,SACA,KACA,UACA,SACA,QACA,UACA,SACA,UACA,aAEJE,IAAM,Q,kCC9Cd,gBAUeC,gBACX,CACIC,WAAY,SAAA7E,GACR,MAAS,0BAALA,EAA8C,SAAA8E,GAAC,OAAOA,EAAEC,EAAT,KAAeD,EAAEE,GAC7DhF,GAEXiF,QAASC,IACTC,QAASD,IACTE,QAASC,YAAQ,OACjBC,UAAWD,YAAQ,SACnBE,WAAYF,YAAQ,UACpBG,SAAUH,YAAQ,SAEtB,CACII,QAAS,CAAC,iBAAkB,mBAAoB,oBAAqB,sB,kCCxB7E,kJAkBMC,EAAiB,iBAChBC,IAAKC,IAAiB,CAAC,QAAS,WADhB,CAEnB1D,SAAS,EACTC,WAAW,EACX0D,QAAS,CACL,CACI9C,OAAQ,eACRC,UAAW,SACXC,SAAS,EACTC,WAAY,IACZC,WAAY,EACZG,aAAc,EACdG,cAAe,gBACfL,UAAW,GACXC,WAAY,GACZe,YAAa,IACbb,WAAY,GACZC,YAAa,SACbsC,kBAAmB,oBACnBnC,QAAS,SAAAC,GACLC,MAAMC,KAAKC,UAAUH,EAAM,KAAM,UAErCI,QAAS,CACL,CACIC,GAAI,QACJC,MAAO,CACHC,eAAgB,qBAChBC,YAAa,OAMjC2B,QAASC,IAAiBD,QAC1BE,aAAcD,IAAiBC,eAG7BC,EAAa,CACf,CACIC,GAAI,eACJvC,KAAM,CACF,CAAEmB,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IACX,CAAED,EAAG,EAAGC,EAAG,IACX,CAAED,EAAG,EAAGC,EAAG,OAwCRoB,UAnCF,WACT,OACI,kBAAC,IAAD,CACIC,KAAK,OACLC,KAAMA,IAAKF,KACXG,KAAK,OACLtF,QAASqF,IAAKrF,QACduF,cAAc,MACdC,WAAYnC,IACZoB,kBAAmBA,EACnBgB,kBAAmBV,IACnBW,iBAAkBC,IAClBC,aAAcrC,MAEb,SAACiC,EAAY7C,EAAMkD,EAAOC,GACvB,OACI,kBAAC,IAAD,eACInD,KAAiC,WAA3B6C,EAAWO,OAAOxH,KAAoB0G,EAAatC,GACrD6C,EAFR,CAGIK,MAAOA,EACPnD,QAAS,SAAAsD,GACLF,EAAU,CACNvH,KAAM,QACNO,MAAM,kBAAmBkH,EAAMC,QAA1B,QAAyCD,EAAMrD,KAAKmB,EAApD,QAA6DkC,EAAMrD,KAAKoB,EAC7EmC,MAAOF,EAAMG,WACbxD,KAAMqD,a,kCC/FtC,gBAUe,KACXI,MAAO,IACPC,OAAQ,IAERC,OAAQ,CACJC,IAAK,GACLC,MAAO,IACPC,OAAQ,GACRC,KAAM,IAGVX,OAAQ,CACJxH,KAAM,SAEVyF,QAAS,CAAE2C,OAAQ,GAAIC,SAAS,GAChCC,OAAQ,CACJtI,KAAM,SACNW,IAAK,OACLC,IAAK,OACL2H,SAAS,EACTC,SAAS,GAEb7C,QAAS,CAAEyC,OAAQ,SAAUC,SAAS,GAEtCpH,MAAOuF,IAAiBvF,MAExB2E,QAAS,CACL6C,QAAQ,EACRC,OAAQ,MACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdvF,OAAQ,GACRwF,aAAc,IAElBhD,UAAW,CACP2C,QAAQ,EACRC,OAAQ,QACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdvF,OAAQ,GACRwF,aAAc,GAElB/C,WAAY,CACR0C,QAAQ,EACRC,OAAQ,SACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdvF,OAAQ,iBACRwF,aAAc,GACdC,eAAgB,UAEpB/C,SAAU,CACNyC,QAAQ,EACRC,OAAQ,OACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdvF,OAAQ,QACRwF,cAAe,GACfC,eAAgB,UAGpBzG,YAAakE,IAAiBlE,YAC9BC,YAAaiE,IAAiBjE,YAE9BnB,OAAQoF,IAAiBpF,OACzBC,UAAW,EAEXQ,cAAc,EACdC,UAAW,GACXC,WAAY,CAAEuF,MAAO,cACrBtF,iBAAkB,EAClBC,iBAAkB,CAAE+G,KAAM,cAC1B9G,iBAAkBsE,IAAiBtE,iBACnCmD,WAAYmB,IAAiBnB,WAC7B4D,mBAAoB,GAEpB3H,WAAYkF,IAAiBlF,WAC7BI,cAAe8E,IAAiB9E,cAChCH,kBAAmBiF,IAAiBjF,kBACpCC,YAAagF,IAAiBhF,YAE9BiB,cAAe+D,IAAiB/D,cAChCyG,cAAc,EACdrG,aAAa,EAEbC,iBAAiB,EACjBC,cAAe","file":"component---src-pages-line-index-js-889cd2fd9fb142311993.js","sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { lineCurvePropKeys, DotsItemDefaultProps as dotDefaults } from '@nivo/core'\nimport { LineDefaultProps as defaults } from '@nivo/line'\nimport {\n    themeProperty,\n    axesProperties,\n    motionProperties,\n    getLegendsProps,\n    groupProperties,\n    defsProperties,\n} from '../../../lib/componentProperties'\n\nconst props = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                id:   string | number\n                data: Array<{\n                    x: number | string | Date\n                    y: number | string | Date\n                }>\n            }>\n            \\`\\`\\`\n        `,\n        required: true,\n        type: 'object[]',\n    },\n    {\n        key: 'xScale',\n        type: 'object',\n        group: 'Base',\n        help: `X scale configuration.`,\n        controlType: 'object',\n        controlOptions: {\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type.`,\n                    type: 'string',\n                    controlType: 'choices',\n                    controlOptions: {\n                        disabled: true,\n                        choices: ['linear', 'point'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'xFormat',\n        group: 'Base',\n        help: 'Optional formatter for x values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'Function | string',\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'yScale',\n        type: 'object',\n        help: `Y scale configuration.`,\n        group: 'Base',\n        controlType: 'object',\n        controlOptions: {\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type.`,\n                    type: 'string',\n                    controlType: 'choices',\n                    controlOptions: {\n                        disabled: true,\n                        choices: ['linear', 'point'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n                {\n                    key: 'stacked',\n                    help: 'Enable/disable stacked mode.',\n                    type: 'boolean',\n                    required: false,\n                    controlType: 'switch',\n                },\n                {\n                    key: 'min',\n                    help: 'Minimum scale value.',\n                    required: false,\n                    type: `number | 'auto'`,\n                    controlType: 'switchableRange',\n                    controlOptions: {\n                        disabledValue: 'auto',\n                        defaultValue: 0,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n                {\n                    key: 'max',\n                    help: 'Maximum scale value.',\n                    required: false,\n                    type: `number | 'auto'`,\n                    controlType: 'switchableRange',\n                    controlOptions: {\n                        disabledValue: 'auto',\n                        defaultValue: 1200,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'yFormat',\n        group: 'Base',\n        help: 'Optional formatter for y values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'Function | string',\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width, not required when using responsive variant.',\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height, not required when using responsive variant.',\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    {\n        key: 'curve',\n        help: 'Curve interpolation.',\n        description: `\n            Defines the curve factory to use for the line generator.\n        `,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.curve,\n        controlType: 'choices',\n        group: 'Style',\n        controlOptions: {\n            choices: lineCurvePropKeys.map(key => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    themeProperty,\n    {\n        key: 'colors',\n        help: 'Defines color range.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: defaults.colors,\n        controlType: 'ordinalColors',\n        group: 'Style',\n    },\n    {\n        key: 'lineWidth',\n        help: 'Line width.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.lineWidth,\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'enableArea',\n        help: 'Enable/disable area below each line.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableArea,\n        controlType: 'switch',\n        group: 'Style',\n    },\n    {\n        key: 'areaBaselineValue',\n        help: 'Define the value to be used for area baseline.',\n        description: `\n            Define the value to be used for area baseline.\n            Please note that this value isn't the\n            position of the baseline but the value used\n            to compute it.\n        `,\n        type: 'number | string | Date',\n        required: false,\n        defaultValue: defaults.areaBaselineValue,\n        controlType: 'range',\n        group: 'Style',\n        controlOptions: {\n            min: 0,\n            max: 200,\n            step: 10,\n        },\n    },\n    {\n        key: 'areaOpacity',\n        help: 'Area opacity (0~1), depends on enableArea.',\n        required: false,\n        defaultValue: defaults.areaOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Style',\n    },\n    {\n        key: 'areaBlendMode',\n        flavors: ['svg'],\n        help: 'Defines CSS mix-blend-mode property.',\n        description: `\n            Defines CSS \\`mix-blend-mode\\` property for areas,\n            see\n            [MDN documentation](https://developer.mozilla.org/fr/docs/Web/CSS/mix-blend-mode).\n        `,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.areaBlendMode,\n        controlType: 'blendMode',\n        group: 'Style',\n    },\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this property to insert extra layers\n            to the chart, this extra layer must be\n            a function which will receive the chart\n            computed data and must return a valid SVG element.\n        `,\n        required: false,\n        defaultValue: defaults.layers,\n    },\n    {\n        key: 'enablePoints',\n        help: 'Enable/disable points.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enablePoints,\n        controlType: 'switch',\n        group: 'Points',\n    },\n    {\n        key: 'pointSymbol',\n        flavors: ['svg'],\n        help:\n            'Overrides default point circle. The function will receive `size`, `color`, `borderWidth` and `borderColor` props and must return a valid SVG element.',\n        type: 'Function',\n        required: false,\n        group: 'Points',\n    },\n    {\n        key: 'pointSize',\n        help: 'Size of the points.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.pointSize,\n        controlType: 'range',\n        group: 'Points',\n        controlOptions: {\n            unit: 'px',\n            min: 2,\n            max: 20,\n        },\n    },\n    {\n        key: 'pointColor',\n        help: 'Method to compute points color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.pointColor,\n        controlType: 'inheritedColor',\n        group: 'Points',\n    },\n    {\n        key: 'pointBorderWidth',\n        help: 'Width of the points border.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.pointBorderWidth,\n        controlType: 'lineWidth',\n        group: 'Points',\n    },\n    {\n        key: 'pointBorderColor',\n        help: 'Method to compute points border color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.pointBorderColor,\n        controlType: 'inheritedColor',\n        group: 'Points',\n    },\n    {\n        key: 'enablePointLabel',\n        flavors: ['svg', 'api'],\n        group: 'Points',\n        help: 'Enable/disable points label.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enablePointLabel,\n        controlType: 'switch',\n    },\n    {\n        key: 'pointLabel',\n        flavors: ['svg', 'api'],\n        group: 'Points',\n        help:\n            'Property to use to determine point label. If a function is provided, it will receive current point data and should return the desired label.',\n        type: 'string',\n        required: false,\n        controlType: 'choices',\n        controlOptions: {\n            choices: ['y', 'yFormatted', 'x', 'xFormatted', `d => \\`\\${d.x}: \\${d.y}\\``].map(\n                choice => ({\n                    label: choice,\n                    value: choice,\n                })\n            ),\n        },\n    },\n    {\n        key: 'pointLabelYOffset',\n        flavors: ['svg', 'api'],\n        group: 'Points',\n        help: 'Label Y offset from point shape.',\n        type: 'number',\n        required: false,\n        defaultValue: dotDefaults.labelYOffset,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: -24,\n            max: 24,\n        },\n    },\n    {\n        key: 'enableGridX',\n        help: 'Enable/disable x grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableGridX,\n        controlType: 'switch',\n        group: 'Grid & Axes',\n    },\n    {\n        key: 'gridXValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for vertical grid lines.',\n        type: 'Array<number | string | Date>',\n        required: false,\n    },\n    {\n        key: 'enableGridY',\n        help: 'Enable/disable y grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableGridY,\n        controlType: 'switch',\n        group: 'Grid & Axes',\n    },\n    {\n        key: 'gridYValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for horizontal grid lines.',\n        type: 'Array<number | string | Date>',\n        required: false,\n    },\n    ...axesProperties(),\n    {\n        key: 'isInteractive',\n        flavors: ['svg', 'canvas'],\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.isInteractive,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'useMesh',\n        flavors: ['svg'],\n        help: 'Use a voronoi mesh to detect mouse interactions, enableSlices must be disabled',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.useMesh,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'debugMesh',\n        flavors: ['svg', 'canvas'],\n        help: 'Display mesh used to detect mouse interactions (voronoi cells).',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.debugMesh,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: `onMouseEnter handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: `onMouseMove handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `onMouseLeave handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `onClick handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `Custom point tooltip`,\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'enableSlices',\n        group: 'Interactivity',\n        flavors: ['svg'],\n        help: `Enable/disable slices tooltip for x or y axis, automatically disable mesh.`,\n        type: `'x' | 'y' | false`,\n        required: false,\n        defaultValue: defaults.enableSlicesTooltip,\n        controlType: 'choices',\n        controlOptions: {\n            choices: [\n                {\n                    label: 'false',\n                    value: false,\n                },\n                {\n                    label: 'x',\n                    value: 'x',\n                },\n                {\n                    label: 'y',\n                    value: 'y',\n                },\n            ],\n        },\n    },\n    {\n        key: 'debugSlices',\n        flavors: ['svg'],\n        help: 'Display area used to detect mouse interactions for slices.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.debugSlices,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'sliceTooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `Custom slice tooltip`,\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'enableCrosshair',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'Enable/disable crosshair.',\n        type: 'boolean',\n        required: false,\n        controlType: 'switch',\n        defaultValue: defaults.enableCrosshair,\n    },\n    {\n        key: 'crosshairType',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        required: false,\n        defaultValue: defaults.crosshairType,\n        help: `Crosshair type, forced to slices axis if enabled.`,\n        type: 'string',\n        controlType: 'choices',\n        controlOptions: {\n            disabled: true,\n            choices: [\n                'x',\n                'y',\n                'top-left',\n                'top',\n                'top-right',\n                'right',\n                'bottom-right',\n                'bottom',\n                'bottom-left',\n                'left',\n                'cross',\n            ].map(v => ({\n                label: v,\n                value: v,\n            })),\n        },\n    },\n    {\n        key: 'legends',\n        flavors: ['svg', 'canvas'],\n        type: 'object[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 4,\n                symbolSize: 20,\n                symbolShape: 'circle',\n                itemDirection: 'left-to-right',\n                itemTextColor: '#777',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1,\n                        },\n                    },\n                ],\n            },\n        },\n    },\n    ...motionProperties(['svg'], defaults, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport range from 'lodash/range'\nimport { generateSeries } from '@nivo/generators'\n\nexport const generateLightDataSet = () => {\n    return generateSeries(\n        ['japan', 'france', 'us', 'germany', 'norway'],\n        [\n            'plane',\n            'helicopter',\n            'boat',\n            'train',\n            'subway',\n            'bus',\n            'car',\n            'moto',\n            'bicycle',\n            'horse',\n            'skateboard',\n            'others',\n        ]\n    )\n}\n\nexport const generateHeavyDataSet = () => {\n    return generateSeries(\n        [\n            'japan',\n            'brazil',\n            'france',\n            'us',\n            'germany',\n            'norway',\n            'china',\n            'algeria',\n            'mexico',\n            'finland',\n            'australia',\n        ],\n        range(121)\n    )\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { settingsMapper, mapAxis, mapFormat } from '../../../lib/settings'\n\nexport default settingsMapper(\n    {\n        pointLabel: value => {\n            if (value === `d => \\`\\${d.x}: \\${d.y}\\``) return d => `${d.x}: ${d.y}`\n            return value\n        },\n        xFormat: mapFormat,\n        yFormat: mapFormat,\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n    },\n    {\n        exclude: ['enable axisTop', 'enable axisRight', 'enable axisBottom', 'enable axisLeft'],\n    }\n)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport omit from 'lodash/omit'\nimport { ResponsiveLine, LineDefaultProps } from '@nivo/line'\nimport ComponentTemplate from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/line/meta.yml'\nimport mapper from '../../data/components/line/mapper'\nimport { groups } from '../../data/components/line/props'\nimport defaultSettings from '../../data/components/line/defaults'\nimport { generateLightDataSet } from '../../data/components/line/generator'\n\nconst initialProperties = {\n    ...omit(defaultSettings, ['width', 'height']),\n    useMesh: true,\n    debugMesh: false,\n    legends: [\n        {\n            anchor: 'bottom-right',\n            direction: 'column',\n            justify: false,\n            translateX: 100,\n            translateY: 0,\n            itemsSpacing: 0,\n            itemDirection: 'left-to-right',\n            itemWidth: 80,\n            itemHeight: 20,\n            itemOpacity: 0.75,\n            symbolSize: 12,\n            symbolShape: 'circle',\n            symbolBorderColor: 'rgba(0, 0, 0, .5)',\n            onClick: data => {\n                alert(JSON.stringify(data, null, '    '))\n            },\n            effects: [\n                {\n                    on: 'hover',\n                    style: {\n                        itemBackground: 'rgba(0, 0, 0, .03)',\n                        itemOpacity: 1,\n                    },\n                },\n            ],\n        },\n    ],\n    animate: LineDefaultProps.animate,\n    motionConfig: LineDefaultProps.motionConfig,\n}\n\nconst linearData = [\n    {\n        id: 'fake corp. A',\n        data: [\n            { x: 0, y: 7 },\n            { x: 1, y: 5 },\n            { x: 2, y: 11 },\n            { x: 3, y: 9 },\n            { x: 4, y: 13 },\n            { x: 7, y: 16 },\n            { x: 9, y: 12 },\n        ],\n    },\n]\n\nconst Line = () => {\n    return (\n        <ComponentTemplate\n            name=\"Line\"\n            meta={meta.Line}\n            icon=\"line\"\n            flavors={meta.flavors}\n            currentFlavor=\"svg\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={LineDefaultProps}\n            propertiesMapper={mapper}\n            generateData={generateLightDataSet}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveLine\n                        data={properties.xScale.type === 'linear' ? linearData : data}\n                        {...properties}\n                        theme={theme}\n                        onClick={point => {\n                            logAction({\n                                type: 'click',\n                                label: `[point] serie: ${point.serieId}, x: ${point.data.x}, y: ${point.data.y}`,\n                                color: point.serieColor,\n                                data: point,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default Line\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { LineDefaultProps } from '@nivo/line'\n\nexport default {\n    width: 600,\n    height: 400,\n\n    margin: {\n        top: 50,\n        right: 110,\n        bottom: 50,\n        left: 60,\n    },\n\n    xScale: {\n        type: 'point',\n    },\n    xFormat: { format: '', enabled: false },\n    yScale: {\n        type: 'linear',\n        min: 'auto',\n        max: 'auto',\n        stacked: true,\n        reverse: false,\n    },\n    yFormat: { format: ' >-.2f', enabled: true },\n\n    curve: LineDefaultProps.curve,\n\n    axisTop: {\n        enable: false,\n        orient: 'top',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 36,\n    },\n    axisRight: {\n        enable: false,\n        orient: 'right',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 0,\n    },\n    axisBottom: {\n        enable: true,\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'transportation',\n        legendOffset: 36,\n        legendPosition: 'middle',\n    },\n    axisLeft: {\n        enable: true,\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'count',\n        legendOffset: -40,\n        legendPosition: 'middle',\n    },\n\n    enableGridX: LineDefaultProps.enableGridX,\n    enableGridY: LineDefaultProps.enableGridY,\n\n    colors: LineDefaultProps.colors,\n    lineWidth: 2,\n\n    enablePoints: true,\n    pointSize: 10,\n    pointColor: { theme: 'background' },\n    pointBorderWidth: 2,\n    pointBorderColor: { from: 'serieColor' },\n    enablePointLabel: LineDefaultProps.enablePointLabel,\n    pointLabel: LineDefaultProps.pointLabel,\n    pointLabelYOffset: -12,\n\n    enableArea: LineDefaultProps.enableArea,\n    areaBlendMode: LineDefaultProps.areaBlendMode,\n    areaBaselineValue: LineDefaultProps.areaBaselineValue,\n    areaOpacity: LineDefaultProps.areaOpacity,\n\n    isInteractive: LineDefaultProps.isInteractive,\n    enableSlices: false,\n    debugSlices: false,\n\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n"],"sourceRoot":""}