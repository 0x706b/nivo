{"version":3,"file":"component---src-pages-guides-axes-tsx-8c096dd3874ca2fc5b8d.js","mappings":"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","sources":["webpack://nivo-website/./src/components/PageContent.ts","webpack://nivo-website/./src/components/styled.ts","webpack://nivo-website/./src/components/guides/axes/scales.tsx","webpack://nivo-website/./src/components/guides/axes/theme.tsx","webpack://nivo-website/./src/components/guides/axes/AxesLegend.tsx","webpack://nivo-website/./src/components/guides/axes/AxesPosition.tsx","webpack://nivo-website/./src/components/guides/axes/AxesTicks.tsx","webpack://nivo-website/./src/pages/guides/axes.tsx","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../node_modules/lodash/_baseForOwn.js","webpack://nivo-website/../node_modules/lodash/_baseUniq.js","webpack://nivo-website/../node_modules/lodash/_createSet.js","webpack://nivo-website/../node_modules/lodash/noop.js","webpack://nivo-website/../node_modules/lodash/uniq.js"],"sourcesContent":["import styled from 'styled-components'\nimport media from '../theming/mediaQueries'\n\nexport default styled.div`\n    margin: 0 50px;\n    position: relative;\n\n    ${media.tablet`\n        & {\n            margin: 0 30px;\n        }\n    `}\n\n    ${media.mobile`\n        & {\n            margin: 0 15px;\n        }\n    `}\n`\n","import styled from 'styled-components'\nimport media from '../theming/mediaQueries'\n\nexport const FullWidthBanner = styled.div`\n    background: ${({ theme }) => theme.colors.cardBackground};\n    margin-bottom: 40px;\n    padding: 20px;\n`\n\nexport const DescriptionBlock = styled.div`\n    max-width: 800px;\n    margin: 0 auto 50px;\n\n    ${media.tablet`\n        & {\n            margin: 0 15px 50px;\n        }\n    `}\n\n    ${media.mobile`\n        & {\n            margin: 0 15px 50px;\n        }\n    `}\n`\n\nexport const Card = styled.div`\n    background: ${({ theme }) => theme.colors.cardBackground};\n    box-shadow: ${({ theme }) => theme.cardShadow};\n`\n","import { scaleLinear, scalePoint, scaleTime } from 'd3-scale'\nimport { castLinearScale } from '@nivo/scales'\n\nexport const linearXScale = castLinearScale(scaleLinear().range([0, 280]).domain([0, 80]))\n\nexport const linearYScale = castLinearScale(scaleLinear().range([160, 0]).domain([0, 35]))\n\nexport const pointXScale = scalePoint()\n    .range([0, 280])\n    .domain(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'])\npointXScale.type = 'point'\n\nexport const timeXScale = scaleTime()\n    .range([0, 280])\n    .domain([new Date(2019, 0, 1, 0, 0, 0, 0), new Date(2020, 0, 1, 0, 0, 0, 0)])\ntimeXScale.type = 'time'\n\nexport const timeXScaleHours = scaleTime()\n    .range([0, 280])\n    .domain([\n        new Date(Date.UTC(2020, 0, 1, 9, 0, 0, 0)),\n        new Date(Date.UTC(2020, 0, 1, 10, 0, 0, 0)),\n    ])\ntimeXScaleHours.type = 'time'\n","import { useMemo } from 'react'\nimport { Theme } from '@nivo/core'\nimport { useTheme } from 'styled-components'\n\nexport const useAxisTheme = (): Theme => {\n    const theme = useTheme()\n    const nivoTheme: Theme = useMemo(() => {\n        return {\n            ...theme.nivo,\n            axis: {\n                ...theme.nivo.axis,\n                domain: {\n                    ...theme.nivo.axis!.domain,\n                    line: {\n                        ...theme.nivo.axis!.domain!.line,\n                        strokeWidth: 1,\n                    },\n                },\n                legend: {\n                    ...theme.nivo.axis!.legend,\n                    text: {\n                        ...theme.nivo.axis!.legend!.text,\n                        fill: theme.colors.accent,\n                    },\n                },\n            },\n        }\n    }, [theme])\n\n    return nivoTheme\n}\n","import React from 'react'\nimport {\n    ThemeProvider,\n    // @ts-ignore\n    MotionConfigProvider,\n} from '@nivo/core'\nimport { Axis } from '@nivo/axes'\nimport { linearXScale, linearYScale } from './scales'\nimport { FullWidthBanner, DescriptionBlock } from '../../styled'\nimport { useAxisTheme } from './theme'\n\nconst axisPositions = ['start', 'middle', 'end'] as const\n\nexport const AxesLegend = () => {\n    const theme = useAxisTheme()\n\n    return (\n        <>\n            <DescriptionBlock>\n                <h2 id=\"legend\">Axis legend</h2>\n                <p>\n                    You can optionally add a legend to an axis by setting the value of the{' '}\n                    <code>legend</code> property.\n                </p>\n                <h3 id=\"legend-position\">Legend position</h3>\n                <p>\n                    Legend position is controlled by two properties, <code>legendPosition</code> and{' '}\n                    <code>legendOffset</code>.<code>legendPosition</code> must be one of:{' '}\n                    <code>start</code>, <code>middle</code> or <code>end</code>,{' '}\n                    <code>legendOffset</code> will affect y position for <strong>top</strong> and{' '}\n                    <strong>bottom</strong> axes and x position for <strong>left</strong> and{' '}\n                    <strong>right</strong> axes.\n                </p>\n            </DescriptionBlock>\n            <FullWidthBanner>\n                <ThemeProvider theme={theme}>\n                    <MotionConfigProvider animate={false}>\n                        <div\n                            className=\"guide__illustrations\"\n                            style={{ justifyContent: 'center', alignItems: 'center' }}\n                        >\n                            <svg role=\"img\" width={380} height={180}>\n                                {axisPositions.map((position, i) => (\n                                    <g key={position} transform={`translate(50,${i * 70 + 40})`}>\n                                        <Axis\n                                            axis=\"x\"\n                                            scale={linearXScale}\n                                            length={280}\n                                            legend={position}\n                                            legendPosition={position}\n                                            legendOffset={-32}\n                                            ticksPosition=\"before\"\n                                        />\n                                    </g>\n                                ))}\n                            </svg>\n                            <svg role=\"img\" width={260} height={260}>\n                                {axisPositions.map((position, i) => (\n                                    <g key={position} transform={`translate(${i * 90 + 50},50)`}>\n                                        <Axis\n                                            axis=\"y\"\n                                            scale={linearYScale}\n                                            length={160}\n                                            legend={position}\n                                            legendPosition={position}\n                                            legendOffset={-32}\n                                            ticksPosition=\"before\"\n                                        />\n                                    </g>\n                                ))}\n                            </svg>\n                        </div>\n                    </MotionConfigProvider>\n                </ThemeProvider>\n            </FullWidthBanner>\n        </>\n    )\n}\n","import React from 'react'\nimport {\n    ThemeProvider,\n    // @ts-ignore\n    MotionConfigProvider,\n} from '@nivo/core'\nimport { Axes } from '@nivo/axes'\nimport { linearXScale, linearYScale } from './scales'\nimport { FullWidthBanner, DescriptionBlock } from '../../styled'\nimport { useAxisTheme } from './theme'\n\nexport const AxesPosition = () => {\n    const theme = useAxisTheme()\n\n    return (\n        <>\n            <DescriptionBlock>\n                <h2 id=\"position\">Axis position</h2>\n                <p>\n                    Axis position is determined by the property you use{' '}\n                    <strong>(top|right|bottom|left)Axis</strong>.\n                </p>\n            </DescriptionBlock>\n            <FullWidthBanner>\n                <div className=\"guide__illustrations\">\n                    <svg role=\"img\" width={380} height={260}>\n                        <g transform=\"translate(50,50)\">\n                            <ThemeProvider theme={theme}>\n                                <MotionConfigProvider animate={false}>\n                                    <Axes\n                                        xScale={linearXScale}\n                                        yScale={linearYScale}\n                                        width={280}\n                                        height={160}\n                                        top={{\n                                            legend: 'axisTop',\n                                            legendPosition: 'middle',\n                                            legendOffset: -32,\n                                        }}\n                                        right={{\n                                            legend: 'axisRight',\n                                            legendPosition: 'middle',\n                                            legendOffset: 42,\n                                        }}\n                                        bottom={{\n                                            legend: 'axisBottom',\n                                            legendPosition: 'middle',\n                                            legendOffset: 38,\n                                        }}\n                                        left={{\n                                            legend: 'axisLeft',\n                                            legendPosition: 'middle',\n                                            legendOffset: -36,\n                                        }}\n                                    />\n                                </MotionConfigProvider>\n                            </ThemeProvider>\n                        </g>\n                    </svg>\n                </div>\n            </FullWidthBanner>\n        </>\n    )\n}\n","import React from 'react'\nimport {\n    ThemeProvider,\n    // @ts-ignore\n    MotionConfigProvider,\n} from '@nivo/core'\nimport { Axis } from '@nivo/axes'\nimport { linearXScale, pointXScale, timeXScale, timeXScaleHours } from './scales'\nimport { FullWidthBanner, DescriptionBlock } from '../../styled'\nimport { useAxisTheme } from './theme'\n\nexport const AxesTicks = () => {\n    const theme = useAxisTheme()\n\n    return (\n        <>\n            <DescriptionBlock>\n                <h2 id=\"ticks\">Axis ticks</h2>\n                <p>\n                    Axes are composed of <strong>ticks</strong>, you can control the way they are\n                    computed and their aspect. By default, computing which ticks are displayed is\n                    managed by the corresponding{' '}\n                    <a\n                        href=\"https://github.com/d3/d3-scale\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        d3 scale\n                    </a>\n                    .\n                </p>\n                <h3 id=\"ticks-values\">Ticks values</h3>\n                <p>\n                    You can use the <code>tickValues</code> property in order to customize the\n                    displayed ticks, it accepts several forms:\n                </p>\n                <ul>\n                    <li>\n                        an array of values, which should be numbers for a linear scale, values being\n                        part of the dataset for point scales, or dates for time scales.\n                    </li>\n                    <li>\n                        a number which define the number of ticks to display,{' '}\n                        <strong>doesn't work with point scale</strong>, also note that when using\n                        this form{' '}\n                        <strong>\n                            it's not guaranteed that you'll have exactly the number of ticks you\n                            asked for\n                        </strong>{' '}\n                        as d3 will make an educated guess to define them.\n                    </li>\n                    <li>\n                        a time interval, for example <code>every day</code> or{' '}\n                        <code>every 15 minutes</code>,{' '}\n                        <strong>only works when using time scales</strong>.\n                    </li>\n                </ul>\n            </DescriptionBlock>\n            <FullWidthBanner>\n                <ThemeProvider theme={theme}>\n                    <MotionConfigProvider animate={false}>\n                        <div\n                            className=\"guide__illustrations\"\n                            style={{ justifyContent: 'center', alignItems: 'center' }}\n                        >\n                            <svg role=\"img\" width={380} height={191}>\n                                <g transform={`translate(50,50)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={pointXScale as any}\n                                        tickValues={['A', 'C', 'E', 'G', 'I']}\n                                        length={280}\n                                        legend=\"point scale ['A', 'C', 'E', 'G', 'I']\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                                <g transform={`translate(50,120)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={linearXScale}\n                                        tickValues={[0, 20, 40, 60, 80]}\n                                        length={280}\n                                        legend=\"linear scale [0, 20, 40, 60, 80]\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                                <g transform={`translate(50,190)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={timeXScale as any}\n                                        tickValues={[\n                                            new Date(2019, 0, 1, 0, 0, 0, 0),\n                                            new Date(2019, 6, 1, 0, 0, 0, 0),\n                                            new Date(2020, 0, 1, 0, 0, 0, 0),\n                                        ]}\n                                        length={280}\n                                        format=\"%Y/%m\"\n                                        legend=\"time scale with three dates\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                            </svg>\n                            <svg role=\"img\" width={380} height={191}>\n                                <g transform={`translate(50,50)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={timeXScaleHours as any}\n                                        tickValues=\"every 15 minutes\"\n                                        format=\"%H:%M\"\n                                        length={280}\n                                        legend=\"time scale, every 15 minutes\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                                <g transform={`translate(50,120)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={linearXScale}\n                                        tickValues={5}\n                                        length={280}\n                                        legend=\"linear scale, tickValues: 5\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                                <g transform={`translate(50,190)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={timeXScale as any}\n                                        tickValues={5}\n                                        length={280}\n                                        format=\"%Y/%m\"\n                                        legend=\"time scale, tickValues: 5\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                            </svg>\n                        </div>\n                    </MotionConfigProvider>\n                </ThemeProvider>\n            </FullWidthBanner>\n        </>\n    )\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport Layout from '../../components/Layout'\nimport { Seo } from '../../components/Seo'\nimport PageContent from '../../components/PageContent'\nimport { AxesPosition, AxesTicks, AxesLegend } from '../../components/guides/axes'\nimport { DescriptionBlock } from '../../components/styled'\n\nconst AxesGuide = () => {\n    return (\n        <Layout>\n            <Seo title=\"Axes Guide\" description=\"Using chart axes in nivo components.\" />\n            <PageContent>\n                <div className=\"guide__header\">\n                    <h1>Axes</h1>\n                </div>\n            </PageContent>\n            <DescriptionBlock>\n                <h2>Using axes in nivo components</h2>\n                <p>\n                    Axes are built on top of{' '}\n                    <a\n                        href=\"https://github.com/d3/d3-scale\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        d3 scales\n                    </a>\n                    . A lot of nivo components make use of it (<Link to=\"/bar/\">Bar</Link>,{' '}\n                    <Link to=\"/line/\">Line</Link>, <Link to=\"/scatterplot/\">ScatterPlot</Link>\n                    …).\n                </p>\n            </DescriptionBlock>\n            <AxesPosition />\n            <AxesTicks />\n            <AxesLegend />\n        </Layout>\n    )\n}\n\nexport default AxesGuide\n","import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map((value: Value) => ({\n        key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProps, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProps<X> | null\n        right?: CanvasAxisProps<Y> | null\n        bottom?: CanvasAxisProps<X> | null\n        left?: CanvasAxisProps<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProps<X> | undefined\n            : CanvasAxisProps<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    cacheHas = require('./_cacheHas'),\n    createSet = require('./_createSet'),\n    setToArray = require('./_setToArray');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseUniq;\n","var Set = require('./_Set'),\n    noop = require('./noop'),\n    setToArray = require('./_setToArray');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\nmodule.exports = createSet;\n","/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = noop;\n","var baseUniq = require('./_baseUniq');\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nmodule.exports = uniq;\n"],"names":["styled","media","FullWidthBanner","theme","colors","cardBackground","DescriptionBlock","Card","cardShadow","linearXScale","castLinearScale","scaleLinear","range","domain","linearYScale","pointXScale","scalePoint","type","timeXScale","scaleTime","Date","timeXScaleHours","UTC","useAxisTheme","useTheme","useMemo","nivo","axis","line","strokeWidth","legend","text","fill","accent","axisPositions","AxesLegend","id","animate","className","style","justifyContent","alignItems","role","width","height","map","position","i","transform","scale","length","legendPosition","legendOffset","ticksPosition","AxesPosition","xScale","yScale","top","right","bottom","left","AxesTicks","href","target","rel","tickValues","format","Layout","Seo","title","description","PageContent","Link","to","computeCartesianTicks","translate","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","centerScale","lineX","lineY","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","x","d","y","ticks","value","key","valueOf","getFormatter","formatter","timeFormat","d3Format","computeGridLines","_values","Array","isArray","lines","x1","x2","y1","y2","memoizedAxisTick","memo","_value","onClick","textAnchor","animatedProps","props","opacity","cursor","event","_jsxs","animated","g","_jsx","dominantBaseline","textTransform","memoizedAxis","renderTick","AxisTick","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","springConfig","config","useSpring","lineX2","lineY2","immediate","transition","useTransition","keys","t","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","rotate","axisPropTypes","PropTypes","axisPropType","positions","Axes","axes","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","_format","save","font","fontWeight","fontSize","fontFamily","lineWidth","Number","lineCap","stroke","strokeStyle","beginPath","moveTo","lineTo","forEach","degreesToRadians","fillStyle","fillText","String","restore","renderAxesToCanvas","renderGridLinesToCanvas","baseFor","module","exports","object","iteratee","SetCache","arrayIncludes","arrayIncludesWith","cacheHas","createSet","setToArray","array","comparator","index","includes","isCommon","result","seen","set","outer","computed","seenIndex","push","Set","noop","baseUniq"],"sourceRoot":""}