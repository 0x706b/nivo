{"version":3,"file":"component---src-pages-treemap-html-js-4a44c15ee25a69447f86.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-time/src/day.js","webpack://nivo-website/../node_modules/d3-time/src/duration.js","webpack://nivo-website/../node_modules/d3-time/src/interval.js","webpack://nivo-website/./src/data/components/treemap/generator.ts","webpack://nivo-website/./src/data/components/treemap/mapper.ts","webpack://nivo-website/./src/data/components/treemap/props.ts","webpack://nivo-website/./src/lib/settings.ts","webpack://nivo-website/../src/color.ts","webpack://nivo-website/../src/sets/countryCodes.ts","webpack://nivo-website/../src/sets/names.ts","webpack://nivo-website/../src/sets/programmingLanguages.ts","webpack://nivo-website/../src/bullet.ts","webpack://nivo-website/../src/chord.ts","webpack://nivo-website/../src/network.ts","webpack://nivo-website/../src/parallelCoordinates.ts","webpack://nivo-website/../src/sankey.ts","webpack://nivo-website/../src/swarmplot.ts","webpack://nivo-website/../src/index.ts","webpack://nivo-website/./src/pages/treemap/html.js","webpack://nivo-website/../node_modules/lodash/_arrayShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/_baseShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseValues.js","webpack://nivo-website/../node_modules/lodash/_shuffleSelf.js","webpack://nivo-website/../node_modules/lodash/random.js","webpack://nivo-website/../node_modules/lodash/shuffle.js","webpack://nivo-website/../node_modules/lodash/values.js"],"sourcesContent":["import interval from \"./interval.js\";\nimport { durationDay, durationMinute } from \"./duration.js\";\nvar day = interval(function (date) {\n  date.setHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setDate(date.getDate() + step);\n}, function (start, end) {\n  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n}, function (date) {\n  return date.getDate() - 1;\n});\nexport default day;\nexport var days = day.range;","export var durationSecond = 1e3;\nexport var durationMinute = 6e4;\nexport var durationHour = 36e5;\nexport var durationDay = 864e5;\nexport var durationWeek = 6048e5;","var t0 = new Date(),\n    t1 = new Date();\nexport default function newInterval(floori, offseti, count, field) {\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;\n  }\n\n  interval.floor = function (date) {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = function (date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function (date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function (date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function (start, stop, step) {\n    var range = [],\n        previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n\n    do {\n      range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    } while (previous < start && start < stop);\n\n    return range;\n  };\n\n  interval.filter = function (test) {\n    return newInterval(function (date) {\n      if (date >= date) while (floori(date), !test(date)) {\n        date.setTime(date - 1);\n      }\n    }, function (date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function (start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function (step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n        return field(d) % step === 0;\n      } : function (d) {\n        return interval.count(0, d) % step === 0;\n      });\n    };\n  }\n\n  return interval;\n}","import { generateLibTree } from '@nivo/generators'\nimport range from 'lodash/range'\nimport random from 'lodash/random'\n\nexport const generateLightDataSet = () => ({ root: generateLibTree() })\n\nconst HEAVY_NODE_COUNT = 600\n\nexport const generateHeavyDataSet = () => {\n    const children = range(HEAVY_NODE_COUNT).map(i => ({\n        id: `node.${i}`,\n        value: random(10, 100000),\n    }))\n\n    return {\n        root: {\n            id: 'root',\n            children,\n        },\n        nodeCount: HEAVY_NODE_COUNT,\n    }\n}\n","import { settingsMapper, mapFormat } from '../../../lib/settings'\n\nexport default settingsMapper({\n    label: value => {\n        if (value === `node => \\`\\${node.id} (\\${node.formattedValue})\\``)\n            return node => `${node.id} (${node.formattedValue})`\n        return value\n    },\n    parentLabel: value => {\n        if (value === `node => node.pathComponents.join(' / ')`)\n            return node => node.pathComponents.join(' / ')\n        return value\n    },\n    valueFormat: mapFormat,\n})\n","// @ts-ignore\nimport { TreeMapDefaultProps } from '@nivo/treemap'\nimport {\n    motionProperties,\n    defsProperties,\n    groupProperties,\n    themeProperty,\n} from '../../../lib/componentProperties'\nimport { chartDimensions, ordinalColors, isInteractive } from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg', 'html', 'canvas', 'api']\n\nconst defaults = TreeMapDefaultProps\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'The hierarchical data object.',\n        type: 'object',\n        required: true,\n    },\n    {\n        key: 'identity',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'The key or function to use to retrieve nodes identity.',\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaults.identity,\n    },\n    {\n        key: 'value',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'The key or function to use to retrieve nodes value.',\n        type: 'string | Function',\n        required: false,\n        defaultValue: 'value',\n    },\n    {\n        key: 'valueFormat',\n        help: `\n            Value format supporting d3-format notation, this formatted value\n            will then be used for labels and tooltips.\n        `,\n        flavors: allFlavors,\n        type: 'string | Function',\n        required: false,\n        control: { type: 'valueFormat' },\n        group: 'Base',\n    },\n    {\n        key: 'tile',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Strategy used to compute nodes.',\n        description: `\n            Strategy used to compute nodes, see\n            [official d3 documentation](https://github.com/mbostock/d3/wiki/Treemap-Layout#mode).\n        `,\n        type: 'string',\n        required: false,\n        defaultValue: 'squarify',\n        control: {\n            type: 'choices',\n            choices: [\n                { label: 'binary', value: 'binary' },\n                { label: 'squarify', value: 'squarify' },\n                { label: 'slice', value: 'slice' },\n                { label: 'dice', value: 'dice' },\n                { label: 'sliceDice', value: 'sliceDice' },\n                {\n                    label: 'resquarify',\n                    value: 'resquarify',\n                },\n            ],\n        },\n    },\n    {\n        key: 'leavesOnly',\n        help: 'Only render leaf nodes (no parent).',\n        flavors: allFlavors,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.leavesOnly,\n        control: { type: 'switch' },\n        group: 'Base',\n    },\n    {\n        key: 'innerPadding',\n        help: 'Padding between parent and child node.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.innerPadding,\n        group: 'Base',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 32,\n        },\n    },\n    {\n        key: 'outerPadding',\n        help: 'Padding between parent and child node.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.outerPadding,\n        group: 'Base',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 32,\n        },\n    },\n    ...chartDimensions(allFlavors),\n    themeProperty(allFlavors),\n    ordinalColors({\n        flavors: allFlavors,\n        defaultValue: defaults.colors,\n    }),\n    {\n        key: 'nodeOpacity',\n        help: 'Node opacity (0~1).',\n        flavors: allFlavors,\n        required: false,\n        defaultValue: defaults.nodeOpacity,\n        type: 'number',\n        control: { type: 'opacity' },\n        group: 'Style',\n    },\n    {\n        key: 'borderWidth',\n        help: 'Control node border width.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.borderWidth,\n        control: { type: 'lineWidth' },\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute border color.',\n        flavors: allFlavors,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.borderColor,\n        control: { type: 'inheritedColor' },\n        group: 'Style',\n    },\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'enableLabel',\n        help: 'Enable/disable labels.',\n        flavors: allFlavors,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableLabel,\n        control: { type: 'switch' },\n        group: 'Labels',\n    },\n    {\n        key: 'label',\n        help: 'Label accessor.',\n        flavors: allFlavors,\n        description:\n            'Defines how to get label text, can be a string (used to access current node property) or a function which will receive the actual node and must return the desired label.',\n        type: 'string | Function',\n        required: false,\n        group: 'Labels',\n        control: {\n            type: 'choices',\n            choices: [\n                'formattedValue',\n                'id',\n                `node => \\`\\${node.id} (\\${node.formattedValue})\\``,\n            ].map(prop => ({\n                label: prop,\n                value: prop,\n            })),\n        },\n    },\n    {\n        key: 'labelSkipSize',\n        help: 'Skip label rendering if node minimal side length is lower than given value, 0 to disable.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        group: 'Labels',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 100,\n        },\n    },\n    {\n        key: 'orientLabel',\n        help: 'Orient labels according to max node width/height.',\n        flavors: allFlavors,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.orientLabel,\n        control: { type: 'switch' },\n        group: 'Labels',\n    },\n    {\n        key: 'labelTextColor',\n        help: 'Method to compute label text color.',\n        flavors: allFlavors,\n        type: 'string | object | Function',\n        required: false,\n        control: { type: 'inheritedColor' },\n        group: 'Labels',\n    },\n    {\n        key: 'enableParentLabel',\n        flavors: ['svg', 'html', 'api'],\n        help: 'Enable/disable labels.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableParentLabel,\n        control: { type: 'switch' },\n        group: 'Labels',\n    },\n    {\n        key: 'parentLabel',\n        flavors: ['svg', 'html', 'api'],\n        help: 'Parent label accessor.',\n        description:\n            'Defines how to get parent label text, can be a string (used to access current node property) or a function which will receive the actual node and must return the desired label.',\n        type: 'string | Function',\n        required: false,\n        group: 'Labels',\n        control: {\n            type: 'choices',\n            choices: ['id', 'formattedValue', `node => node.pathComponents.join(' / ')`].map(\n                prop => ({\n                    label: prop,\n                    value: prop,\n                })\n            ),\n        },\n    },\n    {\n        key: 'parentLabelSize',\n        flavors: ['svg', 'html', 'api'],\n        help: `Parent label size.`,\n        required: false,\n        defaultValue: defaults.parentLabelSize,\n        type: `number`,\n        group: 'Labels',\n        control: {\n            type: 'range',\n            min: 10,\n            max: 40,\n        },\n    },\n    {\n        key: 'parentLabelPosition',\n        flavors: ['svg', 'html', 'api'],\n        help: 'Parent label position.',\n        type: `'top' | 'right' | 'bottom' | 'left'`,\n        required: false,\n        group: 'Labels',\n        defaultValue: defaults.parentLabelPosition,\n        control: {\n            type: 'choices',\n            choices: ['top', 'right', 'bottom', 'left'].map(prop => ({\n                label: prop,\n                value: prop,\n            })),\n        },\n    },\n    {\n        key: 'parentLabelPadding',\n        flavors: ['svg', 'html', 'api'],\n        help: `Parent label padding.`,\n        required: false,\n        defaultValue: defaults.parentLabelPadding,\n        type: `number`,\n        group: 'Labels',\n        control: {\n            type: 'range',\n            min: 0,\n            max: 20,\n        },\n    },\n    {\n        key: 'parentLabelTextColor',\n        flavors: ['svg', 'html', 'api'],\n        help: 'Method to compute parent label text color.',\n        type: 'string | object | Function',\n        required: false,\n        control: { type: 'inheritedColor' },\n        group: 'Labels',\n    },\n    isInteractive({\n        flavors: ['svg', 'html', 'canvas'],\n        defaultValue: defaults.isInteractive,\n    }),\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg', 'html'],\n        group: 'Interactivity',\n        type: '(node, event) => void',\n        help: 'onMouseEnter handler.',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg', 'html', 'canvas'],\n        group: 'Interactivity',\n        type: '(node, event) => void',\n        help: 'onMouseMove handler.',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg', 'html'],\n        group: 'Interactivity',\n        type: '(node, event) => void',\n        help: 'onMouseLeave handler.',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg', 'html', 'canvas'],\n        group: 'Interactivity',\n        type: '(node, event) => void',\n        help: 'onClick handler.',\n        required: false,\n    },\n    ...motionProperties(['svg', 'html', 'canvas'], defaults, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","import omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\n\nexport const settingsMapper =\n    (mapping: any, { exclude = [] }: { exclude?: string[] } = {}) =>\n    (settings: any, options: any = {}) => {\n        const overrides: any = {}\n\n        Object.keys(settings).forEach(key => {\n            if (mapping[key]) {\n                overrides[key] = mapping[key](settings[key], settings, options)\n            }\n        })\n\n        return {\n            ...omit(settings, exclude),\n            ...overrides,\n        }\n    }\n\nexport const mapAxis = (type: string) => (value: any, settings: any) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }: { format: any; enabled: boolean }) =>\n    enabled ? format : undefined\n","export const randColor = () => `hsl(${Math.round(Math.random() * 360)}, 70%, 50%)`\n","export const countryCodes = [\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AS',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CC',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CU',\n    'CV',\n    'CW',\n    'CX',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FM',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HM',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IR',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KP',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MH',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MP',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NF',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PW',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SY',\n    'SZ',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'UM',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VI',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n]\n","export const names = [\n    'John',\n    'Raoul',\n    'Jane',\n    'Marcel',\n    'Ibrahim',\n    'Junko',\n    'Lyu',\n    'André',\n    'Maki',\n    'Véronique',\n    'Thibeau',\n    'Josiane',\n    'Raphaël',\n    'Mathéo',\n    'Margot',\n    'Hugo',\n    'Christian',\n    'Louis',\n    'Ella',\n    'Alton',\n    'Jimmy',\n    'Guillaume',\n    'Sébastien',\n    'Alfred',\n    'Bon',\n    'Solange',\n    'Kendrick',\n    'Jared',\n    'Satoko',\n    'Tomoko',\n    'Line',\n    'Delphine',\n    'Leonard',\n    'Alphonse',\n    'Lisa',\n    'Bart',\n    'Benjamin',\n    'Homer',\n    'Jack',\n]\n","export const programmingLanguages = [\n    'php',\n    'make',\n    'javascript',\n    'go',\n    'erlang',\n    'elixir',\n    'lisp',\n    'haskell',\n    'python',\n    'ruby',\n    'hack',\n    'scala',\n    'java',\n    'rust',\n    'c',\n    'css',\n    'sass',\n    'stylus',\n]\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\ntype Options = Partial<{\n    float: boolean\n    markerCount: number\n    measureCount: number\n    rangeCount: number\n    subtitle: string\n    title: string\n}>\n\nexport const generateBulletData = (\n    id: string,\n    max: number,\n    {\n        title,\n        subtitle,\n        rangeCount = 5,\n        measureCount = 1,\n        markerCount = 1,\n        float = false,\n    }: Options = {}\n) => {\n    const ranges = range(rangeCount - 1).reduce(\n        acc => {\n            const remaining = max - acc[0]\n            return [random(remaining, float), ...acc]\n        },\n        [max]\n    )\n\n    const measures = range(measureCount).reduce<number[]>(acc => {\n        if (acc.length === 0) return [random(max, float)]\n        return [random(acc[0], float), ...acc]\n    }, [])\n\n    const markers = range(markerCount).map(() => max * 0.6 + random(max * 0.4))\n\n    return {\n        id,\n        title,\n        subtitle,\n        ranges,\n        measures,\n        markers,\n    }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport { names } from './sets'\n\nexport const generateChordData = ({\n    keys = names,\n    size = 7,\n    minValue = 0,\n    maxValue = 2000,\n} = {}) => {\n    const maxSize = Math.min(keys.length, size)\n    const selectedKeys = keys.slice(0, maxSize)\n\n    const matrix = range(maxSize).map(() =>\n        range(maxSize).map(() => {\n            if (Math.random() < 0.66) return random(minValue, maxValue / 4)\n            return random(minValue, maxValue)\n        })\n    )\n\n    return { matrix, keys: selectedKeys }\n}\n","import random from 'lodash/random'\n\ntype Link = {\n    distance: number\n    source: string\n    target: string\n}\n\ntype ExtraNode = {\n    color: string\n    depth: number\n    id: string\n    radius: number\n}\n\nexport const generateNetworkData = ({\n    rootNodeRadius = 12,\n    minMidNodes = 6,\n    maxMidNodes = 16,\n    midNodeRadius = 8,\n    minLeaves = 4,\n    maxLeaves = 16,\n    leafRadius = 4,\n} = {}) => {\n    const rootNode = {\n        id: '0',\n        radius: rootNodeRadius,\n        depth: 0,\n        color: 'rgb(244, 117, 96)',\n    }\n    let nodes = Array.from({ length: random(minMidNodes, maxMidNodes) }, (_, k) => ({\n        id: `${k + 1}`,\n        radius: midNodeRadius,\n        depth: 1,\n        color: 'rgb(97, 205, 187)',\n    }))\n\n    const links: Link[] = []\n    const extraNodes: ExtraNode[] = []\n    nodes.forEach(source => {\n        links.push({\n            source: '0',\n            target: source.id,\n            distance: 50,\n        })\n        nodes.forEach(target => {\n            if (Math.random() < 0.04) {\n                links.push({\n                    source: source.id,\n                    target: target.id,\n                    distance: 70,\n                })\n            }\n        })\n        Array.from({ length: random(minLeaves, maxLeaves) }, (_, k) => {\n            extraNodes.push({\n                id: `${source.id}.${k}`,\n                radius: leafRadius,\n                depth: 2,\n                color: 'rgb(232, 193, 160)',\n            })\n            links.push({\n                source: source.id,\n                target: `${source.id}.${k}`,\n                distance: 30,\n            })\n\n            return null\n        })\n    })\n\n    nodes.push(rootNode)\n    nodes = nodes.concat(extraNodes)\n\n    return { nodes, links }\n}\n","import random from 'lodash/random'\nimport range from 'lodash/range'\nimport shuffle from 'lodash/shuffle'\n\ntype Options = Partial<{\n    size: number\n    keys: Array<{\n        key: string\n        random?: [number, number]\n        shuffle?: string[]\n    }>\n}>\n\nexport const generateParallelCoordinatesData = ({\n    size = 26,\n    keys = [\n        { key: 'temp', random: [-10, 40] },\n        { key: 'cost', random: [200, 400000] },\n        { key: 'color', shuffle: ['red', 'yellow', 'green'] },\n        { key: 'target', shuffle: ['A', 'B', 'C', 'D', 'E'] },\n        { key: 'volume', random: [0.2, 7.6] },\n    ],\n}: Options = {}) => {\n    const datumGenerator = () =>\n        keys.reduce((acc, key) => {\n            let value\n            if (key.random !== undefined) {\n                value = random(...key.random)\n            } else if (key.shuffle !== undefined) {\n                value = shuffle(key.shuffle)[0]\n            }\n\n            return { ...acc, [key.key]: value }\n        }, {})\n\n    return range(size).map(datumGenerator)\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { randColor } from './color'\nimport { names } from './sets'\n\ntype Link = {\n    source: string\n    target: string\n    value: number\n}\n\nconst availableNodes = names.map(name => ({ id: name }))\n\nconst getNodeTargets = (id: string, links: Link[], currentPath?: string[]): string[] => {\n    const targets = links\n        .filter(({ source }) => source === id)\n        .map(({ target }) => {\n            if (target === id) {\n                throw new Error(\n                    `[sankey] a node cannot be linked on itself:\\n  link: ${id} —> ${id}`\n                )\n            }\n            if (currentPath?.includes(target)) {\n                throw new Error(\n                    `[sankey] found cyclic dependency:\\n  link: ${currentPath.join(\n                        ' —> '\n                    )} —> ${target}`\n                )\n            }\n            return target\n        })\n\n    return targets.reduce(\n        (acc, targetId) =>\n            acc.concat(\n                getNodeTargets(\n                    targetId,\n                    links,\n                    currentPath ? [...currentPath, targetId] : [id, targetId]\n                )\n            ),\n        targets\n    )\n}\n\nconst getNodesTargets = (links: Link[]) =>\n    links.reduce<Record<string, string[]>>((targetsById, link) => {\n        if (!targetsById[link.source]) {\n            targetsById[link.source] = getNodeTargets(link.source, links)\n        }\n\n        return targetsById\n    }, {})\n\nexport const generateSankeyData = ({\n    nodeCount,\n    maxIterations = 3,\n}: {\n    nodeCount?: number\n    maxIterations?: number\n} = {}) => {\n    const nodes = availableNodes.slice(0, nodeCount).map(node =>\n        Object.assign({}, node, {\n            nodeColor: randColor(),\n        })\n    )\n\n    const links: Link[] = []\n    shuffle(nodes).forEach(({ id }) => {\n        range(random(1, maxIterations)).forEach(() => {\n            const targetsById = getNodesTargets(links)\n            const randId = shuffle(nodes.filter(n => n.id !== id).map(n => n.id))[0]\n            if (\n                (!targetsById[randId] || !targetsById[randId].includes(id)) &&\n                (!targetsById[id] || !targetsById[id].includes(randId))\n            ) {\n                links.push({\n                    source: id,\n                    target: randId,\n                    value: random(5, 200),\n                })\n            }\n        })\n    })\n\n    return { nodes, links }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\n\ntype SwarmPlotDatum = {\n    id: string\n    categories?: number[]\n    group: string\n    price: number\n    volume: number\n}\n\nconst randomPrice = () => random(0, 500)\nconst randomVolume = () => random(4, 20)\nconst randomCategory = () => random(3, 17)\n\nexport const generateSwarmPlotData = (\n    groups: string[],\n    { min = 60, max = 100, categoryCount = 0 }\n) => ({\n    groups,\n    data: groups.reduce<SwarmPlotDatum[]>(\n        (acc, group, groupIndex) => [\n            ...acc,\n            ...range(random(min, max))\n                .map(() => randomPrice())\n                .map((price, index) => {\n                    const datum: SwarmPlotDatum = {\n                        id: `${groupIndex}.${index}`,\n                        group,\n                        price,\n                        volume: randomVolume(),\n                    }\n\n                    if (categoryCount > 0) {\n                        datum.categories = range(categoryCount).map(randomCategory)\n                    }\n\n                    return datum\n                }),\n        ],\n        []\n    ),\n})\n\nexport const randomizeSwarmPlotData = (previousData: ReturnType<typeof generateSwarmPlotData>) => ({\n    groups: previousData.groups,\n    data: previousData.data.map(d => {\n        const datum = {\n            ...d,\n            group: shuffle(previousData.groups)[0],\n            price: randomPrice(),\n            volume: randomVolume(),\n        }\n\n        if (d.categories !== undefined) {\n            datum.categories = range(3).map(randomCategory)\n        }\n\n        return datum\n    }),\n})\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { timeDays } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport * as color from './color'\nimport * as sets from './sets'\n\nexport { sets }\nexport const randColor = color.randColor\n\nexport const generateProgrammingLanguageStats = (shouldShuffle = true, limit = -1) => {\n    let langs = sets.programmingLanguages\n    if (shouldShuffle) {\n        langs = shuffle(langs)\n    }\n    if (limit < 1) {\n        limit = 1 + Math.round(Math.random() * (sets.programmingLanguages.length - 1))\n    }\n\n    return langs.slice(0, limit).map(language => ({\n        label: language,\n        value: Math.round(Math.random() * 600),\n        color: randColor(),\n    }))\n}\n\nexport const uniqRand = <T>(generator: (...args: unknown[]) => T) => {\n    const used: T[] = []\n\n    return (...args: unknown[]) => {\n        let value\n        do {\n            value = generator(...args)\n        } while (used.includes(value))\n\n        used.push(value)\n\n        return value\n    }\n}\n\nexport const randCountryCode = () => shuffle(sets.countryCodes)[0]\n\ntype DrinkDatum = {\n    id: string\n    color: string\n    data: Array<{\n        color: string\n        x: string\n        y: number\n    }>\n}\n\nexport const generateDrinkStats = (xSize = 16) => {\n    const rand = () => random(0, 60)\n    const types = ['whisky', 'rhum', 'gin', 'vodka', 'cognac']\n    const country = uniqRand(randCountryCode)\n\n    const data: DrinkDatum[] = types.map(id => ({\n        id,\n        color: randColor(),\n        data: [],\n    }))\n\n    range(xSize).forEach(() => {\n        const x = country()\n        types.forEach(id => {\n            data.find(d => d.id === id)?.data.push({\n                color: randColor(),\n                x,\n                y: rand(),\n            })\n        })\n    })\n\n    return data\n}\n\nexport const generateSerie = (xSize = 20) => {\n    const max = 100 + Math.random() * (Math.random() * 600)\n\n    return range(xSize).map(() => Math.round(Math.random() * max))\n}\n\nexport const generateSeries = (ids: string[], xKeys: string[]) =>\n    ids.map(id => ({\n        id,\n        color: randColor(),\n        data: xKeys.map(x => ({ x, y: Math.round(Math.random() * 300) })),\n    }))\n\nexport const generateStackData = (size = 3) => {\n    const length = 16\n    return range(size).map(() => generateSerie(length).map((v, i) => ({ x: i, y: v })))\n}\n\nexport const generateCountriesPopulation = (size: number) => {\n    const countryCode = uniqRand(randCountryCode)\n\n    return range(size).map(() => ({\n        country: countryCode(),\n        population: 200 + Math.round(Math.random() * Math.random() * 1000000),\n    }))\n}\n\nexport const generateOrderedDayCounts = (from: Date, to: Date) => {\n    const days = timeDays(from, to)\n    const dayFormat = timeFormat('%Y-%m-%d')\n\n    return days.map(day => {\n        return {\n            value: Math.round(Math.random() * 400),\n            day: dayFormat(day),\n        }\n    })\n}\n\nexport const generateDayCounts = (from: Date, to: Date, maxSize = 0.9) => {\n    const days = generateOrderedDayCounts(from, to)\n\n    const size =\n        Math.round(days.length * (maxSize * 0.4)) +\n        Math.round(Math.random() * (days.length * (maxSize * 0.6)))\n\n    return shuffle(days).slice(0, size)\n}\n\nexport const generateCountriesData = (\n    keys: string[],\n    { size = 12, min = 0, max = 200, withColors = true } = {}\n) =>\n    sets.countryCodes.slice(0, size).map(country => {\n        const d: Record<string, unknown> = {\n            country,\n        }\n        keys.forEach(key => {\n            d[key] = random(min, max)\n            if (withColors === true) {\n                d[`${key}Color`] = randColor()\n            }\n        })\n\n        return d\n    })\n\nconst libTreeItems = [\n    [\n        'viz',\n        [\n            ['stack', [['cchart'], ['xAxis'], ['yAxis'], ['layers']]],\n            [\n                'ppie',\n                [\n                    ['chart', [['pie', [['outline'], ['slices'], ['bbox']]], ['donut'], ['gauge']]],\n                    ['legends'],\n                ],\n            ],\n        ],\n    ],\n    ['colors', [['rgb'], ['hsl']]],\n    [\n        'utils',\n        [['randomize'], ['resetClock'], ['noop'], ['tick'], ['forceGC'], ['stackTrace'], ['dbg']],\n    ],\n    ['generators', [['address'], ['city'], ['animal'], ['movie'], ['user']]],\n    [\n        'set',\n        [\n            ['clone'],\n            ['intersect'],\n            ['merge'],\n            ['reverse'],\n            ['toArray'],\n            ['toObject'],\n            ['fromCSV'],\n            ['slice'],\n            ['append'],\n            ['prepend'],\n            ['shuffle'],\n            ['pick'],\n            ['plouc'],\n        ],\n    ],\n    [\n        'text',\n        [\n            ['trim'],\n            ['slugify'],\n            ['snakeCase'],\n            ['camelCase'],\n            ['repeat'],\n            ['padLeft'],\n            ['padRight'],\n            ['sanitize'],\n            ['ploucify'],\n        ],\n    ],\n    [\n        'misc',\n        [\n            ['greetings', [['hey'], ['HOWDY'], ['aloha'], ['AHOY']]],\n            ['other'],\n            [\n                'path',\n                [\n                    ['pathA'],\n                    ['pathB', [['pathB1'], ['pathB2'], ['pathB3'], ['pathB4']]],\n                    [\n                        'pathC',\n                        [\n                            ['pathC1'],\n                            ['pathC2'],\n                            ['pathC3'],\n                            ['pathC4'],\n                            ['pathC5'],\n                            ['pathC6'],\n                            ['pathC7'],\n                            ['pathC8'],\n                            ['pathC9'],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n]\n\nexport const generateLibTree = (name = 'nivo', limit?: number | null, children = libTreeItems) => {\n    limit = limit || children.length\n    if (limit > children.length) {\n        limit = children.length\n    }\n\n    const tree: Record<string, unknown> = {\n        name,\n        color: randColor(),\n    }\n    if (children?.length > 0) {\n        tree.children = range(limit).map((_, i) => {\n            const leaf = children[i]\n\n            // full path `${name}.${leaf[0]}`\n            return generateLibTree(leaf[0] as string, null, (leaf[1] ?? []) as any)\n        })\n    } else {\n        tree.loc = Math.round(Math.random() * 200000)\n    }\n\n    return tree\n}\n\nconst wines = ['chardonay', 'carmenere', 'syrah']\nconst wineTastes = ['fruity', 'bitter', 'heavy', 'strong', 'sunny']\n\nexport const generateWinesTastes = ({ randMin = 20, randMax = 120 } = {}) => {\n    const data = wineTastes.map(taste => {\n        const d: Record<string, unknown> = { taste }\n        wines.forEach(wine => {\n            d[wine] = random(randMin, randMax)\n        })\n\n        return d\n    })\n\n    return { data, keys: wines }\n}\n\nexport * from './bullet'\nexport * from './chord'\nexport * from './network'\nexport * from './parallelCoordinates'\nexport * from './sankey'\nexport * from './swarmplot'\n","import React from 'react'\nimport { ResponsiveTreeMapHtml, TreeMapDefaultProps } from '@nivo/treemap'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/treemap/meta.yml'\nimport mapper from '../../data/components/treemap/mapper'\nimport { groups } from '../../data/components/treemap/props'\nimport { generateLightDataSet } from '../../data/components/treemap/generator'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst initialProperties = {\n    identity: 'name',\n    value: 'loc',\n    valueFormat: { format: '.02s', enabled: true },\n    tile: TreeMapDefaultProps.tile,\n    leavesOnly: TreeMapDefaultProps.leavesOnly,\n    innerPadding: TreeMapDefaultProps.innerPadding,\n    outerPadding: TreeMapDefaultProps.outerPadding,\n\n    margin: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10,\n    },\n\n    enableLabel: true,\n    label: TreeMapDefaultProps.label,\n    labelSkipSize: 12,\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 2]],\n    },\n    orientLabel: TreeMapDefaultProps.orientLabel,\n    enableParentLabel: TreeMapDefaultProps.enableParentLabel,\n    parentLabel: TreeMapDefaultProps.parentLabel,\n    parentLabelSize: TreeMapDefaultProps.parentLabelSize,\n    parentLabelPosition: TreeMapDefaultProps.parentLabelPosition,\n    parentLabelPadding: TreeMapDefaultProps.parentLabelPadding,\n    parentLabelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 3]],\n    },\n\n    colors: { scheme: 'yellow_orange_red' },\n    colorBy: TreeMapDefaultProps.colorBy,\n    nodeOpacity: TreeMapDefaultProps.nodeOpacity,\n    borderWidth: TreeMapDefaultProps.borderWidth,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.1]],\n    },\n\n    animate: TreeMapDefaultProps.animate,\n    motionConfig: TreeMapDefaultProps.motionConfig,\n\n    isInteractive: TreeMapDefaultProps.isInteractive,\n}\n\nconst TreeMapHtml = () => {\n    const {\n        image: {\n            childImageSharp: { gatsbyImageData: image },\n        },\n    } = useStaticQuery(graphql`\n        query {\n            image: file(absolutePath: { glob: \"**/src/assets/captures/treemap-html.png\" }) {\n                childImageSharp {\n                    gatsbyImageData(layout: FIXED, width: 700, quality: 100)\n                }\n            }\n        }\n    `)\n\n    return (\n        <ComponentTemplate\n            name=\"TreeMapHtml\"\n            meta={meta.TreeMapHtml}\n            icon=\"treemap\"\n            flavors={meta.flavors}\n            currentFlavor=\"html\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={TreeMapDefaultProps}\n            propertiesMapper={mapper}\n            generateData={generateLightDataSet}\n            image={image}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveTreeMapHtml\n                        data={data.root}\n                        {...properties}\n                        theme={theme}\n                        onClick={node => {\n                            logAction({\n                                type: 'click',\n                                label: `[node] ${node.id}: ${node.formattedValue}`,\n                                color: node.color,\n                                data: node,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default TreeMapHtml\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n"],"names":["day","date","setHours","step","setDate","getDate","start","end","getTimezoneOffset","days","range","durationSecond","durationMinute","durationHour","durationDay","durationWeek","t0","Date","t1","newInterval","floori","offseti","count","field","interval","arguments","length","floor","ceil","round","d0","d1","offset","Math","stop","previous","push","filter","test","setTime","every","isFinite","d","generateLightDataSet","root","generateLibTree","generateHeavyDataSet","id","children","map","i","value","random","nodeCount","settingsMapper","label","node","formattedValue","parentLabel","pathComponents","join","valueFormat","mapFormat","allFlavors","defaults","TreeMapDefaultProps","props","key","group","flavors","help","type","required","defaultValue","identity","control","description","choices","leavesOnly","innerPadding","unit","min","max","outerPadding","chartDimensions","themeProperty","ordinalColors","colors","nodeOpacity","borderWidth","borderColor","defsProperties","enableLabel","prop","orientLabel","enableParentLabel","parentLabelSize","parentLabelPosition","parentLabelPadding","isInteractive","motionProperties","groups","groupProperties","mapping","exclude","settings","options","overrides","Object","keys","forEach","omit","mapAxis","upperFirst","enable","format","enabled","undefined","randColor","countryCodes","names","programmingLanguages","generateBulletData","title","subtitle","rangeCount","measureCount","markerCount","float","ranges","reduce","remaining","acc","measures","markers","generateChordData","size","minValue","maxValue","maxSize","selectedKeys","slice","matrix","generateNetworkData","rootNodeRadius","minMidNodes","maxMidNodes","midNodeRadius","minLeaves","maxLeaves","leafRadius","rootNode","radius","depth","color","nodes","Array","from","_","k","links","extraNodes","source","target","distance","concat","generateParallelCoordinatesData","shuffle","availableNodes","n","name","getNodeTargets","currentPath","targets","Error","includes","targetId","getNodesTargets","targetsById","link","generateSankeyData","maxIterations","assign","nodeColor","randId","randomPrice","randomVolume","randomCategory","generateSwarmPlotData","categoryCount","data","groupIndex","price","index","datum","volume","categories","randomizeSwarmPlotData","previousData","generateProgrammingLanguageStats","shouldShuffle","limit","langs","sets","language","uniqRand","generator","used","randCountryCode","generateDrinkStats","xSize","types","country","x","find","y","generateSeries","ids","xKeys","generateDayCounts","to","timeDays","dayFormat","timeFormat","generateOrderedDayCounts","generateCountriesData","withColors","libTreeItems","tree","leaf","loc","wines","wineTastes","generateWinesTastes","randMin","randMax","taste","wine","initialProperties","tile","margin","top","right","bottom","left","labelSkipSize","labelTextColor","modifiers","parentLabelTextColor","scheme","colorBy","animate","motionConfig","image","useStaticQuery","childImageSharp","gatsbyImageData","meta","icon","currentFlavor","properties","defaultProperties","propertiesMapper","mapper","generateData","theme","logAction","onClick","copyArray","shuffleSelf","module","exports","array","nativeFloor","nativeRandom","lower","upper","values","collection","arrayMap","object","baseRandom","lastIndex","rand","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","temp","arrayShuffle","baseShuffle","isArray","baseValues"],"sourceRoot":""}