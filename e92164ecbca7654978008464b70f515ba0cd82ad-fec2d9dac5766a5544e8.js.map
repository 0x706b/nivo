{"version":3,"file":"e92164ecbca7654978008464b70f515ba0cd82ad-fec2d9dac5766a5544e8.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-shape/src/area.js","webpack://nivo-website/../src/PointTooltip.js","webpack://nivo-website/../src/SliceTooltip.js","webpack://nivo-website/../src/props.js","webpack://nivo-website/../src/hooks.js","webpack://nivo-website/../src/Areas.js","webpack://nivo-website/../src/LinesItem.js","webpack://nivo-website/../src/Lines.js","webpack://nivo-website/../src/SlicesItem.js","webpack://nivo-website/../src/Slices.js","webpack://nivo-website/../src/Points.js","webpack://nivo-website/../src/Mesh.js","webpack://nivo-website/../src/Line.js","webpack://nivo-website/../src/ResponsiveLine.js","webpack://nivo-website/../src/LineCanvas.js","webpack://nivo-website/../src/ResponsiveLineCanvas.js"],"sourcesContent":["import { path } from \"d3-path\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport line from \"./line.js\";\nimport { x as pointX, y as pointY } from \"./point.js\";\nexport default function () {\n  var x0 = pointX,\n      x1 = null,\n      y0 = constant(0),\n      y1 = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function area(data) {\n    var i,\n        j,\n        k,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer,\n        x0z = new Array(n),\n        y0z = new Array(n);\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) {\n          j = i;\n          output.areaStart();\n          output.lineStart();\n        } else {\n          output.lineEnd();\n          output.lineStart();\n\n          for (k = i - 1; k >= j; --k) {\n            output.point(x0z[k], y0z[k]);\n          }\n\n          output.lineEnd();\n          output.areaEnd();\n        }\n      }\n\n      if (defined0) {\n        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n      }\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  function arealine() {\n    return line().defined(defined).curve(curve).context(context);\n  }\n\n  area.x = function (_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), x1 = null, area) : x0;\n  };\n\n  area.x0 = function (_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), area) : x0;\n  };\n\n  area.x1 = function (_) {\n    return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : x1;\n  };\n\n  area.y = function (_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), y1 = null, area) : y0;\n  };\n\n  area.y0 = function (_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), area) : y0;\n  };\n\n  area.y1 = function (_) {\n    return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : y1;\n  };\n\n  area.lineX0 = area.lineY0 = function () {\n    return arealine().x(x0).y(y0);\n  };\n\n  area.lineY1 = function () {\n    return arealine().x(x0).y(y1);\n  };\n\n  area.lineX1 = function () {\n    return arealine().x(x1).y(y0);\n  };\n\n  area.defined = function (_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), area) : defined;\n  };\n\n  area.curve = function (_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n  };\n\n  area.context = function (_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n  };\n\n  return area;\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst LinePointTooltip = ({ point }) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.xFormatted}</strong>, y:{' '}\n                    <strong>{point.data.yFormatted}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serieColor}\n        />\n    )\n}\n\nLinePointTooltip.propTypes = {\n    point: PropTypes.object.isRequired,\n}\n\nexport default memo(LinePointTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@nivo/core'\nimport { Chip, TableTooltip } from '@nivo/tooltip'\n\nconst SliceTooltip = ({ slice, axis }) => {\n    const theme = useTheme()\n    const otherAxis = axis === 'x' ? 'y' : 'x'\n\n    return (\n        <TableTooltip\n            rows={slice.points.map(point => [\n                <Chip key=\"chip\" color={point.serieColor} style={theme.tooltip.chip} />,\n                point.serieId,\n                <span key=\"value\" style={theme.tooltip.tableCellValue}>\n                    {point.data[`${otherAxis}Formatted`]}\n                </span>,\n            ])}\n        />\n    )\n}\n\nSliceTooltip.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n}\n\nexport default memo(SliceTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { lineCurvePropType, blendModePropType, motionPropTypes, defsPropTypes } from '@nivo/core'\nimport { ordinalColorsPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\nimport { LegendPropShape } from '@nivo/legends'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst commonPropTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                    y: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n\n    xScale: PropTypes.object.isRequired,\n    xFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    yScale: PropTypes.object.isRequired,\n    yFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf([\n                'grid',\n                'markers',\n                'axes',\n                'areas',\n                'crosshair',\n                'lines',\n                'slices',\n                'points',\n                'mesh',\n                'legends',\n            ]),\n            PropTypes.func,\n        ])\n    ).isRequired,\n\n    curve: lineCurvePropType.isRequired,\n\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n    gridXValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n    gridYValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n\n    enablePoints: PropTypes.bool.isRequired,\n    pointSymbol: PropTypes.func,\n    pointSize: PropTypes.number.isRequired,\n    pointColor: PropTypes.any.isRequired,\n    pointBorderWidth: PropTypes.number.isRequired,\n    pointBorderColor: PropTypes.any.isRequired,\n    enablePointLabel: PropTypes.bool.isRequired,\n    pointLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n\n    markers: PropTypes.arrayOf(\n        PropTypes.shape({\n            axis: PropTypes.oneOf(['x', 'y']).isRequired,\n            value: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            style: PropTypes.object,\n        })\n    ),\n\n    colors: ordinalColorsPropType.isRequired,\n\n    enableArea: PropTypes.bool.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    areaBaselineValue: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n        PropTypes.instanceOf(Date),\n    ]).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    debugMesh: PropTypes.bool.isRequired,\n\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableSlices: PropTypes.oneOf(['x', 'y', false]).isRequired,\n    debugSlices: PropTypes.bool.isRequired,\n    sliceTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableCrosshair: PropTypes.bool.isRequired,\n    crosshairType: PropTypes.string.isRequired,\n}\n\nexport const LinePropTypes = {\n    ...commonPropTypes,\n    enablePointLabel: PropTypes.bool.isRequired,\n    role: PropTypes.string.isRequired,\n    useMesh: PropTypes.bool.isRequired,\n    ...motionPropTypes,\n    ...defsPropTypes,\n}\n\nexport const LineCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    curve: 'linear',\n\n    xScale: {\n        type: 'point',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n\n    layers: [\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n    ],\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: true,\n    enableGridY: true,\n\n    enablePoints: true,\n    pointSize: 6,\n    pointColor: { from: 'color' },\n    pointBorderWidth: 0,\n    pointBorderColor: { theme: 'background' },\n    enablePointLabel: false,\n    pointLabel: 'yFormatted',\n\n    colors: { scheme: 'nivo' },\n    enableArea: false,\n    areaBaselineValue: 0,\n    areaOpacity: 0.2,\n    areaBlendMode: 'normal',\n    lineWidth: 2,\n\n    legends: [],\n\n    isInteractive: true,\n    tooltip: PointTooltip,\n    enableSlices: false,\n    debugSlices: false,\n    sliceTooltip: SliceTooltip,\n    debugMesh: false,\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n\nexport const LineDefaultProps = {\n    ...commonDefaultProps,\n    enablePointLabel: false,\n    useMesh: false,\n    animate: true,\n    motionConfig: 'gentle',\n    defs: [],\n    fill: [],\n    role: 'img',\n}\n\nexport const LineCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useCallback, useMemo, useState } from 'react'\nimport { area, line } from 'd3-shape'\nimport { curveFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { LineDefaultProps } from './props'\n\nexport const useLineGenerator = ({ curve }) => {\n    return useMemo(\n        () =>\n            line()\n                .defined(d => d.x !== null && d.y !== null)\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n}\n\nexport const useAreaGenerator = ({ curve, yScale, areaBaselineValue }) => {\n    return useMemo(() => {\n        return area()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y1(d => d.y)\n            .curve(curveFromProp(curve))\n            .y0(yScale(areaBaselineValue))\n    }, [curve, yScale, areaBaselineValue])\n}\n\nconst usePoints = ({ series, getPointColor, getPointBorderColor, formatX, formatY }) => {\n    return useMemo(() => {\n        return series.reduce((acc, serie) => {\n            return [\n                ...acc,\n                ...serie.data\n                    .filter(datum => datum.position.x !== null && datum.position.y !== null)\n                    .map((datum, i) => {\n                        const point = {\n                            id: `${serie.id}.${i}`,\n                            index: acc.length + i,\n                            serieId: serie.id,\n                            serieColor: serie.color,\n                            x: datum.position.x,\n                            y: datum.position.y,\n                        }\n                        point.color = getPointColor(serie)\n                        point.borderColor = getPointBorderColor(point)\n                        point.data = {\n                            ...datum.data,\n                            xFormatted: formatX(datum.data.x),\n                            yFormatted: formatY(datum.data.y),\n                        }\n\n                        return point\n                    }),\n            ]\n        }, [])\n    }, [series, getPointColor, getPointBorderColor, formatX, formatY])\n}\n\nexport const useSlices = ({ enableSlices, points, width, height }) => {\n    return useMemo(() => {\n        if (enableSlices === false) return []\n\n        if (enableSlices === 'x') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.x)) map.set(point.x, [point])\n                else map.get(point.x).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([x, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let x0\n                    if (!prevSlice) x0 = x\n                    else x0 = x - (x - prevSlice[0]) / 2\n\n                    let sliceWidth\n                    if (!nextSlice) sliceWidth = width - x0\n                    else sliceWidth = x - x0 + (nextSlice[0] - x) / 2\n\n                    return {\n                        id: x,\n                        x0,\n                        x,\n                        y0: 0,\n                        y: 0,\n                        width: sliceWidth,\n                        height,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        } else if (enableSlices === 'y') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.y)) map.set(point.y, [point])\n                else map.get(point.y).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([y, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let y0\n                    if (!prevSlice) y0 = y\n                    else y0 = y - (y - prevSlice[0]) / 2\n\n                    let sliceHeight\n                    if (!nextSlice) sliceHeight = height - y0\n                    else sliceHeight = y - y0 + (nextSlice[0] - y) / 2\n\n                    return {\n                        id: y,\n                        x0: 0,\n                        x: 0,\n                        y0,\n                        y,\n                        width,\n                        height: sliceHeight,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        }\n    }, [enableSlices, points])\n}\n\nexport const useLine = ({\n    data,\n    xScale: xScaleSpec = LineDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = LineDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    colors = LineDefaultProps.colors,\n    curve = LineDefaultProps.curve,\n    areaBaselineValue = LineDefaultProps.areaBaselineValue,\n    pointColor = LineDefaultProps.pointColor,\n    pointBorderColor = LineDefaultProps.pointBorderColor,\n    enableSlices = LineDefaultProps.enableSlicesTooltip,\n}) => {\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const [hiddenIds, setHiddenIds] = useState([])\n\n    const {\n        xScale,\n        yScale,\n        series: rawSeries,\n    } = useMemo(\n        () =>\n            computeXYScalesForSeries(\n                data.filter(item => hiddenIds.indexOf(item.id) === -1),\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, hiddenIds, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const { legendData, series } = useMemo(() => {\n        const dataWithColor = data.map(line => ({\n            id: line.id,\n            label: line.id,\n            color: getColor(line),\n        }))\n        const series = dataWithColor\n            .map(datum => ({\n                ...rawSeries.find(serie => serie.id === datum.id),\n                color: datum.color,\n            }))\n            .filter(item => Boolean(item.id))\n        const legendData = dataWithColor\n            .map(item => ({ ...item, hidden: !series.find(serie => serie.id === item.id) }))\n            .reverse()\n\n        return { legendData, series }\n    }, [data, rawSeries, getColor])\n\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const points = usePoints({\n        series,\n        getPointColor,\n        getPointBorderColor,\n        formatX,\n        formatY,\n    })\n\n    const slices = useSlices({\n        enableSlices,\n        points,\n        width,\n        height,\n    })\n\n    const lineGenerator = useLineGenerator({ curve })\n    const areaGenerator = useAreaGenerator({\n        curve,\n        yScale,\n        areaBaselineValue,\n    })\n\n    return {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        getColor,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig, blendModePropType } from '@nivo/core'\n\nconst AreaPath = ({ areaBlendMode, areaOpacity, color, fill, path }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={fill ? fill : animatedProps.color}\n            fillOpacity={areaOpacity}\n            strokeWidth={0}\n            style={{\n                mixBlendMode: areaBlendMode,\n            }}\n        />\n    )\n}\n\nAreaPath.propTypes = {\n    areaBlendMode: blendModePropType.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    color: PropTypes.string,\n    fill: PropTypes.string,\n    path: PropTypes.string.isRequired,\n}\n\nconst Areas = ({ areaGenerator, areaOpacity, areaBlendMode, lines }) => {\n    const computedLines = lines.slice(0).reverse()\n\n    return (\n        <g>\n            {computedLines.map(line => (\n                <AreaPath\n                    key={line.id}\n                    path={areaGenerator(line.data.map(d => d.position))}\n                    {...{ areaOpacity, areaBlendMode, ...line }}\n                />\n            ))}\n        </g>\n    )\n}\n\nAreas.propTypes = {\n    areaGenerator: PropTypes.func.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    lines: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default memo(Areas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath } from '@nivo/core'\n\nconst LinesItem = ({ lineGenerator, points, color, thickness }) => {\n    const path = useMemo(() => lineGenerator(points), [lineGenerator, points])\n    const animatedPath = useAnimatedPath(path)\n\n    return <animated.path d={animatedPath} fill=\"none\" strokeWidth={thickness} stroke={color} />\n}\n\nLinesItem.propTypes = {\n    points: PropTypes.arrayOf(\n        PropTypes.shape({\n            x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        })\n    ),\n    lineGenerator: PropTypes.func.isRequired,\n    color: PropTypes.string.isRequired,\n    thickness: PropTypes.number.isRequired,\n}\n\nexport default memo(LinesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport LinesItem from './LinesItem'\n\nconst Lines = ({ lines, lineGenerator, lineWidth }) => {\n    return lines\n        .slice(0)\n        .reverse()\n        .map(({ id, data, color }) => (\n            <LinesItem\n                key={id}\n                id={id}\n                points={data.map(d => d.position)}\n                lineGenerator={lineGenerator}\n                color={color}\n                thickness={lineWidth}\n            />\n        ))\n}\n\nLines.propTypes = {\n    lines: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            color: PropTypes.string.isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    data: PropTypes.shape({\n                        x: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                        y: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                    }).isRequired,\n                    position: PropTypes.shape({\n                        x: PropTypes.number,\n                        y: PropTypes.number,\n                    }).isRequired,\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineGenerator: PropTypes.func.isRequired,\n}\n\nexport default memo(Lines)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst SlicesItem = ({ slice, axis, debug, tooltip, isCurrent, setCurrent }) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n        },\n        [showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n        },\n        [showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setCurrent(null)\n    }, [hideTooltip])\n\n    return (\n        <rect\n            x={slice.x0}\n            y={slice.y0}\n            width={slice.width}\n            height={slice.height}\n            stroke=\"red\"\n            strokeWidth={debug ? 1 : 0}\n            strokeOpacity={0.75}\n            fill=\"red\"\n            fillOpacity={isCurrent && debug ? 0.35 : 0}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n\nSlicesItem.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    isCurrent: PropTypes.bool.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n}\n\nexport default memo(SlicesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport SlicesItem from './SlicesItem'\n\nconst Slices = ({ slices, axis, debug, height, tooltip, current, setCurrent }) => {\n    return slices.map(slice => (\n        <SlicesItem\n            key={slice.id}\n            slice={slice}\n            axis={axis}\n            debug={debug}\n            height={height}\n            tooltip={tooltip}\n            setCurrent={setCurrent}\n            isCurrent={current !== null && current.id === slice.id}\n        />\n    ))\n}\n\nSlices.propTypes = {\n    slices: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired,\n            points: PropTypes.arrayOf(PropTypes.object).isRequired,\n        })\n    ).isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    current: PropTypes.object,\n    setCurrent: PropTypes.func.isRequired,\n}\n\nexport default memo(Slices)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { getLabelGenerator, DotsItem, useTheme } from '@nivo/core'\n\nconst Points = ({ points, symbol, size, borderWidth, enableLabel, label, labelYOffset }) => {\n    const theme = useTheme()\n    const getLabel = getLabelGenerator(label)\n\n    /**\n     * We reverse the `points` array so that points from the lower lines in stacked lines\n     * graph are drawn on top. See https://github.com/plouc/nivo/issues/1051.\n     */\n    const mappedPoints = points.reverse().map(point => {\n        const mappedPoint = {\n            id: point.id,\n            x: point.x,\n            y: point.y,\n            datum: point.data,\n            fill: point.color,\n            stroke: point.borderColor,\n            label: enableLabel ? getLabel(point.data) : null,\n        }\n\n        return mappedPoint\n    })\n\n    return (\n        <g>\n            {mappedPoints.map(point => (\n                <DotsItem\n                    key={point.id}\n                    x={point.x}\n                    y={point.y}\n                    datum={point.datum}\n                    symbol={symbol}\n                    size={size}\n                    color={point.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    theme={theme}\n                />\n            ))}\n        </g>\n    )\n}\n\nPoints.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object),\n    symbol: PropTypes.func,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelYOffset: PropTypes.number,\n}\n\nexport default memo(Points)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\n\nconst Mesh = ({\n    points,\n    width,\n    height,\n    margin,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseEnter, margin]\n    )\n\n    const handleMouseMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseMove && onMouseMove(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point, event) => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (point, event) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n\nMesh.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object).isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    margin: PropTypes.object.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    debug: PropTypes.bool.isRequired,\n}\n\nexport default memo(Mesh)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { Fragment, useState } from 'react'\nimport {\n    bindDefs,\n    withContainer,\n    useDimensions,\n    useTheme,\n    SvgWrapper,\n    CartesianMarkers,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Crosshair } from '@nivo/tooltip'\nimport { useLine } from './hooks'\nimport { LinePropTypes, LineDefaultProps } from './props'\nimport Areas from './Areas'\nimport Lines from './Lines'\nimport Slices from './Slices'\nimport Points from './Points'\nimport Mesh from './Mesh'\n\nconst Line = props => {\n    const {\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        layers,\n        curve,\n        areaBaselineValue,\n\n        colors,\n\n        margin: partialMargin,\n        width,\n        height,\n\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        enableGridX,\n        enableGridY,\n        gridXValues,\n        gridYValues,\n\n        lineWidth,\n        enableArea,\n        areaOpacity,\n        areaBlendMode,\n\n        enablePoints,\n        pointSymbol,\n        pointSize,\n        pointColor,\n        pointBorderWidth,\n        pointBorderColor,\n        enablePointLabel,\n        pointLabel,\n        pointLabelYOffset,\n\n        defs,\n        fill,\n\n        markers,\n\n        legends,\n\n        isInteractive,\n\n        useMesh,\n        debugMesh,\n\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n\n        tooltip,\n\n        enableSlices,\n        debugSlices,\n        sliceTooltip,\n\n        enableCrosshair,\n        crosshairType,\n\n        role,\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n        enableSlices,\n    })\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const [currentPoint, setCurrentPoint] = useState(null)\n    const [currentSlice, setCurrentSlice] = useState(null)\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                theme={theme}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        ),\n        markers: (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n                theme={theme}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                theme={theme}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        areas: null,\n        lines: (\n            <Lines key=\"lines\" lines={series} lineGenerator={lineGenerator} lineWidth={lineWidth} />\n        ),\n        slices: null,\n        points: null,\n        crosshair: null,\n        mesh: null,\n        legends: legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={`legend.${i}`}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legend.data || legendData}\n                theme={theme}\n                toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n            />\n        )),\n    }\n\n    const boundDefs = bindDefs(defs, series, fill)\n\n    if (enableArea) {\n        layerById.areas = (\n            <Areas\n                key=\"areas\"\n                areaGenerator={areaGenerator}\n                areaOpacity={areaOpacity}\n                areaBlendMode={areaBlendMode}\n                lines={series}\n            />\n        )\n    }\n\n    if (isInteractive && enableSlices !== false) {\n        layerById.slices = (\n            <Slices\n                key=\"slices\"\n                slices={slices}\n                axis={enableSlices}\n                debug={debugSlices}\n                height={innerHeight}\n                tooltip={sliceTooltip}\n                current={currentSlice}\n                setCurrent={setCurrentSlice}\n            />\n        )\n    }\n\n    if (enablePoints) {\n        layerById.points = (\n            <Points\n                key=\"points\"\n                points={points}\n                symbol={pointSymbol}\n                size={pointSize}\n                color={getPointColor}\n                borderWidth={pointBorderWidth}\n                borderColor={getPointBorderColor}\n                enableLabel={enablePointLabel}\n                label={pointLabel}\n                labelYOffset={pointLabelYOffset}\n            />\n        )\n    }\n\n    if (isInteractive && enableCrosshair) {\n        if (currentPoint !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentPoint.x}\n                    y={currentPoint.y}\n                    type={crosshairType}\n                />\n            )\n        }\n        if (currentSlice !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentSlice.x}\n                    y={currentSlice.y}\n                    type={enableSlices}\n                />\n            )\n        }\n    }\n\n    if (isInteractive && useMesh && enableSlices === false) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                current={currentPoint}\n                setCurrent={setCurrentPoint}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                series,\n                                slices,\n                                points,\n                                xScale,\n                                yScale,\n                                lineGenerator,\n                                areaGenerator,\n                                currentPoint,\n                                setCurrentPoint,\n                                currentSlice,\n                                setCurrentSlice,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nLine.propTypes = LinePropTypes\nLine.defaultProps = LineDefaultProps\n\nexport default withContainer(Line)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Line from './Line'\n\nconst ResponsiveLine = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Line width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveLine\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, useRef, useEffect, useState, useCallback, forwardRef } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    getRelativeCursor,\n    isCursorInRect,\n} from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { LineCanvasPropTypes, LineCanvasDefaultProps } from './props'\nimport { useLine } from './hooks'\n\nconst LineCanvas = ({\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio,\n\n    data,\n    xScale: xScaleSpec,\n    xFormat,\n    yScale: yScaleSpec,\n    yFormat,\n    curve,\n\n    layers,\n\n    colors,\n    lineWidth,\n\n    enableArea,\n    areaBaselineValue,\n    areaOpacity,\n\n    enablePoints,\n    pointSize,\n    pointColor,\n    pointBorderWidth,\n    pointBorderColor,\n\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n\n    legends,\n\n    isInteractive,\n    debugMesh,\n    //onMouseEnter,\n    //onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n\n    canvasRef,\n}) => {\n    const canvasEl = useRef(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const theme = useTheme()\n    const [currentPoint, setCurrentPoint] = useState(null)\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n    })\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    useEffect(() => {\n        if (canvasRef) {\n            canvasRef.current = canvasEl.current\n        }\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (typeof layer === 'function') {\n                layer({\n                    ctx,\n                    innerWidth,\n                    innerHeight,\n                    series,\n                    points,\n                    xScale,\n                    yScale,\n                    lineWidth,\n                    lineGenerator,\n                    areaGenerator,\n                    currentPoint,\n                    setCurrentPoint,\n                })\n            }\n\n            if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'areas' && enableArea === true) {\n                ctx.save()\n                ctx.globalAlpha = areaOpacity\n\n                areaGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.fillStyle = serie.color\n                    ctx.beginPath()\n                    areaGenerator(serie.data.map(d => d.position))\n                    ctx.fill()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'lines') {\n                lineGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.strokeStyle = serie.color\n                    ctx.lineWidth = lineWidth\n                    ctx.beginPath()\n                    lineGenerator(serie.data.map(d => d.position))\n                    ctx.stroke()\n                })\n            }\n\n            if (layer === 'points' && enablePoints === true && pointSize > 0) {\n                points.forEach(point => {\n                    ctx.fillStyle = point.color\n                    ctx.beginPath()\n                    ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (pointBorderWidth > 0) {\n                        ctx.strokeStyle = point.borderColor\n                        ctx.lineWidth = pointBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh === true) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentPoint) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index)\n                }\n            }\n\n            if (layer === 'legends') {\n                const legendData = series\n                    .map(serie => ({\n                        id: serie.id,\n                        label: serie.id,\n                        color: serie.color,\n                    }))\n                    .reverse()\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legend.data || legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        lineGenerator,\n        series,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        points,\n        enablePoints,\n        pointSize,\n        currentPoint,\n    ])\n\n    const getPointFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const pointIndex = delaunay.find(x - margin.left, y - margin.top)\n            return points[pointIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const point = getPointFromMouseEvent(event)\n            setCurrentPoint(point)\n\n            if (point) {\n                showTooltipFromEvent(createElement(tooltip, { point }), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentPoint(null)\n            currentPoint && onMouseLeave && onMouseLeave(currentPoint, event)\n        },\n        [hideTooltip, setCurrentPoint, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const point = getPointFromMouseEvent(event)\n                point && onClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nLineCanvas.propTypes = LineCanvasPropTypes\nLineCanvas.defaultProps = LineCanvasDefaultProps\n\nconst LineCanvasWithContainer = withContainer(LineCanvas)\n\nexport default forwardRef((props, ref) => <LineCanvasWithContainer {...props} canvasRef={ref} />)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport LineCanvas from './LineCanvas'\n\nconst ResponsiveLineCanvas = (props, ref) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <LineCanvas width={width} height={height} {...props} ref={ref} />}\n    </ResponsiveWrapper>\n)\n\nexport default forwardRef(ResponsiveLineCanvas)\n"],"names":["x0","x1","y0","y1","defined","context","curve","output","area","data","i","j","k","d","buffer","n","length","defined0","x0z","Array","y0z","areaStart","lineStart","lineEnd","point","areaEnd","arealine","x","_","arguments","y","lineX0","lineY0","lineY1","lineX1","LinePointTooltip","id","xFormatted","yFormatted","enableChip","color","serieColor","PropTypes","memo","SliceTooltip","slice","axis","theme","useTheme","otherAxis","rows","style","chip","isRequired","commonPropTypes","xScale","xFormat","yScale","yFormat","layers","lineCurvePropType","axisTop","axisRight","axisBottom","axisLeft","enableGridX","enableGridY","gridXValues","gridYValues","enablePoints","pointSymbol","pointSize","pointColor","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","markers","value","colors","ordinalColorsPropType","enableArea","areaOpacity","areaBlendMode","blendModePropType","areaBaselineValue","lineWidth","legends","isInteractive","debugMesh","tooltip","enableSlices","debugSlices","sliceTooltip","enableCrosshair","crosshairType","LinePropTypes","role","useMesh","LineCanvasPropTypes","pixelRatio","commonDefaultProps","type","min","max","from","scheme","LineDefaultProps","animate","motionConfig","defs","fill","LineCanvasDefaultProps","window","useLine","xScaleSpec","yScaleSpec","width","height","enableSlicesTooltip","formatX","useValueFormatter","formatY","getColor","useOrdinalColorScale","getPointColor","useInheritedColor","getPointBorderColor","useState","hiddenIds","setHiddenIds","useMemo","computeXYScalesForSeries","item","rawSeries","dataWithColor","line","label","series","datum","serie","Boolean","legendData","hidden","toggleSerie","useCallback","state","points","index","acc","serieId","usePoints","slices","map","a","b","slicePoints","prevSlice","nextSlice","sliceWidth","sliceHeight","useSlices","lineGenerator","curveFromProp","useLineGenerator","areaGenerator","useAreaGenerator","AreaPath","path","useMotionConfig","springConfig","animatedPath","useAnimatedPath","animatedProps","useSpring","config","immediate","fillOpacity","strokeWidth","mixBlendMode","Areas","computedLines","lines","LinesItem","thickness","stroke","Lines","position","SlicesItem","debug","isCurrent","setCurrent","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","strokeOpacity","onMouseEnter","onMouseMove","onMouseLeave","Slices","current","Points","symbol","size","borderWidth","enableLabel","labelYOffset","getLabel","getLabelGenerator","mappedPoints","borderColor","Mesh","margin","onClick","showTooltipAt","handleClick","nodes","Line","props","partialMargin","pointLabelYOffset","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","currentPoint","setCurrentPoint","currentSlice","setCurrentSlice","layerById","grid","xValues","yValues","axes","top","right","bottom","left","areas","crosshair","mesh","containerWidth","containerHeight","legend","undefined","boundDefs","bindDefs","layer","withContainer","ResponsiveLine","LineCanvas","canvasRef","canvasEl","useRef","useVoronoiMesh","delaunay","voronoi","useEffect","ctx","renderGridLinesToCanvas","scale","values","renderAxesToCanvas","Math","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","getPointFromMouseEvent","getRelativeCursor","isCursorInRect","pointIndex","handleMouseHover","ref","cursor","LineCanvasWithContainer","forwardRef","ResponsiveLineCanvas"],"sourceRoot":""}