{"version":3,"file":"component---src-pages-internal-home-demos-tsx-abb663c74b67c0a51198.js","mappings":"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","sources":["webpack://nivo-website/./src/data/components/geo/generator.ts","webpack://nivo-website/./src/components/home/theme.ts","webpack://nivo-website/./src/components/home/dimensions.ts","webpack://nivo-website/./src/components/home/HomeAreaBumpDemo.tsx","webpack://nivo-website/./src/components/home/HomeBarDemo.tsx","webpack://nivo-website/./src/components/home/HomeBumpDemo.tsx","webpack://nivo-website/./src/components/home/HomeCalendarDemo.tsx","webpack://nivo-website/./src/components/home/HomeChordDemo.tsx","webpack://nivo-website/./src/components/home/HomeChoroplethDemo.tsx","webpack://nivo-website/./src/components/home/HomeCirclePackingDemo.tsx","webpack://nivo-website/./src/components/home/HomeLineDemo.tsx","webpack://nivo-website/./src/components/home/HomePieDemo.tsx","webpack://nivo-website/./src/components/home/HomeRadarDemo.tsx","webpack://nivo-website/./src/components/home/HomeRadialBarDemo.tsx","webpack://nivo-website/./src/components/home/HomeSankeyDemo.tsx","webpack://nivo-website/./src/components/home/HomeStreamDemo.tsx","webpack://nivo-website/./src/components/home/HomeSunburstDemo.tsx","webpack://nivo-website/./src/components/home/HomeSwarmPlotDemo.tsx","webpack://nivo-website/./src/components/home/HomeTreeMapDemo.tsx","webpack://nivo-website/./src/components/home/HomeVoronoiDemo.tsx","webpack://nivo-website/./src/components/home/HomeMarimekkoDemo.tsx","webpack://nivo-website/./src/pages/internal/home-demos.tsx","webpack://nivo-website/../src/color.ts","webpack://nivo-website/../src/sets/countryCodes.ts","webpack://nivo-website/../src/sets/names.ts","webpack://nivo-website/../src/sets/programmingLanguages.ts","webpack://nivo-website/../src/bullet.ts","webpack://nivo-website/../src/chord.ts","webpack://nivo-website/../src/network.ts","webpack://nivo-website/../src/parallelCoordinates.ts","webpack://nivo-website/../src/sankey.ts","webpack://nivo-website/../src/swarmplot.ts","webpack://nivo-website/../src/xySeries.ts","webpack://nivo-website/../src/index.ts","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/types.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/Bar.tsx","webpack://nivo-website/../src/Bars.tsx","webpack://nivo-website/../src/BarTooltip.tsx","webpack://nivo-website/../src/Marimekko.tsx","webpack://nivo-website/../src/ResponsiveMarimekko.tsx","webpack://nivo-website/../node_modules/d3-shape/src/descending.js","webpack://nivo-website/../node_modules/d3-shape/src/identity.js","webpack://nivo-website/../src/PieLegends.tsx","webpack://nivo-website/../src/PieTooltip.tsx","webpack://nivo-website/../node_modules/d3-shape/src/pie.js","webpack://nivo-website/../src/Arcs.tsx","webpack://nivo-website/../src/Pie.tsx","webpack://nivo-website/../src/ResponsivePie.tsx","webpack://nivo-website/../src/PieCanvas.tsx","webpack://nivo-website/../src/ResponsivePieCanvas.tsx","webpack://nivo-website/../node_modules/d3-shape/src/curve/radial.js","webpack://nivo-website/../node_modules/d3-shape/src/lineRadial.js","webpack://nivo-website/../src/RadarLayer.tsx","webpack://nivo-website/../src/RadarGridLabels.tsx","webpack://nivo-website/../src/RadarGridLevels.tsx","webpack://nivo-website/../src/RadarGrid.tsx","webpack://nivo-website/../src/RadarSlice.tsx","webpack://nivo-website/../src/RadarSlices.tsx","webpack://nivo-website/../src/RadarDots.tsx","webpack://nivo-website/../src/RadarGridLabel.tsx","webpack://nivo-website/../src/RadarSliceTooltip.tsx","webpack://nivo-website/../src/Radar.tsx","webpack://nivo-website/../src/ResponsiveRadar.tsx","webpack://nivo-website/../src/CircularAxisTick.tsx","webpack://nivo-website/../src/CircularAxis.tsx","webpack://nivo-website/../src/RadialGrid.tsx","webpack://nivo-website/../src/CircularGrid.tsx","webpack://nivo-website/../src/PolarGrid.tsx","webpack://nivo-website/../src/RadialAxisTick.tsx","webpack://nivo-website/../src/RadialAxis.tsx","webpack://nivo-website/../src/RadialBarTooltip.tsx","webpack://nivo-website/../src/RadialBarArcs.tsx","webpack://nivo-website/../src/RadialBarTracks.tsx","webpack://nivo-website/../src/RadialBar.tsx","webpack://nivo-website/../src/ResponsiveRadialBar.tsx","webpack://nivo-website/../src/StreamLayer.tsx","webpack://nivo-website/../src/StreamLayers.tsx","webpack://nivo-website/../src/StreamDots.tsx","webpack://nivo-website/../src/StreamSlicesItem.tsx","webpack://nivo-website/../src/StreamSlices.tsx","webpack://nivo-website/../src/StreamDotsItem.tsx","webpack://nivo-website/../src/LayerTooltip.tsx","webpack://nivo-website/../src/StackTooltip.tsx","webpack://nivo-website/../src/Stream.tsx","webpack://nivo-website/../src/ResponsiveStream.tsx","webpack://nivo-website/../node_modules/d3-hierarchy/src/partition.js","webpack://nivo-website/../src/SunburstTooltip.tsx","webpack://nivo-website/../src/Sunburst.tsx","webpack://nivo-website/../src/ResponsiveSunburst.tsx","webpack://nivo-website/../node_modules/lodash/_arrayShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseForOwn.js","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/_baseShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseValues.js","webpack://nivo-website/../node_modules/lodash/_shuffleSelf.js","webpack://nivo-website/../node_modules/lodash/random.js","webpack://nivo-website/../node_modules/lodash/shuffle.js","webpack://nivo-website/../node_modules/lodash/values.js"],"sourcesContent":["import countries from './world_countries'\n\nconst exclude = ['BRA', 'AUS', 'SWE', 'GRL', 'COD']\n\nexport const generateChoroplethData = () =>\n    countries.features\n        .filter(feature => !exclude.includes(feature.id))\n        .map(feature => ({\n            id: feature.id,\n            value: Math.round(Math.random() * 1000000),\n        }))\n","import { useMemo } from 'react'\nimport { useTheme } from 'styled-components'\n\nexport const useHomeTheme = () => {\n    const theme = useTheme()\n\n    const { colors, reversedColors } = useMemo(() => {\n        const _colors: string[] = theme.colors.coloredRange.slice(1)\n        const _reversedColors = [..._colors].reverse()\n\n        return { colors: _colors, reversedColors: _reversedColors }\n    }, [theme])\n\n    const nivoTheme = useMemo(() => {\n        return {\n            axis: {\n                ticks: {\n                    line: {\n                        stroke: theme.colors.coloredRange[4],\n                    },\n                    text: {\n                        fill: theme.colors.coloredRange[4],\n                        fontSize: 9,\n                    },\n                },\n            },\n            grid: {\n                line: {\n                    stroke: theme.colors.coloredRange[4],\n                    strokeWidth: 2,\n                    strokeDasharray: '5,8',\n                },\n            },\n            labels: {\n                text: {\n                    fill: theme.colors.coloredRange[4],\n                },\n            },\n        }\n    }, [theme])\n\n    return {\n        colors,\n        reversedColors,\n        nivoTheme,\n    }\n}\n","export const dimensions = {\n    width: 600,\n    height: 400,\n    margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20,\n    },\n    lineWidth: 6,\n    pointSize: 18,\n}\n","import React, { useMemo } from 'react'\nimport random from 'lodash/random'\nimport { AreaBump } from '@nivo/bump'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\nimport range from 'lodash/range'\n\nconst serieIds = ['JavaScript', 'ReasonML', 'TypeScript', 'Elm']\nconst generateData = () => {\n    const years = range(2000, 2005)\n\n    return serieIds.map(id => ({\n        id,\n        data: years.map(year => ({\n            x: year,\n            y: random(5, 40),\n        })),\n    }))\n}\n\nexport const HomeAreaBumpDemo = () => {\n    const data = useMemo(() => generateData(), [])\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"area-bump\">\n            <AreaBump\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                colors={colors}\n                borderWidth={1}\n                spacing={12}\n                borderColor={colors[3]}\n                blendMode=\"normal\"\n                enableGridX={true}\n                axisTop={null}\n                axisBottom={null}\n                startLabel={false}\n                endLabel={false}\n                isInteractive={false}\n                animate={false}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport { Bar } from '@nivo/bar'\nimport { generateCountriesData } from '@nivo/generators'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeBarDemo = ({ isHorizontal = false }: { isHorizontal: boolean }) => {\n    const { colors, nivoTheme } = useHomeTheme()\n    const data = isHorizontal\n        ? generateCountriesData(['hot dogs', 'burgers', 'sandwich', 'kebab', 'fries', 'donut'], {\n              size: 9,\n          })\n        : generateCountriesData(['hot dogs', 'burgers', 'sandwich'], {\n              size: 11,\n          })\n\n    const keys = isHorizontal\n        ? ['hot dogs', 'burgers', 'sandwich', 'kebab', 'fries', 'donut']\n        : ['hot dogs', 'burgers', 'sandwich']\n\n    return (\n        <div id={`bar-${isHorizontal ? 'horizontal' : 'vertical'}`}>\n            <Bar\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                indexBy=\"country\"\n                keys={keys}\n                layout={isHorizontal ? 'horizontal' : 'vertical'}\n                groupMode={isHorizontal ? 'stacked' : 'grouped'}\n                padding={0.1}\n                colors={colors}\n                borderWidth={1}\n                borderColor={colors[3]}\n                theme={nivoTheme}\n                enableGridX\n                enableGridY\n                enableLabel={false}\n                animate={false}\n                isInteractive={false}\n                axisLeft={null}\n                axisBottom={null}\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { Bump } from '@nivo/bump'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\nimport range from 'lodash/range'\nimport shuffle from 'lodash/shuffle'\n\ninterface Datum {\n    x: number\n    y: number\n}\n\nconst generateData = () => {\n    const years = range(2000, 2005)\n    const ranks = range(1, 6)\n\n    const series: {\n        id: string\n        data: Datum[]\n    }[] = ranks.map(rank => {\n        return {\n            id: `Serie ${rank}`,\n            data: [],\n        }\n    })\n\n    years.forEach(year => {\n        shuffle(ranks).forEach((rank, i) => {\n            series[i].data.push({\n                x: year,\n                y: rank,\n            })\n        })\n    })\n\n    return series\n}\n\nexport const HomeBumpDemo = () => {\n    const data = useMemo(() => generateData(), [])\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"bump\">\n            <Bump\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                colors={colors}\n                lineWidth={dimensions.lineWidth}\n                pointSize={dimensions.pointSize}\n                endLabel={false}\n                startLabel={false}\n                enableGridX={true}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={null}\n                axisLeft={null}\n                isInteractive={false}\n                animate={false}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { generateDayCounts } from '@nivo/generators'\nimport { Calendar } from '@nivo/calendar'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nconst calendarFrom = new Date(2015, 3, 1)\nconst calendarTo = new Date(2017, 5, 1)\nconst calendarData = generateDayCounts(calendarFrom, calendarTo)\n\nexport const HomeCalendarDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <Container id=\"calendar\">\n            <Calendar\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                from={calendarFrom}\n                to={calendarTo}\n                data={calendarData}\n                dayBorderWidth={1}\n                yearSpacing={60}\n                emptyColor={colors[1]}\n                dayBorderColor={colors[3]}\n                monthBorderColor={colors[3]}\n                colors={[colors[0], colors[2]]}\n                isInteractive={false}\n                theme={nivoTheme}\n            />\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    svg text {\n        display: none;\n    }\n`\n","import React, { useMemo } from 'react'\nimport { generateChordData } from '@nivo/generators'\nimport { ChordCanvas } from '@nivo/chord'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeChordDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n    const { matrix, keys } = useMemo(() => generateChordData({ size: 7 }), [])\n\n    return (\n        <div id=\"chord\">\n            <ChordCanvas\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={matrix}\n                keys={keys}\n                colors={colors}\n                padAngle={0.04}\n                innerRadiusRatio={0.9}\n                enableLabel={false}\n                isInteractive={false}\n                animate={false}\n                arcBorderWidth={1}\n                arcBorderColor={colors[3]}\n                ribbonBorderWidth={1}\n                ribbonBorderColor={colors[3]}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { Choropleth } from '@nivo/geo'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\nimport { generateChoroplethData } from '../../data/components/geo/generator'\nimport countries from '../../data/components/geo/world_countries'\n\nexport const HomeChoroplethDemo = () => {\n    const data = useMemo(() => generateChoroplethData(), [])\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"choropleth\">\n            <Choropleth\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                features={countries.features}\n                colors={colors}\n                domain={[0, 1000000]}\n                unknownColor={`${colors[0]}44`}\n                borderWidth={1}\n                borderColor={colors[3]}\n                isInteractive={false}\n                animate={false}\n                theme={nivoTheme}\n                projectionType=\"mercator\"\n                projectionScale={100}\n                projectionTranslation={[0.5, 0.6]}\n                projectionRotation={[0, 0, 0]}\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { generateLibTree } from '@nivo/generators'\nimport { CirclePacking } from '@nivo/circle-packing'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeCirclePackingDemo = () => {\n    const { reversedColors, nivoTheme } = useHomeTheme()\n    const data = useMemo(() => generateLibTree(), [])\n\n    return (\n        <div id=\"circle-packing\">\n            <CirclePacking\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                id=\"name\"\n                value=\"loc\"\n                colors={reversedColors}\n                colorBy=\"depth\"\n                childColor=\"noinherit\"\n                padding={1}\n                enableLabels={false}\n                animate={false}\n                isInteractive={false}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport { generateDrinkStats } from '@nivo/generators'\nimport { Line } from '@nivo/line'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeLineDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"line\">\n            <Line\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={generateDrinkStats(12)}\n                yScale={{ type: 'linear', stacked: true }}\n                lineWidth={dimensions.lineWidth}\n                curve=\"monotoneX\"\n                theme={nivoTheme}\n                colors={colors}\n                animate={false}\n                isInteractive={false}\n                pointSize={dimensions.pointSize}\n                axisLeft={null}\n                axisBottom={null}\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { generateProgrammingLanguageStats } from '@nivo/generators'\nimport { Pie } from '@nivo/pie'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomePieDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n    const data = useMemo(\n        () =>\n            generateProgrammingLanguageStats(true, 12).map(d => ({\n                id: d.label,\n                ...d,\n            })),\n        []\n    )\n\n    return (\n        <div id=\"pie\">\n            <Pie\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                innerRadius={0.6}\n                enableArcLabels={false}\n                enableArcLinkLabels={false}\n                colors={colors}\n                borderWidth={1}\n                borderColor={colors[3]}\n                animate={false}\n                isInteractive={false}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { generateWinesTastes } from '@nivo/generators'\nimport { Radar } from '@nivo/radar'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeRadarDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n    const data = useMemo(() => generateWinesTastes(), [])\n\n    return (\n        <Container id=\"radar\">\n            <Radar\n                {...data}\n                width={dimensions.width}\n                height={dimensions.height}\n                indexBy=\"taste\"\n                margin={dimensions.margin}\n                theme={nivoTheme}\n                colors={colors}\n                curve=\"linearClosed\"\n                dotSize={dimensions.pointSize}\n                borderWidth={dimensions.lineWidth}\n                dotBorderWidth={1}\n                dotBorderColor={colors[1]}\n                enableDotLabel={false}\n                animate={false}\n                isInteractive={false}\n            />\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    svg text {\n        display: none;\n    }\n`\n","import React, { useMemo } from 'react'\nimport { RadialBar } from '@nivo/radial-bar'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nconst generateData = () => {\n    const ids = ['Supermarket', 'Combini', 'Online', 'Marché']\n    const categories = ['Vegetables', 'Fruits', 'Meat']\n\n    return ids.map(id => ({\n        id,\n        data: categories.map(category => ({\n            x: category,\n            y: Math.round(Math.random() * 300),\n        })),\n    }))\n}\n\nexport const HomeRadialBarDemo = () => {\n    const data = useMemo(() => generateData(), [])\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"radial-bar\">\n            <RadialBar\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                tracksColor={`${colors[0]}44`}\n                colors={colors.slice(1)}\n                endAngle={315}\n                borderWidth={1}\n                borderColor={colors[3]}\n                padding={0.3}\n                isInteractive={false}\n                animate={false}\n                theme={nivoTheme}\n                enableLabels={false}\n                radialAxisStart={null}\n                circularAxisOuter={null}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport { generateSankeyData } from '@nivo/generators'\nimport { Sankey } from '@nivo/sankey'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeSankeyDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"sankey\">\n            <Sankey\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={generateSankeyData({ nodeCount: 11, maxIterations: 2 })}\n                theme={nivoTheme}\n                colors={colors}\n                animate={false}\n                isInteractive={false}\n                enableLabels={false}\n                nodeBorderColor={{ from: 'color' }}\n                nodeOpacity={1}\n                nodeThickness={12}\n                nodeInnerPadding={2}\n                nodeSpacing={20}\n                nodeBorderWidth={0}\n                linkOpacity={0.6}\n                linkBlendMode=\"normal\"\n                linkContract={1}\n                labelTextColor={{ from: 'color' }}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport range from 'lodash/range'\nimport random from 'lodash/random'\nimport { Stream } from '@nivo/stream'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nconst streamDataLayerCount = 5\nconst generateStreamData = () =>\n    range(16).map(() =>\n        range(streamDataLayerCount).reduce((acc, i) => {\n            acc[i] = random(10, 200)\n            return acc\n        }, {})\n    )\n\nexport const HomeStreamDemo = () => {\n    const { reversedColors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"stream\">\n            <Stream\n                width={dimensions.width}\n                height={dimensions.height}\n                data={generateStreamData()}\n                margin={dimensions.margin}\n                keys={range(streamDataLayerCount)}\n                theme={nivoTheme}\n                colors={reversedColors}\n                animate={false}\n                isInteractive={false}\n                enableGridX\n                axisLeft={null}\n                axisBottom={null}\n                offsetType=\"silhouette\"\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { generateLibTree } from '@nivo/generators'\nimport { Sunburst } from '@nivo/sunburst'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeSunburstDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n    const data = useMemo(() => generateLibTree(), [])\n\n    return (\n        <div id=\"sunburst\">\n            <Sunburst\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                id=\"name\"\n                value=\"loc\"\n                animate={false}\n                isInteractive={false}\n                colors={colors}\n                borderColor={colors[3]}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { generateSwarmPlotData } from '@nivo/generators'\nimport { SwarmPlot } from '@nivo/swarmplot'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeSwarmPlotDemo = () => {\n    const { colors, reversedColors, nivoTheme } = useHomeTheme()\n    const data = useMemo(() => generateSwarmPlotData(['thing'], { min: 50, max: 50 }), [])\n\n    return (\n        <div id=\"swarmplot\">\n            <SwarmPlot\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={{\n                    ...dimensions.margin,\n                    left: dimensions.margin.left * 3,\n                    right: dimensions.margin.right * 3,\n                }}\n                data={data.data}\n                groups={data.groups}\n                groupBy=\"group\"\n                id=\"id\"\n                value=\"price\"\n                layout=\"horizontal\"\n                valueScale={{\n                    type: 'linear',\n                    min: 0,\n                    max: 500,\n                }}\n                size={{\n                    key: 'volume',\n                    values: [4, 20],\n                    sizes: [10, 60],\n                }}\n                theme={nivoTheme}\n                colors={reversedColors}\n                borderWidth={1}\n                borderColor={colors[3]}\n                spacing={3}\n                enableGridY={false}\n                colorBy=\"id\"\n                animate={false}\n                isInteractive={false}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={null}\n                axisLeft={null}\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { generateLibTree } from '@nivo/generators'\nimport { TreeMap } from '@nivo/treemap'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeTreeMapDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n    const data = useMemo(() => generateLibTree(), [])\n\n    return (\n        <div id=\"treemap\">\n            <TreeMap\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                identity=\"name\"\n                value=\"loc\"\n                valueFormat=\".02s\"\n                tile=\"squarify\"\n                colors={colors}\n                leavesOnly={true}\n                borderWidth={1}\n                borderColor={colors[3]}\n                outerPadding={0}\n                innerPadding={0}\n                nodeOpacity={1}\n                animate={false}\n                isInteractive={false}\n                enableLabel={false}\n                labelTextColor={colors[1]}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport range from 'lodash/range'\nimport { Voronoi } from '@nivo/voronoi'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nconst voronoi = {\n    xDomain: [0, 400],\n    yDomain: [0, 300],\n}\nvoronoi.data = range(80).map(id => ({\n    id,\n    x: Math.random() * voronoi.xDomain[1],\n    y: Math.random() * voronoi.yDomain[1],\n}))\n\nexport const HomeVoronoiDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"voronoi\">\n            <Voronoi\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={voronoi.data}\n                xDomain={voronoi.xDomain}\n                yDomain={voronoi.yDomain}\n                enableLinks={true}\n                linkLineColor={colors[2]}\n                cellLineColor={colors[3]}\n                cellLineWidth={2}\n                enablePoints={true}\n                pointSize={12}\n                pointColor={colors[3]}\n                isInteractive={false}\n                animate={false}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport random from 'lodash/random'\nimport { Marimekko } from '@nivo/marimekko'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nconst getRandomValue = () => random(0, 32)\n\nconst generateData = () =>\n    [`it's good`, `it's sweet`, `it's spicy`, 'worth eating', 'worth buying'].map(statement => ({\n        statement,\n        participation: getRandomValue(),\n        stronglyAgree: getRandomValue(),\n        agree: getRandomValue(),\n        disagree: getRandomValue(),\n        stronglyDisagree: getRandomValue(),\n    }))\n\nexport const HomeMarimekkoDemo = () => {\n    const data = useMemo(() => generateData(), [])\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"marimekko\">\n            <Marimekko\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                id=\"statement\"\n                value=\"participation\"\n                dimensions={[\n                    {\n                        id: 'disagree strongly',\n                        value: 'stronglyDisagree',\n                    },\n                    {\n                        id: 'disagree',\n                        value: 'disagree',\n                    },\n                    {\n                        id: 'agree',\n                        value: 'agree',\n                    },\n                    {\n                        id: 'agree strongly',\n                        value: 'stronglyAgree',\n                    },\n                ]}\n                colors={colors}\n                defs={[\n                    {\n                        id: 'lines',\n                        type: 'patternLines',\n                        background: 'rgba(0, 0, 0, 0)',\n                        color: 'inherit',\n                        rotation: -45,\n                        lineWidth: 6,\n                        spacing: 10,\n                    },\n                ]}\n                fill={[\n                    {\n                        match: {\n                            id: 'agree strongly',\n                        },\n                        id: 'lines',\n                    },\n                    {\n                        match: {\n                            id: 'disagree strongly',\n                        },\n                        id: 'lines',\n                    },\n                ]}\n                borderWidth={1}\n                borderColor={colors[3]}\n                innerPadding={6}\n                offset=\"expand\"\n                enableGridX={false}\n                enableGridY={false}\n                isInteractive={false}\n                animate={false}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n    HomeAreaBumpDemo,\n    HomeBarDemo,\n    HomeBumpDemo,\n    HomeCalendarDemo,\n    HomeChordDemo,\n    HomeChoroplethDemo,\n    HomeCirclePackingDemo,\n    HomeLineDemo,\n    HomeMarimekkoDemo,\n    HomePieDemo,\n    HomeRadarDemo,\n    HomeRadialBarDemo,\n    HomeSankeyDemo,\n    HomeStreamDemo,\n    HomeSunburstDemo,\n    HomeSwarmPlotDemo,\n    HomeTreeMapDemo,\n    HomeVoronoiDemo,\n} from '../../components/home'\n\nconst HomeDemosPage = () => (\n    <Container>\n        <HomeChoroplethDemo />\n        <HomeRadialBarDemo />\n        <HomeAreaBumpDemo />\n        <HomeBarDemo isHorizontal={false} />\n        <HomeBarDemo isHorizontal={true} />\n        <HomeBumpDemo />\n        <HomeMarimekkoDemo />\n        <HomeCalendarDemo />\n        <HomeChordDemo />\n        <HomeCirclePackingDemo />\n        <HomeLineDemo />\n        <HomePieDemo />\n        <HomeRadarDemo />\n        <HomeSankeyDemo />\n        <HomeStreamDemo />\n        <HomeSunburstDemo />\n        <HomeSwarmPlotDemo />\n        <HomeTreeMapDemo />\n        <HomeVoronoiDemo />\n    </Container>\n)\n\nconst Container = styled.div`\n    background: ${({ theme }) => theme.colors.coloredRange[2]};\n    background: transparent;\n    display: flex;\n    flex-wrap: wrap;\n    transform-origin: top left;\n    // transform: scale3d(0.5, 0.5, 1);\n    width: 1800px;\n\n    & > * {\n        width: 600px;\n        height: 400px;\n        display: flex;\n    }\n`\n\nexport default HomeDemosPage\n","export const randColor = () => `hsl(${Math.round(Math.random() * 360)}, 70%, 50%)`\n","export const countryCodes = [\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AS',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CC',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CU',\n    'CV',\n    'CW',\n    'CX',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FM',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HM',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IR',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KP',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MH',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MP',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NF',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PW',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SY',\n    'SZ',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'UM',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VI',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n]\n","export const names = [\n    'John',\n    'Raoul',\n    'Jane',\n    'Marcel',\n    'Ibrahim',\n    'Junko',\n    'Lyu',\n    'André',\n    'Maki',\n    'Véronique',\n    'Thibeau',\n    'Josiane',\n    'Raphaël',\n    'Mathéo',\n    'Margot',\n    'Hugo',\n    'Christian',\n    'Louis',\n    'Ella',\n    'Alton',\n    'Jimmy',\n    'Guillaume',\n    'Sébastien',\n    'Alfred',\n    'Bon',\n    'Solange',\n    'Kendrick',\n    'Jared',\n    'Satoko',\n    'Tomoko',\n    'Line',\n    'Delphine',\n    'Leonard',\n    'Alphonse',\n    'Lisa',\n    'Bart',\n    'Benjamin',\n    'Homer',\n    'Jack',\n]\n","export const programmingLanguages = [\n    'php',\n    'make',\n    'javascript',\n    'go',\n    'erlang',\n    'elixir',\n    'lisp',\n    'haskell',\n    'python',\n    'ruby',\n    'hack',\n    'scala',\n    'java',\n    'rust',\n    'c',\n    'css',\n    'sass',\n    'stylus',\n]\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\ntype Options = Partial<{\n    float: boolean\n    markerCount: number\n    measureCount: number\n    rangeCount: number\n    subtitle: string\n    title: string\n}>\n\nexport const generateBulletData = (\n    id: string,\n    max: number,\n    {\n        title,\n        subtitle,\n        rangeCount = 5,\n        measureCount = 1,\n        markerCount = 1,\n        float = false,\n    }: Options = {}\n) => {\n    const ranges = range(rangeCount - 1).reduce(\n        acc => {\n            const remaining = max - acc[0]\n            return [random(remaining, float), ...acc]\n        },\n        [max]\n    )\n\n    const measures = range(measureCount).reduce<number[]>(acc => {\n        if (acc.length === 0) return [random(max, float)]\n        return [random(acc[0], float), ...acc]\n    }, [])\n\n    const markers = range(markerCount).map(() => max * 0.6 + random(max * 0.4))\n\n    return {\n        id,\n        title,\n        subtitle,\n        ranges,\n        measures,\n        markers,\n    }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport { names } from './sets'\n\nexport const generateChordData = ({\n    keys = names,\n    size = 7,\n    minValue = 0,\n    maxValue = 2000,\n} = {}) => {\n    const maxSize = Math.min(keys.length, size)\n    const selectedKeys = keys.slice(0, maxSize)\n\n    const matrix = range(maxSize).map(() =>\n        range(maxSize).map(() => {\n            if (Math.random() < 0.66) return random(minValue, maxValue / 4)\n            return random(minValue, maxValue)\n        })\n    )\n\n    return { matrix, keys: selectedKeys }\n}\n","import random from 'lodash/random'\n\ntype Link = {\n    source: string\n    target: string\n    distance: number\n}\n\ntype ExtraNode = {\n    id: string\n    height: number\n    color: string\n    size: number\n}\n\nexport const generateNetworkData = ({\n    rootSize = 32,\n    midSize = 24,\n    leafSize = 12,\n    minMidNodes = 5,\n    maxMidNodes = 11,\n    minLeaves = 3,\n    maxLeaves = 9,\n}: {\n    rootSize?: number\n    midSize?: number\n    leafSize?: number\n    minMidNodes?: number\n    maxMidNodes?: number\n    minLeaves?: number\n    maxLeaves?: number\n} = {}) => {\n    const rootNode = {\n        id: 'Node 0',\n        height: 2,\n        size: rootSize,\n        color: 'rgb(244, 117, 96)',\n    }\n    let nodes = Array.from({ length: random(minMidNodes, maxMidNodes) }, (_, k) => ({\n        id: `Node ${k + 1}`,\n        height: 1,\n        size: midSize,\n        color: 'rgb(97, 205, 187)',\n    }))\n\n    const links: Link[] = []\n    const extraNodes: ExtraNode[] = []\n    nodes.forEach(source => {\n        links.push({\n            source: 'Node 0',\n            target: source.id,\n            distance: 80,\n        })\n        nodes.forEach(target => {\n            if (Math.random() < 0.04) {\n                links.push({\n                    source: source.id,\n                    target: target.id,\n                    distance: 80,\n                })\n            }\n        })\n        Array.from({ length: random(minLeaves, maxLeaves) }, (_, k) => {\n            extraNodes.push({\n                id: `${source.id}.${k}`,\n                height: 0,\n                size: leafSize,\n                color: 'rgb(232, 193, 160)',\n            })\n            links.push({\n                source: source.id,\n                target: `${source.id}.${k}`,\n                distance: 50,\n            })\n\n            return null\n        })\n    })\n\n    nodes.push(rootNode)\n    nodes = nodes.concat(extraNodes)\n\n    return { nodes, links }\n}\n","import random from 'lodash/random'\nimport range from 'lodash/range'\nimport shuffle from 'lodash/shuffle'\n\ntype Options = Partial<{\n    size: number\n    keys: Array<{\n        key: string\n        random?: [number, number]\n        shuffle?: string[]\n    }>\n}>\n\nexport const generateParallelCoordinatesData = ({\n    size = 26,\n    keys = [\n        { key: 'temp', random: [-10, 40] },\n        { key: 'cost', random: [200, 400000] },\n        { key: 'color', shuffle: ['red', 'yellow', 'green'] },\n        { key: 'target', shuffle: ['A', 'B', 'C', 'D', 'E'] },\n        { key: 'volume', random: [0.2, 7.6] },\n    ],\n}: Options = {}) => {\n    const datumGenerator = () =>\n        keys.reduce((acc, key) => {\n            let value\n            if (key.random !== undefined) {\n                value = random(...key.random)\n            } else if (key.shuffle !== undefined) {\n                value = shuffle(key.shuffle)[0]\n            }\n\n            return { ...acc, [key.key]: value }\n        }, {})\n\n    return range(size).map(datumGenerator)\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { randColor } from './color'\nimport { names } from './sets'\n\ntype Link = {\n    source: string\n    target: string\n    value: number\n}\n\nconst availableNodes = names.map(name => ({ id: name }))\n\nconst getNodeTargets = (id: string, links: Link[], currentPath?: string[]): string[] => {\n    const targets = links\n        .filter(({ source }) => source === id)\n        .map(({ target }) => {\n            if (target === id) {\n                throw new Error(\n                    `[sankey] a node cannot be linked on itself:\\n  link: ${id} —> ${id}`\n                )\n            }\n            if (currentPath?.includes(target)) {\n                throw new Error(\n                    `[sankey] found cyclic dependency:\\n  link: ${currentPath.join(\n                        ' —> '\n                    )} —> ${target}`\n                )\n            }\n            return target\n        })\n\n    return targets.reduce(\n        (acc, targetId) =>\n            acc.concat(\n                getNodeTargets(\n                    targetId,\n                    links,\n                    currentPath ? [...currentPath, targetId] : [id, targetId]\n                )\n            ),\n        targets\n    )\n}\n\nconst getNodesTargets = (links: Link[]) =>\n    links.reduce<Record<string, string[]>>((targetsById, link) => {\n        if (!targetsById[link.source]) {\n            targetsById[link.source] = getNodeTargets(link.source, links)\n        }\n\n        return targetsById\n    }, {})\n\nexport const generateSankeyData = ({\n    nodeCount,\n    maxIterations = 3,\n}: {\n    nodeCount?: number\n    maxIterations?: number\n} = {}) => {\n    const nodes = availableNodes.slice(0, nodeCount).map(node =>\n        Object.assign({}, node, {\n            nodeColor: randColor(),\n        })\n    )\n\n    const links: Link[] = []\n    shuffle(nodes).forEach(({ id }) => {\n        range(random(1, maxIterations)).forEach(() => {\n            const targetsById = getNodesTargets(links)\n            const randId = shuffle(nodes.filter(n => n.id !== id).map(n => n.id))[0]\n            if (\n                (!targetsById[randId] || !targetsById[randId].includes(id)) &&\n                (!targetsById[id] || !targetsById[id].includes(randId))\n            ) {\n                links.push({\n                    source: id,\n                    target: randId,\n                    value: random(5, 200),\n                })\n            }\n        })\n    })\n\n    return { nodes, links }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\n\ntype SwarmPlotDatum = {\n    id: string\n    categories?: number[]\n    group: string\n    price: number\n    volume: number\n}\n\nconst randomPrice = () => random(0, 500)\nconst randomVolume = () => random(4, 20)\nconst randomCategory = () => random(3, 17)\n\nexport const generateSwarmPlotData = (\n    groups: string[],\n    { min = 60, max = 100, categoryCount = 0 }\n) => ({\n    groups,\n    data: groups.reduce<SwarmPlotDatum[]>(\n        (acc, group, groupIndex) => [\n            ...acc,\n            ...range(random(min, max))\n                .map(() => randomPrice())\n                .map((price, index) => {\n                    const datum: SwarmPlotDatum = {\n                        id: `${groupIndex}.${index}`,\n                        group,\n                        price,\n                        volume: randomVolume(),\n                    }\n\n                    if (categoryCount > 0) {\n                        datum.categories = range(categoryCount).map(randomCategory)\n                    }\n\n                    return datum\n                }),\n        ],\n        []\n    ),\n})\n\nexport const randomizeSwarmPlotData = (previousData: ReturnType<typeof generateSwarmPlotData>) => ({\n    groups: previousData.groups,\n    data: previousData.data.map(d => {\n        const datum = {\n            ...d,\n            group: shuffle(previousData.groups)[0],\n            price: randomPrice(),\n            volume: randomVolume(),\n        }\n\n        if (d.categories !== undefined) {\n            datum.categories = range(3).map(randomCategory)\n        }\n\n        return datum\n    }),\n})\n","interface XYRangeStaticValues {\n    values: string[] | number[]\n}\n\ninterface XYRandomNumericValues {\n    length: number\n    min: number\n    max: number\n    round?: boolean\n}\n\ntype XYRangeValues = XYRangeStaticValues | XYRandomNumericValues\n\nconst getValueGenerator = (config: XYRangeValues) => {\n    let generator: (index: number) => string | number\n\n    if ('values' in config) {\n        generator = (index: number) => config.values[index]\n    } else {\n        generator = () => {\n            let value = config.min + Math.random() * (config.max - config.min)\n            if (config.round) {\n                value = Math.round(value)\n            }\n\n            return value\n        }\n    }\n\n    return generator\n}\n\nexport const generateXYSeries = ({\n    serieIds,\n    x,\n    y,\n}: {\n    serieIds: string[]\n    x: XYRangeValues\n    y: XYRangeValues\n}) => {\n    const xLength = 'length' in x ? x.length : x.values.length\n\n    const getX = getValueGenerator(x)\n    const getY = getValueGenerator(y)\n\n    return serieIds.map(serieId => {\n        return {\n            id: serieId,\n            data: Array.from({ length: xLength }).map((_, index) => {\n                return {\n                    x: getX(index),\n                    y: getY(index),\n                }\n            }),\n        }\n    })\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { timeDays } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport * as color from './color'\nimport * as sets from './sets'\n\nexport { sets }\nexport const randColor = color.randColor\n\nexport const generateProgrammingLanguageStats = (shouldShuffle = true, limit = -1) => {\n    let langs = sets.programmingLanguages\n    if (shouldShuffle) {\n        langs = shuffle(langs)\n    }\n    if (limit < 1) {\n        limit = 1 + Math.round(Math.random() * (sets.programmingLanguages.length - 1))\n    }\n\n    return langs.slice(0, limit).map(language => ({\n        label: language,\n        value: Math.round(Math.random() * 600),\n        color: randColor(),\n    }))\n}\n\nexport const uniqRand = <T>(generator: (...args: unknown[]) => T) => {\n    const used: T[] = []\n\n    return (...args: unknown[]) => {\n        let value\n        do {\n            value = generator(...args)\n        } while (used.includes(value))\n\n        used.push(value)\n\n        return value\n    }\n}\n\nexport const randCountryCode = () => shuffle(sets.countryCodes)[0]\n\ntype DrinkDatum = {\n    id: string\n    color: string\n    data: Array<{\n        color: string\n        x: string\n        y: number\n    }>\n}\n\nexport const generateDrinkStats = (xSize = 16) => {\n    const rand = () => random(0, 60)\n    const types = ['whisky', 'rhum', 'gin', 'vodka', 'cognac']\n    const country = uniqRand(randCountryCode)\n\n    const data: DrinkDatum[] = types.map(id => ({\n        id,\n        color: randColor(),\n        data: [],\n    }))\n\n    range(xSize).forEach(() => {\n        const x = country()\n        types.forEach(id => {\n            data.find(d => d.id === id)?.data.push({\n                color: randColor(),\n                x,\n                y: rand(),\n            })\n        })\n    })\n\n    return data\n}\n\nexport const generateSerie = (xSize = 20) => {\n    const max = 100 + Math.random() * (Math.random() * 600)\n\n    return range(xSize).map(() => Math.round(Math.random() * max))\n}\n\nexport const generateSeries = (ids: string[], xKeys: string[]) =>\n    ids.map(id => ({\n        id,\n        color: randColor(),\n        data: xKeys.map(x => ({ x, y: Math.round(Math.random() * 300) })),\n    }))\n\nexport const generateStackData = (size = 3) => {\n    const length = 16\n    return range(size).map(() => generateSerie(length).map((v, i) => ({ x: i, y: v })))\n}\n\nexport const generateCountriesPopulation = (size: number) => {\n    const countryCode = uniqRand(randCountryCode)\n\n    return range(size).map(() => ({\n        country: countryCode(),\n        population: 200 + Math.round(Math.random() * Math.random() * 1000000),\n    }))\n}\n\nexport const generateOrderedDayCounts = (from: Date, to: Date) => {\n    const days = timeDays(from, to)\n    const dayFormat = timeFormat('%Y-%m-%d')\n\n    return days.map(day => {\n        return {\n            value: Math.round(Math.random() * 400),\n            day: dayFormat(day),\n        }\n    })\n}\n\nexport const generateDayCounts = (from: Date, to: Date, maxSize = 0.9) => {\n    const days = generateOrderedDayCounts(from, to)\n\n    const size =\n        Math.round(days.length * (maxSize * 0.4)) +\n        Math.round(Math.random() * (days.length * (maxSize * 0.6)))\n\n    return shuffle(days).slice(0, size)\n}\n\nexport const generateCountriesData = (\n    keys: string[],\n    { size = 12, min = 0, max = 200, withColors = true } = {}\n) =>\n    sets.countryCodes.slice(0, size).map(country => {\n        const d: Record<string, unknown> = {\n            country,\n        }\n        keys.forEach(key => {\n            d[key] = random(min, max)\n            if (withColors === true) {\n                d[`${key}Color`] = randColor()\n            }\n        })\n\n        return d\n    })\n\nconst libTreeItems = [\n    [\n        'viz',\n        [\n            ['stack', [['cchart'], ['xAxis'], ['yAxis'], ['layers']]],\n            [\n                'ppie',\n                [\n                    ['chart', [['pie', [['outline'], ['slices'], ['bbox']]], ['donut'], ['gauge']]],\n                    ['legends'],\n                ],\n            ],\n        ],\n    ],\n    ['colors', [['rgb'], ['hsl']]],\n    [\n        'utils',\n        [['randomize'], ['resetClock'], ['noop'], ['tick'], ['forceGC'], ['stackTrace'], ['dbg']],\n    ],\n    ['generators', [['address'], ['city'], ['animal'], ['movie'], ['user']]],\n    [\n        'set',\n        [\n            ['clone'],\n            ['intersect'],\n            ['merge'],\n            ['reverse'],\n            ['toArray'],\n            ['toObject'],\n            ['fromCSV'],\n            ['slice'],\n            ['append'],\n            ['prepend'],\n            ['shuffle'],\n            ['pick'],\n            ['plouc'],\n        ],\n    ],\n    [\n        'text',\n        [\n            ['trim'],\n            ['slugify'],\n            ['snakeCase'],\n            ['camelCase'],\n            ['repeat'],\n            ['padLeft'],\n            ['padRight'],\n            ['sanitize'],\n            ['ploucify'],\n        ],\n    ],\n    [\n        'misc',\n        [\n            ['greetings', [['hey'], ['HOWDY'], ['aloha'], ['AHOY']]],\n            ['other'],\n            [\n                'path',\n                [\n                    ['pathA'],\n                    ['pathB', [['pathB1'], ['pathB2'], ['pathB3'], ['pathB4']]],\n                    [\n                        'pathC',\n                        [\n                            ['pathC1'],\n                            ['pathC2'],\n                            ['pathC3'],\n                            ['pathC4'],\n                            ['pathC5'],\n                            ['pathC6'],\n                            ['pathC7'],\n                            ['pathC8'],\n                            ['pathC9'],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n]\n\ninterface LibTreeDatum {\n    name: string\n    loc?: number\n    color: string\n    children?: LibTreeDatum[]\n}\n\nexport const generateLibTree = (\n    name = 'nivo',\n    limit?: number | null,\n    children = libTreeItems\n): LibTreeDatum => {\n    limit = limit || children.length\n    if (limit > children.length) {\n        limit = children.length\n    }\n\n    const tree: LibTreeDatum = {\n        name,\n        color: randColor(),\n    }\n    if (children?.length > 0) {\n        tree.children = range(limit).map((_, i) => {\n            const leaf = children[i]\n\n            // full path `${name}.${leaf[0]}`\n            return generateLibTree(leaf[0] as string, null, (leaf[1] ?? []) as any)\n        })\n    } else {\n        tree.loc = Math.round(Math.random() * 200000)\n    }\n\n    return tree\n}\n\nconst wines = ['chardonay', 'carmenere', 'syrah']\nconst wineTastes = ['fruity', 'bitter', 'heavy', 'strong', 'sunny']\n\nexport const generateWinesTastes = ({ randMin = 20, randMax = 120 } = {}) => {\n    const data = wineTastes.map(taste => {\n        const d: Record<string, unknown> = { taste }\n        wines.forEach(wine => {\n            d[wine] = random(randMin, randMax)\n        })\n\n        return d\n    })\n\n    return { data, keys: wines }\n}\n\nexport * from './bullet'\nexport * from './chord'\nexport * from './network'\nexport * from './parallelCoordinates'\nexport * from './sankey'\nexport * from './swarmplot'\nexport * from './xySeries'\n","import { LayerId, Layout, OffsetId } from './types'\n\nexport const defaultProps = {\n    layout: 'vertical' as Layout,\n    offset: 'none' as OffsetId,\n    outerPadding: 0,\n    innerPadding: 3,\n\n    layers: ['grid', 'axes', 'bars', 'legends'] as LayerId[],\n\n    enableGridX: false,\n    enableGridY: true,\n\n    colors: { scheme: 'nivo' },\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import * as React from 'react'\nimport {\n    stackOffsetDiverging,\n    stackOffsetExpand,\n    stackOffsetNone,\n    stackOffsetSilhouette,\n    stackOffsetWiggle,\n} from 'd3-shape'\nimport { ScaleLinear } from '@nivo/scales'\nimport { Box, Dimensions, Theme, SvgDefsAndFill, ModernMotionProps, ValueFormat } from '@nivo/core'\nimport { AxisProps } from '@nivo/axes'\nimport { OrdinalColorScaleConfig, InheritedColorConfig } from '@nivo/colors'\nimport { LegendProps } from '@nivo/legends'\n\nexport type DatumId = string | number\nexport type DatumValue = number\nexport type DatumFormattedValue = string | number\n\nexport type DatumPropertyAccessor<RawDatum, T> = (datum: RawDatum) => T\n\nexport interface DataProps<RawDatum> {\n    data: RawDatum[]\n    id: string | number | DatumPropertyAccessor<RawDatum, DatumId>\n    value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    dimensions: {\n        id: string\n        value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    }[]\n    valueFormat?: ValueFormat<number>\n}\n\nexport interface NormalizedDatum<RawDatum> {\n    index: number\n    id: DatumId\n    value: DatumValue\n    data: RawDatum\n}\n\nexport interface DimensionDatum<RawDatum> {\n    id: string\n    value: number\n    formattedValue: string | number\n    color: string\n    x: number\n    y: number\n    width: number\n    height: number\n    datum: ComputedDatum<RawDatum>\n}\n\nexport interface ComputedDatum<RawDatum> extends NormalizedDatum<RawDatum> {\n    x: number\n    y: number\n    width: number\n    height: number\n    dimensions: DimensionDatum<RawDatum>[]\n}\n\nexport interface BarDatum<RawDatum> extends DimensionDatum<RawDatum> {\n    key: string\n    fill?: string\n    borderColor: string\n    borderWidth: number\n}\n\nexport type LabelAccessorFunction<RawDatum> = (datum: ComputedDatum<RawDatum>) => string | number\n\nexport type LayerId = 'grid' | 'axes' | 'bars' | 'legends'\n\nexport interface CustomLayerProps<RawDatum> {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number>\n    dimensionsScale: ScaleLinear<number>\n}\n\nexport type CustomLayer<RawDatum> = React.FC<CustomLayerProps<RawDatum>>\n\nexport type Layer<RawDatum> = LayerId | CustomLayer<RawDatum>\n\nexport interface TooltipProps<RawDatum> {\n    bar: BarDatum<RawDatum>\n}\n\nexport type BarTooltipType<RawDatum> = (props: TooltipProps<RawDatum>) => JSX.Element\n\nexport type Layout = 'horizontal' | 'vertical'\n\nexport const offsetById = {\n    // Applies a zero baseline and normalizes the values\n    // for each point such that the topline is always one.\n    expand: stackOffsetExpand,\n    // Positive values are stacked above zero, negative values\n    // are stacked below zero, and zero values are stacked at zero.\n    diverging: stackOffsetDiverging,\n    // Applies a zero baseline.\n    none: stackOffsetNone,\n    // Shifts the baseline down such that the center of the streamgraph\n    // is always at zero.\n    silouhette: stackOffsetSilhouette,\n    // Shifts the baseline so as to minimize the weighted wiggle of layers.\n    // This offset is recommended for streamgraphs in conjunction with the inside-out order.\n    // See Stacked Graphs—Geometry & Aesthetics by Bryon & Wattenberg for more information.\n    wiggle: stackOffsetWiggle,\n}\n\nexport type OffsetId = keyof typeof offsetById\n\nexport type CommonProps<RawDatum> = {\n    margin: Box\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n\n    // axes and grid\n    axisTop?: AxisProps | null\n    axisRight?: AxisProps | null\n    axisBottom?: AxisProps | null\n    axisLeft?: AxisProps | null\n    enableGridX: boolean\n    gridXValues?: number[]\n    enableGridY: boolean\n    gridYValues?: number[]\n\n    // colors, theme and border\n    colors: OrdinalColorScaleConfig<Omit<DimensionDatum<RawDatum>, 'color' | 'fill'>>\n    theme: Theme\n    borderWidth: number\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // labels\n    enableLabels: boolean\n    label: string | LabelAccessorFunction<RawDatum>\n    labelSkipWidth: number\n    labelSkipHeight: number\n    labelTextColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // interactivity\n    isInteractive: boolean\n    tooltip: BarTooltipType<RawDatum>\n\n    legends: LegendProps[]\n\n    role: string\n}\n\nexport type MouseEventHandler<RawDatum, ElementType> = (\n    datum: BarDatum<RawDatum>,\n    event: React.MouseEvent<ElementType>\n) => void\n\nexport type MouseEventHandlers<RawDatum, ElementType> = Partial<{\n    onClick: MouseEventHandler<RawDatum, ElementType>\n    onMouseEnter: MouseEventHandler<RawDatum, ElementType>\n    onMouseMove: MouseEventHandler<RawDatum, ElementType>\n    onMouseLeave: MouseEventHandler<RawDatum, ElementType>\n}>\n\nexport type SvgProps<RawDatum> = DataProps<RawDatum> &\n    Dimensions &\n    Partial<CommonProps<RawDatum>> &\n    ModernMotionProps &\n    SvgDefsAndFill<BarDatum<RawDatum>> &\n    MouseEventHandlers<RawDatum, SVGRectElement> & {\n        layers?: Layer<RawDatum>[]\n    }\n","import { useMemo } from 'react'\nimport { get } from 'lodash'\nimport { stack as d3Stack, Stack, Series } from 'd3-shape'\nimport { useValueFormatter, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { createLinearScale, ScaleLinear } from '@nivo/scales'\nimport {\n    NormalizedDatum,\n    ComputedDatum,\n    DataProps,\n    DatumPropertyAccessor,\n    Layout,\n    DimensionDatum,\n    CommonProps,\n    CustomLayerProps,\n    BarDatum,\n    OffsetId,\n    offsetById,\n} from './types'\n\n// d3 stack does not support defining `.keys()` using\n// a mix of keys and custom value accessors, so we're\n// building a map of accessors in any case, we're gonna\n// use it later for `stack.value()`.\nexport const useDataDimensions = <RawDatum>(rawDimensions: DataProps<RawDatum>['dimensions']) =>\n    useMemo(() => {\n        const dimensions: Record<string, (datum: RawDatum) => number> = {}\n        const dimensionIds: string[] = []\n        rawDimensions.forEach(dimension => {\n            dimensionIds.push(dimension.id)\n            dimensions[dimension.id] =\n                typeof dimension.value === 'function'\n                    ? dimension.value\n                    : (datum: RawDatum) => get(datum, dimension.value as string, 0)\n        })\n\n        return { dimensionIds, dimensions }\n    }, [rawDimensions])\n\nexport const useStack = <RawDatum>(\n    dimensionIds: string[],\n    dimensions: Record<string, (datum: RawDatum) => number>,\n    offset: OffsetId\n) =>\n    useMemo(() => {\n        const offsetFunction = offsetById[offset]\n\n        return d3Stack<RawDatum>()\n            .keys(dimensionIds)\n            .value((datum, key) => dimensions[key](datum))\n            .offset(offsetFunction)\n    }, [dimensionIds, dimensions, offset])\n\nexport const useStackedData = <RawDatum>(\n    stack: Stack<any, RawDatum, string>,\n    data: DataProps<RawDatum>['data']\n) =>\n    useMemo(() => {\n        const stacked = stack(data)\n\n        const allValues: number[] = []\n        stacked.forEach(dimension => {\n            dimension.forEach(datum => {\n                allValues.push(datum[0])\n                allValues.push(datum[1])\n            })\n        })\n\n        const min = Math.min(...allValues)\n        const max = Math.max(...allValues)\n\n        return {\n            stacked,\n            min,\n            max,\n        }\n    }, [stack, data])\n\nexport const useDimensionsScale = (\n    min: number,\n    max: number,\n    width: number,\n    height: number,\n    layout: Layout\n) =>\n    useMemo(() => {\n        const scaleData = { all: [min, max], min, max }\n        const size = layout === 'vertical' ? height : width\n        const axis = layout === 'vertical' ? 'y' : 'x'\n        // here 'axis' determines whether the domain should be reversed or not\n        return createLinearScale({ type: 'linear', min, max }, scaleData, size, axis)\n    }, [min, max, width, height, layout])\n\nexport const useNormalizedData = <RawDatum>(\n    data: DataProps<RawDatum>['data'],\n    id: DataProps<RawDatum>['id'],\n    value: DataProps<RawDatum>['value']\n) => {\n    const getId: DatumPropertyAccessor<RawDatum, string | number> =\n        typeof id === 'function' ? id : (datum: RawDatum) => get(datum, id)\n    const getValue: DatumPropertyAccessor<RawDatum, number> =\n        typeof value === 'function' ? value : (datum: RawDatum) => get(datum, value, 0)\n\n    return useMemo(() => {\n        const normalized: NormalizedDatum<RawDatum>[] = []\n        data.forEach((datum, index) => {\n            const datumId = getId(datum)\n            const datumValue = getValue(datum)\n\n            normalized.push({\n                index,\n                id: datumId,\n                value: datumValue,\n                data: datum,\n            })\n        })\n\n        return normalized\n    }, [data, getId, getValue])\n}\n\nexport const useThicknessScale = <RawDatum>({\n    data,\n    width,\n    height,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    width: number\n    height: number\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) =>\n    useMemo(() => {\n        const totalValue = data.reduce((acc, datum) => acc + datum.value, 0)\n        const scaleData = { all: [0, totalValue], min: 0, max: totalValue }\n        const totalPadding = 2 * outerPadding + (data.length - 1) * innerPadding\n        const size = layout === 'vertical' ? width - totalPadding : height - totalPadding\n        // here 'axis' means that the scale will be going forward, i.e. not reversed\n        return createLinearScale({ type: 'linear' }, scaleData, size, 'x')\n    }, [data, width, height, layout])\n\nexport const useComputedData = <RawDatum>({\n    data,\n    stacked,\n    dimensionIds,\n    valueFormat,\n    thicknessScale,\n    dimensionsScale,\n    colors,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    stacked: Series<RawDatum, string>[]\n    dimensionIds: string[]\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    thicknessScale: ScaleLinear<number>\n    dimensionsScale: ScaleLinear<number>\n    colors: CommonProps<RawDatum>['colors']\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) => {\n    const getColor = useOrdinalColorScale<Omit<DimensionDatum<RawDatum>, 'color'>>(colors, 'id')\n\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    return useMemo(() => {\n        const computedData: ComputedDatum<RawDatum>[] = []\n\n        let position = outerPadding\n\n        data.forEach(datum => {\n            const thickness = thicknessScale(datum.value)\n\n            const computedDatum: ComputedDatum<RawDatum> = {\n                ...datum,\n                x: layout === 'vertical' ? position : 0,\n                y: layout === 'vertical' ? 0 : position,\n                width: layout === 'vertical' ? thickness : 0,\n                height: layout === 'vertical' ? 0 : thickness,\n                dimensions: [],\n            }\n\n            const allPositions: number[] = []\n            let totalSize = 0\n\n            position += thickness + innerPadding\n\n            dimensionIds.forEach(dimensionId => {\n                const dimension = stacked.find(stack => stack.key === dimensionId)\n                if (dimension) {\n                    const dimensionPoint = dimension[datum.index]\n                    const dimensionDatum: DimensionDatum<RawDatum> = {\n                        id: dimensionId,\n                        datum: computedDatum,\n                        value: dimensionPoint[1] - dimensionPoint[0],\n                        formattedValue: formatValue(dimensionPoint[1] - dimensionPoint[0]),\n                        color: 'rgba(0, 0, 0, 0)',\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    }\n\n                    const position0 = dimensionsScale(dimensionPoint[0])\n                    const position1 = dimensionsScale(dimensionPoint[1])\n\n                    if (layout === 'vertical') {\n                        dimensionDatum.x = computedDatum.x\n                        dimensionDatum.y = Math.min(position0, position1)\n                        dimensionDatum.width = computedDatum.width\n                        dimensionDatum.height = Math.max(position0, position1) - dimensionDatum.y\n\n                        allPositions.push(dimensionDatum.y)\n                        totalSize += dimensionDatum.height\n                    } else {\n                        dimensionDatum.x = Math.min(position0, position1)\n                        dimensionDatum.y = computedDatum.y\n                        dimensionDatum.width = Math.max(position0, position1) - dimensionDatum.x\n                        dimensionDatum.height = computedDatum.height\n\n                        allPositions.push(dimensionDatum.x)\n                        totalSize += dimensionDatum.width\n                    }\n\n                    dimensionDatum.color = getColor(dimensionDatum)\n\n                    computedDatum.dimensions.push(dimensionDatum)\n                }\n\n                if (layout === 'vertical') {\n                    computedDatum.y = Math.min(...allPositions)\n                    computedDatum.height = totalSize\n                } else {\n                    computedDatum.x = Math.min(...allPositions)\n                    computedDatum.width = totalSize\n                }\n            })\n\n            computedData.push(computedDatum)\n        })\n\n        return computedData\n    }, [\n        data,\n        stacked,\n        dimensionIds,\n        thicknessScale,\n        dimensionsScale,\n        layout,\n        outerPadding,\n        innerPadding,\n        getColor,\n        formatValue,\n    ])\n}\n\nexport const useBars = <RawDatum>(\n    data: ComputedDatum<RawDatum>[],\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>,\n    borderWidth: number\n) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<DimensionDatum<RawDatum>>(borderColor, theme)\n\n    return useMemo(() => {\n        const all: BarDatum<RawDatum>[] = []\n        data.forEach(datum => {\n            datum.dimensions.forEach(dimension => {\n                all.push({\n                    key: `${datum.id}-${dimension.id}`,\n                    ...dimension,\n                    borderColor: getBorderColor(dimension),\n                    borderWidth,\n                })\n            })\n        })\n\n        return all\n    }, [data, borderWidth, getBorderColor])\n}\n\nexport const useMarimekko = <RawDatum>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions: rawDimensions,\n    layout,\n    offset,\n    outerPadding,\n    innerPadding,\n    colors,\n    borderColor,\n    borderWidth,\n    width,\n    height,\n}: {\n    data: DataProps<RawDatum>['data']\n    id: DataProps<RawDatum>['id']\n    value: DataProps<RawDatum>['value']\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    dimensions: DataProps<RawDatum>['dimensions']\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n    colors: CommonProps<RawDatum>['colors']\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n    borderWidth: number\n    width: number\n    height: number\n}) => {\n    const { dimensionIds, dimensions } = useDataDimensions<RawDatum>(rawDimensions)\n    const stack = useStack<RawDatum>(dimensionIds, dimensions, offset)\n    const { stacked, min, max } = useStackedData<RawDatum>(stack, data)\n    const normalizedData = useNormalizedData<RawDatum>(data, id, value)\n    const thicknessScale = useThicknessScale({\n        data: normalizedData,\n        width,\n        height,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const dimensionsScale = useDimensionsScale(min, max, width, height, layout)\n    const computedData = useComputedData<RawDatum>({\n        data: normalizedData,\n        stacked,\n        dimensionIds,\n        valueFormat,\n        thicknessScale,\n        dimensionsScale,\n        colors,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const bars = useBars<RawDatum>(computedData, borderColor, borderWidth)\n\n    return {\n        computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n        dimensionIds,\n    }\n}\n\nexport const useLayerContext = <RawDatum>({\n    data,\n    bars,\n    thicknessScale,\n    dimensionsScale,\n}: {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number>\n    dimensionsScale: ScaleLinear<number>\n}): CustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            data,\n            bars,\n            thicknessScale,\n            dimensionsScale,\n        }),\n        [data, bars, thicknessScale, dimensionsScale]\n    )\n\nexport const useLegendData = <RawDatum>(dimensionIds: string[], bars: BarDatum<RawDatum>[]) => {\n    const legendData: {\n        id: string\n        label: string\n        color: string\n        fill?: string\n    }[] = []\n\n    dimensionIds.forEach(dimensionId => {\n        const bar = bars.find(bar => bar.id === dimensionId)\n        if (bar) {\n            legendData.push({\n                id: dimensionId,\n                label: dimensionId,\n                color: bar.color,\n                fill: bar.fill,\n            })\n        }\n    })\n\n    return legendData\n}\n","import { createElement, MouseEvent, useCallback } from 'react'\nimport { animated, SpringValues, to } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\n\ninterface BarProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    bar: BarDatum<RawDatum>\n    animatedProps: SpringValues<{\n        x: number\n        y: number\n        width: number\n        height: number\n        opacity: number\n        color: string\n        borderColor: string\n    }>\n    isInteractive: boolean\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bar = <RawDatum,>({\n    bar,\n    animatedProps,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        event => showTooltipFromEvent(createElement(tooltip, { bar }), event),\n        [showTooltipFromEvent, tooltip, bar]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.(bar, event)\n        },\n        [onClick, bar]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseMove?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(bar, event)\n            hideTooltip()\n        },\n        [onMouseLeave, bar, hideTooltip]\n    )\n\n    return (\n        <animated.rect\n            x={animatedProps.x}\n            y={animatedProps.y}\n            width={to(animatedProps.width, value => Math.max(value, 0))}\n            height={to(animatedProps.height, value => Math.max(value, 0))}\n            fill={bar.fill ?? animatedProps.color}\n            stroke={animatedProps.borderColor}\n            strokeWidth={bar.borderWidth}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\nimport { Bar } from './Bar'\n\ninterface BarsProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    isInteractive: boolean\n    bars: BarDatum<RawDatum>[]\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bars = <RawDatum,>({\n    bars,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarsProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<\n        BarDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            width: number\n            height: number\n            color: string\n            opacity: number\n            borderColor: string\n        }\n    >(bars, {\n        keys: bar => bar.key,\n        initial: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        from: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 0,\n            borderColor: bar.borderColor,\n        }),\n        enter: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        update: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        leave: bar => ({\n            opacity: 0,\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, bar) => (\n                <Bar<RawDatum>\n                    key={bar.key}\n                    bar={bar}\n                    animatedProps={style}\n                    isInteractive={isInteractive}\n                    tooltip={tooltip}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                />\n            ))}\n        </>\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BarDatum } from './types'\n\nexport const BarTooltip = <RawDatum,>({ bar }: { bar: BarDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={`${bar.datum.id} - ${bar.id}`}\n        value={bar.formattedValue}\n        enableChip={true}\n        color={bar.color}\n    />\n)\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { SvgProps, LayerId, DimensionDatum } from './types'\nimport { defaultProps } from './props'\nimport { useMarimekko, useLayerContext, useLegendData } from './hooks'\nimport { Bars } from './Bars'\nimport { BarTooltip } from './BarTooltip'\n\nconst InnerMarimekko = <RawDatum,>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions,\n    width,\n    height,\n    margin: partialMargin,\n    layout = defaultProps.layout,\n    offset = defaultProps.offset,\n    outerPadding = defaultProps.outerPadding,\n    innerPadding = defaultProps.innerPadding,\n    layers = defaultProps.layers,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<DimensionDatum<RawDatum>, 'color'>\n    >,\n    defs = [],\n    fill = [],\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<DimensionDatum<RawDatum>>,\n    isInteractive = defaultProps.isInteractive,\n    tooltip = BarTooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    legends = [],\n    role,\n}: SvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { computedData, bars, thicknessScale, dimensionsScale, dimensionIds } =\n        useMarimekko<RawDatum>({\n            data,\n            id,\n            value,\n            dimensions,\n            valueFormat,\n            layout,\n            offset,\n            outerPadding,\n            innerPadding,\n            colors,\n            borderColor,\n            borderWidth,\n            width: innerWidth,\n            height: innerHeight,\n        })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        bars: null,\n        legends: null,\n    }\n\n    const boundDefs = bindDefs(defs, bars, fill)\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Bars<RawDatum>\n                key=\"bars\"\n                bars={bars}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n            />\n        )\n    }\n\n    const xScale = layout === 'vertical' ? thicknessScale : dimensionsScale\n    const yScale = layout === 'vertical' ? dimensionsScale : thicknessScale\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                xScale={enableGridX ? xScale : undefined}\n                yScale={enableGridY ? yScale : undefined}\n                width={innerWidth}\n                height={innerHeight}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    const legendData = useLegendData<RawDatum>(dimensionIds, bars)\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <g key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    const layerContext = useLayerContext<RawDatum>({\n        data: computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as LayerId] !== undefined) {\n                    return layerById[layer as LayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Marimekko = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    ...otherProps\n}: SvgProps<RawDatum>) => (\n    <Container\n        theme={otherProps.theme}\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n    >\n        <InnerMarimekko<RawDatum>\n            isInteractive={isInteractive}\n            animate={animate}\n            motionConfig={motionConfig}\n            {...otherProps}\n        />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Marimekko } from './Marimekko'\nimport { SvgProps } from './types'\n\nexport const ResponsiveMarimekko = <RawDatum,>(\n    props: Omit<SvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Marimekko<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","export default function (a, b) {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}","export default function (d) {\n  return d;\n}","import { BoxLegendSvg } from '@nivo/legends'\nimport { CompletePieSvgProps, ComputedDatum, DatumId } from './types'\n\ninterface PieLegendsProps<RawDatum> {\n    width: number\n    height: number\n    legends: CompletePieSvgProps<RawDatum>['legends']\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    toggleSerie: (id: DatumId) => void\n}\n\nconst PieLegends = <RawDatum,>({\n    width,\n    height,\n    legends,\n    data,\n    toggleSerie,\n}: PieLegendsProps<RawDatum>) => {\n    return (\n        <>\n            {legends.map((legend, i) => (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                    toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n                />\n            ))}\n        </>\n    )\n}\n\nexport default PieLegends\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const PieTooltip = <RawDatum,>({ datum }: { datum: ComputedDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={datum.id}\n        value={datum.formattedValue}\n        enableChip={true}\n        color={datum.color}\n    />\n)\n\nexport default PieTooltip\n","import constant from \"./constant.js\";\nimport descending from \"./descending.js\";\nimport identity from \"./identity.js\";\nimport { tau } from \"./math.js\";\nexport default function () {\n  var value = identity,\n      sortValues = descending,\n      sort = null,\n      startAngle = constant(0),\n      endAngle = constant(tau),\n      padAngle = constant(0);\n\n  function pie(data) {\n    var i,\n        n = data.length,\n        j,\n        k,\n        sum = 0,\n        index = new Array(n),\n        arcs = new Array(n),\n        a0 = +startAngle.apply(this, arguments),\n        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),\n        a1,\n        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\n        pa = p * (da < 0 ? -1 : 1),\n        v;\n\n    for (i = 0; i < n; ++i) {\n      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\n        sum += v;\n      }\n    } // Optionally sort the arcs by previously-computed values or by data.\n\n\n    if (sortValues != null) index.sort(function (i, j) {\n      return sortValues(arcs[i], arcs[j]);\n    });else if (sort != null) index.sort(function (i, j) {\n      return sort(data[i], data[j]);\n    }); // Compute the arcs! They are stored in the original data's order.\n\n    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\n      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\n        data: data[j],\n        index: i,\n        value: v,\n        startAngle: a0,\n        endAngle: a1,\n        padAngle: p\n      };\n    }\n\n    return arcs;\n  }\n\n  pie.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), pie) : value;\n  };\n\n  pie.sortValues = function (_) {\n    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\n  };\n\n  pie.sort = function (_) {\n    return arguments.length ? (sort = _, sortValues = null, pie) : sort;\n  };\n\n  pie.startAngle = function (_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : startAngle;\n  };\n\n  pie.endAngle = function (_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : endAngle;\n  };\n\n  pie.padAngle = function (_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : padAngle;\n  };\n\n  return pie;\n}","import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CompletePieSvgProps } from './types'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: CompletePieSvgProps<RawDatum>['borderWidth']\n    borderColor: CompletePieSvgProps<RawDatum>['borderColor']\n    isInteractive: CompletePieSvgProps<RawDatum>['isInteractive']\n    onClick?: CompletePieSvgProps<RawDatum>['onClick']\n    onMouseEnter?: CompletePieSvgProps<RawDatum>['onMouseEnter']\n    onMouseMove?: CompletePieSvgProps<RawDatum>['onMouseMove']\n    onMouseLeave?: CompletePieSvgProps<RawDatum>['onMouseLeave']\n    setActiveId: (id: null | string | number) => void\n    tooltip: CompletePieSvgProps<RawDatum>['tooltip']\n    transitionMode: CompletePieSvgProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    setActiveId,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            setActiveId(datum.id)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, setActiveId, onMouseEnter, tooltip])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, onMouseMove, tooltip])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveId(null)\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveId, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { ArcLabelsLayer, ArcLinkLabelsLayer } from '@nivo/arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport PieLegends from './PieLegends'\nimport { useNormalizedData, usePieFromBox, usePieLayerContext } from './hooks'\nimport { ComputedDatum, PieLayer, PieSvgProps, PieLayerId } from './types'\nimport { defaultProps } from './props'\nimport { Arcs } from './Arcs'\n\nconst InnerPie = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    layers = defaultProps.layers as PieLayer<RawDatum>[],\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsComponent,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n    arcLinkLabelComponent,\n\n    // styling\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip = defaultProps.tooltip,\n\n    transitionMode = defaultProps.transitionMode,\n\n    legends = defaultProps.legends,\n    role = defaultProps.role,\n}: PieSvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const {\n        dataWithArc,\n        legendData,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n        setActiveId,\n        toggleSerie,\n    } = usePieFromBox<RawDatum>({\n        data: normalizedData,\n        width: innerWidth,\n        height: innerHeight,\n        fit,\n        innerRadius: innerRadiusRatio,\n        startAngle,\n        endAngle,\n        padAngle,\n        sortByValue,\n        cornerRadius,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n    })\n\n    const boundDefs = bindDefs(defs, dataWithArc, fill)\n\n    const layerById: Record<PieLayerId, ReactNode> = {\n        arcLinkLabels: null,\n        arcs: null,\n        arcLabels: null,\n        legends: null,\n    }\n\n    if (enableArcLinkLabels && layers.includes('arcLinkLabels')) {\n        layerById.arcLinkLabels = (\n            <ArcLinkLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLinkLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLinkLabel}\n                skipAngle={arcLinkLabelsSkipAngle}\n                offset={arcLinkLabelsOffset}\n                diagonalLength={arcLinkLabelsDiagonalLength}\n                straightLength={arcLinkLabelsStraightLength}\n                strokeWidth={arcLinkLabelsThickness}\n                textOffset={arcLinkLabelsTextOffset}\n                textColor={arcLinkLabelsTextColor}\n                linkColor={arcLinkLabelsColor}\n                component={arcLinkLabelComponent}\n            />\n        )\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                setActiveId={setActiveId}\n                tooltip={tooltip}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    if (legends.length > 0 && layers.includes('legends')) {\n        layerById.legends = (\n            <PieLegends<RawDatum>\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                data={legendData}\n                legends={legends}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    const layerContext = usePieLayerContext<RawDatum>({\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as PieLayerId] !== undefined) {\n                    return layerById[layer as PieLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Pie = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerPie<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Pie } from './Pie'\nimport { PieSvgProps } from './types'\n\nexport const ResponsivePie = <RawDatum,>(\n    props: Omit<PieSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Pie<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { createElement, useEffect, useMemo, useRef } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    Arc,\n    findArcUnderCursor,\n    useArcLabels,\n    drawCanvasArcLabels,\n    useArcLinkLabels,\n    drawCanvasArcLinkLabels,\n} from '@nivo/arcs'\nimport { useNormalizedData, usePieFromBox } from './hooks'\nimport { ComputedDatum, PieCanvasProps } from './types'\nimport { defaultProps } from './props'\n\nconst InnerPieCanvas = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = 1,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n\n    legends = defaultProps.legends,\n}: PieCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const { dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius, setActiveId } =\n        usePieFromBox<RawDatum>({\n            data: normalizedData,\n            width: innerWidth,\n            height: innerHeight,\n            fit,\n            innerRadius: innerRadiusRatio,\n            startAngle,\n            endAngle,\n            padAngle,\n            sortByValue,\n            cornerRadius,\n            activeInnerRadiusOffset,\n            activeOuterRadiusOffset,\n        })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const arcLabels = useArcLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        label: arcLabel,\n        skipAngle: arcLabelsSkipAngle,\n        offset: arcLabelsRadiusOffset,\n        textColor: arcLabelsTextColor,\n    })\n\n    const arcLinkLabels = useArcLinkLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        skipAngle: arcLinkLabelsSkipAngle,\n        offset: arcLinkLabelsOffset,\n        diagonalLength: arcLinkLabelsDiagonalLength,\n        straightLength: arcLinkLabelsStraightLength,\n        label: arcLinkLabel,\n        linkColor: arcLinkLabelsColor,\n        textOffset: arcLinkLabelsTextOffset,\n        textColor: arcLinkLabelsTextColor,\n    })\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n        arcGenerator.context(ctx)\n\n        ctx.save()\n        ctx.translate(centerX, centerY)\n\n        dataWithArc.forEach(arc => {\n            ctx.beginPath()\n            ctx.fillStyle = arc.color\n\n            ctx.strokeStyle = getBorderColor(arc)\n            ctx.lineWidth = borderWidth\n\n            arcGenerator(arc.arc)\n\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableArcLinkLabels === true) {\n            drawCanvasArcLinkLabels<ComputedDatum<RawDatum>>(\n                ctx,\n                arcLinkLabels,\n                theme,\n                arcLinkLabelsThickness\n            )\n        }\n\n        if (enableArcLabels === true) {\n            drawCanvasArcLabels<ComputedDatum<RawDatum>>(ctx, arcLabels, theme)\n        }\n\n        // legends assume a box rather than a center,\n        // that's why we restore previously saved position here.\n        ctx.restore()\n        legends.forEach(legend => {\n            renderLegendToCanvas(ctx, {\n                ...legend,\n                data: dataWithArc,\n                containerWidth: innerWidth,\n                containerHeight: innerHeight,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        centerX,\n        centerY,\n        arcGenerator,\n        dataWithArc,\n        getBorderColor,\n        enableArcLabels,\n        arcLabels,\n        enableArcLinkLabels,\n        arcLinkLabels,\n        arcLinkLabelsThickness,\n        legends,\n        theme,\n    ])\n\n    const arcs = useMemo(\n        () =>\n            dataWithArc.map(datum => ({\n                id: datum.id,\n                ...datum.arc,\n            })),\n        [dataWithArc]\n    )\n\n    const getArcFromMouse = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!canvasEl.current) return null\n\n        const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n        const hoveredArc = findArcUnderCursor<Arc & { id: string | number }>(\n            margin.left + centerX,\n            margin.top + centerY,\n            radius,\n            innerRadius,\n            arcs,\n            x,\n            y\n        )\n\n        if (!hoveredArc) return null\n\n        return dataWithArc.find(datum => datum.id === hoveredArc.id)\n    }\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        const datum = getArcFromMouse(event)\n        if (datum) {\n            onMouseMove?.(datum, event)\n            setActiveId(datum.id)\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n        } else {\n            setActiveId(null)\n            hideTooltip()\n        }\n    }\n\n    const handleMouseLeave = () => {\n        hideTooltip()\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!onClick) return\n\n        const arc = getArcFromMouse(event)\n        if (arc) {\n            onClick(arc, event)\n        }\n    }\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const PieCanvas = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerPieCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { PieCanvas } from './PieCanvas'\nimport { PieCanvasProps } from './types'\n\nexport const ResponsivePieCanvas = <RawDatum,>(\n    props: Omit<PieCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <PieCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import curveLinear from \"./linear.js\";\nexport var curveRadialLinear = curveRadial(curveLinear);\n\nfunction Radial(curve) {\n  this._curve = curve;\n}\n\nRadial.prototype = {\n  areaStart: function areaStart() {\n    this._curve.areaStart();\n  },\n  areaEnd: function areaEnd() {\n    this._curve.areaEnd();\n  },\n  lineStart: function lineStart() {\n    this._curve.lineStart();\n  },\n  lineEnd: function lineEnd() {\n    this._curve.lineEnd();\n  },\n  point: function point(a, r) {\n    this._curve.point(r * Math.sin(a), r * -Math.cos(a));\n  }\n};\nexport default function curveRadial(curve) {\n  function radial(context) {\n    return new Radial(curve(context));\n  }\n\n  radial._curve = curve;\n  return radial;\n}","import curveRadial, { curveRadialLinear } from \"./curve/radial.js\";\nimport line from \"./line.js\";\nexport function lineRadial(l) {\n  var c = l.curve;\n  l.angle = l.x, delete l.x;\n  l.radius = l.y, delete l.y;\n\n  l.curve = function (_) {\n    return arguments.length ? c(curveRadial(_)) : c()._curve;\n  };\n\n  return l;\n}\nexport default function () {\n  return lineRadial(line().curve(curveRadialLinear));\n}","import { useMemo } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { lineRadial, CurveFactory } from 'd3-shape'\nimport { ScaleLinear } from 'd3-scale'\nimport { useMotionConfig, useTheme, useAnimatedPath } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { RadarCommonProps } from './types'\n\ninterface RadarLayerProps<D extends Record<string, unknown>> {\n    data: D[]\n    item: string\n    colorByKey: Record<string | number, string>\n    fillByKey: Record<string, string | null>\n    radiusScale: ScaleLinear<number, number>\n    rotation: number\n    angleStep: number\n    curveFactory: CurveFactory\n    borderWidth: RadarCommonProps<D>['borderWidth']\n    borderColor: RadarCommonProps<D>['borderColor']\n    fillOpacity: RadarCommonProps<D>['fillOpacity']\n    blendMode: RadarCommonProps<D>['blendMode']\n}\n\nexport const RadarLayer = <D extends Record<string, unknown>>({\n    data,\n    item: key,\n    colorByKey,\n    fillByKey,\n    radiusScale,\n    rotation,\n    angleStep,\n    curveFactory,\n    borderWidth,\n    borderColor,\n    fillOpacity,\n    blendMode,\n}: RadarLayerProps<D>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const lineGenerator = useMemo(() => {\n        return lineRadial<number>()\n            .radius(d => radiusScale(d))\n            .angle((_, i) => rotation + i * angleStep)\n            .curve(curveFactory)\n    }, [radiusScale, rotation, angleStep, curveFactory])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(lineGenerator(data.map(d => d[key] as number)) as string)\n    const animatedProps = useSpring<{ fill: string; stroke: string }>({\n        fill: colorByKey[key],\n        stroke: getBorderColor({ key, color: colorByKey[key] }),\n        config: springConfig,\n        immediate: !animate,\n    })\n    const fill = fillByKey[key] ?? animatedProps.fill\n\n    return (\n        <animated.path\n            key={key}\n            d={animatedPath}\n            fill={fill}\n            fillOpacity={fillOpacity}\n            stroke={animatedProps.stroke}\n            strokeWidth={borderWidth}\n            style={{ mixBlendMode: blendMode }}\n        />\n    )\n}\n","import { createElement } from 'react'\nimport { useSprings } from '@react-spring/web'\nimport { useMotionConfig, positionFromAngle, radiansToDegrees } from '@nivo/core'\nimport { GridLabelComponent } from './types'\n\nconst textAnchorFromAngle = (_angle: number) => {\n    const angle = radiansToDegrees(_angle) + 90\n\n    if (angle <= 10 || angle >= 350 || (angle >= 170 && angle <= 190)) return 'middle' as const\n    if (angle > 180) return 'end' as const\n    return 'start' as const\n}\n\ninterface RadarGridLabelsProps {\n    radius: number\n    angles: number[]\n    indices: string[]\n    label: GridLabelComponent\n    labelOffset: number\n}\n\nexport const RadarGridLabels = ({\n    radius,\n    angles,\n    indices,\n    label: labelComponent,\n    labelOffset,\n}: RadarGridLabelsProps) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = indices.map((index, i) => {\n        const position = positionFromAngle(angles[i], radius + labelOffset)\n        const textAnchor = textAnchorFromAngle(angles[i])\n\n        return {\n            id: index,\n            angle: radiansToDegrees(angles[i]),\n            anchor: textAnchor,\n            ...position,\n        }\n    })\n\n    const springs = useSprings(\n        labels.length,\n        labels.map(label => ({\n            transform: `translate(${label.x}, ${label.y})`,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return createElement(labelComponent, {\n                    key: label.id,\n                    id: label.id,\n                    anchor: label.anchor,\n                    angle: label.angle,\n                    x: label.x,\n                    y: label.y,\n                    animated: animatedProps,\n                })\n            })}\n        </>\n    )\n}\n","import { memo, SVGProps, useMemo } from 'react'\nimport { lineRadial, curveLinearClosed } from 'd3-shape'\nimport { animated, useSpring, to } from '@react-spring/web'\nimport { useTheme, useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { RadarCommonProps } from './types'\n\ninterface RadarGridLevelCircularProps {\n    radius: number\n}\n\nconst RadarGridLevelCircular = memo(({ radius }: RadarGridLevelCircularProps) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        radius,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            fill=\"none\"\n            r={to(animatedProps.radius, value => Math.max(value, 0))}\n            {...(theme.grid.line as Omit<SVGProps<SVGCircleElement>, 'ref'>)}\n        />\n    )\n})\n\ninterface RadarGridLevelLinearProps {\n    radius: number\n    rotation: number\n    angleStep: number\n    dataLength: number\n}\n\nconst RadarGridLevelLinear = ({\n    radius,\n    rotation,\n    angleStep,\n    dataLength,\n}: RadarGridLevelLinearProps) => {\n    const theme = useTheme()\n\n    const radarLineGenerator = useMemo(\n        () =>\n            lineRadial<number>()\n                .angle(i => rotation + i * angleStep)\n                .radius(radius)\n                .curve(curveLinearClosed),\n        [rotation, angleStep, radius]\n    )\n\n    const points = Array.from({ length: dataLength }, (_, i) => i)\n    const animatedPath = useAnimatedPath(radarLineGenerator(points) as string)\n\n    return (\n        <animated.path\n            fill=\"none\"\n            d={animatedPath}\n            {...(theme.grid.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n        />\n    )\n}\n\ninterface RadarGridLevelsProps<D extends Record<string, unknown>> {\n    shape: RadarCommonProps<D>['gridShape']\n    radius: number\n    rotation: number\n    angleStep: number\n    dataLength: number\n}\n\nexport const RadarGridLevels = <D extends Record<string, unknown>>({\n    shape,\n    ...props\n}: RadarGridLevelsProps<D>) => {\n    return shape === 'circular' ? (\n        <RadarGridLevelCircular radius={props.radius} />\n    ) : (\n        <RadarGridLevelLinear {...props} />\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { positionFromAngle, useTheme } from '@nivo/core'\nimport { RadarGridLabels } from './RadarGridLabels'\nimport { RadarGridLevels } from './RadarGridLevels'\nimport { GridLabelComponent, RadarCommonProps } from './types'\n\ninterface RadarGridProps<D extends Record<string, unknown>> {\n    indices: string[]\n    shape: RadarCommonProps<D>['gridShape']\n    radius: number\n    levels: number\n    rotation: number\n    angleStep: number\n    label: GridLabelComponent\n    labelOffset: number\n}\n\nexport const RadarGrid = <D extends Record<string, unknown>>({\n    indices,\n    levels,\n    shape,\n    radius,\n    rotation,\n    angleStep,\n    label,\n    labelOffset,\n}: RadarGridProps<D>) => {\n    const theme = useTheme()\n    const { radii, angles } = useMemo(() => {\n        return {\n            radii: Array.from({ length: levels })\n                .map((_, i) => (radius / levels) * (i + 1))\n                .reverse(),\n            angles: Array.from({ length: indices.length }).map(\n                (_, i) => rotation + i * angleStep - Math.PI / 2\n            ),\n        }\n    }, [indices, levels, radius, rotation, angleStep])\n\n    return (\n        <>\n            {angles.map((angle, i) => {\n                const position = positionFromAngle(angle, radius)\n                return (\n                    <line\n                        key={`axis.${i}`}\n                        x1={0}\n                        y1={0}\n                        x2={position.x}\n                        y2={position.y}\n                        {...(theme.grid.line as SVGProps<SVGLineElement>)}\n                    />\n                )\n            })}\n            {radii.map((radius, i) => (\n                <RadarGridLevels<D>\n                    key={`level.${i}`}\n                    shape={shape}\n                    radius={radius}\n                    rotation={rotation}\n                    angleStep={angleStep}\n                    dataLength={indices.length}\n                />\n            ))}\n            <RadarGridLabels\n                radius={radius}\n                angles={angles}\n                indices={indices}\n                labelOffset={labelOffset}\n                label={label}\n            />\n        </>\n    )\n}\n","import { useMemo, useState, useCallback, createElement } from 'react'\nimport { Arc } from 'd3-shape'\nimport { positionFromAngle, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { RadarCommonProps, RadarDataProps, RadarSliceTooltipDatum } from './types'\n\ninterface RadarSliceProps<D extends Record<string, unknown>> {\n    datum: D\n    keys: RadarDataProps<D>['keys']\n    index: string | number\n    formatValue: (value: number, context: string) => string\n    colorByKey: Record<string, string>\n    startAngle: number\n    endAngle: number\n    radius: number\n    arcGenerator: Arc<void, { startAngle: number; endAngle: number }>\n    tooltip: RadarCommonProps<D>['sliceTooltip']\n}\n\nexport const RadarSlice = <D extends Record<string, unknown>>({\n    datum,\n    keys,\n    index,\n    formatValue,\n    colorByKey,\n    radius,\n    startAngle,\n    endAngle,\n    arcGenerator,\n    tooltip,\n}: RadarSliceProps<D>) => {\n    const [isHover, setIsHover] = useState(false)\n    const theme = useTheme()\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const tooltipData = useMemo(() => {\n        const data: RadarSliceTooltipDatum[] = keys.map(key => ({\n            color: colorByKey[key],\n            id: key,\n            value: datum[key] as number,\n            formattedValue: formatValue(datum[key] as number, key),\n        }))\n        data.sort((a, b) => a.value - b.value)\n        data.reverse()\n\n        return data\n    }, [datum, keys, formatValue, colorByKey])\n\n    const showItemTooltip = useCallback(\n        event => {\n            setIsHover(true)\n            showTooltipFromEvent(\n                createElement(tooltip, {\n                    index,\n                    data: tooltipData,\n                }),\n                event\n            )\n        },\n        [showTooltipFromEvent, tooltip, index, tooltipData]\n    )\n\n    const hideItemTooltip = useCallback(() => {\n        setIsHover(false)\n        hideTooltip()\n    }, [hideTooltip, setIsHover])\n\n    const { path, tipX, tipY } = useMemo(() => {\n        const position = positionFromAngle(\n            startAngle + (endAngle - startAngle) * 0.5 - Math.PI / 2,\n            radius\n        )\n\n        return {\n            path: arcGenerator({ startAngle, endAngle }) as string,\n            tipX: position.x,\n            tipY: position.y,\n        }\n    }, [startAngle, endAngle, radius, arcGenerator])\n\n    return (\n        <>\n            {isHover && <line x1={0} y1={0} x2={tipX} y2={tipY} style={theme.crosshair.line} />}\n            <path\n                d={path}\n                fill=\"#F00\"\n                fillOpacity={0}\n                onMouseEnter={showItemTooltip}\n                onMouseMove={showItemTooltip}\n                onMouseLeave={hideItemTooltip}\n            />\n        </>\n    )\n}\n","import { arc as d3Arc } from 'd3-shape'\nimport { RadarSlice } from './RadarSlice'\nimport { RadarColorMapping, RadarCommonProps, RadarDataProps } from './types'\n\ninterface RadarSlicesProps<D extends Record<string, unknown>> {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    getIndex: (d: D) => string | number\n    formatValue: (value: number, context: string) => string\n    colorByKey: RadarColorMapping\n    radius: number\n    rotation: number\n    angleStep: number\n    tooltip: RadarCommonProps<D>['sliceTooltip']\n}\n\nexport const RadarSlices = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    getIndex,\n    formatValue,\n    colorByKey,\n    radius,\n    rotation,\n    angleStep,\n    tooltip,\n}: RadarSlicesProps<D>) => {\n    const arc = d3Arc<{ startAngle: number; endAngle: number }>().outerRadius(radius).innerRadius(0)\n\n    const halfAngleStep = angleStep * 0.5\n    let rootStartAngle = rotation - halfAngleStep\n\n    return (\n        <>\n            {data.map(d => {\n                const index = getIndex(d)\n                const startAngle = rootStartAngle\n                const endAngle = startAngle + angleStep\n\n                rootStartAngle += angleStep\n\n                return (\n                    <RadarSlice\n                        key={index}\n                        datum={d}\n                        keys={keys}\n                        index={index}\n                        formatValue={formatValue}\n                        colorByKey={colorByKey}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        radius={radius}\n                        arcGenerator={arc}\n                        tooltip={tooltip}\n                    />\n                )\n            })}\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { ScaleLinear } from 'd3-scale'\nimport { useTheme, positionFromAngle, DotsItem, usePropertyAccessor } from '@nivo/core'\nimport { getInheritedColorGenerator } from '@nivo/colors'\nimport { RadarCommonProps, RadarDataProps, PointProps, PointData, RadarColorMapping } from './types'\n\ninterface RadarDotsProps<D extends Record<string, unknown>> {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    radiusScale: ScaleLinear<number, number>\n    getIndex: (d: D) => string\n    colorByKey: RadarColorMapping\n    rotation: number\n    angleStep: number\n    symbol?: RadarCommonProps<D>['dotSymbol']\n    size: number\n    color: RadarCommonProps<D>['dotColor']\n    borderWidth: number\n    borderColor: RadarCommonProps<D>['dotBorderColor']\n    enableLabel: boolean\n    label: RadarCommonProps<D>['dotLabel']\n    formatValue: (value: number, context: string) => string\n    labelYOffset: number\n}\n\nexport const RadarDots = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    getIndex,\n    colorByKey,\n    radiusScale,\n    rotation,\n    angleStep,\n    symbol,\n    size = 6,\n    color = { from: 'color' },\n    borderWidth = 0,\n    borderColor = { from: 'color' },\n    enableLabel = false,\n    label = 'value',\n    formatValue,\n    labelYOffset,\n}: RadarDotsProps<D>) => {\n    const theme = useTheme()\n    const fillColor = getInheritedColorGenerator(color, theme)\n    const strokeColor = getInheritedColorGenerator(borderColor, theme)\n    const getLabel = usePropertyAccessor<PointData, string | number>(label)\n\n    const points: PointProps[] = useMemo(\n        () =>\n            data.reduce((acc, datum, i) => {\n                const index = getIndex(datum)\n                keys.forEach(key => {\n                    const value = datum[key] as number\n\n                    const pointData: PointData = {\n                        index,\n                        key,\n                        value,\n                        formattedValue: formatValue(value, key),\n                        color: colorByKey[key],\n                    }\n\n                    acc.push({\n                        key: `${key}.${index}`,\n                        label: enableLabel ? getLabel(pointData) : undefined,\n                        style: {\n                            fill: fillColor(pointData),\n                            stroke: strokeColor(pointData),\n                            ...positionFromAngle(\n                                rotation + angleStep * i - Math.PI / 2,\n                                radiusScale(datum[key] as number)\n                            ),\n                        },\n                        data: pointData,\n                    })\n                })\n\n                return acc\n            }, [] as PointProps[]),\n        [\n            data,\n            keys,\n            getIndex,\n            colorByKey,\n            enableLabel,\n            getLabel,\n            formatValue,\n            fillColor,\n            strokeColor,\n            rotation,\n            angleStep,\n            radiusScale,\n        ]\n    )\n\n    return (\n        <>\n            {points.map(point => (\n                <DotsItem\n                    key={point.key}\n                    x={point.style.x}\n                    y={point.style.y}\n                    symbol={symbol}\n                    size={size}\n                    color={point.style.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.style.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    datum={point.data}\n                />\n            ))}\n        </>\n    )\n}\n","import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { GridLabelProps } from './types'\n\nexport const RadarGridLabel = ({ id, anchor, animated: animatedProps }: GridLabelProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={animatedProps.transform}>\n            <text style={theme.axis.ticks.text} dominantBaseline=\"central\" textAnchor={anchor}>\n                {id}\n            </text>\n        </animated.g>\n    )\n}\n","import { useMemo } from 'react'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\nimport { RadarSliceTooltipProps } from './types'\n\nexport const RadarSliceTooltip = ({ index, data }: RadarSliceTooltipProps) => {\n    const rows = useMemo(\n        () =>\n            data.map(datum => [\n                <Chip key={datum.id} color={datum.color} />,\n                datum.id,\n                datum.formattedValue,\n            ]),\n        [data]\n    )\n\n    return <TableTooltip title={<strong>{index}</strong>} rows={rows} />\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { RadarLayer } from './RadarLayer'\nimport { RadarGrid } from './RadarGrid'\nimport { RadarSlices } from './RadarSlices'\nimport { RadarDots } from './RadarDots'\nimport { svgDefaultProps } from './props'\nimport { RadarLayerId, RadarSvgProps } from './types'\nimport { useRadar } from './hooks'\n\ntype InnerRadarProps<D extends Record<string, unknown>> = Omit<\n    RadarSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerRadar = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    indexBy,\n    layers = svgDefaultProps.layers,\n    rotation: rotationDegrees = svgDefaultProps.rotation,\n    maxValue = svgDefaultProps.maxValue,\n    valueFormat,\n    curve = svgDefaultProps.curve,\n    margin: partialMargin,\n    width,\n    height,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    gridLevels = svgDefaultProps.gridLevels,\n    gridShape = svgDefaultProps.gridShape,\n    gridLabel = svgDefaultProps.gridLabel,\n    gridLabelOffset = svgDefaultProps.gridLabelOffset,\n    enableDots = svgDefaultProps.enableDots,\n    dotSymbol,\n    dotSize = svgDefaultProps.dotSize,\n    dotColor = svgDefaultProps.dotColor,\n    dotBorderWidth = svgDefaultProps.dotBorderWidth,\n    dotBorderColor = svgDefaultProps.dotBorderColor,\n    enableDotLabel = svgDefaultProps.enableDotLabel,\n    dotLabel = svgDefaultProps.dotLabel,\n    dotLabelYOffset = svgDefaultProps.dotLabelYOffset,\n    colors = svgDefaultProps.colors,\n    fillOpacity = svgDefaultProps.fillOpacity,\n    blendMode = svgDefaultProps.blendMode,\n    isInteractive = svgDefaultProps.isInteractive,\n    sliceTooltip = svgDefaultProps.sliceTooltip,\n    legends = svgDefaultProps.legends,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n}: InnerRadarProps<D>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        getIndex,\n        indices,\n        formatValue,\n        colorByKey,\n        fillByKey,\n        boundDefs,\n        rotation,\n        radius,\n        radiusScale,\n        centerX,\n        centerY,\n        angleStep,\n        curveFactory,\n        boundLegends,\n        customLayerProps,\n    } = useRadar<D>({\n        data,\n        keys,\n        indexBy,\n        rotationDegrees,\n        maxValue,\n        valueFormat,\n        curve,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        legends,\n        defs,\n        fill,\n    })\n\n    const layerById: Record<RadarLayerId, ReactNode> = {\n        grid: null,\n        layers: null,\n        slices: null,\n        dots: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <g key=\"grid\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarGrid<D>\n                    levels={gridLevels}\n                    shape={gridShape}\n                    radius={radius}\n                    rotation={rotation}\n                    angleStep={angleStep}\n                    indices={indices}\n                    label={gridLabel}\n                    labelOffset={gridLabelOffset}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('layers')) {\n        layerById.layers = (\n            <g key=\"layers\" transform={`translate(${centerX}, ${centerY})`}>\n                {keys.map(key => (\n                    <RadarLayer<D>\n                        key={key}\n                        data={data}\n                        item={key}\n                        colorByKey={colorByKey}\n                        fillByKey={fillByKey}\n                        radiusScale={radiusScale}\n                        rotation={rotation}\n                        angleStep={angleStep}\n                        curveFactory={curveFactory}\n                        borderWidth={borderWidth}\n                        borderColor={borderColor}\n                        fillOpacity={fillOpacity}\n                        blendMode={blendMode}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    if (layers.includes('slices') && isInteractive) {\n        layerById.slices = (\n            <g key=\"slices\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarSlices<D>\n                    data={data}\n                    keys={keys}\n                    getIndex={getIndex}\n                    formatValue={formatValue}\n                    colorByKey={colorByKey}\n                    radius={radius}\n                    rotation={rotation}\n                    angleStep={angleStep}\n                    tooltip={sliceTooltip}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('dots') && enableDots) {\n        layerById.dots = (\n            <g key=\"dots\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarDots<D>\n                    data={data}\n                    keys={keys}\n                    getIndex={getIndex}\n                    radiusScale={radiusScale}\n                    rotation={rotation}\n                    angleStep={angleStep}\n                    symbol={dotSymbol}\n                    size={dotSize}\n                    colorByKey={colorByKey}\n                    color={dotColor}\n                    borderWidth={dotBorderWidth}\n                    borderColor={dotBorderColor}\n                    enableLabel={enableDotLabel}\n                    label={dotLabel}\n                    formatValue={formatValue}\n                    labelYOffset={dotLabelYOffset}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {boundLegends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={width}\n                        containerHeight={height}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Radar = <D extends Record<string, unknown>>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: RadarSvgProps<D>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerRadar<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { RadarSvgProps } from './types'\nimport { Radar } from './Radar'\n\nexport const ResponsiveRadar = <D extends Record<string, unknown>>(\n    props: Omit<RadarSvgProps<D>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Radar<D> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { CircularAxisTickProps } from './types'\n\nexport const CircularAxisTick = ({ label, animated: animatedProps }: CircularAxisTickProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={animatedProps.opacity}>\n            <animated.line\n                x1={animatedProps.x1}\n                y1={animatedProps.y1}\n                x2={animatedProps.x2}\n                y2={animatedProps.y2}\n                style={theme.axis.ticks.line}\n            />\n            <animated.text\n                dx={animatedProps.textX}\n                dy={animatedProps.textY}\n                dominantBaseline=\"central\"\n                style={theme.axis.ticks.text}\n                textAnchor=\"middle\"\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { createElement, SVGProps, useMemo } from 'react'\nimport { useSpring, useTransition } from '@react-spring/web'\nimport { useMotionConfig, useTheme, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { ArcLine } from '@nivo/arcs'\nimport { CircularAxisConfig, CircularAxisTickAnimatedProps } from './types'\nimport { CircularAxisTick } from './CircularAxisTick'\n\ntype CircularAxisProps = {\n    type: 'inner' | 'outer'\n    center?: [number, number]\n    radius: number\n    startAngle: number\n    endAngle: number\n    scale: AnyScale\n} & CircularAxisConfig\n\nconst getLinePositions = (angle: number, innerRadius: number, outerRadius: number) => {\n    const start = positionFromAngle(degreesToRadians(angle), innerRadius)\n    const end = positionFromAngle(degreesToRadians(angle), outerRadius)\n\n    return {\n        x1: start.x,\n        y1: start.y,\n        x2: end.x,\n        y2: end.y,\n    }\n}\n\nconst getTextPosition = (angle: number, radius: number) => {\n    const position = positionFromAngle(degreesToRadians(angle), radius)\n\n    return {\n        textX: position.x,\n        textY: position.y,\n    }\n}\n\nexport const CircularAxis = ({\n    type,\n    center = [0, 0],\n    radius,\n    startAngle: originalStartAngle,\n    endAngle: originalEndAngle,\n    scale,\n    tickSize = 5,\n    tickPadding = 12,\n    tickComponent = CircularAxisTick,\n}: CircularAxisProps) => {\n    const startAngle = originalStartAngle - 90\n    const endAngle = originalEndAngle - 90\n\n    const theme = useTheme()\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const spring = useSpring<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>({\n        radius,\n        startAngle,\n        endAngle,\n        opacity: 1,\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    const ticks = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => ({\n            key: index,\n            label: value,\n            angle: scale(value) - 90,\n        }))\n    }, [scale])\n\n    const outerRadius = type === 'inner' ? radius - tickSize : radius + tickSize\n    const textRadius = type === 'inner' ? outerRadius - tickPadding : outerRadius + tickPadding\n\n    const transition = useTransition<typeof ticks[0], CircularAxisTickAnimatedProps>(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        from: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 0,\n        }),\n        enter: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        update: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        leave: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 0,\n        }),\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    return (\n        <g transform={`translate(${center[0]}, ${center[1]})`}>\n            <ArcLine\n                animated={spring}\n                {...(theme.axis.domain.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n                fill=\"none\"\n            />\n            {transition((animatedProps, tick) =>\n                createElement(tickComponent, {\n                    key: tick.key,\n                    label: tick.label,\n                    animated: animatedProps,\n                })\n            )}\n        </g>\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { useTransition, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\n\ninterface PolarGridProps {\n    scale: AnyScale\n    ticks?: number | number[]\n    innerRadius: number\n    outerRadius: number\n}\n\nexport const RadialGrid = ({ scale, innerRadius, outerRadius }: PolarGridProps) => {\n    const theme = useTheme()\n\n    const angles = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((angleValue, index) => ({\n            id: index,\n            angle: scale(angleValue) - 90,\n        }))\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        { id: number; angle: number },\n        { angle: number; opacity: number }\n    >(angles, {\n        keys: item => item.id,\n        initial: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        from: item => ({\n            angle: item.angle,\n            opacity: 0,\n        }),\n        enter: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        update: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        leave: item => ({\n            angle: item.angle,\n            opacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, angle) => (\n                <animated.g\n                    key={angle.id}\n                    transform={style.angle.to(v => `rotate(${v})`)}\n                    opacity={style.opacity}\n                >\n                    <line\n                        x1={innerRadius}\n                        x2={outerRadius}\n                        {...(theme.grid.line as SVGProps<SVGLineElement>)}\n                    />\n                </animated.g>\n            ))}\n        </>\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { ArcLine } from '@nivo/arcs'\n\ninterface CircularGridProps {\n    scale: AnyScale\n    startAngle: number\n    endAngle: number\n}\n\nexport const CircularGrid = ({\n    scale,\n    startAngle: originalStartAngle,\n    endAngle: originalEndAngle,\n}: CircularGridProps) => {\n    const theme = useTheme()\n\n    const startAngle = originalStartAngle - 90\n    const endAngle = originalEndAngle - 90\n\n    const radii = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => {\n            let radius = scale(value) as number\n            if ('bandwidth' in scale) {\n                radius += scale.bandwidth() / 2\n            }\n\n            return {\n                id: index,\n                radius,\n            }\n        })\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        { id: number; radius: number },\n        { radius: number; startAngle: number; endAngle: number; opacity: number }\n    >(radii, {\n        keys: item => item.id,\n        initial: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        from: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 0,\n        }),\n        enter: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        update: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        leave: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, item) => (\n                <ArcLine\n                    key={item.id}\n                    animated={style}\n                    {...(theme.grid.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n                    strokeOpacity={style.opacity}\n                    fill=\"none\"\n                />\n            ))}\n        </>\n    )\n}\n","import { AnyScale } from '@nivo/scales'\nimport { RadialGrid } from './RadialGrid'\nimport { CircularGrid } from './CircularGrid'\n\ninterface PolarGridProps {\n    center: [number, number]\n    enableRadialGrid: boolean\n    enableCircularGrid: boolean\n    angleScale: AnyScale\n    radiusScale: AnyScale\n    startAngle: number\n    endAngle: number\n}\n\nexport const PolarGrid = ({\n    center,\n    enableRadialGrid,\n    enableCircularGrid,\n    angleScale,\n    radiusScale,\n    startAngle,\n    endAngle,\n}: PolarGridProps) => {\n    const innerRadius = Math.min(...radiusScale.range())\n    const outerRadius = Math.max(...radiusScale.range())\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {enableRadialGrid && (\n                <RadialGrid\n                    scale={angleScale}\n                    innerRadius={innerRadius}\n                    outerRadius={outerRadius}\n                />\n            )}\n            {enableCircularGrid && (\n                <CircularGrid scale={radiusScale} startAngle={startAngle} endAngle={endAngle} />\n            )}\n        </g>\n    )\n}\n","import { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { RadialAxisTickProps } from './types'\n\nexport const RadialAxisTick = ({\n    label,\n    textAnchor,\n    animated: animatedProps,\n}: RadialAxisTickProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g\n            opacity={animatedProps.opacity}\n            transform={to(\n                [animatedProps.y, animatedProps.rotation],\n                (y, rotation) => `translate(${y}, 0) rotate(${rotation})`\n            )}\n        >\n            <animated.line x2={animatedProps.length} style={theme.axis.ticks.line} />\n            <animated.text\n                dx={animatedProps.textX}\n                textAnchor={textAnchor}\n                dominantBaseline=\"central\"\n                style={theme.axis.ticks.text}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { createElement, useMemo } from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useMotionConfig, normalizeAngle } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { RadialAxisConfig, RadialAxisTickAnimatedProps } from './types'\nimport { RadialAxisTick } from './RadialAxisTick'\n\ntype RadialAxisProps = {\n    type: 'start' | 'end'\n    center: [number, number]\n    angle: number\n    scale: AnyScale\n} & RadialAxisConfig\n\nexport const RadialAxis = ({\n    type,\n    center,\n    angle: rawAngle,\n    scale,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation: extraRotation = 0,\n    tickComponent = RadialAxisTick,\n}: RadialAxisProps) => {\n    const angle = normalizeAngle(rawAngle)\n\n    let textAnchor: 'start' | 'end'\n    let lineX: number\n    let textX: number\n    let tickRotation: number\n\n    if (type === 'start') {\n        tickRotation = 90 + extraRotation\n        if (angle <= 90) {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n        } else if (angle < 270) {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n            tickRotation -= 180\n        } else {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n        }\n    } else {\n        tickRotation = 90 + extraRotation\n        if (angle < 90) {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n        } else if (angle < 270) {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n            tickRotation -= 180\n        } else {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n        }\n    }\n\n    const ticks = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => {\n            let position = scale(value) as number\n            if ('bandwidth' in scale) {\n                position += scale.bandwidth() / 2\n            }\n\n            return {\n                key: index,\n                label: value,\n                position,\n            }\n        })\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const spring = useSpring<{ rotation: string }>({\n        rotation: rawAngle - 90,\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    const transition = useTransition<typeof ticks[0], RadialAxisTickAnimatedProps>(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        from: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 0,\n        }),\n        enter: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        update: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        leave: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 0,\n        }),\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    return (\n        <g transform={`translate(${center[0]}, ${center[1]})`}>\n            <animated.g transform={spring.rotation.to(value => `rotate(${value})`)}>\n                {transition((animatedProps, tick) =>\n                    createElement(tickComponent, {\n                        key: tick.key,\n                        label: tick.label,\n                        y: tick.position,\n                        textX,\n                        rotation: tickRotation,\n                        length: lineX,\n                        textAnchor,\n                        animated: animatedProps,\n                    })\n                )}\n            </animated.g>\n        </g>\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { RadialBarDatum, RadialBarTooltipProps } from './types'\n\nexport const RadialBarTooltip = <D extends RadialBarDatum>({ bar }: RadialBarTooltipProps<D>) => {\n    return (\n        <BasicTooltip\n            enableChip\n            id={\n                <span>\n                    {bar.category} - {bar.groupId}\n                </span>\n            }\n            value={bar.formattedValue}\n            color={bar.color}\n        />\n    )\n}\n","import { createElement, MouseEvent, useCallback } from 'react'\nimport { ArcsLayer, ArcGenerator } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedBar, RadialBarCommonProps, RadialBarDatum } from './types'\n\ninterface RadialBarArcsProps<D extends RadialBarDatum> {\n    center: [number, number]\n    bars: ComputedBar<D>[]\n    borderWidth: RadialBarCommonProps<D>['borderWidth']\n    borderColor: RadialBarCommonProps<D>['borderColor']\n    arcGenerator: ArcGenerator\n    isInteractive: RadialBarCommonProps<D>['isInteractive']\n    tooltip: RadialBarCommonProps<D>['tooltip']\n    onClick?: RadialBarCommonProps<D>['onClick']\n    onMouseEnter?: RadialBarCommonProps<D>['onMouseEnter']\n    onMouseMove?: RadialBarCommonProps<D>['onMouseMove']\n    onMouseLeave?: RadialBarCommonProps<D>['onMouseLeave']\n    transitionMode: RadialBarCommonProps<D>['transitionMode']\n}\n\nexport const RadialBarArcs = <D extends RadialBarDatum>({\n    center,\n    bars,\n    borderWidth,\n    borderColor,\n    arcGenerator,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode,\n}: RadialBarArcsProps<D>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            onClick?.(bar, event)\n        },\n        [onClick]\n    )\n\n    const handleMouseEnter = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { bar }), event)\n            onMouseEnter?.(bar, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { bar }), event)\n            onMouseMove?.(bar, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (bar: ComputedBar<D>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(bar, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    return (\n        <ArcsLayer<ComputedBar<D>>\n            center={center}\n            data={bars}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { ArcGenerator, ArcsLayer, ArcTransitionMode } from '@nivo/arcs'\nimport { RadialBarTrackDatum } from './types'\n\ninterface RadialBarTracksProps {\n    center: [number, number]\n    tracks: RadialBarTrackDatum[]\n    arcGenerator: ArcGenerator\n    transitionMode: ArcTransitionMode\n}\n\nexport const RadialBarTracks = ({\n    center,\n    tracks,\n    arcGenerator,\n    transitionMode,\n}: RadialBarTracksProps) => {\n    return (\n        <ArcsLayer<RadialBarTrackDatum>\n            center={center}\n            data={tracks}\n            arcGenerator={arcGenerator}\n            borderWidth={0}\n            borderColor=\"none\"\n            transitionMode={transitionMode}\n        />\n    )\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    Container,\n    useDimensions,\n    SvgWrapper,\n    clampArc,\n    // @ts-ignore\n    bindDefs,\n} from '@nivo/core'\n\nimport { ArcLabelsLayer } from '@nivo/arcs'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { PolarGrid, RadialAxis, CircularAxis } from '@nivo/polar-axes'\nimport { RadialBarLayerId, RadialBarSvgProps, ComputedBar, RadialBarDatum } from './types'\nimport { svgDefaultProps } from './props'\nimport { useRadialBar } from './hooks'\nimport { RadialBarArcs } from './RadialBarArcs'\nimport { RadialBarTracks } from './RadialBarTracks'\n\ntype InnerRadialBarProps<D extends RadialBarDatum = RadialBarDatum> = Omit<\n    RadialBarSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerRadialBar = <D extends RadialBarDatum>({\n    data,\n    maxValue = svgDefaultProps.maxValue,\n    valueFormat,\n    startAngle: originalStartAngle = svgDefaultProps.startAngle,\n    endAngle: originalEndAngle = svgDefaultProps.endAngle,\n    innerRadius: innerRadiusRatio = svgDefaultProps.innerRadius,\n    padding = svgDefaultProps.padding,\n    padAngle = svgDefaultProps.padAngle,\n    cornerRadius = svgDefaultProps.cornerRadius,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    enableTracks = svgDefaultProps.enableTracks,\n    tracksColor = svgDefaultProps.tracksColor,\n    enableRadialGrid = svgDefaultProps.enableRadialGrid,\n    enableCircularGrid = svgDefaultProps.enableCircularGrid,\n    radialAxisStart = svgDefaultProps.radialAxisStart,\n    radialAxisEnd = svgDefaultProps.radialAxisEnd,\n    circularAxisInner = svgDefaultProps.circularAxisInner,\n    circularAxisOuter = svgDefaultProps.circularAxisOuter,\n    colors = svgDefaultProps.colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    enableLabels = svgDefaultProps.enableLabels,\n    label = svgDefaultProps.label,\n    labelsSkipAngle = svgDefaultProps.labelsSkipAngle,\n    labelsRadiusOffset = svgDefaultProps.labelsRadiusOffset,\n    labelsTextColor = svgDefaultProps.labelsTextColor,\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode = svgDefaultProps.transitionMode,\n    legends = svgDefaultProps.legends,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerRadialBarProps<D>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const [startAngle, endAngle] = clampArc(originalStartAngle, originalEndAngle)\n\n    const {\n        center,\n        innerRadius,\n        outerRadius,\n        bars,\n        arcGenerator,\n        radiusScale,\n        valueScale,\n        tracks,\n        legendData,\n        customLayerProps,\n    } = useRadialBar<D>({\n        data,\n        maxValue,\n        valueFormat,\n        startAngle,\n        endAngle,\n        innerRadiusRatio,\n        padding,\n        padAngle,\n        cornerRadius,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        tracksColor,\n    })\n\n    const layerById: Record<RadialBarLayerId, ReactNode> = {\n        grid: null,\n        tracks: null,\n        bars: null,\n        labels: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Fragment key=\"grid\">\n                <PolarGrid\n                    center={center}\n                    enableRadialGrid={enableRadialGrid}\n                    enableCircularGrid={enableCircularGrid}\n                    angleScale={valueScale}\n                    radiusScale={radiusScale}\n                    startAngle={startAngle}\n                    endAngle={endAngle}\n                />\n                {radialAxisStart && (\n                    <RadialAxis\n                        type=\"start\"\n                        center={center}\n                        angle={Math.min(startAngle, endAngle)}\n                        scale={radiusScale}\n                        {...radialAxisStart}\n                    />\n                )}\n                {radialAxisEnd && (\n                    <RadialAxis\n                        type=\"end\"\n                        center={center}\n                        angle={Math.max(startAngle, endAngle)}\n                        scale={radiusScale}\n                        {...radialAxisEnd}\n                    />\n                )}\n                {circularAxisInner && (\n                    <CircularAxis\n                        type=\"inner\"\n                        center={center}\n                        radius={innerRadius}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        scale={valueScale}\n                        {...circularAxisInner}\n                    />\n                )}\n                {circularAxisOuter && (\n                    <CircularAxis\n                        type=\"outer\"\n                        center={center}\n                        radius={outerRadius}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        scale={valueScale}\n                        {...circularAxisOuter}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('tracks') && enableTracks) {\n        layerById.tracks = (\n            <RadialBarTracks\n                key=\"tracks\"\n                center={center}\n                tracks={tracks}\n                arcGenerator={arcGenerator}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <RadialBarArcs<D>\n                key=\"bars\"\n                center={center}\n                bars={bars}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                arcGenerator={arcGenerator}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (layers.includes('labels') && enableLabels) {\n        layerById.labels = (\n            <ArcLabelsLayer<ComputedBar<D>>\n                key=\"labels\"\n                center={center}\n                data={bars}\n                label={label}\n                radiusOffset={labelsRadiusOffset}\n                skipAngle={labelsSkipAngle}\n                textColor={labelsTextColor}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (layers.includes('legends') && legends.length > 0) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'fill',\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const RadialBar = <D extends RadialBarDatum = RadialBarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: RadialBarSvgProps<D>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerRadialBar<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { RadialBarDatum, RadialBarSvgProps } from './types'\nimport { RadialBar } from './RadialBar'\n\nexport const ResponsiveRadialBar = <D extends RadialBarDatum = RadialBarDatum>(\n    props: Omit<RadialBarSvgProps<D>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <RadialBar<D> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { useCallback, createElement } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfigCustomFunction } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { StreamCommonProps, StreamDatum, StreamLayerData } from './types'\n\ninterface StreamLayerProps<RawDatum extends StreamDatum> {\n    layer: StreamLayerData\n    fillOpacity: number\n    borderWidth: number\n    getBorderColor: InheritedColorConfigCustomFunction<StreamLayerData>\n    isInteractive: boolean\n    tooltip: StreamCommonProps<RawDatum>['tooltip']\n}\n\nexport const StreamLayer = <RawDatum extends StreamDatum>({\n    layer,\n    fillOpacity,\n    borderWidth,\n    getBorderColor,\n    isInteractive,\n    tooltip,\n}: StreamLayerProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseHover = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { layer }), event, 'left')\n        },\n        [showTooltipFromEvent, layer]\n    )\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(layer.path)\n    const animatedProps = useSpring({\n        color: layer.color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={layer.fill ? layer.fill : animatedProps.color}\n            fillOpacity={fillOpacity}\n            stroke={getBorderColor(layer)}\n            strokeWidth={borderWidth}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? hideTooltip : undefined}\n        />\n    )\n}\n","import { InheritedColorConfigCustomFunction } from '@nivo/colors'\nimport { StreamLayer } from './StreamLayer'\nimport { StreamCommonProps, StreamLayerData, StreamDatum } from './types'\n\ninterface StreamLayersProps<RawDatum extends StreamDatum> {\n    layers: StreamLayerData[]\n    fillOpacity: number\n    borderWidth: number\n    getBorderColor: InheritedColorConfigCustomFunction<StreamLayerData>\n    isInteractive: boolean\n    tooltip: StreamCommonProps<RawDatum>['tooltip']\n}\n\nexport const StreamLayers = <RawDatum extends StreamDatum>({\n    layers,\n    fillOpacity,\n    borderWidth,\n    getBorderColor,\n    isInteractive,\n    tooltip,\n}: StreamLayersProps<RawDatum>) => (\n    <g>\n        {layers.map((layer, i) => (\n            <StreamLayer<RawDatum>\n                key={i}\n                layer={layer}\n                getBorderColor={getBorderColor}\n                borderWidth={borderWidth}\n                fillOpacity={fillOpacity}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n            />\n        ))}\n    </g>\n)\n","import { createElement } from 'react'\nimport { StreamSvgProps, StreamLayerDatum, StreamDatum } from './types'\n\ninterface StreamDotsProps<RawDatum extends StreamDatum> {\n    id: string | number\n    color: string\n    data: StreamLayerDatum[]\n    dotComponent: Exclude<StreamSvgProps<RawDatum>['dotComponent'], undefined>\n    position: 'start' | 'center' | 'end'\n    getSize: (datum: StreamLayerDatum) => number\n    getColor: (datum: StreamLayerDatum) => string\n    getBorderWidth: (datum: StreamLayerDatum) => number\n    getBorderColor: (datum: StreamLayerDatum) => string\n}\n\nconst getDotY = <RawDatum extends StreamDatum>(\n    datum: StreamLayerDatum,\n    position: StreamDotsProps<RawDatum>['position']\n) => {\n    let y = datum.y2\n    if (position === 'center') {\n        y = datum.y1 + (datum.y2 - datum.y1) / 2\n    } else if (position === 'start') {\n        y = datum.y1\n    }\n\n    return y\n}\n\nexport const StreamDots = <RawDatum extends StreamDatum>({\n    data,\n    dotComponent,\n    position,\n    getSize,\n    getColor,\n    getBorderWidth,\n    getBorderColor,\n}: StreamDotsProps<RawDatum>) => (\n    <>\n        {data.map((datum, i) => {\n            return createElement(dotComponent, {\n                key: i,\n                datum,\n                x: datum.x,\n                y: getDotY<RawDatum>(datum, position),\n                size: getSize(datum),\n                color: getColor(datum),\n                borderWidth: getBorderWidth(datum),\n                borderColor: getBorderColor(datum),\n            })\n        })}\n    </>\n)\n","import { createElement, useCallback, useState } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { StreamCommonProps, StreamDatum, StreamSliceData } from './types'\n\ninterface StreamSlicesItemProps<RawDatum extends StreamDatum> {\n    slice: StreamSliceData\n    height: number\n    tooltip: StreamCommonProps<RawDatum>['stackTooltip']\n}\n\nexport const StreamSlicesItem = <RawDatum extends StreamDatum>({\n    slice,\n    height,\n    tooltip,\n}: StreamSlicesItemProps<RawDatum>) => {\n    const [isHover, setIsHover] = useState(false)\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            setIsHover(true)\n            showTooltipFromEvent(createElement(tooltip, { slice }), event, 'left')\n        },\n        [setIsHover, showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setIsHover(false)\n        hideTooltip()\n    }, [setIsHover, hideTooltip])\n\n    return (\n        <g transform={`translate(${slice.x}, 0)`}>\n            {isHover && (\n                <line\n                    x1={0}\n                    x2={0}\n                    y1={0}\n                    y2={height}\n                    stroke=\"#000\"\n                    strokeOpacity={0.35}\n                    strokeWidth={1}\n                />\n            )}\n            <rect\n                x={-20}\n                width={40}\n                height={height}\n                fill=\"#000\"\n                fillOpacity={0}\n                onMouseEnter={handleMouseHover}\n                onMouseMove={handleMouseHover}\n                onMouseLeave={handleMouseLeave}\n            />\n        </g>\n    )\n}\n","import { StreamSliceData, StreamDatum, StreamCommonProps } from './types'\nimport { StreamSlicesItem } from './StreamSlicesItem'\n\ninterface StreamSlicesProps<RawDatum extends StreamDatum> {\n    slices: StreamSliceData[]\n    height: number\n    tooltip: StreamCommonProps<RawDatum>['stackTooltip']\n}\n\nexport const StreamSlices = <RawDatum extends StreamDatum>({\n    slices,\n    height,\n    tooltip,\n}: StreamSlicesProps<RawDatum>) => (\n    <g>\n        {slices.map(slice => (\n            <StreamSlicesItem<RawDatum>\n                key={slice.index}\n                slice={slice}\n                height={height}\n                tooltip={tooltip}\n            />\n        ))}\n    </g>\n)\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\n\nexport interface StreamDotsItemProps {\n    x: number\n    y: number\n    size: number\n    color: string\n    borderWidth: number\n    borderColor: string\n}\n\nexport const StreamDotsItem = ({\n    x,\n    y,\n    size,\n    color,\n    borderWidth,\n    borderColor,\n}: StreamDotsItemProps) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size * 0.5,\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            r={animatedProps.radius}\n            fill={animatedProps.color}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n        />\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { TooltipProps } from './types'\n\nexport const LayerTooltip = ({ layer }: TooltipProps) => (\n    <BasicTooltip id={layer.label} enableChip={true} color={layer.color} />\n)\n","import { useMemo } from 'react'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\nimport { StackTooltipProps } from './types'\n\nexport const StackTooltip = ({ slice }: StackTooltipProps) => {\n    const rows = useMemo(\n        () =>\n            slice.stack.map(p => [\n                <Chip key={p.layerId} color={p.color} />,\n                p.layerLabel,\n                p.formattedValue,\n            ]),\n        [slice]\n    )\n\n    return <TableTooltip rows={rows} />\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    Container,\n    SvgWrapper,\n    useDimensions,\n    // @ts-ignore\n    bindDefs,\n} from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { StreamLayers } from './StreamLayers'\nimport { StreamDots } from './StreamDots'\nimport { StreamSlices } from './StreamSlices'\nimport { useStream } from './hooks'\nimport { svgDefaultProps } from './props'\nimport { StreamDatum, StreamLayerId, StreamSvgProps } from './types'\n\ntype InnerStreamProps<RawDatum extends StreamDatum> = Omit<\n    StreamSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerStream = <RawDatum extends StreamDatum>({\n    data,\n    keys,\n    label,\n    valueFormat,\n\n    offsetType,\n    order,\n    curve,\n\n    layers: chartLayers = svgDefaultProps.layers,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n\n    colors,\n    fillOpacity = svgDefaultProps.fillOpacity,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n\n    enableDots = svgDefaultProps.enableDots,\n    dotPosition = svgDefaultProps.dotPosition,\n    dotComponent = svgDefaultProps.dotComponent,\n    dotSize,\n    dotColor,\n    dotBorderWidth,\n    dotBorderColor,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    enableStackTooltip = svgDefaultProps.enableStackTooltip,\n    stackTooltip = svgDefaultProps.stackTooltip,\n\n    legends = svgDefaultProps.legends,\n\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerStreamProps<RawDatum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        xScale,\n        yScale,\n        layers,\n        slices,\n        getBorderColor,\n        getDotSize,\n        getDotColor,\n        getDotBorderWidth,\n        getDotBorderColor,\n        layerContext,\n    } = useStream<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        keys,\n        label,\n        valueFormat,\n        offsetType,\n        order,\n        curve,\n        colors,\n        borderColor,\n        dotSize,\n        dotColor,\n        dotBorderWidth,\n        dotBorderColor,\n    })\n\n    const boundDefs = bindDefs(defs, layers, fill)\n\n    const layerById: Record<StreamLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        layers: null,\n        dots: null,\n        slices: null,\n        legends: null,\n    }\n\n    if (chartLayers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        )\n    }\n\n    if (chartLayers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (chartLayers.includes('layers')) {\n        layerById.layers = (\n            <StreamLayers<RawDatum>\n                key=\"layers\"\n                layers={layers}\n                fillOpacity={fillOpacity}\n                borderWidth={borderWidth}\n                getBorderColor={getBorderColor}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    if (chartLayers.includes('dots') && enableDots) {\n        layerById.dots = (\n            <Fragment key=\"dots\">\n                {layers.map(layer => (\n                    <StreamDots\n                        key={layer.id}\n                        id={layer.id}\n                        color={layer.color}\n                        data={layer.data}\n                        dotComponent={dotComponent}\n                        position={dotPosition}\n                        getSize={getDotSize}\n                        getColor={getDotColor}\n                        getBorderWidth={getDotBorderWidth}\n                        getBorderColor={getDotBorderColor}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (chartLayers.includes('slices') && isInteractive && enableStackTooltip) {\n        layerById.slices = (\n            <StreamSlices<RawDatum>\n                key=\"slices\"\n                slices={slices}\n                height={innerHeight}\n                tooltip={stackTooltip}\n            />\n        )\n    }\n\n    if (chartLayers.includes('legends')) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => {\n                    const legendData = layers\n                        .map(layer => ({\n                            id: layer.id,\n                            label: layer.label,\n                            color: layer.color,\n                            fill: layer.fill,\n                        }))\n                        .reverse()\n\n                    return (\n                        <BoxLegendSvg\n                            key={i}\n                            {...legend}\n                            containerWidth={innerWidth}\n                            containerHeight={innerHeight}\n                            data={legendData}\n                        />\n                    )\n                })}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {chartLayers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Stream = <RawDatum extends StreamDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: StreamSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerStream<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { StreamDatum, StreamSvgProps } from './types'\nimport { Stream } from './Stream'\n\nexport const ResponsiveStream = <RawDatum extends StreamDatum>(\n    props: Omit<StreamSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Stream<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import roundNode from \"./treemap/round.js\";\nimport treemapDice from \"./treemap/dice.js\";\nexport default function () {\n  var dx = 1,\n      dy = 1,\n      padding = 0,\n      round = false;\n\n  function partition(root) {\n    var n = root.height + 1;\n    root.x0 = root.y0 = padding;\n    root.x1 = dx;\n    root.y1 = dy / n;\n    root.eachBefore(positionNode(dy, n));\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(dy, n) {\n    return function (node) {\n      if (node.children) {\n        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n      }\n\n      var x0 = node.x0,\n          y0 = node.y0,\n          x1 = node.x1 - padding,\n          y1 = node.y1 - padding;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n    };\n  }\n\n  partition.round = function (x) {\n    return arguments.length ? (round = !!x, partition) : round;\n  };\n\n  partition.size = function (x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n  };\n\n  partition.padding = function (x) {\n    return arguments.length ? (padding = +x, partition) : padding;\n  };\n\n  return partition;\n}","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const SunburstTooltip = <RawDatum,>({\n    id,\n    formattedValue,\n    color,\n}: ComputedDatum<RawDatum>) => (\n    <BasicTooltip id={id} value={formattedValue} enableChip={true} color={color} />\n)\n","import { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { ArcLabelsLayer } from '@nivo/arcs'\nimport { defaultProps } from './props'\nimport { useSunburst, useSunburstLayerContext } from './hooks'\nimport { SunburstSvgProps, SunburstLayerId, SunburstLayer, ComputedDatum } from './types'\nimport { Arcs } from './Arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\n\ntype InnerSunburstProps<RawDatum> = Partial<\n    Omit<\n        SunburstSvgProps<RawDatum>,\n        'data' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height' | 'isInteractive'>\n\nconst InnerSunburst = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    cornerRadius = defaultProps.cornerRadius,\n    layers = defaultProps.layers as SunburstLayer<RawDatum>[],\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor,\n    margin: partialMargin,\n    width,\n    height,\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsComponent,\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n    transitionMode = defaultProps.transitionMode,\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n    role = defaultProps.role,\n}: InnerSunburstProps<RawDatum>) => {\n    const { innerHeight, innerWidth, margin, outerHeight, outerWidth } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { centerX, centerY, radius } = useMemo(() => {\n        const radius = Math.min(innerWidth, innerHeight) / 2\n\n        return { radius, centerX: innerWidth / 2, centerY: innerHeight / 2 }\n    }, [innerHeight, innerWidth])\n\n    const { arcGenerator, nodes } = useSunburst({\n        data,\n        id,\n        value,\n        valueFormat,\n        radius,\n        cornerRadius,\n        colors,\n        colorBy,\n        inheritColorFromParent,\n        childColor,\n    })\n\n    const boundDefs = bindDefs(defs, nodes, fill, {\n        dataKey: '.',\n        colorKey: 'color',\n        targetKey: 'fill',\n    })\n\n    const layerById: Record<SunburstLayerId, ReactNode> = {\n        arcs: null,\n        arcLabels: null,\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={nodes}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                transitionMode={transitionMode}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseLeave={onMouseLeave}\n                onMouseMove={onMouseMove}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={nodes}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    const layerContext = useSunburstLayerContext<RawDatum>({\n        nodes,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            defs={boundDefs}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as SunburstLayerId] !== undefined) {\n                    return layerById[layer as SunburstLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Sunburst = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>> &\n    Pick<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSunburst<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Sunburst } from './Sunburst'\nimport { SunburstSvgProps } from './types'\n\ntype ResponsiveSunburstProps<RawDatum> = Partial<\n    Omit<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>\n> &\n    Pick<SunburstSvgProps<RawDatum>, 'data'>\n\nexport const ResponsiveSunburst = <RawDatum,>(props: ResponsiveSunburstProps<RawDatum>) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Sunburst<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n"],"names":["exclude","generateChoroplethData","countries","feature","includes","id","map","value","Math","round","random","useHomeTheme","theme","useTheme","useMemo","_colors","colors","coloredRange","slice","reversedColors","reverse","nivoTheme","axis","ticks","line","stroke","text","fill","fontSize","grid","strokeWidth","strokeDasharray","labels","dimensions","width","height","margin","top","right","bottom","left","lineWidth","pointSize","serieIds","HomeAreaBumpDemo","data","years","range","year","x","y","borderWidth","spacing","borderColor","blendMode","enableGridX","axisTop","axisBottom","startLabel","endLabel","isInteractive","animate","HomeBarDemo","isHorizontal","generateCountriesData","size","keys","indexBy","layout","groupMode","padding","enableGridY","enableLabel","axisLeft","HomeBumpDemo","ranks","series","rank","forEach","shuffle","i","push","axisRight","calendarFrom","Date","calendarTo","calendarData","generateDayCounts","HomeCalendarDemo","Container","from","to","dayBorderWidth","yearSpacing","emptyColor","dayBorderColor","monthBorderColor","styled","HomeChordDemo","generateChordData","matrix","padAngle","innerRadiusRatio","arcBorderWidth","arcBorderColor","ribbonBorderWidth","ribbonBorderColor","HomeChoroplethDemo","features","domain","unknownColor","projectionType","projectionScale","projectionTranslation","projectionRotation","HomeCirclePackingDemo","generateLibTree","colorBy","childColor","enableLabels","HomeLineDemo","generateDrinkStats","yScale","type","stacked","curve","HomePieDemo","generateProgrammingLanguageStats","d","label","innerRadius","enableArcLabels","enableArcLinkLabels","HomeRadarDemo","generateWinesTastes","dotSize","dotBorderWidth","dotBorderColor","enableDotLabel","HomeRadialBarDemo","categories","category","tracksColor","endAngle","radialAxisStart","circularAxisOuter","HomeSankeyDemo","generateSankeyData","nodeCount","maxIterations","nodeBorderColor","nodeOpacity","nodeThickness","nodeInnerPadding","nodeSpacing","nodeBorderWidth","linkOpacity","linkBlendMode","linkContract","labelTextColor","HomeStreamDemo","reduce","acc","offsetType","HomeSunburstDemo","HomeSwarmPlotDemo","generateSwarmPlotData","min","max","groups","groupBy","valueScale","key","values","sizes","HomeTreeMapDemo","identity","valueFormat","tile","leavesOnly","outerPadding","innerPadding","voronoi","xDomain","yDomain","HomeVoronoiDemo","enableLinks","linkLineColor","cellLineColor","cellLineWidth","enablePoints","pointColor","getRandomValue","HomeMarimekkoDemo","statement","participation","stronglyAgree","agree","disagree","stronglyDisagree","defs","background","color","rotation","match","offset","randColor","countryCodes","names","programmingLanguages","generateBulletData","title","subtitle","rangeCount","measureCount","markerCount","float","ranges","remaining","measures","length","markers","minValue","maxValue","maxSize","selectedKeys","generateNetworkData","rootSize","midSize","leafSize","minMidNodes","maxMidNodes","minLeaves","maxLeaves","rootNode","nodes","Array","_","k","links","extraNodes","source","target","distance","concat","generateParallelCoordinatesData","availableNodes","n","name","getNodeTargets","currentPath","targets","filter","Error","join","targetId","getNodesTargets","targetsById","link","Object","assign","node","nodeColor","randId","randomPrice","randomVolume","randomCategory","categoryCount","group","groupIndex","price","index","datum","volume","randomizeSwarmPlotData","previousData","getValueGenerator","config","generator","generateXYSeries","xLength","getX","getY","serieId","shouldShuffle","limit","langs","sets","language","uniqRand","used","randCountryCode","xSize","types","country","find","generateSeries","ids","xKeys","days","timeDays","dayFormat","timeFormat","day","generateOrderedDayCounts","withColors","libTreeItems","children","tree","leaf","loc","wines","wineTastes","randMin","randMax","taste","wine","defaultProps","layers","scheme","modifiers","motionConfig","offsetById","expand","stackOffsetExpand","diverging","stackOffsetDiverging","none","stackOffsetNone","silouhette","stackOffsetSilhouette","wiggle","stackOffsetWiggle","useStack","dimensionIds","offsetFunction","d3Stack","useMarimekko","rawDimensions","dimension","_get","stack","allValues","normalizedData","getId","getValue","normalized","datumId","datumValue","thicknessScale","totalValue","scaleData","all","totalPadding","createLinearScale","dimensionsScale","computedData","getColor","useOrdinalColorScale","formatValue","useValueFormatter","position","thickness","computedDatum","allPositions","totalSize","dimensionId","dimensionPoint","dimensionDatum","formattedValue","position0","position1","bars","getBorderColor","useInheritedColor","Bar","bar","animatedProps","tooltip","onClick","onMouseEnter","onMouseMove","onMouseLeave","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","createElement","event","handleClick","handleMouseEnter","handleMouseMove","handleMouseLeave","_jsx","animated","rect","Bars","useMotionConfig","springConfig","transition","useTransition","initial","opacity","enter","update","leave","immediate","style","BarTooltip","BasicTooltip","enableChip","InnerMarimekko","partialMargin","gridXValues","gridYValues","legends","role","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","layerById","axes","boundDefs","bindDefs","xScale","Grid","xValues","yValues","Axes","legendData","legend","BoxLegendSvg","containerWidth","containerHeight","layerContext","SvgWrapper","layer","Fragment","Marimekko","otherProps","ResponsiveMarimekko","props","ResponsiveWrapper","a","b","NaN","PieLegends","toggleSerie","sortByValue","cornerRadius","startAngle","fit","activeInnerRadiusOffset","activeOuterRadiusOffset","arcLabel","arcLabelsSkipAngle","arcLabelsRadiusOffset","arcLabelsTextColor","arcLinkLabel","arcLinkLabelsSkipAngle","arcLinkLabelsOffset","arcLinkLabelsDiagonalLength","arcLinkLabelsStraightLength","arcLinkLabelsThickness","arcLinkLabelsTextOffset","arcLinkLabelsTextColor","arcLinkLabelsColor","transitionMode","pixelRatio","window","devicePixelRatio","useNormalizedData","usePropertyAccessor","normalizedDatum","hidden","usePieArcs","outerRadius","activeId","hiddenIds","pie","innerPie","sortValues","descending","sort","constant","j","a1","v","sum","arcs","a0","apply","this","arguments","da","p","abs","pa","d3Pie","degreesToRadians","hiddenData","item","dataWithArc","arc","angle","angleDeg","radiansToDegrees","usePieFromBox","useState","setActiveId","setHiddenIds","computedProps","boundingBox","radius","centerX","centerY","computeArcBoundingBox","points","box","ratio","adjustedBox","debug","pieArcs","state","indexOf","arcGenerator","useArcGenerator","Arcs","center","ArcsLayer","InnerPie","arcLabelsComponent","arcLinkLabelComponent","arcLinkLabels","arcLabels","ArcLinkLabelsLayer","skipAngle","diagonalLength","straightLength","textOffset","textColor","linkColor","component","ArcLabelsLayer","radiusOffset","usePieLayerContext","Pie","renderWrapper","ResponsivePie","InnerPieCanvas","canvasEl","useRef","useArcLabels","useArcLinkLabels","useEffect","current","ctx","getContext","scale","fillStyle","fillRect","save","translate","context","beginPath","strokeStyle","drawCanvasArcLinkLabels","drawCanvasArcLabels","restore","renderLegendToCanvas","getArcFromMouse","getRelativeCursor","hoveredArc","findArcUnderCursor","handleMouseHover","ref","cursor","PieCanvas","ResponsivePieCanvas","curveRadialLinear","curveRadial","Radial","_curve","radial","prototype","areaStart","areaEnd","lineStart","lineEnd","point","r","sin","cos","l","c","RadarLayer","colorByKey","fillByKey","radiusScale","angleStep","curveFactory","fillOpacity","lineGenerator","lineRadial","animatedPath","useAnimatedPath","useSpring","path","mixBlendMode","RadarGridLabels","angles","indices","labelComponent","labelOffset","_angle","positionFromAngle","textAnchor","anchor","springs","useSprings","transform","RadarGridLevelCircular","memo","circle","RadarGridLevelLinear","dataLength","radarLineGenerator","curveLinearClosed","RadarGridLevels","shape","RadarGrid","levels","radii","PI","_jsxs","x1","y1","x2","y2","RadarSlice","isHover","setIsHover","tooltipData","showItemTooltip","e","hideItemTooltip","tipX","tipY","crosshair","RadarSlices","getIndex","d3Arc","rootStartAngle","RadarDots","symbol","labelYOffset","fillColor","getInheritedColorGenerator","strokeColor","getLabel","pointData","DotsItem","svgDefaultProps","gridLevels","gridShape","gridLabelOffset","gridLabel","g","dominantBaseline","enableDots","dotColor","dotLabel","dotLabelYOffset","sliceTooltip","rows","Chip","TableTooltip","InnerRadar","rotationDegrees","dotSymbol","ariaLabel","ariaLabelledBy","ariaDescribedBy","mapping","keyData","keyDatum","keyName","computedMaxValue","scaleLinear","useCurveInterpolation","customLayerProps","boundLegends","customData","boundData","ld","cd","slices","dots","Radar","ResponsiveRadar","CircularAxisTick","dx","textX","dy","textY","getLinePositions","start","end","getTextPosition","CircularAxis","originalStartAngle","originalEndAngle","tickSize","tickPadding","tickComponent","spring","getScaleTicks","textRadius","tick","ArcLine","RadialGrid","angleValue","CircularGrid","bandwidth","strokeOpacity","PolarGrid","enableRadialGrid","enableCircularGrid","angleScale","RadialAxisTick","RadialAxis","lineX","tickRotation","rawAngle","extraRotation","normalizeAngle","commonDefaultProps","enableTracks","radialAxisEnd","circularAxisInner","labelsSkipAngle","labelsRadiusOffset","labelsTextColor","groupId","RadialBarArcs","RadialBarTracks","tracks","InnerRadialBar","clampArc","maxValueDirective","result","serie","groupTotalValue","total","castLinearScale","castBandScale","scaleBand","innerBars","currentValue","arcInnerRadius","arcOuterRadius","stackedValue","startAngleRadians","endAngleRadians","trackRadius","barWithCategory","undefined","dataKey","targetKey","RadialBar","ResponsiveRadialBar","StreamLayer","StreamLayers","getDotY","StreamDots","dotComponent","getSize","getBorderWidth","StreamSlicesItem","StreamSlices","order","dotPosition","cx","cy","enableStackTooltip","stackTooltip","layerId","layerLabel","legendLabel","isFocusable","InnerStream","chartLayers","areaCurveFactory","areaGenerator","area","o","y0","stackOffsetFromProp","stackOrderFromProp","allMin","allMax","createPointScale","getDotSize","getDotColor","getDotBorderWidth","getDotBorderColor","enhancedLayers","layerIndex","computedPoints","layerWithComputedProperties","sliceStack","Stream","ResponsiveStream","partition","root","x0","eachBefore","depth","positionNode","inheritColorFromParent","InnerSunburst","getChildColor","clonedData","cloneDeep","hierarchy","d3Hierarchy","descendants","d3Partition","sortBy","descendant","parent","percentage","ancestors","ancestor","sqrt","normalizedNode","toFixed","useSunburst","colorKey","useSunburstLayerContext","Sunburst","ResponsiveSunburst","copyArray","shuffleSelf","module","exports","array","baseFor","object","iteratee","nativeFloor","floor","nativeRandom","lower","upper","collection","arrayMap","baseRandom","lastIndex","rand","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","temp","arrayShuffle","baseShuffle","isArray","baseValues"],"sourceRoot":""}