{"version":3,"file":"8a08e82b418a1d26bd365445dd4625425eed4154-bbcd7fbcdedc6b7a57e7.js","mappings":"gHAAA,IAAIA,EAAKC,KAAKC,GACVC,EAAM,EAAIH,EACVI,EAAU,KACVC,EAAaF,EAAMC,EAEvB,SAASE,IACPC,KAAKC,IAAMD,KAAKE,IAChBF,KAAKG,IAAMH,KAAKI,IAAM,KAEtBJ,KAAKK,EAAI,GAGX,SAASC,IACP,OAAO,IAAIP,EAGbA,EAAKQ,UAAYD,EAAKC,UAAY,CAChCC,YAAaT,EACbU,OAAQ,SAAgBC,EAAGC,GACzBX,KAAKK,GAAK,KAAOL,KAAKC,IAAMD,KAAKG,KAAOO,GAAK,KAAOV,KAAKE,IAAMF,KAAKI,KAAOO,IAE7EC,UAAW,WACQ,OAAbZ,KAAKG,MACPH,KAAKG,IAAMH,KAAKC,IAAKD,KAAKI,IAAMJ,KAAKE,IACrCF,KAAKK,GAAK,MAGdQ,OAAQ,SAAgBH,EAAGC,GACzBX,KAAKK,GAAK,KAAOL,KAAKG,KAAOO,GAAK,KAAOV,KAAKI,KAAOO,IAEvDG,iBAAkB,SAA0BC,EAAIC,EAAIN,EAAGC,GACrDX,KAAKK,GAAK,MAAOU,EAAK,MAAOC,EAAK,KAAOhB,KAAKG,KAAOO,GAAK,KAAOV,KAAKI,KAAOO,IAE/EM,cAAe,SAAuBF,EAAIC,EAAIE,EAAIC,EAAIT,EAAGC,GACvDX,KAAKK,GAAK,MAAOU,EAAK,MAAOC,EAAK,MAAOE,EAAK,MAAOC,EAAK,KAAOnB,KAAKG,KAAOO,GAAK,KAAOV,KAAKI,KAAOO,IAEvGS,MAAO,SAAeL,EAAIC,EAAIE,EAAIC,EAAIE,GACpCN,GAAMA,EAAIC,GAAMA,EAAIE,GAAMA,EAAIC,GAAMA,EAAIE,GAAKA,EAC7C,IAAIC,EAAKtB,KAAKG,IACVoB,EAAKvB,KAAKI,IACVoB,EAAMN,EAAKH,EACXU,EAAMN,EAAKH,EACXU,EAAMJ,EAAKP,EACXY,EAAMJ,EAAKP,EACXY,EAAQF,EAAMA,EAAMC,EAAMA,EAE9B,GAAIN,EAAI,EAAG,MAAM,IAAIQ,MAAM,oBAAsBR,GAEjD,GAAiB,OAAbrB,KAAKG,IACPH,KAAKK,GAAK,KAAOL,KAAKG,IAAMY,GAAM,KAAOf,KAAKI,IAAMY,QAEjD,GAAMY,EAAQ/B,EAGd,GAAMH,KAAKoC,IAAIH,EAAMH,EAAMC,EAAMC,GAAO7B,GAAawB,EAGrD,CACH,IAAIU,EAAMb,EAAKI,EACXU,EAAMb,EAAKI,EACXU,EAAQT,EAAMA,EAAMC,EAAMA,EAC1BS,EAAQH,EAAMA,EAAMC,EAAMA,EAC1BG,EAAMzC,KAAK0C,KAAKH,GAChBI,EAAM3C,KAAK0C,KAAKR,GAChBU,EAAIjB,EAAI3B,KAAK6C,KAAK9C,EAAKC,KAAK8C,MAAMP,EAAQL,EAAQM,IAAU,EAAIC,EAAME,KAAS,GAC/EI,EAAMH,EAAID,EACVK,EAAMJ,EAAIH,EAEVzC,KAAKoC,IAAIW,EAAM,GAAK5C,IACtBG,KAAKK,GAAK,KAAOU,EAAK0B,EAAMf,GAAO,KAAOV,EAAKyB,EAAMd,IAGvD3B,KAAKK,GAAK,IAAMgB,EAAI,IAAMA,EAAI,WAAYM,EAAMI,EAAML,EAAMM,GAAO,KAAOhC,KAAKG,IAAMY,EAAK2B,EAAMlB,GAAO,KAAOxB,KAAKI,IAAMY,EAAK0B,EAAMjB,QAjBpIzB,KAAKK,GAAK,KAAOL,KAAKG,IAAMY,GAAM,KAAOf,KAAKI,IAAMY,UAoBxD2B,IAAK,SAAajC,EAAGC,EAAGU,EAAGuB,EAAIC,EAAIC,GACjCpC,GAAKA,EAAGC,GAAKA,EAAWmC,IAAQA,EAChC,IAAIC,GADY1B,GAAKA,GACR3B,KAAKsD,IAAIJ,GAClBK,EAAK5B,EAAI3B,KAAKwD,IAAIN,GAClBtB,EAAKZ,EAAIqC,EACTxB,EAAKZ,EAAIsC,EACTE,EAAK,EAAIL,EACTM,EAAKN,EAAMF,EAAKC,EAAKA,EAAKD,EAE9B,GAAIvB,EAAI,EAAG,MAAM,IAAIQ,MAAM,oBAAsBR,GAEhC,OAAbrB,KAAKG,IACPH,KAAKK,GAAK,IAAMiB,EAAK,IAAMC,GAEpB7B,KAAKoC,IAAI9B,KAAKG,IAAMmB,GAAMzB,GAAWH,KAAKoC,IAAI9B,KAAKI,IAAMmB,GAAM1B,KACtEG,KAAKK,GAAK,IAAMiB,EAAK,IAAMC,GAIxBF,IAED+B,EAAK,IAAGA,EAAKA,EAAKxD,EAAMA,GAExBwD,EAAKtD,EACPE,KAAKK,GAAK,IAAMgB,EAAI,IAAMA,EAAI,QAAU8B,EAAK,KAAOzC,EAAIqC,GAAM,KAAOpC,EAAIsC,GAAM,IAAM5B,EAAI,IAAMA,EAAI,QAAU8B,EAAK,KAAOnD,KAAKG,IAAMmB,GAAM,KAAOtB,KAAKI,IAAMmB,GAErJ6B,EAAKvD,IACZG,KAAKK,GAAK,IAAMgB,EAAI,IAAMA,EAAI,SAAU+B,GAAM3D,GAAM,IAAM0D,EAAK,KAAOnD,KAAKG,IAAMO,EAAIW,EAAI3B,KAAKsD,IAAIH,IAAO,KAAO7C,KAAKI,IAAMO,EAAIU,EAAI3B,KAAKwD,IAAIL,OAGhJQ,KAAM,SAAc3C,EAAGC,EAAG2C,EAAGC,GAC3BvD,KAAKK,GAAK,KAAOL,KAAKC,IAAMD,KAAKG,KAAOO,GAAK,KAAOV,KAAKE,IAAMF,KAAKI,KAAOO,GAAK,MAAO2C,EAAI,MAAOC,EAAI,KAAOD,EAAI,KAEnHE,SAAU,WACR,OAAOxD,KAAKK,IAGhB,O,kCChHe,SAAS,EAACK,GACvB,OAAO,WACL,OAAOA,G,mJCEI,SAAS,IACtB,IAAIA,EAAI,IACJC,EAAI,IACJ8C,GAAU,QAAS,GACnBC,EAAU,KACVC,EAAQ,IACRC,EAAS,KAEb,SAASC,EAAKC,GACZ,IAAIC,EAEAC,EAEAC,EAHAC,EAAIJ,EAAKK,OAETC,GAAW,EAIf,IAFe,MAAXV,IAAiBE,EAASD,EAAMM,GAAS,WAExCF,EAAI,EAAGA,GAAKG,IAAKH,IACdA,EAAIG,GAAKT,EAAQO,EAAIF,EAAKC,GAAIA,EAAGD,MAAWM,KAC5CA,GAAYA,GAAUR,EAAOS,YAAiBT,EAAOU,WAGvDF,GAAUR,EAAOW,OAAO7D,EAAEsD,EAAGD,EAAGD,IAAQnD,EAAEqD,EAAGD,EAAGD,IAGtD,GAAIG,EAAQ,OAAOL,EAAS,KAAMK,EAAS,IAAM,KAuBnD,OApBAJ,EAAKnD,EAAI,SAAUL,GACjB,OAAOmE,UAAUL,QAAUzD,EAAiB,mBAANL,EAAmBA,GAAI,QAAUA,GAAIwD,GAAQnD,GAGrFmD,EAAKlD,EAAI,SAAUN,GACjB,OAAOmE,UAAUL,QAAUxD,EAAiB,mBAANN,EAAmBA,GAAI,QAAUA,GAAIwD,GAAQlD,GAGrFkD,EAAKJ,QAAU,SAAUpD,GACvB,OAAOmE,UAAUL,QAAUV,EAAuB,mBAANpD,EAAmBA,GAAI,SAAWA,GAAIwD,GAAQJ,GAG5FI,EAAKF,MAAQ,SAAUtD,GACrB,OAAOmE,UAAUL,QAAUR,EAAQtD,EAAc,MAAXqD,IAAoBE,EAASD,EAAMD,IAAWG,GAAQF,GAG9FE,EAAKH,QAAU,SAAUrD,GACvB,OAAOmE,UAAUL,QAAe,MAAL9D,EAAYqD,EAAUE,EAAS,KAAOA,EAASD,EAAMD,EAAUrD,GAAIwD,GAAQH,GAGjGG,I,mCCnDF,SAASnD,EAAE+D,GAChB,OAAOA,EAAE,GAEJ,SAAS9D,EAAE8D,GAChB,OAAOA,EAAE,G,qJCFPC,GAAM,QAAS,SAAUC,GAC3BA,EAAKC,SAAS,EAAG,EAAG,EAAG,MACtB,SAAUD,EAAME,GACjBF,EAAKG,QAAQH,EAAKI,UAAYF,MAC7B,SAAUG,EAAOC,GAClB,OAAQA,EAAMD,GAASC,EAAIC,oBAAsBF,EAAME,qBAAuB,MAAkB,QAC/F,SAAUP,GACX,OAAOA,EAAKI,UAAY,KAE1B,MACO,IAAII,EAAOT,EAAIU,O,iDCVtB,KAAeC,EAAAA,EAAAA,IAAe,K,iHCMxBC,EAAuB,CAAC,MAAO,UAE/BC,EAAsB,CACxB,CACIC,IAAK,OACLC,MAAO,OACPC,QAASJ,EACTK,KAAM,cACNC,KAAM,wBACNC,UAAU,GAEd,CACIL,IAAK,YACLI,KAAM,WACNF,QAASJ,EACTK,KAAM,2BACNG,YAAY,gXASZL,MAAO,YACPI,UAAU,EACVE,QAAS,CACLH,KAAM,QACNI,cAAc,EACdC,cAAc,EACdC,aAAc,SAACC,EAAgBC,GAAjB,OAAoCA,EAAOZ,IAA3C,KAAmDY,EAAOR,KAA1D,KACdL,MAAO,CACH,CACIC,IAAK,MACLG,KAAM,6DACND,QAASJ,EACTM,KAAM,SACNC,UAAU,EACVE,QAAS,CACLH,KAAM,OACNS,UAAU,IAGlB,CACIb,IAAK,OACLG,KAAK,oDACLD,QAASJ,EACTM,KAAK,qBACLC,UAAU,EACVE,QAAS,CACLH,KAAM,OACNS,UAAU,IAGlB,CACIb,IAAK,MACLG,KAAM,6BACND,QAASJ,EACTM,KAAK,kBACLC,UAAU,EACVS,KAAM,kBAAuB,WAAvB,EAAGV,MACTG,QAAS,CACLH,KAAM,kBACNW,cAAe,OACfC,aAAc,EACdC,KAAM,IACNC,IAAK,MAGb,CACIlB,IAAK,MACLG,KAAM,6BACND,QAASJ,EACTM,KAAK,kBACLC,UAAU,EACVS,KAAM,kBAAuB,WAAvB,EAAGV,MACTG,QAAS,CACLH,KAAM,kBACNW,cAAe,OACfC,aAAc,IACdC,KAAM,IACNC,IAAK,SAkBzB,CACIlB,IAAK,SACLG,KAAK,gBACLD,QAASJ,EACTM,KAAM,SACNC,UAAU,EACVW,aAAcG,EAAAA,GAAAA,OACdlB,MAAO,OACPM,QAAS,CACLH,KAAM,QACNgB,QAAS,CACL,CAAEC,MAAO,aAAcC,MAAO,cAC9B,CAAED,MAAO,WAAYC,MAAO,eAIxC,CACItB,IAAK,QACLG,KAAM,uBACND,QAASJ,EACTQ,YAAY,mFAGZF,KAAM,SACNC,UAAU,EACVW,aAAcG,EAAAA,GAAAA,MACdlB,MAAO,OACPM,QAAS,CACLH,KAAM,UACNgB,QAASG,EAAAA,GAAAA,KAAsB,SAACvB,GAAD,MAAkB,CAC7CqB,MAAOrB,EACPsB,MAAOtB,QAInB,CACIA,IAAK,WACLG,KAAK,aACLD,QAASJ,EACTM,KAAK,SACLC,UAAU,EACVW,aAAcG,EAAAA,GAAAA,SACdlB,MAAO,OACPM,QAAS,CACLH,KAAM,QACNgB,QAAS,CACL,CAAEC,MAAO,aAAcC,MAAO,cAC9B,CAAED,MAAO,aAAcC,MAAO,iBAI1C,CACItB,IAAK,oBACLG,KAAK,uBACLD,QAASJ,EACTM,KAAK,SACLC,UAAU,EACVW,aAAcG,EAAAA,GAAAA,kBACdlB,MAAO,OACPM,QAAS,CACLH,KAAM,QACNgB,QAAS,CACL,CAAEC,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,QAASC,MAAO,aAjKb,QAqKrBE,EAAAA,EAAAA,IAAgB1B,GArKK,EAsKxB2B,EAAAA,EAAAA,IAAc,CAAC,MAAO,YACtBC,EAAAA,EAAAA,IAAc,CACVxB,QAASJ,EACTkB,aAAcG,EAAAA,GAAAA,SAElB,CACInB,IAAK,cACLG,KAAM,sBACND,QAASJ,EACTM,KAAM,SACNC,UAAU,EACVW,aAAcG,EAAAA,GAAAA,YACdZ,QAAS,CAAEH,KAAM,aACjBH,MAAO,SAEX,CACID,IAAK,cACLG,KAAM,iBACND,QAASJ,EACTM,KAAM,SACNC,UAAU,EACVW,aAAcG,EAAAA,GAAAA,YACdZ,QAAS,CAAEH,KAAM,WACjBH,MAAO,WAER0B,EAAAA,EAAAA,IAAiB,CAAC,OAAQR,EAAAA,GAAU,iBAG9BS,GAASC,EAAAA,EAAAA,IAAgB9B,I,iCC5MtC,KACI,CACIC,IAAK,OACLI,KAAM,SACNa,IAAK,OACLC,IAAK,OACLY,cAAe,SACfC,OAAQ,cACRC,eAAgB,QAChBC,aAAc,IAElB,CACIjC,IAAK,OACLI,KAAM,SACNa,IAAK,EACLC,IAAK,OACLY,cAAe,SACfC,OAAQ,OACRC,eAAgB,QAChBC,aAAc,IAElB,CACIjC,IAAK,QACLI,KAAM,QACN8B,QAAS,EACTtB,OAAQ,CAAC,MAAO,SAAU,SAC1BmB,OAAQ,QACRC,eAAgB,QAChBC,cAAe,IAEnB,CACIjC,IAAK,SACLI,KAAM,QACN8B,QAAS,EACTtB,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,KAC7BmB,OAAQ,SACRC,eAAgB,QAChBC,cAAe,IAEnB,CACIjC,IAAK,SACLI,KAAM,SACNa,IAAK,EACLC,IAAK,OACLa,OAAQ,SACRC,eAAgB,QAChBC,cAAe,M,gXC1ChB,IAAMpC,EACT,SAACsC,EAAD,qBAA0D,GAA1D,GAAiBC,QAAAA,OAAjB,MAA2B,GAA3B,SACA,SAACC,EAAeC,QAAsB,IAAtBA,IAAAA,EAAe,IAC3B,IAAMC,EAAiB,GAQvB,OANAC,OAAOC,KAAKJ,GAAUK,SAAQ,SAAA1C,GACtBmC,EAAQnC,KACRuC,EAAUvC,GAAOmC,EAAQnC,GAAKqC,EAASrC,GAAMqC,EAAUC,OAIxD,EAAP,GACOK,GAAAA,CAAKN,EAAUD,GACfG,KAQFK,EAAU,SAACxC,GAAD,OAA+C,SAACkB,EAAYe,GAAb,OAClEA,EAAS,OAAOQ,GAAAA,CAAWzC,IAAS0C,OAASH,GAAAA,CAAKrB,EAAO,CAAC,WAAa,OAE9DyB,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,SAAWC,QACtBD,OAASE,I,sgBCtBvB,IAEaC,EAAwB,YAkB9B,IAUH,EA3BAC,EAiBE,EAjBFA,KACAC,EAgBE,EAhBFA,MACAvB,EAeE,EAfFA,cACAwB,EAcE,EAdFA,WACAC,EAaE,EAbFA,SACAC,EAYE,EAZFA,YACAC,EAWE,EAXFA,aAWE,IAVFC,OAAAA,OAUE,MAVO,MAUP,EACI9C,GAAS+C,EAAAA,EAAAA,IAAa,EAA5B,GAEMC,EAAYC,EAAAA,GAAlB,GAEMC,EAAW,iBAAuBC,EAAAA,EAAAA,IAAvB,GAAjB,EACM1F,EAAO,CAAE2F,MAAF,EAAYC,MAAO,GAC1BC,EAAO,CAAEC,MAAF,EAAYC,MAAO,GAE1BC,EAAQ,iBAAOC,UAAP,QAA+BA,SAAAA,IAEzCC,EAA6BX,EAAAA,MAAjC,OACIY,EAAmCZ,EAAAA,SAAvC,OAkDA,MAhDA,MAAIR,GACAqB,EAAY,SAAAjG,GAAC,YAAK,CAAEtD,EAAC,SAAE4I,EAAF,MAAH,EAAuB3I,EAAG,IAE5CkD,EAAAA,MAAakF,GAAYzB,UAAAA,EAAAA,GAAzBzD,GACA6F,EAAAA,OAAcX,EAAD,IAA4BzB,UAAAA,EAAAA,GAAzCoC,GAGIM,EADJ,UAAI1C,EACe8B,EAAAA,SAAfY,IAEeZ,EAAAA,SAAfY,OAGJ,IAAIf,EACAc,EAAYX,EAAAA,MAAZW,OAECzC,UAAAA,GAA6B2B,EAA9B,GACC3B,WAAAA,GAA8B2B,EAF5B,GAIHc,EAAYX,EAAAA,MAAgBS,EAAK,OAAjCE,SACAC,EAAeZ,EAAAA,SAAfY,SAEC1C,UAAAA,GAA6B2B,EAA9B,GACC3B,WAAAA,GAA8B2B,EAF5B,KAIHc,EAAYX,EAAAA,MAAgBS,EAAK,QAAjCE,QACAC,EAAeZ,EAAAA,SAAfY,UAGJC,EAAY,SAAAjG,GAAC,YAAK,CAAEtD,EAAF,EAAQC,EAAC,SAAE2I,EAAF,MAAiB,IAE5CzF,EAAAA,MAAakF,GAAYzB,UAAAA,EAAAA,GAAzBzD,GACA6F,EAAAA,OAAcX,EAAD,IAA4BzB,UAAAA,EAAAA,GAAzCoC,GAGIK,EADJ,UAAIzC,EACY8B,EAAAA,MAAZW,KAEYX,EAAAA,MAAZW,OAYD,CACHG,MATU9D,EAAA,KAAW,SAAAU,GAAK,UAC1BtB,IAAK,iBAAOsB,GAAP,iBAAoCA,EAApC,KADqB,EAE1BA,MAAAA,GACGmD,EAHuB,WAU1BF,UAFG,EAGHC,aAAAA,IAIKG,EAAe,cAIxB,QAAI,IAAO,GAAX,mBAA4C,EAAuB,OAAO,EAE1E,YAAItB,EAAAA,KAAuB,CACvB,IAAMuB,GAAYC,EAAAA,EAAAA,IAAlB,GAEA,OAAQ,mBAAYD,EAAUpG,aAAAA,KAAAA,EAAwB,IAAIsG,KAAlD,KAGZ,OAAOC,EAAAA,EAAAA,IAAP,IAGSC,EAAmB,YAYzB,IApHS,EAyGZC,EAWE,EAXFA,MACAC,EAUE,EAVFA,OACA7B,EASE,EATFA,MACAD,EAQE,EARFA,KACQ+B,EAON,EAPFvE,OASMA,GAtHM,EAqHOwE,EArH8BC,MAAAA,QAArC,GAqHOD,OAAnB,KAC6BzB,EAAAA,EAAAA,IAAa,EAA1C,GACMG,EAAW,iBAAuBC,EAAAA,EAAAA,IAAvB,GAAjB,EAEMuB,EACF,MAAAlC,EACMxC,EAAA,KAAW,SAAAU,GAAK,cAAK,CACjBtB,IAAI,GADa,EAEjBzE,GAAE,SAAEuI,EAAF,MAFe,EAGjBpI,GAAE,SAAEoI,EAAF,MAHe,EAIjBtI,GAJiB,EAKjBG,GAAIuJ,MAERtE,EAAA,KAAW,SAAAU,GAAK,cAAK,CACjBtB,IAAI,GADa,EAEjBzE,GAFiB,EAGjBG,GAHiB,EAIjBF,GAAE,SAAEsI,EAAF,MAJe,EAKjBnI,GAAE,SAAEmI,EAAF,MAAqB,MAGrC,OAAOwB,GC1ILC,EAAW,YASY,IAAD,EARjBC,EAQiB,EARxBlE,MACA0B,EAOwB,EAPxBA,OACAgB,EAMwB,EANxBA,MACAC,EAKwB,EALxBA,MACAwB,EAIwB,EAJxBA,QACAjB,EAGwB,EAHxBA,aACAkB,EAEwB,EAFxBA,WACAC,EACwB,EADxBA,cAEMC,GAAQC,EAAAA,EAAAA,MAERvE,EAAK,eAAG0B,OAAH,EAAGA,EAAH,MAAX,EAEMjD,GAAQ+F,EAAAA,EAAAA,UAAQ,WAClB,IAAMC,EAAQ,CAAEC,QAASL,EAAcK,SAEvC,SAIO,CACHD,MAAM,EAAD,MAAcE,OAAQ,YAC3BR,QAAS,mBAAsDA,EAAQS,EAA9D,KALF,CAAEH,MAAAA,KAOd,CAACJ,EAAD,UAXH,IAaA,OACI,UAAC,MAAD,GAAYQ,UAAWR,EAAcQ,WAArC,cACI,iBAAM5K,GAAN,EAAaG,GAAb,EAAwBF,GAAxB,EAA+BG,GAA/B,EAA0CoK,MAAOH,EAAAA,KAAAA,MAAiBvH,QAClE,SAAC,SAAD,CACI+H,iBADJ,EAEIV,WAFJ,EAGIS,UAAWR,EAHf,cAIII,MAAOH,EAAAA,KAAAA,MAJX,cAMKtE,SAMX+E,GAAmBC,EAAAA,EAAAA,MAAKf,GCxCxBgB,EAAO,YAyBN,IAxBHnD,EAwBE,EAxBFA,KACAC,EAuBE,EAvBFA,MAuBE,IAtBFnI,EAAAA,OAsBE,MAtBE,EAsBF,MArBFC,EAAAA,OAqBE,MArBE,EAqBF,EApBFwD,EAoBE,EApBFA,OACAmD,EAmBE,EAnBFA,cACAwB,EAkBE,EAlBFA,WAkBE,IAjBFC,SAAAA,OAiBE,MAjBS,EAiBT,MAhBFC,YAAAA,OAgBE,MAhBY,EAgBZ,MAfFC,aAAAA,OAeE,MAfa,EAeb,EAdFT,EAcE,EAdFA,OAcE,IAbFwD,WAAAA,OAaE,MAbWjB,EAaX,EAZFxD,EAYE,EAZFA,OAYE,IAXFC,eAAAA,OAWE,MAXe,MAWf,MAVFC,aAAAA,OAUE,MAVa,EAUb,EATFwD,EASE,EATFA,QACAgB,EAQE,EARFA,WASMb,GAAQC,EAAAA,EAAAA,MAERa,GAAcZ,EAAAA,EAAAA,UAAQ,kBAAMnB,EAAa3B,EAAnB,KAAmC,CAACA,EAAhE,IAEA,EAA2CG,EAAsB,CAC7DC,KAD6D,EAE7DC,MAF6D,EAG7DvB,cAH6D,EAI7DwB,WAJ6D,EAK7DC,SAL6D,EAM7DC,YAN6D,EAO7DC,aAAAA,IAPIiB,EAAR,QAAeH,EAAf,YAA0BC,EAA1B,eAUImC,EAAJ,KACA,YAAI5E,EAAsB,CACtB,IAGA,EAHI6E,EAAJ,EACIC,EAAJ,EACIC,EAAJ,EAGA,MAAI1D,GACA0D,GAAAA,GACAF,EAAAA,EACA,UAAI5E,GACA0D,EAAAA,QACAmB,EAAAA,GACG,WAAI7E,GACP0D,EAAAA,SACAmB,EAAUlI,EAAVkI,GACG,QAAI7E,IACP0D,EAAAA,SAGJmB,EAAAA,EACA,UAAI7E,EACA0D,EAAAA,QACG,WAAI1D,GACP0D,EAAAA,SACAkB,EAAUjI,EAAViI,GACG,QAAI5E,IACP0D,EAAAA,MACAkB,EAAAA,IAIRD,GACI,iBACIR,UAAS,oCADb,IAEIT,WAFJ,EAGIK,MAAK,GACDK,iBAAkB,WACfR,EAAAA,KAAAA,OALX,eAQK7D,IAKb,OAA0CgF,EAAAA,EAAAA,MAAlCC,EAAR,UAAyBC,EAAzB,SAEMtB,GAAgBuB,EAAAA,EAAAA,WAAU,CAC5Bf,UAAU,aAAD,QADmB,IAE5BgB,OAAQ/D,MAAAA,EAAAA,EAFoB,EAG5BgE,OAAQhE,MAAAA,EAAAA,EAHoB,EAI5BiE,OAJ4B,EAK5BC,WAAYN,IAGVO,GAAaC,EAAAA,EAAAA,eAAa,EAGvB,CACL/E,KAAM,SAAAgF,GAAI,OAAIA,EAAJ,KACVC,QAAS,SAAAD,GAAI,MAAK,CACdzB,QADc,EAEdG,UAAU,aAAcsB,EAAf,MAAyBA,EAAzB,EAFK,IAGdE,cAAc,aAAcF,EAAf,UAA6BA,EAA7B,0BAEjBG,KAAM,SAAAH,GAAI,MAAK,CACXzB,QADW,EAEXG,UAAU,aAAcsB,EAAf,MAAyBA,EAAzB,EAFE,IAGXE,cAAc,aAAcF,EAAf,UAA6BA,EAA7B,0BAEjBI,MAAO,SAAAJ,GAAI,MAAK,CACZzB,QADY,EAEZG,UAAU,aAAcsB,EAAf,MAAyBA,EAAzB,EAFG,IAGZE,cAAc,aAAcF,EAAf,UAA6BA,EAA7B,0BAEjBK,OAAQ,SAAAL,GAAI,MAAK,CACbzB,QADa,EAEbG,UAAU,aAAcsB,EAAf,MAAyBA,EAAzB,EAFI,IAGbE,cAAc,aAAcF,EAAf,UAA6BA,EAA7B,0BAEjBM,MAAO,CACH/B,QAAS,GAEbqB,OAzBK,EA0BLC,WAAYN,IAGhB,OACI,UAAC,MAAD,CAAYb,UAAWR,EAAvB,UAAgD,cAAhD,YACK4B,GAAW,kBACR,OAAO,qBACHS,UADG,EAEHhF,OAFG,EAGHiF,OAHG,EAIHzD,aAJG,EAKHkB,WALG,EAMHC,cAAeuC,GANZ,EAQCzC,EAAU,CAAEA,QAAAA,GARpB,SAWJ,SAAC,SAAD,CACIM,MAAOH,EAAAA,KAAAA,OADX,KAEIrK,GAFJ,EAGIG,GAAIiK,EAHR,OAIInK,GAJJ,EAKIG,GAAIgK,EAAcyB,SAlB1B,MAyBFe,GAAe7B,EAAAA,EAAAA,MAAKC,GCjKb6B,EAAgB,CACzBtG,cAAeuG,IAAAA,MAAgB,CAAC,SADP,UAEzB/E,WAAY+E,IAAAA,UAAoB,CAC5BA,IAAAA,OACAA,IAAAA,QACIA,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,OAAkBA,IAAAA,WAHjC,SAK5BA,IAAAA,SAEJ9E,SAAU8E,IAAAA,OACV7E,YAAa6E,IAAAA,OACb5E,aAAc4E,IAAAA,OACdrF,OAAQqF,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,SAC7C7B,WAAY6B,IAAAA,KACZtG,OAAQsG,IAAAA,KACRrG,eAAgBqG,IAAAA,MAAgB,CAAC,QAAQ,SAfhB,QAgBzBpG,aAAcoG,IAAAA,OACd5B,WAAY4B,IAAAA,MAGHC,EAAeD,IAAAA,MAAAA,GAEfE,EAAY,CAAC,MAAM,QAAP,iBClBZC,GAAOlC,EAAAA,EAAAA,OAChB,YAkBO,IAjBHmC,EAiBE,EAjBFA,OACAC,EAgBE,EAhBFA,OACAzD,EAeE,EAfFA,MACAC,EAcE,EAdFA,OAeMyD,EAAO,CAAEC,IADb,EAbFA,IAcoBC,MADlB,EAZFA,MAa2BC,OADzB,EAXFA,OAYmCC,KADjC,EAVFA,MAaA,OACI,8BACKR,EAAA,KAAc,SAAAzE,GACX,IAAMV,EAAOuF,EAAb,GAIA,MAAW,OAAO,KAElB,IAAMK,EAAUlF,QAAAA,GAAhB,WAAsCA,EAChChC,EACFgC,QAAAA,GAAAA,SAAsBA,EAAtBA,SADJ,QAGA,OACI,mBAGIV,KAAM4F,EAAO,IAHjB,IAII9N,EAAG4I,UAAAA,EAAAA,EAJP,EAKI3I,EAAG2I,WAAAA,EAAAA,EALP,EAMIT,MAAO2F,EAAO,EANlB,EAOIrK,OAAQqK,EAAO,EAPnB,EAQIlH,cAAeA,IATvB,WCrCPmH,GAAW3C,EAAAA,EAAAA,OACpB,YAUO,IATHX,EASE,EATFA,cAUMC,GAAQC,EAAAA,EAAAA,MAEd,OAAOqD,EAAAA,EAAAA,KAAC,SAADA,EAAAA,GAAAA,EAAuCtD,EAAAA,KAA9C,UCZKuD,GAAY7C,EAAAA,EAAAA,OAAK,YAAmC,IAAhChB,EAA+B,EAA/BA,MAC7B,GAA0CyB,EAAAA,EAAAA,MAAlCC,EAAR,UAAyBC,EAAzB,SAEMM,GAAaC,EAAAA,EAAAA,eAAa,EAE5B,CACI/E,KAAM,SAAApE,GAAI,OAAIA,EAAJ,KACVqJ,QAAS,SAAArJ,GAAI,MAAK,CACd2H,QADc,EAEdzK,GAAI8C,EAFU,GAGd3C,GAAI2C,EAHU,GAId7C,GAAI6C,EAJU,GAKd1C,GAAI0C,EAAK1C,KAEbiM,KAAM,SAAAvJ,GAAI,MAAK,CACX2H,QADW,EAEXzK,GAAI8C,EAFO,GAGX3C,GAAI2C,EAHO,GAIX7C,GAAI6C,EAJO,GAKX1C,GAAI0C,EAAK1C,KAEbkM,MAAO,SAAAxJ,GAAI,MAAK,CACZ2H,QADY,EAEZzK,GAAI8C,EAFQ,GAGZ3C,GAAI2C,EAHQ,GAIZ7C,GAAI6C,EAJQ,GAKZ1C,GAAI0C,EAAK1C,KAEbmM,OAAQ,SAAAzJ,GAAI,MAAK,CACb2H,QADa,EAEbzK,GAAI8C,EAFS,GAGb3C,GAAI2C,EAHS,GAIb7C,GAAI6C,EAJS,GAKb1C,GAAI0C,EAAK1C,KAEboM,MAAO,CACH/B,QAAS,GAEbqB,OAjCJ,EAkCIC,WAAYN,IAIpB,OACI,uBACKO,GAAW,qBACR,6BAAoBvH,IAAK3B,EAAzB,IAAmCsH,cAAeA,aC/CrDyD,GAAO9C,EAAAA,EAAAA,OAChB,YAcO,IAbHrB,EAaE,EAbFA,MACAC,EAYE,EAZFA,OACAuD,EAWE,EAXFA,OACAC,EAUE,EAVFA,OACAW,EASE,EATFA,QACAC,EAQE,EARFA,QASMC,GAASzD,EAAAA,EAAAA,UAAQ,WACnB,WAEOd,EAAiB,CACpBC,MADoB,EAEpBC,OAFoB,EAGpB7B,MAHoB,EAIpBD,KAJoB,IAKpBxC,OAAQyI,MAEb,CAACZ,EAAO,EAAR,EAVH,IAYMe,GAAS1D,EAAAA,EAAAA,UAAQ,WACnB,WAEOd,EAAiB,CACpBC,MADoB,EAEpBC,OAFoB,EAGpB7B,MAHoB,EAIpBD,KAJoB,IAKpBxC,OAAQ0I,MAEb,CAACpE,EAAO,EAAR,EAVH,IAYA,OACI,gCACKqE,IAAU,YAAWjE,MAAOiE,IAC5BC,IAAU,YAAWlE,MAAOkE,UC1ChCC,EAAqB,cAsC5B,IAAD,EAnCGrG,EAmCH,EAnCGA,KACAC,EAkCH,EAlCGA,MAkCH,IAjCGnI,EAAAA,OAiCH,MAjCO,EAiCP,MAhCGC,EAAAA,OAgCH,MAhCO,EAgCP,EA/BGwD,EA+BH,EA/BGA,OAEAmD,EA6BH,EA7BGA,cACAwB,EA4BH,EA5BGA,WA4BH,IA3BGC,SAAAA,OA2BH,MA3Bc,EA2Bd,MA1BGC,YAAAA,OA0BH,MA1BiB,EA0BjB,MAzBGC,aAAAA,OAyBH,MAzBkB,EAyBlB,EAxBWiG,EAwBX,EAxBG1G,OAEAjB,EAsBH,EAtBGA,OAsBH,IArBGC,eAAAA,OAqBH,MArBoB,MAqBpB,MApBGC,aAAAA,OAoBH,MApBkB,EAoBlB,EAlBG2D,EAkBH,EAlBGA,MAmBJ,EAA2CzC,EAAsB,CAC7DC,KAD6D,EAE7DC,MAF6D,EAG7DvB,cAH6D,EAI7DwB,WAJ6D,EAK7DC,SAL6D,EAM7DC,YAN6D,EAO7DC,aAP6D,EAQ7DC,OAAQ,WARJgB,EAAR,QAAeH,EAAf,YAA0BC,EAA1B,eAWAmF,EAAAA,OACAA,EAAAA,UAAAA,EAAAA,GAEAA,EAAAA,UAAAA,EACAA,EAAAA,aAAAA,EACAA,EAAAA,MAAc/D,EAAAA,KAAAA,MAAAA,KAAAA,WAAsCA,EAAAA,KAAAA,MAAAA,KAAtCA,WAAAA,IAAd+D,IACI/D,EAAAA,KAAAA,MAAAA,KADJ+D,SAAAA,MAEM/D,EAAAA,KAAAA,MAAAA,KAFN+D,YAII,SAAC/D,EAAAA,KAAAA,OAAAA,KAAD,kBAAJ,IACI+D,EAAAA,UAAgBC,OAAOhE,EAAAA,KAAAA,OAAAA,KAAvB+D,aACAA,EAAAA,QAAAA,SAEI/D,EAAAA,KAAAA,OAAAA,KAAJ,SACI+D,EAAAA,YAAkB/D,EAAAA,KAAAA,OAAAA,KAAlB+D,QAGJA,EAAAA,YACAA,EAAAA,OAAAA,EAAAA,GACAA,EAAAA,OAAWvG,MAAAA,EAAAA,EAAXuG,EAAsCvG,MAAAA,EAAAA,EAAtCuG,GACAA,EAAAA,UAGJ,IAAM3G,EAAS,mBAAO0G,EAAP,EAA0C,wBA+BzD,GA7BAhF,EAAAA,SAAc,SAAA+C,GAAS,IAAD,GACd,SAAC7B,EAAAA,KAAAA,MAAAA,KAAD,kBAAJ,IACI+D,EAAAA,UAAgBC,OAAOhE,EAAAA,KAAAA,MAAAA,KAAvB+D,aACAA,EAAAA,QAAAA,SAEI/D,EAAAA,KAAAA,MAAAA,KAAJ,SACI+D,EAAAA,YAAkB/D,EAAAA,KAAAA,MAAAA,KAAlB+D,QAGJA,EAAAA,YACAA,EAAAA,OAAWlC,EAAXkC,EAAmBlC,EAAnBkC,GACAA,EAAAA,OAAWlC,EAAAA,EAASA,EAApBkC,MAAgClC,EAAAA,EAASA,EAAzCkC,OACAA,EAAAA,UAGJ,IAAMrI,EAAQ0B,EAAOyE,EAArB,OAEAkC,EAAAA,OACAA,EAAAA,UAAclC,EAAAA,EAASA,EAAvBkC,MAAmClC,EAAAA,EAASA,EAA5CkC,OACAA,EAAAA,QAAWE,EAAAA,EAAAA,IAAXF,IAEI/D,EAAAA,KAAAA,MAAAA,KAAJ,OACI+D,EAAAA,UAAgB/D,EAAAA,KAAAA,MAAAA,KAAhB+D,MAGJA,EAAAA,SAAaG,OAAbH,GAAAA,EAAAA,GACAA,EAAAA,kBAGJ,IAAI5H,EAAsB,CACtB,IAAI6E,EAAJ,EACIC,EAAJ,EACIC,EAAJ,EACIvC,EAAJ,SAEA,MAAInB,GACA0D,GAAAA,GACAF,EAAAA,EACA,UAAI5E,GACAuC,EAAAA,QACAsC,EAAAA,GACG,WAAI7E,GACPuC,EAAAA,SACAsC,EAAUlI,EAAVkI,GACG,QAAI7E,IACPuC,EAAAA,SAGJsC,EAAAA,EACA,UAAI7E,EACAuC,EAAAA,QACG,WAAIvC,GACPuC,EAAAA,SACAqC,EAAUjI,EAAViI,GACG,QAAI5E,IACPuC,EAAAA,MACAqC,EAAAA,IAIR+C,EAAAA,UAAAA,EAAAA,GACAA,EAAAA,QAAWE,EAAAA,EAAAA,IAAXF,IACAA,EAAAA,MACI/D,EAAAA,KAAAA,OAAAA,KAAAA,WAAuCA,EAAAA,KAAAA,OAAAA,KAAvCA,WAAAA,IADJ+D,IAEG/D,EAAAA,KAAAA,OAAAA,KAFH+D,SAAAA,MAEwC/D,EAAAA,KAAAA,OAAAA,KAFxC+D,WAII/D,EAAAA,KAAAA,OAAAA,KAAJ,OACI+D,EAAAA,UAAgB/D,EAAAA,KAAAA,OAAAA,KAAhB+D,MAGJA,EAAAA,UAAAA,EACAA,EAAAA,aAAAA,SACAA,EAAAA,SAAAA,EAAAA,EAAAA,GAGJA,EAAAA,WAGSI,EAAqB,cAyB5B,IAtBEtB,EAsBH,EAtBGA,OACAC,EAqBH,EArBGA,OACAzD,EAoBH,EApBGA,MACAC,EAmBH,EAnBGA,OAEA0D,EAiBH,EAjBGA,IACAC,EAgBH,EAhBGA,MACAC,EAeH,EAfGA,OACAC,EAcH,EAdGA,KAEAnD,EAYH,EAZGA,MAaE+C,EAAO,CAAEC,IAAF,EAAOC,MAAP,EAAcC,OAAd,EAAsBC,KAAAA,GAEnCR,EAAAA,SAAkB,SAAAzE,GACd,IAAMV,EAAOuF,EAAb,GAIA,MAAW,OAAO,KAElB,IAAMK,EAAUlF,QAAAA,GAAhB,WAAsCA,EAChChC,EAAgBgC,QAAAA,GAAAA,SAAsBA,EAAtBA,SAAtB,QACMT,EAAQ2F,EAAO,EAArB,EACMhG,EAAS2B,EAAavB,EAAD,OAA3B,GAEAqG,EAAmBE,EAAI,EAAL,MAEdvG,KAAM4F,EAAO,IAFC,IAGd9N,EAAG4I,UAAAA,EAAAA,EAHW,EAId3I,EAAG2I,WAAAA,EAAAA,EAJW,EAKdT,MALc,EAMdL,OANc,EAOdrE,OAAQqK,EAAO,EAPD,EAQdlH,cARc,EASd8D,MAAAA,SAKCoE,EAA0B,cAejC,IAZE/E,EAYH,EAZGA,MACAC,EAWH,EAXGA,OACA7B,EAUH,EAVGA,MACAD,EASH,EATGA,KACAxC,EAQH,EARGA,OASUoE,EAAiB,CAAEC,MAAF,EAASC,OAAT,EAAiB7B,MAAjB,EAAwBD,KAAxB,EAA8BxC,OAAAA,IAE7D0E,SAAc,SAAAjH,GACVsL,EAAAA,YACAA,EAAAA,OAAWtL,EAAXsL,GAAoBtL,EAApBsL,IACAA,EAAAA,OAAWtL,EAAXsL,GAAoBtL,EAApBsL,IACAA,EAAAA,c,ggBC3OKM,EAAY,wBAAa/P,KAAKgQ,MAAsB,IAAhBhQ,KAAKiQ,UAAAA,eCAzCC,EAAe,CACxjB,OACA,QACA,OACA,SACA,UACA,QACA,MACA,QACA,OACA,YACA,UACA,UACA,UACA,SACA,SACA,OACA,YACA,QACA,OACA,QACA,QACA,YACA,YACA,SACA,MACA,UACA,WACA,QACA,SACA,SACA,OACA,WACA,UACA,WACA,OACA,OACA,WACA,QACA,QCvCSC,EAAuB,CAChC,MACA,OACA,aACA,KACA,SACA,SACA,OACA,UACA,SACA,OACA,OACA,QACA,OACA,OACA,IACA,MACA,OACA,0FCNSC,EAAqB,SAC9BC,EACAtJ,EAAAA,GAAAA,IAAAA,OAAAA,IAAAA,EAQa,KANTuJ,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,SAAAA,EAAAA,EACAC,WAAAA,OAAAA,IAAAA,EAAa,QACbC,aAAAA,OAAAA,IAAAA,EAAe,QACfC,YAAAA,OAAAA,IAAAA,EAAc,cACdC,OAAAA,IAAAA,GAAAA,EAAAA,MAkBG,CACHN,GAAAA,EACAC,MAAAA,EACAC,SAAAA,EACAK,OAnBWnL,GAAAA,CAAM+K,EAAa,GAAGK,QACjC,gBACUC,EAAY/J,EAAMgK,EAAI,UACpBf,GAAAA,CAAOc,EAAWH,IAAAA,OAAWI,KAEzC,CAAChK,IAeDiK,SAZavL,GAAAA,CAAMgL,GAAcI,QAAiB,mBAC/B,IAAfE,EAAIvM,OAAqB,CAACwL,GAAAA,CAAOjJ,EAAK4J,IAAAA,CAClCX,GAAAA,CAAOe,EAAI,GAAIJ,IAAAA,OAAWI,KACnC,IAUCE,QARYxL,GAAAA,CAAMiL,GAAaQ,KAAI,iBAAY,GAANnK,EAAYiJ,GAAAA,CAAa,GAANjJ,QCjCvDoK,EAAoB,6BAK7B,SAJA7I,KAAAA,OAAAA,IAAAA,EAAO4H,EAAAA,EAAAA,EAAAA,EACPkB,KAAAA,OAAAA,IAAAA,EAAO,QACPC,SAAAA,OAAAA,IAAAA,EAAW,QACXC,SAAAA,OAAAA,IAAAA,EAAW,MAELC,EAAUxR,KAAK+G,IAAIwB,EAAK9D,OAAQ4M,GAChCI,EAAelJ,EAAKmJ,MAAM,EAAGF,GAAAA,MAS5B,CAAEG,OAPMjM,GAAAA,CAAM8L,GAASL,KAAI,kBAC9BzL,GAAAA,CAAM8L,GAASL,KAAI,kBACXnR,KAAKiQ,SAAW,IAAaA,GAAAA,CAAOqB,EAAUC,EAAW,GACtDtB,GAAAA,CAAOqB,EAAUC,SAIfhJ,KAAMkJ,ICLdG,EAAsB,6BAgB/B,SAfAC,SAAAA,OAAAA,IAAAA,EAAW,SACXC,QAAAA,OAAAA,IAAAA,EAAU,SACVC,SAAAA,OAAAA,IAAAA,EAAW,SACXC,YAAAA,OAAAA,IAAAA,EAAc,QACdC,YAAAA,OAAAA,IAAAA,EAAc,SACdC,UAAAA,OAAAA,IAAAA,EAAY,QACZC,UAAAA,OAAAA,IAAAA,EAAY,IAUNC,EAAW,CACb9B,GAAI,SACJtF,OAAQ,EACRqG,KAAMQ,EACNQ,MAAO,qBAEPC,EAAQnH,MAAMuC,KAAK,CAAEjJ,OAAQwL,GAAAA,CAAO+B,EAAaC,KAAgB,SAACtR,EAAG4R,GAAAA,MAAO,CAC5EjC,GAAAA,SAAYiC,EAAI,GAChBvH,OAAQ,EACRqG,KAAMS,EACNO,MAAO,wBAGLG,EAAgB,GAChBC,EAA0B,UAChCH,EAAM9J,SAAQ,YACVgK,EAAME,KAAK,CACPC,OAAQ,SACRC,OAAQD,EAAOrC,GACfuC,SAAU,KAEdP,EAAM9J,SAAQ,YACNxI,KAAKiQ,SAAW,KAChBuC,EAAME,KAAK,CACPC,OAAQA,EAAOrC,GACfsC,OAAQA,EAAOtC,GACfuC,SAAU,QAItB1H,MAAMuC,KAAK,CAAEjJ,OAAQwL,GAAAA,CAAOiC,EAAWC,KAAc,SAACxR,EAAG4R,GAAAA,OACrDE,EAAWC,KAAK,CACZpC,GAAOqC,EAAOrC,GAAAA,IAAMiC,EACpBvH,OAAQ,EACRqG,KAAMU,EACNM,MAAO,uBAEXG,EAAME,KAAK,CACPC,OAAQA,EAAOrC,GACfsC,OAAWD,EAAOrC,GAAAA,IAAMiC,EACxBM,SAAU,KAGP,WAIfP,EAAMI,KAAKN,GAGJ,CAAEE,MAFTA,EAAQA,EAAMQ,OAAOL,GAELD,MAAAA,IAAAA,SAAAA,IAAAA,OAAAA,EAAAA,OAAAA,QAAAA,SAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,UAAAA,GAAAA,IAAAA,IAAAA,KAAAA,EAAAA,OAAAA,UAAAA,eAAAA,KAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAAA,IAAAA,OAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAAAA,ICrEPO,EAAkC,SAAC,GAAD,iBASlC,SART1B,KAAAA,OAAAA,IAAAA,EAAO,SACP9I,KAAAA,OAAAA,IAAAA,EAAO,CACH,CAAEzC,IAAK,OAAQmK,OAAQ,EAAE,GAAI,KAC7B,CAAEnK,IAAK,OAAQmK,OAAQ,CAAC,IAAK,MAC7B,CAAEnK,IAAK,QAASkN,QAAS,CAAC,MAAO,SAAU,UAC3C,CAAElN,IAAK,SAAUkN,QAAS,CAAC,IAAK,IAAK,IAAK,IAAK,MAC/C,CAAElN,IAAK,SAAUmK,OAAQ,CAAC,GAAK,gBAe5BvK,GAAAA,CAAM2L,GAAMF,KAZI,kBACnB5I,EAAKuI,QAAO,SAACE,EAAKlL,GAAAA,IAAAA,EACVsB,EAAAA,YAAAA,IACAtB,EAAImK,OACJ7I,EAAQ6I,IAAAA,WAAAA,EAAUnK,EAAImK,aAAAA,IACfnK,EAAIkN,UACX5L,EAAQ4L,GAAAA,CAAQlN,EAAIkN,SAAS,SAGrBhC,IAAAA,EAAAA,IAAMlL,EAAIA,KAAMsB,EAAAA,MAC7B,QCrBL6L,EAAiB9C,EAAMgB,KAAI,SAAA3M,GAAA,MAAS,CAAE8L,GAAI4C,MAE1CC,EAAiB,SAAjBA,EAAkB7C,EAAYkC,EAAeY,GAAAA,IACzCC,EAAUb,EACXc,QAAO,qBAAGX,SAAwBrC,KAClCa,KAAI,gBAAGyB,EAAAA,EAAAA,OAAAA,GACAA,IAAWtC,EAAAA,MACL,IAAInO,MAAAA,wDACkDmO,EAAAA,OAASA,GAAAA,GAAAA,MAGrE8C,GAAAA,EAAaG,SAASX,GAAAA,MAChB,IAAIzQ,MAAAA,8CACwCiR,EAAYI,KACtD,eACIZ,GAAAA,OAGTA,KAAAA,OAGRS,EAAQvC,QACX,SAACE,EAAKyC,GAAAA,OACFzC,EAAI8B,OACAK,EACIM,EACAjB,EACAY,EAAAA,GAAAA,OAAkBA,EAAAA,CAAaK,IAAY,CAACnD,EAAImD,OAG5DJ,IAIFK,EAAkB,SAAClB,GAAAA,OACrBA,EAAM1B,QAAiC,SAAC6C,EAAaC,GAAAA,OAC5CD,EAAYC,EAAKjB,UAClBgB,EAAYC,EAAKjB,QAAUQ,EAAeS,EAAKjB,OAAQH,IAGpDmB,IACR,KAEME,EAAqB,SAAC,GAAD,iBAM9B,KALAC,EAAAA,EAAAA,UAAAA,EAAAA,EACAC,cAAAA,OAAAA,IAAAA,EAAgB,IAKVzB,EAAQW,EAAevB,MAAM,EAAGoC,GAAW3C,KAAI,SAAA3M,GAAA,OACjD8D,OAAO0L,OAAO,GAAIC,EAAM,CACpBC,UAAWnE,SAIbyC,EAAgB,UACtBQ,GAAAA,CAAQV,GAAO9J,SAAQ,gBAAG8H,EAAAA,EAAAA,GACtB5K,GAAAA,CAAMuK,GAAAA,CAAO,EAAG8D,IAAgBvL,SAAQ,eAC9BmL,EAAcD,EAAgBlB,GAC9B2B,EAASnB,GAAAA,CAAQV,EAAMgB,QAAO,SAAA9O,GAAA,OAAKA,EAAE8L,KAAOA,KAAIa,KAAI,SAAA3M,GAAA,OAAKA,EAAE8L,OAAK,GAEhEqD,EAAYQ,IAAYR,EAAYQ,GAAQZ,SAASjD,IACrDqD,EAAYrD,IAAQqD,EAAYrD,GAAIiD,SAASY,IAE/C3B,EAAME,KAAK,CACPC,OAAQrC,EACRsC,OAAQuB,EACR/M,MAAO6I,GAAAA,CAAO,EAAG,aAM1B,CAAEqC,MAAAA,EAAOE,MAAAA,IC1Ed4B,EAAc,kBAAMnE,GAAAA,CAAO,EAAG,MAC9BoE,EAAe,kBAAMpE,GAAAA,CAAO,EAAG,KAC/BqE,EAAiB,kBAAMrE,GAAAA,CAAO,EAAG,KAE1BsE,EAAwB,SACjC7M,EAAAA,GAAAA,IAAAA,EAAAA,EACEX,IAAAA,OAAAA,IAAAA,EAAM,SAAIC,IAAAA,OAAAA,IAAAA,EAAM,UAAKwN,cAAAA,OAAAA,IAAAA,EAAgB,UACrC,CACF9M,OAAAA,EACAtD,KAAMsD,EAAOoJ,QACT,SAACE,EAAKjL,EAAO0O,GAAAA,MAAAA,GAAAA,OACNzD,EACAtL,GAAAA,CAAMuK,GAAAA,CAAOlJ,EAAKC,IAChBmK,KAAI,kBAAMiD,OACVjD,KAAI,SAACuD,EAAOC,GAAAA,IACHC,EAAwB,CAC1BtE,GAAOmE,EAAAA,IAAcE,EACrB5O,MAAAA,EACA2O,MAAAA,EACAG,OAAQR,KAAAA,OAGRG,EAAgB,IAChBI,EAAME,WAAapP,GAAAA,CAAM8O,GAAerD,IAAImD,IAGzCM,QAGnB,MAIKG,EAAyB,SAACC,GAAAA,MAA4D,CAC/FtN,OAAQsN,EAAatN,OACrBtD,KAAM4Q,EAAa5Q,KAAK+M,KAAI,gBAClByD,EAAAA,EAAAA,GACCtQ,EAAAA,CACHyB,MAAOiN,GAAAA,CAAQgC,EAAatN,QAAQ,GACpCgN,MAAON,IACPS,OAAQR,MAAAA,YAAAA,IAGR/P,EAAEwQ,aACFF,EAAME,WAAapP,GAAAA,CAAM,GAAGyL,IAAImD,IAG7BM,OC9CTK,EAAoB,SAAC9H,GACnB+H,MAEA,WAAY/H,EACA,SAACwH,GAAAA,OAAkBxH,EAAOzG,OAAOiO,IAEjC,eACJvN,EAAQ+F,EAAOpG,IAAM/G,KAAKiQ,UAAY9C,EAAOnG,IAAMmG,EAAOpG,KAAAA,OAC1DoG,EAAO6C,QACP5I,EAAQpH,KAAKgQ,MAAM5I,IAGhBA,IAON+N,EAAmB,SAAC,GAAD,IAC5BC,EAAAA,EAAAA,SACApU,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EAMMoU,EAAU,WAAYrU,EAAIA,EAAEyD,OAASzD,EAAE0F,OAAOjC,OAE9C6Q,EAAOL,EAAkBjU,GACzBuU,EAAON,EAAkBhU,GAAAA,OAExBmU,EAASjE,KAAI,kBACT,CACHb,GAAIkF,EACJpR,KAAM+G,MAAMuC,KAAK,CAAEjJ,OAAQ4Q,IAAWlE,KAAI,SAACxQ,EAAGgU,GAAAA,MACnC,CACH3T,EAAGsU,EAAKX,GACR1T,EAAGsU,EAAKZ,YC3Cf5E,EAAYsC,EAEZoD,EAAmC,SAACC,EAAsBC,QAAAA,IAAtBD,IAAAA,GAAAA,QAAgB,IAAMC,IAAAA,GAAS,OACxEC,EAAQC,EAAAA,OACRH,IACAE,EAAQ5C,GAAAA,CAAQ4C,IAEhBD,EAAQ,IACRA,EAAQ,EAAI3V,KAAKgQ,MAAMhQ,KAAKiQ,UAAY4F,EAA0BpR,OAAS,KAGxEmR,EAAMlE,MAAM,EAAGiE,GAAOxE,KAAI,kBAAa,CAC1ChK,MAAO2O,EACP1O,MAAOpH,KAAKgQ,MAAsB,IAAhBhQ,KAAKiQ,UACvBoC,MAAOtC,SAIFgG,EAAW,SAAIb,GAAAA,IAClBc,EAAY,UAEX,eACC5O,EAAAA,GAEAA,EAAQ8N,EAAAA,WAAAA,EAAAA,iBACHc,EAAKzC,SAASnM,IAAAA,OAEvB4O,EAAKtD,KAAKtL,GAEHA,IAIF6O,EAAkB,kBAAMjD,GAAAA,CAAQ6C,GAAmB,IAYnDK,EAAqB,SAACC,QAAAA,IAAAA,IAAAA,EAAQ,QAEjCC,EAAQ,CAAC,SAAU,OAAQ,MAAO,QAAS,UAC3CC,EAAUN,EAASE,GAEnB7R,EAAqBgS,EAAMjF,KAAI,kBAAO,CACxCb,GAAAA,EACA+B,MAAOtC,IACP3L,KAAM,cAGVsB,GAAAA,CAAMyQ,GAAO3N,SAAQ,eACXxH,EAAIqV,IACVD,EAAM5N,SAAQ,2BACVpE,EAAKkS,MAAK,mBAAKhS,EAAEgM,KAAOA,OAAAA,EAAKlM,KAAKsO,KAAK,CACnCL,MAAOtC,IACP/O,EAAAA,EACAC,EAhBOgP,GAAAA,CAAO,EAAG,YAqBtB7L,GASEmS,EAAiB,SAACC,EAAeC,GAAAA,OAC1CD,EAAIrF,KAAI,kBAAO,CACXb,GAAAA,EACA+B,MAAOtC,IACP3L,KAAMqS,EAAMtF,KAAI,kBAAM,CAAEnQ,EAAAA,EAAGC,EAAGjB,KAAKgQ,MAAsB,IAAhBhQ,KAAKiQ,mBA6BzCyG,EAAoB,SAAChJ,EAAYiJ,EAAUnF,QAAAA,IAAAA,IAAAA,EAAU,QACxD/L,EAb8B,SAACiI,EAAYiJ,GAAAA,IAC3ClR,GAAOmR,EAAAA,EAAAA,GAASlJ,EAAMiJ,GACtBE,GAAYlM,EAAAA,EAAAA,IAAW,mBAEtBlF,EAAK0L,KAAI,kBACL,CACH/J,MAAOpH,KAAKgQ,MAAsB,IAAhBhQ,KAAKiQ,UACvBjL,IAAK6R,EAAU7R,OAMV8R,CAAyBpJ,EAAMiJ,GAEtCtF,EACFrR,KAAKgQ,MAAMvK,EAAKhB,QAAoB,GAAV+M,IAC1BxR,KAAKgQ,MAAMhQ,KAAKiQ,UAAYxK,EAAKhB,QAAoB,GAAV+M,KAAAA,OAExCwB,GAAAA,CAAQvN,GAAMiM,MAAM,EAAGL,IAGrB0F,EAAwB,SACjCxO,EAAAA,GAAAA,IAAAA,OAAAA,IAAAA,EACuD,SAArD8I,KAAAA,OAAAA,IAAAA,EAAO,SAAItK,IAAAA,OAAAA,IAAAA,EAAM,QAAGC,IAAAA,OAAAA,IAAAA,EAAM,UAAKgQ,WAAAA,OAAAA,IAAAA,GAAAA,EAAAA,OAEjCnB,EAAkBnE,MAAM,EAAGL,GAAMF,KAAI,gBAC3B7M,EAA6B,CAC/B+R,QAAAA,GAAAA,OAEJ9N,EAAKC,SAAQ,YACTlE,EAAEwB,GAAOmK,GAAAA,CAAOlJ,EAAKC,IAAAA,IACjBgQ,IACA1S,EAAKwB,EAAAA,SAAciK,QAIpBzL,MAGT2S,EAAe,CACjB,CACI,MACA,CACI,CAAC,QAAS,CAAC,CAAC,UAAW,CAAC,SAAU,CAAC,SAAU,CAAC,YAC9C,CACI,OACA,CACI,CAAC,QAAS,CAAC,CAAC,MAAO,CAAC,CAAC,WAAY,CAAC,UAAW,CAAC,UAAW,CAAC,SAAU,CAAC,WACrE,CAAC,eAKjB,CAAC,SAAU,CAAC,CAAC,OAAQ,CAAC,SACtB,CACI,QACA,CAAC,CAAC,aAAc,CAAC,cAAe,CAAC,QAAS,CAAC,QAAS,CAAC,WAAY,CAAC,cAAe,CAAC,SAEtF,CAAC,aAAc,CAAC,CAAC,WAAY,CAAC,QAAS,CAAC,UAAW,CAAC,SAAU,CAAC,UAC/D,CACI,MACA,CACI,CAAC,SACD,CAAC,aACD,CAAC,SACD,CAAC,WACD,CAAC,WACD,CAAC,YACD,CAAC,WACD,CAAC,SACD,CAAC,UACD,CAAC,WACD,CAAC,WACD,CAAC,QACD,CAAC,WAGT,CACI,OACA,CACI,CAAC,QACD,CAAC,WACD,CAAC,aACD,CAAC,aACD,CAAC,UACD,CAAC,WACD,CAAC,YACD,CAAC,YACD,CAAC,cAGT,CACI,OACA,CACI,CAAC,YAAa,CAAC,CAAC,OAAQ,CAAC,SAAU,CAAC,SAAU,CAAC,UAC/C,CAAC,SACD,CACI,OACA,CACI,CAAC,SACD,CAAC,QAAS,CAAC,CAAC,UAAW,CAAC,UAAW,CAAC,UAAW,CAAC,YAChD,CACI,QACA,CACI,CAAC,UACD,CAAC,UACD,CAAC,UACD,CAAC,UACD,CAAC,UACD,CAAC,UACD,CAAC,UACD,CAAC,UACD,CAAC,iBAgBhBC,EAAkB,SAAlBA,EACThE,EACAyC,EACAwB,GAAAA,IAAAA,OAAAA,IAFAjE,IAAAA,EAAO,iBAEPiE,IAAAA,EAAWF,IAEXtB,EAAQA,GAASwB,EAAS1S,QACd0S,EAAS1S,SACjBkR,EAAQwB,EAAS1S,QAAAA,IAGf2S,EAAqB,CACvBlE,KAAAA,EACAb,MAAOtC,KAAAA,OAAAA,OAAAA,EAEPoH,QAAAA,EAAAA,EAAU1S,QAAS,EACnB2S,EAAKD,SAAWzR,GAAAA,CAAMiQ,GAAOxE,KAAI,SAACxQ,EAAG0D,GAAAA,IAAAA,EAC3BgT,EAAOF,EAAS9S,GAAAA,OAGf6S,EAAgBG,EAAK,GAAc,cAAOA,EAAK,MAAM,OAGhED,EAAKE,IAAMtX,KAAKgQ,MAAsB,IAAhBhQ,KAAKiQ,UAGxBmH,GAGLG,EAAQ,CAAC,YAAa,YAAa,SACnCC,EAAa,CAAC,SAAU,SAAU,QAAS,SAAU,SAE9CC,EAAsB,SAAC,GAAD,iBAAmC,SAAhCC,QAAAA,OAAAA,IAAAA,EAAU,SAAIC,QAAAA,OAAAA,IAAAA,EAAU,YAUnD,CAAEvT,KATIoT,EAAWrG,KAAI,gBAClB7M,EAA6B,CAAEsT,MAAAA,GAAAA,OACrCL,EAAM/O,SAAQ,YACVlE,EAAEuT,GAAQ5H,GAAAA,CAAOyH,EAASC,MAGvBrT,KAGIiE,KAAMgP,K,geCxQzB,IAAMO,EAA0B,CAC5BhS,IAAKqI,IAAAA,OAAAA,WACLvG,cAAeuG,IAAAA,MAAgB,CAAC,SAFJ,UAG5B9E,SAAU8E,IAAAA,OACV7E,YAAa6E,IAAAA,OACb5E,aAAc4E,IAAAA,OACdrF,OAAQqF,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,SAC7CtG,OAAQsG,IAAAA,KACRrG,eAAgBqG,IAAAA,MAAgB,CAAC,QAAQ,SARb,QAS5BpG,aAAcoG,IAAAA,QAGL4J,EAAkB,CAC3B3T,KAAM+J,IAAAA,QAAkBA,IAAAA,QADG,WAE3B6J,UAAW,YACP,cAAoB,CAChB,kBAEIlS,IAAKqI,IAAAA,OAAAA,WACLjI,KAAMiI,IAAAA,MAAgB,CAAhBA,UAHV,WAIInG,QAASmG,IAAAA,OACTzH,OAAQyH,IAAAA,QACJA,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,UAE3C/E,WAAY+E,IAAAA,QACRA,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,aAG/C,kBAEIjI,KAAMiI,IAAAA,MAAgB,CAAhBA,WAFV,WAGIpH,IAAKoH,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,MAAgB,CAHhE,WAIInH,IAAKmH,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,MAAgB,CAJhE,WAKI/E,WAAY+E,IAAAA,UAAoB,CAC5BA,IAAAA,OACAA,IAAAA,QAAkBA,IAAAA,gBAvBP,WA4B3B8J,OAAQ9J,IAAAA,MAAgB,CAAC,aAAjBA,aA5BmB,WA6B3BlK,MAAOiU,EAAAA,GAAAA,WACPC,YAAahK,IAAAA,OAAAA,WACbiK,YAAajK,IAAAA,OAAAA,WACbkK,SAAUlK,IAAAA,MAAgB,CAAC,aAAjBA,eAhCiB,WAiC3BmK,kBAAmBnK,IAAAA,MAAgB,CAAC,SAAjBA,UAjCQ,WAkC3BoK,OAAQC,EAAAA,GAAAA,YAGCC,EAAY,QAErBC,KAAMvK,IAAAA,OAAAA,aAGGwK,EAAqB,CAC9BV,OAD8B,aAE9BhU,MAF8B,SAG9BsU,OAAQ,CAAEK,OAAQ,qBAClBT,YAJ8B,EAK9BC,YAL8B,IAM9BC,SAN8B,aAO9BC,kBAP8B,QAQ9BxL,SAR8B,EAS9B+L,aAAc,UAGLC,EAAe,QAExBJ,KAAM,QCsCGK,EAAyB,SAAC,GAQhC,IAPHhO,EAOE,EAPFA,MACAC,EAME,EANFA,OACA5G,EAKE,EALFA,KACA4T,EAIE,EAJFA,UACAC,EAGE,EAHFA,OACAM,EAEE,EAFFA,OACAtU,EACE,EADFA,MAEM+U,GAAeC,EAAAA,EAAAA,GAAqBV,EAA1C,SAEMW,GAAgBtN,EAAAA,EAAAA,UAClB,kBACI,YACO,SAAAtH,GAAC,OAAIA,EAAJ,KADR,GAEO,SAAAA,GAAC,OAAIA,EAAJ,KAFR,OAGW6U,EAAAA,EAAAA,IAJf,MAKA,CANJ,IASA,GAA+DvN,EAAAA,EAAAA,UAC3D,kBArIwC,SAAC,GAAgD,IAA9Cb,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,OAAQ5G,EAA8B,EAA9BA,KAAM4T,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OACzEmB,GAAiB,eACZnB,eAAAA,EAA0B,CAAC,EAA3BA,GAAuC,CAACjN,EAD5B,WAEXgN,EAAA,KAAc,6BAEpBtS,EAAQuS,eAAAA,EAA0B,CAACjN,EAA3BiN,GAAwC,CAAC,EAAvD,GACMoB,EAAqBrB,EAAA,KAAc,SAAAsB,GACrC,IAGA,EAHMC,EAAY,IAAlB,IAIA,GAHAnV,EAAAA,SAAa,SAAAE,GAAC,OAAIiV,EAAAA,IAAcjV,EAAEgV,EAApB,SAGd,WAAIA,EAAAA,KAA4B,CAC5B,IAAMvS,OACFuS,IAAAA,EAAAA,KAAAA,SAA8BA,EAAAA,IACxBA,EADNA,IAEMtZ,KAAAA,IAAAA,MAAAA,KAAYmL,MAAAA,KAHtB,IAIMnE,OACFsS,IAAAA,EAAAA,KAAAA,SAA8BA,EAAAA,IACxBA,EADNA,IAEMtZ,KAAAA,IAAAA,MAAAA,KAAYmL,MAAAA,KAHtB,IAKAhC,GAAQqQ,EAAAA,EAAAA,KAAAA,WAAAA,GAAAA,OAAuC,CAACzS,EAAhDoC,IAaJ,MAVA,UAAImQ,EAAAA,OACAnQ,GAAQsQ,EAAAA,EAAAA,KAAAA,MAAAA,GAAAA,OAEIH,EAAAA,QAFZnQ,QAIA,IAAImQ,EAAAA,SACAnQ,EAAAA,QAAcmQ,EAAdnQ,UAID,EAAP,MAEIA,MAFJ,EAGIzC,OAAQyE,MAAAA,KAAAA,QAIVuO,EAAiBtV,EAAA,KAAS,cAC5B,IAAMuV,EAASN,EAAA,KAAuB,SAAAC,GAAQ,MAAK,CAC/CtY,EACIiX,eAAAA,EACMmB,EAAeE,EADrBrB,KAEMqB,EAAAA,MAAe1E,EAAM0E,EAJgB,MAK/CrY,EACIgX,eAAAA,EACMqB,EAAAA,MAAe1E,EAAM0E,EAD3BrB,MAEMmB,EAAeE,EAAD,SAG5B,OAAO,EAAP,CAAS3E,MAAAA,GAAT,GAA0BgF,OAAAA,OAG9B,MAAO,CACHP,eADG,EAEHC,mBAFG,EAGHK,eAAAA,GA2EIE,CAAiC,CAC7B7O,MAD6B,EAE7BC,OAF6B,EAG7B5G,KAH6B,EAI7B4T,UAJ6B,EAK7BC,OAAAA,MAER,CAAClN,EAAM,EAAP,IATJ,IAYA,MAAO,CACHqO,eAbJ,iBAcIC,mBAdJ,qBAeIK,eAfJ,iBAgBIV,aAJG,EAKHE,cAAAA,IC/IFW,EAAiC,SAAC,GAAyB,IAAvBzV,EAAsB,EAAtBA,KAAM4T,EAAgB,EAAhBA,UAC5C,OACI,eACI8B,KAAM9B,EAAA,KAAc,SAAAsB,GAAQ,MAAI,CAC5BA,EAD4B,KAE5B,4BAASlV,EAAKkV,EAAD,cAM7BO,EAAAA,UAA2C,CACvCzV,KAAM+J,IAAAA,OAAAA,WACN6J,UAAW,YACP,UAAgB,CACZlS,IAAKqI,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAAmB4L,cAErEA,YAGN,OAAe3N,EAAAA,EAAAA,MAAf,GCjBM4N,EAA0B,SAAC,GAQ1B,IAPH5V,EAOE,EAPFA,KACA4T,EAME,EANFA,UACAkB,EAKE,EALFA,cACAS,EAIE,EAJFA,OACAxB,EAGE,EAHFA,YACA9F,EAEE,EAFFA,MACAvG,EACE,EADFA,QAEA,GAA8CmO,EAAAA,EAAAA,MAAtCC,EAAR,uBAA8BC,EAA9B,cACMC,GAAmBC,EAAAA,EAAAA,cACrB,SAAArO,GACIkO,GACI,YAAgC9V,KAAhC,EAA4C4T,UAAWA,IAD3DkC,KAKJ,CAAC9V,EAPL,IAUA,GAA0CyI,EAAAA,EAAAA,MAAlCC,EAAR,UAAyBC,EAAzB,SACMuN,GAAeC,EAAAA,EAAAA,IAAgBrB,EAArC,IACMzN,GAAgBuB,EAAAA,EAAAA,WAAU,CAC5BqF,MAD4B,EAE5BvG,QAF4B,EAG5BqB,OAH4B,EAI5BC,WAAYN,IAGhB,OACI,SAAC,SAAD,CACIxI,EADJ,EAEIkW,OAAQ/O,EAFZ,MAGI0M,YAHJ,EAIIsC,cAJJ,QAKI3O,QAASL,EALb,QAMIiP,KANJ,OAOIC,aAPJ,EAQIC,YARJ,EASIC,aAAcV,KAK1BH,EAAAA,UAAoC,CAChC5V,KAAM+J,IAAAA,OAAAA,WACN6J,UAAW,YACP,UAAgB,CACZlS,IAAKqI,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAAmB4L,cAJvC,WAOhCb,cAAe/K,IAAAA,KAAAA,WACfwL,OAAQ,YACJ,UAAgB,CACZ3Y,EAAGmN,IAAAA,OAAAA,WACHlN,EAAGkN,IAAAA,OAAAA,cAXqB,WAchCgK,YAAahK,IAAAA,OAAAA,WACbkE,MAAOlE,IAAAA,OAAAA,WACPrC,QAASqC,IAAAA,OAAAA,YAGb,OAAe/B,EAAAA,EAAAA,MAAf,GChEM0O,EAAsB,SAAC,GActB,IAbH1W,EAaE,EAbFA,KACA4T,EAYE,EAZFA,UACAC,EAWE,EAXFA,OACAlN,EAUE,EAVFA,MACAC,EASE,EATFA,OACQ+P,EAQN,EARFC,OACA3C,EAOE,EAPFA,SACAC,EAME,EANFA,kBACAH,EAKE,EALFA,YACAC,EAIE,EAJFA,YACAnU,EAGE,EAHFA,MACAsU,EAEE,EAFFA,OACAG,EACE,EADFA,KAEA,GAAqEuC,EAAAA,EAAAA,IAAc,EAAD,EAAlF,GAAQD,EAAR,SAAgBE,EAAhB,aAA4BC,EAA5B,cAAyCC,EAAzC,aAAqDC,EAArD,cAMA,EACItC,EAAuB,CACnBhO,MADmB,EAEnBC,OAFmB,EAGnB5G,KAHmB,EAInB4T,UAJmB,EAKnBC,OALmB,EAMnBM,OANmB,EAOnBtU,MAAAA,IARAmV,EAAR,iBAAwBC,EAAxB,qBAA4CK,EAA5C,iBAA4DR,EAA5D,gBAA2EF,EAA3E,eAWMvK,EAAO4K,EAAA,KAAuB,SAAAC,GAAQ,OACxC,eAEIpQ,KAAM+O,eAAAA,EAAAA,IAFV,IAGIxT,OAAQwT,eAAAA,EAAAA,EAHZ,EAIIjX,EAAGiX,eAAAA,EAA0BmB,EAAeE,EAAzCrB,KAJP,EAKIhX,EAAGgX,eAAAA,EAAAA,EAA8BmB,EAAeE,EALpD,KAMInQ,MAAOmQ,EANX,MAOI1R,cAAe0R,EAAAA,eAPnB,EAQIlQ,WAAYkQ,EARhB,WASIjQ,SAAUiQ,EATd,SAUIhQ,YAAagQ,EAVjB,YAWI/P,aAAc+P,EAXlB,aAYIxQ,OAAQwQ,EAZZ,WAaIzR,OAAQyR,EAbZ,OAcIxR,eAAgBwR,EAdpB,eAeIvR,aAAcuR,EAASvR,cAdlBuR,EAF+B,QAoB5C,OACI,gBAAYvO,MAAZ,EAA+BC,OAA/B,EAAoDgQ,OAApD,EAAoEtC,KAApE,YACKL,eAAAA,GADL,EAEKqB,EAAA,KAAmB,SAAA9E,GAAK,OACrB,YAEIxQ,KAFJ,EAGI4T,UAHJ,EAIIkB,cAJJ,EAKIS,OAAQ/E,EALZ,OAMIuD,YANJ,EAOIrM,QAPJ,EAQIuG,MAAO2G,EAAapE,IAPfA,EAFY,UAYxByD,eAAAA,GAdL,MAmBRyC,EAAAA,UAAAA,EAAAA,IAEMQ,GAA6BC,EAAAA,EAAAA,IAAcT,GACjDQ,EAAAA,aAAAA,EAAAA,IC9EME,EAAgC,SAAA3V,GAAK,OACvC,uBACK,gBAAGkF,EAAH,QAAUC,EAAV,gBAAuB,cAAqBD,MAArB,EAAmCC,OAAQA,GAAlE,QCEHyQ,EAA4B,SAAC,GAa5B,IAZHrX,EAYE,EAZFA,KACA6T,EAWE,EAXFA,OACAD,EAUE,EAVFA,UACAjN,EASE,EATFA,MACAC,EAQE,EARFA,OACQ+P,EAON,EAPFC,OACA/W,EAME,EANFA,MACAsU,EAKE,EALFA,OACAH,EAIE,EAJFA,YACAD,EAGE,EAHFA,YACAG,EAEE,EAFFA,kBACAoD,EACE,EADFA,WAEMC,GAAWC,EAAAA,EAAAA,QAAjB,MAEA,GAAqEX,EAAAA,EAAAA,IAAc,EAAD,EAAlF,GAAQD,EAAR,SAAgBE,EAAhB,aAA4BC,EAA5B,cAAyCC,EAAzC,aAAqDC,EAArD,cAMA,EACItC,EAAuB,CACnBhO,MADmB,EAEnBC,OAFmB,EAGnB5G,KAHmB,EAInB4T,UAJmB,EAKnBC,OALmB,EAMnBM,OANmB,EAOnBtU,MAAAA,IARAmV,EAAR,iBAAwBC,EAAxB,qBAA4CK,EAA5C,iBAA4DR,EAA5D,gBAA2EF,EAA3E,eAWMtN,GAAQC,EAAAA,EAAAA,MA0Dd,OAxDAkQ,EAAAA,EAAAA,YAAU,WACNF,EAAAA,QAAAA,MAAyBP,EAAzBO,EACAA,EAAAA,QAAAA,OAA0BN,EAA1BM,EAEA,IAAMlM,EAAMkM,EAAAA,QAAAA,WAAZ,MAEAlM,EAAAA,MAAAA,EAAAA,GAEAA,EAAAA,UAAgB/D,EAAhB+D,WACAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GACAA,EAAAA,UAAcuL,EAAdvL,KAA2BuL,EAA3BvL,KAEAyJ,EAAAA,QAAAA,GACAQ,EAAAA,SAAuB,SAAA9E,GACnBnF,EAAAA,OACAA,EAAAA,YAAAA,EAEAA,EAAAA,YACAyJ,EAActE,EAAdsE,QACAzJ,EAAAA,YAAkBuJ,EAAlBvJ,GACAA,EAAAA,UAAAA,EACAA,EAAAA,SAEAA,EAAAA,aAGJ4J,EAAAA,KAAuB,SAAAC,IACnB/J,EAAAA,EAAAA,IAAmBE,EAAK,CACpBvG,KAAM+O,eAAAA,EAAAA,IADc,IAEpB9O,MAAOmQ,EAFa,MAGpBtY,EAAGiX,eAAAA,EAA0BmB,EAAeE,EAAzCrB,KAHiB,EAIpBhX,EAAGgX,eAAAA,EAAAA,EAA8BmB,EAAeE,EAJ5B,KAKpB7U,OAAQwT,eAAAA,EAAAA,EALY,EAMpBrQ,cANoB,EAOpB8D,MAAAA,SAGT,CAAC,EAAD,4BArCHmQ,KAyDI,mBACIC,IADJ,EAEI/Q,MAAOqQ,EAFX,EAGIpQ,OAAQqQ,EAHZ,EAIIxP,MAAO,CACHd,MADG,EAEHC,OAAQqQ,MAMxBI,EAAAA,UAAAA,EAAAA,GAAAA,EAAAA,CAEIC,WAAYvN,IAAAA,OAAAA,aAFhBsN,IAKMM,GAAmCR,EAAAA,EAAAA,IAAcE,GACvDM,EAAAA,aAAAA,EAAAA,GAAAA,EAAAA,CAEIL,WAAY,oBAAOM,QAAyBA,OAAAA,kBAA+B,IAF/ED,IClHME,EAAsC,SAAApW,GAAK,OAC7C,uBACK,gBAAGkF,EAAH,QAAUC,EAAV,gBACG,cAA2BD,MAA3B,EAAyCC,OAAQA,GADpD,S,sBCbT,IAAIkR,EAAY,EAAQ,OACpBC,EAAc,EAAQ,OAa1BC,EAAOC,QAJP,SAAsBC,GACpB,OAAOH,EAAYD,EAAUI,M,kBCV/B,IAAIC,EAAcvc,KAAKwc,MACnBC,EAAezc,KAAKiQ,OAexBmM,EAAOC,QAJP,SAAoBK,EAAOC,GACzB,OAAOD,EAAQH,EAAYE,KAAkBE,EAAQD,EAAQ,M,sBCd/D,IAAIP,EAAc,EAAQ,OACtBzV,EAAS,EAAQ,OAarB0V,EAAOC,QAJP,SAAqBO,GACnB,OAAOT,EAAYzV,EAAOkW,M,sBCX5B,IAAIC,EAAW,EAAQ,OAkBvBT,EAAOC,QANP,SAAoBS,EAAQjX,GAC1B,OAAOgX,EAAShX,GAAO,SAASC,GAC9B,OAAOgX,EAAOhX,Q,sBCdlB,IAAIiX,EAAa,EAAQ,OA2BzBX,EAAOC,QAjBP,SAAqBC,EAAOjL,GAC1B,IAAIsD,GAAS,EACTlQ,EAAS6X,EAAM7X,OACfuY,EAAYvY,EAAS,EAGzB,IADA4M,OAAgBrI,IAATqI,EAAqB5M,EAAS4M,IAC5BsD,EAAQtD,GAAM,CACrB,IAAI4L,EAAOF,EAAWpI,EAAOqI,GACzB5V,EAAQkV,EAAMW,GAElBX,EAAMW,GAAQX,EAAM3H,GACpB2H,EAAM3H,GAASvN,EAGjB,OADAkV,EAAM7X,OAAS4M,EACRiL,I,sBCxBT,IAAIS,EAAa,EAAQ,OACrBG,EAAiB,EAAQ,OACzBC,EAAW,EAAQ,OAGnBC,EAAiBC,WAGjBC,EAAYtd,KAAK+G,IACjB0V,EAAezc,KAAKiQ,OAwExBmM,EAAOC,QAvCP,SAAgBK,EAAOC,EAAOY,GA2B5B,GA1BIA,GAA+B,kBAAZA,GAAyBL,EAAeR,EAAOC,EAAOY,KAC3EZ,EAAQY,OAAWvU,QAEJA,IAAbuU,IACkB,kBAATZ,GACTY,EAAWZ,EACXA,OAAQ3T,GAEe,kBAAT0T,IACda,EAAWb,EACXA,OAAQ1T,SAGEA,IAAV0T,QAAiC1T,IAAV2T,GACzBD,EAAQ,EACRC,EAAQ,IAGRD,EAAQS,EAAST,QACH1T,IAAV2T,GACFA,EAAQD,EACRA,EAAQ,GAERC,EAAQQ,EAASR,IAGjBD,EAAQC,EAAO,CACjB,IAAIa,EAAOd,EACXA,EAAQC,EACRA,EAAQa,EAEV,GAAID,GAAYb,EAAQ,GAAKC,EAAQ,EAAG,CACtC,IAAIM,EAAOR,IACX,OAAOa,EAAUZ,EAASO,GAAQN,EAAQD,EAAQU,EAAe,QAAUH,EAAO,IAAIxY,OAAS,KAAOkY,GAExG,OAAOI,EAAWL,EAAOC,K,sBC9E3B,IAAIc,EAAe,EAAQ,OACvBC,EAAc,EAAQ,OACtBxS,EAAU,EAAQ,OAsBtBkR,EAAOC,QALP,SAAiBO,GAEf,OADW1R,EAAQ0R,GAAca,EAAeC,GACpCd,K,sBCrBd,IAAIe,EAAa,EAAQ,OACrBpV,EAAO,EAAQ,OAgCnB6T,EAAOC,QAJP,SAAgBS,GACd,OAAiB,MAAVA,EAAiB,GAAKa,EAAWb,EAAQvU,EAAKuU","sources":["webpack://nivo-website/../node_modules/d3-path/src/path.js","webpack://nivo-website/../node_modules/d3-shape/src/constant.js","webpack://nivo-website/../node_modules/d3-shape/src/line.js","webpack://nivo-website/../node_modules/d3-shape/src/point.js","webpack://nivo-website/../node_modules/d3-time/src/day.js","webpack://nivo-website/./src/data/components/parallel-coordinates/mapper.ts","webpack://nivo-website/./src/data/components/parallel-coordinates/props.ts","webpack://nivo-website/./src/data/components/parallel-coordinates/variables.ts","webpack://nivo-website/./src/lib/settings.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/color.ts","webpack://nivo-website/../src/sets/countryCodes.ts","webpack://nivo-website/../src/sets/names.ts","webpack://nivo-website/../src/sets/programmingLanguages.ts","webpack://nivo-website/../src/bullet.ts","webpack://nivo-website/../src/chord.ts","webpack://nivo-website/../src/network.ts","webpack://nivo-website/../src/parallelCoordinates.ts","webpack://nivo-website/../src/sankey.ts","webpack://nivo-website/../src/swarmplot.ts","webpack://nivo-website/../src/xySeries.ts","webpack://nivo-website/../src/index.ts","webpack://nivo-website/../src/props.js","webpack://nivo-website/../src/hooks.js","webpack://nivo-website/../src/ParallelCoordinatesLineTooltip.js","webpack://nivo-website/../src/ParallelCoordinatesLine.js","webpack://nivo-website/../src/ParallelCoordinates.js","webpack://nivo-website/../src/ResponsiveParallelCoordinates.js","webpack://nivo-website/../src/ParallelCoordinatesCanvas.js","webpack://nivo-website/../src/ResponsiveParallelCoordinatesCanvas.js","webpack://nivo-website/../node_modules/lodash/_arrayShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/_baseShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseValues.js","webpack://nivo-website/../node_modules/lodash/_shuffleSelf.js","webpack://nivo-website/../node_modules/lodash/random.js","webpack://nivo-website/../node_modules/lodash/shuffle.js","webpack://nivo-website/../node_modules/lodash/values.js"],"sourcesContent":["var pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path();\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function moveTo(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function lineTo(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function quadraticCurveTo(x1, y1, x, y) {\n    this._ += \"Q\" + +x1 + \",\" + +y1 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + +x1 + \",\" + +y1 + \",\" + +x2 + \",\" + +y2 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function arcTo(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.\n\n    if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x1,y1).\n\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    } // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.\n\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + +(y01 * x20 > x01 * y20) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function arc(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.\n\n    if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x0,y0).\n\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    } // Is this arc empty? We’re done.\n\n\n    if (!r) return; // Does the angle go the wrong way? Flip the direction.\n\n    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.\n\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    } // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + +(da >= pi) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function rect(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + +w + \"v\" + +h + \"h\" + -w + \"Z\";\n  },\n  toString: function toString() {\n    return this._;\n  }\n};\nexport default path;","export default function (x) {\n  return function constant() {\n    return x;\n  };\n}","import { path } from \"d3-path\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport { x as pointX, y as pointY } from \"./point.js\";\nexport default function () {\n  var x = pointX,\n      y = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function line(data) {\n    var i,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer;\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();else output.lineEnd();\n      }\n\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  line.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), line) : x;\n  };\n\n  line.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), line) : y;\n  };\n\n  line.defined = function (_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n  };\n\n  line.curve = function (_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function (_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}","export function x(p) {\n  return p[0];\n}\nexport function y(p) {\n  return p[1];\n}","import interval from \"./interval.js\";\nimport { durationDay, durationMinute } from \"./duration.js\";\nvar day = interval(function (date) {\n  date.setHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setDate(date.getDate() + step);\n}, function (start, end) {\n  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n}, function (date) {\n  return date.getDate() - 1;\n});\nexport default day;\nexport var days = day.range;","import { settingsMapper } from '../../../lib/settings'\n\nexport default settingsMapper({})\n","// @ts-ignore\nimport { lineCurvePropKeys } from '@nivo/core'\n// @ts-ignore\nimport { commonDefaultProps as defaults } from '@nivo/parallel-coordinates'\nimport { themeProperty, motionProperties, groupProperties } from '../../../lib/componentProperties'\nimport { chartDimensions, ordinalColors } from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg', 'canvas']\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Chart data.',\n        type: 'Array<object | Array>',\n        required: true,\n    },\n    {\n        key: 'variables',\n        type: 'object[]',\n        flavors: allFlavors,\n        help: 'Variables configuration.',\n        description: `\n            Variables configuration, define accessor (\\`key\\`)\n            and variable type. Type must be one of\n            \\`linear\\` or \\`point\\`, \\`linear\\`\n            variables are suitable for continuous numerical\n            data such as age or cost while\n            \\`point\\` variables are suitable for\n            discrete values such as gender.\n        `,\n        group: 'Variables',\n        required: true,\n        control: {\n            type: 'array',\n            shouldCreate: false,\n            shouldRemove: false,\n            getItemTitle: (_index: number, values: any) => `${values.key} (${values.type})`,\n            props: [\n                {\n                    key: 'key',\n                    help: 'Variable key, used to access to corresponding datum value.',\n                    flavors: allFlavors,\n                    type: 'string',\n                    required: true,\n                    control: {\n                        type: 'text',\n                        disabled: true,\n                    },\n                },\n                {\n                    key: 'type',\n                    help: `Variable type, must be one of: 'linear', 'point'.`,\n                    flavors: allFlavors,\n                    type: `'linear' | 'point'`,\n                    required: true,\n                    control: {\n                        type: 'text',\n                        disabled: true,\n                    },\n                },\n                {\n                    key: 'min',\n                    help: 'Min value of linear scale.',\n                    flavors: allFlavors,\n                    type: `number | 'auto'`,\n                    required: false,\n                    when: ({ type }) => type === 'linear',\n                    control: {\n                        type: 'switchableRange',\n                        disabledValue: 'auto',\n                        defaultValue: 0,\n                        min: -100,\n                        max: 100,\n                    },\n                },\n                {\n                    key: 'max',\n                    help: 'Max value of linear scale.',\n                    flavors: allFlavors,\n                    type: `number | 'auto'`,\n                    required: false,\n                    when: ({ type }) => type === 'linear',\n                    control: {\n                        type: 'switchableRange',\n                        disabledValue: 'auto',\n                        defaultValue: 1000,\n                        min: -100,\n                        max: 100,\n                    },\n                },\n                // {\n                //     key: 'padding',\n                //     help: 'Outer padding (0~1).',\n                //     type: `number`,\n                //     controlType: 'range',\n                //     controlOptions: {\n                //         when: ({ type }) => type === 'point',\n                //         min: 0,\n                //         max: 1,\n                //         step: 0.01,\n                //     },\n                // },\n            ],\n        },\n    },\n    {\n        key: 'layout',\n        help: `Chart layout.`,\n        flavors: allFlavors,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.layout,\n        group: 'Base',\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'horizontal', value: 'horizontal' },\n                { label: 'vertical', value: 'vertical' },\n            ],\n        },\n    },\n    {\n        key: 'curve',\n        help: 'Curve interpolation.',\n        flavors: allFlavors,\n        description: `\n            Defines the curve factory to use for the line generator.\n        `,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.curve,\n        group: 'Base',\n        control: {\n            type: 'choices',\n            choices: lineCurvePropKeys.map((key: string) => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'axesPlan',\n        help: `Axes plan.`,\n        flavors: allFlavors,\n        type: `string`,\n        required: false,\n        defaultValue: defaults.axesPlan,\n        group: 'Base',\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'foreground', value: 'foreground' },\n                { label: 'background', value: 'background' },\n            ],\n        },\n    },\n    {\n        key: 'axesTicksPosition',\n        help: `Axes ticks position.`,\n        flavors: allFlavors,\n        type: `string`,\n        required: false,\n        defaultValue: defaults.axesTicksPosition,\n        group: 'Base',\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'before', value: 'before' },\n                { label: 'after', value: 'after' },\n            ],\n        },\n    },\n    ...chartDimensions(allFlavors),\n    themeProperty(['svg', 'canvas']),\n    ordinalColors({\n        flavors: allFlavors,\n        defaultValue: defaults.colors,\n    }),\n    {\n        key: 'strokeWidth',\n        help: 'Lines stroke width.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.strokeWidth,\n        control: { type: 'lineWidth' },\n        group: 'Style',\n    },\n    {\n        key: 'lineOpacity',\n        help: 'Lines opacity.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.lineOpacity,\n        control: { type: 'opacity' },\n        group: 'Style',\n    },\n    ...motionProperties(['svg'], defaults, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","export default [\n    {\n        key: 'temp',\n        type: 'linear',\n        min: 'auto',\n        max: 'auto',\n        ticksPosition: 'before',\n        legend: 'temperature',\n        legendPosition: 'start',\n        legendOffset: 20,\n    },\n    {\n        key: 'cost',\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n        ticksPosition: 'before',\n        legend: 'cost',\n        legendPosition: 'start',\n        legendOffset: 20,\n    },\n    {\n        key: 'color',\n        type: 'point',\n        padding: 1,\n        values: ['red', 'yellow', 'green'],\n        legend: 'color',\n        legendPosition: 'start',\n        legendOffset: -20,\n    },\n    {\n        key: 'target',\n        type: 'point',\n        padding: 0,\n        values: ['A', 'B', 'C', 'D', 'E'],\n        legend: 'target',\n        legendPosition: 'start',\n        legendOffset: -20,\n    },\n    {\n        key: 'volume',\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n        legend: 'volume',\n        legendPosition: 'start',\n        legendOffset: -20,\n    },\n]\n","import omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\nimport { AxisProps, CanvasAxisProps } from '@nivo/axes'\n\nexport const settingsMapper =\n    (mapping: any, { exclude = [] }: { exclude?: string[] } = {}) =>\n    (settings: any, options: any = {}) => {\n        const overrides: any = {}\n\n        Object.keys(settings).forEach(key => {\n            if (mapping[key]) {\n                overrides[key] = mapping[key](settings[key], settings, options)\n            }\n        })\n\n        return {\n            ...omit(settings, exclude),\n            ...overrides,\n        }\n    }\n\nexport type AxisWithToggle<Axis extends AxisProps | CanvasAxisProps> = NonNullable<Axis> & {\n    enable: boolean\n}\n\nexport const mapAxis = (type: 'top' | 'right' | 'bottom' | 'left') => (value: any, settings: any) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }: { format: string; enabled: boolean }) =>\n    enabled ? format : undefined\n","import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProp, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProp<X> | null\n        right?: CanvasAxisProp<Y> | null\n        bottom?: CanvasAxisProp<X> | null\n        left?: CanvasAxisProp<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProp<X> | undefined\n            : CanvasAxisProp<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n","export const randColor = () => `hsl(${Math.round(Math.random() * 360)}, 70%, 50%)`\n","export const countryCodes = [\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AS',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CC',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CU',\n    'CV',\n    'CW',\n    'CX',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FM',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HM',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IR',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KP',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MH',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MP',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NF',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PW',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SY',\n    'SZ',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'UM',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VI',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n]\n","export const names = [\n    'John',\n    'Raoul',\n    'Jane',\n    'Marcel',\n    'Ibrahim',\n    'Junko',\n    'Lyu',\n    'André',\n    'Maki',\n    'Véronique',\n    'Thibeau',\n    'Josiane',\n    'Raphaël',\n    'Mathéo',\n    'Margot',\n    'Hugo',\n    'Christian',\n    'Louis',\n    'Ella',\n    'Alton',\n    'Jimmy',\n    'Guillaume',\n    'Sébastien',\n    'Alfred',\n    'Bon',\n    'Solange',\n    'Kendrick',\n    'Jared',\n    'Satoko',\n    'Tomoko',\n    'Line',\n    'Delphine',\n    'Leonard',\n    'Alphonse',\n    'Lisa',\n    'Bart',\n    'Benjamin',\n    'Homer',\n    'Jack',\n]\n","export const programmingLanguages = [\n    'php',\n    'make',\n    'javascript',\n    'go',\n    'erlang',\n    'elixir',\n    'lisp',\n    'haskell',\n    'python',\n    'ruby',\n    'hack',\n    'scala',\n    'java',\n    'rust',\n    'c',\n    'css',\n    'sass',\n    'stylus',\n]\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\ntype Options = Partial<{\n    float: boolean\n    markerCount: number\n    measureCount: number\n    rangeCount: number\n    subtitle: string\n    title: string\n}>\n\nexport const generateBulletData = (\n    id: string,\n    max: number,\n    {\n        title,\n        subtitle,\n        rangeCount = 5,\n        measureCount = 1,\n        markerCount = 1,\n        float = false,\n    }: Options = {}\n) => {\n    const ranges = range(rangeCount - 1).reduce(\n        acc => {\n            const remaining = max - acc[0]\n            return [random(remaining, float), ...acc]\n        },\n        [max]\n    )\n\n    const measures = range(measureCount).reduce<number[]>(acc => {\n        if (acc.length === 0) return [random(max, float)]\n        return [random(acc[0], float), ...acc]\n    }, [])\n\n    const markers = range(markerCount).map(() => max * 0.6 + random(max * 0.4))\n\n    return {\n        id,\n        title,\n        subtitle,\n        ranges,\n        measures,\n        markers,\n    }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport { names } from './sets'\n\nexport const generateChordData = ({\n    keys = names,\n    size = 7,\n    minValue = 0,\n    maxValue = 2000,\n} = {}) => {\n    const maxSize = Math.min(keys.length, size)\n    const selectedKeys = keys.slice(0, maxSize)\n\n    const matrix = range(maxSize).map(() =>\n        range(maxSize).map(() => {\n            if (Math.random() < 0.66) return random(minValue, maxValue / 4)\n            return random(minValue, maxValue)\n        })\n    )\n\n    return { matrix, keys: selectedKeys }\n}\n","import random from 'lodash/random'\n\ntype Link = {\n    source: string\n    target: string\n    distance: number\n}\n\ntype ExtraNode = {\n    id: string\n    height: number\n    color: string\n    size: number\n}\n\nexport const generateNetworkData = ({\n    rootSize = 32,\n    midSize = 24,\n    leafSize = 12,\n    minMidNodes = 5,\n    maxMidNodes = 11,\n    minLeaves = 3,\n    maxLeaves = 9,\n}: {\n    rootSize?: number\n    midSize?: number\n    leafSize?: number\n    minMidNodes?: number\n    maxMidNodes?: number\n    minLeaves?: number\n    maxLeaves?: number\n} = {}) => {\n    const rootNode = {\n        id: 'Node 0',\n        height: 2,\n        size: rootSize,\n        color: 'rgb(244, 117, 96)',\n    }\n    let nodes = Array.from({ length: random(minMidNodes, maxMidNodes) }, (_, k) => ({\n        id: `Node ${k + 1}`,\n        height: 1,\n        size: midSize,\n        color: 'rgb(97, 205, 187)',\n    }))\n\n    const links: Link[] = []\n    const extraNodes: ExtraNode[] = []\n    nodes.forEach(source => {\n        links.push({\n            source: 'Node 0',\n            target: source.id,\n            distance: 80,\n        })\n        nodes.forEach(target => {\n            if (Math.random() < 0.04) {\n                links.push({\n                    source: source.id,\n                    target: target.id,\n                    distance: 80,\n                })\n            }\n        })\n        Array.from({ length: random(minLeaves, maxLeaves) }, (_, k) => {\n            extraNodes.push({\n                id: `${source.id}.${k}`,\n                height: 0,\n                size: leafSize,\n                color: 'rgb(232, 193, 160)',\n            })\n            links.push({\n                source: source.id,\n                target: `${source.id}.${k}`,\n                distance: 50,\n            })\n\n            return null\n        })\n    })\n\n    nodes.push(rootNode)\n    nodes = nodes.concat(extraNodes)\n\n    return { nodes, links }\n}\n","import random from 'lodash/random'\nimport range from 'lodash/range'\nimport shuffle from 'lodash/shuffle'\n\ntype Options = Partial<{\n    size: number\n    keys: Array<{\n        key: string\n        random?: [number, number]\n        shuffle?: string[]\n    }>\n}>\n\nexport const generateParallelCoordinatesData = ({\n    size = 26,\n    keys = [\n        { key: 'temp', random: [-10, 40] },\n        { key: 'cost', random: [200, 400000] },\n        { key: 'color', shuffle: ['red', 'yellow', 'green'] },\n        { key: 'target', shuffle: ['A', 'B', 'C', 'D', 'E'] },\n        { key: 'volume', random: [0.2, 7.6] },\n    ],\n}: Options = {}) => {\n    const datumGenerator = () =>\n        keys.reduce((acc, key) => {\n            let value\n            if (key.random !== undefined) {\n                value = random(...key.random)\n            } else if (key.shuffle !== undefined) {\n                value = shuffle(key.shuffle)[0]\n            }\n\n            return { ...acc, [key.key]: value }\n        }, {})\n\n    return range(size).map(datumGenerator)\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { randColor } from './color'\nimport { names } from './sets'\n\ntype Link = {\n    source: string\n    target: string\n    value: number\n}\n\nconst availableNodes = names.map(name => ({ id: name }))\n\nconst getNodeTargets = (id: string, links: Link[], currentPath?: string[]): string[] => {\n    const targets = links\n        .filter(({ source }) => source === id)\n        .map(({ target }) => {\n            if (target === id) {\n                throw new Error(\n                    `[sankey] a node cannot be linked on itself:\\n  link: ${id} —> ${id}`\n                )\n            }\n            if (currentPath?.includes(target)) {\n                throw new Error(\n                    `[sankey] found cyclic dependency:\\n  link: ${currentPath.join(\n                        ' —> '\n                    )} —> ${target}`\n                )\n            }\n            return target\n        })\n\n    return targets.reduce(\n        (acc, targetId) =>\n            acc.concat(\n                getNodeTargets(\n                    targetId,\n                    links,\n                    currentPath ? [...currentPath, targetId] : [id, targetId]\n                )\n            ),\n        targets\n    )\n}\n\nconst getNodesTargets = (links: Link[]) =>\n    links.reduce<Record<string, string[]>>((targetsById, link) => {\n        if (!targetsById[link.source]) {\n            targetsById[link.source] = getNodeTargets(link.source, links)\n        }\n\n        return targetsById\n    }, {})\n\nexport const generateSankeyData = ({\n    nodeCount,\n    maxIterations = 3,\n}: {\n    nodeCount?: number\n    maxIterations?: number\n} = {}) => {\n    const nodes = availableNodes.slice(0, nodeCount).map(node =>\n        Object.assign({}, node, {\n            nodeColor: randColor(),\n        })\n    )\n\n    const links: Link[] = []\n    shuffle(nodes).forEach(({ id }) => {\n        range(random(1, maxIterations)).forEach(() => {\n            const targetsById = getNodesTargets(links)\n            const randId = shuffle(nodes.filter(n => n.id !== id).map(n => n.id))[0]\n            if (\n                (!targetsById[randId] || !targetsById[randId].includes(id)) &&\n                (!targetsById[id] || !targetsById[id].includes(randId))\n            ) {\n                links.push({\n                    source: id,\n                    target: randId,\n                    value: random(5, 200),\n                })\n            }\n        })\n    })\n\n    return { nodes, links }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\n\ntype SwarmPlotDatum = {\n    id: string\n    categories?: number[]\n    group: string\n    price: number\n    volume: number\n}\n\nconst randomPrice = () => random(0, 500)\nconst randomVolume = () => random(4, 20)\nconst randomCategory = () => random(3, 17)\n\nexport const generateSwarmPlotData = (\n    groups: string[],\n    { min = 60, max = 100, categoryCount = 0 }\n) => ({\n    groups,\n    data: groups.reduce<SwarmPlotDatum[]>(\n        (acc, group, groupIndex) => [\n            ...acc,\n            ...range(random(min, max))\n                .map(() => randomPrice())\n                .map((price, index) => {\n                    const datum: SwarmPlotDatum = {\n                        id: `${groupIndex}.${index}`,\n                        group,\n                        price,\n                        volume: randomVolume(),\n                    }\n\n                    if (categoryCount > 0) {\n                        datum.categories = range(categoryCount).map(randomCategory)\n                    }\n\n                    return datum\n                }),\n        ],\n        []\n    ),\n})\n\nexport const randomizeSwarmPlotData = (previousData: ReturnType<typeof generateSwarmPlotData>) => ({\n    groups: previousData.groups,\n    data: previousData.data.map(d => {\n        const datum = {\n            ...d,\n            group: shuffle(previousData.groups)[0],\n            price: randomPrice(),\n            volume: randomVolume(),\n        }\n\n        if (d.categories !== undefined) {\n            datum.categories = range(3).map(randomCategory)\n        }\n\n        return datum\n    }),\n})\n","interface XYRangeStaticValues {\n    values: string[] | number[]\n}\n\ninterface XYRandomNumericValues {\n    length: number\n    min: number\n    max: number\n    round?: boolean\n}\n\ntype XYRangeValues = XYRangeStaticValues | XYRandomNumericValues\n\nconst getValueGenerator = (config: XYRangeValues) => {\n    let generator: (index: number) => string | number\n\n    if ('values' in config) {\n        generator = (index: number) => config.values[index]\n    } else {\n        generator = () => {\n            let value = config.min + Math.random() * (config.max - config.min)\n            if (config.round) {\n                value = Math.round(value)\n            }\n\n            return value\n        }\n    }\n\n    return generator\n}\n\nexport const generateXYSeries = ({\n    serieIds,\n    x,\n    y,\n}: {\n    serieIds: string[]\n    x: XYRangeValues\n    y: XYRangeValues\n}) => {\n    const xLength = 'length' in x ? x.length : x.values.length\n\n    const getX = getValueGenerator(x)\n    const getY = getValueGenerator(y)\n\n    return serieIds.map(serieId => {\n        return {\n            id: serieId,\n            data: Array.from({ length: xLength }).map((_, index) => {\n                return {\n                    x: getX(index),\n                    y: getY(index),\n                }\n            }),\n        }\n    })\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { timeDays } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport * as color from './color'\nimport * as sets from './sets'\n\nexport { sets }\nexport const randColor = color.randColor\n\nexport const generateProgrammingLanguageStats = (shouldShuffle = true, limit = -1) => {\n    let langs = sets.programmingLanguages\n    if (shouldShuffle) {\n        langs = shuffle(langs)\n    }\n    if (limit < 1) {\n        limit = 1 + Math.round(Math.random() * (sets.programmingLanguages.length - 1))\n    }\n\n    return langs.slice(0, limit).map(language => ({\n        label: language,\n        value: Math.round(Math.random() * 600),\n        color: randColor(),\n    }))\n}\n\nexport const uniqRand = <T>(generator: (...args: unknown[]) => T) => {\n    const used: T[] = []\n\n    return (...args: unknown[]) => {\n        let value\n        do {\n            value = generator(...args)\n        } while (used.includes(value))\n\n        used.push(value)\n\n        return value\n    }\n}\n\nexport const randCountryCode = () => shuffle(sets.countryCodes)[0]\n\ntype DrinkDatum = {\n    id: string\n    color: string\n    data: Array<{\n        color: string\n        x: string\n        y: number\n    }>\n}\n\nexport const generateDrinkStats = (xSize = 16) => {\n    const rand = () => random(0, 60)\n    const types = ['whisky', 'rhum', 'gin', 'vodka', 'cognac']\n    const country = uniqRand(randCountryCode)\n\n    const data: DrinkDatum[] = types.map(id => ({\n        id,\n        color: randColor(),\n        data: [],\n    }))\n\n    range(xSize).forEach(() => {\n        const x = country()\n        types.forEach(id => {\n            data.find(d => d.id === id)?.data.push({\n                color: randColor(),\n                x,\n                y: rand(),\n            })\n        })\n    })\n\n    return data\n}\n\nexport const generateSerie = (xSize = 20) => {\n    const max = 100 + Math.random() * (Math.random() * 600)\n\n    return range(xSize).map(() => Math.round(Math.random() * max))\n}\n\nexport const generateSeries = (ids: string[], xKeys: string[]) =>\n    ids.map(id => ({\n        id,\n        color: randColor(),\n        data: xKeys.map(x => ({ x, y: Math.round(Math.random() * 300) })),\n    }))\n\nexport const generateStackData = (size = 3) => {\n    const length = 16\n    return range(size).map(() => generateSerie(length).map((v, i) => ({ x: i, y: v })))\n}\n\nexport const generateCountriesPopulation = (size: number) => {\n    const countryCode = uniqRand(randCountryCode)\n\n    return range(size).map(() => ({\n        country: countryCode(),\n        population: 200 + Math.round(Math.random() * Math.random() * 1000000),\n    }))\n}\n\nexport const generateOrderedDayCounts = (from: Date, to: Date) => {\n    const days = timeDays(from, to)\n    const dayFormat = timeFormat('%Y-%m-%d')\n\n    return days.map(day => {\n        return {\n            value: Math.round(Math.random() * 400),\n            day: dayFormat(day),\n        }\n    })\n}\n\nexport const generateDayCounts = (from: Date, to: Date, maxSize = 0.9) => {\n    const days = generateOrderedDayCounts(from, to)\n\n    const size =\n        Math.round(days.length * (maxSize * 0.4)) +\n        Math.round(Math.random() * (days.length * (maxSize * 0.6)))\n\n    return shuffle(days).slice(0, size)\n}\n\nexport const generateCountriesData = (\n    keys: string[],\n    { size = 12, min = 0, max = 200, withColors = true } = {}\n) =>\n    sets.countryCodes.slice(0, size).map(country => {\n        const d: Record<string, unknown> = {\n            country,\n        }\n        keys.forEach(key => {\n            d[key] = random(min, max)\n            if (withColors === true) {\n                d[`${key}Color`] = randColor()\n            }\n        })\n\n        return d\n    })\n\nconst libTreeItems = [\n    [\n        'viz',\n        [\n            ['stack', [['cchart'], ['xAxis'], ['yAxis'], ['layers']]],\n            [\n                'ppie',\n                [\n                    ['chart', [['pie', [['outline'], ['slices'], ['bbox']]], ['donut'], ['gauge']]],\n                    ['legends'],\n                ],\n            ],\n        ],\n    ],\n    ['colors', [['rgb'], ['hsl']]],\n    [\n        'utils',\n        [['randomize'], ['resetClock'], ['noop'], ['tick'], ['forceGC'], ['stackTrace'], ['dbg']],\n    ],\n    ['generators', [['address'], ['city'], ['animal'], ['movie'], ['user']]],\n    [\n        'set',\n        [\n            ['clone'],\n            ['intersect'],\n            ['merge'],\n            ['reverse'],\n            ['toArray'],\n            ['toObject'],\n            ['fromCSV'],\n            ['slice'],\n            ['append'],\n            ['prepend'],\n            ['shuffle'],\n            ['pick'],\n            ['plouc'],\n        ],\n    ],\n    [\n        'text',\n        [\n            ['trim'],\n            ['slugify'],\n            ['snakeCase'],\n            ['camelCase'],\n            ['repeat'],\n            ['padLeft'],\n            ['padRight'],\n            ['sanitize'],\n            ['ploucify'],\n        ],\n    ],\n    [\n        'misc',\n        [\n            ['greetings', [['hey'], ['HOWDY'], ['aloha'], ['AHOY']]],\n            ['other'],\n            [\n                'path',\n                [\n                    ['pathA'],\n                    ['pathB', [['pathB1'], ['pathB2'], ['pathB3'], ['pathB4']]],\n                    [\n                        'pathC',\n                        [\n                            ['pathC1'],\n                            ['pathC2'],\n                            ['pathC3'],\n                            ['pathC4'],\n                            ['pathC5'],\n                            ['pathC6'],\n                            ['pathC7'],\n                            ['pathC8'],\n                            ['pathC9'],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n]\n\ninterface LibTreeDatum {\n    name: string\n    loc?: number\n    color: string\n    children?: LibTreeDatum[]\n}\n\nexport const generateLibTree = (\n    name = 'nivo',\n    limit?: number | null,\n    children = libTreeItems\n): LibTreeDatum => {\n    limit = limit || children.length\n    if (limit > children.length) {\n        limit = children.length\n    }\n\n    const tree: LibTreeDatum = {\n        name,\n        color: randColor(),\n    }\n    if (children?.length > 0) {\n        tree.children = range(limit).map((_, i) => {\n            const leaf = children[i]\n\n            // full path `${name}.${leaf[0]}`\n            return generateLibTree(leaf[0] as string, null, (leaf[1] ?? []) as any)\n        })\n    } else {\n        tree.loc = Math.round(Math.random() * 200000)\n    }\n\n    return tree\n}\n\nconst wines = ['chardonay', 'carmenere', 'syrah']\nconst wineTastes = ['fruity', 'bitter', 'heavy', 'strong', 'sunny']\n\nexport const generateWinesTastes = ({ randMin = 20, randMax = 120 } = {}) => {\n    const data = wineTastes.map(taste => {\n        const d: Record<string, unknown> = { taste }\n        wines.forEach(wine => {\n            d[wine] = random(randMin, randMax)\n        })\n\n        return d\n    })\n\n    return { data, keys: wines }\n}\n\nexport * from './bullet'\nexport * from './chord'\nexport * from './network'\nexport * from './parallelCoordinates'\nexport * from './sankey'\nexport * from './swarmplot'\nexport * from './xySeries'\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { lineCurvePropType } from '@nivo/core'\nimport { ordinalColorsPropType } from '@nivo/colors'\n\nconst commonVariablePropTypes = {\n    key: PropTypes.string.isRequired,\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n}\n\nexport const commonPropTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    variables: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.shape({\n                ...commonVariablePropTypes,\n                key: PropTypes.string.isRequired,\n                type: PropTypes.oneOf(['point']).isRequired,\n                padding: PropTypes.number,\n                values: PropTypes.arrayOf(\n                    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n                ),\n                tickValues: PropTypes.arrayOf(\n                    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n                ),\n            }),\n            PropTypes.shape({\n                ...commonVariablePropTypes,\n                type: PropTypes.oneOf(['linear']).isRequired,\n                min: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['auto'])]),\n                max: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['auto'])]),\n                tickValues: PropTypes.oneOfType([\n                    PropTypes.number,\n                    PropTypes.arrayOf(PropTypes.number),\n                ]),\n            }),\n        ])\n    ).isRequired,\n    layout: PropTypes.oneOf(['horizontal', 'vertical']).isRequired,\n    curve: lineCurvePropType.isRequired,\n    strokeWidth: PropTypes.number.isRequired,\n    lineOpacity: PropTypes.number.isRequired,\n    axesPlan: PropTypes.oneOf(['foreground', 'background']).isRequired,\n    axesTicksPosition: PropTypes.oneOf(['before', 'after']).isRequired,\n    colors: ordinalColorsPropType.isRequired,\n}\n\nexport const svgPropTypes = {\n    ...commonPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const commonDefaultProps = {\n    layout: 'horizontal',\n    curve: 'linear',\n    colors: { scheme: 'yellow_orange_red' },\n    strokeWidth: 2,\n    lineOpacity: 0.35,\n    axesPlan: 'foreground',\n    axesTicksPosition: 'after',\n    animate: true,\n    motionConfig: 'gentle',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    role: 'img',\n}\n","import { useMemo } from 'react'\nimport { line } from 'd3-shape'\nimport { scaleLinear, scalePoint } from 'd3-scale'\nimport { curveFromProp } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\n\nexport const computeParallelCoordinatesLayout = ({ width, height, data, variables, layout }) => {\n    const variablesScale = scalePoint()\n        .range(layout === 'horizontal' ? [0, width] : [height, 0])\n        .domain(variables.map(({ key }) => key))\n\n    const range = layout === 'horizontal' ? [height, 0] : [0, width]\n    const variablesWithScale = variables.map(variable => {\n        const allValues = new Set()\n        data.forEach(d => allValues.add(d[variable.key]))\n\n        let scale\n        if (variable.type === 'linear') {\n            const min =\n                variable.min !== undefined && variable.min !== 'auto'\n                    ? variable.min\n                    : Math.min(...Array.from(allValues))\n            const max =\n                variable.max !== undefined && variable.max !== 'auto'\n                    ? variable.max\n                    : Math.max(...Array.from(allValues))\n\n            scale = scaleLinear().rangeRound(range).domain([min, max])\n        }\n\n        if (variable.type === 'point') {\n            scale = scalePoint()\n                .range(range)\n                .domain(variable.values || allValues)\n\n            if (variable.padding !== undefined) {\n                scale.padding(variable.padding)\n            }\n        }\n\n        return {\n            ...variable,\n            scale,\n            values: Array.from(allValues),\n        }\n    })\n\n    const dataWithPoints = data.map((datum, index) => {\n        const points = variablesWithScale.map(variable => ({\n            x:\n                layout === 'horizontal'\n                    ? variablesScale(variable.key)\n                    : variable.scale(datum[variable.key]),\n            y:\n                layout === 'horizontal'\n                    ? variable.scale(datum[variable.key])\n                    : variablesScale(variable.key),\n        }))\n\n        return { index, ...datum, points }\n    })\n\n    return {\n        variablesScale,\n        variablesWithScale,\n        dataWithPoints,\n    }\n}\n\nexport const computeAxisDensity = (variable, data) => {\n    let kernels\n    if (variable.type === 'point') {\n        kernels = data.reduce((acc, datum) => {\n            const value = datum[variable.key]\n            let kernel = acc.find(k => k.id === value)\n            if (kernel === undefined) {\n                kernel = { id: value, count: 0 }\n                acc.push(kernel)\n            }\n            kernel.count++\n\n            return acc\n        }, [])\n        kernels = variable.scale\n            .domain()\n            .map(d => kernels.find(k => k.id === d))\n            .filter(k => k !== undefined)\n    } else if (variable.type === 'linear') {\n        kernels = variable.scale.ticks(5).map((id, index, ticks) => {\n            if (index === 0) {\n                return {\n                    id,\n                    count: variable.values.filter(v => v <= id).length,\n                }\n            }\n\n            return {\n                id,\n                count: variable.values.filter(v => v > ticks[index - 1] && v <= id).length,\n            }\n        })\n    }\n\n    if (kernels !== undefined) {\n        const scale = scaleLinear()\n            .rangeRound([0, 60])\n            .domain([0, Math.max(...kernels.map(k => k.count))])\n\n        return kernels.map(k => ({\n            id: k.id,\n            position: variable.scale(k.id),\n            size: scale(k.count),\n        }))\n    }\n\n    return []\n}\n\nexport const useParallelCoordinates = ({\n    width,\n    height,\n    data,\n    variables,\n    layout,\n    colors,\n    curve,\n}) => {\n    const getLineColor = useOrdinalColorScale(colors, 'index')\n\n    const lineGenerator = useMemo(\n        () =>\n            line()\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n\n    const { variablesScale, variablesWithScale, dataWithPoints } = useMemo(\n        () =>\n            computeParallelCoordinatesLayout({\n                width,\n                height,\n                data,\n                variables,\n                layout,\n            }),\n        [width, height, data, variables, layout]\n    )\n\n    return {\n        variablesScale,\n        variablesWithScale,\n        dataWithPoints,\n        getLineColor,\n        lineGenerator,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { TableTooltip } from '@nivo/tooltip'\n\nconst ParallelCoordinatesLineTooltip = ({ data, variables }) => {\n    return (\n        <TableTooltip\n            rows={variables.map(variable => [\n                variable.key,\n                <strong>{data[variable.key]}</strong>, // eslint-disable-line react/jsx-key\n            ])}\n        />\n    )\n}\n\nParallelCoordinatesLineTooltip.propTypes = {\n    data: PropTypes.object.isRequired,\n    variables: PropTypes.arrayOf(\n        PropTypes.shape({\n            key: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        })\n    ).isRequired,\n}\n\nexport default memo(ParallelCoordinatesLineTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport ParallelCoordinatesLineTooltip from './ParallelCoordinatesLineTooltip'\n\nconst ParallelCoordinatesLine = ({\n    data,\n    variables,\n    lineGenerator,\n    points,\n    strokeWidth,\n    color,\n    opacity,\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseHover = useCallback(\n        event => {\n            showTooltipFromEvent(\n                <ParallelCoordinatesLineTooltip data={data} variables={variables} />,\n                event\n            )\n        },\n        [data, variables]\n    )\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(lineGenerator(points))\n    const animatedProps = useSpring({\n        color,\n        opacity,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            stroke={animatedProps.color}\n            strokeWidth={strokeWidth}\n            strokeLinecap=\"round\"\n            opacity={animatedProps.opacity}\n            fill=\"none\"\n            onMouseEnter={handleMouseHover}\n            onMouseMove={handleMouseHover}\n            onMouseLeave={hideTooltip}\n        />\n    )\n}\n\nParallelCoordinatesLine.propTypes = {\n    data: PropTypes.object.isRequired,\n    variables: PropTypes.arrayOf(\n        PropTypes.shape({\n            key: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        })\n    ).isRequired,\n    lineGenerator: PropTypes.func.isRequired,\n    points: PropTypes.arrayOf(\n        PropTypes.shape({\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired,\n        })\n    ).isRequired,\n    strokeWidth: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    opacity: PropTypes.number.isRequired,\n}\n\nexport default memo(ParallelCoordinatesLine)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { SvgWrapper, useDimensions, withContainer } from '@nivo/core'\nimport { Axis } from '@nivo/axes'\nimport { svgPropTypes, svgDefaultProps } from './props'\nimport { useParallelCoordinates } from './hooks'\nimport ParallelCoordinatesLine from './ParallelCoordinatesLine'\n\nconst ParallelCoordinates = ({\n    data,\n    variables,\n    layout,\n    width,\n    height,\n    margin: partialMargin,\n    axesPlan,\n    axesTicksPosition,\n    strokeWidth,\n    lineOpacity,\n    curve,\n    colors,\n    role,\n}) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { variablesScale, variablesWithScale, dataWithPoints, lineGenerator, getLineColor } =\n        useParallelCoordinates({\n            width: innerWidth,\n            height: innerHeight,\n            data,\n            variables,\n            layout,\n            colors,\n            curve,\n        })\n\n    const axes = variablesWithScale.map(variable => (\n        <Axis\n            key={variable.key}\n            axis={layout === 'horizontal' ? 'y' : 'x'}\n            length={layout === 'horizontal' ? innerHeight : innerWidth}\n            x={layout === 'horizontal' ? variablesScale(variable.key) : 0}\n            y={layout === 'horizontal' ? 0 : variablesScale(variable.key)}\n            scale={variable.scale}\n            ticksPosition={variable.ticksPosition || axesTicksPosition}\n            tickValues={variable.tickValues}\n            tickSize={variable.tickSize}\n            tickPadding={variable.tickPadding}\n            tickRotation={variable.tickRotation}\n            format={variable.tickFormat}\n            legend={variable.legend}\n            legendPosition={variable.legendPosition}\n            legendOffset={variable.legendOffset}\n        />\n    ))\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {axesPlan === 'background' && axes}\n            {dataWithPoints.map(datum => (\n                <ParallelCoordinatesLine\n                    key={datum.index}\n                    data={datum}\n                    variables={variables}\n                    lineGenerator={lineGenerator}\n                    points={datum.points}\n                    strokeWidth={strokeWidth}\n                    opacity={lineOpacity}\n                    color={getLineColor(datum)}\n                />\n            ))}\n            {axesPlan === 'foreground' && axes}\n        </SvgWrapper>\n    )\n}\n\nParallelCoordinates.propTypes = svgPropTypes\n\nconst WrappedParallelCoordinates = withContainer(ParallelCoordinates)\nWrappedParallelCoordinates.defaultProps = svgDefaultProps\n\nexport default WrappedParallelCoordinates\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport ParallelCoordinates from './ParallelCoordinates'\n\nconst ResponsiveParallelCoordinates = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ParallelCoordinates width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveParallelCoordinates\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { useDimensions, useTheme, withContainer } from '@nivo/core'\nimport { renderAxisToCanvas } from '@nivo/axes'\nimport { commonPropTypes, commonDefaultProps } from './props'\nimport { useParallelCoordinates } from './hooks'\n\nconst ParallelCoordinatesCanvas = ({\n    data,\n    layout,\n    variables,\n    width,\n    height,\n    margin: partialMargin,\n    curve,\n    colors,\n    lineOpacity,\n    strokeWidth,\n    axesTicksPosition,\n    pixelRatio,\n}) => {\n    const canvasEl = useRef(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { variablesScale, variablesWithScale, dataWithPoints, lineGenerator, getLineColor } =\n        useParallelCoordinates({\n            width: innerWidth,\n            height: innerHeight,\n            data,\n            variables,\n            layout,\n            colors,\n            curve,\n        })\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        lineGenerator.context(ctx)\n        dataWithPoints.forEach(datum => {\n            ctx.save()\n            ctx.globalAlpha = lineOpacity\n\n            ctx.beginPath()\n            lineGenerator(datum.points)\n            ctx.strokeStyle = getLineColor(datum)\n            ctx.lineWidth = strokeWidth\n            ctx.stroke()\n\n            ctx.restore()\n        })\n\n        variablesWithScale.map(variable => {\n            renderAxisToCanvas(ctx, {\n                axis: layout === 'horizontal' ? 'y' : 'x',\n                scale: variable.scale,\n                x: layout === 'horizontal' ? variablesScale(variable.key) : 0,\n                y: layout === 'horizontal' ? 0 : variablesScale(variable.key),\n                length: layout === 'horizontal' ? innerHeight : innerWidth,\n                ticksPosition: axesTicksPosition,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        lineGenerator,\n        getLineColor,\n        lineOpacity,\n        strokeWidth,\n        dataWithPoints,\n        variablesWithScale,\n        layout,\n        axesTicksPosition,\n        theme,\n        pixelRatio,\n    ])\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n        />\n    )\n}\n\nParallelCoordinatesCanvas.propTypes = {\n    ...commonPropTypes,\n    pixelRatio: PropTypes.number.isRequired,\n}\n\nconst WrappedParallelCoordinatesCanvas = withContainer(ParallelCoordinatesCanvas)\nWrappedParallelCoordinatesCanvas.defaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n\nexport default WrappedParallelCoordinatesCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport ParallelCoordinatesCanvas from './ParallelCoordinatesCanvas'\n\nconst ResponsiveParallelCoordinatesCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <ParallelCoordinatesCanvas width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveParallelCoordinatesCanvas\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n"],"names":["pi","Math","PI","tau","epsilon","tauEpsilon","Path","this","_x0","_y0","_x1","_y1","_","path","prototype","constructor","moveTo","x","y","closePath","lineTo","quadraticCurveTo","x1","y1","bezierCurveTo","x2","y2","arcTo","r","x0","y0","x21","y21","x01","y01","l01_2","Error","abs","x20","y20","l21_2","l20_2","l21","sqrt","l01","l","tan","acos","t01","t21","arc","a0","a1","ccw","dx","cos","dy","sin","cw","da","rect","w","h","toString","defined","context","curve","output","line","data","i","d","buffer","n","length","defined0","lineStart","lineEnd","point","arguments","p","day","date","setHours","step","setDate","getDate","start","end","getTimezoneOffset","days","range","settingsMapper","allFlavors","props","key","group","flavors","help","type","required","description","control","shouldCreate","shouldRemove","getItemTitle","_index","values","disabled","when","disabledValue","defaultValue","min","max","defaults","choices","label","value","lineCurvePropKeys","chartDimensions","themeProperty","ordinalColors","motionProperties","groups","groupProperties","ticksPosition","legend","legendPosition","legendOffset","padding","mapping","exclude","settings","options","overrides","Object","keys","forEach","omit","mapAxis","upperFirst","enable","mapFormat","format","enabled","undefined","computeCartesianTicks","axis","scale","tickValues","tickSize","tickPadding","tickRotation","engine","getScaleTicks","textProps","textPropsByEngine","position","centerScale","lineX","lineY","text","textX","textY","isRTL","document","textAlign","textBaseline","translate","ticks","getFormatter","formatter","timeFormat","Date","d3Format","computeGridLines","width","height","_values","isArray","Array","lines","AxisTick","_value","onClick","textAnchor","animatedProps","theme","useTheme","useMemo","style","opacity","cursor","event","transform","dominantBaseline","memoizedAxisTick","memo","Axis","renderTick","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","useSpring","lineX2","lineY2","config","immediate","transition","useTransition","tick","initial","textTransform","from","enter","update","leave","tickIndex","rotate","transitionProps","memoizedAxis","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","axes","top","right","bottom","left","isXAxis","GridLine","_jsx","GridLines","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","_format","ctx","Number","degreesToRadians","String","renderAxesToCanvas","renderGridLinesToCanvas","randColor","round","random","countryCodes","names","programmingLanguages","generateBulletData","id","title","subtitle","rangeCount","measureCount","markerCount","float","ranges","reduce","remaining","acc","measures","markers","map","generateChordData","size","minValue","maxValue","maxSize","selectedKeys","slice","matrix","generateNetworkData","rootSize","midSize","leafSize","minMidNodes","maxMidNodes","minLeaves","maxLeaves","rootNode","color","nodes","k","links","extraNodes","push","source","target","distance","concat","generateParallelCoordinatesData","shuffle","availableNodes","name","getNodeTargets","currentPath","targets","filter","includes","join","targetId","getNodesTargets","targetsById","link","generateSankeyData","nodeCount","maxIterations","assign","node","nodeColor","randId","randomPrice","randomVolume","randomCategory","generateSwarmPlotData","categoryCount","groupIndex","price","index","datum","volume","categories","randomizeSwarmPlotData","previousData","getValueGenerator","generator","generateXYSeries","serieIds","xLength","getX","getY","serieId","generateProgrammingLanguageStats","shouldShuffle","limit","langs","sets","language","uniqRand","used","randCountryCode","generateDrinkStats","xSize","types","country","find","generateSeries","ids","xKeys","generateDayCounts","to","timeDays","dayFormat","generateOrderedDayCounts","generateCountriesData","withColors","libTreeItems","generateLibTree","children","tree","leaf","loc","wines","wineTastes","generateWinesTastes","randMin","randMax","taste","wine","commonVariablePropTypes","commonPropTypes","variables","layout","lineCurvePropType","strokeWidth","lineOpacity","axesPlan","axesTicksPosition","colors","ordinalColorsPropType","svgPropTypes","role","commonDefaultProps","scheme","motionConfig","svgDefaultProps","useParallelCoordinates","getLineColor","useOrdinalColorScale","lineGenerator","curveFromProp","variablesScale","variablesWithScale","variable","allValues","scaleLinear","scalePoint","dataWithPoints","points","computeParallelCoordinatesLayout","ParallelCoordinatesLineTooltip","rows","isRequired","ParallelCoordinatesLine","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseHover","useCallback","animatedPath","useAnimatedPath","stroke","strokeLinecap","fill","onMouseEnter","onMouseMove","onMouseLeave","ParallelCoordinates","partialMargin","margin","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","WrappedParallelCoordinates","withContainer","ResponsiveParallelCoordinates","ParallelCoordinatesCanvas","pixelRatio","canvasEl","useRef","useEffect","ref","WrappedParallelCoordinatesCanvas","window","ResponsiveParallelCoordinatesCanvas","copyArray","shuffleSelf","module","exports","array","nativeFloor","floor","nativeRandom","lower","upper","collection","arrayMap","object","baseRandom","lastIndex","rand","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","temp","arrayShuffle","baseShuffle","baseValues"],"sourceRoot":""}