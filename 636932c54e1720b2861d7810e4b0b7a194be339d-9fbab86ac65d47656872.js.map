{"version":3,"file":"636932c54e1720b2861d7810e4b0b7a194be339d-9fbab86ac65d47656872.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-shape/src/curve/radial.js","webpack://nivo-website/../node_modules/d3-shape/src/lineRadial.js","webpack://nivo-website/../src/RadarLayer.tsx","webpack://nivo-website/../src/RadarGridLabels.tsx","webpack://nivo-website/../src/RadarGridLevels.tsx","webpack://nivo-website/../src/RadarGrid.tsx","webpack://nivo-website/../src/RadarSlice.tsx","webpack://nivo-website/../src/RadarSlices.tsx","webpack://nivo-website/../src/RadarDots.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/RadarGridLabel.tsx","webpack://nivo-website/../src/RadarSliceTooltip.tsx","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/Radar.tsx","webpack://nivo-website/../src/ResponsiveRadar.tsx"],"sourcesContent":["import curveLinear from \"./linear.js\";\nexport var curveRadialLinear = curveRadial(curveLinear);\n\nfunction Radial(curve) {\n  this._curve = curve;\n}\n\nRadial.prototype = {\n  areaStart: function areaStart() {\n    this._curve.areaStart();\n  },\n  areaEnd: function areaEnd() {\n    this._curve.areaEnd();\n  },\n  lineStart: function lineStart() {\n    this._curve.lineStart();\n  },\n  lineEnd: function lineEnd() {\n    this._curve.lineEnd();\n  },\n  point: function point(a, r) {\n    this._curve.point(r * Math.sin(a), r * -Math.cos(a));\n  }\n};\nexport default function curveRadial(curve) {\n  function radial(context) {\n    return new Radial(curve(context));\n  }\n\n  radial._curve = curve;\n  return radial;\n}","import curveRadial, { curveRadialLinear } from \"./curve/radial.js\";\nimport line from \"./line.js\";\nexport function lineRadial(l) {\n  var c = l.curve;\n  l.angle = l.x, delete l.x;\n  l.radius = l.y, delete l.y;\n\n  l.curve = function (_) {\n    return arguments.length ? c(curveRadial(_)) : c()._curve;\n  };\n\n  return l;\n}\nexport default function () {\n  return lineRadial(line().curve(curveRadialLinear));\n}","import { useMemo } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { lineRadial, CurveFactory } from 'd3-shape'\nimport { ScaleLinear } from 'd3-scale'\nimport { useMotionConfig, useTheme, useAnimatedPath } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { RadarCommonProps } from './types'\n\ninterface RadarLayerProps<D extends Record<string, unknown>> {\n    data: D[]\n    item: string\n    colorByKey: Record<string | number, string>\n    fillByKey: Record<string, string | null>\n    radiusScale: ScaleLinear<number, number>\n    angleStep: number\n    curveFactory: CurveFactory\n    borderWidth: RadarCommonProps<D>['borderWidth']\n    borderColor: RadarCommonProps<D>['borderColor']\n    fillOpacity: RadarCommonProps<D>['fillOpacity']\n    blendMode: RadarCommonProps<D>['blendMode']\n}\n\nexport const RadarLayer = <D extends Record<string, unknown>>({\n    data,\n    item: key,\n    colorByKey,\n    fillByKey,\n    radiusScale,\n    angleStep,\n    curveFactory,\n    borderWidth,\n    borderColor,\n    fillOpacity,\n    blendMode,\n}: RadarLayerProps<D>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const lineGenerator = useMemo(() => {\n        return lineRadial<number>()\n            .radius(d => radiusScale(d))\n            .angle((_, i) => i * angleStep)\n            .curve(curveFactory)\n    }, [radiusScale, angleStep, curveFactory])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(lineGenerator(data.map(d => d[key] as number)) as string)\n    const animatedProps = useSpring<{ fill: string; stroke: string }>({\n        fill: colorByKey[key],\n        stroke: getBorderColor({ key, color: colorByKey[key] }),\n        config: springConfig,\n        immediate: !animate,\n    })\n    const fill = fillByKey[key] ?? animatedProps.fill\n\n    return (\n        <animated.path\n            key={key}\n            d={animatedPath}\n            fill={fill}\n            fillOpacity={fillOpacity}\n            stroke={animatedProps.stroke}\n            strokeWidth={borderWidth}\n            style={{ mixBlendMode: blendMode }}\n        />\n    )\n}\n","import { createElement } from 'react'\nimport { useSprings } from '@react-spring/web'\nimport { useMotionConfig, positionFromAngle, radiansToDegrees } from '@nivo/core'\nimport { GridLabelComponent } from './types'\n\nconst textAnchorFromAngle = (_angle: number) => {\n    const angle = radiansToDegrees(_angle) + 90\n\n    if (angle <= 10 || angle >= 350 || (angle >= 170 && angle <= 190)) return 'middle' as const\n    if (angle > 180) return 'end' as const\n    return 'start' as const\n}\n\ninterface RadarGridLabelsProps {\n    radius: number\n    angles: number[]\n    indices: string[]\n    label: GridLabelComponent\n    labelOffset: number\n}\n\nexport const RadarGridLabels = ({\n    radius,\n    angles,\n    indices,\n    label: labelComponent,\n    labelOffset,\n}: RadarGridLabelsProps) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = indices.map((index, i) => {\n        const position = positionFromAngle(angles[i], radius + labelOffset)\n        const textAnchor = textAnchorFromAngle(angles[i])\n\n        return {\n            id: index,\n            angle: radiansToDegrees(angles[i]),\n            anchor: textAnchor,\n            ...position,\n        }\n    })\n\n    const springs = useSprings(\n        labels.length,\n        labels.map(label => ({\n            transform: `translate(${label.x}, ${label.y})`,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return createElement(labelComponent, {\n                    key: label.id,\n                    id: label.id,\n                    anchor: label.anchor,\n                    angle: label.angle,\n                    x: label.x,\n                    y: label.y,\n                    animated: animatedProps,\n                })\n            })}\n        </>\n    )\n}\n","import { memo, SVGProps, useMemo } from 'react'\nimport { lineRadial, curveLinearClosed } from 'd3-shape'\nimport { animated, useSpring, to } from '@react-spring/web'\nimport { useTheme, useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { RadarCommonProps } from './types'\n\ninterface RadarGridLevelCircularProps {\n    radius: number\n}\n\nconst RadarGridLevelCircular = memo(({ radius }: RadarGridLevelCircularProps) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        radius,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            fill=\"none\"\n            r={to(animatedProps.radius, value => Math.max(value, 0))}\n            {...(theme.grid.line as Omit<SVGProps<SVGCircleElement>, 'ref'>)}\n        />\n    )\n})\n\ninterface RadarGridLevelLinearProps {\n    radius: number\n    angleStep: number\n    dataLength: number\n}\n\nconst RadarGridLevelLinear = ({ radius, angleStep, dataLength }: RadarGridLevelLinearProps) => {\n    const theme = useTheme()\n\n    const radarLineGenerator = useMemo(\n        () =>\n            lineRadial<number>()\n                .angle(i => i * angleStep)\n                .radius(radius)\n                .curve(curveLinearClosed),\n        [angleStep, radius]\n    )\n\n    const points = Array.from({ length: dataLength }, (_, i) => i)\n    const animatedPath = useAnimatedPath(radarLineGenerator(points) as string)\n\n    return (\n        <animated.path\n            fill=\"none\"\n            d={animatedPath}\n            {...(theme.grid.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n        />\n    )\n}\n\ninterface RadarGridLevelsProps<D extends Record<string, unknown>> {\n    shape: RadarCommonProps<D>['gridShape']\n    radius: number\n    angleStep: number\n    dataLength: number\n}\n\nexport const RadarGridLevels = <D extends Record<string, unknown>>({\n    shape,\n    ...props\n}: RadarGridLevelsProps<D>) => {\n    return shape === 'circular' ? (\n        <RadarGridLevelCircular radius={props.radius} />\n    ) : (\n        <RadarGridLevelLinear {...props} />\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { positionFromAngle, useTheme } from '@nivo/core'\nimport { RadarGridLabels } from './RadarGridLabels'\nimport { RadarGridLevels } from './RadarGridLevels'\nimport { GridLabelComponent, RadarCommonProps } from './types'\n\ninterface RadarGridProps<D extends Record<string, unknown>> {\n    indices: string[]\n    shape: RadarCommonProps<D>['gridShape']\n    radius: number\n    levels: number\n    angleStep: number\n    label: GridLabelComponent\n    labelOffset: number\n}\n\nexport const RadarGrid = <D extends Record<string, unknown>>({\n    indices,\n    levels,\n    shape,\n    radius,\n    angleStep,\n    label,\n    labelOffset,\n}: RadarGridProps<D>) => {\n    const theme = useTheme()\n    const { radii, angles } = useMemo(() => {\n        return {\n            radii: Array.from({ length: levels })\n                .map((_, i) => (radius / levels) * (i + 1))\n                .reverse(),\n            angles: Array.from({ length: indices.length }, (_, i) => i * angleStep - Math.PI / 2),\n        }\n    }, [indices, levels, radius, angleStep])\n\n    return (\n        <>\n            {angles.map((angle, i) => {\n                const position = positionFromAngle(angle, radius)\n                return (\n                    <line\n                        key={`axis.${i}`}\n                        x1={0}\n                        y1={0}\n                        x2={position.x}\n                        y2={position.y}\n                        {...(theme.grid.line as SVGProps<SVGLineElement>)}\n                    />\n                )\n            })}\n            {radii.map((radius, i) => (\n                <RadarGridLevels<D>\n                    key={`level.${i}`}\n                    shape={shape}\n                    radius={radius}\n                    angleStep={angleStep}\n                    dataLength={indices.length}\n                />\n            ))}\n            <RadarGridLabels\n                radius={radius}\n                angles={angles}\n                indices={indices}\n                labelOffset={labelOffset}\n                label={label}\n            />\n        </>\n    )\n}\n","import { useMemo, useState, useCallback, createElement } from 'react'\nimport { Arc } from 'd3-shape'\nimport { positionFromAngle, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { RadarCommonProps, RadarDataProps, RadarSliceTooltipDatum } from './types'\n\ninterface RadarSliceProps<D extends Record<string, unknown>> {\n    datum: D\n    keys: RadarDataProps<D>['keys']\n    index: string | number\n    formatValue: (value: number, context: string) => string\n    colorByKey: Record<string, string>\n    startAngle: number\n    endAngle: number\n    radius: number\n    arcGenerator: Arc<void, { startAngle: number; endAngle: number }>\n    tooltip: RadarCommonProps<D>['sliceTooltip']\n}\n\nexport const RadarSlice = <D extends Record<string, unknown>>({\n    datum,\n    keys,\n    index,\n    formatValue,\n    colorByKey,\n    radius,\n    startAngle,\n    endAngle,\n    arcGenerator,\n    tooltip,\n}: RadarSliceProps<D>) => {\n    const [isHover, setIsHover] = useState(false)\n    const theme = useTheme()\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const tooltipData = useMemo(() => {\n        const data: RadarSliceTooltipDatum[] = keys.map(key => ({\n            color: colorByKey[key],\n            id: key,\n            value: datum[key] as number,\n            formattedValue: formatValue(datum[key] as number, key),\n        }))\n        data.sort((a, b) => a.value - b.value)\n        data.reverse()\n\n        return data\n    }, [datum, keys, formatValue, colorByKey])\n\n    const showItemTooltip = useCallback(\n        event => {\n            setIsHover(true)\n            showTooltipFromEvent(\n                createElement(tooltip, {\n                    index,\n                    data: tooltipData,\n                }),\n                event\n            )\n        },\n        [showTooltipFromEvent, tooltip, index, tooltipData]\n    )\n\n    const hideItemTooltip = useCallback(() => {\n        setIsHover(false)\n        hideTooltip()\n    }, [hideTooltip, setIsHover])\n\n    const { path, tipX, tipY } = useMemo(() => {\n        const position = positionFromAngle(\n            startAngle + (endAngle - startAngle) * 0.5 - Math.PI / 2,\n            radius\n        )\n\n        return {\n            path: arcGenerator({ startAngle, endAngle }) as string,\n            tipX: position.x,\n            tipY: position.y,\n        }\n    }, [startAngle, endAngle, radius, arcGenerator])\n\n    return (\n        <>\n            {isHover && <line x1={0} y1={0} x2={tipX} y2={tipY} style={theme.crosshair.line} />}\n            <path\n                d={path}\n                fill=\"#F00\"\n                fillOpacity={0}\n                onMouseEnter={showItemTooltip}\n                onMouseMove={showItemTooltip}\n                onMouseLeave={hideItemTooltip}\n            />\n        </>\n    )\n}\n","import { arc as d3Arc } from 'd3-shape'\nimport { RadarSlice } from './RadarSlice'\nimport { RadarColorMapping, RadarCommonProps, RadarDataProps } from './types'\n\ninterface RadarSlicesProps<D extends Record<string, unknown>> {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    getIndex: (d: D) => string | number\n    formatValue: (value: number, context: string) => string\n    colorByKey: RadarColorMapping\n    radius: number\n    angleStep: number\n    tooltip: RadarCommonProps<D>['sliceTooltip']\n}\n\nexport const RadarSlices = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    getIndex,\n    formatValue,\n    colorByKey,\n    radius,\n    angleStep,\n    tooltip,\n}: RadarSlicesProps<D>) => {\n    const arc = d3Arc<{ startAngle: number; endAngle: number }>().outerRadius(radius).innerRadius(0)\n\n    const halfAngleStep = angleStep * 0.5\n    let rootStartAngle = -halfAngleStep\n\n    return (\n        <>\n            {data.map(d => {\n                const index = getIndex(d)\n                const startAngle = rootStartAngle\n                const endAngle = startAngle + angleStep\n\n                rootStartAngle += angleStep\n\n                return (\n                    <RadarSlice\n                        key={index}\n                        datum={d}\n                        keys={keys}\n                        index={index}\n                        formatValue={formatValue}\n                        colorByKey={colorByKey}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        radius={radius}\n                        arcGenerator={arc}\n                        tooltip={tooltip}\n                    />\n                )\n            })}\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { ScaleLinear } from 'd3-scale'\nimport { useTheme, positionFromAngle, DotsItem, usePropertyAccessor } from '@nivo/core'\nimport { getInheritedColorGenerator } from '@nivo/colors'\nimport { RadarCommonProps, RadarDataProps, PointProps, PointData, RadarColorMapping } from './types'\n\ninterface RadarDotsProps<D extends Record<string, unknown>> {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    radiusScale: ScaleLinear<number, number>\n    getIndex: (d: D) => string\n    colorByKey: RadarColorMapping\n    angleStep: number\n    symbol?: RadarCommonProps<D>['dotSymbol']\n    size: number\n    color: RadarCommonProps<D>['dotColor']\n    borderWidth: number\n    borderColor: RadarCommonProps<D>['dotBorderColor']\n    enableLabel: boolean\n    label: RadarCommonProps<D>['dotLabel']\n    formatValue: (value: number, context: string) => string\n    labelYOffset: number\n}\n\nexport const RadarDots = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    getIndex,\n    colorByKey,\n    radiusScale,\n    angleStep,\n    symbol,\n    size = 6,\n    color = { from: 'color' },\n    borderWidth = 0,\n    borderColor = { from: 'color' },\n    enableLabel = false,\n    label = 'value',\n    formatValue,\n    labelYOffset,\n}: RadarDotsProps<D>) => {\n    const theme = useTheme()\n    const fillColor = getInheritedColorGenerator(color, theme)\n    const strokeColor = getInheritedColorGenerator(borderColor, theme)\n    const getLabel = usePropertyAccessor<PointData, string | number>(label)\n\n    const points: PointProps[] = useMemo(\n        () =>\n            data.reduce((acc, datum, i) => {\n                const index = getIndex(datum)\n                keys.forEach(key => {\n                    const value = datum[key] as number\n\n                    const pointData: PointData = {\n                        index,\n                        key,\n                        value,\n                        formattedValue: formatValue(value, key),\n                        color: colorByKey[key],\n                    }\n\n                    acc.push({\n                        key: `${key}.${index}`,\n                        label: enableLabel ? getLabel(pointData) : undefined,\n                        style: {\n                            fill: fillColor(pointData),\n                            stroke: strokeColor(pointData),\n                            ...positionFromAngle(\n                                angleStep * i - Math.PI / 2,\n                                radiusScale(datum[key] as number)\n                            ),\n                        },\n                        data: pointData,\n                    })\n                })\n\n                return acc\n            }, [] as PointProps[]),\n        [\n            data,\n            keys,\n            getIndex,\n            colorByKey,\n            enableLabel,\n            getLabel,\n            formatValue,\n            fillColor,\n            strokeColor,\n            angleStep,\n            radiusScale,\n        ]\n    )\n\n    return (\n        <>\n            {points.map(point => (\n                <DotsItem\n                    key={point.key}\n                    x={point.style.x}\n                    y={point.style.y}\n                    symbol={symbol}\n                    size={size}\n                    color={point.style.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.style.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    datum={point.data}\n                />\n            ))}\n        </>\n    )\n}\n","import { RadarGridLabel } from './RadarGridLabel'\nimport { RadarSliceTooltip } from './RadarSliceTooltip'\nimport { RadarLayerId } from './types'\n\nexport const svgDefaultProps = {\n    layers: ['grid', 'layers', 'slices', 'dots', 'legends'] as RadarLayerId[],\n\n    maxValue: 'auto' as const,\n\n    curve: 'linearClosed' as const,\n\n    borderWidth: 2,\n    borderColor: { from: 'color' },\n\n    gridLevels: 5,\n    gridShape: 'circular' as const,\n    gridLabelOffset: 16,\n    gridLabel: RadarGridLabel,\n\n    enableDots: true,\n    dotSize: 6,\n    dotColor: { from: 'color' },\n    dotBorderWidth: 0,\n    dotBorderColor: { from: 'color' },\n    enableDotLabel: false,\n    dotLabel: 'formattedValue',\n    dotLabelYOffset: -12,\n\n    colors: { scheme: 'nivo' as const },\n    fillOpacity: 0.25,\n    blendMode: 'normal' as const,\n\n    isInteractive: true,\n    sliceTooltip: RadarSliceTooltip,\n\n    legends: [],\n    role: 'img',\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n\n    defs: [],\n    fill: [],\n}\n","import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { GridLabelProps } from './types'\n\nexport const RadarGridLabel = ({ id, anchor, animated: animatedProps }: GridLabelProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={animatedProps.transform}>\n            <text style={theme.axis.ticks.text} dominantBaseline=\"central\" textAnchor={anchor}>\n                {id}\n            </text>\n        </animated.g>\n    )\n}\n","import { useMemo } from 'react'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\nimport { RadarSliceTooltipProps } from './types'\n\nexport const RadarSliceTooltip = ({ index, data }: RadarSliceTooltipProps) => {\n    const rows = useMemo(\n        () =>\n            data.map(datum => [\n                <Chip key={datum.id} color={datum.color} />,\n                datum.id,\n                datum.formattedValue,\n            ]),\n        [data]\n    )\n\n    return <TableTooltip title={<strong>{index}</strong>} rows={rows} />\n}\n","import { useMemo } from 'react'\nimport { scaleLinear } from 'd3-scale'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useCurveInterpolation,\n    usePropertyAccessor,\n    useValueFormatter,\n} from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { svgDefaultProps } from './props'\nimport {\n    RadarColorMapping,\n    RadarCommonProps,\n    RadarDataProps,\n    RadarCustomLayerProps,\n    RadarSvgProps,\n    BoundLegendProps,\n} from './types'\n\nexport const useRadar = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    indexBy,\n    maxValue,\n    valueFormat,\n    curve,\n    width,\n    height,\n    colors = svgDefaultProps.colors,\n    legends,\n    defs,\n    fill,\n}: {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    indexBy: RadarDataProps<D>['indexBy']\n    maxValue: RadarCommonProps<D>['maxValue']\n    valueFormat?: RadarCommonProps<D>['valueFormat']\n    curve: RadarCommonProps<D>['curve']\n    width: number\n    height: number\n    colors: RadarCommonProps<D>['colors']\n    legends: RadarCommonProps<D>['legends']\n    defs: RadarSvgProps<D>['defs']\n    fill: RadarSvgProps<D>['fill']\n}) => {\n    const getIndex = usePropertyAccessor<D, string>(indexBy)\n    const indices = useMemo(() => data.map(getIndex), [data, getIndex])\n    const formatValue = useValueFormatter<number, string>(valueFormat)\n\n    const getColor = useOrdinalColorScale<{ key: string; index: number }>(colors, 'key')\n    const colorByKey: RadarColorMapping = useMemo(\n        () =>\n            keys.reduce<RadarColorMapping>((mapping, key, index) => {\n                mapping[key] = getColor({ key, index })\n                return mapping\n            }, {}),\n        [keys, getColor]\n    )\n\n    const { boundDefs, fillByKey } = useMemo(() => {\n        // expand keys into structure expected by bindDefs\n        const keyData = keys.map(k => ({ key: k, color: colorByKey[k], data, fill: null }))\n        const boundDefs = bindDefs(defs, keyData, fill)\n        const fillByKey = keyData.reduce<Record<string, string | null>>((mapping, keyDatum) => {\n            const { key: keyName, fill } = keyDatum\n            mapping[keyName] = fill\n            return mapping\n        }, {})\n\n        return { boundDefs, fillByKey }\n    }, [keys, data, defs, fill, colorByKey])\n\n    const { radius, radiusScale, centerX, centerY, angleStep } = useMemo(() => {\n        const allValues: number[] = data.reduce(\n            (acc: number[], d) => [...acc, ...keys.map(key => d[key] as number)],\n            [] as number[]\n        )\n        const computedMaxValue = maxValue !== 'auto' ? maxValue : Math.max(...allValues)\n\n        const radius = Math.min(width, height) / 2\n        const radiusScale = scaleLinear<number, number>()\n            .range([0, radius])\n            .domain([0, computedMaxValue])\n\n        return {\n            radius,\n            radiusScale,\n            centerX: width / 2,\n            centerY: height / 2,\n            angleStep: (Math.PI * 2) / data.length,\n        }\n    }, [keys, data, maxValue, width, height])\n\n    const curveFactory = useCurveInterpolation(curve)\n\n    const customLayerProps: RadarCustomLayerProps<D> = useMemo(\n        () => ({\n            data,\n            keys,\n            indices,\n            colorByKey,\n            centerX,\n            centerY,\n            radiusScale,\n            angleStep,\n        }),\n        [data, keys, indices, colorByKey, centerX, centerY, radiusScale, angleStep]\n    )\n\n    const legendData = useMemo(\n        () => keys.map(key => ({ id: key, label: key, color: colorByKey[key] })),\n        [keys, colorByKey]\n    )\n\n    const boundLegends: BoundLegendProps[] = useMemo(\n        () =>\n            legends.map(({ data: customData, ...legend }) => {\n                const boundData = customData?.map(cd => {\n                    const findData = legendData.find(ld => ld.id === cd.id) || {}\n                    return { ...findData, ...cd }\n                })\n                return { ...legend, data: boundData || legendData }\n            }),\n        [legends, legendData]\n    )\n\n    return {\n        getIndex,\n        indices,\n        formatValue,\n        colorByKey,\n        fillByKey,\n        boundDefs,\n        radius,\n        radiusScale,\n        centerX,\n        centerY,\n        angleStep,\n        curveFactory,\n        legendData,\n        boundLegends,\n        customLayerProps,\n    }\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { RadarLayer } from './RadarLayer'\nimport { RadarGrid } from './RadarGrid'\nimport { RadarSlices } from './RadarSlices'\nimport { RadarDots } from './RadarDots'\nimport { svgDefaultProps } from './props'\nimport { RadarLayerId, RadarSvgProps } from './types'\nimport { useRadar } from './hooks'\n\ntype InnerRadarProps<D extends Record<string, unknown>> = Omit<\n    RadarSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerRadar = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    indexBy,\n    layers = svgDefaultProps.layers,\n    maxValue = svgDefaultProps.maxValue,\n    valueFormat,\n    curve = svgDefaultProps.curve,\n    margin: partialMargin,\n    width,\n    height,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    gridLevels = svgDefaultProps.gridLevels,\n    gridShape = svgDefaultProps.gridShape,\n    gridLabel = svgDefaultProps.gridLabel,\n    gridLabelOffset = svgDefaultProps.gridLabelOffset,\n    enableDots = svgDefaultProps.enableDots,\n    dotSymbol,\n    dotSize = svgDefaultProps.dotSize,\n    dotColor = svgDefaultProps.dotColor,\n    dotBorderWidth = svgDefaultProps.dotBorderWidth,\n    dotBorderColor = svgDefaultProps.dotBorderColor,\n    enableDotLabel = svgDefaultProps.enableDotLabel,\n    dotLabel = svgDefaultProps.dotLabel,\n    dotLabelYOffset = svgDefaultProps.dotLabelYOffset,\n    colors = svgDefaultProps.colors,\n    fillOpacity = svgDefaultProps.fillOpacity,\n    blendMode = svgDefaultProps.blendMode,\n    isInteractive = svgDefaultProps.isInteractive,\n    sliceTooltip = svgDefaultProps.sliceTooltip,\n    legends = svgDefaultProps.legends,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n}: InnerRadarProps<D>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        getIndex,\n        indices,\n        formatValue,\n        colorByKey,\n        fillByKey,\n        boundDefs,\n        radius,\n        radiusScale,\n        centerX,\n        centerY,\n        angleStep,\n        curveFactory,\n        boundLegends,\n        customLayerProps,\n    } = useRadar<D>({\n        data,\n        keys,\n        indexBy,\n        maxValue,\n        valueFormat,\n        curve,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        legends,\n        defs,\n        fill,\n    })\n\n    const layerById: Record<RadarLayerId, ReactNode> = {\n        grid: null,\n        layers: null,\n        slices: null,\n        dots: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <g key=\"grid\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarGrid<D>\n                    levels={gridLevels}\n                    shape={gridShape}\n                    radius={radius}\n                    angleStep={angleStep}\n                    indices={indices}\n                    label={gridLabel}\n                    labelOffset={gridLabelOffset}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('layers')) {\n        layerById.layers = (\n            <g key=\"layers\" transform={`translate(${centerX}, ${centerY})`}>\n                {keys.map(key => (\n                    <RadarLayer<D>\n                        key={key}\n                        data={data}\n                        item={key}\n                        colorByKey={colorByKey}\n                        fillByKey={fillByKey}\n                        radiusScale={radiusScale}\n                        angleStep={angleStep}\n                        curveFactory={curveFactory}\n                        borderWidth={borderWidth}\n                        borderColor={borderColor}\n                        fillOpacity={fillOpacity}\n                        blendMode={blendMode}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    if (layers.includes('slices') && isInteractive) {\n        layerById.slices = (\n            <g key=\"slices\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarSlices<D>\n                    data={data}\n                    keys={keys}\n                    getIndex={getIndex}\n                    formatValue={formatValue}\n                    colorByKey={colorByKey}\n                    radius={radius}\n                    angleStep={angleStep}\n                    tooltip={sliceTooltip}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('dots') && enableDots) {\n        layerById.dots = (\n            <g key=\"dots\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarDots<D>\n                    data={data}\n                    keys={keys}\n                    getIndex={getIndex}\n                    radiusScale={radiusScale}\n                    angleStep={angleStep}\n                    symbol={dotSymbol}\n                    size={dotSize}\n                    colorByKey={colorByKey}\n                    color={dotColor}\n                    borderWidth={dotBorderWidth}\n                    borderColor={dotBorderColor}\n                    enableLabel={enableDotLabel}\n                    label={dotLabel}\n                    formatValue={formatValue}\n                    labelYOffset={dotLabelYOffset}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {boundLegends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={width}\n                        containerHeight={height}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Radar = <D extends Record<string, unknown>>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: RadarSvgProps<D>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerRadar<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { RadarSvgProps } from './types'\nimport { Radar } from './Radar'\n\nexport const ResponsiveRadar = <D extends Record<string, unknown>>(\n    props: Omit<RadarSvgProps<D>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Radar<D> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["curveRadialLinear","curveRadial","Radial","curve","this","_curve","radial","context","prototype","areaStart","areaEnd","lineStart","lineEnd","point","a","r","Math","sin","cos","l","line","c","angle","x","radius","y","_","arguments","length","RadarLayer","data","key","item","colorByKey","fillByKey","radiusScale","angleStep","curveFactory","borderWidth","borderColor","fillOpacity","blendMode","theme","useTheme","getBorderColor","useInheritedColor","lineGenerator","useMemo","d","i","useMotionConfig","animate","springConfig","animatedPath","useAnimatedPath","animatedProps","useSpring","fill","stroke","color","config","immediate","strokeWidth","style","mixBlendMode","RadarGridLabels","angles","indices","labelComponent","label","labelOffset","labels","_angle","position","positionFromAngle","textAnchor","radiansToDegrees","id","anchor","springs","useSprings","transform","createElement","animated","RadarGridLevelCircular","memo","to","value","RadarGridLevelLinear","dataLength","radarLineGenerator","points","Array","RadarGridLevels","shape","props","_jsx","RadarGrid","levels","radii","x1","y1","x2","y2","RadarSlice","datum","keys","index","formatValue","startAngle","endAngle","arcGenerator","tooltip","useState","isHover","setIsHover","useTooltip","showTooltipFromEvent","hideTooltip","tooltipData","formattedValue","b","showItemTooltip","useCallback","event","hideItemTooltip","path","tipX","tipY","onMouseEnter","onMouseMove","onMouseLeave","RadarSlices","getIndex","arc","d3Arc","rootStartAngle","RadarDots","symbol","size","from","enableLabel","labelYOffset","fillColor","getInheritedColorGenerator","strokeColor","getLabel","usePropertyAccessor","pointData","acc","svgDefaultProps","layers","maxValue","gridLevels","gridShape","gridLabelOffset","gridLabel","dominantBaseline","enableDots","dotSize","dotColor","dotBorderWidth","dotBorderColor","enableDotLabel","dotLabel","dotLabelYOffset","colors","scheme","isInteractive","sliceTooltip","rows","title","legends","role","motionConfig","defs","InnerRadar","indexBy","valueFormat","partialMargin","margin","width","height","dotSymbol","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","useValueFormatter","getColor","useOrdinalColorScale","mapping","keyData","k","boundDefs","bindDefs","keyName","keyDatum","allValues","computedMaxValue","scaleLinear","centerX","centerY","useCurveInterpolation","customLayerProps","legendData","boundLegends","customData","legend","boundData","cd","ld","useRadar","layerById","grid","slices","dots","containerWidth","containerHeight","layer","Radar","renderWrapper","otherProps","ResponsiveRadar"],"sourceRoot":""}