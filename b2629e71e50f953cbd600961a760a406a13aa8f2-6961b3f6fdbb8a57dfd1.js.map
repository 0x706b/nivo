{"version":3,"file":"b2629e71e50f953cbd600961a760a406a13aa8f2-6961b3f6fdbb8a57dfd1.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-time/src/duration.js","webpack://nivo-website/../node_modules/d3-time/src/interval.js","webpack://nivo-website/./src/data/components/pie/props.ts","webpack://nivo-website/../node_modules/d3-shape/src/descending.js","webpack://nivo-website/../node_modules/d3-shape/src/identity.js","webpack://nivo-website/../src/PieLegends.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/PieTooltip.tsx","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../node_modules/d3-shape/src/pie.js","webpack://nivo-website/../src/Arcs.tsx","webpack://nivo-website/../src/Pie.tsx","webpack://nivo-website/../src/ResponsivePie.tsx","webpack://nivo-website/../src/PieCanvas.tsx","webpack://nivo-website/../src/ResponsivePieCanvas.tsx","webpack://nivo-website/./src/data/components/pie/mapper.js"],"sourcesContent":["export var durationSecond = 1e3;\nexport var durationMinute = 6e4;\nexport var durationHour = 36e5;\nexport var durationDay = 864e5;\nexport var durationWeek = 6048e5;","var t0 = new Date(),\n    t1 = new Date();\nexport default function newInterval(floori, offseti, count, field) {\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;\n  }\n\n  interval.floor = function (date) {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = function (date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function (date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function (date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function (start, stop, step) {\n    var range = [],\n        previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n\n    do {\n      range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    } while (previous < start && start < stop);\n\n    return range;\n  };\n\n  interval.filter = function (test) {\n    return newInterval(function (date) {\n      if (date >= date) while (floori(date), !test(date)) {\n        date.setTime(date - 1);\n      }\n    }, function (date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function (start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function (step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n        return field(d) % step === 0;\n      } : function (d) {\n        return interval.count(0, d) % step === 0;\n      });\n    };\n  }\n\n  return interval;\n}","import { defaultProps } from '@nivo/pie'\nimport { arcTransitionModes } from '@nivo/arcs'\nimport {\n    themeProperty,\n    defsProperties,\n    groupProperties,\n    getLegendsProps,\n    motionProperties,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data, which should be immutable.',\n        description: `\n            Chart data, which must conform to this structure\n            if using the default \\`id\\` and \\`value\\` accessors:\n\n            \\`\\`\\`\n            Array<{\n                // must be unique for the whole dataset\n                id:    string | number,\n                value: number\n            }>\n            \\`\\`\\`\n\n            If using a different data structure, you must make sure\n            to adjust both \\`id\\` and \\`value\\`. Meaning you can provide\n            a completely different data structure as long as \\`id\\` and \\`value\\`\n            return the appropriate values.\n\n            Immutability of the data is important as re-computations\n            depends on it.\n        `,\n        type: 'object[]',\n        required: true,\n    },\n    {\n        key: 'id',\n        group: 'Base',\n        help: 'ID accessor which should return a unique value for the whole dataset.',\n        description: `\n            Define how to access the ID of each datum,\n            by default, nivo will look for the \\`id\\` property.\n        `,\n        type: 'string | (datum: RawDatum): string | number',\n        required: false,\n        defaultValue: defaultProps.id,\n    },\n    {\n        key: 'value',\n        group: 'Base',\n        help: 'Value accessor.',\n        description: `\n            Define how to access the value of each datum,\n            by default, nivo will look for the \\`value\\` property.\n        `,\n        type: 'string | (datum: RawDatum): number',\n        required: false,\n        defaultValue: defaultProps.value,\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'string | (value: number) => string | number',\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            not required if using\n            \\`<ResponsivePie/>\\`.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            not required if using\n            \\`<ResponsivePie/>\\`.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        required: false,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'startAngle',\n        help: 'Start angle (in degrees), useful to make gauges for example.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.startAngle,\n        group: 'Base',\n        controlType: 'angle',\n        controlOptions: {\n            unit: '°',\n            min: -180,\n            max: 360,\n            step: 5,\n        },\n    },\n    {\n        key: 'endAngle',\n        help: 'End angle (in degrees), useful to make gauges for example.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.endAngle,\n        group: 'Base',\n        controlType: 'angle',\n        controlOptions: {\n            unit: '°',\n            min: -360,\n            max: 360,\n            step: 5,\n        },\n    },\n    {\n        key: 'fit',\n        help: `If 'true', pie will be optimized to occupy more space when using partial pie.`,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.fit,\n        controlType: 'switch',\n        group: 'Base',\n    },\n    {\n        key: 'innerRadius',\n        help: `Donut chart if greater than 0. Value should be between 0~1 as it's a ratio from original radius.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.innerRadius,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 0.95,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'padAngle',\n        help: 'Padding between each pie slice.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.padAngle,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: '°',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'cornerRadius',\n        help: 'Rounded slices.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.cornerRadius,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'sortByValue',\n        help: `If 'true', arcs will be ordered according to their associated value.`,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.sortByValue,\n        controlType: 'switch',\n        group: 'Base',\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    themeProperty(['svg', 'canvas', 'api']),\n    {\n        key: 'colors',\n        help: 'Defines color range.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: defaultProps.colors,\n        controlType: 'ordinalColors',\n        group: 'Style',\n    },\n    ...defsProperties('Style', ['svg', 'api']),\n    {\n        key: 'showcase pattern usage',\n        flavors: ['svg'],\n        help: 'Patterns.',\n        description: `\n            You can use \\`defs\\` and \\`fill\\` properties\n            to use patterns, see\n            [dedicated guide](self:/guides/patterns)\n            for further information.\n        `,\n        type: 'boolean',\n        controlType: 'switch',\n        group: 'Style',\n    },\n    {\n        key: 'borderWidth',\n        help: 'Slices border width.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.borderWidth,\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute border color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.borderColor,\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    {\n        key: 'enableArcLabels',\n        help: 'Enable/disable arc labels.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.enableArcLabels,\n        controlType: 'switch',\n        group: 'Arc labels',\n    },\n    {\n        key: 'arcLabel',\n        help: 'Defines how to get label text, can be a string (used to access current node data property) or a function which will receive the actual node data.',\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaultProps.arcLabel,\n        controlType: 'choices',\n        group: 'Arc labels',\n        controlOptions: {\n            choices: ['id', 'value', 'formattedValue', `d => \\`\\${d.id} (\\${d.value})\\``].map(\n                choice => ({\n                    label: choice,\n                    value: choice,\n                })\n            ),\n        },\n    },\n    {\n        key: 'arcLabelsRadiusOffset',\n        help: `\n            Define the radius to use to determine the label position, starting from inner radius,\n            this is expressed as a ratio.\n        `,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLabelsRadiusOffset,\n        controlType: 'range',\n        group: 'Arc labels',\n        controlOptions: {\n            min: 0,\n            max: 2,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'arcLabelsSkipAngle',\n        help: `Skip label if corresponding arc's angle is lower than provided value.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLabelsSkipAngle,\n        controlType: 'range',\n        group: 'Arc labels',\n        controlOptions: {\n            unit: '°',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLabelsTextColor',\n        help: 'Defines how to compute arc label text color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.arcLabelsTextColor,\n        controlType: 'inheritedColor',\n        group: 'Arc labels',\n    },\n    {\n        key: 'enableArcLinkLabels',\n        help: 'Enable/disable arc link labels.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.enableArcLinkLabels,\n        controlType: 'switch',\n        group: 'Arc link labels',\n    },\n    {\n        key: 'arcLinkLabel',\n        help: 'Arc link label',\n        description: `\n            Defines how to get label text,\n            can be a string (used to access current node data property)\n            or a function which will receive the actual node data.\n        `,\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabel,\n        controlType: 'choices',\n        group: 'Arc link labels',\n        controlOptions: {\n            choices: ['id', 'value', `d => \\`\\${d.id} (\\${d.value})\\``].map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n    {\n        key: 'arcLinkLabelsSkipAngle',\n        help: `Skip label if corresponding slice's angle is lower than provided value.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsSkipAngle,\n        controlType: 'range',\n        group: 'Arc link labels',\n        controlOptions: {\n            unit: '°',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLinkLabelsOffset',\n        help: `Link offset from pie outer radius, useful to have links overlapping pie slices.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsOffset,\n        controlType: 'range',\n        group: 'Arc link labels',\n        controlOptions: {\n            unit: 'px',\n            min: -24,\n            max: 24,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLinkLabelsDiagonalLength',\n        help: `Link diagonal length.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsDiagonalLength,\n        controlType: 'range',\n        group: 'Arc link labels',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 36,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLinkLabelsStraightLength',\n        help: `Length of the straight segment of the links.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsStraightLength,\n        controlType: 'range',\n        group: 'Arc link labels',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 36,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLinkLabelsTextOffset',\n        help: `X offset from links' end.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsTextOffset,\n        controlType: 'range',\n        group: 'Arc link labels',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 36,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLinkLabelsThickness',\n        help: 'Links stroke width.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsThickness,\n        controlType: 'lineWidth',\n        group: 'Arc link labels',\n    },\n    {\n        key: 'arcLinkLabelsTextColor',\n        help: 'Defines how to compute arc link label text color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsTextColor,\n        controlType: 'inheritedColor',\n        group: 'Arc link labels',\n    },\n    {\n        key: 'arcLinkLabelsColor',\n        help: 'Defines how to compute arc link label link color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsColor,\n        controlType: 'inheritedColor',\n        group: 'Arc link labels',\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer must be a function.\n\n            The layer component which will receive the chart's\n            context & computed data and must return a valid SVG element\n            for the \\`Pie\\` component.\n\n            When using the canvas implementation, the function\n            will receive the canvas 2d context as first argument\n            and the chart's context and computed data as second.\n\n            Please make sure to use \\`context.save()\\` and\n            \\`context.restore()\\` if you make some global\n            modifications to the 2d context inside this function\n            to avoid side effects.\n\n            The context passed to layers has the following structure:\n\n            \\`\\`\\`\n            {\n                dataWithArc:  DatumWithArc[],\n                arcGenerator: Function\n                centerX:      number\n                centerY:      number\n                radius:       number\n                innerRadius:  number\n            }\n            \\`\\`\\`\n        `,\n        required: false,\n        type: 'Array<string | Function>',\n        defaultValue: defaultProps.layers,\n    },\n    {\n        key: 'isInteractive',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.isInteractive,\n        controlType: 'switch',\n    },\n    {\n        key: 'activeInnerRadiusOffset',\n        flavors: ['svg', 'canvas'],\n        help: `Extends active slice inner radius.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.activeInnerRadiusOffset,\n        controlType: 'range',\n        group: 'Interactivity',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 50,\n        },\n    },\n    {\n        key: 'activeOuterRadiusOffset',\n        flavors: ['svg', 'canvas'],\n        help: `Extends active slice outer radius.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.activeOuterRadiusOffset,\n        controlType: 'range',\n        group: 'Interactivity',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 50,\n        },\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseEnter handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onMouseMove handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseLeave handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onClick handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        type: 'Component',\n        required: false,\n        help: 'Custom tooltip component',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will receive\n            the following props:\n\n            \\`\\`\\`\n            {\n                datum: PieComputedDatum\n            }\n            \\`\\`\\`\n\n            You can also customize the style of the tooltip using\n            the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        flavors: ['svg', 'canvas'],\n        help: 'Showcase custom tooltip.',\n        type: 'boolean',\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    ...motionProperties(['svg'], defaultProps, 'react-spring'),\n    {\n        key: 'transitionMode',\n        flavors: ['svg'],\n        help: 'Define how transitions behave.',\n        type: 'string',\n        required: false,\n        defaultValue: defaultProps.transitionMode,\n        controlType: 'choices',\n        group: 'Motion',\n        controlOptions: {\n            choices: arcTransitionModes.map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n    {\n        key: 'legends',\n        flavors: ['svg', 'canvas'],\n        type: 'Legend[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n]\n\nexport const groups = groupProperties(props)\n","export default function (a, b) {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}","export default function (d) {\n  return d;\n}","import { BoxLegendSvg } from '@nivo/legends'\nimport { CompletePieSvgProps, ComputedDatum, DatumId } from './types'\n\ninterface PieLegendsProps<RawDatum> {\n    width: number\n    height: number\n    legends: CompletePieSvgProps<RawDatum>['legends']\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    toggleSerie: (id: DatumId) => void\n}\n\nconst PieLegends = <RawDatum,>({\n    width,\n    height,\n    legends,\n    data,\n    toggleSerie,\n}: PieLegendsProps<RawDatum>) => {\n    return (\n        <>\n            {legends.map((legend, i) => (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                    toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n                />\n            ))}\n        </>\n    )\n}\n\nexport default PieLegends\n","import { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ArcTransitionMode } from '@nivo/arcs'\nimport { PieTooltip } from './PieTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    sortByValue: false,\n    innerRadius: 0,\n    padAngle: 0,\n    cornerRadius: 0,\n\n    layers: ['arcLinkLabels', 'arcs', 'arcLabels', 'legends'],\n\n    // layout\n    startAngle: 0,\n    endAngle: 360,\n    fit: true,\n    activeInnerRadiusOffset: 0,\n    activeOuterRadiusOffset: 0,\n\n    // border\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    // arc labels\n    enableArcLabels: true,\n    arcLabel: 'formattedValue',\n    arcLabelsSkipAngle: 0,\n    arcLabelsRadiusOffset: 0.5,\n    arcLabelsTextColor: { theme: 'labels.text.fill' },\n\n    // arc link labels\n    enableArcLinkLabels: true,\n    arcLinkLabel: 'id',\n    arcLinkLabelsSkipAngle: 0,\n    arcLinkLabelsOffset: 0,\n    arcLinkLabelsDiagonalLength: 16,\n    arcLinkLabelsStraightLength: 24,\n    arcLinkLabelsThickness: 1,\n    arcLinkLabelsTextOffset: 6,\n    arcLinkLabelsTextColor: { theme: 'labels.text.fill' },\n    arcLinkLabelsColor: { theme: 'axis.ticks.line.stroke' },\n\n    colors: { scheme: 'nivo' } as unknown as OrdinalColorScaleConfig,\n    defs: [],\n    fill: [],\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n    transitionMode: 'innerRadius' as ArcTransitionMode,\n\n    tooltip: PieTooltip,\n\n    legends: [],\n\n    role: 'img',\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const PieTooltip = <RawDatum,>({ datum }: { datum: ComputedDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={datum.id}\n        value={datum.formattedValue}\n        enableChip={true}\n        color={datum.color}\n    />\n)\n\nexport default PieTooltip\n","import { useCallback, useMemo, useState } from 'react'\nimport { pie as d3Pie } from 'd3-shape'\nimport { useArcGenerator, computeArcBoundingBox } from '@nivo/arcs'\nimport {\n    degreesToRadians,\n    radiansToDegrees,\n    useValueFormatter,\n    usePropertyAccessor,\n} from '@nivo/core'\nimport { OrdinalColorScaleConfig, useOrdinalColorScale } from '@nivo/colors'\nimport { defaultProps } from './props'\nimport { CompletePieSvgProps, ComputedDatum, DatumId, PieArc, PieCustomLayerProps } from './types'\n\ninterface MayHaveLabel {\n    label?: string | number\n}\n\n/**\n * Format data so that we get a consistent data structure.\n * It will also add the `formattedValue` and `color` property.\n */\nexport const useNormalizedData = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>\n    >,\n}: Pick<CompletePieSvgProps<RawDatum>, 'id' | 'value' | 'valueFormat' | 'colors'> & {\n    data: RawDatum[]\n}): Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[] => {\n    const getId = usePropertyAccessor<RawDatum, DatumId>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>>(\n        colors,\n        'id'\n    )\n\n    return useMemo(\n        () =>\n            data.map(datum => {\n                const datumId = getId(datum)\n                const datumValue = getValue(datum)\n\n                const normalizedDatum: Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'> = {\n                    id: datumId,\n                    label: datum.label ?? datumId,\n                    hidden: false,\n                    value: datumValue,\n                    formattedValue: formatValue(datumValue),\n                    data: datum,\n                }\n\n                return {\n                    ...normalizedDatum,\n                    color: getColor(normalizedDatum),\n                }\n            }),\n        [data, getId, getValue, formatValue, getColor]\n    )\n}\n\n/**\n * Compute arcs, which don't depend yet on radius.\n */\nexport const usePieArcs = <RawDatum>({\n    data,\n    startAngle,\n    endAngle,\n    innerRadius,\n    outerRadius,\n    padAngle,\n    sortByValue,\n    activeId,\n    activeInnerRadiusOffset,\n    activeOuterRadiusOffset,\n    hiddenIds,\n}: {\n    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n    // in degrees\n    startAngle: number\n    // in degrees\n    endAngle: number\n    // in pixels\n    innerRadius: number\n    // in pixels\n    outerRadius: number\n    padAngle: number\n    sortByValue: boolean\n    activeId: null | DatumId\n    activeInnerRadiusOffset: number\n    activeOuterRadiusOffset: number\n    hiddenIds: DatumId[]\n}): {\n    dataWithArc: Omit<ComputedDatum<RawDatum>, 'fill'>[]\n    legendData: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n} => {\n    const pie = useMemo(() => {\n        const innerPie = d3Pie<Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>>()\n            .value(d => d.value)\n            .startAngle(degreesToRadians(startAngle))\n            .endAngle(degreesToRadians(endAngle))\n            .padAngle(degreesToRadians(padAngle))\n\n        if (!sortByValue) {\n            innerPie.sortValues(null)\n        }\n\n        return innerPie\n    }, [startAngle, endAngle, padAngle, sortByValue])\n\n    return useMemo(() => {\n        const hiddenData = data.filter(item => !hiddenIds.includes(item.id))\n        const dataWithArc = pie(hiddenData).map(\n            (\n                arc: Omit<\n                    PieArc,\n                    'angle' | 'angleDeg' | 'innerRadius' | 'outerRadius' | 'thickness'\n                > & {\n                    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>\n                }\n            ) => {\n                const angle = Math.abs(arc.endAngle - arc.startAngle)\n\n                return {\n                    ...arc.data,\n                    arc: {\n                        index: arc.index,\n                        startAngle: arc.startAngle,\n                        endAngle: arc.endAngle,\n                        innerRadius:\n                            activeId === arc.data.id\n                                ? innerRadius - activeInnerRadiusOffset\n                                : innerRadius,\n                        outerRadius:\n                            activeId === arc.data.id\n                                ? outerRadius + activeOuterRadiusOffset\n                                : outerRadius,\n                        thickness: outerRadius - innerRadius,\n                        padAngle: arc.padAngle,\n                        angle,\n                        angleDeg: radiansToDegrees(angle),\n                    },\n                }\n            }\n        )\n        const legendData = data.map(item => ({ ...item, hidden: hiddenIds.includes(item.id) }))\n\n        return { dataWithArc, legendData }\n    }, [\n        pie,\n        data,\n        hiddenIds,\n        activeId,\n        innerRadius,\n        activeInnerRadiusOffset,\n        outerRadius,\n        activeOuterRadiusOffset,\n    ])\n}\n\n/**\n * Compute pie layout using explicit radius/innerRadius,\n * expressed in pixels.\n */\nexport const usePie = <RawDatum>({\n    data,\n    radius,\n    innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n}: Pick<\n    Partial<CompletePieSvgProps<RawDatum>>,\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    radius: number\n    innerRadius: number\n}) => {\n    const [activeId, setActiveId] = useState<DatumId | null>(null)\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius: radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({ cornerRadius, padAngle: degreesToRadians(padAngle) })\n\n    return { ...pieArcs, arcGenerator, setActiveId, toggleSerie }\n}\n\n/**\n * Compute pie layout using a box to find radius/innerRadius,\n * expressed in ratio (0~1), can optionally use the `fit`\n * attribute to find the most space efficient layout.\n *\n * It also returns `centerX`/`centerY` as those can be altered\n * if `fit` is `true`.\n */\nexport const usePieFromBox = <RawDatum>({\n    data,\n    width,\n    height,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    fit = defaultProps.fit,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n}: Pick<\n    CompletePieSvgProps<RawDatum>,\n    | 'width'\n    | 'height'\n    | 'innerRadius'\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'fit'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n}) => {\n    const [activeId, setActiveId] = useState<string | number | null>(null)\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const computedProps = useMemo(() => {\n        let radius = Math.min(width, height) / 2\n        let innerRadius = radius * Math.min(innerRadiusRatio, 1)\n\n        let centerX = width / 2\n        let centerY = height / 2\n\n        let boundingBox\n        if (fit) {\n            const { points, ...box } = computeArcBoundingBox(\n                centerX,\n                centerY,\n                radius,\n                startAngle - 90,\n                endAngle - 90\n            )\n            const ratio = Math.min(width / box.width, height / box.height)\n\n            const adjustedBox: {\n                width: number\n                height: number\n                x?: number\n                y?: number\n            } = {\n                width: box.width * ratio,\n                height: box.height * ratio,\n            }\n            adjustedBox.x = (width - adjustedBox.width) / 2\n            adjustedBox.y = (height - adjustedBox.height) / 2\n\n            centerX = ((centerX - box.x) / box.width) * box.width * ratio + adjustedBox.x\n            centerY = ((centerY - box.y) / box.height) * box.height * ratio + adjustedBox.y\n\n            boundingBox = { box, ratio, points }\n\n            radius = radius * ratio\n            innerRadius = innerRadius * ratio\n        }\n\n        return {\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n            debug: boundingBox,\n        }\n    }, [width, height, innerRadiusRatio, startAngle, endAngle, fit, cornerRadius])\n\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius: computedProps.innerRadius,\n        outerRadius: computedProps.radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({\n        cornerRadius,\n        padAngle: degreesToRadians(padAngle),\n    })\n\n    return {\n        arcGenerator,\n        setActiveId,\n        toggleSerie,\n        ...pieArcs,\n        ...computedProps,\n    }\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const usePieLayerContext = <RawDatum>({\n    dataWithArc,\n    arcGenerator,\n    centerX,\n    centerY,\n    radius,\n    innerRadius,\n}: PieCustomLayerProps<RawDatum>): PieCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            dataWithArc,\n            arcGenerator,\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n        }),\n        [dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius]\n    )\n","import constant from \"./constant.js\";\nimport descending from \"./descending.js\";\nimport identity from \"./identity.js\";\nimport { tau } from \"./math.js\";\nexport default function () {\n  var value = identity,\n      sortValues = descending,\n      sort = null,\n      startAngle = constant(0),\n      endAngle = constant(tau),\n      padAngle = constant(0);\n\n  function pie(data) {\n    var i,\n        n = data.length,\n        j,\n        k,\n        sum = 0,\n        index = new Array(n),\n        arcs = new Array(n),\n        a0 = +startAngle.apply(this, arguments),\n        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),\n        a1,\n        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\n        pa = p * (da < 0 ? -1 : 1),\n        v;\n\n    for (i = 0; i < n; ++i) {\n      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\n        sum += v;\n      }\n    } // Optionally sort the arcs by previously-computed values or by data.\n\n\n    if (sortValues != null) index.sort(function (i, j) {\n      return sortValues(arcs[i], arcs[j]);\n    });else if (sort != null) index.sort(function (i, j) {\n      return sort(data[i], data[j]);\n    }); // Compute the arcs! They are stored in the original data's order.\n\n    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\n      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\n        data: data[j],\n        index: i,\n        value: v,\n        startAngle: a0,\n        endAngle: a1,\n        padAngle: p\n      };\n    }\n\n    return arcs;\n  }\n\n  pie.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), pie) : value;\n  };\n\n  pie.sortValues = function (_) {\n    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\n  };\n\n  pie.sort = function (_) {\n    return arguments.length ? (sort = _, sortValues = null, pie) : sort;\n  };\n\n  pie.startAngle = function (_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : startAngle;\n  };\n\n  pie.endAngle = function (_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : endAngle;\n  };\n\n  pie.padAngle = function (_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : padAngle;\n  };\n\n  return pie;\n}","import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CompletePieSvgProps } from './types'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: CompletePieSvgProps<RawDatum>['borderWidth']\n    borderColor: CompletePieSvgProps<RawDatum>['borderColor']\n    isInteractive: CompletePieSvgProps<RawDatum>['isInteractive']\n    onClick?: CompletePieSvgProps<RawDatum>['onClick']\n    onMouseEnter?: CompletePieSvgProps<RawDatum>['onMouseEnter']\n    onMouseMove?: CompletePieSvgProps<RawDatum>['onMouseMove']\n    onMouseLeave?: CompletePieSvgProps<RawDatum>['onMouseLeave']\n    setActiveId: (id: null | string | number) => void\n    tooltip: CompletePieSvgProps<RawDatum>['tooltip']\n    transitionMode: CompletePieSvgProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    setActiveId,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            setActiveId(datum.id)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, setActiveId, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveId(null)\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveId, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { ArcLabelsLayer, ArcLinkLabelsLayer } from '@nivo/arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport PieLegends from './PieLegends'\nimport { useNormalizedData, usePieFromBox, usePieLayerContext } from './hooks'\nimport { ComputedDatum, PieLayer, PieSvgProps, PieLayerId } from './types'\nimport { defaultProps } from './props'\nimport { Arcs } from './Arcs'\n\nconst InnerPie = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    layers = defaultProps.layers as PieLayer<RawDatum>[],\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsComponent,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n    arcLinkLabelComponent,\n\n    // styling\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip = defaultProps.tooltip,\n\n    transitionMode = defaultProps.transitionMode,\n\n    legends = defaultProps.legends,\n    role = defaultProps.role,\n}: PieSvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const {\n        dataWithArc,\n        legendData,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n        setActiveId,\n        toggleSerie,\n    } = usePieFromBox<RawDatum>({\n        data: normalizedData,\n        width: innerWidth,\n        height: innerHeight,\n        fit,\n        innerRadius: innerRadiusRatio,\n        startAngle,\n        endAngle,\n        padAngle,\n        sortByValue,\n        cornerRadius,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n    })\n\n    const boundDefs = bindDefs(defs, dataWithArc, fill)\n\n    const layerById: Record<PieLayerId, ReactNode> = {\n        arcLinkLabels: null,\n        arcs: null,\n        arcLabels: null,\n        legends: null,\n    }\n\n    if (enableArcLinkLabels && layers.includes('arcLinkLabels')) {\n        layerById.arcLinkLabels = (\n            <ArcLinkLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLinkLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLinkLabel}\n                skipAngle={arcLinkLabelsSkipAngle}\n                offset={arcLinkLabelsOffset}\n                diagonalLength={arcLinkLabelsDiagonalLength}\n                straightLength={arcLinkLabelsStraightLength}\n                strokeWidth={arcLinkLabelsThickness}\n                textOffset={arcLinkLabelsTextOffset}\n                textColor={arcLinkLabelsTextColor}\n                linkColor={arcLinkLabelsColor}\n                component={arcLinkLabelComponent}\n            />\n        )\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                setActiveId={setActiveId}\n                tooltip={tooltip}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    if (legends.length > 0 && layers.includes('legends')) {\n        layerById.legends = (\n            <PieLegends<RawDatum>\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                data={legendData}\n                legends={legends}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    const layerContext = usePieLayerContext<RawDatum>({\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as PieLayerId] !== undefined) {\n                    return layerById[layer as PieLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Pie = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerPie<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Pie } from './Pie'\nimport { PieSvgProps } from './types'\n\nexport const ResponsivePie = <RawDatum,>(\n    props: Omit<PieSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Pie<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { createElement, useEffect, useMemo, useRef } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    Arc,\n    findArcUnderCursor,\n    useArcLabels,\n    drawCanvasArcLabels,\n    useArcLinkLabels,\n    drawCanvasArcLinkLabels,\n} from '@nivo/arcs'\nimport { useNormalizedData, usePieFromBox } from './hooks'\nimport { ComputedDatum, PieCanvasProps } from './types'\nimport { defaultProps } from './props'\n\nconst InnerPieCanvas = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = 1,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n\n    legends = defaultProps.legends,\n}: PieCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const { dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius, setActiveId } =\n        usePieFromBox<RawDatum>({\n            data: normalizedData,\n            width: innerWidth,\n            height: innerHeight,\n            fit,\n            innerRadius: innerRadiusRatio,\n            startAngle,\n            endAngle,\n            padAngle,\n            sortByValue,\n            cornerRadius,\n            activeInnerRadiusOffset,\n            activeOuterRadiusOffset,\n        })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const arcLabels = useArcLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        label: arcLabel,\n        skipAngle: arcLabelsSkipAngle,\n        offset: arcLabelsRadiusOffset,\n        textColor: arcLabelsTextColor,\n    })\n\n    const arcLinkLabels = useArcLinkLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        skipAngle: arcLinkLabelsSkipAngle,\n        offset: arcLinkLabelsOffset,\n        diagonalLength: arcLinkLabelsDiagonalLength,\n        straightLength: arcLinkLabelsStraightLength,\n        label: arcLinkLabel,\n        linkColor: arcLinkLabelsColor,\n        textOffset: arcLinkLabelsTextOffset,\n        textColor: arcLinkLabelsTextColor,\n    })\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n        arcGenerator.context(ctx)\n\n        ctx.save()\n        ctx.translate(centerX, centerY)\n\n        dataWithArc.forEach(arc => {\n            ctx.beginPath()\n            ctx.fillStyle = arc.color\n\n            ctx.strokeStyle = getBorderColor(arc)\n            ctx.lineWidth = borderWidth\n\n            arcGenerator(arc.arc)\n\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableArcLinkLabels === true) {\n            drawCanvasArcLinkLabels<ComputedDatum<RawDatum>>(\n                ctx,\n                arcLinkLabels,\n                theme,\n                arcLinkLabelsThickness\n            )\n        }\n\n        if (enableArcLabels === true) {\n            drawCanvasArcLabels<ComputedDatum<RawDatum>>(ctx, arcLabels, theme)\n        }\n\n        // legends assume a box rather than a center,\n        // that's why we restore previously saved position here.\n        ctx.restore()\n        legends.forEach(legend => {\n            renderLegendToCanvas(ctx, {\n                ...legend,\n                data: dataWithArc,\n                containerWidth: innerWidth,\n                containerHeight: innerHeight,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        centerX,\n        centerY,\n        arcGenerator,\n        dataWithArc,\n        getBorderColor,\n        enableArcLabels,\n        arcLabels,\n        enableArcLinkLabels,\n        arcLinkLabels,\n        arcLinkLabelsThickness,\n        legends,\n        theme,\n    ])\n\n    const arcs = useMemo(\n        () =>\n            dataWithArc.map(datum => ({\n                id: datum.id,\n                ...datum.arc,\n            })),\n        [dataWithArc]\n    )\n\n    const getArcFromMouse = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!canvasEl.current) return null\n\n        const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n        const hoveredArc = findArcUnderCursor<Arc & { id: string | number }>(\n            margin.left + centerX,\n            margin.top + centerY,\n            radius,\n            innerRadius,\n            arcs,\n            x,\n            y\n        )\n\n        if (!hoveredArc) return null\n\n        return dataWithArc.find(datum => datum.id === hoveredArc.id)\n    }\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        const datum = getArcFromMouse(event)\n        if (datum) {\n            onMouseMove?.(datum, event)\n            setActiveId(datum.id)\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n        } else {\n            setActiveId(null)\n            hideTooltip()\n        }\n    }\n\n    const handleMouseLeave = () => {\n        hideTooltip()\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!onClick) return\n\n        const arc = getArcFromMouse(event)\n        if (arc) {\n            onClick(arc, event)\n        }\n    }\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const PieCanvas = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerPieCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { PieCanvas } from './PieCanvas'\nimport { PieCanvasProps } from './types'\n\nexport const ResponsivePieCanvas = <RawDatum,>(\n    props: Omit<PieCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <PieCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { patternDotsDef, patternLinesDef } from '@nivo/core'\nimport { mapFormat, settingsMapper } from '../../../lib/settings'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n    background: #333;\n    padding: 12px 16px;\n    font-size: 12px;\n    border-radius: 2px;\n`\nconst TooltipKey = styled.span``\nconst TooltipValue = styled.span`\n    font-weight: 600;\n`\n\nconst CustomTooltip = ({ datum }) => (\n    <TooltipWrapper style={{ color: datum.color }}>\n        <TooltipKey>id</TooltipKey>\n        <TooltipValue>{datum.id}</TooltipValue>\n        <TooltipKey>value</TooltipKey>\n        <TooltipValue>{datum.value}</TooltipValue>\n        <TooltipKey>formattedValue</TooltipKey>\n        <TooltipValue>{datum.formattedValue}</TooltipValue>\n        <TooltipKey>color</TooltipKey>\n        <TooltipValue>{datum.color}</TooltipValue>\n    </TooltipWrapper>\n)\n\nexport default settingsMapper(\n    {\n        valueFormat: mapFormat,\n        arcLinkLabel: value => {\n            if (value === `d => \\`\\${d.id} (\\${d.value})\\``) return d => `${d.id} (${d.value})`\n            return value\n        },\n        arcLabel: value => {\n            if (value === `d => \\`\\${d.id} (\\${d.value})\\``) return d => `${d.id} (${d.value})`\n            return value\n        },\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return undefined\n\n            return CustomTooltip\n        },\n        theme: (value, values) => {\n            if (!values['custom tooltip example']) return value\n\n            return {\n                ...values.theme,\n                tooltip: {\n                    container: {\n                        ...values.theme.tooltip.container,\n                        background: '#333',\n                    },\n                },\n            }\n        },\n        defs: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                patternDotsDef('dots', {\n                    background: 'inherit',\n                    color: 'rgba(255, 255, 255, 0.3)',\n                    size: 4,\n                    padding: 1,\n                    stagger: true,\n                }),\n                patternLinesDef('lines', {\n                    background: 'inherit',\n                    color: 'rgba(255, 255, 255, 0.3)',\n                    rotation: -45,\n                    lineWidth: 6,\n                    spacing: 10,\n                }),\n            ]\n        },\n        fill: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                { match: { id: 'ruby' }, id: 'dots' },\n                { match: { id: 'c' }, id: 'dots' },\n                { match: { id: 'go' }, id: 'dots' },\n                { match: { id: 'python' }, id: 'dots' },\n                { match: { id: 'scala' }, id: 'lines' },\n                { match: { id: 'lisp' }, id: 'lines' },\n                { match: { id: 'elixir' }, id: 'lines' },\n                { match: { id: 'javascript' }, id: 'lines' },\n            ]\n        },\n    },\n    {\n        exclude: ['custom tooltip example', 'showcase pattern usage'],\n    }\n)\n"],"names":["durationSecond","durationMinute","durationHour","durationDay","durationWeek","t0","Date","t1","newInterval","floori","offseti","count","field","interval","date","arguments","length","floor","ceil","round","d0","d1","offset","step","Math","range","start","stop","previous","push","filter","test","setTime","end","every","isFinite","d","props","key","group","help","description","type","required","defaultValue","defaultProps","controlType","enableControlForFlavors","controlOptions","unit","min","max","flavors","themeProperty","defsProperties","choices","map","choice","label","value","motionProperties","arcTransitionModes","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","defaults","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","data","alert","JSON","stringify","groups","groupProperties","a","b","NaN","PieLegends","width","height","legends","toggleSerie","_jsx","i","BoxLegendSvg","containerWidth","containerHeight","id","sortByValue","innerRadius","padAngle","cornerRadius","layers","startAngle","endAngle","fit","activeInnerRadiusOffset","activeOuterRadiusOffset","borderWidth","borderColor","from","modifiers","enableArcLabels","arcLabel","arcLabelsSkipAngle","arcLabelsRadiusOffset","arcLabelsTextColor","theme","enableArcLinkLabels","arcLinkLabel","arcLinkLabelsSkipAngle","arcLinkLabelsOffset","arcLinkLabelsDiagonalLength","arcLinkLabelsStraightLength","arcLinkLabelsThickness","arcLinkLabelsTextOffset","arcLinkLabelsTextColor","arcLinkLabelsColor","colors","scheme","defs","fill","isInteractive","animate","motionConfig","transitionMode","tooltip","datum","BasicTooltip","formattedValue","enableChip","color","role","pixelRatio","window","devicePixelRatio","useNormalizedData","valueFormat","getId","usePropertyAccessor","getValue","formatValue","useValueFormatter","getColor","useOrdinalColorScale","useMemo","datumId","datumValue","normalizedDatum","hidden","usePieArcs","outerRadius","activeId","hiddenIds","pie","innerPie","identity","sortValues","descending","sort","constant","j","k","a1","v","n","sum","Array","arcs","a0","apply","this","da","p","abs","pa","_","d3Pie","degreesToRadians","hiddenData","includes","item","dataWithArc","arc","angle","thickness","angleDeg","radiansToDegrees","legendData","usePieFromBox","innerRadiusRatio","useState","setActiveId","setHiddenIds","computedProps","boundingBox","radius","centerX","centerY","computeArcBoundingBox","points","box","ratio","adjustedBox","x","y","debug","pieArcs","useCallback","state","indexOf","arcGenerator","useArcGenerator","Arcs","center","onMouseEnter","onMouseMove","onMouseLeave","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","event","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","ArcsLayer","InnerPie","partialMargin","margin","arcLabelsComponent","arcLinkLabelComponent","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","normalizedData","boundDefs","bindDefs","layerById","arcLinkLabels","arcLabels","ArcLinkLabelsLayer","skipAngle","diagonalLength","straightLength","strokeWidth","textOffset","textColor","linkColor","component","ArcLabelsLayer","radiusOffset","layerContext","usePieLayerContext","SvgWrapper","layer","Fragment","Pie","renderWrapper","otherProps","Container","ResponsivePie","ResponsiveWrapper","InnerPieCanvas","canvasEl","useRef","useTheme","getBorderColor","useInheritedColor","useArcLabels","useArcLinkLabels","useEffect","current","ctx","getContext","scale","fillStyle","background","fillRect","save","translate","left","top","context","forEach","beginPath","strokeStyle","lineWidth","stroke","drawCanvasArcLinkLabels","drawCanvasArcLabels","restore","renderLegendToCanvas","getArcFromMouse","getRelativeCursor","hoveredArc","findArcUnderCursor","find","handleMouseHover","ref","style","cursor","PieCanvas","ResponsivePieCanvas","TooltipWrapper","styled","TooltipKey","TooltipValue","CustomTooltip","settingsMapper","mapFormat","values","container","patternDotsDef","size","padding","stagger","patternLinesDef","rotation","spacing","match","exclude"],"sourceRoot":""}