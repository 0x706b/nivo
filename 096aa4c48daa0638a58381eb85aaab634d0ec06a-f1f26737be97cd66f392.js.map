{"version":3,"file":"096aa4c48daa0638a58381eb85aaab634d0ec06a-f1f26737be97cd66f392.js","mappings":"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","sources":["webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../src/HeatMapTooltip.tsx","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/HeatMapCellRect.tsx","webpack://nivo-website/../src/HeatMapCellCircle.tsx","webpack://nivo-website/../src/HeatMapCells.tsx","webpack://nivo-website/../src/HeatMapCellAnnotations.tsx","webpack://nivo-website/../src/HeatMap.tsx","webpack://nivo-website/../src/ResponsiveHeatMap.tsx","webpack://nivo-website/../src/canvas.tsx","webpack://nivo-website/../src/HeatMapCanvas.tsx","webpack://nivo-website/../src/ResponsiveHeatMapCanvas.tsx"],"sourcesContent":["import { DefaultHeatMapDatum, HeatMapCommonProps, LayerId } from './types'\nimport { HeatMapTooltip } from './HeatMapTooltip'\n\nexport const commonDefaultProps: Omit<\n    HeatMapCommonProps<DefaultHeatMapDatum>,\n    | 'margin'\n    | 'theme'\n    | 'valueFormat'\n    | 'onClick'\n    | 'renderWrapper'\n    | 'role'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['grid', 'axes', 'cells', 'legends', 'annotations'],\n\n    forceSquare: false,\n    xInnerPadding: 0,\n    xOuterPadding: 0,\n    yInnerPadding: 0,\n    yOuterPadding: 0,\n    sizeVariation: false,\n\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.15,\n    borderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 0.8]] },\n\n    enableGridX: false,\n    enableGridY: false,\n\n    enableLabels: true,\n    label: 'formattedValue',\n    labelTextColor: { from: 'color', modifiers: [['darker', 2]] },\n\n    colors: {\n        type: 'sequential',\n        scheme: 'brown_blueGreen',\n    },\n    emptyColor: '#000000',\n\n    legends: [],\n    annotations: [],\n\n    isInteractive: true,\n    hoverTarget: 'rowColumn',\n    tooltip: HeatMapTooltip,\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    axisTop: {},\n    axisRight: null,\n    axisBottom: null,\n    axisLeft: {},\n    borderRadius: 0,\n    cellComponent: 'rect' as const,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    axisTop: {},\n    axisRight: null,\n    axisBottom: null,\n    axisLeft: {},\n    renderCell: 'rect' as const,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { HeatMapDatum, TooltipProps } from './types'\n\nconst NonMemoizedHeatMapTooltip = <Datum extends HeatMapDatum>({ cell }: TooltipProps<Datum>) => {\n    if (cell.formattedValue === null) return null\n\n    return (\n        <BasicTooltip\n            id={`${cell.serieId} - ${cell.data.x}`}\n            value={cell.formattedValue}\n            enableChip={true}\n            color={cell.color}\n        />\n    )\n}\n\nexport const HeatMapTooltip = memo(NonMemoizedHeatMapTooltip) as typeof NonMemoizedHeatMapTooltip\n","import { scaleBand, scaleLinear } from 'd3-scale'\nimport { castBandScale } from '@nivo/scales'\nimport {\n    ComputedCell,\n    HeatMapCommonProps,\n    HeatMapDataProps,\n    HeatMapDatum,\n    SizeVariationConfig,\n} from './types'\n\nexport const computeLayout = ({\n    width: _width,\n    height: _height,\n    rows,\n    columns,\n    forceSquare,\n}: {\n    width: number\n    height: number\n    rows: number\n    columns: number\n    forceSquare: boolean\n}) => {\n    let width = _width\n    let height = _height\n\n    let offsetX = 0\n    let offsetY = 0\n\n    if (forceSquare) {\n        const cellWidth = Math.max(_width / columns, 0)\n        const cellHeight = Math.max(_height / rows, 0)\n        const cellSize = Math.min(cellWidth, cellHeight)\n\n        width = cellSize * columns\n        height = cellSize * rows\n\n        offsetX = (_width - width) / 2\n        offsetY = (_height - height) / 2\n    }\n\n    return {\n        offsetX,\n        offsetY,\n        width,\n        height,\n    }\n}\n\nexport const computeCells = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    width: _width,\n    height: _height,\n    xInnerPadding,\n    xOuterPadding,\n    yInnerPadding,\n    yOuterPadding,\n    forceSquare,\n}: {\n    data: HeatMapDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n} & Pick<\n    HeatMapCommonProps<Datum>,\n    'xOuterPadding' | 'xInnerPadding' | 'yOuterPadding' | 'yInnerPadding' | 'forceSquare'\n>) => {\n    const xValuesSet = new Set<Datum['x']>()\n    const serieIds: string[] = []\n    const allValues: number[] = []\n\n    const cells: Pick<ComputedCell<Datum>, 'id' | 'serieId' | 'value' | 'data'>[] = []\n\n    data.forEach(serie => {\n        serieIds.push(serie.id)\n\n        serie.data.forEach(datum => {\n            xValuesSet.add(datum.x)\n\n            let value: number | null = null\n            if (datum.y !== undefined && datum.y !== null) {\n                allValues.push(datum.y)\n                value = datum.y\n            }\n\n            cells.push({\n                id: `${serie.id}.${datum.x}`,\n                serieId: serie.id,\n                value,\n                data: datum,\n            })\n        })\n    })\n\n    const xValues = Array.from(xValuesSet)\n\n    const { width, height, offsetX, offsetY } = computeLayout({\n        width: _width,\n        height: _height,\n        columns: xValues.length,\n        rows: serieIds.length,\n        forceSquare,\n    })\n\n    const xScale = castBandScale<Datum['x']>(\n        scaleBand<Datum['x']>()\n            .domain(xValues)\n            .range([0, width])\n            .paddingOuter(xOuterPadding)\n            .paddingInner(xInnerPadding)\n    )\n\n    const yScale = castBandScale<string>(\n        scaleBand<string>()\n            .domain(serieIds)\n            .range([0, height])\n            .paddingOuter(yOuterPadding)\n            .paddingInner(yInnerPadding)\n    )\n\n    const cellWidth = xScale.bandwidth()\n    const cellHeight = yScale.bandwidth()\n\n    const cellsWithPosition: Omit<\n        ComputedCell<Datum>,\n        'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n    >[] = cells.map(cell => ({\n        ...cell,\n        x: xScale(cell.data.x)! + cellWidth / 2,\n        y: yScale(cell.serieId)! + cellHeight / 2,\n        width: cellWidth,\n        height: cellHeight,\n    }))\n\n    return {\n        width,\n        height,\n        offsetX,\n        offsetY,\n        xScale,\n        yScale,\n        minValue: Math.min(...allValues),\n        maxValue: Math.max(...allValues),\n        cells: cellsWithPosition,\n    }\n}\n\nexport const computeSizeScale = (\n    size: false | SizeVariationConfig,\n    min: number,\n    max: number\n): ((value: number | null) => number) => {\n    if (!size) return () => 1\n\n    const scale = scaleLinear()\n        .domain(size.values ? size.values : [min, max])\n        .range(size.sizes)\n\n    return (value: number | null) => {\n        if (value === null) return 1\n        return scale(value)\n    }\n}\n\nexport const getCellAnnotationPosition = <Datum extends HeatMapDatum>(\n    cell: ComputedCell<Datum>\n) => ({\n    x: cell.x,\n    y: cell.y,\n})\n\nexport const getCellAnnotationDimensions = <Datum extends HeatMapDatum>(\n    cell: ComputedCell<Datum>\n) => ({\n    size: Math.max(cell.width, cell.height),\n    width: cell.width,\n    height: cell.height,\n})\n","import { useMemo, useCallback, useState } from 'react'\nimport { useTheme, usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useInheritedColor, getContinuousColorScale } from '@nivo/colors'\nimport { AnnotationMatcher, useAnnotations } from '@nivo/annotations'\nimport {\n    ComputedCell,\n    DefaultHeatMapDatum,\n    HeatMapCommonProps,\n    HeatMapDataProps,\n    HeatMapDatum,\n    SizeVariationConfig,\n} from './types'\nimport { commonDefaultProps } from './defaults'\nimport {\n    computeCells,\n    computeSizeScale,\n    getCellAnnotationPosition,\n    getCellAnnotationDimensions,\n} from './compute'\n\nexport const useComputeCells = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    width,\n    height,\n    xInnerPadding,\n    xOuterPadding,\n    yInnerPadding,\n    yOuterPadding,\n    forceSquare,\n}: {\n    data: HeatMapDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n} & Pick<\n    HeatMapCommonProps<Datum>,\n    'xOuterPadding' | 'xInnerPadding' | 'yOuterPadding' | 'yInnerPadding' | 'forceSquare'\n>) =>\n    useMemo(\n        () =>\n            computeCells<Datum, ExtraProps>({\n                data,\n                width,\n                height,\n                xInnerPadding,\n                xOuterPadding,\n                yInnerPadding,\n                yOuterPadding,\n                forceSquare,\n            }),\n        [\n            data,\n            width,\n            height,\n            xInnerPadding,\n            xOuterPadding,\n            yInnerPadding,\n            yOuterPadding,\n            forceSquare,\n        ]\n    )\n\nconst isHoverTargetByType = {\n    cell: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.id === current.id,\n    row: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.serieId === current.serieId,\n    column: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.data.x === current.data.x,\n    rowColumn: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.serieId === current.serieId || cell.data.x === current.data.x,\n}\n\nconst useSizeScale = (\n    size: false | SizeVariationConfig,\n    min: number,\n    max: number\n): ((value: number | null) => number) =>\n    useMemo(() => computeSizeScale(size, min, max), [size, min, max])\n\nconst useCellsStyle = <Datum extends HeatMapDatum = DefaultHeatMapDatum>({\n    cells,\n    minValue,\n    maxValue,\n    sizeVariation,\n    colors,\n    emptyColor,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    borderColor,\n    label,\n    labelTextColor,\n    valueFormat,\n    activeIds,\n}: {\n    cells: Omit<\n        ComputedCell<Datum>,\n        'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n    >[]\n    minValue: number\n    maxValue: number\n    valueFormat?: HeatMapCommonProps<Datum>['valueFormat']\n    activeIds: string[]\n} & Pick<\n    HeatMapCommonProps<Datum>,\n    | 'sizeVariation'\n    | 'colors'\n    | 'emptyColor'\n    | 'opacity'\n    | 'activeOpacity'\n    | 'inactiveOpacity'\n    | 'borderColor'\n    | 'label'\n    | 'labelTextColor'\n>) => {\n    const getSize = useSizeScale(sizeVariation, minValue, maxValue)\n\n    const colorScale = useMemo(() => {\n        if (typeof colors === 'function') return null\n\n        return getContinuousColorScale(colors, {\n            min: minValue,\n            max: maxValue,\n        })\n    }, [colors, minValue, maxValue])\n\n    const getColor = useCallback(\n        (cell: Omit<ComputedCell<Datum>, 'color' | 'opacity' | 'borderColor'>) => {\n            if (cell.value !== null) {\n                if (typeof colors === 'function') return colors(cell)\n                if (colorScale !== null) return colorScale(cell.value)\n            }\n\n            return emptyColor\n        },\n        [colors, colorScale, emptyColor]\n    )\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n\n    const formatValue = useValueFormatter(valueFormat)\n    const getLabel = usePropertyAccessor(label)\n\n    const styledCells = useMemo(\n        () =>\n            cells.map(cell => {\n                let computedOpacity = opacity\n                if (activeIds.length > 0) {\n                    computedOpacity = activeIds.includes(cell.id) ? activeOpacity : inactiveOpacity\n                }\n\n                const sizeMultiplier = getSize(cell.value)\n\n                const computedCell = {\n                    ...cell,\n                    width: cell.width * sizeMultiplier,\n                    height: cell.height * sizeMultiplier,\n                    formattedValue: cell.value !== null ? formatValue(cell.value) : null,\n                    opacity: computedOpacity,\n                } as ComputedCell<Datum>\n\n                computedCell.label = getLabel(computedCell)\n                computedCell.color = getColor(computedCell)\n                computedCell.borderColor = getBorderColor(computedCell)\n                computedCell.labelTextColor = getLabelTextColor(computedCell)\n\n                return computedCell\n            }),\n        [\n            cells,\n            getSize,\n            getColor,\n            getBorderColor,\n            getLabelTextColor,\n            formatValue,\n            getLabel,\n            activeIds,\n            opacity,\n            activeOpacity,\n            inactiveOpacity,\n        ]\n    )\n\n    return {\n        cells: styledCells,\n        colorScale,\n    }\n}\n\nexport const useHeatMap = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>({\n    data,\n    valueFormat,\n    width: _width,\n    height: _height,\n    xOuterPadding = commonDefaultProps.xOuterPadding,\n    xInnerPadding = commonDefaultProps.xInnerPadding,\n    yOuterPadding = commonDefaultProps.yOuterPadding,\n    yInnerPadding = commonDefaultProps.yInnerPadding,\n    forceSquare = commonDefaultProps.forceSquare,\n    sizeVariation = commonDefaultProps.sizeVariation,\n    colors = commonDefaultProps.colors as HeatMapCommonProps<Datum>['colors'],\n    emptyColor = commonDefaultProps.emptyColor,\n    opacity = commonDefaultProps.opacity,\n    activeOpacity = commonDefaultProps.activeOpacity,\n    inactiveOpacity = commonDefaultProps.inactiveOpacity,\n    borderColor = commonDefaultProps.borderColor as HeatMapCommonProps<Datum>['borderColor'],\n    label = commonDefaultProps.label as HeatMapCommonProps<Datum>['label'],\n    labelTextColor = commonDefaultProps.labelTextColor as HeatMapCommonProps<Datum>['labelTextColor'],\n    hoverTarget = commonDefaultProps.hoverTarget,\n}: {\n    data: HeatMapDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n} & Partial<\n    Pick<\n        HeatMapCommonProps<Datum>,\n        | 'valueFormat'\n        | 'xOuterPadding'\n        | 'xInnerPadding'\n        | 'yOuterPadding'\n        | 'yInnerPadding'\n        | 'forceSquare'\n        | 'sizeVariation'\n        | 'colors'\n        | 'emptyColor'\n        | 'opacity'\n        | 'activeOpacity'\n        | 'inactiveOpacity'\n        | 'borderColor'\n        | 'label'\n        | 'labelTextColor'\n        | 'hoverTarget'\n    >\n>) => {\n    const [activeCell, setActiveCell] = useState<ComputedCell<Datum> | null>(null)\n\n    const { width, height, offsetX, offsetY, cells, xScale, yScale, minValue, maxValue } =\n        useComputeCells<Datum, ExtraProps>({\n            data,\n            width: _width,\n            height: _height,\n            xOuterPadding,\n            xInnerPadding,\n            yOuterPadding,\n            yInnerPadding,\n            forceSquare,\n        })\n\n    const activeIds = useMemo(() => {\n        if (!activeCell) return []\n\n        const isHoverTarget = isHoverTargetByType[hoverTarget]\n\n        return cells.filter(cell => isHoverTarget(cell, activeCell)).map(cell => cell.id)\n    }, [cells, activeCell, hoverTarget])\n\n    const { cells: computedCells, colorScale } = useCellsStyle<Datum>({\n        cells,\n        minValue,\n        maxValue,\n        sizeVariation,\n        colors,\n        emptyColor,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        valueFormat,\n        activeIds,\n    })\n\n    return {\n        width,\n        height,\n        offsetX,\n        offsetY,\n        cells: computedCells,\n        xScale,\n        yScale,\n        colorScale,\n        activeCell,\n        setActiveCell,\n    }\n}\n\nexport const useCellAnnotations = <Datum extends HeatMapDatum>(\n    cells: ComputedCell<Datum>[],\n    annotations: AnnotationMatcher<ComputedCell<Datum>>[]\n) =>\n    useAnnotations<ComputedCell<Datum>>({\n        data: cells,\n        annotations,\n        getPosition: getCellAnnotationPosition,\n        getDimensions: getCellAnnotationDimensions,\n    })\n","import { memo, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { CellComponentProps, HeatMapDatum } from './types'\n\nconst NonMemoizedHeatMapCellRect = <Datum extends HeatMapDatum>({\n    cell,\n    borderWidth,\n    borderRadius,\n    animatedProps,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    enableLabels,\n}: CellComponentProps<Datum>) => {\n    const theme = useTheme()\n\n    const handlers = useMemo(\n        () => ({\n            onMouseEnter: onMouseEnter ? onMouseEnter(cell) : undefined,\n            onMouseMove: onMouseMove ? onMouseMove(cell) : undefined,\n            onMouseLeave: onMouseLeave ? onMouseLeave(cell) : undefined,\n            onClick: onClick ? onClick(cell) : undefined,\n        }),\n        [cell, onMouseEnter, onMouseMove, onMouseLeave, onClick]\n    )\n\n    return (\n        <animated.g\n            data-testid={`cell.${cell.id}`}\n            style={{ cursor: 'pointer' }}\n            opacity={animatedProps.opacity}\n            {...handlers}\n            transform={to(\n                [animatedProps.x, animatedProps.y, animatedProps.scale],\n                (x, y, scale) => `translate(${x}, ${y}) scale(${scale})`\n            )}\n        >\n            <animated.rect\n                transform={to(\n                    [animatedProps.width, animatedProps.height],\n                    (width, height) => `translate(${width * -0.5}, ${height * -0.5})`\n                )}\n                key={cell.id}\n                fill={animatedProps.color}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                stroke={animatedProps.borderColor}\n                strokeWidth={borderWidth}\n                rx={borderRadius}\n                ry={borderRadius}\n            />\n            {enableLabels && (\n                <animated.text\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fill={animatedProps.labelTextColor}\n                    style={{\n                        ...theme.labels.text,\n                        fill: undefined,\n                        userSelect: 'none',\n                    }}\n                >\n                    {cell.label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nexport const HeatMapCellRect = memo(NonMemoizedHeatMapCellRect) as typeof NonMemoizedHeatMapCellRect\n","import { memo, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { HeatMapDatum, CellComponentProps } from './types'\n\nconst NonMemoizedHeatMapCellCircle = <Datum extends HeatMapDatum>({\n    cell,\n    borderWidth,\n    animatedProps,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    enableLabels,\n}: CellComponentProps<Datum>) => {\n    const theme = useTheme()\n\n    const handlers = useMemo(\n        () => ({\n            onMouseEnter: onMouseEnter ? onMouseEnter(cell) : undefined,\n            onMouseMove: onMouseMove ? onMouseMove(cell) : undefined,\n            onMouseLeave: onMouseLeave ? onMouseLeave(cell) : undefined,\n            onClick: onClick ? onClick(cell) : undefined,\n        }),\n        [cell, onMouseEnter, onMouseMove, onMouseLeave, onClick]\n    )\n\n    return (\n        <animated.g\n            data-testid={`cell.${cell.id}`}\n            style={{ cursor: 'pointer' }}\n            opacity={animatedProps.opacity}\n            {...handlers}\n            transform={to([animatedProps.x, animatedProps.y], (x, y) => `translate(${x}, ${y})`)}\n        >\n            <animated.circle\n                r={to(\n                    [animatedProps.width, animatedProps.height],\n                    (width, height) => Math.min(width, height) / 2\n                )}\n                fill={animatedProps.color}\n                fillOpacity={animatedProps.opacity}\n                strokeWidth={borderWidth}\n                stroke={animatedProps.borderColor}\n            />\n            {enableLabels && (\n                <animated.text\n                    dominantBaseline=\"central\"\n                    textAnchor=\"middle\"\n                    fill={animatedProps.labelTextColor}\n                    style={{\n                        ...theme.labels.text,\n                        fill: undefined,\n                    }}\n                >\n                    {cell.label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nexport const HeatMapCellCircle = memo(\n    NonMemoizedHeatMapCellCircle\n) as typeof NonMemoizedHeatMapCellCircle\n","import { createElement, MouseEvent, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    CellComponent,\n    ComputedCell,\n    HeatMapDatum,\n    HeatMapSvgProps,\n    CellAnimatedProps,\n} from './types'\nimport { HeatMapCellRect } from './HeatMapCellRect'\nimport { HeatMapCellCircle } from './HeatMapCellCircle'\n\ninterface HeatMapCellsProps<Datum extends HeatMapDatum, ExtraProps extends object> {\n    cells: ComputedCell<Datum>[]\n    cellComponent: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['cellComponent']>\n    borderRadius: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['borderRadius']>\n    borderWidth: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['borderWidth']>\n    isInteractive: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['isInteractive']>\n    setActiveCell: (cell: ComputedCell<Datum> | null) => void\n    onMouseEnter: HeatMapSvgProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove: HeatMapSvgProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave: HeatMapSvgProps<Datum, ExtraProps>['onMouseLeave']\n    onClick: HeatMapSvgProps<Datum, ExtraProps>['onClick']\n    tooltip: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['tooltip']>\n    enableLabels: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['enableLabels']>\n}\n\nconst enterTransition = <Datum extends HeatMapDatum>(cell: ComputedCell<Datum>) => ({\n    x: cell.x,\n    y: cell.y,\n    width: cell.width,\n    height: cell.height,\n    color: cell.color,\n    opacity: 0,\n    borderColor: cell.borderColor,\n    labelTextColor: cell.labelTextColor,\n    scale: 0,\n})\n\nconst regularTransition = <Datum extends HeatMapDatum>(cell: ComputedCell<Datum>) => ({\n    x: cell.x,\n    y: cell.y,\n    width: cell.width,\n    height: cell.height,\n    color: cell.color,\n    opacity: cell.opacity,\n    borderColor: cell.borderColor,\n    labelTextColor: cell.labelTextColor,\n    scale: 1,\n})\n\nconst exitTransition = <Datum extends HeatMapDatum>(cell: ComputedCell<Datum>) => ({\n    x: cell.x,\n    y: cell.y,\n    width: cell.width,\n    height: cell.height,\n    color: cell.color,\n    opacity: 0,\n    borderColor: cell.borderColor,\n    labelTextColor: cell.labelTextColor,\n    scale: 0,\n})\n\nexport const HeatMapCells = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    cells,\n    cellComponent,\n    borderRadius,\n    borderWidth,\n    isInteractive,\n    setActiveCell,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    enableLabels,\n}: HeatMapCellsProps<Datum, ExtraProps>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<ComputedCell<Datum>, CellAnimatedProps>(cells, {\n        keys: (cell: ComputedCell<Datum>) => cell.id,\n        initial: regularTransition,\n        from: enterTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: exitTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { cell }), event)\n            setActiveCell(cell)\n            onMouseEnter?.(cell, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, setActiveCell, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { cell }), event)\n            onMouseMove?.(cell, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            hideTooltip()\n            setActiveCell(null)\n            onMouseLeave?.(cell, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveCell, onMouseLeave])\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            onClick?.(cell, event)\n        }\n    }, [isInteractive, onClick])\n\n    let Cell: CellComponent<Datum>\n    if (cellComponent === 'rect') {\n        Cell = HeatMapCellRect\n    } else if (cellComponent === 'circle') {\n        Cell = HeatMapCellCircle\n    } else {\n        Cell = cellComponent\n    }\n\n    return (\n        <>\n            {transition((animatedProps, cell) =>\n                createElement(Cell, {\n                    cell,\n                    borderRadius,\n                    borderWidth,\n                    animatedProps,\n                    enableLabels,\n                    onMouseEnter: handleMouseEnter,\n                    onMouseMove: handleMouseMove,\n                    onMouseLeave: handleMouseLeave,\n                    onClick: handleClick,\n                })\n            )}\n        </>\n    )\n}\n","import { Annotation } from '@nivo/annotations'\nimport { ComputedCell, HeatMapCommonProps, HeatMapDatum } from './types'\nimport { useCellAnnotations } from './hooks'\n\ninterface HeatMapCellAnnotationsProps<Datum extends HeatMapDatum> {\n    cells: ComputedCell<Datum>[]\n    annotations: NonNullable<HeatMapCommonProps<Datum>['annotations']>\n}\n\nexport const HeatMapCellAnnotations = <Datum extends HeatMapDatum>({\n    cells,\n    annotations,\n}: HeatMapCellAnnotationsProps<Datum>) => {\n    const boundAnnotations = useCellAnnotations<Datum>(cells, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { ReactNode, Fragment, createElement, useMemo } from 'react'\nimport { SvgWrapper, Container, useDimensions } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { AnchoredContinuousColorsLegendSvg } from '@nivo/legends'\nimport {\n    DefaultHeatMapDatum,\n    HeatMapDatum,\n    HeatMapCommonProps,\n    HeatMapSvgProps,\n    LayerId,\n    CustomLayerProps,\n} from './types'\nimport { useHeatMap } from './hooks'\nimport { svgDefaultProps } from './defaults'\nimport { HeatMapCells } from './HeatMapCells'\nimport { HeatMapCellAnnotations } from './HeatMapCellAnnotations'\n\ntype InnerHeatMapProps<Datum extends HeatMapDatum, ExtraProps extends object> = Omit<\n    HeatMapSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerHeatMap = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    layers = svgDefaultProps.layers,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    forceSquare = svgDefaultProps.forceSquare,\n    xInnerPadding = svgDefaultProps.xInnerPadding,\n    xOuterPadding = svgDefaultProps.xOuterPadding,\n    yInnerPadding = svgDefaultProps.yInnerPadding,\n    yOuterPadding = svgDefaultProps.yOuterPadding,\n    sizeVariation = svgDefaultProps.sizeVariation,\n    cellComponent = svgDefaultProps.cellComponent as NonNullable<\n        HeatMapSvgProps<Datum, ExtraProps>['cellComponent']\n    >,\n    opacity = svgDefaultProps.opacity,\n    activeOpacity = svgDefaultProps.activeOpacity,\n    inactiveOpacity = svgDefaultProps.inactiveOpacity,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor as HeatMapCommonProps<Datum>['borderColor'],\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    axisTop = svgDefaultProps.axisTop,\n    axisRight = svgDefaultProps.axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableLabels = svgDefaultProps.enableLabels,\n    label = svgDefaultProps.label as HeatMapCommonProps<Datum>['label'],\n    labelTextColor = svgDefaultProps.labelTextColor as HeatMapCommonProps<Datum>['labelTextColor'],\n    colors = svgDefaultProps.colors as HeatMapCommonProps<Datum>['colors'],\n    emptyColor = svgDefaultProps.emptyColor,\n    legends = svgDefaultProps.legends,\n    annotations = svgDefaultProps.annotations as HeatMapCommonProps<Datum>['annotations'],\n    isInteractive = svgDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    hoverTarget = svgDefaultProps.hoverTarget,\n    tooltip = svgDefaultProps.tooltip as HeatMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerHeatMapProps<Datum, ExtraProps>) => {\n    const {\n        margin: _margin,\n        innerWidth: _innerWidth,\n        innerHeight: _innerHeight,\n        outerWidth,\n        outerHeight,\n    } = useDimensions(width, height, partialMargin)\n\n    const {\n        width: innerWidth,\n        height: innerHeight,\n        offsetX,\n        offsetY,\n        xScale,\n        yScale,\n        cells,\n        colorScale,\n        activeCell,\n        setActiveCell,\n    } = useHeatMap<Datum, ExtraProps>({\n        data,\n        valueFormat,\n        width: _innerWidth,\n        height: _innerHeight,\n        forceSquare,\n        xInnerPadding,\n        xOuterPadding,\n        yInnerPadding,\n        yOuterPadding,\n        sizeVariation,\n        colors,\n        emptyColor,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        hoverTarget,\n    })\n\n    const margin = useMemo(\n        () => ({\n            ..._margin,\n            top: _margin.top + offsetY,\n            left: _margin.left + offsetX,\n        }),\n        [_margin, offsetX, offsetY]\n    )\n\n    const layerById: Record<LayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        cells: null,\n        legends: null,\n        annotations: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth} // - offsetX * 2\n                height={innerHeight} // - offsetY * 2\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth} // - offsetX * 2\n                height={innerHeight} // - offsetY * 2\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('cells')) {\n        layerById.cells = (\n            <Fragment key=\"cells\">\n                <HeatMapCells<Datum, ExtraProps>\n                    cells={cells}\n                    cellComponent={cellComponent}\n                    borderRadius={borderRadius}\n                    borderWidth={borderWidth}\n                    isInteractive={isInteractive}\n                    setActiveCell={setActiveCell}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                    onClick={onClick}\n                    tooltip={tooltip}\n                    enableLabels={enableLabels}\n                />\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('legends') && colorScale !== null) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, index) => (\n                    <AnchoredContinuousColorsLegendSvg\n                        {...legend}\n                        key={index}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        scale={colorScale}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('annotations') && annotations.length > 0) {\n        layerById.annotations = (\n            <HeatMapCellAnnotations<Datum>\n                key=\"annotations\"\n                cells={cells}\n                annotations={annotations}\n            />\n        )\n    }\n\n    const customLayerProps: CustomLayerProps<Datum> = {\n        cells,\n        activeCell,\n        setActiveCell,\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={Object.assign({}, margin, {\n                top: margin.top, //+ offsetY,\n                left: margin.left, // + offsetX,\n            })}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const HeatMap = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: HeatMapSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerHeatMap<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultHeatMapDatum, HeatMapDatum, HeatMapSvgProps } from './types'\nimport { HeatMap } from './HeatMap'\n\nexport const ResponsiveHeatMap = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>(\n    props: Omit<HeatMapSvgProps<Datum, ExtraProps>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <HeatMap<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { CellCanvasRendererProps, HeatMapDatum } from './types'\n\nexport const renderRect = <Datum extends HeatMapDatum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        cell: { x, y, width, height, color, borderColor, opacity, labelTextColor, label },\n        borderWidth,\n        enableLabels,\n        theme,\n    }: CellCanvasRendererProps<Datum>\n) => {\n    ctx.save()\n    ctx.globalAlpha = opacity\n\n    ctx.fillStyle = color\n    if (borderWidth > 0) {\n        ctx.strokeStyle = borderColor\n        ctx.lineWidth = borderWidth\n    }\n\n    ctx.fillRect(x - width / 2, y - height / 2, width, height)\n    if (borderWidth > 0) {\n        ctx.strokeRect(x - width / 2, y - height / 2, width, height)\n    }\n\n    if (enableLabels) {\n        ctx.fillStyle = labelTextColor\n        ctx.font = `${theme.labels.text.fontWeight ? `${theme.labels.text.fontWeight} ` : ''}${\n            theme.labels.text.fontSize\n        }px ${theme.labels.text.fontFamily}`\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillText(label, x, y)\n    }\n\n    ctx.restore()\n}\n\nexport const renderCircle = <Datum extends HeatMapDatum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        cell: { x, y, width, height, color, borderColor, opacity, labelTextColor, label },\n        borderWidth,\n        enableLabels,\n        theme,\n    }: CellCanvasRendererProps<Datum>\n) => {\n    ctx.save()\n    ctx.globalAlpha = opacity\n\n    const radius = Math.min(width, height) / 2\n\n    ctx.fillStyle = color\n    if (borderWidth > 0) {\n        ctx.strokeStyle = borderColor\n        ctx.lineWidth = borderWidth\n    }\n\n    ctx.beginPath()\n    ctx.arc(x, y, radius, 0, 2 * Math.PI)\n\n    ctx.fill()\n    if (borderWidth > 0) {\n        ctx.stroke()\n    }\n\n    if (enableLabels) {\n        ctx.fillStyle = labelTextColor\n        ctx.font = `${theme.labels.text.fontWeight ? `${theme.labels.text.fontWeight} ` : ''}${\n            theme.labels.text.fontSize\n        }px ${theme.labels.text.fontFamily}`\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillText(label, x, y)\n    }\n\n    ctx.restore()\n}\n","import { useEffect, useRef, useCallback, createElement, useMemo } from 'react'\nimport { getRelativeCursor, isCursorInRect, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { renderContinuousColorLegendToCanvas } from '@nivo/legends'\nimport { renderAnnotationsToCanvas, useComputedAnnotations } from '@nivo/annotations'\nimport { useHeatMap, useCellAnnotations } from './hooks'\nimport { renderRect, renderCircle } from './canvas'\nimport { canvasDefaultProps } from './defaults'\nimport {\n    CellCanvasRenderer,\n    DefaultHeatMapDatum,\n    HeatMapCanvasProps,\n    HeatMapCommonProps,\n    HeatMapDatum,\n    CellShape,\n    CustomLayerProps,\n} from './types'\n\ntype InnerNetworkCanvasProps<Datum extends HeatMapDatum, ExtraProps extends object> = Omit<\n    HeatMapCanvasProps<Datum, ExtraProps>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerHeatMapCanvas = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    layers = canvasDefaultProps.layers,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    xInnerPadding = canvasDefaultProps.xInnerPadding,\n    xOuterPadding = canvasDefaultProps.xOuterPadding,\n    yInnerPadding = canvasDefaultProps.yInnerPadding,\n    yOuterPadding = canvasDefaultProps.yOuterPadding,\n    forceSquare = canvasDefaultProps.forceSquare,\n    sizeVariation = canvasDefaultProps.sizeVariation,\n    renderCell: _renderCell = canvasDefaultProps.renderCell as CellShape,\n    opacity = canvasDefaultProps.opacity,\n    activeOpacity = canvasDefaultProps.activeOpacity,\n    inactiveOpacity = canvasDefaultProps.inactiveOpacity,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor = canvasDefaultProps.borderColor as HeatMapCommonProps<Datum>['borderColor'],\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    axisTop = canvasDefaultProps.axisTop,\n    axisRight = canvasDefaultProps.axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableLabels = canvasDefaultProps.enableLabels,\n    label = canvasDefaultProps.label as HeatMapCommonProps<Datum>['label'],\n    labelTextColor = canvasDefaultProps.labelTextColor as HeatMapCommonProps<Datum>['labelTextColor'],\n    colors = canvasDefaultProps.colors as HeatMapCommonProps<Datum>['colors'],\n    emptyColor = canvasDefaultProps.emptyColor,\n    legends = canvasDefaultProps.legends,\n    annotations = canvasDefaultProps.annotations as HeatMapCommonProps<Datum>['annotations'],\n    isInteractive = canvasDefaultProps.isInteractive,\n    onClick,\n    hoverTarget = canvasDefaultProps.hoverTarget,\n    tooltip = canvasDefaultProps.tooltip as HeatMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n}: InnerNetworkCanvasProps<Datum, ExtraProps>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const {\n        margin: _margin,\n        innerWidth: _innerWidth,\n        innerHeight: _innerHeight,\n        outerWidth,\n        outerHeight,\n    } = useDimensions(width, height, partialMargin)\n\n    const {\n        width: innerWidth,\n        height: innerHeight,\n        offsetX,\n        offsetY,\n        xScale,\n        yScale,\n        cells,\n        colorScale,\n        activeCell,\n        setActiveCell,\n    } = useHeatMap<Datum, ExtraProps>({\n        data,\n        valueFormat,\n        width: _innerWidth,\n        height: _innerHeight,\n        xInnerPadding,\n        xOuterPadding,\n        yInnerPadding,\n        yOuterPadding,\n        forceSquare,\n        sizeVariation,\n        colors,\n        emptyColor,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        hoverTarget,\n    })\n\n    const margin = useMemo(\n        () => ({\n            ..._margin,\n            top: _margin.top + offsetY,\n            left: _margin.left + offsetX,\n        }),\n        [_margin, offsetX, offsetY]\n    )\n\n    const boundAnnotations = useCellAnnotations(cells, annotations)\n    const computedAnnotations = useComputedAnnotations({\n        annotations: boundAnnotations,\n    })\n\n    let renderCell: CellCanvasRenderer<Datum>\n    if (typeof _renderCell === 'function') {\n        renderCell = _renderCell\n    } else if (_renderCell === 'circle') {\n        renderCell = renderCircle\n    } else {\n        renderCell = renderRect\n    }\n\n    const theme = useTheme()\n\n    const customLayerProps: CustomLayerProps<Datum> = useMemo(\n        () => ({\n            cells,\n            activeCell,\n            setActiveCell,\n        }),\n        [cells, activeCell, setActiveCell]\n    )\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        const ctx = canvasEl.current.getContext('2d')\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top) // + offsetX, margin.top + offsetY)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                if (enableGridX) {\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                    })\n                }\n                if (enableGridY) {\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                    })\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth, // - offsetX * 2,\n                    height: innerHeight, // - offsetY * 2,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'cells') {\n                ctx.textAlign = 'center'\n                ctx.textBaseline = 'middle'\n\n                cells.forEach(cell => {\n                    renderCell(ctx, { cell, borderWidth, enableLabels, theme })\n                })\n            } else if (layer === 'legends' && colorScale !== null) {\n                legends.forEach(legend => {\n                    renderContinuousColorLegendToCanvas(ctx, {\n                        ...legend,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        scale: colorScale,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, {\n                    annotations: computedAnnotations,\n                    theme,\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            }\n        })\n    }, [\n        canvasEl,\n        pixelRatio,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        layers,\n        customLayerProps,\n        cells,\n        renderCell,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        xScale,\n        yScale,\n        theme,\n        borderWidth,\n        enableLabels,\n        colorScale,\n        legends,\n        computedAnnotations,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            if (canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n            const cell = cells.find(c =>\n                isCursorInRect(\n                    c.x + margin.left - c.width / 2, // + offsetX - c.width / 2,\n                    c.y + margin.top - c.height / 2, //+ offsetY - c.height / 2,\n                    c.width,\n                    c.height,\n                    x,\n                    y\n                )\n            )\n            if (cell !== undefined) {\n                setActiveCell(cell)\n                showTooltipFromEvent(createElement(tooltip, { cell }), event)\n            } else {\n                setActiveCell(null)\n                hideTooltip()\n            }\n        },\n        [\n            canvasEl,\n            cells,\n            margin,\n            // offsetX,\n            // offsetY,\n            setActiveCell,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setActiveCell(null)\n        hideTooltip()\n    }, [setActiveCell, hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            if (activeCell === null) return\n\n            onClick?.(activeCell, event)\n        },\n        [activeCell, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n        />\n    )\n}\n\nexport const HeatMapCanvas = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: HeatMapCanvasProps<Datum, ExtraProps>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerHeatMapCanvas<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultHeatMapDatum, HeatMapCanvasProps, HeatMapDatum } from './types'\nimport { HeatMapCanvas } from './HeatMapCanvas'\n\nexport const ResponsiveHeatMapCanvas = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>(\n    props: Omit<HeatMapCanvasProps<Datum, ExtraProps>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <HeatMapCanvas<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["commonDefaultProps","layers","forceSquare","xInnerPadding","xOuterPadding","yInnerPadding","yOuterPadding","sizeVariation","opacity","activeOpacity","inactiveOpacity","borderWidth","borderColor","from","modifiers","enableGridX","enableGridY","enableLabels","label","labelTextColor","colors","type","scheme","emptyColor","legends","annotations","isInteractive","hoverTarget","tooltip","memo","cell","formattedValue","_jsxDEV","BasicTooltip","id","serieId","data","x","value","enableChip","color","animate","motionConfig","svgDefaultProps","axisTop","axisRight","axisBottom","axisLeft","borderRadius","cellComponent","canvasDefaultProps","renderCell","pixelRatio","window","devicePixelRatio","computeCells","_width","width","_height","height","xValuesSet","Set","serieIds","allValues","cells","forEach","push","serie","add","datum","y","xValues","Array","rows","columns","offsetX","offsetY","cellWidth","Math","max","cellHeight","cellSize","min","computeLayout","length","xScale","castBandScale","scaleBand","domain","range","paddingOuter","paddingInner","yScale","bandwidth","cellsWithPosition","map","minValue","maxValue","getCellAnnotationPosition","getCellAnnotationDimensions","size","useComputeCells","useMemo","isHoverTargetByType","current","row","column","rowColumn","useCellsStyle","valueFormat","activeIds","getSize","scale","scaleLinear","values","sizes","computeSizeScale","colorScale","getContinuousColorScale","getColor","useCallback","theme","useTheme","getBorderColor","useInheritedColor","getLabelTextColor","formatValue","useValueFormatter","getLabel","usePropertyAccessor","computedOpacity","includes","sizeMultiplier","computedCell","useHeatMap","useState","activeCell","setActiveCell","isHoverTarget","filter","useCellAnnotations","useAnnotations","getPosition","getDimensions","HeatMapCellRect","animatedProps","onMouseEnter","onMouseMove","onMouseLeave","onClick","handlers","animated","g","style","cursor","transform","to","rect","fill","stroke","strokeWidth","rx","ry","text","textAnchor","dominantBaseline","labels","userSelect","HeatMapCellCircle","circle","r","fillOpacity","undefined","enterTransition","regularTransition","exitTransition","HeatMapCells","Cell","useMotionConfig","springConfig","config","transition","useTransition","keys","initial","enter","update","leave","immediate","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleClick","HeatMapCellAnnotations","boundAnnotations","annotation","i","Annotation","InnerHeatMap","partialMargin","margin","role","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","_margin","_innerWidth","innerWidth","_innerHeight","innerHeight","outerWidth","outerHeight","top","left","layerById","grid","axes","Grid","Axes","right","bottom","Fragment","legend","index","_createElement","AnchoredContinuousColorsLegendSvg","key","containerWidth","containerHeight","customLayerProps","SvgWrapper","Object","assign","layer","HeatMap","renderWrapper","otherProps","Container","ResponsiveHeatMap","props","ResponsiveWrapper","renderRect","ctx","save","globalAlpha","fillStyle","strokeStyle","lineWidth","fillRect","strokeRect","font","fontWeight","fontSize","fontFamily","textAlign","textBaseline","fillText","restore","renderCircle","radius","beginPath","arc","PI","InnerHeatMapCanvas","_renderCell","canvasEl","useRef","computedAnnotations","useComputedAnnotations","useEffect","getContext","background","translate","line","renderGridLinesToCanvas","axis","renderAxesToCanvas","renderContinuousColorLegendToCanvas","renderAnnotationsToCanvas","handleMouseHover","e","getRelativeCursor","find","isCursorInRect","c","ref","HeatMapCanvas","ResponsiveHeatMapCanvas"],"sourceRoot":""}