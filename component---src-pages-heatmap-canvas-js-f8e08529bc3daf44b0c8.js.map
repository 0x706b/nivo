{"version":3,"sources":["webpack:///./src/pages/heatmap/canvas.js"],"names":["initialProperties","indexBy","margin","top","right","bottom","left","pixelRatio","window","devicePixelRatio","minValue","maxValue","forceSquare","sizeVariation","padding","colors","axisTop","enable","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","axisRight","legendPosition","axisBottom","axisLeft","enableGridX","enableGridY","cellShape","cellOpacity","cellBorderWidth","cellBorderColor","from","modifiers","enableLabels","labelTextColor","animate","motionStiffness","motionDamping","isInteractive","hoverTarget","cellHoverOpacity","cellHoverOthersOpacity","HeatMapCanvas","name","meta","icon","flavors","currentFlavor","properties","groups","propertiesMapper","mapper","codePropertiesMapper","data","keys","isFunction","generateData","generateHeavyDataSet","getDataSize","length","getTabData","theme","logAction","onClick","cell","type","label","yKey","xKey","value","color"],"mappings":"4FAAA,sIAiBMA,EAAoB,CACtBC,QAAS,UAETC,OAAQ,CACJC,IAAK,IACLC,MAAO,GACPC,OAAQ,IACRC,KAAM,IAGVC,WACsB,oBAAXC,QAA0BA,OAAOC,iBAAmBD,OAAOC,iBAAmB,EAEzFC,SAAU,OACVC,SAAU,OACVC,aAAa,EACbC,cAAe,EACfC,QAAS,EACTC,OAAQ,OAERC,QAAS,CACLC,QAAQ,EACRC,OAAQ,MACRC,SAAU,EACVC,YAAa,EACbC,cAAe,GACfC,OAAQ,GACRC,aAAc,IAElBC,UAAW,CACPP,QAAQ,EACRC,OAAQ,QACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,UACRG,eAAgB,SAChBF,aAAc,IAElBG,WAAY,CACRT,QAAQ,EACRC,OAAQ,SACRC,SAAU,EACVC,YAAa,EACbC,cAAe,GACfC,OAAQ,GACRG,eAAgB,SAChBF,aAAc,IAElBI,SAAU,CACNV,QAAQ,EACRC,OAAQ,OACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,UACRG,eAAgB,SAChBF,cAAe,IAGnBK,aAAa,EACbC,aAAa,EAEbC,UAAW,OACXC,YAAa,EACbC,gBAAiB,EACjBC,gBAAiB,CACbC,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU,MAG3BC,cAAc,EACdC,eAAgB,CACZH,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU,OAG3BG,SAAS,EACTC,gBAAiB,IACjBC,cAAe,EAEfC,eAAe,EACfC,YAAa,YACbC,iBAAkB,EAClBC,uBAAwB,IA+CbC,UA5CO,WAClB,OACI,kBAAC,IAAD,CACIC,KAAK,gBACLC,KAAMA,IAAKF,cACXG,KAAK,UACLC,QAASF,IAAKE,QACdC,cAAc,SACdC,WAAYC,IACZpD,kBAAmBA,EACnBqD,iBAAkBC,IAClBC,qBAAsB,SAACJ,EAAYK,GAAb,sBAClBC,KAAMD,EAAKC,MACRN,EAFe,CAGlBrB,UAAW4B,IAAWP,EAAWrB,WAC3B,uBACAqB,EAAWrB,aAErB6B,aAAcC,IACdC,YAAa,SAAAL,GAAI,OAAIA,EAAKA,KAAKM,OAASN,EAAKC,KAAKK,QAClDC,WAAY,SAAAP,GAAI,OAAIA,EAAKA,QAExB,SAACL,EAAYK,EAAMQ,EAAOC,GACvB,OACI,kBAAC,IAAD,eACIT,KAAMA,EAAKA,KACXC,KAAMD,EAAKC,MACPN,EAHR,CAIIa,MAAOA,EACPE,QAAS,SAAAC,GACLF,EAAU,CACNG,KAAM,QACNC,MAAM,UAAWF,EAAKG,KAAjB,IAAyBH,EAAKI,KAA9B,KAAuCJ,EAAKK,MACjDC,MAAON,EAAKM,MACZjB,KAAMW","file":"component---src-pages-heatmap-canvas-js-f8e08529bc3daf44b0c8.js","sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveHeatMapCanvas } from '@nivo/heatmap'\nimport isFunction from 'lodash/isFunction'\nimport ComponentTemplate from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/heatmap/meta.yml'\nimport mapper from '../../data/components/heatmap/mapper'\nimport { groups } from '../../data/components/heatmap/props'\nimport { generateHeavyDataSet } from '../../data/components/heatmap/generator'\n\nconst initialProperties = {\n    indexBy: 'country',\n\n    margin: {\n        top: 100,\n        right: 60,\n        bottom: 100,\n        left: 60,\n    },\n\n    pixelRatio:\n        typeof window !== 'undefined' && window.devicePixelRatio ? window.devicePixelRatio : 1,\n\n    minValue: 'auto',\n    maxValue: 'auto',\n    forceSquare: false,\n    sizeVariation: 0,\n    padding: 0,\n    colors: 'BrBG',\n\n    axisTop: {\n        enable: true,\n        orient: 'top',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: -90,\n        legend: '',\n        legendOffset: 36,\n    },\n    axisRight: {\n        enable: true,\n        orient: 'right',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'country',\n        legendPosition: 'middle',\n        legendOffset: 40,\n    },\n    axisBottom: {\n        enable: true,\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: -90,\n        legend: '',\n        legendPosition: 'middle',\n        legendOffset: 36,\n    },\n    axisLeft: {\n        enable: true,\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'country',\n        legendPosition: 'middle',\n        legendOffset: -40,\n    },\n\n    enableGridX: false,\n    enableGridY: true,\n\n    cellShape: 'rect',\n    cellOpacity: 1,\n    cellBorderWidth: 0,\n    cellBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n\n    enableLabels: false,\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 1.4]],\n    },\n\n    animate: true,\n    motionStiffness: 120,\n    motionDamping: 9,\n\n    isInteractive: true,\n    hoverTarget: 'rowColumn',\n    cellHoverOpacity: 1,\n    cellHoverOthersOpacity: 0.5,\n}\n\nconst HeatMapCanvas = () => {\n    return (\n        <ComponentTemplate\n            name=\"HeatMapCanvas\"\n            meta={meta.HeatMapCanvas}\n            icon=\"heatmap\"\n            flavors={meta.flavors}\n            currentFlavor=\"canvas\"\n            properties={groups}\n            initialProperties={initialProperties}\n            propertiesMapper={mapper}\n            codePropertiesMapper={(properties, data) => ({\n                keys: data.keys,\n                ...properties,\n                cellShape: isFunction(properties.cellShape)\n                    ? 'Custom(props) => (…)'\n                    : properties.cellShape,\n            })}\n            generateData={generateHeavyDataSet}\n            getDataSize={data => data.data.length * data.keys.length}\n            getTabData={data => data.data}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveHeatMapCanvas\n                        data={data.data}\n                        keys={data.keys}\n                        {...properties}\n                        theme={theme}\n                        onClick={cell => {\n                            logAction({\n                                type: 'click',\n                                label: `[cell] ${cell.yKey}.${cell.xKey}: ${cell.value}`,\n                                color: cell.color,\n                                data: cell,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default HeatMapCanvas\n"],"sourceRoot":""}