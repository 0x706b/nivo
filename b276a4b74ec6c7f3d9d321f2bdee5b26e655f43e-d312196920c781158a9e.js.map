{"version":3,"file":"b276a4b74ec6c7f3d9d321f2bdee5b26e655f43e-d312196920c781158a9e.js","mappings":"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","sources":["webpack://nivo-website/../src/bump/compute.js","webpack://nivo-website/../src/bump/hooks.js","webpack://nivo-website/../src/bump/LineTooltip.js","webpack://nivo-website/../src/bump/Point.js","webpack://nivo-website/../src/bump/props.js","webpack://nivo-website/../src/bump/Line.js","webpack://nivo-website/../src/bump/LinesLabels.js","webpack://nivo-website/../src/bump/Points.js","webpack://nivo-website/../src/bump/Bump.js","webpack://nivo-website/../src/bump/ResponsiveBump.js","webpack://nivo-website/../src/area-bump/AreaTooltip.js","webpack://nivo-website/../src/area-bump/props.js","webpack://nivo-website/../src/area-bump/hooks.js","webpack://nivo-website/../src/area-bump/compute.js","webpack://nivo-website/../src/area-bump/Area.js","webpack://nivo-website/../src/area-bump/AreasLabels.js","webpack://nivo-website/../src/area-bump/AreaBump.js","webpack://nivo-website/../src/area-bump/ResponsiveAreaBump.js"],"sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { scalePoint } from 'd3-scale'\n\nexport const computeSeries = ({ width, height, data, xPadding, xOuterPadding, yOuterPadding }) => {\n    let xValues = new Set()\n    let yValues = new Set()\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            if (!xValues.has(datum.x)) {\n                xValues.add(datum.x)\n            }\n            if (!yValues.has(datum.y) && datum.y !== null) {\n                yValues.add(datum.y)\n            }\n        })\n    })\n    xValues = Array.from(xValues)\n    yValues = Array.from(yValues).sort((a, b) => a - b)\n\n    const xScale = scalePoint().domain(xValues).range([0, width]).padding(xOuterPadding)\n\n    const yScale = scalePoint().domain(yValues).range([0, height]).padding(yOuterPadding)\n\n    const linePointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series = data.map(rawSerie => {\n        const serie = {\n            ...rawSerie,\n            points: [],\n            linePoints: [],\n        }\n\n        rawSerie.data.forEach((datum, i) => {\n            let x = null\n            let y = null\n            if (datum.y !== null && datum.y !== undefined) {\n                x = xScale(datum.x)\n                y = yScale(datum.y)\n            }\n            const point = {\n                id: `${rawSerie.id}.${i}`,\n                serie: rawSerie,\n                data: datum,\n                x,\n                y,\n            }\n            serie.points.push(point)\n\n            // only add pre transition point if the datum is not empty\n            if (x !== null) {\n                if (i === 0) {\n                    serie.linePoints.push([0, point.y])\n                } else {\n                    serie.linePoints.push([point.x - linePointPadding, point.y])\n                }\n            }\n\n            serie.linePoints.push([point.x, point.y])\n\n            // only add post transition point if the datum is not empty\n            if (x !== null) {\n                if (i === rawSerie.data.length - 1 && x) {\n                    serie.linePoints.push([width, point.y])\n                } else {\n                    serie.linePoints.push([point.x + linePointPadding, point.y])\n                }\n            }\n\n            // remove points having null coordinates\n            serie.points = serie.points.filter(point => point.x !== null)\n        })\n\n        return serie\n    })\n\n    return {\n        series,\n        xScale,\n        yScale,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, useMemo, useCallback } from 'react'\nimport { line as d3Line, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { computeSeries } from './compute'\n\nexport const useLineGenerator = interpolation =>\n    useMemo(\n        () =>\n            d3Line()\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear)\n                .defined(d => d[0] !== null && d[1] !== null),\n\n        [interpolation]\n    )\n\nexport const useSerieDerivedProp = instruction =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nexport const useSerieStyle = ({\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    isInteractive,\n    currentSerie,\n}) => {\n    const getLineWidth = useSerieDerivedProp(lineWidth)\n    const getActiveLineWidth = useSerieDerivedProp(activeLineWidth)\n    const getInactiveLineWidth = useSerieDerivedProp(inactiveLineWidth)\n\n    const getOpacity = useSerieDerivedProp(opacity)\n    const getActiveOpacity = useSerieDerivedProp(activeOpacity)\n    const getInactiveOpacity = useSerieDerivedProp(inactiveOpacity)\n\n    const getNormalStyle = useMemo(\n        () => serie => ({\n            lineWidth: getLineWidth(serie),\n            opacity: getOpacity(serie),\n        }),\n        [getLineWidth, getOpacity]\n    )\n    const getActiveStyle = useMemo(\n        () => serie => ({\n            lineWidth: getActiveLineWidth(serie),\n            opacity: getActiveOpacity(serie),\n        }),\n        [getActiveLineWidth, getActiveOpacity]\n    )\n    const getInactiveStyle = useMemo(\n        () => serie => ({\n            lineWidth: getInactiveLineWidth(serie),\n            opacity: getInactiveOpacity(serie),\n        }),\n        [getInactiveLineWidth, getInactiveOpacity]\n    )\n\n    return useMemo(() => {\n        if (!isInteractive) return getNormalStyle\n\n        return serie => {\n            if (currentSerie === null) return getNormalStyle(serie)\n            if (serie.id === currentSerie) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        }\n    }, [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, currentSerie])\n}\n\nexport const usePointStyle = ({\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    isInteractive,\n    currentSerie,\n}) => {\n    const getSize = useSerieDerivedProp(pointSize)\n    const getActiveSize = useSerieDerivedProp(activePointSize)\n    const getInactiveSize = useSerieDerivedProp(inactivePointSize)\n\n    const getBorderWidth = useSerieDerivedProp(pointBorderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp(activePointBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp(inactivePointBorderWidth)\n\n    const getNormalStyle = useMemo(\n        () => point => ({\n            size: getSize(point),\n            borderWidth: getBorderWidth(point),\n        }),\n        [getSize, getBorderWidth]\n    )\n    const getActiveStyle = useMemo(\n        () => point => ({\n            size: getActiveSize(point),\n            borderWidth: getActiveBorderWidth(point),\n        }),\n        [getActiveSize, getActiveBorderWidth]\n    )\n    const getInactiveStyle = useMemo(\n        () => point => ({\n            size: getInactiveSize(point),\n            borderWidth: getInactiveBorderWidth(point),\n        }),\n        [getInactiveSize, getInactiveBorderWidth]\n    )\n\n    return useMemo(() => {\n        if (!isInteractive) return getNormalStyle\n\n        return point => {\n            if (currentSerie === null) return getNormalStyle(point)\n            if (point.serieId === currentSerie) return getActiveStyle(point)\n            return getInactiveStyle(point)\n        }\n    }, [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, currentSerie])\n}\n\nexport const useBump = ({\n    width,\n    height,\n    data,\n    interpolation,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    colors,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointColor,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    pointBorderColor,\n    isInteractive,\n    currentSerie,\n}) => {\n    const {\n        series: rawSeries,\n        xScale,\n        yScale,\n    } = useMemo(\n        () =>\n            computeSeries({\n                width,\n                height,\n                data,\n                xPadding,\n                xOuterPadding,\n                yOuterPadding,\n            }),\n        [width, height, data, xPadding, xOuterPadding, yOuterPadding]\n    )\n\n    const lineGenerator = useLineGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle({\n        lineWidth,\n        activeLineWidth,\n        inactiveLineWidth,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        isInteractive,\n        currentSerie,\n    })\n\n    const series = useMemo(\n        () =>\n            rawSeries.map(serie => {\n                const nextSerie = { ...serie }\n                nextSerie.color = getColor(nextSerie)\n                nextSerie.style = getSerieStyle(nextSerie)\n                return nextSerie\n            }),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const getPointStyle = usePointStyle({\n        pointSize,\n        activePointSize,\n        inactivePointSize,\n        pointBorderWidth,\n        activePointBorderWidth,\n        inactivePointBorderWidth,\n        isInteractive,\n        currentSerie,\n    })\n    const points = useMemo(() => {\n        const pts = []\n        series.forEach(serie => {\n            serie.points.forEach(rawPoint => {\n                const point = {\n                    ...rawPoint,\n                    serie,\n                    serieId: serie.id,\n                    isActive: currentSerie === serie.id,\n                    isInactive: currentSerie !== null && currentSerie !== serie.id,\n                }\n                point.color = getPointColor(point)\n                point.borderColor = getPointBorderColor(point)\n                point.style = getPointStyle({ ...point, serie })\n                pts.push(point)\n            })\n        })\n\n        return pts\n    }, [series, getPointColor, getPointBorderColor, getPointStyle, currentSerie])\n\n    return {\n        xScale,\n        yScale,\n        series,\n        points,\n        lineGenerator,\n    }\n}\n\nexport const useSerieHandlers = ({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setCurrent,\n    tooltip,\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setCurrent(serie.id)\n            onMouseEnter && onMouseEnter(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setCurrent]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove && onMouseMove(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setCurrent]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    const handlers = useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n\n    return handlers\n}\n\nexport const useSeriesLabels = ({ series, position, padding, color, getLabel }) => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor\n        let signedPadding\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        const labels = []\n        series.forEach(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie)\n            }\n\n            const point =\n                position === 'start'\n                    ? serie.linePoints[0]\n                    : serie.linePoints[serie.linePoints.length - 1]\n\n            // exclude labels for series having missing data at the beginning/end\n            if (point[0] === null || point[1] === null) {\n                return\n            }\n\n            labels.push({\n                id: serie.id,\n                label,\n                x: point[0] + signedPadding,\n                y: point[1],\n                color: getColor(serie),\n                opacity: serie.style.opacity,\n                serie,\n                textAnchor,\n            })\n        })\n\n        return labels\n    }, [series, position, padding, getColor])\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst LineTooltip = ({ serie }) => {\n    return <BasicTooltip id={serie.id} enableChip={true} color={serie.color} />\n}\n\nLineTooltip.propTypes = {\n    serie: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        color: PropTypes.string.isRequired,\n    }),\n}\n\nexport default memo(LineTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated, to } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\n\nconst pointStyle = { pointerEvents: 'none' }\n\nconst Point = ({ x, y, size, color, borderColor, borderWidth }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        color,\n        borderWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            r={to(animatedProps.radius, v => Math.max(v, 0))}\n            fill={animatedProps.color}\n            strokeWidth={animatedProps.borderWidth}\n            stroke={borderColor}\n            style={pointStyle}\n        />\n    )\n}\n\nPoint.propTypes = {\n    data: PropTypes.object.isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    isActive: PropTypes.bool.isRequired,\n    isInactive: PropTypes.bool.isRequired,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    borderColor: PropTypes.string.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n}\n\nexport default memo(Point)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { motionPropTypes } from '@nivo/core'\nimport { ordinalColorsPropType, inheritedColorPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\nimport LineTooltip from './LineTooltip'\nimport Point from './Point'\n\nconst commonPropTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n                    y: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf(['grid', 'axes', 'labels', 'lines', 'points']),\n            PropTypes.func,\n        ])\n    ).isRequired,\n\n    interpolation: PropTypes.oneOf(['linear', 'smooth']).isRequired,\n    xPadding: PropTypes.number.isRequired,\n    xOuterPadding: PropTypes.number.isRequired,\n    yOuterPadding: PropTypes.number.isRequired,\n\n    colors: ordinalColorsPropType.isRequired,\n    lineWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    activeLineWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    inactiveLineWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    opacity: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    activeOpacity: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    inactiveOpacity: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n\n    startLabel: PropTypes.oneOfType([PropTypes.oneOf([false]), PropTypes.string, PropTypes.func])\n        .isRequired,\n    startLabelPadding: PropTypes.number.isRequired,\n    startLabelTextColor: inheritedColorPropType.isRequired,\n    endLabel: PropTypes.oneOfType([PropTypes.oneOf([false]), PropTypes.string, PropTypes.func])\n        .isRequired,\n    endLabelPadding: PropTypes.number.isRequired,\n    endLabelTextColor: inheritedColorPropType.isRequired,\n\n    pointComponent: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    pointSize: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    activePointSize: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    inactivePointSize: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    pointColor: inheritedColorPropType.isRequired,\n    pointBorderWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    activePointBorderWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    inactivePointBorderWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    pointBorderColor: inheritedColorPropType.isRequired,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n}\n\nexport const BumpPropTypes = {\n    ...commonPropTypes,\n    ...motionPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nconst commonDefaultProps = {\n    layers: ['grid', 'axes', 'labels', 'lines', 'points'],\n\n    interpolation: 'smooth',\n    xPadding: 0.6,\n    xOuterPadding: 0.5,\n    yOuterPadding: 0.5,\n\n    colors: { scheme: 'nivo' },\n    lineWidth: 2,\n    activeLineWidth: 4,\n    inactiveLineWidth: 1,\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.3,\n\n    startLabel: false,\n    startLabelPadding: 16,\n    startLabelTextColor: { from: 'color' },\n    endLabel: 'id',\n    endLabelPadding: 16,\n    endLabelTextColor: { from: 'color' },\n\n    pointSize: 6,\n    activePointSize: 8,\n    inactivePointSize: 4,\n    pointColor: { from: 'serie.color' },\n    pointBorderWidth: 0,\n    activePointBorderWidth: 0,\n    inactivePointBorderWidth: 0,\n    pointBorderColor: { from: 'serie.color', modifiers: [['darker', 1.4]] },\n\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisBottom: {},\n    axisLeft: {},\n\n    isInteractive: true,\n    tooltip: LineTooltip,\n}\n\nexport const BumpDefaultProps = {\n    ...commonDefaultProps,\n    pointComponent: Point,\n    animate: true,\n    motionConfig: 'gentle',\n    role: 'img',\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { useSerieHandlers } from './hooks'\n\nconst Line = ({\n    serie,\n    lineGenerator,\n    yStep,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setCurrentSerie,\n    tooltip,\n}) => {\n    const handlers = useSerieHandlers({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setCurrent: setCurrentSerie,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const linePath = lineGenerator(serie.linePoints)\n\n    const animatedPath = useAnimatedPath(linePath)\n    const animatedProps = useSpring({\n        color: serie.color,\n        opacity: serie.style.opacity,\n        lineWidth: serie.style.lineWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            <animated.path\n                fill=\"none\"\n                d={animatedPath}\n                stroke={animatedProps.color}\n                strokeWidth={animatedProps.lineWidth}\n                strokeLinecap=\"round\"\n                strokeOpacity={animatedProps.opacity}\n                style={{ pointerEvents: 'none' }}\n            />\n            {isInteractive && (\n                <path\n                    fill=\"none\"\n                    stroke=\"red\"\n                    strokeOpacity={0}\n                    strokeWidth={yStep}\n                    d={linePath}\n                    strokeLinecap=\"butt\"\n                    onMouseEnter={handlers.onMouseEnter}\n                    onMouseMove={handlers.onMouseMove}\n                    onMouseLeave={handlers.onMouseLeave}\n                    onClick={handlers.onClick}\n                />\n            )}\n        </>\n    )\n}\n\nLine.propTypes = {\n    serie: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        color: PropTypes.string.isRequired,\n        linePoints: PropTypes.array.isRequired,\n        style: PropTypes.shape({\n            lineWidth: PropTypes.number.isRequired,\n            opacity: PropTypes.number.isRequired,\n        }).isRequired,\n    }).isRequired,\n    lineGenerator: PropTypes.func.isRequired,\n    yStep: PropTypes.number.isRequired,\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    setCurrentSerie: PropTypes.func.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n}\n\nexport default memo(Line)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { inheritedColorPropType } from '@nivo/colors'\nimport { useSeriesLabels } from './hooks'\n\nconst LinesLabels = ({ series, getLabel, position, padding, color }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useSeriesLabels({\n        series,\n        getLabel,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return springs.map((animatedProps, index) => {\n        const label = labels[index]\n\n        return (\n            <animated.text\n                key={label.id}\n                x={animatedProps.x}\n                y={animatedProps.y}\n                textAnchor={label.textAnchor}\n                dominantBaseline=\"central\"\n                opacity={animatedProps.opacity}\n                style={{\n                    ...theme.labels.text,\n                    fill: label.color,\n                }}\n            >\n                {label.label}\n            </animated.text>\n        )\n    })\n}\n\nLinesLabels.propTypes = {\n    series: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n                    y: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n    getLabel: PropTypes.oneOfType([PropTypes.oneOf([false]), PropTypes.string, PropTypes.func])\n        .isRequired,\n    position: PropTypes.oneOf(['start', 'end']).isRequired,\n    padding: PropTypes.number.isRequired,\n    color: inheritedColorPropType.isRequired,\n}\n\nexport default memo(LinesLabels)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Points = ({ pointComponent, points }) => {\n    return points.map(point => {\n        return createElement(pointComponent, {\n            key: point.id,\n            data: point.data,\n            x: point.x,\n            y: point.y,\n            isActive: point.isActive,\n            isInactive: point.isInactive,\n            size: point.style.size,\n            color: point.color,\n            borderColor: point.borderColor,\n            borderWidth: point.style.borderWidth,\n        })\n    })\n}\n\nPoints.propTypes = {\n    pointComponent: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    points: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            data: PropTypes.object.isRequired,\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired,\n            isActive: PropTypes.bool.isRequired,\n            isInactive: PropTypes.bool.isRequired,\n            color: PropTypes.string.isRequired,\n            borderColor: PropTypes.string.isRequired,\n            style: PropTypes.shape({\n                size: PropTypes.number.isRequired,\n                borderWidth: PropTypes.number.isRequired,\n            }).isRequired,\n        })\n    ).isRequired,\n}\n\nexport default memo(Points)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useMemo, useState, Fragment } from 'react'\nimport { withContainer, useDimensions, SvgWrapper } from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { useBump } from './hooks'\nimport { BumpPropTypes, BumpDefaultProps } from './props'\nimport Line from './Line'\nimport LinesLabels from './LinesLabels'\nimport Points from './Points'\n\nconst Bump = props => {\n    const {\n        data,\n\n        width,\n        height,\n        margin: partialMargin,\n\n        layers,\n\n        interpolation,\n        xPadding,\n        xOuterPadding,\n        yOuterPadding,\n\n        colors,\n        lineWidth,\n        activeLineWidth,\n        inactiveLineWidth,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n\n        startLabel,\n        startLabelPadding,\n        startLabelTextColor,\n        endLabel,\n        endLabelPadding,\n        endLabelTextColor,\n\n        pointComponent,\n        pointSize,\n        activePointSize,\n        inactivePointSize,\n        pointColor,\n        pointBorderWidth,\n        activePointBorderWidth,\n        inactivePointBorderWidth,\n        pointBorderColor,\n\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        enableGridX,\n        enableGridY,\n\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n        role,\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const [currentSerie, setCurrentSerie] = useState(null)\n\n    const { series, points, xScale, yScale, lineGenerator } = useBump({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        interpolation,\n        xPadding,\n        xOuterPadding,\n        yOuterPadding,\n        lineWidth,\n        activeLineWidth,\n        inactiveLineWidth,\n        colors,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        pointSize,\n        activePointSize,\n        inactivePointSize,\n        pointColor,\n        pointBorderWidth,\n        activePointBorderWidth,\n        inactivePointBorderWidth,\n        pointBorderColor,\n        startLabel,\n        endLabel,\n        isInteractive,\n        currentSerie,\n    })\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        labels: [],\n        lines: (\n            <Fragment key=\"lines\">\n                {series.map(serie => (\n                    <Line\n                        key={serie.id}\n                        serie={serie}\n                        currentSerie={currentSerie}\n                        setCurrentSerie={setCurrentSerie}\n                        lineGenerator={lineGenerator}\n                        yStep={yScale.step()}\n                        margin={margin}\n                        isInteractive={isInteractive}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                ))}\n            </Fragment>\n        ),\n        points: <Points key=\"points\" pointComponent={pointComponent} points={points} />,\n    }\n\n    if (startLabel !== false) {\n        layerById.labels.push(\n            <LinesLabels\n                key=\"start\"\n                series={series}\n                getLabel={startLabel}\n                position=\"start\"\n                padding={startLabelPadding}\n                color={startLabelTextColor}\n            />\n        )\n    }\n    if (endLabel !== false) {\n        layerById.labels.push(\n            <LinesLabels\n                key=\"end\"\n                series={series}\n                getLabel={endLabel}\n                position=\"end\"\n                padding={endLabelPadding}\n                color={endLabelTextColor}\n            />\n        )\n    }\n\n    const bumpLayerContext = useMemo(\n        () => ({\n            currentSerie,\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            setCurrentSerie,\n            xScale,\n            yScale,\n        }),\n        [currentSerie, innerHeight, innerWidth, lineGenerator, points, series, xScale, yScale]\n    )\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, bumpLayerContext)}</Fragment>\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nBump.propTypes = BumpPropTypes\nBump.defaultProps = BumpDefaultProps\n\nexport default memo(withContainer(Bump))\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Bump from './Bump'\n\nconst ResponsiveBump = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bump width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveBump\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst AreaTooltip = ({ serie }) => {\n    return <BasicTooltip id={serie.id} enableChip={true} color={serie.color} />\n}\n\nAreaTooltip.propTypes = {\n    serie: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        color: PropTypes.string.isRequired,\n    }),\n}\n\nexport default memo(AreaTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { motionPropTypes, blendModePropType } from '@nivo/core'\nimport { ordinalColorsPropType, inheritedColorPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\nimport AreaTooltip from './AreaTooltip'\n\nconst commonPropTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n                    y: PropTypes.number.isRequired,\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n\n    align: PropTypes.oneOf(['start', 'middle', 'end']).isRequired,\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.oneOf(['grid', 'axes', 'labels', 'areas']), PropTypes.func])\n    ).isRequired,\n\n    interpolation: PropTypes.oneOf(['linear', 'smooth']).isRequired,\n    spacing: PropTypes.number.isRequired,\n    xPadding: PropTypes.number.isRequired,\n\n    colors: ordinalColorsPropType.isRequired,\n    blendMode: blendModePropType.isRequired,\n    fillOpacity: PropTypes.number.isRequired,\n    activeFillOpacity: PropTypes.number.isRequired,\n    inactiveFillOpacity: PropTypes.number.isRequired,\n    defs: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n        })\n    ).isRequired,\n    fill: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string,\n            match: PropTypes.oneOfType([PropTypes.oneOf(['*']), PropTypes.object, PropTypes.func])\n                .isRequired,\n        })\n    ).isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    activeBorderWidth: PropTypes.number.isRequired,\n    inactiveBorderWidth: PropTypes.number.isRequired,\n    borderColor: inheritedColorPropType.isRequired,\n    borderOpacity: PropTypes.number.isRequired,\n    activeBorderOpacity: PropTypes.number.isRequired,\n    inactiveBorderOpacity: PropTypes.number.isRequired,\n\n    startLabel: PropTypes.oneOfType([PropTypes.oneOf([false]), PropTypes.string, PropTypes.func])\n        .isRequired,\n    startLabelPadding: PropTypes.number.isRequired,\n    startLabelTextColor: inheritedColorPropType.isRequired,\n    endLabel: PropTypes.oneOfType([PropTypes.oneOf([false]), PropTypes.string, PropTypes.func])\n        .isRequired,\n    endLabelPadding: PropTypes.number.isRequired,\n    endLabelTextColor: inheritedColorPropType.isRequired,\n\n    enableGridX: PropTypes.bool.isRequired,\n    axisTop: axisPropType,\n    axisBottom: axisPropType,\n\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n}\n\nexport const AreaBumpPropTypes = {\n    ...commonPropTypes,\n    ...motionPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nconst commonDefaultProps = {\n    align: 'middle',\n\n    layers: ['grid', 'axes', 'labels', 'areas'],\n\n    interpolation: 'smooth',\n    spacing: 0,\n    xPadding: 0.6,\n\n    colors: { scheme: 'nivo' },\n    blendMode: 'normal',\n    fillOpacity: 0.8,\n    activeFillOpacity: 1,\n    inactiveFillOpacity: 0.15,\n    defs: [],\n    fill: [],\n    borderWidth: 1,\n    activeBorderWidth: 1,\n    inactiveBorderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 0.4]] },\n    borderOpacity: 1,\n    activeBorderOpacity: 1,\n    inactiveBorderOpacity: 0,\n\n    startLabel: false,\n    startLabelPadding: 12,\n    startLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    endLabel: 'id',\n    endLabelPadding: 12,\n    endLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    enableGridX: true,\n    axisTop: {},\n    axisBottom: {},\n\n    isInteractive: true,\n    tooltip: AreaTooltip,\n}\n\nexport const AreaBumpDefaultProps = {\n    ...commonDefaultProps,\n    animate: true,\n    motionConfig: 'gentle',\n    role: 'img',\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, useMemo, useCallback } from 'react'\nimport { area as d3Area, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { computeSeries } from './compute'\n\nexport const useAreaBumpSeries = ({ data, width, height, align, spacing, xPadding }) =>\n    useMemo(\n        () => computeSeries({ data, width, height, align, spacing, xPadding }),\n        [data, width, height, align, spacing, xPadding]\n    )\n\nexport const useAreaGenerator = interpolation =>\n    useMemo(\n        () =>\n            d3Area()\n                .x(d => d.x)\n                .y0(d => d.y0)\n                .y1(d => d.y1)\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear),\n        [interpolation]\n    )\n\nexport const useSerieDerivedProp = instruction =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nexport const useSerieStyle = ({\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    current,\n}) => {\n    const getFillOpacity = useSerieDerivedProp(fillOpacity)\n    const getActiveFillOpacity = useSerieDerivedProp(activeFillOpacity)\n    const getInactiveFillOpacity = useSerieDerivedProp(inactiveFillOpacity)\n\n    const getBorderWidth = useSerieDerivedProp(borderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp(activeBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp(inactiveBorderWidth)\n\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const getBorderOpacity = useSerieDerivedProp(borderOpacity)\n    const getActiveBorderOpacity = useSerieDerivedProp(activeBorderOpacity)\n    const getInactiveBorderOpacity = useSerieDerivedProp(inactiveBorderOpacity)\n\n    const getNormalStyle = useMemo(\n        () => serie => ({\n            fillOpacity: getFillOpacity(serie),\n            borderWidth: getBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getBorderOpacity(serie),\n        }),\n        [getFillOpacity, getBorderWidth, getBorderColor, getBorderOpacity]\n    )\n    const getActiveStyle = useMemo(\n        () => serie => ({\n            fillOpacity: getActiveFillOpacity(serie),\n            borderWidth: getActiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getActiveBorderOpacity(serie),\n        }),\n        [getActiveFillOpacity, getActiveBorderWidth, getBorderColor, getActiveBorderOpacity]\n    )\n    const getInactiveStyle = useMemo(\n        () => serie => ({\n            fillOpacity: getInactiveFillOpacity(serie),\n            borderWidth: getInactiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getInactiveBorderOpacity(serie),\n        }),\n        [getInactiveFillOpacity, getInactiveBorderWidth, getBorderColor, getInactiveBorderOpacity]\n    )\n\n    return useMemo(() => {\n        if (!isInteractive) return getNormalStyle\n\n        return serie => {\n            if (current === null) return getNormalStyle(serie)\n            if (serie.id === current) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        }\n    }, [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, current])\n}\n\nexport const useAreaBump = ({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n    interpolation,\n    colors,\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    current,\n}) => {\n    const {\n        series: rawSeries,\n        xScale,\n        heightScale,\n    } = useAreaBumpSeries({\n        data,\n        width,\n        height,\n        align,\n        spacing,\n        xPadding,\n    })\n\n    const areaGenerator = useAreaGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle({\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        current,\n    })\n\n    const series = useMemo(\n        () =>\n            rawSeries.map(serie => {\n                const nextSerie = { ...serie }\n                nextSerie.color = getColor(nextSerie)\n                nextSerie.style = getSerieStyle(nextSerie)\n                return nextSerie\n            }),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    return {\n        series,\n        xScale,\n        heightScale,\n        areaGenerator,\n    }\n}\n\nexport const useSerieHandlers = ({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setCurrent,\n    tooltip,\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setCurrent(serie.id)\n            onMouseEnter && onMouseEnter(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setCurrent]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove && onMouseMove(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setCurrent]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    const handlers = useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n\n    return handlers\n}\n\nexport const useSeriesLabels = ({ series, position, padding, color }) => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor\n        let signedPadding\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        return series.map(serie => {\n            const point =\n                position === 'start' ? serie.points[0] : serie.points[serie.points.length - 1]\n\n            return {\n                id: serie.id,\n                x: point.x + signedPadding,\n                y: point.y,\n                color: getColor(serie),\n                opacity: serie.style.fillOpacity,\n                serie,\n                textAnchor,\n            }\n        })\n    }, [series, position, padding, getColor])\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { scalePoint, scaleLinear } from 'd3-scale'\n\nexport const computeSeries = ({ data, width, height, align, spacing, xPadding }) => {\n    const slices = new Map()\n\n    let maxSum = null\n    let maxValues = null\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            if (!slices.has(datum.x)) {\n                slices.set(datum.x, {\n                    id: datum.x,\n                    total: 0,\n                    values: new Map(),\n                })\n            }\n\n            const slice = slices.get(datum.x)\n\n            const total = slice.total + datum.y\n            slice.total = total\n\n            slice.values.set(serie.id, {\n                serieId: serie.id,\n                value: datum.y,\n            })\n\n            if (total === null || total > maxSum) {\n                maxSum = total\n                maxValues = slice.values.size\n            }\n        })\n    })\n\n    const xScale = scalePoint().domain(Array.from(slices.keys())).range([0, width])\n\n    const heightScale = scaleLinear()\n        .domain([0, maxSum])\n        .range([0, height - maxValues * spacing])\n\n    slices.forEach((slice, x) => {\n        slice.x = xScale(x)\n        const sliceHeight = heightScale(slice.total) + slice.values.size * spacing\n\n        let offset = 0\n        if (align === 'middle') {\n            offset = (height - sliceHeight) / 2\n        } else if (align === 'end') {\n            offset = height - sliceHeight\n        }\n\n        Array.from(slice.values.values())\n            .sort((a, b) => b.value - a.value)\n            .forEach((value, position, all) => {\n                const previousValues = all.filter((i, pos) => pos < position)\n                const beforeValue = previousValues.reduce((t, v) => t + v.value, 0)\n\n                const sliceValue = slice.values.get(value.serieId)\n                sliceValue.position = position\n                sliceValue.height = heightScale(value.value)\n                sliceValue.beforeHeight =\n                    heightScale(beforeValue) + offset + spacing * (previousValues.length + 0.5)\n            })\n    })\n\n    const areaPointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series = data.map(serie => {\n        const serieCopy = { ...serie }\n        serieCopy.points = []\n        serieCopy.areaPoints = []\n        serie.data.forEach((datum, i) => {\n            const slice = slices.get(datum.x)\n            const position = slice.values.get(serie.id)\n\n            const x = slice.x\n            const { beforeHeight, height } = position\n            const y = beforeHeight + height / 2\n            const y0 = beforeHeight\n            const y1 = beforeHeight + height\n\n            serieCopy.points.push({\n                x,\n                y,\n                height,\n                data: { ...datum },\n            })\n            if (i > 0) {\n                serieCopy.areaPoints.push({ x: x - areaPointPadding, y0, y1 })\n            }\n            serieCopy.areaPoints.push({ x, y0, y1 })\n            if (i < serie.data.length - 1) {\n                serieCopy.areaPoints.push({ x: x + areaPointPadding, y0, y1 })\n            }\n        })\n\n        return serieCopy\n    })\n\n    return {\n        xScale,\n        heightScale,\n        series,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig, blendModePropType } from '@nivo/core'\nimport { useSerieHandlers } from './hooks'\n\nconst Area = ({\n    serie,\n    areaGenerator,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setCurrentSerie,\n    tooltip,\n}) => {\n    const handlers = useSerieHandlers({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setCurrent: setCurrentSerie,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(areaGenerator(serie.areaPoints))\n    const animatedProps = useSpring({\n        color: serie.color,\n        fillOpacity: serie.style.fillOpacity,\n        stroke: serie.style.borderColor,\n        strokeOpacity: serie.style.borderOpacity,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={serie.fill ? serie.fill : animatedProps.color}\n            fillOpacity={animatedProps.fillOpacity}\n            stroke={animatedProps.stroke}\n            strokeWidth={serie.style.borderWidth}\n            strokeOpacity={animatedProps.strokeOpacity}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={handlers.onMouseEnter}\n            onMouseMove={handlers.onMouseMove}\n            onMouseLeave={handlers.onMouseLeave}\n            onClick={handlers.onClick}\n        />\n    )\n}\n\nArea.propTypes = {\n    serie: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        color: PropTypes.string.isRequired,\n        fill: PropTypes.string,\n        areaPoints: PropTypes.array.isRequired,\n        style: PropTypes.shape({\n            fillOpacity: PropTypes.number.isRequired,\n            borderWidth: PropTypes.number.isRequired,\n            borderColor: PropTypes.string.isRequired,\n            borderOpacity: PropTypes.number.isRequired,\n        }).isRequired,\n    }).isRequired,\n    areaGenerator: PropTypes.func.isRequired,\n    blendMode: blendModePropType.isRequired,\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    setCurrentSerie: PropTypes.func.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n}\n\nexport default memo(Area)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { inheritedColorPropType } from '@nivo/colors'\nimport { useSeriesLabels } from './hooks'\n\nconst AreasLabels = ({ series, position, padding, color }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useSeriesLabels({\n        series,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return springs.map((animatedProps, index) => {\n        const label = labels[index]\n\n        return (\n            <animated.text\n                key={label.id}\n                x={animatedProps.x}\n                y={animatedProps.y}\n                textAnchor={label.textAnchor}\n                dominantBaseline=\"central\"\n                opacity={animatedProps.opacity}\n                style={{\n                    ...theme.labels.text,\n                    fill: label.color,\n                }}\n            >\n                {label.id}\n            </animated.text>\n        )\n    })\n}\n\nAreasLabels.propTypes = {\n    series: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n                    y: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n    position: PropTypes.oneOf(['start', 'end']).isRequired,\n    padding: PropTypes.number.isRequired,\n    color: inheritedColorPropType.isRequired,\n}\n\nexport default memo(AreasLabels)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useState, Fragment, useMemo } from 'react'\nimport { bindDefs, withContainer, useDimensions, SvgWrapper } from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { AreaBumpPropTypes, AreaBumpDefaultProps } from './props'\nimport { useAreaBump } from './hooks'\nimport Area from './Area'\nimport AreasLabels from './AreasLabels'\n\nconst AreaBump = props => {\n    const {\n        data,\n        align,\n\n        width,\n        height,\n        margin: partialMargin,\n\n        layers,\n\n        interpolation,\n        spacing,\n        xPadding,\n\n        colors,\n        blendMode,\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        defs,\n        fill,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n\n        startLabel,\n        startLabelPadding,\n        startLabelTextColor,\n        endLabel,\n        endLabelPadding,\n        endLabelTextColor,\n\n        enableGridX,\n        axisTop,\n        axisBottom,\n\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n        role,\n    } = props\n\n    const [currentSerie, setCurrentSerie] = useState(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { series, xScale, areaGenerator } = useAreaBump({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        align,\n        spacing,\n        xPadding,\n        interpolation,\n        colors,\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        current: currentSerie,\n    })\n\n    const boundDefs = useMemo(\n        () => bindDefs(defs, series, fill, { targetKey: 'fill' }),\n        [defs, series, fill]\n    )\n\n    const layerById = {\n        grid: enableGridX && (\n            <Grid key=\"grid\" width={innerWidth} height={innerHeight} xScale={xScale} />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                bottom={axisBottom}\n            />\n        ),\n        labels: [],\n        areas: (\n            <Fragment key=\"areas\">\n                {series.map(serie => (\n                    <Area\n                        key={serie.id}\n                        areaGenerator={areaGenerator}\n                        serie={serie}\n                        blendMode={blendMode}\n                        isInteractive={isInteractive}\n                        setCurrentSerie={setCurrentSerie}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                ))}\n            </Fragment>\n        ),\n    }\n\n    if (startLabel !== false) {\n        layerById.labels.push(\n            <AreasLabels\n                key=\"start\"\n                series={series}\n                position=\"start\"\n                padding={startLabelPadding}\n                color={startLabelTextColor}\n            />\n        )\n    }\n    if (endLabel !== false) {\n        layerById.labels.push(\n            <AreasLabels\n                key=\"end\"\n                series={series}\n                position=\"end\"\n                padding={endLabelPadding}\n                color={endLabelTextColor}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                outerWidth,\n                                outerHeight,\n                                series,\n                                xScale,\n                                areaGenerator,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nAreaBump.propTypes = AreaBumpPropTypes\nAreaBump.defaultProps = AreaBumpDefaultProps\n\nexport default memo(withContainer(AreaBump))\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport AreaBump from './AreaBump'\n\nconst ResponsiveAreaBump = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <AreaBump width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveAreaBump\n"],"names":["useSerieDerivedProp","i","useMemo","instruction","useBump","width","height","data","interpolation","xPadding","xOuterPadding","yOuterPadding","lineWidth","activeLineWidth","inactiveLineWidth","colors","opacity","activeOpacity","inactiveOpacity","pointSize","activePointSize","inactivePointSize","pointColor","pointBorderWidth","activePointBorderWidth","inactivePointBorderWidth","pointBorderColor","isInteractive","currentSerie","xValues","Set","yValues","forEach","serie","has","datum","x","add","y","Array","from","sort","a","b","xScale","scalePoint","domain","range","padding","yScale","linePointPadding","step","Math","min","series","map","rawSerie","points","linePoints","point","id","push","length","filter","rawSeries","lineGenerator","d3Line","curve","curveBasis","curveLinear","defined","d","getColor","useOrdinalColorScale","getSerieStyle","getLineWidth","getActiveLineWidth","getInactiveLineWidth","getOpacity","getActiveOpacity","getInactiveOpacity","getNormalStyle","getActiveStyle","getInactiveStyle","nextSerie","color","style","theme","useTheme","getPointColor","useInheritedColor","getPointBorderColor","getPointStyle","getSize","getActiveSize","getInactiveSize","getBorderWidth","getActiveBorderWidth","getInactiveBorderWidth","size","borderWidth","serieId","pts","rawPoint","isActive","isInactive","borderColor","LineTooltip","React","BasicTooltip","enableChip","memo","pointStyle","pointerEvents","Point","useMotionConfig","animate","springConfig","config","animatedProps","useSpring","radius","immediate","animated","circle","cx","cy","r","to","max","v","fill","strokeWidth","stroke","BumpDefaultProps","BumpPropTypes","PropTypes","isRequired","layers","ordinalColorsPropType","startLabel","startLabelPadding","startLabelTextColor","inheritedColorPropType","endLabel","endLabelPadding","endLabelTextColor","pointComponent","enableGridX","enableGridY","axisTop","axisPropType","axisRight","axisBottom","axisLeft","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","motionPropTypes","role","scheme","modifiers","motionConfig","Line","yStep","handlers","setCurrent","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","useCallback","e","createElement","event","handleMouseMove","handleMouseLeave","handleClick","setCurrentSerie","linePath","animatedPath","useAnimatedPath","path","strokeLinecap","strokeOpacity","LinesLabels","getLabel","position","labels","textAnchor","signedPadding","label","useSprings","index","text","key","dominantBaseline","Points","propTypes","Bump","props","partialMargin","margin","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","useState","layerById","grid","Grid","axes","Axes","top","right","bottom","left","lines","Fragment","bumpLayerContext","SvgWrapper","layer","defaultProps","withContainer","ResponsiveBump","ResponsiveWrapper","AreaTooltip","AreaBumpDefaultProps","AreaBumpPropTypes","align","spacing","blendMode","blendModePropType","fillOpacity","activeFillOpacity","inactiveFillOpacity","defs","match","activeBorderWidth","inactiveBorderWidth","borderOpacity","activeBorderOpacity","inactiveBorderOpacity","useAreaBump","current","slices","Map","maxSum","maxValues","set","total","values","slice","get","value","keys","heightScale","scaleLinear","sliceHeight","offset","all","previousValues","pos","beforeValue","reduce","t","sliceValue","beforeHeight","areaPointPadding","serieCopy","areaPoints","y0","y1","useAreaBumpSeries","areaGenerator","d3Area","getFillOpacity","getActiveFillOpacity","getInactiveFillOpacity","getBorderColor","getBorderOpacity","getActiveBorderOpacity","getInactiveBorderOpacity","Area","mixBlendMode","AreasLabels","AreaBump","boundDefs","bindDefs","targetKey","areas","ResponsiveAreaBump"],"sourceRoot":""}