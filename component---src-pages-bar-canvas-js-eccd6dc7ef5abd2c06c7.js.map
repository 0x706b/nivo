{"version":3,"file":"component---src-pages-bar-canvas-js-eccd6dc7ef5abd2c06c7.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-shape/src/constant.js","webpack://nivo-website/../node_modules/d3-time/src/day.js","webpack://nivo-website/./src/data/components/bar/generator.ts","webpack://nivo-website/./src/data/components/bar/mapper.tsx","webpack://nivo-website/./src/data/components/bar/props.ts","webpack://nivo-website/../src/color.ts","webpack://nivo-website/../src/sets/countryCodes.ts","webpack://nivo-website/../src/sets/names.ts","webpack://nivo-website/../src/sets/programmingLanguages.ts","webpack://nivo-website/../src/bullet.ts","webpack://nivo-website/../src/chord.ts","webpack://nivo-website/../src/network.ts","webpack://nivo-website/../src/parallelCoordinates.ts","webpack://nivo-website/../src/sankey.ts","webpack://nivo-website/../src/swarmplot.ts","webpack://nivo-website/../src/index.ts","webpack://nivo-website/./src/pages/bar/canvas.js","webpack://nivo-website/../node_modules/lodash/_arrayShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/_baseShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseValues.js","webpack://nivo-website/../node_modules/lodash/_shuffleSelf.js","webpack://nivo-website/../node_modules/lodash/random.js","webpack://nivo-website/../node_modules/lodash/shuffle.js","webpack://nivo-website/../node_modules/lodash/values.js"],"sourcesContent":["export default function (x) {\n  return function constant() {\n    return x;\n  };\n}","import interval from \"./interval.js\";\nimport { durationDay, durationMinute } from \"./duration.js\";\nvar day = interval(function (date) {\n  date.setHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setDate(date.getDate() + step);\n}, function (start, end) {\n  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n}, function (date) {\n  return date.getDate() - 1;\n});\nexport default day;\nexport var days = day.range;","import { generateCountriesData } from '@nivo/generators'\n\nconst dishes = [\n    'hot dog',\n    'burger',\n    'sandwich',\n    'kebab',\n    'fries',\n    'donut',\n    'junk',\n    'sushi',\n    'ramen',\n    'curry',\n    'udon',\n    'bagel',\n    'yakitori',\n    'takoyaki',\n    'tacos',\n    'miso soup',\n    'tortilla',\n    'tapas',\n    'chipirones',\n    'gazpacho',\n    'soba',\n    'bavette',\n    'steak',\n    'pizza',\n    'spaghetti',\n    'ravioli',\n    'salad',\n    'pad thai',\n    'bun',\n    'waffle',\n    'crepe',\n    'churros',\n    'paella',\n    'empanadas',\n    'bruschetta',\n    'onion soup',\n    'cassoulet',\n    'bouillabaisse',\n    'unagi',\n    'tempura',\n    'tonkatsu',\n    'shabu-shabu',\n    'twinkies',\n    'jerky',\n    'fajitas',\n    'jambalaya',\n    'meatloaf',\n    `mac n' cheese`,\n    'baked beans',\n    'popcorn',\n    'buffalo wings',\n    'BBQ ribs',\n    'apple pie',\n    'nachos',\n    'risotto',\n    'tiramisu',\n]\n\nexport const generateLightDataSet = () => ({\n    data: generateCountriesData(dishes.slice(0, 6), { size: 7, max: 200 }),\n    keys: dishes.slice(0, 6),\n})\n\nexport const generateHeavyDataSet = () => ({\n    data: generateCountriesData(dishes, { size: 21, max: 200 }),\n    keys: dishes,\n})\n","import React from 'react'\nimport styled from 'styled-components'\nimport { settingsMapper, mapAxis, mapFormat } from '../../../lib/settings'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n    background: #333;\n    padding: 12px 16px;\n    font-size: 12px;\n    border-radius: 2px;\n`\nconst TooltipKey = styled.span`\n    font-weight: 600;\n`\nconst TooltipValue = styled.span``\n\nconst CustomTooltip = ({ color, ...bar }: any) => {\n    return (\n        <TooltipWrapper style={{ color: color }}>\n            <TooltipKey>id</TooltipKey>\n            <TooltipValue>{bar.id}</TooltipValue>\n            <TooltipKey>value</TooltipKey>\n            <TooltipValue>{bar.value}</TooltipValue>\n            <TooltipKey>formattedValue</TooltipKey>\n            <TooltipValue>{bar.formattedValue}</TooltipValue>\n            <TooltipKey>index</TooltipKey>\n            <TooltipValue>{bar.index}</TooltipValue>\n            <TooltipKey>indexValue</TooltipKey>\n            <TooltipValue>{bar.indexValue}</TooltipValue>\n            <TooltipKey>color</TooltipKey>\n            <TooltipValue>{color}</TooltipValue>\n        </TooltipWrapper>\n    )\n}\n\nexport default settingsMapper(\n    {\n        valueFormat: mapFormat,\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n        tooltip: (_value: any, values: any) => {\n            if (!values['custom tooltip example']) return undefined\n\n            return CustomTooltip\n        },\n    },\n    {\n        exclude: [\n            'enable axisTop',\n            'enable axisRight',\n            'enable axisBottom',\n            'enable axisLeft',\n            'custom tooltip example',\n        ],\n    }\n)\n","import { svgDefaultProps } from '@nivo/bar'\nimport {\n    themeProperty,\n    motionProperties,\n    defsProperties,\n    getLegendsProps,\n    groupProperties,\n} from '../../../lib/componentProperties'\nimport {\n    chartDimensions,\n    ordinalColors,\n    chartGrid,\n    axes,\n    isInteractive,\n} from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg', 'canvas', 'api']\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        type: 'object[]',\n        required: true,\n        flavors: allFlavors,\n    },\n    {\n        key: 'indexBy',\n        group: 'Base',\n        help: 'Key to use to index the data.',\n        description: `\n            Key to use to index the data,\n            this key must exist in each data item.\n\n            You can also provide a function which will\n            receive the data item and must return the desired index.\n        `,\n        type: 'string | (datum: RawDatum): string | number',\n        flavors: allFlavors,\n        required: false,\n        defaultValue: svgDefaultProps.indexBy,\n    },\n    {\n        key: 'keys',\n        group: 'Base',\n        help: 'Keys to use to determine each serie.',\n        type: 'string[]',\n        flavors: allFlavors,\n        required: false,\n        defaultValue: svgDefaultProps.keys,\n    },\n    {\n        key: 'groupMode',\n        group: 'Base',\n        help: `How to group bars.`,\n        type: `'grouped' | 'stacked'`,\n        flavors: allFlavors,\n        required: false,\n        defaultValue: svgDefaultProps.groupMode,\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'stacked', value: 'stacked' },\n                { label: 'grouped', value: 'grouped' },\n            ],\n        },\n    },\n    {\n        key: 'layout',\n        group: 'Base',\n        help: `How to display bars.`,\n        type: `'horizontal' | 'vertical'`,\n        flavors: allFlavors,\n        required: false,\n        defaultValue: svgDefaultProps.layout,\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'horizontal', value: 'horizontal' },\n                { label: 'vertical', value: 'vertical' },\n            ],\n        },\n    },\n    {\n        key: 'valueScale',\n        group: 'Base',\n        type: 'object',\n        help: `value scale configuration.`,\n        defaultValue: svgDefaultProps.valueScale,\n        flavors: allFlavors,\n        required: false,\n        control: {\n            type: 'object',\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type.`,\n                    type: 'string',\n                    required: true,\n                    flavors: allFlavors,\n                    control: {\n                        type: 'choices',\n                        disabled: true,\n                        choices: ['linear', 'symlog'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'indexScale',\n        group: 'Base',\n        type: 'object',\n        help: `index scale configuration.`,\n        defaultValue: svgDefaultProps.indexScale,\n        flavors: allFlavors,\n        required: false,\n        control: {\n            type: 'object',\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type.`,\n                    type: 'string',\n                    required: true,\n                    flavors: ['svg', 'canvas', 'api'],\n                    control: {\n                        type: 'choices',\n                        disabled: true,\n                        choices: ['band'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n                {\n                    key: 'round',\n                    required: true,\n                    flavors: ['svg', 'canvas', 'api'],\n                    help: 'Toggle index scale (for bar width) rounding.',\n                    type: 'boolean',\n                    control: { type: 'switch' },\n                },\n            ],\n        },\n    },\n    {\n        key: 'reverse',\n        group: 'Base',\n        help: 'Reverse bars, starts on top instead of bottom for vertical layout and right instead of left for horizontal one.',\n        type: 'boolean',\n        required: false,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.reverse,\n        control: { type: 'switch' },\n    },\n    {\n        key: 'minValue',\n        group: 'Base',\n        help: 'Minimum value.',\n        description: `\n            Minimum value, if 'auto',\n            will use min value from the provided data.\n        `,\n        required: false,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.minValue,\n        type: `number | 'auto'`,\n        control: {\n            type: 'switchableRange',\n            disabledValue: 'auto',\n            defaultValue: -1000,\n            min: -1000,\n            max: 0,\n        },\n    },\n    {\n        key: 'maxValue',\n        group: 'Base',\n        help: 'Maximum value.',\n        description: `\n            Maximum value, if 'auto',\n            will use max value from the provided data.\n        `,\n        required: false,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.maxValue,\n        type: `number | 'auto'`,\n        control: {\n            type: 'switchableRange',\n            disabledValue: 'auto',\n            defaultValue: 1000,\n            min: 0,\n            max: 1000,\n        },\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        flavors: allFlavors,\n        type: 'string | (value: number) => string | number',\n        control: { type: 'valueFormat' },\n    },\n    {\n        key: 'padding',\n        help: 'Padding between each bar (ratio).',\n        type: 'number',\n        required: false,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.padding,\n        group: 'Base',\n        control: {\n            type: 'range',\n            min: 0,\n            max: 0.9,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'innerPadding',\n        help: 'Padding between grouped/stacked bars.',\n        type: 'number',\n        required: false,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.innerPadding,\n        group: 'Base',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 10,\n        },\n    },\n    ...chartDimensions(allFlavors),\n    themeProperty(allFlavors),\n    ordinalColors({\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.colors,\n    }),\n    {\n        key: 'colorBy',\n        type: `'id' | 'indexValue'`,\n        help: 'Property used to determine node color.',\n        description: `\n            Property to use to determine node color.\n        `,\n        flavors: allFlavors,\n        required: false,\n        defaultValue: svgDefaultProps.colorBy,\n        group: 'Style',\n        control: {\n            type: 'choices',\n            choices: [\n                {\n                    label: 'id',\n                    value: 'id',\n                },\n                {\n                    label: 'indexValue',\n                    value: 'indexValue',\n                },\n            ],\n        },\n    },\n    {\n        key: 'borderRadius',\n        help: 'Rectangle border radius.',\n        type: 'number',\n        flavors: ['svg', 'canvas', 'api'],\n        required: false,\n        defaultValue: svgDefaultProps.borderRadius,\n        group: 'Style',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 36,\n        },\n    },\n    {\n        key: 'borderWidth',\n        help: 'Width of bar border.',\n        type: 'number',\n        flavors: ['svg', 'canvas', 'api'],\n        required: false,\n        defaultValue: svgDefaultProps.borderWidth,\n        group: 'Style',\n        control: { type: 'lineWidth' },\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute border color.',\n        description: `\n            how to compute border color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        type: 'string | object | Function',\n        flavors: ['svg', 'canvas', 'api'],\n        required: false,\n        defaultValue: svgDefaultProps.borderColor,\n        group: 'Style',\n        control: { type: 'inheritedColor' },\n    },\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'layers',\n        flavors: ['svg', 'canvas'],\n        help: 'Defines the order of layers.',\n        description: `\n            Defines the order of layers, available layers are:\n            \\`grid\\`, \\`axes\\`, \\`bars\\`, \\`markers\\`, \\`legends\\`,\n            \\`annotations\\`. The \\`markers\\` layer is not available\n            in the canvas flavor.\n\n            You can also use this to insert extra layers to the chart,\n            this extra layer must be a function which will receive\n            the chart computed data and must return a valid SVG\n            element.\n        `,\n        type: 'Array<string | Function>',\n        required: false,\n        defaultValue: svgDefaultProps.layers,\n        group: 'Customization',\n    },\n    {\n        key: 'enableLabel',\n        help: 'Enable/disable labels.',\n        type: 'boolean',\n        flavors: ['svg', 'canvas', 'api'],\n        required: false,\n        defaultValue: svgDefaultProps.enableLabel,\n        group: 'Labels',\n        control: { type: 'switch' },\n    },\n    {\n        key: 'label',\n        group: 'Labels',\n        help: 'Define how bar labels are computed.',\n        description: `\n            Define how bar labels are computed.\n\n            By default it will use the bar's value.\n            It accepts a string which will be used to access\n            a specific bar data property, such as\n            \\`'value'\\` or \\`'id'\\`.\n\n            You can also use a funtion if you want to\n            add more logic, this function will receive\n            the current bar's data and must return\n            the computed label which, depending on the context,\n            should return a string or an svg element (Bar) or\n            a string (BarCanvas). For example let's say you want\n            to use a label with both the id and the value,\n            you can achieve this with:\n            \\`\\`\\`\n            label={d => \\`\\${d.id}: \\${d.value}\\`}\n            \\`\\`\\`\n        `,\n        type: 'string | Function',\n        flavors: ['svg', 'canvas', 'api'],\n        required: false,\n        defaultValue: svgDefaultProps.label,\n    },\n    {\n        key: 'labelSkipWidth',\n        help: 'Skip label if bar width is lower than provided value, ignored if 0.',\n        type: 'number',\n        flavors: ['svg', 'canvas', 'api'],\n        required: false,\n        defaultValue: svgDefaultProps.labelSkipWidth,\n        group: 'Labels',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 36,\n        },\n    },\n    {\n        key: 'labelSkipHeight',\n        help: 'Skip label if bar height is lower than provided value, ignored if 0.',\n        type: 'number',\n        flavors: ['svg', 'canvas', 'api'],\n        required: false,\n        defaultValue: svgDefaultProps.labelSkipHeight,\n        group: 'Labels',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 36,\n        },\n    },\n    {\n        key: 'labelTextColor',\n        help: 'Defines how to compute label text color.',\n        type: 'string | object | Function',\n        flavors: ['svg', 'canvas', 'api'],\n        required: false,\n        defaultValue: svgDefaultProps.labelTextColor,\n        control: { type: 'inheritedColor' },\n        group: 'Labels',\n    },\n    ...chartGrid({\n        flavors: allFlavors,\n        xDefault: svgDefaultProps.enableGridX,\n        yDefault: svgDefaultProps.enableGridY,\n        values: true,\n    }),\n    ...axes({ flavors: allFlavors }),\n    isInteractive({\n        flavors: ['svg', 'canvas'],\n        defaultValue: svgDefaultProps.isInteractive,\n    }),\n    {\n        key: 'tooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Tooltip custom component',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will receive\n            the following data:\n            \\`\\`\\`\n            {\n                bar: {\n                    id:             string | number,\n                    value:          number,\n                    formattedValue: string,\n                    index:          number,\n                    indexValue:     string | number,\n                    // datum associated to the current index (raw data)\n                    data:           object\n                },\n                color: string,\n                label: string\n            }\n            \\`\\`\\`\n            You can also customize the style of the tooltip\n            using the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'Showcase custom tooltip component.',\n        type: 'boolean',\n        required: false,\n        control: { type: 'switch' },\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'onClick handler',\n        description: `\n            onClick handler, will receive node data as first argument\n            & event as second one. The node data has the following shape:\n\n            \\`\\`\\`\n            {\n                id:             string | number,\n                value:          number,\n                formattedValue: string,\n                index:          number,\n                indexValue:     string | number,\n                color:          string,\n                // datum associated to the current index (raw data)\n                data:           object\n            }\n            \\`\\`\\`\n        `,\n    },\n    {\n        key: 'legends',\n        flavors: ['svg', 'canvas'],\n        type: 'object[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        required: false,\n        control: {\n            type: 'array',\n            props: getLegendsProps(['svg']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index: number, legend: any) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            svgDefaultProps: {\n                dataFrom: 'keys',\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: (data: any) => {\n                    console.log(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n    ...motionProperties(['svg'], svgDefaultProps, 'react-spring'),\n    {\n        key: 'isFocusable',\n        flavors: ['svg'],\n        required: false,\n        group: 'Accessibility',\n        help: 'Make the root SVG element and each bar item focusable, for keyboard navigation.',\n        description: `\n            If enabled, focusing will also reveal the tooltip if \\`isInteractive\\` is \\`true\\`,\n            when a bar gains focus and hide it on blur.\n            \n            Also note that if this option is enabled, focusing a bar will reposition the tooltip\n            at a fixed location.\n        `,\n        type: 'boolean',\n        control: { type: 'switch' },\n    },\n    {\n        key: 'ariaLabel',\n        flavors: ['svg'],\n        required: false,\n        group: 'Accessibility',\n        help: 'Main element [aria-label](https://www.w3.org/TR/wai-aria/#aria-label).',\n        type: 'string',\n    },\n    {\n        key: 'ariaLabelledBy',\n        flavors: ['svg'],\n        required: false,\n        group: 'Accessibility',\n        help: 'Main element [aria-labelledby](https://www.w3.org/TR/wai-aria/#aria-labelledby).',\n        type: 'string',\n    },\n    {\n        key: 'ariaDescribedBy',\n        flavors: ['svg'],\n        required: false,\n        group: 'Accessibility',\n        help: 'Main element [aria-describedby](https://www.w3.org/TR/wai-aria/#aria-describedby).',\n        type: 'string',\n    },\n    {\n        key: 'barAriaLabel',\n        flavors: ['svg'],\n        required: false,\n        group: 'Accessibility',\n        help: '[aria-label](https://www.w3.org/TR/wai-aria/#aria-label) for bar items.',\n        type: '(data) => string',\n    },\n    {\n        key: 'barAriaLabelledBy',\n        flavors: ['svg'],\n        required: false,\n        group: 'Accessibility',\n        help: '[aria-labelledby](https://www.w3.org/TR/wai-aria/#aria-labelledby) for bar items.',\n        type: '(data) => string',\n    },\n    {\n        key: 'barAriaDescribedBy',\n        flavors: ['svg'],\n        required: false,\n        group: 'Accessibility',\n        help: '[aria-describedby](https://www.w3.org/TR/wai-aria/#aria-describedby) for bar items.',\n        type: '(data) => string',\n    },\n]\n\nexport const groups = groupProperties(props)\n","export const randColor = () => `hsl(${Math.round(Math.random() * 360)}, 70%, 50%)`\n","export const countryCodes = [\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AS',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CC',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CU',\n    'CV',\n    'CW',\n    'CX',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FM',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HM',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IR',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KP',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MH',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MP',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NF',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PW',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SY',\n    'SZ',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'UM',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VI',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n]\n","export const names = [\n    'John',\n    'Raoul',\n    'Jane',\n    'Marcel',\n    'Ibrahim',\n    'Junko',\n    'Lyu',\n    'André',\n    'Maki',\n    'Véronique',\n    'Thibeau',\n    'Josiane',\n    'Raphaël',\n    'Mathéo',\n    'Margot',\n    'Hugo',\n    'Christian',\n    'Louis',\n    'Ella',\n    'Alton',\n    'Jimmy',\n    'Guillaume',\n    'Sébastien',\n    'Alfred',\n    'Bon',\n    'Solange',\n    'Kendrick',\n    'Jared',\n    'Satoko',\n    'Tomoko',\n    'Line',\n    'Delphine',\n    'Leonard',\n    'Alphonse',\n    'Lisa',\n    'Bart',\n    'Benjamin',\n    'Homer',\n    'Jack',\n]\n","export const programmingLanguages = [\n    'php',\n    'make',\n    'javascript',\n    'go',\n    'erlang',\n    'elixir',\n    'lisp',\n    'haskell',\n    'python',\n    'ruby',\n    'hack',\n    'scala',\n    'java',\n    'rust',\n    'c',\n    'css',\n    'sass',\n    'stylus',\n]\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\ntype Options = Partial<{\n    float: boolean\n    markerCount: number\n    measureCount: number\n    rangeCount: number\n    subtitle: string\n    title: string\n}>\n\nexport const generateBulletData = (\n    id: string,\n    max: number,\n    {\n        title,\n        subtitle,\n        rangeCount = 5,\n        measureCount = 1,\n        markerCount = 1,\n        float = false,\n    }: Options = {}\n) => {\n    const ranges = range(rangeCount - 1).reduce(\n        acc => {\n            const remaining = max - acc[0]\n            return [random(remaining, float), ...acc]\n        },\n        [max]\n    )\n\n    const measures = range(measureCount).reduce<number[]>(acc => {\n        if (acc.length === 0) return [random(max, float)]\n        return [random(acc[0], float), ...acc]\n    }, [])\n\n    const markers = range(markerCount).map(() => max * 0.6 + random(max * 0.4))\n\n    return {\n        id,\n        title,\n        subtitle,\n        ranges,\n        measures,\n        markers,\n    }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport { names } from './sets'\n\nexport const generateChordData = ({\n    keys = names,\n    size = 7,\n    minValue = 0,\n    maxValue = 2000,\n} = {}) => {\n    const maxSize = Math.min(keys.length, size)\n    const selectedKeys = keys.slice(0, maxSize)\n\n    const matrix = range(maxSize).map(() =>\n        range(maxSize).map(() => {\n            if (Math.random() < 0.66) return random(minValue, maxValue / 4)\n            return random(minValue, maxValue)\n        })\n    )\n\n    return { matrix, keys: selectedKeys }\n}\n","import random from 'lodash/random'\n\ntype Link = {\n    distance: number\n    source: string\n    target: string\n}\n\ntype ExtraNode = {\n    color: string\n    depth: number\n    id: string\n    radius: number\n}\n\nexport const generateNetworkData = ({\n    rootNodeRadius = 12,\n    minMidNodes = 6,\n    maxMidNodes = 16,\n    midNodeRadius = 8,\n    minLeaves = 4,\n    maxLeaves = 16,\n    leafRadius = 4,\n} = {}) => {\n    const rootNode = {\n        id: '0',\n        radius: rootNodeRadius,\n        depth: 0,\n        color: 'rgb(244, 117, 96)',\n    }\n    let nodes = Array.from({ length: random(minMidNodes, maxMidNodes) }, (_, k) => ({\n        id: `${k + 1}`,\n        radius: midNodeRadius,\n        depth: 1,\n        color: 'rgb(97, 205, 187)',\n    }))\n\n    const links: Link[] = []\n    const extraNodes: ExtraNode[] = []\n    nodes.forEach(source => {\n        links.push({\n            source: '0',\n            target: source.id,\n            distance: 50,\n        })\n        nodes.forEach(target => {\n            if (Math.random() < 0.04) {\n                links.push({\n                    source: source.id,\n                    target: target.id,\n                    distance: 70,\n                })\n            }\n        })\n        Array.from({ length: random(minLeaves, maxLeaves) }, (_, k) => {\n            extraNodes.push({\n                id: `${source.id}.${k}`,\n                radius: leafRadius,\n                depth: 2,\n                color: 'rgb(232, 193, 160)',\n            })\n            links.push({\n                source: source.id,\n                target: `${source.id}.${k}`,\n                distance: 30,\n            })\n\n            return null\n        })\n    })\n\n    nodes.push(rootNode)\n    nodes = nodes.concat(extraNodes)\n\n    return { nodes, links }\n}\n","import random from 'lodash/random'\nimport range from 'lodash/range'\nimport shuffle from 'lodash/shuffle'\n\ntype Options = Partial<{\n    size: number\n    keys: Array<{\n        key: string\n        random?: [number, number]\n        shuffle?: string[]\n    }>\n}>\n\nexport const generateParallelCoordinatesData = ({\n    size = 26,\n    keys = [\n        { key: 'temp', random: [-10, 40] },\n        { key: 'cost', random: [200, 400000] },\n        { key: 'color', shuffle: ['red', 'yellow', 'green'] },\n        { key: 'target', shuffle: ['A', 'B', 'C', 'D', 'E'] },\n        { key: 'volume', random: [0.2, 7.6] },\n    ],\n}: Options = {}) => {\n    const datumGenerator = () =>\n        keys.reduce((acc, key) => {\n            let value\n            if (key.random !== undefined) {\n                value = random(...key.random)\n            } else if (key.shuffle !== undefined) {\n                value = shuffle(key.shuffle)[0]\n            }\n\n            return { ...acc, [key.key]: value }\n        }, {})\n\n    return range(size).map(datumGenerator)\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { randColor } from './color'\nimport { names } from './sets'\n\ntype Link = {\n    source: string\n    target: string\n    value: number\n}\n\nconst availableNodes = names.map(name => ({ id: name }))\n\nconst getNodeTargets = (id: string, links: Link[], currentPath?: string[]): string[] => {\n    const targets = links\n        .filter(({ source }) => source === id)\n        .map(({ target }) => {\n            if (target === id) {\n                throw new Error(\n                    `[sankey] a node cannot be linked on itself:\\n  link: ${id} —> ${id}`\n                )\n            }\n            if (currentPath?.includes(target)) {\n                throw new Error(\n                    `[sankey] found cyclic dependency:\\n  link: ${currentPath.join(\n                        ' —> '\n                    )} —> ${target}`\n                )\n            }\n            return target\n        })\n\n    return targets.reduce(\n        (acc, targetId) =>\n            acc.concat(\n                getNodeTargets(\n                    targetId,\n                    links,\n                    currentPath ? [...currentPath, targetId] : [id, targetId]\n                )\n            ),\n        targets\n    )\n}\n\nconst getNodesTargets = (links: Link[]) =>\n    links.reduce<Record<string, string[]>>((targetsById, link) => {\n        if (!targetsById[link.source]) {\n            targetsById[link.source] = getNodeTargets(link.source, links)\n        }\n\n        return targetsById\n    }, {})\n\nexport const generateSankeyData = ({\n    nodeCount,\n    maxIterations = 3,\n}: {\n    nodeCount?: number\n    maxIterations?: number\n} = {}) => {\n    const nodes = availableNodes.slice(0, nodeCount).map(node =>\n        Object.assign({}, node, {\n            nodeColor: randColor(),\n        })\n    )\n\n    const links: Link[] = []\n    shuffle(nodes).forEach(({ id }) => {\n        range(random(1, maxIterations)).forEach(() => {\n            const targetsById = getNodesTargets(links)\n            const randId = shuffle(nodes.filter(n => n.id !== id).map(n => n.id))[0]\n            if (\n                (!targetsById[randId] || !targetsById[randId].includes(id)) &&\n                (!targetsById[id] || !targetsById[id].includes(randId))\n            ) {\n                links.push({\n                    source: id,\n                    target: randId,\n                    value: random(5, 200),\n                })\n            }\n        })\n    })\n\n    return { nodes, links }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\n\ntype SwarmPlotDatum = {\n    id: string\n    categories?: number[]\n    group: string\n    price: number\n    volume: number\n}\n\nconst randomPrice = () => random(0, 500)\nconst randomVolume = () => random(4, 20)\nconst randomCategory = () => random(3, 17)\n\nexport const generateSwarmPlotData = (\n    groups: string[],\n    { min = 60, max = 100, categoryCount = 0 }\n) => ({\n    groups,\n    data: groups.reduce<SwarmPlotDatum[]>(\n        (acc, group, groupIndex) => [\n            ...acc,\n            ...range(random(min, max))\n                .map(() => randomPrice())\n                .map((price, index) => {\n                    const datum: SwarmPlotDatum = {\n                        id: `${groupIndex}.${index}`,\n                        group,\n                        price,\n                        volume: randomVolume(),\n                    }\n\n                    if (categoryCount > 0) {\n                        datum.categories = range(categoryCount).map(randomCategory)\n                    }\n\n                    return datum\n                }),\n        ],\n        []\n    ),\n})\n\nexport const randomizeSwarmPlotData = (previousData: ReturnType<typeof generateSwarmPlotData>) => ({\n    groups: previousData.groups,\n    data: previousData.data.map(d => {\n        const datum = {\n            ...d,\n            group: shuffle(previousData.groups)[0],\n            price: randomPrice(),\n            volume: randomVolume(),\n        }\n\n        if (d.categories !== undefined) {\n            datum.categories = range(3).map(randomCategory)\n        }\n\n        return datum\n    }),\n})\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { timeDays } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport * as color from './color'\nimport * as sets from './sets'\n\nexport { sets }\nexport const randColor = color.randColor\n\nexport const generateProgrammingLanguageStats = (shouldShuffle = true, limit = -1) => {\n    let langs = sets.programmingLanguages\n    if (shouldShuffle) {\n        langs = shuffle(langs)\n    }\n    if (limit < 1) {\n        limit = 1 + Math.round(Math.random() * (sets.programmingLanguages.length - 1))\n    }\n\n    return langs.slice(0, limit).map(language => ({\n        label: language,\n        value: Math.round(Math.random() * 600),\n        color: randColor(),\n    }))\n}\n\nexport const uniqRand = <T>(generator: (...args: unknown[]) => T) => {\n    const used: T[] = []\n\n    return (...args: unknown[]) => {\n        let value\n        do {\n            value = generator(...args)\n        } while (used.includes(value))\n\n        used.push(value)\n\n        return value\n    }\n}\n\nexport const randCountryCode = () => shuffle(sets.countryCodes)[0]\n\ntype DrinkDatum = {\n    id: string\n    color: string\n    data: Array<{\n        color: string\n        x: string\n        y: number\n    }>\n}\n\nexport const generateDrinkStats = (xSize = 16) => {\n    const rand = () => random(0, 60)\n    const types = ['whisky', 'rhum', 'gin', 'vodka', 'cognac']\n    const country = uniqRand(randCountryCode)\n\n    const data: DrinkDatum[] = types.map(id => ({\n        id,\n        color: randColor(),\n        data: [],\n    }))\n\n    range(xSize).forEach(() => {\n        const x = country()\n        types.forEach(id => {\n            data.find(d => d.id === id)?.data.push({\n                color: randColor(),\n                x,\n                y: rand(),\n            })\n        })\n    })\n\n    return data\n}\n\nexport const generateSerie = (xSize = 20) => {\n    const max = 100 + Math.random() * (Math.random() * 600)\n\n    return range(xSize).map(() => Math.round(Math.random() * max))\n}\n\nexport const generateSeries = (ids: string[], xKeys: string[]) =>\n    ids.map(id => ({\n        id,\n        color: randColor(),\n        data: xKeys.map(x => ({ x, y: Math.round(Math.random() * 300) })),\n    }))\n\nexport const generateStackData = (size = 3) => {\n    const length = 16\n    return range(size).map(() => generateSerie(length).map((v, i) => ({ x: i, y: v })))\n}\n\nexport const generateCountriesPopulation = (size: number) => {\n    const countryCode = uniqRand(randCountryCode)\n\n    return range(size).map(() => ({\n        country: countryCode(),\n        population: 200 + Math.round(Math.random() * Math.random() * 1000000),\n    }))\n}\n\nexport const generateOrderedDayCounts = (from: Date, to: Date) => {\n    const days = timeDays(from, to)\n    const dayFormat = timeFormat('%Y-%m-%d')\n\n    return days.map(day => {\n        return {\n            value: Math.round(Math.random() * 400),\n            day: dayFormat(day),\n        }\n    })\n}\n\nexport const generateDayCounts = (from: Date, to: Date, maxSize = 0.9) => {\n    const days = generateOrderedDayCounts(from, to)\n\n    const size =\n        Math.round(days.length * (maxSize * 0.4)) +\n        Math.round(Math.random() * (days.length * (maxSize * 0.6)))\n\n    return shuffle(days).slice(0, size)\n}\n\nexport const generateCountriesData = (\n    keys: string[],\n    { size = 12, min = 0, max = 200, withColors = true } = {}\n) =>\n    sets.countryCodes.slice(0, size).map(country => {\n        const d: Record<string, unknown> = {\n            country,\n        }\n        keys.forEach(key => {\n            d[key] = random(min, max)\n            if (withColors === true) {\n                d[`${key}Color`] = randColor()\n            }\n        })\n\n        return d\n    })\n\nconst libTreeItems = [\n    [\n        'viz',\n        [\n            ['stack', [['cchart'], ['xAxis'], ['yAxis'], ['layers']]],\n            [\n                'ppie',\n                [\n                    ['chart', [['pie', [['outline'], ['slices'], ['bbox']]], ['donut'], ['gauge']]],\n                    ['legends'],\n                ],\n            ],\n        ],\n    ],\n    ['colors', [['rgb'], ['hsl']]],\n    [\n        'utils',\n        [['randomize'], ['resetClock'], ['noop'], ['tick'], ['forceGC'], ['stackTrace'], ['dbg']],\n    ],\n    ['generators', [['address'], ['city'], ['animal'], ['movie'], ['user']]],\n    [\n        'set',\n        [\n            ['clone'],\n            ['intersect'],\n            ['merge'],\n            ['reverse'],\n            ['toArray'],\n            ['toObject'],\n            ['fromCSV'],\n            ['slice'],\n            ['append'],\n            ['prepend'],\n            ['shuffle'],\n            ['pick'],\n            ['plouc'],\n        ],\n    ],\n    [\n        'text',\n        [\n            ['trim'],\n            ['slugify'],\n            ['snakeCase'],\n            ['camelCase'],\n            ['repeat'],\n            ['padLeft'],\n            ['padRight'],\n            ['sanitize'],\n            ['ploucify'],\n        ],\n    ],\n    [\n        'misc',\n        [\n            ['greetings', [['hey'], ['HOWDY'], ['aloha'], ['AHOY']]],\n            ['other'],\n            [\n                'path',\n                [\n                    ['pathA'],\n                    ['pathB', [['pathB1'], ['pathB2'], ['pathB3'], ['pathB4']]],\n                    [\n                        'pathC',\n                        [\n                            ['pathC1'],\n                            ['pathC2'],\n                            ['pathC3'],\n                            ['pathC4'],\n                            ['pathC5'],\n                            ['pathC6'],\n                            ['pathC7'],\n                            ['pathC8'],\n                            ['pathC9'],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n]\n\nexport const generateLibTree = (name = 'nivo', limit?: number | null, children = libTreeItems) => {\n    limit = limit || children.length\n    if (limit > children.length) {\n        limit = children.length\n    }\n\n    const tree: Record<string, unknown> = {\n        name,\n        color: randColor(),\n    }\n    if (children?.length > 0) {\n        tree.children = range(limit).map((_, i) => {\n            const leaf = children[i]\n\n            // full path `${name}.${leaf[0]}`\n            return generateLibTree(leaf[0] as string, null, (leaf[1] ?? []) as any)\n        })\n    } else {\n        tree.loc = Math.round(Math.random() * 200000)\n    }\n\n    return tree\n}\n\nconst wines = ['chardonay', 'carmenere', 'syrah']\nconst wineTastes = ['fruity', 'bitter', 'heavy', 'strong', 'sunny']\n\nexport const generateWinesTastes = ({ randMin = 20, randMax = 120 } = {}) => {\n    const data = wineTastes.map(taste => {\n        const d: Record<string, unknown> = { taste }\n        wines.forEach(wine => {\n            d[wine] = random(randMin, randMax)\n        })\n\n        return d\n    })\n\n    return { data, keys: wines }\n}\n\nexport * from './bullet'\nexport * from './chord'\nexport * from './network'\nexport * from './parallelCoordinates'\nexport * from './sankey'\nexport * from './swarmplot'\n","import React from 'react'\nimport { ResponsiveBarCanvas } from '@nivo/bar'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/bar/meta.yml'\nimport { generateHeavyDataSet } from '../../data/components/bar/generator'\nimport mapper from '../../data/components/bar/mapper'\nimport { groups } from '../../data/components/bar/props'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Tooltip = data => {\n    /* return custom tooltip */\n}\n\nconst initialProperties = {\n    indexBy: 'country',\n\n    margin: {\n        top: 50,\n        right: 60,\n        bottom: 50,\n        left: 60,\n    },\n\n    pixelRatio:\n        typeof window !== 'undefined' && window.devicePixelRatio ? window.devicePixelRatio : 1,\n\n    padding: 0.15,\n    innerPadding: 0,\n    minValue: 'auto',\n    maxValue: 'auto',\n\n    groupMode: 'stacked',\n    layout: 'horizontal',\n    reverse: false,\n\n    valueScale: { type: 'linear' },\n    indexScale: { type: 'band', round: true },\n    valueFormat: { format: '', enabled: false },\n\n    colors: { scheme: 'red_blue' },\n    colorBy: 'id',\n    borderWidth: 0,\n    borderRadius: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1.6]],\n    },\n\n    axisTop: {\n        enable: true,\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 36,\n    },\n    axisRight: {\n        enable: false,\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 0,\n    },\n    axisBottom: {\n        enable: true,\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'country',\n        legendPosition: 'middle',\n        legendOffset: 36,\n    },\n    axisLeft: {\n        enable: true,\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'food',\n        legendPosition: 'middle',\n        legendOffset: -40,\n    },\n\n    enableGridX: true,\n    enableGridY: false,\n\n    enableLabel: true,\n    labelSkipWidth: 12,\n    labelSkipHeight: 12,\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 1.6]],\n    },\n\n    isInteractive: true,\n    'custom tooltip example': false,\n    tooltip: null,\n\n    legends: [],\n}\n\nconst BarCanvas = () => {\n    const {\n        image: {\n            childImageSharp: { gatsbyImageData: image },\n        },\n    } = useStaticQuery(graphql`\n        query {\n            image: file(absolutePath: { glob: \"**/src/assets/captures/bar-canvas.png\" }) {\n                childImageSharp {\n                    gatsbyImageData(layout: FIXED, width: 700, quality: 100)\n                }\n            }\n        }\n    `)\n\n    return (\n        <ComponentTemplate\n            name=\"BarCanvas\"\n            meta={meta.BarCanvas}\n            icon=\"bar\"\n            flavors={meta.flavors}\n            currentFlavor=\"canvas\"\n            properties={groups}\n            initialProperties={initialProperties}\n            propertiesMapper={mapper}\n            codePropertiesMapper={(properties, data) => ({\n                keys: data.keys,\n                ...properties,\n                tooltip: properties.tooltip ? Tooltip : undefined,\n            })}\n            generateData={generateHeavyDataSet}\n            getTabData={data => data.data}\n            image={image}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveBarCanvas\n                        data={data.data}\n                        keys={data.keys}\n                        {...properties}\n                        theme={theme}\n                        onClick={node =>\n                            logAction({\n                                type: 'click',\n                                label: `[bar] ${node.id} - ${node.indexValue}: ${node.value}`,\n                                color: node.color,\n                                data: node,\n                            })\n                        }\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default BarCanvas\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n"],"names":["x","day","date","setHours","step","setDate","getDate","start","end","getTimezoneOffset","days","range","dishes","generateLightDataSet","data","generateCountriesData","slice","size","max","keys","generateHeavyDataSet","TooltipWrapper","styled","TooltipKey","TooltipValue","CustomTooltip","color","bar","style","id","value","formattedValue","index","indexValue","settingsMapper","valueFormat","mapFormat","axisTop","mapAxis","axisRight","axisBottom","axisLeft","tooltip","_value","values","exclude","allFlavors","props","key","group","help","type","required","flavors","description","defaultValue","svgDefaultProps","control","choices","label","disabled","map","v","disabledValue","min","unit","chartDimensions","themeProperty","ordinalColors","defsProperties","chartGrid","xDefault","yDefault","axes","isInteractive","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","legend","anchor","direction","dataFrom","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","console","log","JSON","stringify","motionProperties","groups","groupProperties","randColor","Math","round","random","countryCodes","names","programmingLanguages","generateBulletData","title","subtitle","rangeCount","measureCount","markerCount","float","ranges","reduce","remaining","acc","measures","length","markers","generateChordData","minValue","maxValue","maxSize","selectedKeys","matrix","generateNetworkData","rootNodeRadius","minMidNodes","maxMidNodes","midNodeRadius","minLeaves","maxLeaves","leafRadius","rootNode","radius","depth","nodes","Array","from","_","k","links","extraNodes","forEach","push","source","target","distance","concat","generateParallelCoordinatesData","shuffle","availableNodes","n","name","getNodeTargets","currentPath","targets","filter","Error","includes","join","targetId","getNodesTargets","targetsById","link","generateSankeyData","nodeCount","maxIterations","Object","assign","node","nodeColor","randId","randomPrice","randomVolume","randomCategory","generateSwarmPlotData","categoryCount","groupIndex","price","datum","volume","categories","randomizeSwarmPlotData","previousData","d","generateProgrammingLanguageStats","shouldShuffle","limit","langs","sets","language","uniqRand","generator","used","randCountryCode","generateDrinkStats","xSize","types","country","find","y","generateSeries","ids","xKeys","generateDayCounts","to","timeDays","dayFormat","timeFormat","generateOrderedDayCounts","withColors","libTreeItems","generateLibTree","children","tree","i","leaf","loc","wines","wineTastes","generateWinesTastes","randMin","randMax","taste","wine","Tooltip","initialProperties","indexBy","margin","top","right","bottom","left","pixelRatio","window","devicePixelRatio","padding","innerPadding","groupMode","layout","reverse","valueScale","indexScale","format","enabled","colors","scheme","colorBy","borderWidth","borderRadius","borderColor","modifiers","enable","tickSize","tickPadding","tickRotation","legendOffset","legendPosition","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","legends","image","useStaticQuery","childImageSharp","gatsbyImageData","meta","icon","currentFlavor","properties","propertiesMapper","mapper","codePropertiesMapper","undefined","generateData","getTabData","theme","logAction","copyArray","shuffleSelf","module","exports","array","nativeFloor","floor","nativeRandom","lower","upper","collection","arrayMap","object","baseRandom","lastIndex","rand","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","temp","arrayShuffle","baseShuffle","isArray","baseValues"],"sourceRoot":""}