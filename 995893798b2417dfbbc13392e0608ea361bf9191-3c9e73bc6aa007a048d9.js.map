{"version":3,"file":"995893798b2417dfbbc13392e0608ea361bf9191-3c9e73bc6aa007a048d9.js","mappings":"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","sources":["webpack://nivo-website/./src/data/components/geo/mapper.tsx","webpack://nivo-website/./src/data/components/geo/props.ts","webpack://nivo-website/./src/lib/settings.ts","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/svg/ContinuousColorsLegendSvg.tsx","webpack://nivo-website/../src/svg/AnchoredContinuousColorsLegendSvg.tsx","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/props.ts"],"sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { settingsMapper } from '../../../lib/settings'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n    font-size: 13px;\n    background: ${({ theme }) => theme.colors.cardBackground};\n    padding: 10px 20px;\n    color: ${({ color }) => color};\n    border: 2px solid ${({ color }) => color};\n    box-shadow: 9px 16px 0 rgba(0, 0, 0, 0.15);\n`\nconst TooltipKey = styled.span`\n    font-weight: 600;\n`\nconst TooltipValue = styled.span``\n\nconst CustomTooltip = ({ feature }) => {\n    return (\n        <TooltipWrapper color={feature.color}>\n            <TooltipKey>Custom tooltip</TooltipKey>\n            <span />\n            <TooltipKey>id</TooltipKey>\n            <TooltipValue>{feature.id}</TooltipValue>\n            <TooltipKey>value</TooltipKey>\n            <TooltipValue>{feature.value}</TooltipValue>\n            <TooltipKey>color</TooltipKey>\n            <TooltipValue>{feature.color}</TooltipValue>\n        </TooltipWrapper>\n    )\n}\n\nexport default settingsMapper(\n    {\n        theme: (value, values) => {\n            if (!values['custom tooltip example']) return value\n\n            return {\n                ...values.theme,\n                tooltip: {\n                    container: {\n                        ...values.theme.tooltip.container,\n                        background: '#333',\n                    },\n                },\n            }\n        },\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return undefined\n\n            return CustomTooltip\n        },\n    },\n    {\n        exclude: ['custom tooltip example'],\n    }\n)\n","// @ts-ignore\nimport { GeoMapDefaultProps } from '@nivo/geo'\nimport { themeProperty, defsProperties } from '../../../lib/componentProperties'\nimport { chartDimensions, isInteractive } from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg', 'canvas']\n\nexport const props: ChartProperty[] = [\n    ...chartDimensions(allFlavors),\n    {\n        key: 'projectionType',\n        flavors: ['svg', 'canvas'],\n        help: 'Defines the projection to use.',\n        type: 'string',\n        required: false,\n        defaultValue: GeoMapDefaultProps.projectionType,\n        group: 'Projection',\n        control: {\n            type: 'choices',\n            choices: [\n                { label: 'azimuthalEqualArea', value: 'azimuthalEqualArea' },\n                { label: 'azimuthalEquidistant', value: 'azimuthalEquidistant' },\n                { label: 'gnomonic', value: 'gnomonic' },\n                { label: 'orthographic', value: 'orthographic' },\n                { label: 'stereographic', value: 'stereographic' },\n                { label: 'equalEarth', value: 'equalEarth' },\n                { label: 'equirectangular', value: 'equirectangular' },\n                { label: 'mercator', value: 'mercator' },\n                { label: 'transverseMercator', value: 'transverseMercator' },\n                { label: 'naturalEarth1', value: 'naturalEarth1' },\n            ],\n        },\n    },\n    {\n        key: 'projectionScale',\n        flavors: ['svg', 'canvas'],\n        help: 'Projection scale.',\n        required: false,\n        defaultValue: GeoMapDefaultProps.projectionScale,\n        type: 'number',\n        group: 'Projection',\n        control: {\n            type: 'range',\n            min: 0,\n            max: 400,\n        },\n    },\n    {\n        key: 'projectionTranslation',\n        flavors: ['svg', 'canvas'],\n        type: '[number, number]',\n        help: 'Projection x/y translation.',\n        required: false,\n        defaultValue: GeoMapDefaultProps.projectionTranslation,\n        group: 'Projection',\n        control: {\n            type: 'numberArray',\n            unit: 'px',\n            items: [\n                {\n                    label: 'x',\n                    min: -1,\n                    max: 1,\n                    step: 0.05,\n                },\n                {\n                    label: 'y',\n                    min: -1,\n                    max: 1,\n                    step: 0.05,\n                },\n            ],\n        },\n    },\n    {\n        key: 'projectionRotation',\n        flavors: ['svg', 'canvas'],\n        type: '[number, number, number]',\n        help: 'Projection rotation.',\n        required: false,\n        defaultValue: GeoMapDefaultProps.projectionRotation,\n        group: 'Projection',\n        control: {\n            type: 'numberArray',\n            items: [\n                {\n                    label: 'lambda (λ)',\n                    min: -360,\n                    max: 360,\n                },\n                {\n                    label: 'phi (φ)',\n                    min: -360,\n                    max: 360,\n                },\n                {\n                    label: 'gamma (γ)',\n                    min: -360,\n                    max: 360,\n                },\n            ],\n        },\n    },\n    themeProperty(['svg', 'canvas']),\n    {\n        key: 'borderWidth',\n        flavors: ['svg', 'canvas'],\n        help: 'Control border width.',\n        type: 'number',\n        required: false,\n        defaultValue: GeoMapDefaultProps.borderWidth,\n        group: 'Style',\n        control: {\n            type: 'lineWidth',\n            step: 0.5,\n        },\n    },\n    {\n        key: 'borderColor',\n        flavors: ['svg', 'canvas'],\n        help: 'Method to compute border color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: GeoMapDefaultProps.borderColor,\n        control: { type: 'inheritedColor' },\n        group: 'Style',\n    },\n    {\n        key: 'enableGraticule',\n        flavors: ['svg', 'canvas'],\n        help: 'Enable meridians and parallels, useful for showing projection distortion.',\n        type: 'boolean',\n        required: false,\n        defaultValue: GeoMapDefaultProps.enableGraticule,\n        control: { type: 'switch' },\n        group: 'Graticule',\n    },\n    {\n        key: 'graticuleLineWidth',\n        flavors: ['svg', 'canvas'],\n        help: 'Control meridians and parallel lines width.',\n        type: 'number',\n        required: false,\n        defaultValue: GeoMapDefaultProps.graticuleLineWidth,\n        group: 'Graticule',\n        control: {\n            type: 'lineWidth',\n            step: 0.5,\n        },\n    },\n    {\n        key: 'graticuleLineColor',\n        flavors: ['svg', 'canvas'],\n        help: 'Control meridians and parallel lines color.',\n        type: 'string',\n        required: false,\n        defaultValue: GeoMapDefaultProps.graticuleLineColor,\n        control: { type: 'colorPicker' },\n        group: 'Graticule',\n    },\n    ...defsProperties('Style', ['svg']),\n    isInteractive({\n        flavors: ['svg', 'canvas'],\n        defaultValue: GeoMapDefaultProps.isInteractive,\n    }),\n    {\n        key: 'onClick',\n        flavors: ['svg', 'canvas'],\n        help: 'onClick handler, it receives clicked node data and style plus mouse event.',\n        type: 'Function',\n        required: false,\n        group: 'Interactivity',\n    },\n]\n","import omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\nimport { AxisProps, CanvasAxisProps } from '@nivo/axes'\n\nexport const settingsMapper =\n    (mapping: any, { exclude = [] }: { exclude?: string[] } = {}) =>\n    (settings: any, options: any = {}) => {\n        const overrides: any = {}\n\n        Object.keys(settings).forEach(key => {\n            if (mapping[key]) {\n                overrides[key] = mapping[key](settings[key], settings, options)\n            }\n        })\n\n        return {\n            ...omit(settings, exclude),\n            ...overrides,\n        }\n    }\n\nexport type AxisWithToggle<Axis extends AxisProps | CanvasAxisProps> = NonNullable<Axis> & {\n    enable: boolean\n}\n\nexport const mapAxis = (type: 'top' | 'right' | 'bottom' | 'left') => (value: any, settings: any) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }: { format: string; enabled: boolean }) =>\n    enabled ? format : undefined\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { ContinuousColorsLegendProps } from './types'\n\nexport const continuousColorsLegendDefaults: {\n    length: NonNullable<ContinuousColorsLegendProps['length']>\n    thickness: NonNullable<ContinuousColorsLegendProps['thickness']>\n    direction: NonNullable<ContinuousColorsLegendProps['direction']>\n    tickPosition: NonNullable<ContinuousColorsLegendProps['tickPosition']>\n    tickSize: NonNullable<ContinuousColorsLegendProps['tickSize']>\n    tickSpacing: NonNullable<ContinuousColorsLegendProps['tickSpacing']>\n    tickOverlap: NonNullable<ContinuousColorsLegendProps['tickOverlap']>\n    tickFormat: NonNullable<ContinuousColorsLegendProps['tickFormat']>\n    titleAlign: NonNullable<ContinuousColorsLegendProps['titleAlign']>\n    titleOffset: NonNullable<ContinuousColorsLegendProps['titleOffset']>\n} = {\n    length: 200,\n    thickness: 16,\n    direction: 'row',\n    tickPosition: 'after',\n    tickSize: 4,\n    tickSpacing: 3,\n    tickOverlap: false,\n    tickFormat: (value: number) => `${value}`,\n    titleAlign: 'start',\n    titleOffset: 4,\n}\n","import { scaleLinear } from 'd3-scale'\nimport { getValueFormatter } from '@nivo/core'\nimport { computeContinuousColorScaleColorStops } from '@nivo/colors'\nimport {\n    BoxLegendSvgProps,\n    ContinuousColorsLegendProps,\n    LegendAnchor,\n    LegendItemDirection,\n} from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n\nexport const computeContinuousColorsLegend = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    // left to right for `row`, bottom to top for `column`\n    const domain = direction === 'column' ? [...scale.domain()].reverse() : scale.domain()\n\n    const positionScale = scaleLinear().domain(domain)\n    if (domain.length === 2) {\n        // sequential, quantize\n        positionScale.range([0, length])\n    } else if (domain.length === 3) {\n        // diverging\n        positionScale.range([0, length / 2, length])\n    }\n\n    let values: number[]\n    if ('thresholds' in scale) {\n        // quantize\n        values = [domain[0], ...scale.thresholds(), domain[1]]\n    } else {\n        // sequential, diverging\n        values = Array.isArray(ticks) ? ticks : (scale as any).ticks(ticks)\n    }\n\n    const colorStops = computeContinuousColorScaleColorStops(scale, 32)\n\n    const formatValue = getValueFormatter(tickFormat)\n\n    const computedTicks: {\n        x1: number\n        y1: number\n        x2: number\n        y2: number\n        text: string\n        textX: number\n        textY: number\n        textHorizontalAlign: 'start' | 'middle' | 'end'\n        textVerticalAlign: 'alphabetic' | 'central' | 'hanging'\n    }[] = []\n\n    let width: number\n    let height: number\n\n    const gradientX1 = 0\n    let gradientY1 = 0\n    let gradientX2 = 0\n    const gradientY2 = 0\n\n    let titleX: number\n    let titleY: number\n    let titleRotation: number\n    let titleVerticalAlign: 'alphabetic' | 'hanging'\n\n    if (direction === 'row') {\n        width = length\n        height = thickness\n\n        gradientX2 = 1\n\n        let y1: number\n        let y2: number\n\n        let textY: number\n        const textHorizontalAlign = 'middle'\n        let textVerticalAlign: 'alphabetic' | 'hanging'\n\n        titleRotation = 0\n        if (titleAlign === 'start') {\n            titleX = 0\n        } else if (titleAlign === 'middle') {\n            titleX = length / 2\n        } else {\n            titleX = length\n        }\n\n        if (tickPosition === 'before') {\n            y1 = -tickSize\n            y2 = tickOverlap ? thickness : 0\n\n            textY = -tickSize - tickSpacing\n            textVerticalAlign = 'alphabetic'\n\n            titleY = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            y1 = tickOverlap ? 0 : thickness\n            y2 = thickness + tickSize\n\n            textY = y2 + tickSpacing\n            textVerticalAlign = 'hanging'\n\n            titleY = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const x = positionScale(value)\n\n            computedTicks.push({\n                x1: x,\n                y1,\n                x2: x,\n                y2,\n                text: formatValue(value),\n                textX: x,\n                textY,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    } else {\n        width = thickness\n        height = length\n\n        gradientY1 = 1\n\n        let x1: number\n        let x2: number\n\n        let textX: number\n        let textHorizontalAlign: 'start' | 'end'\n        const textVerticalAlign = 'central'\n\n        titleRotation = -90\n        if (titleAlign === 'start') {\n            titleY = length\n        } else if (titleAlign === 'middle') {\n            titleY = length / 2\n        } else {\n            titleY = 0\n        }\n\n        if (tickPosition === 'before') {\n            x1 = -tickSize\n            x2 = tickOverlap ? thickness : 0\n\n            textX = x1 - tickSpacing\n            textHorizontalAlign = 'end'\n\n            titleX = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            x1 = tickOverlap ? 0 : thickness\n            x2 = thickness + tickSize\n\n            textX = x2 + tickSpacing\n            textHorizontalAlign = 'start'\n\n            titleX = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const y = positionScale(value)\n\n            computedTicks.push({\n                x1,\n                y1: y,\n                x2,\n                y2: y,\n                text: formatValue(value),\n                textX,\n                textY: y,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    }\n\n    return {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks: computedTicks,\n        titleText: title,\n        titleX,\n        titleY,\n        titleRotation,\n        titleHorizontalAlign: titleAlign,\n        titleVerticalAlign,\n    }\n}\n","import { Fragment } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { computeContinuousColorsLegend } from '../compute'\nimport { ContinuousColorsLegendProps } from '../types'\nimport { continuousColorsLegendDefaults } from '../defaults'\n\nexport const ContinuousColorsLegendSvg = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        ticks: computedTicks,\n        colorStops,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const theme = useTheme()\n\n    const id = `ContinuousColorsLegendSvgGradient.${direction}.${colorStops\n        .map(stop => stop.offset)\n        .join('_')}`\n\n    return (\n        <g>\n            <defs>\n                <linearGradient\n                    id={id}\n                    x1={gradientX1}\n                    y1={gradientY1}\n                    x2={gradientX2}\n                    y2={gradientY2}\n                >\n                    {colorStops.map(colorStop => (\n                        <stop {...colorStop} />\n                    ))}\n                </linearGradient>\n            </defs>\n            {titleText && (\n                <text\n                    transform={`translate(${titleX}, ${titleY}) rotate(${titleRotation})`}\n                    textAnchor={titleHorizontalAlign}\n                    dominantBaseline={titleVerticalAlign}\n                    style={theme.legends.title.text}\n                >\n                    {titleText}\n                </text>\n            )}\n            <rect width={width} height={height} fill={`url(#${id}`} />\n            {computedTicks.map((tick, index) => (\n                <Fragment key={index}>\n                    <line\n                        x1={tick.x1}\n                        y1={tick.y1}\n                        x2={tick.x2}\n                        y2={tick.y2}\n                        style={theme.legends.ticks.line}\n                    />\n                    <text\n                        x={tick.textX}\n                        y={tick.textY}\n                        textAnchor={tick.textHorizontalAlign}\n                        dominantBaseline={tick.textVerticalAlign}\n                        style={theme.legends.ticks.text}\n                    >\n                        {tick.text}\n                    </text>\n                </Fragment>\n            ))}\n        </g>\n    )\n}\n","import { AnchoredContinuousColorsLegendProps } from '../types'\nimport { computePositionFromAnchor } from '../compute'\nimport { continuousColorsLegendDefaults } from '../defaults'\nimport { ContinuousColorsLegendSvg } from './ContinuousColorsLegendSvg'\n\nexport const AnchoredContinuousColorsLegendSvg = ({\n    containerWidth,\n    containerHeight,\n    anchor,\n    translateX = 0,\n    translateY = 0,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    ...legendProps\n}: AnchoredContinuousColorsLegendProps) => {\n    let width: number\n    let height: number\n    if (direction === 'row') {\n        width = length\n        height = thickness\n    } else {\n        width = thickness\n        height = length\n    }\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <g transform={`translate(${x}, ${y})`}>\n            <ContinuousColorsLegendSvg\n                length={length}\n                thickness={thickness}\n                direction={direction}\n                {...legendProps}\n            />\n        </g>\n    )\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { CompleteTheme, degreesToRadians } from '@nivo/core'\nimport {\n    computeDimensions,\n    computePositionFromAnchor,\n    computeItemLayout,\n    computeContinuousColorsLegend,\n} from './compute'\nimport { AnchoredContinuousColorsLegendProps, LegendCanvasProps } from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n\nexport const renderContinuousColorLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        containerWidth,\n        containerHeight,\n        anchor,\n        translateX = 0,\n        translateY = 0,\n        scale,\n        length = continuousColorsLegendDefaults.length,\n        thickness = continuousColorsLegendDefaults.thickness,\n        direction = continuousColorsLegendDefaults.direction,\n        ticks: _ticks,\n        tickPosition = continuousColorsLegendDefaults.tickPosition,\n        tickSize = continuousColorsLegendDefaults.tickSize,\n        tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n        tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n        tickFormat = continuousColorsLegendDefaults.tickFormat,\n        title,\n        titleAlign = continuousColorsLegendDefaults.titleAlign,\n        titleOffset = continuousColorsLegendDefaults.titleOffset,\n        theme,\n    }: AnchoredContinuousColorsLegendProps & {\n        theme: CompleteTheme\n    }\n) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks: _ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const initialStyles = {\n        font: ctx.font,\n        textAlign: ctx.textAlign,\n        textBaseline: ctx.textBaseline,\n    }\n    ctx.save()\n\n    ctx.translate(x, y)\n\n    const gradient = ctx.createLinearGradient(\n        gradientX1 * width,\n        gradientY1 * height,\n        gradientX2 * width,\n        gradientY2 * height\n    )\n    colorStops.forEach(colorStop => {\n        gradient.addColorStop(colorStop.offset, colorStop.stopColor)\n    })\n\n    ctx.fillStyle = gradient\n    ctx.fillRect(0, 0, width, height)\n\n    ctx.font = `${\n        theme.legends.ticks.text.fontWeight ? `${theme.legends.ticks.text.fontWeight} ` : ''\n    }${theme.legends.ticks.text.fontSize}px ${theme.legends.ticks.text.fontFamily}`\n\n    ticks.forEach(tick => {\n        if ((theme.legends.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n            ctx.lineCap = 'square'\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x1, tick.y1)\n            ctx.lineTo(tick.x2, tick.y2)\n            ctx.stroke()\n        }\n\n        if (theme.legends.ticks.text.fill) {\n            ctx.fillStyle = theme.legends.ticks.text.fill\n        }\n        ctx.textAlign = tick.textHorizontalAlign === 'middle' ? 'center' : tick.textHorizontalAlign\n        ctx.textBaseline = tick.textVerticalAlign === 'central' ? 'middle' : tick.textVerticalAlign\n\n        ctx.fillText(tick.text, tick.textX, tick.textY)\n    })\n\n    if (titleText) {\n        ctx.save()\n        ctx.translate(titleX, titleY)\n        ctx.rotate(degreesToRadians(titleRotation))\n\n        ctx.font = `${\n            theme.legends.title.text.fontWeight ? `${theme.legends.title.text.fontWeight} ` : ''\n        }${theme.legends.title.text.fontSize}px ${theme.legends.title.text.fontFamily}`\n        if (theme.legends.title.text.fill) {\n            ctx.fillStyle = theme.legends.title.text.fill\n        }\n        ctx.textAlign = titleHorizontalAlign === 'middle' ? 'center' : titleHorizontalAlign\n        ctx.textBaseline = titleVerticalAlign\n\n        ctx.fillText(titleText, 0, 0)\n\n        ctx.restore()\n    }\n\n    ctx.restore()\n\n    ctx.font = initialStyles.font\n    ctx.textAlign = initialStyles.textAlign\n    ctx.textBaseline = initialStyles.textBaseline\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n\n        if (reverse) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse, separator, valueFormat])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n"],"names":["TooltipWrapper","styled","theme","colors","cardBackground","color","TooltipKey","TooltipValue","CustomTooltip","feature","id","value","settingsMapper","values","tooltip","container","background","exclude","props","chartDimensions","key","flavors","help","type","required","defaultValue","GeoMapDefaultProps","group","control","choices","label","min","max","unit","items","step","themeProperty","defsProperties","isInteractive","mapping","settings","options","overrides","Object","keys","forEach","omit","mapAxis","upperFirst","enable","mapFormat","format","enabled","undefined","continuousColorsLegendDefaults","length","thickness","direction","tickPosition","tickSize","tickSpacing","tickOverlap","tickFormat","titleAlign","titleOffset","zeroPadding","top","right","bottom","left","computeDimensions","item","itemsSpacing","_padding","padding","itemCount","itemWidth","itemHeight","Array","isArray","Error","horizontalPadding","verticalPadding","width","height","spacing","computePositionFromAnchor","anchor","translateX","translateY","containerWidth","containerHeight","x","y","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","justify","symbolSize","symbolSpacing","computeContinuousColorsLegend","scale","ticks","title","domain","reverse","positionScale","scaleLinear","range","thresholds","titleX","titleY","titleRotation","titleVerticalAlign","y1","y2","textY","textVerticalAlign","x1","x2","textX","textHorizontalAlign","colorStops","computeContinuousColorScaleColorStops","formatValue","getValueFormatter","computedTicks","gradientY1","gradientX2","push","text","gradientX1","gradientY2","titleText","titleHorizontalAlign","ContinuousColorsLegendSvg","useTheme","map","stop","offset","join","_jsxDEV","colorStop","transform","textAnchor","dominantBaseline","style","legends","fill","tick","index","Fragment","line","AnchoredContinuousColorsLegendSvg","legendProps","symbolByShape","circle","size","opacity","borderWidth","borderColor","r","cx","cy","strokeWidth","stroke","pointerEvents","diamond","d","square","triangle","LegendSvgItem","data","textColor","symbolShape","symbolBorderWidth","symbolBorderColor","onClick","onMouseEnter","onMouseLeave","toggleSerie","effects","useState","setStyle","handleMouseEnter","useCallback","event","filter","on","reduce","acc","effect","handleMouseLeave","some","handler","SymbolShape","itemOpacity","itemBackground","cursor","e","React","hidden","symbol","itemTextColor","userSelect","LegendSvg","itemDirection","xStep","yStep","i","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","ctx","save","translate","font","fontSize","fontFamily","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","renderContinuousColorLegendToCanvas","_ticks","initialStyles","gradient","createLinearGradient","addColorStop","stopColor","fontWeight","t","lineWidth","Number","axis","strokeStyle","lineCap","beginPath","moveTo","lineTo","rotate","degreesToRadians","useQuantizeColorScaleLegendData","overriddenDomain","valueFormat","v","separator","useMemo","domainValue","invertExtent","extent","LegendPropShape","PropTypes","isRequired"],"sourceRoot":""}