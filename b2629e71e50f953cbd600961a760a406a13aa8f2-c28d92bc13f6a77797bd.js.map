{"version":3,"file":"b2629e71e50f953cbd600961a760a406a13aa8f2-c28d92bc13f6a77797bd.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-time/src/duration.js","webpack://nivo-website/../node_modules/d3-time/src/interval.js","webpack://nivo-website/./src/data/components/pie/props.ts","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../node_modules/d3-shape/src/descending.js","webpack://nivo-website/../node_modules/d3-shape/src/identity.js","webpack://nivo-website/../src/PieLegends.tsx","webpack://nivo-website/../src/PieTooltip.tsx","webpack://nivo-website/../node_modules/d3-shape/src/pie.js","webpack://nivo-website/../src/Arcs.tsx","webpack://nivo-website/../src/Pie.tsx","webpack://nivo-website/../src/ResponsivePie.tsx","webpack://nivo-website/../src/PieCanvas.tsx","webpack://nivo-website/../src/ResponsivePieCanvas.tsx","webpack://nivo-website/./src/data/components/pie/mapper.js"],"sourcesContent":["export var durationSecond = 1e3;\nexport var durationMinute = 6e4;\nexport var durationHour = 36e5;\nexport var durationDay = 864e5;\nexport var durationWeek = 6048e5;","var t0 = new Date(),\n    t1 = new Date();\nexport default function newInterval(floori, offseti, count, field) {\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;\n  }\n\n  interval.floor = function (date) {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = function (date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function (date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function (date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function (start, stop, step) {\n    var range = [],\n        previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n\n    do {\n      range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    } while (previous < start && start < stop);\n\n    return range;\n  };\n\n  interval.filter = function (test) {\n    return newInterval(function (date) {\n      if (date >= date) while (floori(date), !test(date)) {\n        date.setTime(date - 1);\n      }\n    }, function (date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function (start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function (step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n        return field(d) % step === 0;\n      } : function (d) {\n        return interval.count(0, d) % step === 0;\n      });\n    };\n  }\n\n  return interval;\n}","import { defaultProps } from '@nivo/pie'\nimport { arcTransitionModes } from '@nivo/arcs'\nimport {\n    themeProperty,\n    defsProperties,\n    groupProperties,\n    getLegendsProps,\n    motionProperties,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data, which should be immutable.',\n        description: `\n            Chart data, which must conform to this structure\n            if using the default \\`id\\` and \\`value\\` accessors:\n\n            \\`\\`\\`\n            Array<{\n                // must be unique for the whole dataset\n                id:    string | number,\n                value: number\n            }>\n            \\`\\`\\`\n\n            If using a different data structure, you must make sure\n            to adjust both \\`id\\` and \\`value\\`. Meaning you can provide\n            a completely different data structure as long as \\`id\\` and \\`value\\`\n            return the appropriate values.\n\n            Immutability of the data is important as re-computations\n            depends on it.\n        `,\n        type: 'object[]',\n        required: true,\n    },\n    {\n        key: 'id',\n        group: 'Base',\n        help: 'ID accessor which should return a unique value for the whole dataset.',\n        description: `\n            Define how to access the ID of each datum,\n            by default, nivo will look for the \\`id\\` property.\n        `,\n        type: 'string | (datum: RawDatum): string | number',\n        required: false,\n        defaultValue: defaultProps.id,\n    },\n    {\n        key: 'value',\n        group: 'Base',\n        help: 'Value accessor.',\n        description: `\n            Define how to access the value of each datum,\n            by default, nivo will look for the \\`value\\` property.\n        `,\n        type: 'string | (datum: RawDatum): number',\n        required: false,\n        defaultValue: defaultProps.value,\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'string | (value: number) => string | number',\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            not required if using\n            \\`<ResponsivePie/>\\`.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            not required if using\n            \\`<ResponsivePie/>\\`.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        required: false,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'startAngle',\n        help: 'Start angle (in degrees), useful to make gauges for example.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.startAngle,\n        group: 'Base',\n        controlType: 'angle',\n        controlOptions: {\n            unit: '°',\n            min: -180,\n            max: 360,\n            step: 5,\n        },\n    },\n    {\n        key: 'endAngle',\n        help: 'End angle (in degrees), useful to make gauges for example.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.endAngle,\n        group: 'Base',\n        controlType: 'angle',\n        controlOptions: {\n            unit: '°',\n            min: -360,\n            max: 360,\n            step: 5,\n        },\n    },\n    {\n        key: 'fit',\n        help: `If 'true', pie will be optimized to occupy more space when using partial pie.`,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.fit,\n        controlType: 'switch',\n        group: 'Base',\n    },\n    {\n        key: 'innerRadius',\n        help: `Donut chart if greater than 0. Value should be between 0~1 as it's a ratio from original radius.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.innerRadius,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 0.95,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'padAngle',\n        help: 'Padding between each pie slice.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.padAngle,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: '°',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'cornerRadius',\n        help: 'Rounded slices.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.cornerRadius,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'sortByValue',\n        help: `If 'true', arcs will be ordered according to their associated value.`,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.sortByValue,\n        controlType: 'switch',\n        group: 'Base',\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    themeProperty(['svg', 'canvas', 'api']),\n    {\n        key: 'colors',\n        help: 'Defines color range.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: defaultProps.colors,\n        controlType: 'ordinalColors',\n        group: 'Style',\n    },\n    ...defsProperties('Style', ['svg', 'api']),\n    {\n        key: 'showcase pattern usage',\n        flavors: ['svg'],\n        help: 'Patterns.',\n        description: `\n            You can use \\`defs\\` and \\`fill\\` properties\n            to use patterns, see\n            [dedicated guide](self:/guides/patterns)\n            for further information.\n        `,\n        type: 'boolean',\n        controlType: 'switch',\n        group: 'Style',\n    },\n    {\n        key: 'borderWidth',\n        help: 'Slices border width.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.borderWidth,\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute border color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.borderColor,\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    {\n        key: 'enableArcLabels',\n        help: 'Enable/disable arc labels.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.enableArcLabels,\n        controlType: 'switch',\n        group: 'Arc labels',\n    },\n    {\n        key: 'arcLabel',\n        help: 'Defines how to get label text, can be a string (used to access current node data property) or a function which will receive the actual node data.',\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaultProps.arcLabel,\n        controlType: 'choices',\n        group: 'Arc labels',\n        controlOptions: {\n            choices: ['id', 'value', 'formattedValue', `d => \\`\\${d.id} (\\${d.value})\\``].map(\n                choice => ({\n                    label: choice,\n                    value: choice,\n                })\n            ),\n        },\n    },\n    {\n        key: 'arcLabelsRadiusOffset',\n        help: `\n            Define the radius to use to determine the label position, starting from inner radius,\n            this is expressed as a ratio.\n        `,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLabelsRadiusOffset,\n        controlType: 'range',\n        group: 'Arc labels',\n        controlOptions: {\n            min: 0,\n            max: 2,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'arcLabelsSkipAngle',\n        help: `Skip label if corresponding arc's angle is lower than provided value.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLabelsSkipAngle,\n        controlType: 'range',\n        group: 'Arc labels',\n        controlOptions: {\n            unit: '°',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLabelsTextColor',\n        help: 'Defines how to compute arc label text color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.arcLabelsTextColor,\n        controlType: 'inheritedColor',\n        group: 'Arc labels',\n    },\n    {\n        key: 'enableArcLinkLabels',\n        help: 'Enable/disable arc link labels.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.enableArcLinkLabels,\n        controlType: 'switch',\n        group: 'Arc link labels',\n    },\n    {\n        key: 'arcLinkLabel',\n        help: 'Arc link label',\n        description: `\n            Defines how to get label text,\n            can be a string (used to access current node data property)\n            or a function which will receive the actual node data.\n        `,\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabel,\n        controlType: 'choices',\n        group: 'Arc link labels',\n        controlOptions: {\n            choices: ['id', 'value', `d => \\`\\${d.id} (\\${d.value})\\``].map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n    {\n        key: 'arcLinkLabelsSkipAngle',\n        help: `Skip label if corresponding slice's angle is lower than provided value.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsSkipAngle,\n        controlType: 'range',\n        group: 'Arc link labels',\n        controlOptions: {\n            unit: '°',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLinkLabelsOffset',\n        help: `Link offset from pie outer radius, useful to have links overlapping pie slices.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsOffset,\n        controlType: 'range',\n        group: 'Arc link labels',\n        controlOptions: {\n            unit: 'px',\n            min: -24,\n            max: 24,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLinkLabelsDiagonalLength',\n        help: `Link diagonal length.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsDiagonalLength,\n        controlType: 'range',\n        group: 'Arc link labels',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 36,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLinkLabelsStraightLength',\n        help: `Length of the straight segment of the links.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsStraightLength,\n        controlType: 'range',\n        group: 'Arc link labels',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 36,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLinkLabelsTextOffset',\n        help: `X offset from links' end.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsTextOffset,\n        controlType: 'range',\n        group: 'Arc link labels',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 36,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLinkLabelsThickness',\n        help: 'Links stroke width.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsThickness,\n        controlType: 'lineWidth',\n        group: 'Arc link labels',\n    },\n    {\n        key: 'arcLinkLabelsTextColor',\n        help: 'Defines how to compute arc link label text color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsTextColor,\n        controlType: 'inheritedColor',\n        group: 'Arc link labels',\n    },\n    {\n        key: 'arcLinkLabelsColor',\n        help: 'Defines how to compute arc link label link color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsColor,\n        controlType: 'inheritedColor',\n        group: 'Arc link labels',\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer must be a function.\n\n            The layer component which will receive the chart's\n            context & computed data and must return a valid SVG element\n            for the \\`Pie\\` component.\n\n            When using the canvas implementation, the function\n            will receive the canvas 2d context as first argument\n            and the chart's context and computed data as second.\n\n            Please make sure to use \\`context.save()\\` and\n            \\`context.restore()\\` if you make some global\n            modifications to the 2d context inside this function\n            to avoid side effects.\n\n            The context passed to layers has the following structure:\n\n            \\`\\`\\`\n            {\n                dataWithArc:  DatumWithArc[],\n                arcGenerator: Function\n                centerX:      number\n                centerY:      number\n                radius:       number\n                innerRadius:  number\n            }\n            \\`\\`\\`\n        `,\n        required: false,\n        type: 'Array<string | Function>',\n        defaultValue: defaultProps.layers,\n    },\n    {\n        key: 'isInteractive',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.isInteractive,\n        controlType: 'switch',\n    },\n    {\n        key: 'activeInnerRadiusOffset',\n        flavors: ['svg', 'canvas'],\n        help: `Extends active slice inner radius.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.activeInnerRadiusOffset,\n        controlType: 'range',\n        group: 'Interactivity',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 50,\n        },\n    },\n    {\n        key: 'activeOuterRadiusOffset',\n        flavors: ['svg', 'canvas'],\n        help: `Extends active slice outer radius.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.activeOuterRadiusOffset,\n        controlType: 'range',\n        group: 'Interactivity',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 50,\n        },\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseEnter handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onMouseMove handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseLeave handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onClick handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        type: 'Component',\n        required: false,\n        help: 'Custom tooltip component',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will receive\n            the following props:\n\n            \\`\\`\\`\n            {\n                datum: PieComputedDatum\n            }\n            \\`\\`\\`\n\n            You can also customize the style of the tooltip using\n            the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        flavors: ['svg', 'canvas'],\n        help: 'Showcase custom tooltip.',\n        type: 'boolean',\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    ...motionProperties(['svg'], defaultProps, 'react-spring'),\n    {\n        key: 'transitionMode',\n        flavors: ['svg'],\n        help: 'Define how transitions behave.',\n        type: 'string',\n        required: false,\n        defaultValue: defaultProps.transitionMode,\n        controlType: 'choices',\n        group: 'Motion',\n        controlOptions: {\n            choices: arcTransitionModes.map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n    {\n        key: 'legends',\n        flavors: ['svg', 'canvas'],\n        type: 'Legend[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n]\n\nexport const groups = groupProperties(props)\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { BoxLegendSvgProps, LegendAnchor, LegendItemDirection } from './types'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { computeDimensions, computePositionFromAnchor, computeItemLayout } from './compute'\nimport { LegendCanvasProps } from './types'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n        if (reverse === true) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n","export default function (a, b) {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}","export default function (d) {\n  return d;\n}","import { BoxLegendSvg } from '@nivo/legends'\nimport { CompletePieSvgProps, ComputedDatum, DatumId } from './types'\n\ninterface PieLegendsProps<RawDatum> {\n    width: number\n    height: number\n    legends: CompletePieSvgProps<RawDatum>['legends']\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    toggleSerie: (id: DatumId) => void\n}\n\nconst PieLegends = <RawDatum,>({\n    width,\n    height,\n    legends,\n    data,\n    toggleSerie,\n}: PieLegendsProps<RawDatum>) => {\n    return (\n        <>\n            {legends.map((legend, i) => (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                    toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n                />\n            ))}\n        </>\n    )\n}\n\nexport default PieLegends\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const PieTooltip = <RawDatum,>({ datum }: { datum: ComputedDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={datum.id}\n        value={datum.formattedValue}\n        enableChip={true}\n        color={datum.color}\n    />\n)\n\nexport default PieTooltip\n","import constant from \"./constant.js\";\nimport descending from \"./descending.js\";\nimport identity from \"./identity.js\";\nimport { tau } from \"./math.js\";\nexport default function () {\n  var value = identity,\n      sortValues = descending,\n      sort = null,\n      startAngle = constant(0),\n      endAngle = constant(tau),\n      padAngle = constant(0);\n\n  function pie(data) {\n    var i,\n        n = data.length,\n        j,\n        k,\n        sum = 0,\n        index = new Array(n),\n        arcs = new Array(n),\n        a0 = +startAngle.apply(this, arguments),\n        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),\n        a1,\n        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\n        pa = p * (da < 0 ? -1 : 1),\n        v;\n\n    for (i = 0; i < n; ++i) {\n      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\n        sum += v;\n      }\n    } // Optionally sort the arcs by previously-computed values or by data.\n\n\n    if (sortValues != null) index.sort(function (i, j) {\n      return sortValues(arcs[i], arcs[j]);\n    });else if (sort != null) index.sort(function (i, j) {\n      return sort(data[i], data[j]);\n    }); // Compute the arcs! They are stored in the original data's order.\n\n    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\n      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\n        data: data[j],\n        index: i,\n        value: v,\n        startAngle: a0,\n        endAngle: a1,\n        padAngle: p\n      };\n    }\n\n    return arcs;\n  }\n\n  pie.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), pie) : value;\n  };\n\n  pie.sortValues = function (_) {\n    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\n  };\n\n  pie.sort = function (_) {\n    return arguments.length ? (sort = _, sortValues = null, pie) : sort;\n  };\n\n  pie.startAngle = function (_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : startAngle;\n  };\n\n  pie.endAngle = function (_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : endAngle;\n  };\n\n  pie.padAngle = function (_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : padAngle;\n  };\n\n  return pie;\n}","import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CompletePieSvgProps } from './types'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: CompletePieSvgProps<RawDatum>['borderWidth']\n    borderColor: CompletePieSvgProps<RawDatum>['borderColor']\n    isInteractive: CompletePieSvgProps<RawDatum>['isInteractive']\n    onClick?: CompletePieSvgProps<RawDatum>['onClick']\n    onMouseEnter?: CompletePieSvgProps<RawDatum>['onMouseEnter']\n    onMouseMove?: CompletePieSvgProps<RawDatum>['onMouseMove']\n    onMouseLeave?: CompletePieSvgProps<RawDatum>['onMouseLeave']\n    setActiveId: (id: null | string | number) => void\n    tooltip: CompletePieSvgProps<RawDatum>['tooltip']\n    transitionMode: CompletePieSvgProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    setActiveId,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            setActiveId(datum.id)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, setActiveId, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveId(null)\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveId, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { ArcLabelsLayer, ArcLinkLabelsLayer } from '@nivo/arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport PieLegends from './PieLegends'\nimport { useNormalizedData, usePieFromBox, usePieLayerContext } from './hooks'\nimport { ComputedDatum, PieLayer, PieSvgProps, PieLayerId } from './types'\nimport { defaultProps } from './props'\nimport { Arcs } from './Arcs'\n\nconst InnerPie = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    layers = defaultProps.layers as PieLayer<RawDatum>[],\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsComponent,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n    arcLinkLabelComponent,\n\n    // styling\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip = defaultProps.tooltip,\n\n    transitionMode = defaultProps.transitionMode,\n\n    legends = defaultProps.legends,\n    role = defaultProps.role,\n}: PieSvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const {\n        dataWithArc,\n        legendData,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n        setActiveId,\n        toggleSerie,\n    } = usePieFromBox<RawDatum>({\n        data: normalizedData,\n        width: innerWidth,\n        height: innerHeight,\n        fit,\n        innerRadius: innerRadiusRatio,\n        startAngle,\n        endAngle,\n        padAngle,\n        sortByValue,\n        cornerRadius,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n    })\n\n    const boundDefs = bindDefs(defs, dataWithArc, fill)\n\n    const layerById: Record<PieLayerId, ReactNode> = {\n        arcLinkLabels: null,\n        arcs: null,\n        arcLabels: null,\n        legends: null,\n    }\n\n    if (enableArcLinkLabels && layers.includes('arcLinkLabels')) {\n        layerById.arcLinkLabels = (\n            <ArcLinkLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLinkLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLinkLabel}\n                skipAngle={arcLinkLabelsSkipAngle}\n                offset={arcLinkLabelsOffset}\n                diagonalLength={arcLinkLabelsDiagonalLength}\n                straightLength={arcLinkLabelsStraightLength}\n                strokeWidth={arcLinkLabelsThickness}\n                textOffset={arcLinkLabelsTextOffset}\n                textColor={arcLinkLabelsTextColor}\n                linkColor={arcLinkLabelsColor}\n                component={arcLinkLabelComponent}\n            />\n        )\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                setActiveId={setActiveId}\n                tooltip={tooltip}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    if (legends.length > 0 && layers.includes('legends')) {\n        layerById.legends = (\n            <PieLegends<RawDatum>\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                data={legendData}\n                legends={legends}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    const layerContext = usePieLayerContext<RawDatum>({\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as PieLayerId] !== undefined) {\n                    return layerById[layer as PieLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Pie = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerPie<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Pie } from './Pie'\nimport { PieSvgProps } from './types'\n\nexport const ResponsivePie = <RawDatum,>(\n    props: Omit<PieSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Pie<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { createElement, useEffect, useMemo, useRef } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    Arc,\n    findArcUnderCursor,\n    useArcLabels,\n    drawCanvasArcLabels,\n    useArcLinkLabels,\n    drawCanvasArcLinkLabels,\n} from '@nivo/arcs'\nimport { useNormalizedData, usePieFromBox } from './hooks'\nimport { ComputedDatum, PieCanvasProps } from './types'\nimport { defaultProps } from './props'\n\nconst InnerPieCanvas = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = 1,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n\n    legends = defaultProps.legends,\n}: PieCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const { dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius, setActiveId } =\n        usePieFromBox<RawDatum>({\n            data: normalizedData,\n            width: innerWidth,\n            height: innerHeight,\n            fit,\n            innerRadius: innerRadiusRatio,\n            startAngle,\n            endAngle,\n            padAngle,\n            sortByValue,\n            cornerRadius,\n            activeInnerRadiusOffset,\n            activeOuterRadiusOffset,\n        })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const arcLabels = useArcLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        label: arcLabel,\n        skipAngle: arcLabelsSkipAngle,\n        offset: arcLabelsRadiusOffset,\n        textColor: arcLabelsTextColor,\n    })\n\n    const arcLinkLabels = useArcLinkLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        skipAngle: arcLinkLabelsSkipAngle,\n        offset: arcLinkLabelsOffset,\n        diagonalLength: arcLinkLabelsDiagonalLength,\n        straightLength: arcLinkLabelsStraightLength,\n        label: arcLinkLabel,\n        linkColor: arcLinkLabelsColor,\n        textOffset: arcLinkLabelsTextOffset,\n        textColor: arcLinkLabelsTextColor,\n    })\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n        arcGenerator.context(ctx)\n\n        ctx.save()\n        ctx.translate(centerX, centerY)\n\n        dataWithArc.forEach(arc => {\n            ctx.beginPath()\n            ctx.fillStyle = arc.color\n\n            ctx.strokeStyle = getBorderColor(arc)\n            ctx.lineWidth = borderWidth\n\n            arcGenerator(arc.arc)\n\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableArcLinkLabels === true) {\n            drawCanvasArcLinkLabels<ComputedDatum<RawDatum>>(\n                ctx,\n                arcLinkLabels,\n                theme,\n                arcLinkLabelsThickness\n            )\n        }\n\n        if (enableArcLabels === true) {\n            drawCanvasArcLabels<ComputedDatum<RawDatum>>(ctx, arcLabels, theme)\n        }\n\n        // legends assume a box rather than a center,\n        // that's why we restore previously saved position here.\n        ctx.restore()\n        legends.forEach(legend => {\n            renderLegendToCanvas(ctx, {\n                ...legend,\n                data: dataWithArc,\n                containerWidth: innerWidth,\n                containerHeight: innerHeight,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        centerX,\n        centerY,\n        arcGenerator,\n        dataWithArc,\n        getBorderColor,\n        enableArcLabels,\n        arcLabels,\n        enableArcLinkLabels,\n        arcLinkLabels,\n        arcLinkLabelsThickness,\n        legends,\n        theme,\n    ])\n\n    const arcs = useMemo(\n        () =>\n            dataWithArc.map(datum => ({\n                id: datum.id,\n                ...datum.arc,\n            })),\n        [dataWithArc]\n    )\n\n    const getArcFromMouse = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!canvasEl.current) return null\n\n        const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n        const hoveredArc = findArcUnderCursor<Arc & { id: string | number }>(\n            margin.left + centerX,\n            margin.top + centerY,\n            radius,\n            innerRadius,\n            arcs,\n            x,\n            y\n        )\n\n        if (!hoveredArc) return null\n\n        return dataWithArc.find(datum => datum.id === hoveredArc.id)\n    }\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        const datum = getArcFromMouse(event)\n        if (datum) {\n            onMouseMove?.(datum, event)\n            setActiveId(datum.id)\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n        } else {\n            setActiveId(null)\n            hideTooltip()\n        }\n    }\n\n    const handleMouseLeave = () => {\n        hideTooltip()\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!onClick) return\n\n        const arc = getArcFromMouse(event)\n        if (arc) {\n            onClick(arc, event)\n        }\n    }\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const PieCanvas = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerPieCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { PieCanvas } from './PieCanvas'\nimport { PieCanvasProps } from './types'\n\nexport const ResponsivePieCanvas = <RawDatum,>(\n    props: Omit<PieCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <PieCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { patternDotsDef, patternLinesDef } from '@nivo/core'\nimport { mapFormat, settingsMapper } from '../../../lib/settings'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n    background: #333;\n    padding: 12px 16px;\n    font-size: 12px;\n    border-radius: 2px;\n`\nconst TooltipKey = styled.span``\nconst TooltipValue = styled.span`\n    font-weight: 600;\n`\n\nconst CustomTooltip = ({ datum }) => (\n    <TooltipWrapper style={{ color: datum.color }}>\n        <TooltipKey>id</TooltipKey>\n        <TooltipValue>{datum.id}</TooltipValue>\n        <TooltipKey>value</TooltipKey>\n        <TooltipValue>{datum.value}</TooltipValue>\n        <TooltipKey>formattedValue</TooltipKey>\n        <TooltipValue>{datum.formattedValue}</TooltipValue>\n        <TooltipKey>color</TooltipKey>\n        <TooltipValue>{datum.color}</TooltipValue>\n    </TooltipWrapper>\n)\n\nexport default settingsMapper(\n    {\n        valueFormat: mapFormat,\n        arcLinkLabel: value => {\n            if (value === `d => \\`\\${d.id} (\\${d.value})\\``) return d => `${d.id} (${d.value})`\n            return value\n        },\n        arcLabel: value => {\n            if (value === `d => \\`\\${d.id} (\\${d.value})\\``) return d => `${d.id} (${d.value})`\n            return value\n        },\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return undefined\n\n            return CustomTooltip\n        },\n        theme: (value, values) => {\n            if (!values['custom tooltip example']) return value\n\n            return {\n                ...values.theme,\n                tooltip: {\n                    container: {\n                        ...values.theme.tooltip.container,\n                        background: '#333',\n                    },\n                },\n            }\n        },\n        defs: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                patternDotsDef('dots', {\n                    background: 'inherit',\n                    color: 'rgba(255, 255, 255, 0.3)',\n                    size: 4,\n                    padding: 1,\n                    stagger: true,\n                }),\n                patternLinesDef('lines', {\n                    background: 'inherit',\n                    color: 'rgba(255, 255, 255, 0.3)',\n                    rotation: -45,\n                    lineWidth: 6,\n                    spacing: 10,\n                }),\n            ]\n        },\n        fill: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                { match: { id: 'ruby' }, id: 'dots' },\n                { match: { id: 'c' }, id: 'dots' },\n                { match: { id: 'go' }, id: 'dots' },\n                { match: { id: 'python' }, id: 'dots' },\n                { match: { id: 'scala' }, id: 'lines' },\n                { match: { id: 'lisp' }, id: 'lines' },\n                { match: { id: 'elixir' }, id: 'lines' },\n                { match: { id: 'javascript' }, id: 'lines' },\n            ]\n        },\n    },\n    {\n        exclude: ['custom tooltip example', 'showcase pattern usage'],\n    }\n)\n"],"names":["durationSecond","durationMinute","durationHour","durationDay","durationWeek","t0","Date","t1","newInterval","floori","offseti","count","field","interval","date","arguments","length","floor","ceil","round","d0","d1","offset","step","Math","range","start","stop","previous","push","filter","test","setTime","end","every","isFinite","d","props","key","group","help","description","type","required","defaultValue","defaultProps","controlType","enableControlForFlavors","controlOptions","unit","min","max","flavors","themeProperty","defsProperties","choices","map","choice","label","value","motionProperties","arcTransitionModes","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","defaults","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","data","alert","JSON","stringify","groups","groupProperties","zeroPadding","top","right","bottom","left","computeDimensions","item","_padding","padding","itemCount","Array","isArray","Error","horizontalPadding","verticalPadding","width","height","spacing","computePositionFromAnchor","containerWidth","containerHeight","x","y","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","symbolSpacing","symbolByShape","circle","size","fill","opacity","borderWidth","borderColor","_jsx","r","cx","cy","strokeWidth","stroke","style","pointerEvents","diamond","transform","square","triangle","LegendSvgItem","textColor","background","symbolShape","symbolBorderWidth","symbolBorderColor","onMouseEnter","onMouseLeave","toggleSerie","effects","useState","setStyle","theme","useTheme","handleMouseEnter","useCallback","event","on","reduce","acc","effect","handleMouseLeave","isInteractive","some","handler","SymbolShape","_jsxs","itemOpacity","itemBackground","cursor","e","id","React","color","hidden","legends","symbol","textAnchor","text","itemTextColor","dominantBaseline","userSelect","LegendSvg","xStep","yStep","i","BoxLegendSvg","textAlignMapping","middle","renderLegendToCanvas","ctx","save","translate","font","fontSize","fontFamily","forEach","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","useQuantizeColorScaleLegendData","scale","overriddenDomain","domain","reverse","valueFormat","v","separator","useMemo","items","domainValue","invertExtent","extent","LegendPropShape","PropTypes","isRequired","a","b","NaN","PieLegends","sortByValue","innerRadius","padAngle","cornerRadius","layers","startAngle","endAngle","fit","activeInnerRadiusOffset","activeOuterRadiusOffset","from","modifiers","enableArcLabels","arcLabel","arcLabelsSkipAngle","arcLabelsRadiusOffset","arcLabelsTextColor","enableArcLinkLabels","arcLinkLabel","arcLinkLabelsSkipAngle","arcLinkLabelsOffset","arcLinkLabelsDiagonalLength","arcLinkLabelsStraightLength","arcLinkLabelsThickness","arcLinkLabelsTextOffset","arcLinkLabelsTextColor","arcLinkLabelsColor","colors","scheme","defs","animate","motionConfig","transitionMode","tooltip","datum","BasicTooltip","formattedValue","enableChip","role","pixelRatio","window","devicePixelRatio","useNormalizedData","getId","usePropertyAccessor","getValue","formatValue","useValueFormatter","getColor","useOrdinalColorScale","datumId","datumValue","normalizedDatum","usePieArcs","outerRadius","activeId","hiddenIds","pie","innerPie","identity","sortValues","descending","sort","constant","j","k","a1","n","sum","arcs","a0","apply","this","da","p","abs","pa","_","d3Pie","degreesToRadians","hiddenData","includes","dataWithArc","arc","angle","thickness","angleDeg","radiansToDegrees","legendData","usePieFromBox","innerRadiusRatio","setActiveId","setHiddenIds","computedProps","boundingBox","radius","centerX","centerY","computeArcBoundingBox","points","box","ratio","adjustedBox","debug","pieArcs","state","indexOf","arcGenerator","useArcGenerator","Arcs","center","onMouseMove","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","createElement","handleMouseMove","ArcsLayer","InnerPie","partialMargin","margin","arcLabelsComponent","arcLinkLabelComponent","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","normalizedData","boundDefs","bindDefs","layerById","arcLinkLabels","arcLabels","ArcLinkLabelsLayer","skipAngle","diagonalLength","straightLength","textOffset","linkColor","component","ArcLabelsLayer","radiusOffset","layerContext","usePieLayerContext","SvgWrapper","layer","Fragment","Pie","renderWrapper","otherProps","Container","ResponsivePie","ResponsiveWrapper","InnerPieCanvas","canvasEl","useRef","getBorderColor","useInheritedColor","useArcLabels","useArcLinkLabels","useEffect","current","getContext","context","beginPath","strokeStyle","lineWidth","drawCanvasArcLinkLabels","drawCanvasArcLabels","getArcFromMouse","getRelativeCursor","hoveredArc","findArcUnderCursor","find","handleMouseHover","ref","PieCanvas","ResponsivePieCanvas","TooltipWrapper","styled","TooltipKey","TooltipValue","CustomTooltip","settingsMapper","mapFormat","values","container","patternDotsDef","stagger","patternLinesDef","rotation","match","exclude"],"sourceRoot":""}