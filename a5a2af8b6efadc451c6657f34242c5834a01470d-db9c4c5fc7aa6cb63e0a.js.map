{"version":3,"file":"a5a2af8b6efadc451c6657f34242c5834a01470d-db9c4c5fc7aa6cb63e0a.js","mappings":"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","sources":["webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/utils.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/AnnotationNote.tsx","webpack://nivo-website/../src/AnnotationLink.tsx","webpack://nivo-website/../src/CircleAnnotationOutline.tsx","webpack://nivo-website/../src/DotAnnotationOutline.tsx","webpack://nivo-website/../src/RectAnnotationOutline.tsx","webpack://nivo-website/../src/Annotation.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/BarAnnotations.tsx","webpack://nivo-website/../src/BarLegends.tsx","webpack://nivo-website/../src/BarItem.tsx","webpack://nivo-website/../src/BarTooltip.tsx","webpack://nivo-website/../src/compute/common.ts","webpack://nivo-website/../src/compute/grouped.ts","webpack://nivo-website/../src/compute/stacked.ts","webpack://nivo-website/../src/compute/legends.ts","webpack://nivo-website/../src/Bar.tsx","webpack://nivo-website/../src/BarCanvas.tsx","webpack://nivo-website/../src/ResponsiveBar.tsx","webpack://nivo-website/../src/ResponsiveBarCanvas.tsx","webpack://nivo-website/../node_modules/lodash/_baseFilter.js","webpack://nivo-website/../node_modules/lodash/filter.js"],"sourcesContent":["export const defaultProps = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 13,\n}\n","import {\n    AnnotationSpec,\n    CircleAnnotationSpec,\n    DotAnnotationSpec,\n    Note,\n    NoteCanvas,\n    NoteSvg,\n    RectAnnotationSpec,\n} from './types'\nimport { isValidElement } from 'react'\n\nexport const isSvgNote = <Datum>(note: Note<Datum>): note is NoteSvg<Datum> => {\n    const noteType = typeof note\n\n    return (\n        isValidElement(note) ||\n        noteType === 'string' ||\n        noteType === 'function' ||\n        noteType === 'object'\n    )\n}\n\nexport const isCanvasNote = <Datum>(note: Note<Datum>): note is NoteCanvas<Datum> => {\n    const noteType = typeof note\n\n    return noteType === 'string' || noteType === 'function'\n}\n\nexport const isCircleAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is CircleAnnotationSpec<Datum> => annotationSpec.type === 'circle'\n\nexport const isDotAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is DotAnnotationSpec<Datum> => annotationSpec.type === 'dot'\n\nexport const isRectAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is RectAnnotationSpec<Datum> => annotationSpec.type === 'rect'\n","import { filter, isNumber, omit } from 'lodash'\nimport {\n    radiansToDegrees,\n    absoluteAngleDegrees,\n    degreesToRadians,\n    positionFromAngle,\n} from '@nivo/core'\nimport { defaultProps } from './props'\nimport {\n    AnnotationSpec,\n    AnnotationPositionGetter,\n    AnnotationDimensionsGetter,\n    BoundAnnotation,\n    AnnotationMatcher,\n    AnnotationInstructions,\n} from './types'\nimport { isCircleAnnotation, isRectAnnotation } from './utils'\n\nexport const bindAnnotations = <\n    Datum = {\n        x: number\n        y: number\n    }\n>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}): BoundAnnotation<Datum>[] =>\n    annotations.reduce((acc: BoundAnnotation<Datum>[], annotation) => {\n        const offset = annotation.offset || 0\n\n        return [\n            ...acc,\n            ...filter<Datum>(data, annotation.match).map(datum => {\n                const position = getPosition(datum)\n                const dimensions = getDimensions(datum)\n\n                if (isCircleAnnotation(annotation) || isRectAnnotation(annotation)) {\n                    dimensions.size = dimensions.size + offset * 2\n                    dimensions.width = dimensions.width + offset * 2\n                    dimensions.height = dimensions.height + offset * 2\n                }\n\n                // acc.push({\n                //     ...omit(annotation, ['match', 'offset']),\n                //     ...position,\n                //     ...dimensions,\n                //     size: annotation.size || dimensions.size,\n                //     datum,\n                // } as any)\n                // return [\n                //     ...acc,\n                //     {\n                //         ...omit(annotation, ['match', 'offset']),\n                //         ...position,\n                //         ...dimensions,\n                //         size: annotation.size || dimensions.size,\n                //         datum,\n                //     },\n                // ]\n                return {\n                    ...omit(annotation, ['match', 'offset']),\n                    ...position,\n                    ...dimensions,\n                    size: annotation.size || dimensions.size,\n                    datum,\n                } as Required<BoundAnnotation<Datum>>\n            }),\n        ]\n\n        // return acc\n    }, [])\n\nexport const getLinkAngle = (\n    sourceX: number,\n    sourceY: number,\n    targetX: number,\n    targetY: number\n) => {\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX)\n\n    return absoluteAngleDegrees(radiansToDegrees(angle))\n}\n\nexport const computeAnnotation = <Datum>(\n    annotation: Required<AnnotationSpec<Datum>>\n): AnnotationInstructions => {\n    const {\n        x,\n        y,\n        noteX,\n        noteY,\n        noteWidth = defaultProps.noteWidth,\n        noteTextOffset = defaultProps.noteTextOffset,\n    } = annotation\n\n    let computedNoteX: number\n    let computedNoteY: number\n\n    if (isNumber(noteX)) {\n        computedNoteX = x + noteX\n    } else if (noteX.abs !== undefined) {\n        computedNoteX = noteX.abs\n    } else {\n        throw new Error(`noteX should be either a number or an object containing an 'abs' property`)\n    }\n\n    if (isNumber(noteY)) {\n        computedNoteY = y + noteY\n    } else if (noteY.abs !== undefined) {\n        computedNoteY = noteY.abs\n    } else {\n        throw new Error(`noteY should be either a number or an object containing an 'abs' property`)\n    }\n\n    let computedX = x\n    let computedY = y\n\n    const angle = getLinkAngle(x, y, computedNoteX, computedNoteY)\n\n    if (isCircleAnnotation<Datum>(annotation)) {\n        const position = positionFromAngle(degreesToRadians(angle), annotation.size / 2)\n        computedX += position.x\n        computedY += position.y\n    }\n\n    if (isRectAnnotation<Datum>(annotation)) {\n        const eighth = Math.round((angle + 90) / 45) % 8\n        if (eighth === 0) {\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 1) {\n            computedX += annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 2) {\n            computedX += annotation.width / 2\n        }\n        if (eighth === 3) {\n            computedX += annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 4) {\n            computedY += annotation.height / 2\n        }\n        if (eighth === 5) {\n            computedX -= annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 6) {\n            computedX -= annotation.width / 2\n        }\n        if (eighth === 7) {\n            computedX -= annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n    }\n\n    let textX = computedNoteX\n    const textY = computedNoteY - noteTextOffset\n\n    let noteLineX = computedNoteX\n    const noteLineY = computedNoteY\n\n    if ((angle + 90) % 360 > 180) {\n        textX -= noteWidth\n        noteLineX -= noteWidth\n    } else {\n        noteLineX += noteWidth\n    }\n\n    return {\n        points: [\n            [computedX, computedY],\n            [computedNoteX, computedNoteY],\n            [noteLineX, noteLineY],\n        ] as [number, number][],\n        text: [textX, textY],\n        angle: angle + 90,\n    }\n}\n","import { useMemo } from 'react'\nimport { bindAnnotations, computeAnnotation } from './compute'\nimport {\n    AnnotationDimensionsGetter,\n    AnnotationMatcher,\n    AnnotationPositionGetter,\n    AnnotationSpec,\n} from './types'\n\n/**\n * Bind annotations to a dataset.\n */\nexport const useAnnotations = <Datum>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}) =>\n    useMemo(\n        () =>\n            bindAnnotations<Datum>({\n                data,\n                annotations,\n                getPosition,\n                getDimensions,\n            }),\n        [data, annotations, getPosition, getDimensions]\n    )\n\nexport const useComputedAnnotations = <Datum>({\n    annotations,\n}: {\n    annotations: Required<AnnotationSpec<Datum>>[]\n}) =>\n    useMemo(\n        () =>\n            annotations.map(annotation => ({\n                ...annotation,\n                computed: computeAnnotation<Datum>({\n                    ...annotation,\n                }),\n            })),\n        [annotations]\n    )\n\nexport const useComputedAnnotation = <Datum>(annotation: Required<AnnotationSpec<Datum>>) =>\n    useMemo(() => computeAnnotation<Datum>(annotation), [annotation])\n","import { createElement } from 'react'\nimport omit from 'lodash/omit'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { NoteSvg } from './types'\n\nexport const AnnotationNote = <Datum,>({\n    datum,\n    x,\n    y,\n    note,\n}: {\n    datum: Datum\n    x: number\n    y: number\n    note: NoteSvg<Datum>\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    if (typeof note === 'function') {\n        return createElement(note, { x, y, datum })\n    }\n\n    return (\n        <>\n            {theme.annotations.text.outlineWidth > 0 && (\n                <animated.text\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    style={{\n                        ...theme.annotations.text,\n                        strokeLinejoin: 'round',\n                        strokeWidth: theme.annotations.text.outlineWidth * 2,\n                        stroke: theme.annotations.text.outlineColor,\n                    }}\n                >\n                    {note}\n                </animated.text>\n            )}\n            <animated.text\n                x={animatedProps.x}\n                y={animatedProps.y}\n                style={omit(theme.annotations.text, ['outlineWidth', 'outlineColor'])}\n            >\n                {note}\n            </animated.text>\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath, useTheme } from '@nivo/core'\n\nexport const AnnotationLink = ({\n    points,\n    isOutline = false,\n}: {\n    points: [number, number][]\n    isOutline?: boolean\n}) => {\n    const theme = useTheme()\n\n    const path = useMemo(() => {\n        const [firstPoint, ...otherPoints] = points\n\n        return otherPoints.reduce(\n            (acc, [x, y]) => `${acc} L${x},${y}`,\n            `M${firstPoint[0]},${firstPoint[1]}`\n        )\n    }, [points])\n\n    const animatedPath = useAnimatedPath(path)\n\n    if (isOutline && theme.annotations.link.outlineWidth <= 0) {\n        return null\n    }\n\n    const style = { ...theme.annotations.link }\n    if (isOutline) {\n        style.strokeLinecap = 'square'\n        style.strokeWidth =\n            theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n        style.stroke = theme.annotations.link.outlineColor\n    }\n\n    return <animated.path fill=\"none\" d={animatedPath} style={style} />\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const CircleAnnotationOutline = ({ x, y, size }: { x: number; y: number; size: number }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { defaultProps } from './props'\n\nexport const DotAnnotationOutline = ({\n    x,\n    y,\n    size = defaultProps.dotSize,\n}: {\n    x: number\n    y: number\n    size?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth: theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.symbol}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const RectAnnotationOutline = ({\n    x,\n    y,\n    width,\n    height,\n}: {\n    x: number\n    y: number\n    width: number\n    height: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x: x - width / 2,\n        y: y - height / 2,\n        width,\n        height,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.rect\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    width={animatedProps.width}\n                    height={animatedProps.height}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.rect\n                x={animatedProps.x}\n                y={animatedProps.y}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useComputedAnnotation } from './hooks'\nimport { AnnotationNote } from './AnnotationNote'\nimport { AnnotationLink } from './AnnotationLink'\nimport { CircleAnnotationOutline } from './CircleAnnotationOutline'\nimport { DotAnnotationOutline } from './DotAnnotationOutline'\nimport { RectAnnotationOutline } from './RectAnnotationOutline'\nimport { BoundAnnotation } from './types'\nimport { isCircleAnnotation, isDotAnnotation, isRectAnnotation, isSvgNote } from './utils'\n\nexport const Annotation = <Datum,>(annotation: BoundAnnotation<Datum>) => {\n    const { datum, x, y, note } = annotation\n    const computed = useComputedAnnotation(annotation)\n\n    if (!isSvgNote(note)) {\n        throw new Error('note should be a valid react element')\n    }\n\n    return (\n        <>\n            <AnnotationLink points={computed.points} isOutline={true} />\n            {isCircleAnnotation(annotation) && (\n                <CircleAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isDotAnnotation(annotation) && (\n                <DotAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isRectAnnotation(annotation) && (\n                <RectAnnotationOutline\n                    x={x}\n                    y={y}\n                    width={annotation.width}\n                    height={annotation.height}\n                />\n            )}\n            <AnnotationLink points={computed.points} />\n            <AnnotationNote datum={datum} x={computed.text[0]} y={computed.text[1]} note={note} />\n        </>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { ComputedAnnotation } from './types'\nimport { isCanvasNote, isCircleAnnotation, isDotAnnotation, isRectAnnotation } from './utils'\n\nconst drawPoints = (ctx: CanvasRenderingContext2D, points: [number, number][]) => {\n    points.forEach(([x, y], index) => {\n        if (index === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    })\n}\n\nexport const renderAnnotationsToCanvas = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        annotations,\n        theme,\n    }: {\n        annotations: ComputedAnnotation<Datum>[]\n        theme: CompleteTheme\n    }\n) => {\n    if (annotations.length === 0) return\n\n    ctx.save()\n    annotations.forEach(annotation => {\n        if (!isCanvasNote(annotation.note)) {\n            throw new Error('note is invalid for canvas implementation')\n        }\n\n        if (theme.annotations.link.outlineWidth > 0) {\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.annotations.link.outlineColor\n            ctx.lineWidth =\n                theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n            ctx.beginPath()\n            drawPoints(ctx, annotation.computed.points)\n            ctx.stroke()\n            ctx.lineCap = 'butt'\n        }\n\n        if (isCircleAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation) && theme.annotations.symbol.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.symbol.outlineColor\n            ctx.lineWidth = theme.annotations.symbol.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isRectAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        ctx.strokeStyle = theme.annotations.link.stroke\n        ctx.lineWidth = theme.annotations.link.strokeWidth\n        ctx.beginPath()\n        drawPoints(ctx, annotation.computed.points)\n        ctx.stroke()\n\n        if (isCircleAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation)) {\n            ctx.fillStyle = theme.annotations.symbol.fill\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.fill()\n        }\n\n        if (isRectAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        if (typeof annotation.note === 'function') {\n            annotation.note(ctx, {\n                datum: annotation.datum,\n                x: annotation.computed.text[0],\n                y: annotation.computed.text[1],\n                theme,\n            })\n        } else {\n            ctx.font = `${theme.annotations.text.fontSize}px ${theme.annotations.text.fontFamily}`\n            ctx.fillStyle = theme.annotations.text.fill\n            ctx.strokeStyle = theme.annotations.text.outlineColor\n            ctx.lineWidth = theme.annotations.text.outlineWidth * 2\n            if (theme.annotations.text.outlineWidth > 0) {\n                ctx.lineJoin = 'round'\n                ctx.strokeText(\n                    annotation.note,\n                    annotation.computed.text[0],\n                    annotation.computed.text[1]\n                )\n                ctx.lineJoin = 'miter'\n            }\n            ctx.fillText(annotation.note, annotation.computed.text[0], annotation.computed.text[1])\n        }\n    })\n    ctx.restore()\n}\n","import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: RawDatum[], keys: string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport { uniqBy } from 'lodash'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarDatum, BarLayer, BarLayerId, BarSvgProps, ComputedBarDatumWithValue } from './types'\nimport { BarLegends } from './BarLegends'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { svgDefaultProps } from './props'\nimport { useTransition } from '@react-spring/web'\nimport { useBar } from './hooks'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel,\n    label,\n    labelSkipWidth,\n    labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as any) : null}\n                yScale={enableGridY ? (yScale as any) : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: any = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            innerWidth,\n            innerHeight,\n            width,\n            height,\n            bars,\n            xScale,\n            yScale,\n        }),\n        [commonProps, margin, innerWidth, innerHeight, width, height, bars, xScale, yScale]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { BarCanvasLayer, BarCanvasProps, BarDatum, ComputedBarDatum } from './types'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel,\n    label,\n    labelSkipWidth,\n    labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: any = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            margin,\n            innerWidth,\n            innerHeight,\n            width,\n            height,\n            bars,\n            xScale,\n            yScale,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            height,\n            innerHeight,\n            innerWidth,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            margin,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            bars,\n            xScale,\n            yScale,\n            tooltip,\n            width,\n        ]\n    )\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: xScale as any,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: yScale as any,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale as any,\n                    yScale: yScale as any,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: Omit<BarSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: Omit<BarCanvasProps<RawDatum>, 'height' | 'width'>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n"],"names":["defaultProps","isCircleAnnotation","annotationSpec","type","isDotAnnotation","isRectAnnotation","computeAnnotation","annotation","computedNoteX","computedNoteY","x","y","noteX","noteY","noteWidth","noteTextOffset","_isNumber","abs","Error","computedX","computedY","angle","sourceX","sourceY","targetX","targetY","Math","atan2","absoluteAngleDegrees","radiansToDegrees","getLinkAngle","position","positionFromAngle","degreesToRadians","size","eighth","round","height","width","textX","noteLineX","points","text","useAnnotations","data","annotations","getPosition","getDimensions","useMemo","reduce","acc","offset","_filter","match","map","datum","dimensions","_omit","bindAnnotations","useComputedAnnotations","computed","AnnotationNote","note","theme","useTheme","useMotionConfig","animate","springConfig","config","animatedProps","useSpring","immediate","createElement","_jsxs","outlineWidth","_jsx","animated","style","strokeLinejoin","strokeWidth","stroke","outlineColor","omit","AnnotationLink","isOutline","path","firstPoint","animatedPath","useAnimatedPath","link","strokeLinecap","fill","d","CircleAnnotationOutline","radius","outline","circle","cx","cy","r","DotAnnotationOutline","dotSize","symbol","RectAnnotationOutline","rect","Annotation","useComputedAnnotation","noteType","isValidElement","isSvgNote","drawPoints","ctx","forEach","index","moveTo","lineTo","renderAnnotationsToCanvas","length","save","isCanvasNote","lineCap","strokeStyle","lineWidth","beginPath","arc","PI","fillStyle","font","fontSize","fontFamily","lineJoin","strokeText","fillText","restore","BarAnnotations","bars","boundAnnotations","bar","max","i","BarLegends","legends","toggleSerie","legend","BoxLegendSvg","containerWidth","containerHeight","dataFrom","label","indexBy","keys","groupMode","layout","reverse","minValue","maxValue","valueScale","indexScale","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","from","colorBy","colors","scheme","borderRadius","borderWidth","borderColor","isInteractive","tooltip","color","BasicTooltip","id","value","formattedValue","enableChip","tooltipLabel","indexValue","initialHiddenIds","markers","svgDefaultProps","layers","barComponent","labelColor","labelOpacity","labelX","labelY","transform","shouldRenderLabel","onClick","onMouseEnter","onMouseLeave","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","g","to","rx","ry","focusable","tabIndex","undefined","onMouseMove","onFocus","onBlur","textAnchor","dominantBaseline","fillOpacity","labels","pointerEvents","defs","motionConfig","role","canvasDefaultProps","pixelRatio","window","devicePixelRatio","getIndexScale","getIndex","axis","computeScale","all","min","normalizeData","key","item","filterNullValues","Object","coerceValue","Number","gt","other","lt","range","start","end","Array","repeat","_","clampToZero","generateVerticalGroupedBars","barWidth","yRef","formatValue","getColor","getTooltipLabel","xScale","yScale","margin","compare","cleanedData","domain","rawValue","barHeight","barData","hidden","push","left","top","generateHorizontalGroupedBars","xRef","generateGroupedBars","indexScaleConfig","hiddenIds","props","filter","includes","otherAxis","scaleSpec","clampMin","values","entry","k","Boolean","isFinite","scale","bandwidth","params","flattenDeep","arr","some","isArray","concat","generateVerticalStackedBars","stackedData","stackedDataItem","generateHorizontalStackedBars","generateStackedBars","array","stack","num","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","_uniqBy","useBar","valueFormat","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","InnerBar","partialMargin","axisTop","axisRight","gridXValues","gridYValues","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","transition","useTransition","enter","update","leave","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","right","bottom","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","layer","Bar","renderWrapper","otherProps","Container","findBarUnderCursor","nodes","isCursorInRect","node","InnerBarCanvas","renderBar","quadraticCurveTo","closePath","textBaseline","textAlign","canvasRef","canvasEl","useRef","useEffect","current","getContext","background","fillRect","translate","line","renderGridLinesToCanvas","renderAxesToCanvas","renderLegendToCanvas","handleMouseHover","getRelativeCursor","ref","canvas","cursor","BarCanvas","forwardRef","ResponsiveBar","ResponsiveWrapper","ResponsiveBarCanvas","baseEach","module","exports","collection","predicate","result","arrayFilter","baseFilter","baseIteratee"],"sourceRoot":""}