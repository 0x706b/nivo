(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{"49sA":function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return i}));var o=n("6zZa"),a=["hot dog","burger","sandwich","kebab","fries","donut","junk","sushi","ramen","curry","udon","bagel","yakitori","takoyaki","tacos","miso soup","tortilla","tapas","chipirones","gazpacho","soba","bavette","steak","pizza","spaghetti","ravioli","salad","pad thai","bun","waffle","crepe","churros","paella","empanadas","bruschetta","onion soup","cassoulet","bouillabaisse","unagi","tempura","tonkatsu","shabu-shabu","twinkies","jerky","fajitas","jambalaya","meatloaf","mac n' cheese","baked beans","popcorn","buffalo wings","BBQ ribs","apple pie","nachos","risotto","tiramisu"],r=function(){return{data:Object(o.c)(a.slice(0,11),{size:9,min:0,max:100}),keys:a.slice(0,11)}},i=function(){return{data:Object(o.c)(a,{size:22,min:0,max:100}),keys:a}}},"8fPj":function(e,t,n){"use strict";var o=n("mXGw"),a=n.n(o),r=n("nLLr"),i=function(e){var t=e.value,n=e.x,o=e.y,r=e.width,i=e.height,l=e.color,c=e.opacity,u=e.borderWidth,s=e.borderColor,d=e.textColor;return a.a.createElement("g",{transform:"translate("+n+", "+o+")"},a.a.createElement("path",{transform:"rotate("+(t<50?180:0)+")",fill:l,fillOpacity:c,strokeWidth:u,stroke:s,d:"\n                M0 -"+Math.round(i/2)+"\n                L"+Math.round(r/2)+" "+Math.round(i/2)+"\n                L-"+Math.round(r/2)+" "+Math.round(i/2)+"\n                L0 -"+Math.round(i/2)+"\n            "}),a.a.createElement("text",{alignmentBaseline:"central",textAnchor:"middle",style:{fill:d},dy:t<50?-6:6},t))};t.a=Object(r.c)({cellShape:function(e){return"Custom(props) => (…)"===e?i:e},axisTop:Object(r.a)("top"),axisRight:Object(r.a)("right"),axisBottom:Object(r.a)("bottom"),axisLeft:Object(r.a)("left")},{exclude:["enable axisTop","enable axisRight","enable axisBottom","enable axisLeft"]})},"Iya+":function(e,t,n){"use strict";n.r(t);var o=n("mXGw"),a=n.n(o),r=n("NNTJ"),i=n("5QYd"),l=n("RqPZ"),c=n.n(l),u=n("ZS2m"),s=n("44gg"),d=n.n(s),p=n("8fPj"),h=n("egfL"),b=n("49sA"),y={indexBy:"country",margin:{top:100,right:60,bottom:60,left:60},minValue:"auto",maxValue:"auto",forceSquare:!0,sizeVariation:0,padding:0,colors:"nivo",axisTop:{enable:!0,orient:"top",tickSize:5,tickPadding:5,tickRotation:-90,legend:"",legendOffset:36},axisRight:{enable:!1,orient:"right",tickSize:5,tickPadding:5,tickRotation:0,legend:"country",legendPosition:"middle",legendOffset:40},axisBottom:{enable:!1,orient:"bottom",tickSize:5,tickPadding:5,tickRotation:-90,legend:"",legendPosition:"middle",legendOffset:36},axisLeft:{enable:!0,orient:"left",tickSize:5,tickPadding:5,tickRotation:0,legend:"country",legendPosition:"middle",legendOffset:-40},enableGridX:!1,enableGridY:!1,cellShape:"rect",cellOpacity:1,cellBorderWidth:0,cellBorderColor:{from:"color",modifiers:[["darker",.4]]},enableLabels:!0,labelTextColor:{from:"color",modifiers:[["darker",1.8]]},defs:[Object(i.W)("lines",{background:"inherit",color:"rgba(0, 0, 0, 0.1)",rotation:-45,lineWidth:4,spacing:7})],fill:[{match:function(e){return!1},id:"lines"}],animate:!0,motionConfig:"wobbly",motionStiffness:80,motionDamping:9,isInteractive:!0,hoverTarget:"cell",cellHoverOpacity:1,cellHoverOthersOpacity:.25};t.default=function(){return a.a.createElement(u.a,{name:"HeatMap",meta:d.a.HeatMap,icon:"heatmap",flavors:d.a.flavors,currentFlavor:"svg",properties:h.a,initialProperties:y,defaultProperties:r.b,propertiesMapper:p.a,codePropertiesMapper:function(e,t){return Object.assign({keys:t.keys},e,{cellShape:c()(e.cellShape)?"Custom(props) => (…)":e.cellShape})},generateData:b.b,getTabData:function(e){return e.data}},(function(e,t,n,o){return a.a.createElement(r.c,Object.assign({data:t.data,keys:t.keys},e,{theme:n,onClick:function(e){o({type:"click",label:"[cell] "+e.yKey+"."+e.xKey+": "+e.value,color:e.color,data:e})}}))}))}},egfL:function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var o=n("Eo5u"),a=n("NNTJ"),r=n("RQLE"),i=[{key:"data",group:"Base",help:"Chart data.",type:"object[]",required:!0},{key:"indexBy",group:"Base",help:"Key to use to index the data.",description:"\n            Key to use to index the data,\n            this key must exist in each data item.\n            You can also provide a function which will\n            receive the data item and must return\n            the desired index\n        ",type:"string | Function",required:!1,defaultValue:a.b.indexBy},{key:"keys",group:"Base",help:"Keys to use to determine each serie.",type:"string[]",required:!1,defaultValue:a.b.keys},{key:"minValue",help:"Minimum value.",description:"\n            Minimum value.\n            If 'auto', will pick the lowest value\n            in the provided data set. Should be overriden\n            if your data set does not contain desired\n            lower bound value.\n        ",required:!1,defaultValue:a.b.minValue,type:"number | 'auto'",controlType:"switchableRange",group:"Base",controlOptions:{disabledValue:"auto",defaultValue:0,min:-100,max:100}},{key:"maxValue",help:"Maximum value.",description:"\n            Maximum value. If 'auto', will pick the highest value\n            in the provided data set. Should be overriden\n            if your data set does not contain desired\n            higher bound value.\n        ",required:!1,defaultValue:a.b.maxValue,type:"number | 'auto'",controlType:"switchableRange",group:"Base",controlOptions:{disabledValue:"auto",defaultValue:100,min:-100,max:100}},{key:"forceSquare",help:"Force square cells (width = height).",required:!1,defaultValue:a.b.forceSquare,type:"boolean",controlType:"switch",group:"Base"},{key:"sizeVariation",help:"Cell size variation.",description:"Size variation (0~1), if value is 0 size won't be affected. If you use for example the value 0.3, cell width/height will vary between 0.7~1 according to its corresponding value.",required:!1,defaultValue:a.b.sizeVariation,type:"number",controlType:"range",group:"Base",controlOptions:{min:0,max:1,step:.02}},{key:"padding",help:"Padding.",required:!1,defaultValue:a.b.padding,type:"number",controlType:"range",group:"Base",controlOptions:{min:0,max:36,unit:"px"}},{key:"width",enableControlForFlavors:["api"],help:"Chart width.",description:"\n            not required if using\n            `<ResponsiveHeatMap/>`.\n        ",type:"number",required:!0,controlType:"range",group:"Base",controlOptions:{unit:"px",min:100,max:1200,step:5}},{key:"height",enableControlForFlavors:["api"],help:"Chart height.",description:"\n            not required if using\n            `<ResponsiveHeatMap/>`.\n        ",type:"number",required:!0,controlType:"range",group:"Base",controlOptions:{unit:"px",min:100,max:1200,step:5}},{key:"pixelRatio",flavors:["canvas"],help:"Adjust pixel ratio, useful for HiDPI screens.",required:!1,defaultValue:"Depends on device",type:"number",controlType:"range",group:"Base",controlOptions:{min:1,max:2}},{key:"margin",help:"Chart margin.",type:"object",required:!1,controlType:"margin",group:"Base"},r.f,{key:"cellShape",help:"Cell shape/component.",description:"\n            Cell shape, can be one of: `'rect'`, `'circle'`,\n            if a function is provided, it must return\n            a valid SVG element and will receive\n            the following props:\n            ```\n            {\n                value:       number,\n                x:           number,\n                y:           number,\n                width:       number,\n                height:      number,\n                color:       string,\n                opacity:     number,\n                borderWidth: number,\n                borderColor: string,\n                textColor:   string,\n            }\n            ```\n        ",type:"string | Function",required:!1,defaultValue:a.b.cellShape,controlType:"choices",group:"Style",controlOptions:{choices:["rect","circle","Custom(props) => (…)"].map((function(e){return{label:e,value:e}}))}},{key:"colors",help:"Defines color range.",type:"string | Function | string[]",required:!1,defaultValue:"nivo",controlType:"quantizeColors",group:"Style"},{key:"cellOpacity",help:"Cell opacity (0~1).",required:!1,defaultValue:a.b.cellOpacity,type:"number",controlType:"opacity",group:"Style"},{key:"cellBorderWidth",help:"Cell border width.",required:!1,defaultValue:a.b.cellBorderWidth,type:"number",controlType:"lineWidth",group:"Style"},{key:"cellBorderColor",help:"Method to compute cell border color.",description:"\n            how to compute cell border color,\n            [see dedicated documentation](self:/guides/colors).\n        ",type:"string | object | Function",required:!1,defaultValue:a.b.cellBorderColor,controlType:"inheritedColor",group:"Style"},{key:"enableLabels",help:"Enable/disable labels.",type:"boolean",required:!1,defaultValue:a.b.enableLabels,controlType:"switch",group:"Labels"},{key:"labelTextColor",help:"Method to compute label text color.",description:"\n            how to compute label text color,\n            [see dedicated documentation](self:/guides/colors).\n        ",type:"string | object | Function",required:!1,defaultValue:a.b.labelTextColor,controlType:"inheritedColor",group:"Labels"},{key:"enableGridX",help:"Enable/disable x grid.",type:"boolean",required:!1,defaultValue:a.b.enableGridX,controlType:"switch",group:"Grid & Axes"},{key:"enableGridY",help:"Enable/disable y grid.",type:"boolean",required:!1,defaultValue:a.b.enableGridY,controlType:"switch",group:"Grid & Axes"}].concat(Object(o.a)(Object(r.a)()),[{key:"isInteractive",flavors:["svg","canvas"],help:"Enable/disable interactivity.",type:"boolean",required:!1,defaultValue:a.b.isInteractive,controlType:"switch",group:"Interactivity"},{key:"onClick",flavors:["svg","canvas"],group:"Interactivity",type:"(cell, event) => void",required:!1,help:"onClick handler.",description:"\n            onClick handler, will receive node data\n            as first argument & event as second one.\n            The node data has the following shape:\n            ```\n            {\n                key:        string,\n                value:      number,\n                x:          number,\n                xKey:       {string|number},\n                y:          number,\n                yKey:       {string|number},\n                width:      number,\n                height:     number,\n                opacity:    number\n            }\n            ```\n        "},{key:"hoverTarget",flavors:["svg","canvas"],help:"Defines hover behavior.",description:"\n            Defines hover behavior:\n\n            - **cell**: highlight the current cell\n            - **row**: highlight the current cell's row\n            - **column**: highlight the current cell's column\n            - **rowColumn**: highlight the current cell's row & column\n        ",required:!1,defaultValue:a.b.hoverTarget,type:"string",controlType:"choices",group:"Interactivity",controlOptions:{choices:["cell","row","column","rowColumn"].map((function(e){return{label:e,value:e}}))}},{key:"cellHoverOpacity",flavors:["svg","canvas"],help:"Cell opacity on hover.",required:!1,defaultValue:a.b.cellHoverOpacity,type:"number",controlType:"opacity",group:"Interactivity"},{key:"cellHoverOthersOpacity",flavors:["svg","canvas"],help:"Cell opacity when not hovered.",required:!1,defaultValue:a.b.cellHoverOthersOpacity,type:"number",controlType:"opacity",group:"Interactivity"}],Object(o.a)(Object(r.e)(["svg"],a.b,"react-spring"))),l=Object(r.d)(i)}}]);
//# sourceMappingURL=component---src-pages-heatmap-index-js-4461cb6ca3b0f8783e1f.js.map