{"version":3,"file":"component---src-pages-marimekko-index-tsx-714e2c3bac45b59b16ac.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-shape/src/constant.js","webpack://nivo-website/./src/lib/settings.ts","webpack://nivo-website/./src/data/components/marimekko/mapper.tsx","webpack://nivo-website/./src/data/components/marimekko/props.ts","webpack://nivo-website/./src/pages/marimekko/index.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/types.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/Bar.tsx","webpack://nivo-website/../src/Bars.tsx","webpack://nivo-website/../src/BarTooltip.tsx","webpack://nivo-website/../src/Marimekko.tsx","webpack://nivo-website/../src/ResponsiveMarimekko.tsx","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/random.js"],"sourcesContent":["export default function (x) {\n  return function constant() {\n    return x;\n  };\n}","import omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\nimport { AxisProps, CanvasAxisProps } from '@nivo/axes'\n\nexport const settingsMapper =\n    (mapping: any, { exclude = [] }: { exclude?: string[] } = {}) =>\n    (settings: any, options: any = {}) => {\n        const overrides: any = {}\n\n        Object.keys(settings).forEach(key => {\n            if (mapping[key]) {\n                overrides[key] = mapping[key](settings[key], settings, options)\n            }\n        })\n\n        return {\n            ...omit(settings, exclude),\n            ...overrides,\n        }\n    }\n\nexport type AxisWithToggle<Axis extends AxisProps | CanvasAxisProps> = NonNullable<Axis> & {\n    enable: boolean\n}\n\nexport const mapAxis = (type: 'top' | 'right' | 'bottom' | 'left') => (value: any, settings: any) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }: { format: string; enabled: boolean }) =>\n    enabled ? format : undefined\n","import React from 'react'\nimport styled from 'styled-components'\nimport { patternLinesDef } from '@nivo/core'\nimport { mapAxis, mapFormat, settingsMapper } from '../../../lib/settings'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n    background: #333;\n    padding: 12px 16px;\n    font-size: 12px;\n    border-radius: 2px;\n`\nconst TooltipKey = styled.span``\nconst TooltipValue = styled.span`\n    font-weight: 600;\n`\n\nconst CustomTooltip = ({ bar }) => (\n    <TooltipWrapper style={{ color: bar.color }}>\n        <TooltipKey>datum.id</TooltipKey>\n        <TooltipValue>{bar.datum.id}</TooltipValue>\n        <TooltipKey>id</TooltipKey>\n        <TooltipValue>{bar.id}</TooltipValue>\n        <TooltipKey>value</TooltipKey>\n        <TooltipValue>{bar.value}</TooltipValue>\n        <TooltipKey>color</TooltipKey>\n        <TooltipValue>{bar.color}</TooltipValue>\n        <TooltipKey>thickness</TooltipKey>\n        <TooltipValue>{bar.datum.thickness}</TooltipValue>\n    </TooltipWrapper>\n)\n\nexport default settingsMapper(\n    {\n        valueFormat: mapFormat,\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return undefined\n\n            return CustomTooltip\n        },\n        defs: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                patternLinesDef('lines', {\n                    background: 'rgba(0, 0, 0, 0)',\n                    color: 'inherit',\n                    rotation: -45,\n                    lineWidth: 4,\n                    spacing: 8,\n                }),\n            ]\n        },\n        fill: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                { match: { id: 'agree strongly' }, id: 'lines' },\n                { match: { id: 'disagree strongly' }, id: 'lines' },\n            ]\n        },\n    },\n    {\n        exclude: ['custom tooltip example', 'showcase pattern usage'],\n    }\n)\n","import { defaultProps as defaults, offsetById } from '@nivo/marimekko'\nimport { OrdinalColorScaleConfig } from '@nivo/colors'\nimport {\n    themeProperty,\n    defsProperties,\n    groupProperties,\n    getLegendsProps,\n    motionProperties,\n} from '../../../lib/componentProperties'\nimport {\n    chartDimensions,\n    ordinalColors,\n    chartGrid,\n    axes,\n    isInteractive,\n} from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg']\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Chart data, which should be immutable.',\n        description: `\n            The data doesn't have to conform to a specific schema,\n            it's gonna depend on how you configure \\`id\\`, \\`value\\`\n            and \\`dimensions\\`.\n        `,\n        type: 'RawDatum[]',\n        required: true,\n    },\n    {\n        key: 'id',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'ID accessor.',\n        description: `\n            Define how to access the ID of each datum,\n            by default, nivo will look for the \\`id\\` property.\n        `,\n        type: 'string | (datum: RawDatum): string | number',\n        required: true,\n    },\n    {\n        key: 'value',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Value accessor.',\n        description: `\n            Define how to access the value of each datum,\n            which will dictate the thickness of the bars,\n            by default, nivo will look for the \\`value\\` property.\n        `,\n        type: 'string | (datum: RawDatum): number',\n        required: true,\n    },\n    {\n        key: 'dimensions',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Data dimensions configuration.',\n        type: '{ id: string, value: string | (datum: RawDatum) => number }',\n        required: true,\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'string | (value: number) => string | number',\n        control: { type: 'valueFormat' },\n    },\n    {\n        key: 'layout',\n        help: `How to display bars.`,\n        type: 'string',\n        flavors: allFlavors,\n        required: false,\n        defaultValue: defaults.layout,\n        group: 'Base',\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'horizontal', value: 'horizontal' },\n                { label: 'vertical', value: 'vertical' },\n            ],\n        },\n    },\n    {\n        key: 'offset',\n        help: 'Offset type.',\n        type: 'OffsetId',\n        flavors: allFlavors,\n        required: false,\n        group: 'Base',\n        defaultValue: defaults.offset,\n        control: {\n            type: 'choices',\n            choices: Object.keys(offsetById).map(key => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'outerPadding',\n        help: 'Space before the first bar and after the last one.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.outerPadding,\n        group: 'Base',\n        control: {\n            type: 'range',\n            min: 0,\n            max: 20,\n            unit: 'px',\n        },\n    },\n    {\n        key: 'innerPadding',\n        help: 'Space between bars.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.innerPadding,\n        group: 'Base',\n        control: {\n            type: 'range',\n            min: 0,\n            max: 20,\n            unit: 'px',\n        },\n    },\n    ...chartDimensions(allFlavors),\n    themeProperty(allFlavors),\n    ordinalColors({\n        flavors: allFlavors,\n        defaultValue: defaults.colors as OrdinalColorScaleConfig,\n    }),\n    ...defsProperties('Style', allFlavors),\n    {\n        key: 'showcase pattern usage',\n        flavors: ['svg'],\n        help: 'Patterns.',\n        required: false,\n        description: `\n            You can use \\`defs\\` and \\`fill\\` properties\n            to use patterns, see\n            [dedicated guide](self:/guides/patterns)\n            for further information.\n        `,\n        type: 'boolean',\n        control: { type: 'switch' },\n        group: 'Style',\n    },\n    {\n        key: 'borderWidth',\n        help: 'Slices border width.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.borderWidth,\n        control: { type: 'lineWidth' },\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute border color.',\n        flavors: allFlavors,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.borderColor,\n        control: { type: 'inheritedColor' },\n        group: 'Style',\n    },\n    ...chartGrid({\n        flavors: allFlavors,\n        values: true,\n        xDefault: defaults.enableGridX,\n        yDefault: defaults.enableGridY,\n    }),\n    ...axes({ flavors: allFlavors }),\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        flavors: allFlavors,\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer must be a component.\n            \n            The layer component which will receive the chart's\n            context & computed data and must return a valid SVG element\n            for the \\`Marimekko\\` component.\n            \n            The props passed to layers have the following structure:\n            \n            \\`\\`\\`\n            {\n                data: ComputedDatum<RawDatum>[]\n                bars: BarDatum<RawDatum>[]\n                thicknessScale: ScaleLinear<number, number>\n                dimensionsScale: ScaleLinear<number, number>\n            }\n            \\`\\`\\`\n        `,\n        required: false,\n        type: 'Array<string | Function>',\n        defaultValue: defaults.layers,\n    },\n    isInteractive({\n        flavors: ['svg'],\n        defaultValue: defaults.isInteractive,\n    }),\n    {\n        key: 'onClick',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onClick handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseEnter handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseMove handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseLeave handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        flavors: allFlavors,\n        type: 'Component',\n        required: false,\n        help: 'Custom tooltip component',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will receive\n            the following props:\n            \n            \\`\\`\\`\n            {\n                bar: BarDatum<RawDatum>\n            }\n            \\`\\`\\`\n            \n            You can also customize the style of the tooltip using\n            the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        help: 'Showcase custom tooltip.',\n        flavors: allFlavors,\n        required: false,\n        type: 'boolean',\n        control: { type: 'switch' },\n        group: 'Interactivity',\n    },\n    ...motionProperties(['svg'], defaults, 'react-spring'),\n    {\n        key: 'legends',\n        flavors: ['svg'],\n        type: 'Legend[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        required: false,\n        control: {\n            type: 'array',\n            props: getLegendsProps(['svg']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend: any) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: (data: any) => {\n                    console.log(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n]\n\nexport const groups = groupProperties(props)\n","import React from 'react'\nimport { ResponsiveMarimekko, defaultProps } from '@nivo/marimekko'\nimport { random, omit } from 'lodash'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/marimekko/meta.yml'\nimport mapper from '../../data/components/marimekko/mapper'\nimport { groups } from '../../data/components/marimekko/props'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst getRandomValue = () => random(0, 32)\n\nconst generateData = () =>\n    [`it's good`, `it's sweet`, `it's spicy`, 'worth eating', 'worth buying'].map(statement => ({\n        statement,\n        participation: getRandomValue(),\n        stronglyAgree: getRandomValue(),\n        agree: getRandomValue(),\n        disagree: getRandomValue(),\n        stronglyDisagree: getRandomValue(),\n    }))\n\nconst initialProperties = {\n    id: 'statement',\n    value: 'participation',\n    dimensions: [\n        {\n            id: 'disagree strongly',\n            value: 'stronglyDisagree',\n        },\n        {\n            id: 'disagree',\n            value: 'disagree',\n        },\n        {\n            id: 'agree',\n            value: 'agree',\n        },\n        {\n            id: 'agree strongly',\n            value: 'stronglyAgree',\n        },\n    ],\n    layout: defaultProps.layout,\n    offset: defaultProps.offset,\n    outerPadding: defaultProps.outerPadding,\n    innerPadding: 9,\n\n    axisTop: {\n        enable: false,\n        orient: 'top',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 36,\n    },\n    axisRight: {\n        enable: true,\n        orient: 'right',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 0,\n    },\n    axisBottom: {\n        enable: true,\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'participation',\n        legendOffset: 36,\n        legendPosition: 'middle',\n    },\n    axisLeft: {\n        enable: true,\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'opinions',\n        legendOffset: -40,\n        legendPosition: 'middle',\n    },\n    enableGridX: defaultProps.enableGridX,\n    enableGridY: defaultProps.enableGridY,\n\n    margin: {\n        top: 40,\n        right: 80,\n        bottom: 100,\n        left: 80,\n    },\n\n    valueFormat: { format: '', enabled: false },\n\n    colors: { scheme: 'spectral' },\n\n    borderWidth: 1,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.2]],\n    },\n\n    isInteractive: true,\n    'custom tooltip example': false,\n    tooltip: null,\n    'showcase pattern usage': true,\n\n    defs: [],\n    fill: [],\n\n    animate: defaultProps.animate,\n    motionConfig: defaultProps.motionConfig,\n\n    legends: [\n        {\n            anchor: 'bottom',\n            direction: 'row',\n            justify: false,\n            translateX: 0,\n            translateY: 80,\n            itemsSpacing: 0,\n            itemWidth: 140,\n            itemHeight: 18,\n            itemTextColor: '#999',\n            itemDirection: 'right-to-left',\n            itemOpacity: 1,\n            symbolSize: 18,\n            symbolShape: 'square',\n            effects: [\n                {\n                    on: 'hover',\n                    style: {\n                        itemTextColor: '#000',\n                    },\n                },\n            ],\n        },\n    ],\n}\n\nconst Marimekko = () => {\n    const {\n        image: {\n            childImageSharp: { gatsbyImageData: image },\n        },\n    } = useStaticQuery(graphql`\n        query {\n            image: file(absolutePath: { glob: \"**/src/assets/captures/marimekko.png\" }) {\n                childImageSharp {\n                    gatsbyImageData(layout: FIXED, width: 700, quality: 100)\n                }\n            }\n        }\n    `)\n\n    return (\n        <ComponentTemplate\n            name=\"Marimekko\"\n            meta={meta.Marimekko}\n            icon=\"marimekko\"\n            flavors={meta.flavors}\n            currentFlavor=\"svg\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={defaultProps}\n            propertiesMapper={mapper}\n            generateData={generateData}\n            image={image}\n        >\n            {(properties, data, theme, logAction) => {\n                const handleClick = bar => {\n                    logAction({\n                        type: 'click',\n                        label: `[bar] ${bar.datum.id} - ${bar.id}: ${bar.value}`,\n                        color: bar.color,\n                        // prevent cyclic dependency\n                        data: {\n                            ...omit(bar, ['datum']),\n                            datum: omit(bar.datum, ['dimensions']),\n                        },\n                    })\n                }\n\n                return (\n                    <ResponsiveMarimekko\n                        data={data}\n                        {...properties}\n                        theme={theme}\n                        onClick={handleClick}\n                        legends={properties.legends.map(legend => ({\n                            ...legend,\n                        }))}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default Marimekko\n","import { LayerId, Layout, OffsetId } from './types'\n\nexport const defaultProps = {\n    layout: 'vertical' as Layout,\n    offset: 'none' as OffsetId,\n    outerPadding: 0,\n    innerPadding: 3,\n\n    layers: ['grid', 'axes', 'bars', 'legends'] as LayerId[],\n\n    enableGridX: false,\n    enableGridY: true,\n\n    colors: { scheme: 'nivo' },\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import * as React from 'react'\nimport {\n    stackOffsetDiverging,\n    stackOffsetExpand,\n    stackOffsetNone,\n    stackOffsetSilhouette,\n    stackOffsetWiggle,\n} from 'd3-shape'\nimport { ScaleLinear } from 'd3-scale'\nimport { Box, Dimensions, Theme, SvgDefsAndFill, ModernMotionProps, ValueFormat } from '@nivo/core'\nimport { AxisProps } from '@nivo/axes'\nimport { OrdinalColorScaleConfig, InheritedColorConfig } from '@nivo/colors'\nimport { LegendProps } from '@nivo/legends'\n\nexport type DatumId = string | number\nexport type DatumValue = number\nexport type DatumFormattedValue = string | number\n\nexport type DatumPropertyAccessor<RawDatum, T> = (datum: RawDatum) => T\n\nexport interface DataProps<RawDatum> {\n    data: RawDatum[]\n    id: string | number | DatumPropertyAccessor<RawDatum, DatumId>\n    value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    dimensions: {\n        id: string\n        value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    }[]\n    valueFormat?: ValueFormat<number>\n}\n\nexport interface NormalizedDatum<RawDatum> {\n    index: number\n    id: DatumId\n    value: DatumValue\n    data: RawDatum\n}\n\nexport interface DimensionDatum<RawDatum> {\n    id: string\n    value: number\n    formattedValue: string | number\n    color: string\n    x: number\n    y: number\n    width: number\n    height: number\n    datum: ComputedDatum<RawDatum>\n}\n\nexport interface ComputedDatum<RawDatum> extends NormalizedDatum<RawDatum> {\n    x: number\n    y: number\n    width: number\n    height: number\n    dimensions: DimensionDatum<RawDatum>[]\n}\n\nexport interface BarDatum<RawDatum> extends DimensionDatum<RawDatum> {\n    key: string\n    fill?: string\n    borderColor: string\n    borderWidth: number\n}\n\nexport type LabelAccessorFunction<RawDatum> = (datum: ComputedDatum<RawDatum>) => string | number\n\nexport type LayerId = 'grid' | 'axes' | 'bars' | 'legends'\n\nexport interface CustomLayerProps<RawDatum> {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n}\n\nexport type CustomLayer<RawDatum> = React.FC<CustomLayerProps<RawDatum>>\n\nexport type Layer<RawDatum> = LayerId | CustomLayer<RawDatum>\n\nexport interface TooltipProps<RawDatum> {\n    bar: BarDatum<RawDatum>\n}\n\nexport type BarTooltipType<RawDatum> = (props: TooltipProps<RawDatum>) => JSX.Element\n\nexport type Layout = 'horizontal' | 'vertical'\n\nexport const offsetById = {\n    // Applies a zero baseline and normalizes the values\n    // for each point such that the topline is always one.\n    expand: stackOffsetExpand,\n    // Positive values are stacked above zero, negative values\n    // are stacked below zero, and zero values are stacked at zero.\n    diverging: stackOffsetDiverging,\n    // Applies a zero baseline.\n    none: stackOffsetNone,\n    // Shifts the baseline down such that the center of the streamgraph\n    // is always at zero.\n    silouhette: stackOffsetSilhouette,\n    // Shifts the baseline so as to minimize the weighted wiggle of layers.\n    // This offset is recommended for streamgraphs in conjunction with the inside-out order.\n    // See Stacked Graphs—Geometry & Aesthetics by Bryon & Wattenberg for more information.\n    wiggle: stackOffsetWiggle,\n}\n\nexport type OffsetId = keyof typeof offsetById\n\nexport type CommonProps<RawDatum> = {\n    margin: Box\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n\n    // axes and grid\n    axisTop?: AxisProps | null\n    axisRight?: AxisProps | null\n    axisBottom?: AxisProps | null\n    axisLeft?: AxisProps | null\n    enableGridX: boolean\n    gridXValues?: number[]\n    enableGridY: boolean\n    gridYValues?: number[]\n\n    // colors, theme and border\n    colors: OrdinalColorScaleConfig<Omit<DimensionDatum<RawDatum>, 'color' | 'fill'>>\n    theme: Theme\n    borderWidth: number\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // labels\n    enableLabels: boolean\n    label: string | LabelAccessorFunction<RawDatum>\n    labelSkipWidth: number\n    labelSkipHeight: number\n    labelTextColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // interactivity\n    isInteractive: boolean\n    tooltip: BarTooltipType<RawDatum>\n\n    legends: LegendProps[]\n\n    role: string\n}\n\nexport type MouseEventHandler<RawDatum, ElementType> = (\n    datum: BarDatum<RawDatum>,\n    event: React.MouseEvent<ElementType>\n) => void\n\nexport type MouseEventHandlers<RawDatum, ElementType> = Partial<{\n    onClick: MouseEventHandler<RawDatum, ElementType>\n    onMouseEnter: MouseEventHandler<RawDatum, ElementType>\n    onMouseMove: MouseEventHandler<RawDatum, ElementType>\n    onMouseLeave: MouseEventHandler<RawDatum, ElementType>\n}>\n\nexport type SvgProps<RawDatum> = DataProps<RawDatum> &\n    Dimensions &\n    Partial<CommonProps<RawDatum>> &\n    ModernMotionProps &\n    SvgDefsAndFill<BarDatum<RawDatum>> &\n    MouseEventHandlers<RawDatum, SVGRectElement> & {\n        layers?: Layer<RawDatum>[]\n    }\n","import { useMemo } from 'react'\nimport { get } from 'lodash'\nimport { stack as d3Stack, Stack, Series } from 'd3-shape'\nimport { ScaleLinear, scaleLinear } from 'd3-scale'\nimport { useValueFormatter, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport {\n    NormalizedDatum,\n    ComputedDatum,\n    DataProps,\n    DatumPropertyAccessor,\n    Layout,\n    DimensionDatum,\n    CommonProps,\n    CustomLayerProps,\n    BarDatum,\n    OffsetId,\n    offsetById,\n} from './types'\n\n// d3 stack does not support defining `.keys()` using\n// a mix of keys and custom value accessors, so we're\n// building a map of accessors in any case, we're gonna\n// use it later for `stack.value()`.\nexport const useDataDimensions = <RawDatum>(rawDimensions: DataProps<RawDatum>['dimensions']) =>\n    useMemo(() => {\n        const dimensions: Record<string, (datum: RawDatum) => number> = {}\n        const dimensionIds: string[] = []\n        rawDimensions.forEach(dimension => {\n            dimensionIds.push(dimension.id)\n            dimensions[dimension.id] =\n                typeof dimension.value === 'function'\n                    ? dimension.value\n                    : (datum: RawDatum) => get(datum, dimension.value as string, 0)\n        })\n\n        return { dimensionIds, dimensions }\n    }, [rawDimensions])\n\nexport const useStack = <RawDatum>(\n    dimensionIds: string[],\n    dimensions: Record<string, (datum: RawDatum) => number>,\n    offset: OffsetId\n) =>\n    useMemo(() => {\n        const offsetFunction = offsetById[offset]\n\n        return d3Stack<RawDatum>()\n            .keys(dimensionIds)\n            .value((datum, key) => dimensions[key](datum))\n            .offset(offsetFunction)\n    }, [dimensionIds, dimensions, offset])\n\nexport const useStackedData = <RawDatum>(\n    stack: Stack<any, RawDatum, string>,\n    data: DataProps<RawDatum>['data']\n) =>\n    useMemo(() => {\n        const stacked = stack(data)\n\n        const allValues: number[] = []\n        stacked.forEach(dimension => {\n            dimension.forEach(datum => {\n                allValues.push(datum[0])\n                allValues.push(datum[1])\n            })\n        })\n\n        const min = Math.min(...allValues)\n        const max = Math.max(...allValues)\n\n        return {\n            stacked,\n            min,\n            max,\n        }\n    }, [stack, data])\n\nexport const useDimensionsScale = (\n    min: number,\n    max: number,\n    width: number,\n    height: number,\n    layout: Layout\n) =>\n    useMemo(() => {\n        if (layout === 'vertical') {\n            return scaleLinear().domain([max, min]).range([0, height])\n        }\n\n        return scaleLinear().domain([min, max]).range([0, width])\n    }, [min, max, width, height, layout])\n\nexport const useNormalizedData = <RawDatum>(\n    data: DataProps<RawDatum>['data'],\n    id: DataProps<RawDatum>['id'],\n    value: DataProps<RawDatum>['value']\n) => {\n    const getId: DatumPropertyAccessor<RawDatum, string | number> =\n        typeof id === 'function' ? id : (datum: RawDatum) => get(datum, id)\n    const getValue: DatumPropertyAccessor<RawDatum, number> =\n        typeof value === 'function' ? value : (datum: RawDatum) => get(datum, value, 0)\n\n    return useMemo(() => {\n        const normalized: NormalizedDatum<RawDatum>[] = []\n        data.forEach((datum, index) => {\n            const datumId = getId(datum)\n            const datumValue = getValue(datum)\n\n            normalized.push({\n                index,\n                id: datumId,\n                value: datumValue,\n                data: datum,\n            })\n        })\n\n        return normalized\n    }, [data, getId, getValue])\n}\n\nexport const useThicknessScale = <RawDatum>({\n    data,\n    width,\n    height,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    width: number\n    height: number\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) =>\n    useMemo(() => {\n        const totalValue = data.reduce((acc, datum) => acc + datum.value, 0)\n\n        const thicknessScale = scaleLinear().domain([0, totalValue])\n\n        const totalPadding = 2 * outerPadding + (data.length - 1) * innerPadding\n\n        if (layout === 'vertical') {\n            thicknessScale.range([0, width - totalPadding])\n        } else {\n            thicknessScale.range([0, height - totalPadding])\n        }\n\n        return thicknessScale\n    }, [data, width, height, layout])\n\nexport const useComputedData = <RawDatum>({\n    data,\n    stacked,\n    dimensionIds,\n    valueFormat,\n    thicknessScale,\n    dimensionsScale,\n    colors,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    stacked: Series<RawDatum, string>[]\n    dimensionIds: string[]\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n    colors: CommonProps<RawDatum>['colors']\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) => {\n    const getColor = useOrdinalColorScale<Omit<DimensionDatum<RawDatum>, 'color'>>(colors, 'id')\n\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    return useMemo(() => {\n        const computedData: ComputedDatum<RawDatum>[] = []\n\n        let position = outerPadding\n\n        data.forEach(datum => {\n            const thickness = thicknessScale(datum.value)\n\n            const computedDatum: ComputedDatum<RawDatum> = {\n                ...datum,\n                x: layout === 'vertical' ? position : 0,\n                y: layout === 'vertical' ? 0 : position,\n                width: layout === 'vertical' ? thickness : 0,\n                height: layout === 'vertical' ? 0 : thickness,\n                dimensions: [],\n            }\n\n            const allPositions: number[] = []\n            let totalSize = 0\n\n            position += thickness + innerPadding\n\n            dimensionIds.forEach(dimensionId => {\n                const dimension = stacked.find(stack => stack.key === dimensionId)\n                if (dimension) {\n                    const dimensionPoint = dimension[datum.index]\n                    const dimensionDatum: DimensionDatum<RawDatum> = {\n                        id: dimensionId,\n                        datum: computedDatum,\n                        value: dimensionPoint[1] - dimensionPoint[0],\n                        formattedValue: formatValue(dimensionPoint[1] - dimensionPoint[0]),\n                        color: 'rgba(0, 0, 0, 0)',\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    }\n\n                    const position0 = dimensionsScale(dimensionPoint[0])\n                    const position1 = dimensionsScale(dimensionPoint[1])\n\n                    if (layout === 'vertical') {\n                        dimensionDatum.x = computedDatum.x\n                        dimensionDatum.y = Math.min(position0, position1)\n                        dimensionDatum.width = computedDatum.width\n                        dimensionDatum.height = Math.max(position0, position1) - dimensionDatum.y\n\n                        allPositions.push(dimensionDatum.y)\n                        totalSize += dimensionDatum.height\n                    } else {\n                        dimensionDatum.x = Math.min(position0, position1)\n                        dimensionDatum.y = computedDatum.y\n                        dimensionDatum.width = Math.max(position0, position1) - dimensionDatum.x\n                        dimensionDatum.height = computedDatum.height\n\n                        allPositions.push(dimensionDatum.x)\n                        totalSize += dimensionDatum.width\n                    }\n\n                    dimensionDatum.color = getColor(dimensionDatum)\n\n                    computedDatum.dimensions.push(dimensionDatum)\n                }\n\n                if (layout === 'vertical') {\n                    computedDatum.y = Math.min(...allPositions)\n                    computedDatum.height = totalSize\n                } else {\n                    computedDatum.x = Math.min(...allPositions)\n                    computedDatum.width = totalSize\n                }\n            })\n\n            computedData.push(computedDatum)\n        })\n\n        return computedData\n    }, [\n        data,\n        stacked,\n        dimensionIds,\n        thicknessScale,\n        dimensionsScale,\n        layout,\n        outerPadding,\n        innerPadding,\n        getColor,\n        formatValue,\n    ])\n}\n\nexport const useBars = <RawDatum>(\n    data: ComputedDatum<RawDatum>[],\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>,\n    borderWidth: number\n) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<DimensionDatum<RawDatum>>(borderColor, theme)\n\n    return useMemo(() => {\n        const all: BarDatum<RawDatum>[] = []\n        data.forEach(datum => {\n            datum.dimensions.forEach(dimension => {\n                all.push({\n                    key: `${datum.id}-${dimension.id}`,\n                    ...dimension,\n                    borderColor: getBorderColor(dimension),\n                    borderWidth,\n                })\n            })\n        })\n\n        return all\n    }, [data, borderWidth, getBorderColor])\n}\n\nexport const useMarimekko = <RawDatum>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions: rawDimensions,\n    layout,\n    offset,\n    outerPadding,\n    innerPadding,\n    colors,\n    borderColor,\n    borderWidth,\n    width,\n    height,\n}: {\n    data: DataProps<RawDatum>['data']\n    id: DataProps<RawDatum>['id']\n    value: DataProps<RawDatum>['value']\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    dimensions: DataProps<RawDatum>['dimensions']\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n    colors: CommonProps<RawDatum>['colors']\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n    borderWidth: number\n    width: number\n    height: number\n}) => {\n    const { dimensionIds, dimensions } = useDataDimensions<RawDatum>(rawDimensions)\n    const stack = useStack<RawDatum>(dimensionIds, dimensions, offset)\n    const { stacked, min, max } = useStackedData<RawDatum>(stack, data)\n    const normalizedData = useNormalizedData<RawDatum>(data, id, value)\n    const thicknessScale = useThicknessScale({\n        data: normalizedData,\n        width,\n        height,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const dimensionsScale = useDimensionsScale(min, max, width, height, layout)\n    const computedData = useComputedData<RawDatum>({\n        data: normalizedData,\n        stacked,\n        dimensionIds,\n        valueFormat,\n        thicknessScale,\n        dimensionsScale,\n        colors,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const bars = useBars<RawDatum>(computedData, borderColor, borderWidth)\n\n    return {\n        computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n        dimensionIds,\n    }\n}\n\nexport const useLayerContext = <RawDatum>({\n    data,\n    bars,\n    thicknessScale,\n    dimensionsScale,\n}: {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n}): CustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            data,\n            bars,\n            thicknessScale,\n            dimensionsScale,\n        }),\n        [data, bars, thicknessScale, dimensionsScale]\n    )\n\nexport const useLegendData = <RawDatum>(dimensionIds: string[], bars: BarDatum<RawDatum>[]) => {\n    const legendData: {\n        id: string\n        label: string\n        color: string\n        fill?: string\n    }[] = []\n\n    dimensionIds.forEach(dimensionId => {\n        const bar = bars.find(bar => bar.id === dimensionId)\n        if (bar) {\n            legendData.push({\n                id: dimensionId,\n                label: dimensionId,\n                color: bar.color,\n                fill: bar.fill,\n            })\n        }\n    })\n\n    return legendData\n}\n","import { createElement, MouseEvent, useCallback } from 'react'\nimport { animated, SpringValues, to } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\n\ninterface BarProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    bar: BarDatum<RawDatum>\n    animatedProps: SpringValues<{\n        x: number\n        y: number\n        width: number\n        height: number\n        opacity: number\n        color: string\n        borderColor: string\n    }>\n    isInteractive: boolean\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bar = <RawDatum,>({\n    bar,\n    animatedProps,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        event => showTooltipFromEvent(createElement(tooltip, { bar }), event),\n        [showTooltipFromEvent, tooltip, bar]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.(bar, event)\n        },\n        [onClick, bar]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseMove?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(bar, event)\n            hideTooltip()\n        },\n        [onMouseLeave, bar, hideTooltip]\n    )\n\n    return (\n        <animated.rect\n            x={animatedProps.x}\n            y={animatedProps.y}\n            width={to(animatedProps.width, value => Math.max(value, 0))}\n            height={to(animatedProps.height, value => Math.max(value, 0))}\n            fill={bar.fill ?? animatedProps.color}\n            stroke={animatedProps.borderColor}\n            strokeWidth={bar.borderWidth}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\nimport { Bar } from './Bar'\n\ninterface BarsProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    isInteractive: boolean\n    bars: BarDatum<RawDatum>[]\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bars = <RawDatum,>({\n    bars,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarsProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<\n        BarDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            width: number\n            height: number\n            color: string\n            opacity: number\n            borderColor: string\n        }\n    >(bars, {\n        keys: bar => bar.key,\n        initial: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        from: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 0,\n            borderColor: bar.borderColor,\n        }),\n        enter: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        update: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        leave: bar => ({\n            opacity: 0,\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, bar) => (\n                <Bar<RawDatum>\n                    key={bar.key}\n                    bar={bar}\n                    animatedProps={style}\n                    isInteractive={isInteractive}\n                    tooltip={tooltip}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                />\n            ))}\n        </>\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BarDatum } from './types'\n\nexport const BarTooltip = <RawDatum,>({ bar }: { bar: BarDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={`${bar.datum.id} - ${bar.id}`}\n        value={bar.formattedValue}\n        enableChip={true}\n        color={bar.color}\n    />\n)\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { SvgProps, LayerId, DimensionDatum } from './types'\nimport { defaultProps } from './props'\nimport { useMarimekko, useLayerContext, useLegendData } from './hooks'\nimport { Bars } from './Bars'\nimport { BarTooltip } from './BarTooltip'\n\nconst InnerMarimekko = <RawDatum,>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions,\n    width,\n    height,\n    margin: partialMargin,\n    layout = defaultProps.layout,\n    offset = defaultProps.offset,\n    outerPadding = defaultProps.outerPadding,\n    innerPadding = defaultProps.innerPadding,\n    layers = defaultProps.layers,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<DimensionDatum<RawDatum>, 'color'>\n    >,\n    defs = [],\n    fill = [],\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<DimensionDatum<RawDatum>>,\n    isInteractive = defaultProps.isInteractive,\n    tooltip = BarTooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    legends = [],\n    role,\n}: SvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { computedData, bars, thicknessScale, dimensionsScale, dimensionIds } =\n        useMarimekko<RawDatum>({\n            data,\n            id,\n            value,\n            dimensions,\n            valueFormat,\n            layout,\n            offset,\n            outerPadding,\n            innerPadding,\n            colors,\n            borderColor,\n            borderWidth,\n            width: innerWidth,\n            height: innerHeight,\n        })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        bars: null,\n        legends: null,\n    }\n\n    const boundDefs = bindDefs(defs, bars, fill)\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Bars<RawDatum>\n                key=\"bars\"\n                bars={bars}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n            />\n        )\n    }\n\n    const xScale = layout === 'vertical' ? thicknessScale : dimensionsScale\n    const yScale = layout === 'vertical' ? dimensionsScale : thicknessScale\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                xScale={enableGridX ? (xScale as any) : undefined}\n                yScale={enableGridY ? (yScale as any) : undefined}\n                width={innerWidth}\n                height={innerHeight}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    const legendData = useLegendData<RawDatum>(dimensionIds, bars)\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <g key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    const layerContext = useLayerContext<RawDatum>({\n        data: computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as LayerId] !== undefined) {\n                    return layerById[layer as LayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Marimekko = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    ...otherProps\n}: SvgProps<RawDatum>) => (\n    <Container\n        theme={otherProps.theme}\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n    >\n        <InnerMarimekko<RawDatum>\n            isInteractive={isInteractive}\n            animate={animate}\n            motionConfig={motionConfig}\n            {...otherProps}\n        />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Marimekko } from './Marimekko'\nimport { SvgProps } from './types'\n\nexport const ResponsiveMarimekko = <RawDatum,>(\n    props: Omit<SvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Marimekko<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n"],"names":["x","settingsMapper","mapping","exclude","settings","options","overrides","Object","keys","forEach","key","omit","mapAxis","type","value","upperFirst","enable","mapFormat","format","enabled","undefined","TooltipWrapper","styled","TooltipKey","TooltipValue","CustomTooltip","bar","style","color","datum","id","thickness","valueFormat","axisTop","axisRight","axisBottom","axisLeft","tooltip","values","defs","patternLinesDef","background","rotation","lineWidth","spacing","fill","match","allFlavors","props","group","flavors","help","description","required","control","defaultValue","defaults","choices","label","offsetById","map","min","max","unit","chartDimensions","themeProperty","ordinalColors","defsProperties","chartGrid","xDefault","yDefault","axes","isInteractive","motionProperties","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","data","console","log","JSON","stringify","groups","groupProperties","getRandomValue","generateData","statement","participation","stronglyAgree","agree","disagree","stronglyDisagree","initialProperties","dimensions","layout","defaultProps","offset","outerPadding","innerPadding","orient","tickSize","tickPadding","tickRotation","legendOffset","legendPosition","enableGridX","enableGridY","margin","top","right","bottom","left","colors","scheme","borderWidth","borderColor","from","modifiers","animate","motionConfig","legends","itemTextColor","itemOpacity","symbolShape","effects","on","image","useStaticQuery","childImageSharp","gatsbyImageData","ComponentTemplate","name","meta","icon","currentFlavor","properties","defaultProperties","propertiesMapper","mapper","theme","logAction","layers","expand","diverging","none","silouhette","wiggle","stackOffsetWiggle","useMarimekko","rawDimensions","width","height","useMemo","dimensionIds","dimension","useDataDimensions","stack","offsetFunction","useStack","stacked","allValues","Math","useStackedData","normalizedData","getId","getValue","normalized","datumId","datumValue","useNormalizedData","thicknessScale","totalValue","acc","scaleLinear","totalPadding","useThicknessScale","dimensionsScale","useDimensionsScale","computedData","getColor","useOrdinalColorScale","formatValue","useValueFormatter","position","computedDatum","y","allPositions","totalSize","dimensionId","dimensionPoint","dimensionDatum","formattedValue","position0","position1","useComputedData","bars","useTheme","getBorderColor","useInheritedColor","all","useBars","Bar","animatedProps","onMouseEnter","onMouseMove","onMouseLeave","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","event","createElement","handleClick","handleMouseEnter","handleMouseMove","handleMouseLeave","to","stroke","strokeWidth","Bars","useMotionConfig","springConfig","transition","useTransition","initial","opacity","enter","update","leave","config","immediate","BarTooltip","enableChip","InnerMarimekko","partialMargin","gridXValues","gridYValues","role","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","layerById","grid","boundDefs","bindDefs","xScale","yScale","xValues","yValues","legendData","useLegendData","containerWidth","containerHeight","layerContext","useLayerContext","layer","Marimekko","otherProps","ResponsiveMarimekko","nativeFloor","floor","nativeRandom","random","module","exports","lower","upper","baseRandom","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","temp","rand","length"],"sourceRoot":""}