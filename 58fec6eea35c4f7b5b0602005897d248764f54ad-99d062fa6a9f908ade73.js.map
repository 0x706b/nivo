{"version":3,"file":"58fec6eea35c4f7b5b0602005897d248764f54ad-99d062fa6a9f908ade73.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-path/src/path.js","webpack://nivo-website/../node_modules/d3-shape/src/constant.js","webpack://nivo-website/../node_modules/d3-shape/src/line.js","webpack://nivo-website/../node_modules/d3-shape/src/point.js","webpack://nivo-website/./src/data/components/line/props.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/./src/data/components/line/defaults.js","webpack://nivo-website/./src/data/components/line/generator.js","webpack://nivo-website/./src/data/components/line/mapper.js"],"sourcesContent":["var pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path();\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function moveTo(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function lineTo(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function quadraticCurveTo(x1, y1, x, y) {\n    this._ += \"Q\" + +x1 + \",\" + +y1 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + +x1 + \",\" + +y1 + \",\" + +x2 + \",\" + +y2 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function arcTo(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.\n\n    if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x1,y1).\n\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    } // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.\n\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + +(y01 * x20 > x01 * y20) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function arc(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.\n\n    if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x0,y0).\n\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    } // Is this arc empty? We’re done.\n\n\n    if (!r) return; // Does the angle go the wrong way? Flip the direction.\n\n    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.\n\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    } // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + +(da >= pi) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function rect(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + +w + \"v\" + +h + \"h\" + -w + \"Z\";\n  },\n  toString: function toString() {\n    return this._;\n  }\n};\nexport default path;","export default function (x) {\n  return function constant() {\n    return x;\n  };\n}","import { path } from \"d3-path\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport { x as pointX, y as pointY } from \"./point.js\";\nexport default function () {\n  var x = pointX,\n      y = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function line(data) {\n    var i,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer;\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();else output.lineEnd();\n      }\n\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  line.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), line) : x;\n  };\n\n  line.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), line) : y;\n  };\n\n  line.defined = function (_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n  };\n\n  line.curve = function (_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function (_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}","export function x(p) {\n  return p[0];\n}\nexport function y(p) {\n  return p[1];\n}","import { lineCurvePropKeys } from '@nivo/core'\nimport { LineDefaultProps as defaults } from '@nivo/line'\nimport {\n    themeProperty,\n    axesProperties,\n    motionProperties,\n    getLegendsProps,\n    groupProperties,\n    defsProperties,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                id:   string | number\n                data: Array<{\n                    x: number | string | Date\n                    y: number | string | Date\n                }>\n            }>\n            \\`\\`\\`\n        `,\n        required: true,\n        type: 'object[]',\n    },\n    {\n        key: 'xScale',\n        type: 'object',\n        group: 'Base',\n        help: `X scale configuration.`,\n        controlType: 'object',\n        controlOptions: {\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type.`,\n                    type: 'string',\n                    controlType: 'choices',\n                    controlOptions: {\n                        disabled: true,\n                        choices: ['linear', 'point'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'xFormat',\n        group: 'Base',\n        help: 'Optional formatter for x values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'Function | string',\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'yScale',\n        type: 'object',\n        help: `Y scale configuration.`,\n        group: 'Base',\n        controlType: 'object',\n        controlOptions: {\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type.`,\n                    type: 'string',\n                    controlType: 'choices',\n                    controlOptions: {\n                        disabled: true,\n                        choices: ['linear', 'point'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n                {\n                    key: 'stacked',\n                    help: 'Enable/disable stacked mode.',\n                    type: 'boolean',\n                    required: false,\n                    controlType: 'switch',\n                },\n                {\n                    key: 'min',\n                    help: 'Minimum scale value.',\n                    required: false,\n                    type: `number | 'auto'`,\n                    controlType: 'switchableRange',\n                    controlOptions: {\n                        disabledValue: 'auto',\n                        defaultValue: 0,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n                {\n                    key: 'max',\n                    help: 'Maximum scale value.',\n                    required: false,\n                    type: `number | 'auto'`,\n                    controlType: 'switchableRange',\n                    controlOptions: {\n                        disabledValue: 'auto',\n                        defaultValue: 1200,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'yFormat',\n        group: 'Base',\n        help: 'Optional formatter for y values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'Function | string',\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width, not required when using responsive variant.',\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height, not required when using responsive variant.',\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    {\n        key: 'curve',\n        help: 'Curve interpolation.',\n        description: `\n            Defines the curve factory to use for the line generator.\n        `,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.curve,\n        controlType: 'choices',\n        group: 'Style',\n        controlOptions: {\n            choices: lineCurvePropKeys.map((key: string) => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    themeProperty(['svg', 'canvas', 'api']),\n    {\n        key: 'colors',\n        help: 'Defines color range.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: defaults.colors,\n        controlType: 'ordinalColors',\n        group: 'Style',\n    },\n    {\n        key: 'lineWidth',\n        help: 'Line width.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.lineWidth,\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'enableArea',\n        help: 'Enable/disable area below each line.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableArea,\n        controlType: 'switch',\n        group: 'Style',\n    },\n    {\n        key: 'areaBaselineValue',\n        help: 'Define the value to be used for area baseline.',\n        description: `\n            Define the value to be used for area baseline.\n            Please note that this value isn't the\n            position of the baseline but the value used\n            to compute it.\n        `,\n        type: 'number | string | Date',\n        required: false,\n        defaultValue: defaults.areaBaselineValue,\n        controlType: 'range',\n        group: 'Style',\n        controlOptions: {\n            min: 0,\n            max: 200,\n            step: 10,\n        },\n    },\n    {\n        key: 'areaOpacity',\n        help: 'Area opacity (0~1), depends on enableArea.',\n        required: false,\n        defaultValue: defaults.areaOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Style',\n    },\n    {\n        key: 'areaBlendMode',\n        flavors: ['svg'],\n        help: 'Defines CSS mix-blend-mode property.',\n        description: `\n            Defines CSS \\`mix-blend-mode\\` property for areas,\n            see\n            [MDN documentation](https://developer.mozilla.org/fr/docs/Web/CSS/mix-blend-mode).\n        `,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.areaBlendMode,\n        controlType: 'blendMode',\n        group: 'Style',\n    },\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this property to insert extra layers\n            to the chart, this extra layer must be\n            a function which will receive the chart\n            computed data and must return a valid SVG element.\n        `,\n        required: false,\n        defaultValue: defaults.layers,\n    },\n    {\n        key: 'enablePoints',\n        help: 'Enable/disable points.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enablePoints,\n        controlType: 'switch',\n        group: 'Points',\n    },\n    {\n        key: 'pointSymbol',\n        flavors: ['svg'],\n        help: 'Overrides default point circle. The function will receive `size`, `color`, `borderWidth` and `borderColor` props and must return a valid SVG element.',\n        type: 'Function',\n        required: false,\n        group: 'Points',\n    },\n    {\n        key: 'pointSize',\n        help: 'Size of the points.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.pointSize,\n        group: 'Points',\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 2,\n            max: 20,\n        },\n    },\n    {\n        key: 'pointColor',\n        help: 'Method to compute points color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.pointColor,\n        group: 'Points',\n        controlType: 'inheritedColor',\n    },\n    {\n        key: 'pointBorderWidth',\n        help: 'Width of the points border.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.pointBorderWidth,\n        group: 'Points',\n        controlType: 'lineWidth',\n    },\n    {\n        key: 'pointBorderColor',\n        help: 'Method to compute points border color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.pointBorderColor,\n        group: 'Points',\n        controlType: 'inheritedColor',\n    },\n    {\n        key: 'enablePointLabel',\n        flavors: ['svg', 'api'],\n        group: 'Points',\n        help: 'Enable/disable points label.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enablePointLabel,\n        controlType: 'switch',\n    },\n    {\n        key: 'pointLabel',\n        flavors: ['svg', 'api'],\n        group: 'Points',\n        help: 'Property to use to determine point label. If a function is provided, it will receive current point data and should return the desired label.',\n        type: 'string',\n        required: false,\n        controlType: 'choices',\n        controlOptions: {\n            choices: ['y', 'yFormatted', 'x', 'xFormatted', `d => \\`\\${d.x}: \\${d.y}\\``].map(\n                choice => ({\n                    label: choice,\n                    value: choice,\n                })\n            ),\n        },\n    },\n    {\n        key: 'pointLabelYOffset',\n        flavors: ['svg', 'api'],\n        group: 'Points',\n        help: 'Label Y offset from point shape.',\n        type: 'number',\n        required: false,\n        defaultValue: -12,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: -24,\n            max: 24,\n        },\n    },\n    {\n        key: 'enableGridX',\n        help: 'Enable/disable x grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableGridX,\n        controlType: 'switch',\n        group: 'Grid & Axes',\n    },\n    {\n        key: 'gridXValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for vertical grid lines.',\n        type: 'Array<number | string | Date>',\n        required: false,\n    },\n    {\n        key: 'enableGridY',\n        help: 'Enable/disable y grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableGridY,\n        controlType: 'switch',\n        group: 'Grid & Axes',\n    },\n    {\n        key: 'gridYValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for horizontal grid lines.',\n        type: 'Array<number | string | Date>',\n        required: false,\n    },\n    ...axesProperties(),\n    {\n        key: 'isInteractive',\n        flavors: ['svg', 'canvas'],\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.isInteractive,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'useMesh',\n        flavors: ['svg'],\n        help: 'Use a voronoi mesh to detect mouse interactions, enableSlices must be disabled',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.useMesh,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'debugMesh',\n        flavors: ['svg', 'canvas'],\n        help: 'Display mesh used to detect mouse interactions (voronoi cells).',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.debugMesh,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: `onMouseEnter handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: `onMouseMove handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `onMouseLeave handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `onClick handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `Custom point tooltip`,\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'enableSlices',\n        group: 'Interactivity',\n        flavors: ['svg'],\n        help: `Enable/disable slices tooltip for x or y axis, automatically disable mesh.`,\n        type: `'x' | 'y' | false`,\n        required: false,\n        defaultValue: defaults.enableSlicesTooltip,\n        controlType: 'choices',\n        controlOptions: {\n            choices: [\n                {\n                    label: 'false',\n                    value: false,\n                },\n                {\n                    label: 'x',\n                    value: 'x',\n                },\n                {\n                    label: 'y',\n                    value: 'y',\n                },\n            ],\n        },\n    },\n    {\n        key: 'debugSlices',\n        flavors: ['svg'],\n        help: 'Display area used to detect mouse interactions for slices.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.debugSlices,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'sliceTooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `Custom slice tooltip`,\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'enableCrosshair',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'Enable/disable crosshair.',\n        type: 'boolean',\n        required: false,\n        controlType: 'switch',\n        defaultValue: defaults.enableCrosshair,\n    },\n    {\n        key: 'crosshairType',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        required: false,\n        defaultValue: defaults.crosshairType,\n        help: `Crosshair type, forced to slices axis if enabled.`,\n        type: 'string',\n        controlType: 'choices',\n        controlOptions: {\n            disabled: true,\n            choices: [\n                'x',\n                'y',\n                'top-left',\n                'top',\n                'top-right',\n                'right',\n                'bottom-right',\n                'bottom',\n                'bottom-left',\n                'left',\n                'cross',\n            ].map(v => ({\n                label: v,\n                value: v,\n            })),\n        },\n    },\n    {\n        key: 'legends',\n        flavors: ['svg', 'canvas'],\n        type: 'object[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 4,\n                symbolSize: 20,\n                symbolShape: 'circle',\n                itemDirection: 'left-to-right',\n                itemTextColor: '#777',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1,\n                        },\n                    },\n                ],\n            },\n        },\n    },\n    ...motionProperties(['svg'], defaults, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProp, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProp<X> | null\n        right?: CanvasAxisProp<Y> | null\n        bottom?: CanvasAxisProp<X> | null\n        left?: CanvasAxisProp<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProp<X> | undefined\n            : CanvasAxisProp<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n","import { LineDefaultProps } from '@nivo/line'\n\nexport default {\n    width: 600,\n    height: 400,\n\n    margin: {\n        top: 50,\n        right: 110,\n        bottom: 50,\n        left: 60,\n    },\n\n    xScale: {\n        type: 'point',\n    },\n    xFormat: { format: '', enabled: false },\n    yScale: {\n        type: 'linear',\n        min: 'auto',\n        max: 'auto',\n        stacked: true,\n        reverse: false,\n    },\n    yFormat: { format: ' >-.2f', enabled: true },\n\n    curve: LineDefaultProps.curve,\n\n    axisTop: {\n        enable: false,\n        orient: 'top',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 36,\n    },\n    axisRight: {\n        enable: false,\n        orient: 'right',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 0,\n    },\n    axisBottom: {\n        enable: true,\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'transportation',\n        legendOffset: 36,\n        legendPosition: 'middle',\n    },\n    axisLeft: {\n        enable: true,\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'count',\n        legendOffset: -40,\n        legendPosition: 'middle',\n    },\n\n    enableGridX: LineDefaultProps.enableGridX,\n    enableGridY: LineDefaultProps.enableGridY,\n\n    colors: LineDefaultProps.colors,\n    lineWidth: 2,\n\n    enablePoints: true,\n    pointSize: 10,\n    pointColor: { theme: 'background' },\n    pointBorderWidth: 2,\n    pointBorderColor: { from: 'serieColor' },\n    enablePointLabel: LineDefaultProps.enablePointLabel,\n    pointLabel: LineDefaultProps.pointLabel,\n    pointLabelYOffset: -12,\n\n    enableArea: LineDefaultProps.enableArea,\n    areaBlendMode: LineDefaultProps.areaBlendMode,\n    areaBaselineValue: LineDefaultProps.areaBaselineValue,\n    areaOpacity: LineDefaultProps.areaOpacity,\n\n    isInteractive: LineDefaultProps.isInteractive,\n    enableSlices: false,\n    debugSlices: false,\n\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n","import range from 'lodash/range'\nimport { generateSeries } from '@nivo/generators'\n\nexport const generateLightDataSet = () => {\n    return generateSeries(\n        ['japan', 'france', 'us', 'germany', 'norway'],\n        [\n            'plane',\n            'helicopter',\n            'boat',\n            'train',\n            'subway',\n            'bus',\n            'car',\n            'moto',\n            'bicycle',\n            'horse',\n            'skateboard',\n            'others',\n        ]\n    )\n}\n\nexport const generateHeavyDataSet = () => {\n    return generateSeries(\n        [\n            'japan',\n            'brazil',\n            'france',\n            'us',\n            'germany',\n            'norway',\n            'china',\n            'algeria',\n            'mexico',\n            'finland',\n            'australia',\n        ],\n        range(121)\n    )\n}\n","import { settingsMapper, mapAxis, mapFormat } from '../../../lib/settings'\n\nexport default settingsMapper(\n    {\n        pointLabel: value => {\n            if (value === `d => \\`\\${d.x}: \\${d.y}\\``) return d => `${d.x}: ${d.y}`\n            return value\n        },\n        xFormat: mapFormat,\n        yFormat: mapFormat,\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n    },\n    {\n        exclude: ['enable axisTop', 'enable axisRight', 'enable axisBottom', 'enable axisLeft'],\n    }\n)\n"],"names":["pi","Math","PI","tau","epsilon","tauEpsilon","Path","this","_x0","_y0","_x1","_y1","_","path","prototype","constructor","moveTo","x","y","closePath","lineTo","quadraticCurveTo","x1","y1","bezierCurveTo","x2","y2","arcTo","r","x0","y0","x21","y21","x01","y01","l01_2","Error","abs","x20","y20","l21_2","l20_2","l21","sqrt","l01","l","tan","acos","t01","t21","arc","a0","a1","ccw","dx","cos","dy","sin","cw","da","rect","w","h","toString","defined","context","curve","output","line","data","i","d","buffer","n","length","defined0","lineStart","lineEnd","point","arguments","p","props","key","group","help","description","required","type","controlType","controlOptions","disabled","choices","map","v","label","value","disabledValue","defaultValue","min","max","enableControlForFlavors","unit","step","defaults","lineCurvePropKeys","themeProperty","flavors","defsProperties","choice","axesProperties","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","symbolShape","itemDirection","itemTextColor","onClick","alert","JSON","stringify","effects","on","style","itemBackground","itemOpacity","motionProperties","groups","groupProperties","computeCartesianTicks","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","position","centerScale","lineX","lineY","text","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","top","bottom","left","right","ticks","getFormatter","format","formatter","timeFormat","Date","d3Format","computeGridLines","width","height","_values","Array","isArray","lines","memoizedAxisTick","memo","_value","textAnchor","animatedProps","theme","useTheme","useMemo","opacity","cursor","event","React","animated","g","transform","dominantBaseline","textTransform","memoizedAxis","renderTick","AxisTick","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","config","useSpring","lineX2","lineY2","immediate","transition","useTransition","keys","t","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","rotate","domain","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","axes","isXAxis","Axis","GridLine","grid","GridLines","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","_format","save","font","fontWeight","fontSize","fontFamily","strokeWidth","lineWidth","Number","lineCap","stroke","strokeStyle","beginPath","forEach","degreesToRadians","fill","fillStyle","fillText","String","restore","renderAxesToCanvas","renderGridLinesToCanvas","margin","xFormat","enabled","stacked","reverse","yFormat","LineDefaultProps","axisTop","enable","orient","axisRight","axisBottom","axisLeft","enableGridX","enableGridY","colors","enablePoints","pointSize","pointColor","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","pointLabelYOffset","enableArea","areaBlendMode","areaBaselineValue","areaOpacity","isInteractive","enableSlices","debugSlices","enableCrosshair","crosshairType","generateLightDataSet","generateSeries","generateHeavyDataSet","range","settingsMapper","mapFormat","mapAxis","exclude"],"sourceRoot":""}