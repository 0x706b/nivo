{"version":3,"file":"be5e23c0be5a470b6ecd7884ba244422590d0b45-7739a416fb946f67c3d3.js","mappings":"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","sources":["webpack://nivo-website/./src/data/components/scatterplot/props.ts","webpack://nivo-website/./src/lib/settings.ts","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/utils.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/AnnotationNote.tsx","webpack://nivo-website/../src/AnnotationLink.tsx","webpack://nivo-website/../src/CircleAnnotationOutline.tsx","webpack://nivo-website/../src/DotAnnotationOutline.tsx","webpack://nivo-website/../src/RectAnnotationOutline.tsx","webpack://nivo-website/../src/Annotation.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/Node.tsx","webpack://nivo-website/../src/props.tsx","webpack://nivo-website/../src/Tooltip.tsx","webpack://nivo-website/../src/ScatterPlotAnnotations.tsx","webpack://nivo-website/../src/Nodes.tsx","webpack://nivo-website/../src/Mesh.tsx","webpack://nivo-website/../src/ScatterPlot.tsx","webpack://nivo-website/../src/ResponsiveScatterPlot.tsx","webpack://nivo-website/../src/ScatterPlotCanvas.tsx","webpack://nivo-website/../src/ResponsiveScatterPlotCanvas.tsx","webpack://nivo-website/./src/data/components/scatterplot/generator.js","webpack://nivo-website/./src/data/components/scatterplot/mapper.js","webpack://nivo-website/../node_modules/lodash/_baseFilter.js","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/filter.js","webpack://nivo-website/../node_modules/lodash/random.js"],"sourcesContent":["import { commonDefaultProps, svgDefaultProps } from '@nivo/scatterplot'\nimport {\n    themeProperty,\n    axesProperties,\n    motionProperties,\n    getLegendsProps,\n    groupProperties,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                id:   string | number\n                data: Array<{\n                    x: number | string | Date\n                    y: number | string | Date\n                }>\n            }>\n            \\`\\`\\`\n\n            Please note that you should adjust \\`xScale\\`\n            and \\`yScale\\` according to \\`x\\` and \\`y\\` type,\n            for example if you use dates, you should use\n            a \\`time\\` scale.\n        `,\n        required: true,\n    },\n    {\n        key: 'xScale',\n        type: 'object',\n        help: `X scale configuration.`,\n        group: 'Base',\n        controlType: 'object',\n        controlOptions: {\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type, supports linear, point and time scales.`,\n                    type: 'string',\n                    controlType: 'choices',\n                    controlOptions: {\n                        disabled: true,\n                        choices: ['linear'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n                {\n                    key: 'min',\n                    help: 'Minimum scale value.',\n                    required: false,\n                    type: `number | 'auto'`,\n                    controlType: 'switchableRange',\n                    controlOptions: {\n                        disabledValue: 'auto',\n                        defaultValue: 0,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n                {\n                    key: 'max',\n                    help: 'Maximum scale value.',\n                    required: false,\n                    type: `number | 'auto'`,\n                    controlType: 'switchableRange',\n                    controlOptions: {\n                        disabledValue: 'auto',\n                        defaultValue: 1200,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'xFormat',\n        group: 'Base',\n        type: 'string | Function',\n        help: 'Optional formatter for x values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'yScale',\n        group: 'Base',\n        type: 'object',\n        help: `Y scale configuration.`,\n        controlType: 'object',\n        controlOptions: {\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type, supports linear, point and time scales.`,\n                    type: 'string',\n                    controlType: 'choices',\n                    controlOptions: {\n                        disabled: true,\n                        choices: ['linear'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n                {\n                    key: 'min',\n                    help: 'Minimum scale value.',\n                    required: false,\n                    type: `number | 'auto'`,\n                    controlType: 'switchableRange',\n                    controlOptions: {\n                        disabledValue: 'auto',\n                        defaultValue: 0,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n                {\n                    key: 'max',\n                    help: 'Maximum scale value.',\n                    required: false,\n                    type: `number | 'auto'`,\n                    controlType: 'switchableRange',\n                    controlOptions: {\n                        disabledValue: 'auto',\n                        defaultValue: 1200,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'yFormat',\n        group: 'Base',\n        type: 'string | Function',\n        help: 'Optional formatter for y values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'nodeId',\n        group: 'Base',\n        defaultValue: '(d) => `${d.serieId}.${d.index}`',\n        type: 'string | (datum) => string',\n        help: `ID accessor for the node.`,\n        description: `\n            Define how to determine the id of each node on the plot. This value\n            will impact animation. Nodes will transition from a previous state\n            at the same index, thus, it can be  useful to specify this property\n            if we want to establish some continuity between nodes at different\n            index.\n\n            By default nivo will join together the serie.id and datum index.\n        `,\n    },\n    {\n        key: 'nodeSize',\n        group: 'Base',\n        defaultValue: commonDefaultProps.nodeSize,\n        type: 'number | object | Function',\n        help: `How to compute node size, static or dynamic.`,\n        description: `\n            If you provide a **number**, all nodes will have the same\n            **fixed size**.\n\n            You can also use an object to define a varying size,\n            it must conform to the following interface:\n\n            \\`\\`\\`\n            {\n                key:    string\n                values: [min: number, max: number]\n                sizes:  [min: number, max: number]\n            }\n            \\`\\`\\`\n\n            Then the size of each node will **depend on the value\n            of \\`key\\` and \\`sizes\\`**.\n\n            If you use a **custom function**, it will receive the current\n            node and must **return a number**.\n        `,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 2,\n            max: 24,\n        },\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        description: `\n            Not required if using\n            \\`Responsive*\\` component.\n            Also note that width exclude left/right axes,\n            please add margin to make sure they're visible.\n        `,\n        help: 'Chart width.',\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        description: `\n            Not required if using\n            \\`Responsive*\\` component.\n            Also note that width exclude top/bottom axes,\n            please add margin to make sure they're visible.\n        `,\n        help: 'Chart height.',\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        required: false,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    themeProperty(['svg', 'canvas']),\n    {\n        key: 'colors',\n        group: 'Style',\n        help: 'Defines color range.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: commonDefaultProps.colors,\n        controlType: 'ordinalColors',\n    },\n    {\n        key: 'blendMode',\n        group: 'Style',\n        flavors: ['svg'],\n        help: 'Defines CSS mix-blend-mode property.',\n        description: `\n            Defines CSS \\`mix-blend-mode\\` property for nodes,\n            see\n            [MDN documentation](https://developer.mozilla.org/fr/docs/Web/CSS/mix-blend-mode).\n        `,\n        type: 'string',\n        required: false,\n        defaultValue: commonDefaultProps.blendMode,\n        controlType: 'blendMode',\n    },\n    {\n        key: 'layers',\n        flavors: ['svg', 'canvas'],\n        group: 'Customization',\n        help: 'Defines the order of layers.',\n        description: `\n            Defines the order of layers, available layers are:\n            \\`grid\\`, \\`axes\\`, \\`points\\`, \\`markers\\`,\n            \\`mesh\\`, \\`legends\\`.\n\n            You can also use this to insert extra layers\n            to the chart.\n\n            For \\`ScatterPlot\\`, the extra layer should be a component\n            and will receive current chart context as props.\n\n            If using \\`ScatterPlotCanvas\\`, the extra layer should be\n            a function and will receive canvas context as first argument\n            and current chart context object as second.\n        `,\n        required: false,\n        defaultValue: svgDefaultProps.layers,\n    },\n    {\n        key: 'nodeComponent',\n        flavors: ['svg'],\n        group: 'Customization',\n        help: 'Override default node rendering for SVG implementation.',\n        type: 'FunctionComponent<ScatterPlotNodeProps<RawDatum>>',\n        description: `\n            When you override the default node component, you should use\n            an \\`animated\\` element if you wish to preserve transitions,\n            for example:\n            \n            \\`\\`\\`\n            import { animated } from '@react-spring/web'\n            \n            export const MyCustomNode = (props) => (\n                <animated.circle\n                    cx={props.style.x}\n                    cy={props.style.y}\n                    r={props.style.size.to(size => size / 2)}\n                    fill={style.color}\n                    style={{ mixBlendMode: props.blendMode }}\n                />\n            )\n            \\`\\`\\`\n            \n            The \\`style\\` property contains \\`react-spring\\` values, suitable\n            for \\`animated.*\\` elements.\n            \n            You can have a look at the [default node implementation](https://github.com/plouc/nivo/blob/master/packages/scatterplot/src/Node.tsx)\n            to see how props are used by default.\n        `,\n        required: false,\n    },\n    {\n        key: 'renderNode',\n        flavors: ['canvas'],\n        group: 'Customization',\n        help: 'Override default node rendering for canvas implementation.',\n        type: '(ctx: CanvasRenderingContext2D, props: ScatterPlotLayerProps<RawDatum>) => void',\n        description: `\n            This is how the default rendering is done:\n            \n            \\`\\`\\`\n            const renderNode = (ctx, node) => {\n                ctx.beginPath()\n                ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n                ctx.fillStyle = node.color\n                ctx.fill()\n            }\n            \\`\\`\\`\n        `,\n        required: false,\n    },\n    {\n        key: 'enableGridX',\n        help: 'Enable/disable x grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: commonDefaultProps.enableGridX,\n        controlType: 'switch',\n        group: 'Grid & Axes',\n    },\n    {\n        key: 'gridXValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for vertical grid lines.',\n        type: 'Array<number | string | Date>',\n        required: false,\n    },\n    {\n        key: 'enableGridY',\n        group: 'Grid & Axes',\n        help: 'Enable/disable y grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: commonDefaultProps.enableGridY,\n        controlType: 'switch',\n    },\n    {\n        key: 'gridYValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for horizontal grid lines.',\n        type: 'Array<number | string | Date>',\n        required: false,\n    },\n    ...axesProperties(),\n    {\n        key: 'isInteractive',\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: commonDefaultProps.isInteractive,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'useMesh',\n        group: 'Interactivity',\n        flavors: ['svg'],\n        help: 'Use a mesh to detect mouse interactions.',\n        type: 'boolean',\n        required: false,\n        defaultValue: commonDefaultProps.useMesh,\n        controlType: 'switch',\n    },\n    {\n        key: 'debugMesh',\n        help: 'Display mesh used to detect mouse interactions (voronoi cells).',\n        type: 'boolean',\n        required: false,\n        defaultValue: commonDefaultProps.debugMesh,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'tooltip',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom tooltip component',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will\n            receive the node as a property.\n\n            You can also customize the tooltip style\n            using the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'onMouseEnter',\n        group: 'Interactivity',\n        help: 'onMouseEnter handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        group: 'Interactivity',\n        help: 'onMouseMove handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        group: 'Interactivity',\n        help: 'onMouseLeave handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        group: 'Interactivity',\n        help: 'onClick handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'legends',\n        group: 'Legends',\n        flavors: ['svg', 'canvas'],\n        type: 'object[]',\n        help: `Optional chart's legends.`,\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n    {\n        key: 'annotations',\n        group: 'Annotations',\n        help: 'Extra annotations.',\n        type: 'object[]',\n        required: false,\n    },\n    {\n        key: 'markers',\n        group: 'Annotations',\n        help: 'Extra markers.',\n        type: 'object[]',\n        flavors: ['svg'],\n        required: false,\n    },\n    ...motionProperties(['svg'], svgDefaultProps, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","import omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\n\nexport const settingsMapper =\n    (mapping: any, { exclude = [] } = {}) =>\n    (settings: any, options: any = {}) => {\n        const overrides: any = {}\n\n        Object.keys(settings).forEach(key => {\n            if (mapping[key]) {\n                overrides[key] = mapping[key](settings[key], settings, options)\n            }\n        })\n\n        return {\n            ...omit(settings, exclude),\n            ...overrides,\n        }\n    }\n\nexport const mapAxis = (type: string) => (value: any, settings: any) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }: { format: any; enabled: boolean }) =>\n    enabled ? format : undefined\n","export const defaultProps = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 13,\n}\n","import {\n    AnnotationSpec,\n    CircleAnnotationSpec,\n    DotAnnotationSpec,\n    Note,\n    NoteCanvas,\n    NoteSvg,\n    RectAnnotationSpec,\n} from './types'\nimport { isValidElement } from 'react'\n\nexport const isSvgNote = <Datum>(note: Note<Datum>): note is NoteSvg<Datum> => {\n    const noteType = typeof note\n\n    return (\n        isValidElement(note) ||\n        noteType === 'string' ||\n        noteType === 'function' ||\n        noteType === 'object'\n    )\n}\n\nexport const isCanvasNote = <Datum>(note: Note<Datum>): note is NoteCanvas<Datum> => {\n    const noteType = typeof note\n\n    return noteType === 'string' || noteType === 'function'\n}\n\nexport const isCircleAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is CircleAnnotationSpec<Datum> => annotationSpec.type === 'circle'\n\nexport const isDotAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is DotAnnotationSpec<Datum> => annotationSpec.type === 'dot'\n\nexport const isRectAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is RectAnnotationSpec<Datum> => annotationSpec.type === 'rect'\n","import { filter, isNumber, omit } from 'lodash'\nimport {\n    radiansToDegrees,\n    absoluteAngleDegrees,\n    degreesToRadians,\n    positionFromAngle,\n} from '@nivo/core'\nimport { defaultProps } from './props'\nimport {\n    AnnotationSpec,\n    AnnotationPositionGetter,\n    AnnotationDimensionsGetter,\n    BoundAnnotation,\n    AnnotationMatcher,\n    AnnotationInstructions,\n} from './types'\nimport { isCircleAnnotation, isRectAnnotation } from './utils'\n\nexport const bindAnnotations = <\n    Datum = {\n        x: number\n        y: number\n    }\n>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}): BoundAnnotation<Datum>[] =>\n    annotations.reduce((acc: BoundAnnotation<Datum>[], annotation) => {\n        const offset = annotation.offset || 0\n\n        return [\n            ...acc,\n            ...filter<Datum>(data, annotation.match).map(datum => {\n                const position = getPosition(datum)\n                const dimensions = getDimensions(datum)\n\n                if (isCircleAnnotation(annotation) || isRectAnnotation(annotation)) {\n                    dimensions.size = dimensions.size + offset * 2\n                    dimensions.width = dimensions.width + offset * 2\n                    dimensions.height = dimensions.height + offset * 2\n                }\n\n                // acc.push({\n                //     ...omit(annotation, ['match', 'offset']),\n                //     ...position,\n                //     ...dimensions,\n                //     size: annotation.size || dimensions.size,\n                //     datum,\n                // } as any)\n                // return [\n                //     ...acc,\n                //     {\n                //         ...omit(annotation, ['match', 'offset']),\n                //         ...position,\n                //         ...dimensions,\n                //         size: annotation.size || dimensions.size,\n                //         datum,\n                //     },\n                // ]\n                return {\n                    ...omit(annotation, ['match', 'offset']),\n                    ...position,\n                    ...dimensions,\n                    size: annotation.size || dimensions.size,\n                    datum,\n                } as Required<BoundAnnotation<Datum>>\n            }),\n        ]\n\n        // return acc\n    }, [])\n\nexport const getLinkAngle = (\n    sourceX: number,\n    sourceY: number,\n    targetX: number,\n    targetY: number\n) => {\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX)\n\n    return absoluteAngleDegrees(radiansToDegrees(angle))\n}\n\nexport const computeAnnotation = <Datum>(\n    annotation: Required<AnnotationSpec<Datum>>\n): AnnotationInstructions => {\n    const {\n        x,\n        y,\n        noteX,\n        noteY,\n        noteWidth = defaultProps.noteWidth,\n        noteTextOffset = defaultProps.noteTextOffset,\n    } = annotation\n\n    let computedNoteX: number\n    let computedNoteY: number\n\n    if (isNumber(noteX)) {\n        computedNoteX = x + noteX\n    } else if (noteX.abs !== undefined) {\n        computedNoteX = noteX.abs\n    } else {\n        throw new Error(`noteX should be either a number or an object containing an 'abs' property`)\n    }\n\n    if (isNumber(noteY)) {\n        computedNoteY = y + noteY\n    } else if (noteY.abs !== undefined) {\n        computedNoteY = noteY.abs\n    } else {\n        throw new Error(`noteY should be either a number or an object containing an 'abs' property`)\n    }\n\n    let computedX = x\n    let computedY = y\n\n    const angle = getLinkAngle(x, y, computedNoteX, computedNoteY)\n\n    if (isCircleAnnotation<Datum>(annotation)) {\n        const position = positionFromAngle(degreesToRadians(angle), annotation.size / 2)\n        computedX += position.x\n        computedY += position.y\n    }\n\n    if (isRectAnnotation<Datum>(annotation)) {\n        const eighth = Math.round((angle + 90) / 45) % 8\n        if (eighth === 0) {\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 1) {\n            computedX += annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 2) {\n            computedX += annotation.width / 2\n        }\n        if (eighth === 3) {\n            computedX += annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 4) {\n            computedY += annotation.height / 2\n        }\n        if (eighth === 5) {\n            computedX -= annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 6) {\n            computedX -= annotation.width / 2\n        }\n        if (eighth === 7) {\n            computedX -= annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n    }\n\n    let textX = computedNoteX\n    const textY = computedNoteY - noteTextOffset\n\n    let noteLineX = computedNoteX\n    const noteLineY = computedNoteY\n\n    if ((angle + 90) % 360 > 180) {\n        textX -= noteWidth\n        noteLineX -= noteWidth\n    } else {\n        noteLineX += noteWidth\n    }\n\n    return {\n        points: [\n            [computedX, computedY],\n            [computedNoteX, computedNoteY],\n            [noteLineX, noteLineY],\n        ] as [number, number][],\n        text: [textX, textY],\n        angle: angle + 90,\n    }\n}\n","import { useMemo } from 'react'\nimport { bindAnnotations, computeAnnotation } from './compute'\nimport {\n    AnnotationDimensionsGetter,\n    AnnotationMatcher,\n    AnnotationPositionGetter,\n    AnnotationSpec,\n} from './types'\n\n/**\n * Bind annotations to a dataset.\n */\nexport const useAnnotations = <Datum>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}) =>\n    useMemo(\n        () =>\n            bindAnnotations<Datum>({\n                data,\n                annotations,\n                getPosition,\n                getDimensions,\n            }),\n        [data, annotations, getPosition, getDimensions]\n    )\n\nexport const useComputedAnnotations = <Datum>({\n    annotations,\n}: {\n    annotations: Required<AnnotationSpec<Datum>>[]\n}) =>\n    useMemo(\n        () =>\n            annotations.map(annotation => ({\n                ...annotation,\n                computed: computeAnnotation<Datum>({\n                    ...annotation,\n                }),\n            })),\n        [annotations]\n    )\n\nexport const useComputedAnnotation = <Datum>(annotation: Required<AnnotationSpec<Datum>>) =>\n    useMemo(() => computeAnnotation<Datum>(annotation), [annotation])\n","import { createElement } from 'react'\nimport omit from 'lodash/omit'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { NoteSvg } from './types'\n\nexport const AnnotationNote = <Datum,>({\n    datum,\n    x,\n    y,\n    note,\n}: {\n    datum: Datum\n    x: number\n    y: number\n    note: NoteSvg<Datum>\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    if (typeof note === 'function') {\n        return createElement(note, { x, y, datum })\n    }\n\n    return (\n        <>\n            {theme.annotations.text.outlineWidth > 0 && (\n                <animated.text\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    style={{\n                        ...theme.annotations.text,\n                        strokeLinejoin: 'round',\n                        strokeWidth: theme.annotations.text.outlineWidth * 2,\n                        stroke: theme.annotations.text.outlineColor,\n                    }}\n                >\n                    {note}\n                </animated.text>\n            )}\n            <animated.text\n                x={animatedProps.x}\n                y={animatedProps.y}\n                style={omit(theme.annotations.text, ['outlineWidth', 'outlineColor'])}\n            >\n                {note}\n            </animated.text>\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath, useTheme } from '@nivo/core'\n\nexport const AnnotationLink = ({\n    points,\n    isOutline = false,\n}: {\n    points: [number, number][]\n    isOutline?: boolean\n}) => {\n    const theme = useTheme()\n\n    const path = useMemo(() => {\n        const [firstPoint, ...otherPoints] = points\n\n        return otherPoints.reduce(\n            (acc, [x, y]) => `${acc} L${x},${y}`,\n            `M${firstPoint[0]},${firstPoint[1]}`\n        )\n    }, [points])\n\n    const animatedPath = useAnimatedPath(path)\n\n    if (isOutline && theme.annotations.link.outlineWidth <= 0) {\n        return null\n    }\n\n    const style = { ...theme.annotations.link }\n    if (isOutline) {\n        style.strokeLinecap = 'square'\n        style.strokeWidth =\n            theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n        style.stroke = theme.annotations.link.outlineColor\n    }\n\n    return <animated.path fill=\"none\" d={animatedPath} style={style} />\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const CircleAnnotationOutline = ({ x, y, size }: { x: number; y: number; size: number }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { defaultProps } from './props'\n\nexport const DotAnnotationOutline = ({\n    x,\n    y,\n    size = defaultProps.dotSize,\n}: {\n    x: number\n    y: number\n    size?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth: theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.symbol}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const RectAnnotationOutline = ({\n    x,\n    y,\n    width,\n    height,\n}: {\n    x: number\n    y: number\n    width: number\n    height: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x: x - width / 2,\n        y: y - height / 2,\n        width,\n        height,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.rect\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    width={animatedProps.width}\n                    height={animatedProps.height}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.rect\n                x={animatedProps.x}\n                y={animatedProps.y}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useComputedAnnotation } from './hooks'\nimport { AnnotationNote } from './AnnotationNote'\nimport { AnnotationLink } from './AnnotationLink'\nimport { CircleAnnotationOutline } from './CircleAnnotationOutline'\nimport { DotAnnotationOutline } from './DotAnnotationOutline'\nimport { RectAnnotationOutline } from './RectAnnotationOutline'\nimport { BoundAnnotation } from './types'\nimport { isCircleAnnotation, isDotAnnotation, isRectAnnotation, isSvgNote } from './utils'\n\nexport const Annotation = <Datum,>(annotation: BoundAnnotation<Datum>) => {\n    const { datum, x, y, note } = annotation\n    const computed = useComputedAnnotation(annotation)\n\n    if (!isSvgNote(note)) {\n        throw new Error('note should be a valid react element')\n    }\n\n    return (\n        <>\n            <AnnotationLink points={computed.points} isOutline={true} />\n            {isCircleAnnotation(annotation) && (\n                <CircleAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isDotAnnotation(annotation) && (\n                <DotAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isRectAnnotation(annotation) && (\n                <RectAnnotationOutline\n                    x={x}\n                    y={y}\n                    width={annotation.width}\n                    height={annotation.height}\n                />\n            )}\n            <AnnotationLink points={computed.points} />\n            <AnnotationNote datum={datum} x={computed.text[0]} y={computed.text[1]} note={note} />\n        </>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { ComputedAnnotation } from './types'\nimport { isCanvasNote, isCircleAnnotation, isDotAnnotation, isRectAnnotation } from './utils'\n\nconst drawPoints = (ctx: CanvasRenderingContext2D, points: [number, number][]) => {\n    points.forEach(([x, y], index) => {\n        if (index === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    })\n}\n\nexport const renderAnnotationsToCanvas = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        annotations,\n        theme,\n    }: {\n        annotations: ComputedAnnotation<Datum>[]\n        theme: CompleteTheme\n    }\n) => {\n    if (annotations.length === 0) return\n\n    ctx.save()\n    annotations.forEach(annotation => {\n        if (!isCanvasNote(annotation.note)) {\n            throw new Error('note is invalid for canvas implementation')\n        }\n\n        if (theme.annotations.link.outlineWidth > 0) {\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.annotations.link.outlineColor\n            ctx.lineWidth =\n                theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n            ctx.beginPath()\n            drawPoints(ctx, annotation.computed.points)\n            ctx.stroke()\n            ctx.lineCap = 'butt'\n        }\n\n        if (isCircleAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation) && theme.annotations.symbol.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.symbol.outlineColor\n            ctx.lineWidth = theme.annotations.symbol.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isRectAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        ctx.strokeStyle = theme.annotations.link.stroke\n        ctx.lineWidth = theme.annotations.link.strokeWidth\n        ctx.beginPath()\n        drawPoints(ctx, annotation.computed.points)\n        ctx.stroke()\n\n        if (isCircleAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation)) {\n            ctx.fillStyle = theme.annotations.symbol.fill\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.fill()\n        }\n\n        if (isRectAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        if (typeof annotation.note === 'function') {\n            annotation.note(ctx, {\n                datum: annotation.datum,\n                x: annotation.computed.text[0],\n                y: annotation.computed.text[1],\n                theme,\n            })\n        } else {\n            ctx.font = `${theme.annotations.text.fontSize}px ${theme.annotations.text.fontFamily}`\n            ctx.fillStyle = theme.annotations.text.fill\n            ctx.strokeStyle = theme.annotations.text.outlineColor\n            ctx.lineWidth = theme.annotations.text.outlineWidth * 2\n            if (theme.annotations.text.outlineWidth > 0) {\n                ctx.lineJoin = 'round'\n                ctx.strokeText(\n                    annotation.note,\n                    annotation.computed.text[0],\n                    annotation.computed.text[1]\n                )\n                ctx.lineJoin = 'miter'\n            }\n            ctx.fillText(annotation.note, annotation.computed.text[0], annotation.computed.text[1])\n        }\n    })\n    ctx.restore()\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { animated } from '@react-spring/web'\nimport { ScatterPlotDatum, ScatterPlotNodeProps } from './types'\nimport { useCallback } from 'react'\n\nconst interpolateRadius = (size: number) => size / 2\n\nexport const Node = <RawDatum extends ScatterPlotDatum>({\n    node,\n    style,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: ScatterPlotNodeProps<RawDatum>) => {\n    const handleMouseEnter = useCallback(event => onMouseEnter?.(node, event), [node, onMouseEnter])\n    const handleMouseMove = useCallback(event => onMouseMove?.(node, event), [node, onMouseMove])\n    const handleMouseLeave = useCallback(event => onMouseLeave?.(node, event), [node, onMouseLeave])\n    const handleClick = useCallback(event => onClick?.(node, event), [node, onClick])\n\n    return (\n        <animated.circle\n            cx={style.x}\n            cy={style.y}\n            r={style.size.to(interpolateRadius)}\n            fill={style.color}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n","import { CssMixBlendMode } from '@nivo/core'\nimport { Node } from './Node'\nimport { Tooltip } from './Tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotLayerId,\n    ScatterPlotNodeData,\n} from './types'\n\nexport const commonDefaultProps = {\n    xScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['xScale'],\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['yScale'],\n\n    enableGridX: true,\n    enableGridY: true,\n    axisBottom: {},\n    axisLeft: {},\n\n    nodeId: (({ serieId, index }) =>\n        `${serieId}.${index}`) as ScatterPlotCommonProps<ScatterPlotDatum>['nodeId'],\n    nodeSize: 9,\n    nodeComponent: Node,\n\n    colors: { scheme: 'nivo' } as ScatterPlotCommonProps<ScatterPlotDatum>['colors'],\n\n    isInteractive: true,\n    debugMesh: false,\n\n    tooltip: Tooltip,\n\n    markers: [],\n\n    legends: [],\n\n    annotations: [],\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    blendMode: 'normal' as CssMixBlendMode,\n    layers: [\n        'grid',\n        'axes',\n        'nodes',\n        'markers',\n        'mesh',\n        'legends',\n        'annotations',\n    ] as ScatterPlotLayerId[],\n    role: 'img',\n    useMesh: true,\n    animate: true,\n    motionConfig: 'default',\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'nodes', 'mesh', 'legends', 'annotations'] as ScatterPlotLayerId[],\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n    renderNode: (ctx: CanvasRenderingContext2D, node: ScatterPlotNodeData<ScatterPlotDatum>) => {\n        ctx.beginPath()\n        ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n        ctx.fillStyle = node.color\n        ctx.fill()\n    },\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ScatterPlotTooltipProps, ScatterPlotDatum } from './types'\n\nexport const Tooltip = <RawDatum extends ScatterPlotDatum>({\n    node,\n}: ScatterPlotTooltipProps<RawDatum>) => (\n    <BasicTooltip\n        id={node.serieId}\n        value={`x: ${node.formattedX}, y: ${node.formattedY}`}\n        enableChip={true}\n        color={node.color}\n    />\n)\n","import { Annotation } from '@nivo/annotations'\nimport { useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface ScatterPlotAnnotationsProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n}\n\nexport const ScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    annotations,\n}: ScatterPlotAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { CssMixBlendMode, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNode,\n    ScatterPlotNodeData,\n} from './types'\nimport { createElement, useCallback } from 'react'\n\ninterface NodesProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    nodeComponent: ScatterPlotNode<RawDatum>\n    isInteractive: boolean\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    blendMode: CssMixBlendMode\n}\n\nconst getNodeKey = <RawDatum extends ScatterPlotDatum>(node: ScatterPlotNodeData<RawDatum>) =>\n    node.id\nconst regularTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: node.size,\n    color: node.color,\n})\nconst leaveTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: 0,\n    color: node.color,\n})\n\nexport const Nodes = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    nodeComponent,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    blendMode,\n}: NodesProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        ScatterPlotNodeData<RawDatum>,\n        {\n            x: number\n            y: number\n            size: number\n            color: string\n        }\n    >(nodes, {\n        keys: getNodeKey,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseEnter = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (node, event) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n    const handleClick = useCallback((node, event) => onClick?.(node, event), [onClick])\n\n    return (\n        <>\n            {transition((style, node) =>\n                createElement(nodeComponent, {\n                    node,\n                    style,\n                    blendMode,\n                    isInteractive,\n                    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n                    onMouseMove: isInteractive ? handleMouseMove : undefined,\n                    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n                    onClick: isInteractive ? handleClick : undefined,\n                })\n            )}\n        </>\n    )\n}\n","import { createElement, useCallback } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface MeshProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    width: number\n    height: number\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    debug: boolean\n}\n\nexport const Mesh = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    width,\n    height,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}: MeshProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={nodes}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n","import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport { SvgWrapper, Container, useDimensions, CartesianMarkers } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useScatterPlot } from './hooks'\nimport { svgDefaultProps } from './props'\nimport { ScatterPlotAnnotations } from './ScatterPlotAnnotations'\nimport { Nodes } from './Nodes'\nimport { Mesh } from './Mesh'\nimport { ScatterPlotDatum, ScatterPlotLayerId, ScatterPlotSvgProps } from './types'\n\ntype InnerScatterPlotProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = svgDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = svgDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    colors = svgDefaultProps.colors,\n    blendMode = svgDefaultProps.blendMode,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = svgDefaultProps.nodeSize,\n    nodeComponent = svgDefaultProps.nodeComponent,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    annotations = svgDefaultProps.annotations,\n    isInteractive = svgDefaultProps.isInteractive,\n    useMesh = svgDefaultProps.useMesh,\n    debugMesh = svgDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip,\n    markers = svgDefaultProps.markers,\n    legends = svgDefaultProps.legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerScatterPlotProps<RawDatum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    const layerById: Record<ScatterPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        nodes: null,\n        markers: null,\n        mesh: null,\n        annotations: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as any) : null}\n                yScale={enableGridY ? (yScale as any) : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <Nodes<RawDatum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                blendMode={blendMode}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<RawDatum['x'], RawDatum['y']>\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (value: RawDatum['x']) => number}\n                yScale={yScale as (value: RawDatum['y']) => number}\n            />\n        )\n    }\n\n    if (layers.includes('mesh') && isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh<RawDatum>\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <ScatterPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legendData}\n            />\n        ))\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'string' && layerById[layer] !== undefined) {\n                    return layerById[layer]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                throw new Error(`Unknown layer (${layer})`)\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const ScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: ScatterPlotSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerScatterPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlot } from './ScatterPlot'\nimport { ScatterPlotDatum, ScatterPlotSvgProps } from './types'\n\nexport const ResponsiveScatterPlot = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ScatterPlot<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { createElement, useRef, useState, useEffect, useCallback, useMemo } from 'react'\nimport { Container, useDimensions, useTheme, getRelativeCursor, isCursorInRect } from '@nivo/core'\nimport { renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { CanvasAxisProp, renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { canvasDefaultProps, svgDefaultProps } from './props'\nimport { useScatterPlot, useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ntype InnerScatterPlotCanvasProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = canvasDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = canvasDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = canvasDefaultProps.nodeSize,\n    renderNode = canvasDefaultProps.renderNode,\n    enableGridX = canvasDefaultProps.enableGridX,\n    gridXValues,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    annotations = canvasDefaultProps.annotations,\n    isInteractive = canvasDefaultProps.isInteractive,\n    debugMesh = canvasDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip,\n    legends = canvasDefaultProps.legends,\n}: InnerScatterPlotCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ScatterPlotNodeData<RawDatum> | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas<RawDatum['x']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale as any,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas<RawDatum['y']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale as any,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas<ScatterPlotNodeData<RawDatum>>(ctx, {\n                    annotations: boundAnnotations as any,\n                    theme,\n                })\n            } else if (layer === 'axes') {\n                renderAxesToCanvas<RawDatum['x'], RawDatum['y']>(ctx, {\n                    xScale: xScale as any,\n                    yScale: yScale as any,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop as CanvasAxisProp<RawDatum['x']>,\n                    right: axisRight as CanvasAxisProp<RawDatum['y']>,\n                    bottom: axisBottom as CanvasAxisProp<RawDatum['x']>,\n                    left: axisLeft as CanvasAxisProp<RawDatum['y']>,\n                    theme,\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    renderNode(ctx, node)\n                })\n            } else if (layer === 'mesh') {\n                if (debugMesh === true) {\n                    renderVoronoiToCanvas(ctx, voronoi!)\n                    if (currentNode) {\n                        renderVoronoiCellToCanvas(ctx, voronoi!, currentNode.index)\n                    }\n                }\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            } else {\n                throw new Error(`Invalid layer: ${layer}`)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        renderNode,\n        layers,\n        customLayerProps,\n        theme,\n        xScale,\n        yScale,\n        nodes,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        legendData,\n        debugMesh,\n        voronoi,\n        currentNode,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const getNodeFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current!, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const handleMouseHover = useCallback(\n        event => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event)\n                if (currentNode && currentNode.id !== node.id) {\n                    onMouseLeave && onMouseLeave(currentNode, event)\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                if (!currentNode) {\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                onMouseMove && onMouseMove(node, event)\n            } else {\n                hideTooltip()\n                currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n            }\n        },\n        [\n            getNodeFromMouseEvent,\n            currentNode,\n            setCurrentNode,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentNode(null)\n            currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n        },\n        [hideTooltip, currentNode, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const node = getNodeFromMouseEvent(event)\n                node && onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const ScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: ScatterPlotCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n        <InnerScatterPlotCanvas<RawDatum> {...props} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlotCanvas } from './ScatterPlotCanvas'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum } from './types'\n\nexport const ResponsiveScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <ScatterPlotCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\nconst keys = ['group A', 'group B', 'group C', 'group D', 'group E']\nconst ageRange = [0, 100]\nconst weightRange = [0, 120]\n\nconst generateData = size =>\n    keys.map(key => ({\n        id: key,\n        data: range(size).map(i => ({\n            x: random(ageRange[0], ageRange[1]),\n            y: random(weightRange[0], weightRange[1]),\n        })),\n    }))\n\nexport const generateLightDataSet = () => generateData(50)\n\nexport const generateHeavyDataSet = () => generateData(800)\n","import React from 'react'\nimport { settingsMapper, mapAxis, mapFormat } from '../../../lib/settings'\n\nexport default settingsMapper(\n    {\n        xFormat: mapFormat,\n        yFormat: mapFormat,\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n    },\n    {\n        exclude: ['enable axisTop', 'enable axisRight', 'enable axisBottom', 'enable axisLeft'],\n    }\n)\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n"],"names":["props","key","group","help","description","required","type","controlType","controlOptions","disabled","choices","map","v","label","value","disabledValue","defaultValue","min","max","commonDefaultProps","unit","enableControlForFlavors","step","flavors","themeProperty","svgDefaultProps","axesProperties","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","defaults","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","data","alert","JSON","stringify","motionProperties","groups","groupProperties","settingsMapper","mapping","exclude","settings","options","overrides","Object","keys","forEach","omit","mapAxis","upperFirst","enable","mapFormat","format","enabled","undefined","defaultProps","isCircleAnnotation","annotationSpec","isDotAnnotation","isRectAnnotation","computeAnnotation","annotation","computedNoteX","computedNoteY","x","y","noteX","noteY","noteWidth","noteTextOffset","_isNumber","abs","Error","computedX","computedY","angle","sourceX","sourceY","targetX","targetY","Math","atan2","absoluteAngleDegrees","radiansToDegrees","getLinkAngle","position","positionFromAngle","degreesToRadians","size","eighth","round","height","width","textX","noteLineX","points","text","useAnnotations","annotations","getPosition","getDimensions","useMemo","reduce","acc","offset","_filter","match","datum","dimensions","_omit","bindAnnotations","useComputedAnnotations","computed","AnnotationNote","note","theme","useTheme","useMotionConfig","animate","springConfig","config","animatedProps","useSpring","immediate","createElement","_jsxs","outlineWidth","_jsx","animated","style","strokeLinejoin","strokeWidth","stroke","outlineColor","AnnotationLink","isOutline","path","firstPoint","animatedPath","useAnimatedPath","link","strokeLinecap","fill","d","CircleAnnotationOutline","radius","outline","circle","cx","cy","r","DotAnnotationOutline","dotSize","symbol","RectAnnotationOutline","rect","Annotation","useComputedAnnotation","noteType","isValidElement","isSvgNote","drawPoints","ctx","moveTo","lineTo","renderAnnotationsToCanvas","length","save","isCanvasNote","lineCap","strokeStyle","lineWidth","beginPath","arc","PI","fillStyle","font","fontSize","fontFamily","lineJoin","strokeText","fillText","restore","computeCartesianTicks","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","centerScale","line","lineX","lineY","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","top","bottom","left","right","ticks","getFormatter","formatter","timeFormat","Date","d3Format","computeGridLines","_values","Array","isArray","lines","x1","x2","y1","y2","memoizedAxisTick","memo","_value","textAnchor","opacity","cursor","event","g","transform","dominantBaseline","textTransform","memoizedAxis","renderTick","AxisTick","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","lineX2","lineY2","transition","useTransition","t","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","rotate","domain","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","axes","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","_format","fontWeight","Number","String","renderAxesToCanvas","renderGridLinesToCanvas","useScatterPlot","xScaleSpec","xFormat","yScaleSpec","yFormat","nodeId","nodeSize","colors","computeXYScalesForSeries","series","formatX","useValueFormatter","formatY","getNodeId","usePropertyAccessor","rawNodes","serie","serieIndex","point","serieId","id","xValue","formattedX","yValue","formattedY","push","getNodeSize","isNumber","isPlainObject","isString","sizes","sizeScale","scaleLinear","range","get","getNodeSizeGenerator","getColor","useOrdinalColorScale","nodes","rawNode","color","legendData","useScatterPlotAnnotations","items","node","interpolateRadius","enableGridX","enableGridY","axisBottom","axisLeft","nodeComponent","blendMode","isInteractive","onMouseEnter","onMouseMove","onMouseLeave","handleMouseEnter","useCallback","e","handleMouseMove","handleMouseLeave","handleClick","to","mixBlendMode","scheme","debugMesh","tooltip","BasicTooltip","enableChip","markers","legends","layers","role","useMesh","motionConfig","canvasDefaultProps","pixelRatio","window","devicePixelRatio","renderNode","ScatterPlotAnnotations","boundAnnotations","i","getNodeKey","regularTransition","leaveTransition","Nodes","useTooltip","showTooltipFromEvent","hideTooltip","Mesh","debug","BaseMesh","InnerScatterPlot","partialMargin","margin","gridXValues","gridYValues","axisTop","axisRight","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","customLayerProps","layerById","mesh","includes","CartesianMarkers","BoxLegendSvg","containerWidth","containerHeight","SvgWrapper","layer","Fragment","ScatterPlot","renderWrapper","otherProps","Container","ResponsiveScatterPlot","ResponsiveWrapper","InnerScatterPlotCanvas","canvasEl","useRef","useState","currentNode","setCurrentNode","useVoronoiMesh","delaunay","voronoi","useEffect","current","getContext","background","fillRect","n","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","getNodeFromMouseEvent","getRelativeCursor","isCursorInRect","nodeIndex","find","handleMouseHover","ref","ScatterPlotCanvas","ResponsiveScatterPlotCanvas","ageRange","weightRange","generateData","random","generateLightDataSet","generateHeavyDataSet","baseEach","module","exports","collection","predicate","result","nativeFloor","floor","nativeRandom","lower","upper","arrayFilter","baseFilter","baseIteratee","baseRandom","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","temp","rand"],"sourceRoot":""}