{"version":3,"sources":["webpack:///./src/pages/scatterplot/index.js"],"names":["initialProperties","margin","top","right","bottom","left","xScale","type","min","max","xFormat","d","yScale","yFormat","colors","ScatterPlotDefaultProps","blendMode","nodeSize","enableGridX","enableGridY","axisTop","enable","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","axisRight","axisBottom","legendPosition","format","axisLeft","animate","motionStiffness","motionDamping","isInteractive","useMesh","debugMesh","legends","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","itemDirection","symbolSize","symbolShape","onClick","alert","JSON","stringify","effects","on","style","itemOpacity","ScatterPlot","name","meta","icon","flavors","currentFlavor","properties","groups","defaultProperties","propertiesMapper","mapper","generateData","generateLightDataSet","data","theme","logAction","node","label","serieId","x","y","color"],"mappings":"4FAAA,iHAgBMA,EAAoB,CACtBC,OAAQ,CACJC,IAAK,GACLC,MAAO,IACPC,OAAQ,GACRC,KAAM,IAGVC,OAAQ,CACJC,KAAM,SACNC,IAAK,EACLC,IAAK,QAETC,QAAS,SAAAC,GAAC,OAAOA,EAAP,OACVC,OAAQ,CACJL,KAAM,SACNC,IAAK,EACLC,IAAK,QAETI,QAAS,SAAAF,GAAC,OAAOA,EAAP,OAEVG,OAAQC,IAAwBD,OAChCE,UAAW,WAEXC,SAAUF,IAAwBE,SAElCC,YAAaH,IAAwBG,YACrCC,YAAaJ,IAAwBI,YACrCC,QAAS,CACLC,QAAQ,EACRC,OAAQ,MACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,GACRC,aAAc,IAElBC,UAAW,CACPP,QAAQ,EACRC,OAAQ,QACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,GACRC,aAAc,GAElBE,WAAY,CACRR,QAAQ,EACRC,OAAQ,SACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,SACRI,eAAgB,SAChBH,aAAc,GACdI,OAAQ,SAAApB,GAAC,OAAOA,EAAP,QAEbqB,SAAU,CACNX,QAAQ,EACRC,OAAQ,OACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,OACRI,eAAgB,SAChBH,cAAe,GACfI,OAAQ,SAAApB,GAAC,OAAOA,EAAP,QAGbsB,SAAS,EACTC,gBAAiB,GACjBC,cAAe,GAEfC,eAAe,EACfC,SAAS,EACTC,WAAW,EAEXC,QAAS,CACL,CACIC,OAAQ,eACRC,UAAW,SACXC,SAAS,EACTC,WAAY,IACZC,WAAY,EACZC,UAAW,IACXC,WAAY,GACZC,aAAc,EACdC,cAAe,gBACfC,WAAY,GACZC,YAAa,SACbC,QAAS,SAAAxC,GACLyC,MAAMC,KAAKC,UAAU3C,EAAG,KAAM,UAElC4C,QAAS,CACL,CACIC,GAAI,QACJC,MAAO,CACHC,YAAa,QAyCtBC,UAjCK,WAChB,OACI,kBAAC,IAAD,CACIC,KAAK,cACLC,KAAMA,IAAKF,YACXG,KAAK,cACLC,QAASF,IAAKE,QACdC,cAAc,MACdC,WAAYC,IACZlE,kBAAmBA,EACnBmE,kBAAmBpD,IACnBqD,iBAAkBC,IAClBC,aAAcC,MAEb,SAACN,EAAYO,EAAMC,EAAOC,GAA1B,OACG,kBAAC,IAAD,eACIF,KAAMA,GACFP,EAFR,CAGIQ,MAAOA,EACPtB,QAAS,SAAAwB,GACLD,EAAU,CACNnE,KAAM,QACNqE,MAAM,iBAAkBD,EAAKH,KAAKK,QAA7B,QAA4CF,EAAKG,EAAjD,QAA0DH,EAAKI,EACpEC,MAAOL,EAAKlB,MAAMuB,MAClBR,KAAMG","file":"component---src-pages-scatterplot-index-js-64b2eac13484564c8172.js","sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveScatterPlot, ScatterPlotDefaultProps } from '@nivo/scatterplot'\nimport ComponentTemplate from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/scatterplot/meta.yml'\nimport mapper from '../../data/components/scatterplot/mapper'\nimport { groups } from '../../data/components/scatterplot/props'\nimport { generateLightDataSet } from '../../data/components/scatterplot/generator'\n\nconst initialProperties = {\n    margin: {\n        top: 60,\n        right: 140,\n        bottom: 70,\n        left: 90,\n    },\n\n    xScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n    xFormat: d => `${d} kg`,\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n    yFormat: d => `${d} cm`,\n\n    colors: ScatterPlotDefaultProps.colors,\n    blendMode: 'multiply',\n\n    nodeSize: ScatterPlotDefaultProps.nodeSize,\n\n    enableGridX: ScatterPlotDefaultProps.enableGridX,\n    enableGridY: ScatterPlotDefaultProps.enableGridY,\n    axisTop: {\n        enable: false,\n        orient: 'top',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 36,\n    },\n    axisRight: {\n        enable: false,\n        orient: 'right',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 0,\n    },\n    axisBottom: {\n        enable: true,\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'weight',\n        legendPosition: 'middle',\n        legendOffset: 46,\n        format: d => `${d} kg`,\n    },\n    axisLeft: {\n        enable: true,\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'size',\n        legendPosition: 'middle',\n        legendOffset: -60,\n        format: d => `${d} cm`,\n    },\n\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 15,\n\n    isInteractive: true,\n    useMesh: true,\n    debugMesh: false,\n\n    legends: [\n        {\n            anchor: 'bottom-right',\n            direction: 'column',\n            justify: false,\n            translateX: 130,\n            translateY: 0,\n            itemWidth: 100,\n            itemHeight: 12,\n            itemsSpacing: 5,\n            itemDirection: 'left-to-right',\n            symbolSize: 12,\n            symbolShape: 'circle',\n            onClick: d => {\n                alert(JSON.stringify(d, null, '    '))\n            },\n            effects: [\n                {\n                    on: 'hover',\n                    style: {\n                        itemOpacity: 1,\n                    },\n                },\n            ],\n        },\n    ],\n}\n\nconst ScatterPlot = () => {\n    return (\n        <ComponentTemplate\n            name=\"ScatterPlot\"\n            meta={meta.ScatterPlot}\n            icon=\"scatterplot\"\n            flavors={meta.flavors}\n            currentFlavor=\"svg\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={ScatterPlotDefaultProps}\n            propertiesMapper={mapper}\n            generateData={generateLightDataSet}\n        >\n            {(properties, data, theme, logAction) => (\n                <ResponsiveScatterPlot\n                    data={data}\n                    {...properties}\n                    theme={theme}\n                    onClick={node => {\n                        logAction({\n                            type: 'click',\n                            label: `[node] serie: ${node.data.serieId}, x: ${node.x}, y: ${node.y}`,\n                            color: node.style.color,\n                            data: node,\n                        })\n                    }}\n                />\n            )}\n        </ComponentTemplate>\n    )\n}\n\nexport default ScatterPlot\n"],"sourceRoot":""}