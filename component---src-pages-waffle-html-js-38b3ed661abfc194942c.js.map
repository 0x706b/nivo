{"version":3,"sources":["webpack:///./src/pages/waffle/html.js","webpack:///./src/data/components/waffle/props.js","webpack:///./src/data/components/waffle/CustomTooltip.js","webpack:///./src/data/components/waffle/mapper.js"],"names":["generateData","id","label","value","Math","random","color","initialProperties","total","rows","columns","fillDirection","padding","margin","top","right","bottom","left","cellComponent","emptyColor","emptyOpacity","colors","scheme","borderWidth","borderColor","from","gamma","animate","motionStiffness","motionDamping","isInteractive","tooltip","WaffleHtml","name","meta","icon","flavors","currentFlavor","properties","groups","propertiesMapper","mapper","defaultProperties","WaffleDefaultProps","codePropertiesMapper","undefined","data","theme","logAction","onClick","node","position","type","defaults","props","key","group","help","description","required","controlType","controlOptions","min","max","defaultValue","choices","unit","enableControlForFlavors","themeProperty","map","defsProperties","getLegendsProps","shouldCreate","addLabel","shouldRemove","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","itemTextColor","alert","JSON","stringify","effects","on","style","itemBackground","motionProperties","groupProperties","TooltipWrapper","styled","div","TooltipKey","span","TooltipValue","CustomTooltip","groupIndex","row","column","CustomSvgCell","size","x","y","fill","opacity","onHover","onLeave","r","cx","cy","strokeWidth","stroke","onMouseEnter","onMouseMove","onMouseLeave","event","CustomHtmlCell","borderRadius","width","height","background","boxSizing","borderStyle","settingsMapper","values","options","component","exclude"],"mappings":"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","file":"component---src-pages-waffle-html-js-38b3ed661abfc194942c.js","sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWaffleHtml, WaffleDefaultProps } from '@nivo/waffle'\nimport ComponentTemplate from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/waffle/meta.yml'\nimport { groups } from '../../data/components/waffle/props'\nimport mapper from '../../data/components/waffle/mapper'\n\nconst generateData = () => [\n    {\n        id: 'men',\n        label: 'men',\n        value: Math.random() * 33,\n        color: '#468df3',\n    },\n    {\n        id: 'women',\n        label: 'women',\n        value: Math.random() * 33,\n        color: '#ba72ff',\n    },\n    {\n        id: 'children',\n        label: 'children',\n        value: Math.random() * 33,\n        color: '#a1cfff',\n    },\n]\n\nconst initialProperties = {\n    total: 100,\n\n    rows: 18,\n    columns: 14,\n    fillDirection: 'bottom',\n    padding: 1,\n\n    margin: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10,\n    },\n\n    cellComponent: 'default',\n    emptyColor: '#cccccc',\n    emptyOpacity: 1,\n    colors: { scheme: 'set2' },\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        gamma: [['darker', 0.3]],\n    },\n\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 11,\n\n    isInteractive: true,\n    'custom tooltip example': false,\n    tooltip: null,\n}\n\nconst WaffleHtml = () => {\n    return (\n        <ComponentTemplate\n            name=\"WaffleHtml\"\n            meta={meta.WaffleHtml}\n            icon=\"waffle\"\n            flavors={meta.flavors}\n            currentFlavor=\"html\"\n            properties={groups}\n            propertiesMapper={mapper}\n            initialProperties={initialProperties}\n            defaultProperties={WaffleDefaultProps}\n            codePropertiesMapper={properties => ({\n                ...properties,\n                cellComponent: properties.cellComponent ? 'CustomCell(props) => (â€¦)' : undefined,\n                tooltip: properties.tooltip ? 'CustomTooltip(props) => (â€¦)' : undefined,\n            })}\n            generateData={generateData}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveWaffleHtml\n                        data={data}\n                        {...properties}\n                        theme={theme}\n                        onClick={node => {\n                            let label\n                            if (node.data.value !== undefined) {\n                                label = `${node.data.label}: ${node.data.value} (position: ${node.position})`\n                            } else {\n                                label = `empty at position: ${node.position}`\n                            }\n                            logAction({\n                                type: 'click',\n                                label: `[cell] ${label}`,\n                                color: node.color,\n                                data: node,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default WaffleHtml\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { WaffleDefaultProps } from '@nivo/waffle'\nimport {\n    themeProperty,\n    motionProperties,\n    defsProperties,\n    getLegendsProps,\n    groupProperties,\n} from '../../../lib/componentProperties'\n\nconst defaults = WaffleDefaultProps\n\nconst props = [\n    {\n        key: 'total',\n        group: 'Base',\n        type: 'number',\n        help: 'Max value.',\n        description: 'Max value, ratio will be computed against this value for each datum.',\n        required: true,\n    },\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                id:    string | number\n                value: number\n                label: string | number\n            }>\n            \\`\\`\\`\n        `,\n        type: 'object[]',\n        required: true,\n    },\n    // {\n    //     key: 'hiddenIds',\n    //     type: 'Array<string | number>',\n    //     help: 'Hide parts of the data by id',\n    //     description: `\n    //         Hide parts of the data by id, this can be used\n    //         to implement toggle. Note that the datum will\n    //         still be visible in legends, if you want\n    //         to completely remove a datum from the data set,\n    //         you'll have to filter the data before passing\n    //         it to the component.\n    //     `,\n    //     required: false,\n    //     defaultValue: defaults.hiddenIds,\n    // },\n    {\n        key: 'rows',\n        type: 'number',\n        help: 'Number of rows.',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 100,\n        },\n    },\n    {\n        key: 'columns',\n        type: 'number',\n        help: 'Number of columns.',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 100,\n        },\n    },\n    {\n        key: 'fillDirection',\n        help: `How to fill the waffle.`,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.fillDirection,\n        controlType: 'choices',\n        group: 'Base',\n        controlOptions: {\n            choices: [\n                { label: 'top', value: 'top' },\n                { label: 'right', value: 'right' },\n                { label: 'bottom', value: 'bottom' },\n                { label: 'left', value: 'left' },\n            ],\n        },\n    },\n    {\n        key: 'padding',\n        type: 'number',\n        help: 'Padding between each cell.',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 10,\n        },\n    },\n    {\n        key: 'width',\n        group: 'Base',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            not required if using responsive alternative\n            of the component\n            \\`<Responsive*/>\\`.\n        `,\n        type: 'number',\n        required: true,\n    },\n    {\n        key: 'height',\n        group: 'Base',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            not required if using responsive alternative\n            of the component\n            \\`<Responsive*/>\\`.\n        `,\n        type: 'number',\n        required: true,\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        required: false,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    themeProperty,\n    {\n        key: 'cellComponent',\n        flavors: ['svg', 'html'],\n        help: 'Override default cell component.',\n        type: 'Function',\n        required: false,\n        controlType: 'choices',\n        group: 'Style',\n        controlOptions: {\n            choices: ['default', 'Custom(props) => (â€¦)'].map(key => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'colors',\n        help: 'Defines how to compute node color.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: defaults.colors,\n        controlType: 'ordinalColors',\n        group: 'Style',\n    },\n    {\n        key: 'emptyColor',\n        help: 'Defines empty cells color.',\n        type: 'string',\n        required: false,\n        defaultValue: defaults.emptyColor,\n        controlType: 'colorPicker',\n        group: 'Style',\n    },\n    {\n        key: 'emptyOpacity',\n        help: 'Empty cells opacity.',\n        required: false,\n        defaultValue: defaults.emptyOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Style',\n    },\n    {\n        key: 'borderWidth',\n        help: 'Control cell border width.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.borderWidth,\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute cell border color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.borderColor,\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'isInteractive',\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.isInteractive,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'onClick',\n        group: 'Interactivity',\n        help: 'onClick handler, it receives clicked node data and style plus mouse event.',\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom tooltip component',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will\n            receive the following data:\n            \\`\\`\\`\n            {\n                id:         {string|number},\n                value:      number,\n                label:      {string|number},\n                color:      string,\n                position:   number,\n                row:        number,\n                column:     number,\n                groupIndex: number,\n                startAt:    number,\n                endAt:      number,\n            }\n            \\`\\`\\`\n            You can customize the tooltip style\n            using the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        help: 'Showcase custom tooltip.',\n        type: 'boolean',\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'legends',\n        flavors: ['svg', 'canvas'],\n        type: 'object[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            defaults: {\n                anchor: 'left',\n                direction: 'column',\n                justify: false,\n                translateX: -100,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 4,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                itemTextColor: '#777',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemTextColor: '#000',\n                            itemBackground: '#f7fafb',\n                        },\n                    },\n                ],\n            },\n        },\n    },\n    ...motionProperties(['svg', 'html'], defaults),\n]\n\nexport const groups = groupProperties(props)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n`\nconst TooltipKey = styled.span`\n    font-weight: 600;\n`\nconst TooltipValue = styled.span``\n\nconst CustomTooltip = node => (\n    <TooltipWrapper style={{ color: node.color }}>\n        <TooltipKey>label</TooltipKey>\n        <TooltipValue>{node.label}</TooltipValue>\n        <TooltipKey>id</TooltipKey>\n        <TooltipValue>{node.id}</TooltipValue>\n        <TooltipKey>value</TooltipKey>\n        <TooltipValue>{node.value}</TooltipValue>\n        <TooltipKey>position</TooltipKey>\n        <TooltipValue>{node.position}</TooltipValue>\n        <TooltipKey>groupIndex</TooltipKey>\n        <TooltipValue>{node.groupIndex}</TooltipValue>\n        <TooltipKey>row</TooltipKey>\n        <TooltipValue>{node.row}</TooltipValue>\n        <TooltipKey>column</TooltipKey>\n        <TooltipValue>{node.column}</TooltipValue>\n        <TooltipKey>color</TooltipKey>\n        <TooltipValue>{node.color}</TooltipValue>\n    </TooltipWrapper>\n)\n\nexport default CustomTooltip\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { settingsMapper } from '../../../lib/settings'\nimport CustomTooltip from './CustomTooltip'\n\nconst CustomSvgCell = ({\n    position,\n    size,\n    x,\n    y,\n    color,\n    fill,\n    opacity,\n    borderWidth,\n    borderColor,\n    data,\n    onHover,\n    onLeave,\n    onClick,\n}) => (\n    <circle\n        r={size / 2}\n        cx={x + size / 2}\n        cy={y + size / 2}\n        fill={fill || color}\n        strokeWidth={borderWidth}\n        stroke={borderColor}\n        opacity={opacity}\n        onMouseEnter={onHover}\n        onMouseMove={onHover}\n        onMouseLeave={onLeave}\n        onClick={event => {\n            onClick({ position, color, x, y, data }, event)\n        }}\n    />\n)\n\nconst CustomHtmlCell = ({\n    position,\n    size,\n    x,\n    y,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    data,\n    onHover,\n    onLeave,\n    onClick,\n}) => (\n    <div\n        style={{\n            borderRadius: `${size / 2}px 0 ${size / 2}px 0`,\n            position: 'absolute',\n            top: y,\n            left: x,\n            width: size,\n            height: size,\n            background: color,\n            opacity,\n            boxSizing: 'content-box',\n            borderStyle: 'solid',\n            borderWidth: `${borderWidth}px`,\n            borderColor,\n        }}\n        onMouseEnter={onHover}\n        onMouseMove={onHover}\n        onMouseLeave={onLeave}\n        onClick={event => {\n            onClick({ position, color, x, y, data }, event)\n        }}\n    />\n)\n\nexport default settingsMapper(\n    {\n        cellComponent: (value, values, options) => {\n            if (value === `Custom(props) => (â€¦)`) {\n                if (options.component === 'Waffle') return CustomSvgCell\n                return CustomHtmlCell\n            }\n            return undefined\n        },\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return null\n\n            return CustomTooltip\n        },\n    },\n    {\n        exclude: ['custom tooltip example'],\n    }\n)\n"],"sourceRoot":""}