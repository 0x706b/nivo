{"version":3,"file":"1e0beb595365274db6775e5afa5a72c418b7b975-71bdd18d37b3527e5cdf.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-time/src/duration.js","webpack://nivo-website/../node_modules/d3-time/src/interval.js","webpack://nivo-website/./src/data/components/pie/mapper.tsx","webpack://nivo-website/./src/data/components/pie/props.ts","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../node_modules/d3-shape/src/descending.js","webpack://nivo-website/../node_modules/d3-shape/src/identity.js","webpack://nivo-website/../src/PieLegends.tsx","webpack://nivo-website/../src/PieTooltip.tsx","webpack://nivo-website/../node_modules/d3-shape/src/pie.js","webpack://nivo-website/../src/Arcs.tsx","webpack://nivo-website/../src/Pie.tsx","webpack://nivo-website/../src/ResponsivePie.tsx","webpack://nivo-website/../src/PieCanvas.tsx","webpack://nivo-website/../src/ResponsivePieCanvas.tsx"],"sourcesContent":["export var durationSecond = 1e3;\nexport var durationMinute = 6e4;\nexport var durationHour = 36e5;\nexport var durationDay = 864e5;\nexport var durationWeek = 6048e5;","var t0 = new Date(),\n    t1 = new Date();\nexport default function newInterval(floori, offseti, count, field) {\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;\n  }\n\n  interval.floor = function (date) {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = function (date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function (date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function (date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function (start, stop, step) {\n    var range = [],\n        previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n\n    do {\n      range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    } while (previous < start && start < stop);\n\n    return range;\n  };\n\n  interval.filter = function (test) {\n    return newInterval(function (date) {\n      if (date >= date) while (floori(date), !test(date)) {\n        date.setTime(date - 1);\n      }\n    }, function (date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function (start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function (step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n        return field(d) % step === 0;\n      } : function (d) {\n        return interval.count(0, d) % step === 0;\n      });\n    };\n  }\n\n  return interval;\n}","import React from 'react'\nimport styled from 'styled-components'\n// @ts-ignore\nimport { patternDotsDef, patternLinesDef } from '@nivo/core'\nimport { mapFormat, settingsMapper } from '../../../lib/settings'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n    background: #333;\n    padding: 12px 16px;\n    font-size: 12px;\n    border-radius: 2px;\n`\nconst TooltipKey = styled.span``\nconst TooltipValue = styled.span`\n    font-weight: 600;\n`\n\nconst CustomTooltip = ({ datum }) => (\n    <TooltipWrapper style={{ color: datum.color }}>\n        <TooltipKey>id</TooltipKey>\n        <TooltipValue>{datum.id}</TooltipValue>\n        <TooltipKey>value</TooltipKey>\n        <TooltipValue>{datum.value}</TooltipValue>\n        <TooltipKey>formattedValue</TooltipKey>\n        <TooltipValue>{datum.formattedValue}</TooltipValue>\n        <TooltipKey>color</TooltipKey>\n        <TooltipValue>{datum.color}</TooltipValue>\n    </TooltipWrapper>\n)\n\nexport default settingsMapper(\n    {\n        valueFormat: mapFormat,\n        arcLinkLabel: value => {\n            if (value === `d => \\`\\${d.id} (\\${d.value})\\``) return d => `${d.id} (${d.value})`\n            return value\n        },\n        arcLabel: value => {\n            if (value === `d => \\`\\${d.id} (\\${d.value})\\``) return d => `${d.id} (${d.value})`\n            return value\n        },\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return undefined\n\n            return CustomTooltip\n        },\n        theme: (value, values) => {\n            if (!values['custom tooltip example']) return value\n\n            return {\n                ...values.theme,\n                tooltip: {\n                    container: {\n                        ...values.theme.tooltip.container,\n                        background: '#333',\n                    },\n                },\n            }\n        },\n        defs: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                patternDotsDef('dots', {\n                    background: 'inherit',\n                    color: 'rgba(255, 255, 255, 0.3)',\n                    size: 4,\n                    padding: 1,\n                    stagger: true,\n                }),\n                patternLinesDef('lines', {\n                    background: 'inherit',\n                    color: 'rgba(255, 255, 255, 0.3)',\n                    rotation: -45,\n                    lineWidth: 6,\n                    spacing: 10,\n                }),\n            ]\n        },\n        fill: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                { match: { id: 'ruby' }, id: 'dots' },\n                { match: { id: 'c' }, id: 'dots' },\n                { match: { id: 'go' }, id: 'dots' },\n                { match: { id: 'python' }, id: 'dots' },\n                { match: { id: 'scala' }, id: 'lines' },\n                { match: { id: 'lisp' }, id: 'lines' },\n                { match: { id: 'elixir' }, id: 'lines' },\n                { match: { id: 'javascript' }, id: 'lines' },\n            ]\n        },\n    },\n    {\n        exclude: ['custom tooltip example', 'showcase pattern usage'],\n    }\n)\n","import { defaultProps } from '@nivo/pie'\nimport { arcTransitionModes } from '@nivo/arcs'\nimport {\n    themeProperty,\n    defsProperties,\n    groupProperties,\n    getLegendsProps,\n    motionProperties,\n} from '../../../lib/componentProperties'\nimport { chartDimensions, ordinalColors, isInteractive } from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg', 'canvas', 'api']\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Chart data, which should be immutable.',\n        description: `\n            Chart data, which must conform to this structure\n            if using the default \\`id\\` and \\`value\\` accessors:\n\n            \\`\\`\\`\n            Array<{\n                // must be unique for the whole dataset\n                id:    string | number,\n                value: number\n            }>\n            \\`\\`\\`\n\n            If using a different data structure, you must make sure\n            to adjust both \\`id\\` and \\`value\\`. Meaning you can provide\n            a completely different data structure as long as \\`id\\` and \\`value\\`\n            return the appropriate values.\n\n            Immutability of the data is important as re-computations\n            depends on it.\n        `,\n        type: 'object[]',\n        required: true,\n    },\n    {\n        key: 'id',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'ID accessor which should return a unique value for the whole dataset.',\n        description: `\n            Define how to access the ID of each datum,\n            by default, nivo will look for the \\`id\\` property.\n        `,\n        type: 'string | (datum: RawDatum): string | number',\n        required: false,\n        defaultValue: defaultProps.id,\n    },\n    {\n        key: 'value',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Value accessor.',\n        description: `\n            Define how to access the value of each datum,\n            by default, nivo will look for the \\`value\\` property.\n        `,\n        type: 'string | (datum: RawDatum): number',\n        required: false,\n        defaultValue: defaultProps.value,\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'string | (value: number) => string | number',\n        control: { type: 'valueFormat' },\n    },\n    ...chartDimensions(allFlavors),\n    {\n        key: 'startAngle',\n        help: 'Start angle (in degrees), useful to make gauges for example.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.startAngle,\n        group: 'Base',\n        control: {\n            type: 'angle',\n            min: -180,\n            max: 360,\n            step: 5,\n        },\n    },\n    {\n        key: 'endAngle',\n        help: 'End angle (in degrees), useful to make gauges for example.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.endAngle,\n        group: 'Base',\n        control: {\n            type: 'angle',\n            min: -360,\n            max: 360,\n            step: 5,\n        },\n    },\n    {\n        key: 'fit',\n        help: `If 'true', pie will be optimized to occupy more space when using partial pie.`,\n        flavors: allFlavors,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.fit,\n        control: { type: 'switch' },\n        group: 'Base',\n    },\n    {\n        key: 'innerRadius',\n        help: `Donut chart if greater than 0. Value should be between 0~1 as it's a ratio from original radius.`,\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.innerRadius,\n        group: 'Base',\n        control: {\n            type: 'range',\n            min: 0,\n            max: 0.95,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'padAngle',\n        help: 'Padding between each pie slice.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.padAngle,\n        group: 'Base',\n        control: {\n            type: 'range',\n            unit: '°',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'cornerRadius',\n        help: 'Rounded slices.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.cornerRadius,\n        group: 'Base',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'sortByValue',\n        help: `If 'true', arcs will be ordered according to their associated value.`,\n        flavors: allFlavors,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.sortByValue,\n        control: { type: 'switch' },\n        group: 'Base',\n    },\n    themeProperty(allFlavors),\n    ordinalColors({\n        flavors: allFlavors,\n        defaultValue: defaultProps.colors,\n    }),\n    ...defsProperties('Style', ['svg', 'api']),\n    {\n        key: 'showcase pattern usage',\n        flavors: ['svg'],\n        help: 'Patterns.',\n        description: `\n            You can use \\`defs\\` and \\`fill\\` properties\n            to use patterns, see\n            [dedicated guide](self:/guides/patterns)\n            for further information.\n        `,\n        required: false,\n        type: 'boolean',\n        control: { type: 'switch' },\n        group: 'Style',\n    },\n    {\n        key: 'borderWidth',\n        help: 'Slices border width.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.borderWidth,\n        control: { type: 'lineWidth' },\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute border color.',\n        flavors: allFlavors,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.borderColor,\n        control: { type: 'inheritedColor' },\n        group: 'Style',\n    },\n    {\n        key: 'enableArcLabels',\n        help: 'Enable/disable arc labels.',\n        flavors: allFlavors,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.enableArcLabels,\n        control: { type: 'switch' },\n        group: 'Arc labels',\n    },\n    {\n        key: 'arcLabel',\n        help: 'Defines how to get label text, can be a string (used to access current node data property) or a function which will receive the actual node data.',\n        flavors: allFlavors,\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaultProps.arcLabel,\n        group: 'Arc labels',\n        control: {\n            type: 'choices',\n            choices: ['id', 'value', 'formattedValue', `d => \\`\\${d.id} (\\${d.value})\\``].map(\n                choice => ({\n                    label: choice,\n                    value: choice,\n                })\n            ),\n        },\n    },\n    {\n        key: 'arcLabelsRadiusOffset',\n        help: `\n            Define the radius to use to determine the label position, starting from inner radius,\n            this is expressed as a ratio.\n        `,\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLabelsRadiusOffset,\n        group: 'Arc labels',\n        control: {\n            type: 'range',\n            min: 0,\n            max: 2,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'arcLabelsSkipAngle',\n        help: `Skip label if corresponding arc's angle is lower than provided value.`,\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLabelsSkipAngle,\n        group: 'Arc labels',\n        control: {\n            type: 'range',\n            unit: '°',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLabelsTextColor',\n        help: 'Defines how to compute arc label text color.',\n        flavors: allFlavors,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.arcLabelsTextColor,\n        control: { type: 'inheritedColor' },\n        group: 'Arc labels',\n    },\n    {\n        key: 'enableArcLinkLabels',\n        help: 'Enable/disable arc link labels.',\n        flavors: allFlavors,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.enableArcLinkLabels,\n        control: { type: 'switch' },\n        group: 'Arc link labels',\n    },\n    {\n        key: 'arcLinkLabel',\n        help: 'Arc link label',\n        flavors: allFlavors,\n        description: `\n            Defines how to get label text,\n            can be a string (used to access current node data property)\n            or a function which will receive the actual node data.\n        `,\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabel,\n        group: 'Arc link labels',\n        control: {\n            type: 'choices',\n            choices: ['id', 'value', `d => \\`\\${d.id} (\\${d.value})\\``].map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n    {\n        key: 'arcLinkLabelsSkipAngle',\n        help: `Skip label if corresponding slice's angle is lower than provided value.`,\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsSkipAngle,\n        group: 'Arc link labels',\n        control: {\n            type: 'range',\n            unit: '°',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLinkLabelsOffset',\n        help: `Link offset from pie outer radius, useful to have links overlapping pie slices.`,\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsOffset,\n        group: 'Arc link labels',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: -24,\n            max: 24,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLinkLabelsDiagonalLength',\n        help: `Link diagonal length.`,\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsDiagonalLength,\n        group: 'Arc link labels',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 36,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLinkLabelsStraightLength',\n        help: `Length of the straight segment of the links.`,\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsStraightLength,\n        group: 'Arc link labels',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 36,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLinkLabelsTextOffset',\n        help: `X offset from links' end.`,\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsTextOffset,\n        group: 'Arc link labels',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 36,\n            step: 1,\n        },\n    },\n    {\n        key: 'arcLinkLabelsThickness',\n        help: 'Links stroke width.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsThickness,\n        control: { type: 'lineWidth' },\n        group: 'Arc link labels',\n    },\n    {\n        key: 'arcLinkLabelsTextColor',\n        help: 'Defines how to compute arc link label text color.',\n        flavors: allFlavors,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsTextColor,\n        control: { type: 'inheritedColor' },\n        group: 'Arc link labels',\n    },\n    {\n        key: 'arcLinkLabelsColor',\n        help: 'Defines how to compute arc link label link color.',\n        flavors: allFlavors,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.arcLinkLabelsColor,\n        control: { type: 'inheritedColor' },\n        group: 'Arc link labels',\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        flavors: allFlavors,\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer must be a function.\n\n            The layer component which will receive the chart's\n            context & computed data and must return a valid SVG element\n            for the \\`Pie\\` component.\n\n            When using the canvas implementation, the function\n            will receive the canvas 2d context as first argument\n            and the chart's context and computed data as second.\n\n            Please make sure to use \\`context.save()\\` and\n            \\`context.restore()\\` if you make some global\n            modifications to the 2d context inside this function\n            to avoid side effects.\n\n            The context passed to layers has the following structure:\n\n            \\`\\`\\`\n            {\n                dataWithArc:  DatumWithArc[],\n                arcGenerator: Function\n                centerX:      number\n                centerY:      number\n                radius:       number\n                innerRadius:  number\n            }\n            \\`\\`\\`\n        `,\n        required: false,\n        type: 'Array<string | Function>',\n        defaultValue: defaultProps.layers,\n    },\n    isInteractive({\n        flavors: ['svg', 'canvas'],\n        defaultValue: defaultProps.isInteractive,\n    }),\n    {\n        key: 'activeInnerRadiusOffset',\n        flavors: ['svg', 'canvas'],\n        help: `Extends active slice inner radius.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.activeInnerRadiusOffset,\n        group: 'Interactivity',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 50,\n        },\n    },\n    {\n        key: 'activeOuterRadiusOffset',\n        flavors: ['svg', 'canvas'],\n        help: `Extends active slice outer radius.`,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.activeOuterRadiusOffset,\n        group: 'Interactivity',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 50,\n        },\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseEnter handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onMouseMove handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseLeave handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onClick handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        type: 'Component',\n        required: false,\n        help: 'Custom tooltip component',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will receive\n            the following props:\n\n            \\`\\`\\`\n            {\n                datum: PieComputedDatum\n            }\n            \\`\\`\\`\n\n            You can also customize the style of the tooltip using\n            the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        flavors: ['svg', 'canvas'],\n        help: 'Showcase custom tooltip.',\n        type: 'boolean',\n        required: false,\n        control: { type: 'switch' },\n        group: 'Interactivity',\n    },\n    ...motionProperties(['svg'], defaultProps, 'react-spring'),\n    {\n        key: 'transitionMode',\n        flavors: ['svg'],\n        help: 'Define how transitions behave.',\n        type: 'string',\n        required: false,\n        defaultValue: defaultProps.transitionMode,\n        group: 'Motion',\n        control: {\n            type: 'choices',\n            choices: arcTransitionModes.map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n    {\n        key: 'legends',\n        flavors: ['svg', 'canvas'],\n        type: 'Legend[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        required: false,\n        control: {\n            type: 'array',\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend: any) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: (data: any) => {\n                    console.log(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n]\n\nexport const groups = groupProperties(props)\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { BoxLegendSvgProps, LegendAnchor, LegendItemDirection } from './types'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { computeDimensions, computePositionFromAnchor, computeItemLayout } from './compute'\nimport { LegendCanvasProps } from './types'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n        if (reverse === true) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n","export default function (a, b) {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}","export default function (d) {\n  return d;\n}","import { BoxLegendSvg } from '@nivo/legends'\nimport { CompletePieSvgProps, ComputedDatum, DatumId } from './types'\n\ninterface PieLegendsProps<RawDatum> {\n    width: number\n    height: number\n    legends: CompletePieSvgProps<RawDatum>['legends']\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    toggleSerie: (id: DatumId) => void\n}\n\nconst PieLegends = <RawDatum,>({\n    width,\n    height,\n    legends,\n    data,\n    toggleSerie,\n}: PieLegendsProps<RawDatum>) => {\n    return (\n        <>\n            {legends.map((legend, i) => (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                    toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n                />\n            ))}\n        </>\n    )\n}\n\nexport default PieLegends\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const PieTooltip = <RawDatum,>({ datum }: { datum: ComputedDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={datum.id}\n        value={datum.formattedValue}\n        enableChip={true}\n        color={datum.color}\n    />\n)\n\nexport default PieTooltip\n","import constant from \"./constant.js\";\nimport descending from \"./descending.js\";\nimport identity from \"./identity.js\";\nimport { tau } from \"./math.js\";\nexport default function () {\n  var value = identity,\n      sortValues = descending,\n      sort = null,\n      startAngle = constant(0),\n      endAngle = constant(tau),\n      padAngle = constant(0);\n\n  function pie(data) {\n    var i,\n        n = data.length,\n        j,\n        k,\n        sum = 0,\n        index = new Array(n),\n        arcs = new Array(n),\n        a0 = +startAngle.apply(this, arguments),\n        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),\n        a1,\n        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\n        pa = p * (da < 0 ? -1 : 1),\n        v;\n\n    for (i = 0; i < n; ++i) {\n      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\n        sum += v;\n      }\n    } // Optionally sort the arcs by previously-computed values or by data.\n\n\n    if (sortValues != null) index.sort(function (i, j) {\n      return sortValues(arcs[i], arcs[j]);\n    });else if (sort != null) index.sort(function (i, j) {\n      return sort(data[i], data[j]);\n    }); // Compute the arcs! They are stored in the original data's order.\n\n    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\n      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\n        data: data[j],\n        index: i,\n        value: v,\n        startAngle: a0,\n        endAngle: a1,\n        padAngle: p\n      };\n    }\n\n    return arcs;\n  }\n\n  pie.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), pie) : value;\n  };\n\n  pie.sortValues = function (_) {\n    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\n  };\n\n  pie.sort = function (_) {\n    return arguments.length ? (sort = _, sortValues = null, pie) : sort;\n  };\n\n  pie.startAngle = function (_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : startAngle;\n  };\n\n  pie.endAngle = function (_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : endAngle;\n  };\n\n  pie.padAngle = function (_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : padAngle;\n  };\n\n  return pie;\n}","import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CompletePieSvgProps } from './types'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: CompletePieSvgProps<RawDatum>['borderWidth']\n    borderColor: CompletePieSvgProps<RawDatum>['borderColor']\n    isInteractive: CompletePieSvgProps<RawDatum>['isInteractive']\n    onClick?: CompletePieSvgProps<RawDatum>['onClick']\n    onMouseEnter?: CompletePieSvgProps<RawDatum>['onMouseEnter']\n    onMouseMove?: CompletePieSvgProps<RawDatum>['onMouseMove']\n    onMouseLeave?: CompletePieSvgProps<RawDatum>['onMouseLeave']\n    setActiveId: (id: null | string | number) => void\n    tooltip: CompletePieSvgProps<RawDatum>['tooltip']\n    transitionMode: CompletePieSvgProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    setActiveId,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            setActiveId(datum.id)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, setActiveId, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveId(null)\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveId, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { ArcLabelsLayer, ArcLinkLabelsLayer } from '@nivo/arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport PieLegends from './PieLegends'\nimport { useNormalizedData, usePieFromBox, usePieLayerContext } from './hooks'\nimport { ComputedDatum, PieLayer, PieSvgProps, PieLayerId } from './types'\nimport { defaultProps } from './props'\nimport { Arcs } from './Arcs'\n\nconst InnerPie = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    layers = defaultProps.layers as PieLayer<RawDatum>[],\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsComponent,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n    arcLinkLabelComponent,\n\n    // styling\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip = defaultProps.tooltip,\n\n    transitionMode = defaultProps.transitionMode,\n\n    legends = defaultProps.legends,\n    role = defaultProps.role,\n}: PieSvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const {\n        dataWithArc,\n        legendData,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n        setActiveId,\n        toggleSerie,\n    } = usePieFromBox<RawDatum>({\n        data: normalizedData,\n        width: innerWidth,\n        height: innerHeight,\n        fit,\n        innerRadius: innerRadiusRatio,\n        startAngle,\n        endAngle,\n        padAngle,\n        sortByValue,\n        cornerRadius,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n    })\n\n    const boundDefs = bindDefs(defs, dataWithArc, fill)\n\n    const layerById: Record<PieLayerId, ReactNode> = {\n        arcLinkLabels: null,\n        arcs: null,\n        arcLabels: null,\n        legends: null,\n    }\n\n    if (enableArcLinkLabels && layers.includes('arcLinkLabels')) {\n        layerById.arcLinkLabels = (\n            <ArcLinkLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLinkLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLinkLabel}\n                skipAngle={arcLinkLabelsSkipAngle}\n                offset={arcLinkLabelsOffset}\n                diagonalLength={arcLinkLabelsDiagonalLength}\n                straightLength={arcLinkLabelsStraightLength}\n                strokeWidth={arcLinkLabelsThickness}\n                textOffset={arcLinkLabelsTextOffset}\n                textColor={arcLinkLabelsTextColor}\n                linkColor={arcLinkLabelsColor}\n                component={arcLinkLabelComponent}\n            />\n        )\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                setActiveId={setActiveId}\n                tooltip={tooltip}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    if (legends.length > 0 && layers.includes('legends')) {\n        layerById.legends = (\n            <PieLegends<RawDatum>\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                data={legendData}\n                legends={legends}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    const layerContext = usePieLayerContext<RawDatum>({\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as PieLayerId] !== undefined) {\n                    return layerById[layer as PieLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Pie = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerPie<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Pie } from './Pie'\nimport { PieSvgProps } from './types'\n\nexport const ResponsivePie = <RawDatum,>(\n    props: Omit<PieSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Pie<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { createElement, useEffect, useMemo, useRef } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    Arc,\n    findArcUnderCursor,\n    useArcLabels,\n    drawCanvasArcLabels,\n    useArcLinkLabels,\n    drawCanvasArcLinkLabels,\n} from '@nivo/arcs'\nimport { useNormalizedData, usePieFromBox } from './hooks'\nimport { ComputedDatum, PieCanvasProps } from './types'\nimport { defaultProps } from './props'\n\nconst InnerPieCanvas = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = 1,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n\n    legends = defaultProps.legends,\n}: PieCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const { dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius, setActiveId } =\n        usePieFromBox<RawDatum>({\n            data: normalizedData,\n            width: innerWidth,\n            height: innerHeight,\n            fit,\n            innerRadius: innerRadiusRatio,\n            startAngle,\n            endAngle,\n            padAngle,\n            sortByValue,\n            cornerRadius,\n            activeInnerRadiusOffset,\n            activeOuterRadiusOffset,\n        })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const arcLabels = useArcLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        label: arcLabel,\n        skipAngle: arcLabelsSkipAngle,\n        offset: arcLabelsRadiusOffset,\n        textColor: arcLabelsTextColor,\n    })\n\n    const arcLinkLabels = useArcLinkLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        skipAngle: arcLinkLabelsSkipAngle,\n        offset: arcLinkLabelsOffset,\n        diagonalLength: arcLinkLabelsDiagonalLength,\n        straightLength: arcLinkLabelsStraightLength,\n        label: arcLinkLabel,\n        linkColor: arcLinkLabelsColor,\n        textOffset: arcLinkLabelsTextOffset,\n        textColor: arcLinkLabelsTextColor,\n    })\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n        arcGenerator.context(ctx)\n\n        ctx.save()\n        ctx.translate(centerX, centerY)\n\n        dataWithArc.forEach(arc => {\n            ctx.beginPath()\n            ctx.fillStyle = arc.color\n\n            ctx.strokeStyle = getBorderColor(arc)\n            ctx.lineWidth = borderWidth\n\n            arcGenerator(arc.arc)\n\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableArcLinkLabels === true) {\n            drawCanvasArcLinkLabels<ComputedDatum<RawDatum>>(\n                ctx,\n                arcLinkLabels,\n                theme,\n                arcLinkLabelsThickness\n            )\n        }\n\n        if (enableArcLabels === true) {\n            drawCanvasArcLabels<ComputedDatum<RawDatum>>(ctx, arcLabels, theme)\n        }\n\n        // legends assume a box rather than a center,\n        // that's why we restore previously saved position here.\n        ctx.restore()\n        legends.forEach(legend => {\n            renderLegendToCanvas(ctx, {\n                ...legend,\n                data: dataWithArc,\n                containerWidth: innerWidth,\n                containerHeight: innerHeight,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        centerX,\n        centerY,\n        arcGenerator,\n        dataWithArc,\n        getBorderColor,\n        enableArcLabels,\n        arcLabels,\n        enableArcLinkLabels,\n        arcLinkLabels,\n        arcLinkLabelsThickness,\n        legends,\n        theme,\n    ])\n\n    const arcs = useMemo(\n        () =>\n            dataWithArc.map(datum => ({\n                id: datum.id,\n                ...datum.arc,\n            })),\n        [dataWithArc]\n    )\n\n    const getArcFromMouse = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!canvasEl.current) return null\n\n        const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n        const hoveredArc = findArcUnderCursor<Arc & { id: string | number }>(\n            margin.left + centerX,\n            margin.top + centerY,\n            radius,\n            innerRadius,\n            arcs,\n            x,\n            y\n        )\n\n        if (!hoveredArc) return null\n\n        return dataWithArc.find(datum => datum.id === hoveredArc.id)\n    }\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        const datum = getArcFromMouse(event)\n        if (datum) {\n            onMouseMove?.(datum, event)\n            setActiveId(datum.id)\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n        } else {\n            setActiveId(null)\n            hideTooltip()\n        }\n    }\n\n    const handleMouseLeave = () => {\n        hideTooltip()\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!onClick) return\n\n        const arc = getArcFromMouse(event)\n        if (arc) {\n            onClick(arc, event)\n        }\n    }\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const PieCanvas = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerPieCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { PieCanvas } from './PieCanvas'\nimport { PieCanvasProps } from './types'\n\nexport const ResponsivePieCanvas = <RawDatum,>(\n    props: Omit<PieCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <PieCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["durationSecond","durationMinute","durationHour","durationDay","durationWeek","t0","Date","t1","newInterval","floori","offseti","count","field","interval","date","arguments","length","floor","ceil","round","d0","d1","offset","step","Math","range","start","stop","previous","push","filter","test","setTime","end","every","isFinite","d","TooltipWrapper","styled","TooltipKey","TooltipValue","CustomTooltip","datum","style","color","id","value","formattedValue","settingsMapper","valueFormat","mapFormat","arcLinkLabel","arcLabel","tooltip","values","theme","container","background","defs","patternDotsDef","size","padding","stagger","patternLinesDef","rotation","lineWidth","spacing","fill","match","exclude","allFlavors","props","key","group","flavors","help","description","type","required","defaultValue","defaultProps","control","chartDimensions","min","max","unit","themeProperty","ordinalColors","defsProperties","choices","map","choice","label","isInteractive","motionProperties","arcTransitionModes","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","defaults","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","data","console","log","JSON","stringify","groups","groupProperties","zeroPadding","top","right","bottom","left","computeDimensions","item","_padding","itemCount","Array","isArray","Error","horizontalPadding","verticalPadding","width","height","computePositionFromAnchor","containerWidth","containerHeight","x","y","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","symbolSpacing","symbolByShape","circle","opacity","borderWidth","borderColor","_jsx","r","cx","cy","strokeWidth","stroke","pointerEvents","diamond","transform","square","triangle","LegendSvgItem","textColor","symbolShape","symbolBorderWidth","symbolBorderColor","onMouseEnter","onMouseLeave","toggleSerie","effects","useState","setStyle","useTheme","handleMouseEnter","useCallback","event","on","reduce","acc","effect","handleMouseLeave","some","handler","SymbolShape","_jsxs","itemOpacity","itemBackground","cursor","e","React","hidden","legends","symbol","textAnchor","text","itemTextColor","dominantBaseline","userSelect","LegendSvg","xStep","yStep","i","BoxLegendSvg","textAlignMapping","middle","renderLegendToCanvas","ctx","save","translate","font","fontSize","fontFamily","forEach","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","useQuantizeColorScaleLegendData","scale","overriddenDomain","domain","reverse","v","separator","useMemo","items","domainValue","invertExtent","extent","LegendPropShape","PropTypes","isRequired","a","b","NaN","PieLegends","sortByValue","innerRadius","padAngle","cornerRadius","layers","startAngle","endAngle","fit","activeInnerRadiusOffset","activeOuterRadiusOffset","from","modifiers","enableArcLabels","arcLabelsSkipAngle","arcLabelsRadiusOffset","arcLabelsTextColor","enableArcLinkLabels","arcLinkLabelsSkipAngle","arcLinkLabelsOffset","arcLinkLabelsDiagonalLength","arcLinkLabelsStraightLength","arcLinkLabelsThickness","arcLinkLabelsTextOffset","arcLinkLabelsTextColor","arcLinkLabelsColor","colors","scheme","animate","motionConfig","transitionMode","BasicTooltip","enableChip","role","pixelRatio","window","devicePixelRatio","useNormalizedData","getId","usePropertyAccessor","getValue","formatValue","useValueFormatter","getColor","useOrdinalColorScale","datumId","datumValue","normalizedDatum","usePieArcs","outerRadius","activeId","hiddenIds","pie","innerPie","identity","sortValues","descending","sort","constant","j","k","a1","n","sum","arcs","a0","apply","this","da","p","abs","pa","_","d3Pie","degreesToRadians","hiddenData","includes","dataWithArc","arc","angle","thickness","angleDeg","radiansToDegrees","legendData","usePieFromBox","innerRadiusRatio","setActiveId","setHiddenIds","computedProps","boundingBox","radius","centerX","centerY","computeArcBoundingBox","points","box","ratio","adjustedBox","debug","pieArcs","state","indexOf","arcGenerator","useArcGenerator","Arcs","center","onMouseMove","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","createElement","handleMouseMove","ArcsLayer","InnerPie","partialMargin","margin","arcLabelsComponent","arcLinkLabelComponent","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","normalizedData","boundDefs","bindDefs","layerById","arcLinkLabels","arcLabels","ArcLinkLabelsLayer","skipAngle","diagonalLength","straightLength","textOffset","linkColor","component","ArcLabelsLayer","radiusOffset","layerContext","usePieLayerContext","SvgWrapper","layer","Fragment","Pie","renderWrapper","otherProps","Container","ResponsivePie","ResponsiveWrapper","InnerPieCanvas","canvasEl","useRef","getBorderColor","useInheritedColor","useArcLabels","useArcLinkLabels","useEffect","current","getContext","context","beginPath","strokeStyle","drawCanvasArcLinkLabels","drawCanvasArcLabels","getArcFromMouse","getRelativeCursor","hoveredArc","findArcUnderCursor","find","handleMouseHover","ref","PieCanvas","ResponsivePieCanvas"],"sourceRoot":""}