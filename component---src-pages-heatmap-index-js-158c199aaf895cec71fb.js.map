{"version":3,"file":"component---src-pages-heatmap-index-js-158c199aaf895cec71fb.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-time/src/day.js","webpack://nivo-website/../src/color.ts","webpack://nivo-website/../src/sets/countryCodes.ts","webpack://nivo-website/../src/sets/names.ts","webpack://nivo-website/../src/sets/programmingLanguages.ts","webpack://nivo-website/../src/bullet.ts","webpack://nivo-website/../src/chord.ts","webpack://nivo-website/../src/network.ts","webpack://nivo-website/../src/parallelCoordinates.ts","webpack://nivo-website/../src/sankey.ts","webpack://nivo-website/../src/swarmplot.ts","webpack://nivo-website/../src/index.ts","webpack://nivo-website/./src/pages/heatmap/index.js","webpack://nivo-website/../node_modules/lodash/_arrayShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/_baseShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseValues.js","webpack://nivo-website/../node_modules/lodash/_shuffleSelf.js","webpack://nivo-website/../node_modules/lodash/random.js","webpack://nivo-website/../node_modules/lodash/shuffle.js","webpack://nivo-website/../node_modules/lodash/values.js"],"sourcesContent":["import interval from \"./interval.js\";\nimport { durationDay, durationMinute } from \"./duration.js\";\nvar day = interval(function (date) {\n  date.setHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setDate(date.getDate() + step);\n}, function (start, end) {\n  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n}, function (date) {\n  return date.getDate() - 1;\n});\nexport default day;\nexport var days = day.range;","export const randColor = () => `hsl(${Math.round(Math.random() * 360)}, 70%, 50%)`\n","export const countryCodes = [\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AS',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CC',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CU',\n    'CV',\n    'CW',\n    'CX',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FM',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HM',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IR',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KP',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MH',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MP',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NF',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PW',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SY',\n    'SZ',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'UM',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VI',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n]\n","export const names = [\n    'John',\n    'Raoul',\n    'Jane',\n    'Marcel',\n    'Ibrahim',\n    'Junko',\n    'Lyu',\n    'André',\n    'Maki',\n    'Véronique',\n    'Thibeau',\n    'Josiane',\n    'Raphaël',\n    'Mathéo',\n    'Margot',\n    'Hugo',\n    'Christian',\n    'Louis',\n    'Ella',\n    'Alton',\n    'Jimmy',\n    'Guillaume',\n    'Sébastien',\n    'Alfred',\n    'Bon',\n    'Solange',\n    'Kendrick',\n    'Jared',\n    'Satoko',\n    'Tomoko',\n    'Line',\n    'Delphine',\n    'Leonard',\n    'Alphonse',\n    'Lisa',\n    'Bart',\n    'Benjamin',\n    'Homer',\n    'Jack',\n]\n","export const programmingLanguages = [\n    'php',\n    'make',\n    'javascript',\n    'go',\n    'erlang',\n    'elixir',\n    'lisp',\n    'haskell',\n    'python',\n    'ruby',\n    'hack',\n    'scala',\n    'java',\n    'rust',\n    'c',\n    'css',\n    'sass',\n    'stylus',\n]\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\ntype Options = Partial<{\n    float: boolean\n    markerCount: number\n    measureCount: number\n    rangeCount: number\n    subtitle: string\n    title: string\n}>\n\nexport const generateBulletData = (\n    id: string,\n    max: number,\n    {\n        title,\n        subtitle,\n        rangeCount = 5,\n        measureCount = 1,\n        markerCount = 1,\n        float = false,\n    }: Options = {}\n) => {\n    const ranges = range(rangeCount - 1).reduce(\n        acc => {\n            const remaining = max - acc[0]\n            return [random(remaining, float), ...acc]\n        },\n        [max]\n    )\n\n    const measures = range(measureCount).reduce<number[]>(acc => {\n        if (acc.length === 0) return [random(max, float)]\n        return [random(acc[0], float), ...acc]\n    }, [])\n\n    const markers = range(markerCount).map(() => max * 0.6 + random(max * 0.4))\n\n    return {\n        id,\n        title,\n        subtitle,\n        ranges,\n        measures,\n        markers,\n    }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport { names } from './sets'\n\nexport const generateChordData = ({\n    keys = names,\n    size = 7,\n    minValue = 0,\n    maxValue = 2000,\n} = {}) => {\n    const maxSize = Math.min(keys.length, size)\n    const selectedKeys = keys.slice(0, maxSize)\n\n    const matrix = range(maxSize).map(() =>\n        range(maxSize).map(() => {\n            if (Math.random() < 0.66) return random(minValue, maxValue / 4)\n            return random(minValue, maxValue)\n        })\n    )\n\n    return { matrix, keys: selectedKeys }\n}\n","import random from 'lodash/random'\n\ntype Link = {\n    distance: number\n    source: string\n    target: string\n}\n\ntype ExtraNode = {\n    color: string\n    depth: number\n    id: string\n    radius: number\n}\n\nexport const generateNetworkData = ({\n    rootNodeRadius = 12,\n    minMidNodes = 6,\n    maxMidNodes = 16,\n    midNodeRadius = 8,\n    minLeaves = 4,\n    maxLeaves = 16,\n    leafRadius = 4,\n} = {}) => {\n    const rootNode = {\n        id: '0',\n        radius: rootNodeRadius,\n        depth: 0,\n        color: 'rgb(244, 117, 96)',\n    }\n    let nodes = Array.from({ length: random(minMidNodes, maxMidNodes) }, (_, k) => ({\n        id: `${k + 1}`,\n        radius: midNodeRadius,\n        depth: 1,\n        color: 'rgb(97, 205, 187)',\n    }))\n\n    const links: Link[] = []\n    const extraNodes: ExtraNode[] = []\n    nodes.forEach(source => {\n        links.push({\n            source: '0',\n            target: source.id,\n            distance: 50,\n        })\n        nodes.forEach(target => {\n            if (Math.random() < 0.04) {\n                links.push({\n                    source: source.id,\n                    target: target.id,\n                    distance: 70,\n                })\n            }\n        })\n        Array.from({ length: random(minLeaves, maxLeaves) }, (_, k) => {\n            extraNodes.push({\n                id: `${source.id}.${k}`,\n                radius: leafRadius,\n                depth: 2,\n                color: 'rgb(232, 193, 160)',\n            })\n            links.push({\n                source: source.id,\n                target: `${source.id}.${k}`,\n                distance: 30,\n            })\n\n            return null\n        })\n    })\n\n    nodes.push(rootNode)\n    nodes = nodes.concat(extraNodes)\n\n    return { nodes, links }\n}\n","import random from 'lodash/random'\nimport range from 'lodash/range'\nimport shuffle from 'lodash/shuffle'\n\ntype Options = Partial<{\n    size: number\n    keys: Array<{\n        key: string\n        random?: [number, number]\n        shuffle?: string[]\n    }>\n}>\n\nexport const generateParallelCoordinatesData = ({\n    size = 26,\n    keys = [\n        { key: 'temp', random: [-10, 40] },\n        { key: 'cost', random: [200, 400000] },\n        { key: 'color', shuffle: ['red', 'yellow', 'green'] },\n        { key: 'target', shuffle: ['A', 'B', 'C', 'D', 'E'] },\n        { key: 'volume', random: [0.2, 7.6] },\n    ],\n}: Options = {}) => {\n    const datumGenerator = () =>\n        keys.reduce((acc, key) => {\n            let value\n            if (key.random !== undefined) {\n                value = random(...key.random)\n            } else if (key.shuffle !== undefined) {\n                value = shuffle(key.shuffle)[0]\n            }\n\n            return { ...acc, [key.key]: value }\n        }, {})\n\n    return range(size).map(datumGenerator)\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { randColor } from './color'\nimport { names } from './sets'\n\ntype Link = {\n    source: string\n    target: string\n    value: number\n}\n\nconst availableNodes = names.map(name => ({ id: name }))\n\nconst getNodeTargets = (id: string, links: Link[], currentPath?: string[]): string[] => {\n    const targets = links\n        .filter(({ source }) => source === id)\n        .map(({ target }) => {\n            if (target === id) {\n                throw new Error(\n                    `[sankey] a node cannot be linked on itself:\\n  link: ${id} —> ${id}`\n                )\n            }\n            if (currentPath?.includes(target)) {\n                throw new Error(\n                    `[sankey] found cyclic dependency:\\n  link: ${currentPath.join(\n                        ' —> '\n                    )} —> ${target}`\n                )\n            }\n            return target\n        })\n\n    return targets.reduce(\n        (acc, targetId) =>\n            acc.concat(\n                getNodeTargets(\n                    targetId,\n                    links,\n                    currentPath ? [...currentPath, targetId] : [id, targetId]\n                )\n            ),\n        targets\n    )\n}\n\nconst getNodesTargets = (links: Link[]) =>\n    links.reduce<Record<string, string[]>>((targetsById, link) => {\n        if (!targetsById[link.source]) {\n            targetsById[link.source] = getNodeTargets(link.source, links)\n        }\n\n        return targetsById\n    }, {})\n\nexport const generateSankeyData = ({\n    nodeCount,\n    maxIterations = 3,\n}: {\n    nodeCount?: number\n    maxIterations?: number\n} = {}) => {\n    const nodes = availableNodes.slice(0, nodeCount).map(node =>\n        Object.assign({}, node, {\n            nodeColor: randColor(),\n        })\n    )\n\n    const links: Link[] = []\n    shuffle(nodes).forEach(({ id }) => {\n        range(random(1, maxIterations)).forEach(() => {\n            const targetsById = getNodesTargets(links)\n            const randId = shuffle(nodes.filter(n => n.id !== id).map(n => n.id))[0]\n            if (\n                (!targetsById[randId] || !targetsById[randId].includes(id)) &&\n                (!targetsById[id] || !targetsById[id].includes(randId))\n            ) {\n                links.push({\n                    source: id,\n                    target: randId,\n                    value: random(5, 200),\n                })\n            }\n        })\n    })\n\n    return { nodes, links }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\n\ntype SwarmPlotDatum = {\n    id: string\n    categories?: number[]\n    group: string\n    price: number\n    volume: number\n}\n\nconst randomPrice = () => random(0, 500)\nconst randomVolume = () => random(4, 20)\nconst randomCategory = () => random(3, 17)\n\nexport const generateSwarmPlotData = (\n    groups: string[],\n    { min = 60, max = 100, categoryCount = 0 }\n) => ({\n    groups,\n    data: groups.reduce<SwarmPlotDatum[]>(\n        (acc, group, groupIndex) => [\n            ...acc,\n            ...range(random(min, max))\n                .map(() => randomPrice())\n                .map((price, index) => {\n                    const datum: SwarmPlotDatum = {\n                        id: `${groupIndex}.${index}`,\n                        group,\n                        price,\n                        volume: randomVolume(),\n                    }\n\n                    if (categoryCount > 0) {\n                        datum.categories = range(categoryCount).map(randomCategory)\n                    }\n\n                    return datum\n                }),\n        ],\n        []\n    ),\n})\n\nexport const randomizeSwarmPlotData = (previousData: ReturnType<typeof generateSwarmPlotData>) => ({\n    groups: previousData.groups,\n    data: previousData.data.map(d => {\n        const datum = {\n            ...d,\n            group: shuffle(previousData.groups)[0],\n            price: randomPrice(),\n            volume: randomVolume(),\n        }\n\n        if (d.categories !== undefined) {\n            datum.categories = range(3).map(randomCategory)\n        }\n\n        return datum\n    }),\n})\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { timeDays } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport * as color from './color'\nimport * as sets from './sets'\n\nexport { sets }\nexport const randColor = color.randColor\n\nexport const generateProgrammingLanguageStats = (shouldShuffle = true, limit = -1) => {\n    let langs = sets.programmingLanguages\n    if (shouldShuffle) {\n        langs = shuffle(langs)\n    }\n    if (limit < 1) {\n        limit = 1 + Math.round(Math.random() * (sets.programmingLanguages.length - 1))\n    }\n\n    return langs.slice(0, limit).map(language => ({\n        label: language,\n        value: Math.round(Math.random() * 600),\n        color: randColor(),\n    }))\n}\n\nexport const uniqRand = <T>(generator: (...args: unknown[]) => T) => {\n    const used: T[] = []\n\n    return (...args: unknown[]) => {\n        let value\n        do {\n            value = generator(...args)\n        } while (used.includes(value))\n\n        used.push(value)\n\n        return value\n    }\n}\n\nexport const randCountryCode = () => shuffle(sets.countryCodes)[0]\n\ntype DrinkDatum = {\n    id: string\n    color: string\n    data: Array<{\n        color: string\n        x: string\n        y: number\n    }>\n}\n\nexport const generateDrinkStats = (xSize = 16) => {\n    const rand = () => random(0, 60)\n    const types = ['whisky', 'rhum', 'gin', 'vodka', 'cognac']\n    const country = uniqRand(randCountryCode)\n\n    const data: DrinkDatum[] = types.map(id => ({\n        id,\n        color: randColor(),\n        data: [],\n    }))\n\n    range(xSize).forEach(() => {\n        const x = country()\n        types.forEach(id => {\n            data.find(d => d.id === id)?.data.push({\n                color: randColor(),\n                x,\n                y: rand(),\n            })\n        })\n    })\n\n    return data\n}\n\nexport const generateSerie = (xSize = 20) => {\n    const max = 100 + Math.random() * (Math.random() * 600)\n\n    return range(xSize).map(() => Math.round(Math.random() * max))\n}\n\nexport const generateSeries = (ids: string[], xKeys: string[]) =>\n    ids.map(id => ({\n        id,\n        color: randColor(),\n        data: xKeys.map(x => ({ x, y: Math.round(Math.random() * 300) })),\n    }))\n\nexport const generateStackData = (size = 3) => {\n    const length = 16\n    return range(size).map(() => generateSerie(length).map((v, i) => ({ x: i, y: v })))\n}\n\nexport const generateCountriesPopulation = (size: number) => {\n    const countryCode = uniqRand(randCountryCode)\n\n    return range(size).map(() => ({\n        country: countryCode(),\n        population: 200 + Math.round(Math.random() * Math.random() * 1000000),\n    }))\n}\n\nexport const generateOrderedDayCounts = (from: Date, to: Date) => {\n    const days = timeDays(from, to)\n    const dayFormat = timeFormat('%Y-%m-%d')\n\n    return days.map(day => {\n        return {\n            value: Math.round(Math.random() * 400),\n            day: dayFormat(day),\n        }\n    })\n}\n\nexport const generateDayCounts = (from: Date, to: Date, maxSize = 0.9) => {\n    const days = generateOrderedDayCounts(from, to)\n\n    const size =\n        Math.round(days.length * (maxSize * 0.4)) +\n        Math.round(Math.random() * (days.length * (maxSize * 0.6)))\n\n    return shuffle(days).slice(0, size)\n}\n\nexport const generateCountriesData = (\n    keys: string[],\n    { size = 12, min = 0, max = 200, withColors = true } = {}\n) =>\n    sets.countryCodes.slice(0, size).map(country => {\n        const d: Record<string, unknown> = {\n            country,\n        }\n        keys.forEach(key => {\n            d[key] = random(min, max)\n            if (withColors === true) {\n                d[`${key}Color`] = randColor()\n            }\n        })\n\n        return d\n    })\n\nconst libTreeItems = [\n    [\n        'viz',\n        [\n            ['stack', [['cchart'], ['xAxis'], ['yAxis'], ['layers']]],\n            [\n                'ppie',\n                [\n                    ['chart', [['pie', [['outline'], ['slices'], ['bbox']]], ['donut'], ['gauge']]],\n                    ['legends'],\n                ],\n            ],\n        ],\n    ],\n    ['colors', [['rgb'], ['hsl']]],\n    [\n        'utils',\n        [['randomize'], ['resetClock'], ['noop'], ['tick'], ['forceGC'], ['stackTrace'], ['dbg']],\n    ],\n    ['generators', [['address'], ['city'], ['animal'], ['movie'], ['user']]],\n    [\n        'set',\n        [\n            ['clone'],\n            ['intersect'],\n            ['merge'],\n            ['reverse'],\n            ['toArray'],\n            ['toObject'],\n            ['fromCSV'],\n            ['slice'],\n            ['append'],\n            ['prepend'],\n            ['shuffle'],\n            ['pick'],\n            ['plouc'],\n        ],\n    ],\n    [\n        'text',\n        [\n            ['trim'],\n            ['slugify'],\n            ['snakeCase'],\n            ['camelCase'],\n            ['repeat'],\n            ['padLeft'],\n            ['padRight'],\n            ['sanitize'],\n            ['ploucify'],\n        ],\n    ],\n    [\n        'misc',\n        [\n            ['greetings', [['hey'], ['HOWDY'], ['aloha'], ['AHOY']]],\n            ['other'],\n            [\n                'path',\n                [\n                    ['pathA'],\n                    ['pathB', [['pathB1'], ['pathB2'], ['pathB3'], ['pathB4']]],\n                    [\n                        'pathC',\n                        [\n                            ['pathC1'],\n                            ['pathC2'],\n                            ['pathC3'],\n                            ['pathC4'],\n                            ['pathC5'],\n                            ['pathC6'],\n                            ['pathC7'],\n                            ['pathC8'],\n                            ['pathC9'],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n]\n\nexport const generateLibTree = (name = 'nivo', limit?: number | null, children = libTreeItems) => {\n    limit = limit || children.length\n    if (limit > children.length) {\n        limit = children.length\n    }\n\n    const tree: Record<string, unknown> = {\n        name,\n        color: randColor(),\n    }\n    if (children?.length > 0) {\n        tree.children = range(limit).map((_, i) => {\n            const leaf = children[i]\n\n            // full path `${name}.${leaf[0]}`\n            return generateLibTree(leaf[0] as string, null, (leaf[1] ?? []) as any)\n        })\n    } else {\n        tree.loc = Math.round(Math.random() * 200000)\n    }\n\n    return tree\n}\n\nconst wines = ['chardonay', 'carmenere', 'syrah']\nconst wineTastes = ['fruity', 'bitter', 'heavy', 'strong', 'sunny']\n\nexport const generateWinesTastes = ({ randMin = 20, randMax = 120 } = {}) => {\n    const data = wineTastes.map(taste => {\n        const d: Record<string, unknown> = { taste }\n        wines.forEach(wine => {\n            d[wine] = random(randMin, randMax)\n        })\n\n        return d\n    })\n\n    return { data, keys: wines }\n}\n\nexport * from './bullet'\nexport * from './chord'\nexport * from './network'\nexport * from './parallelCoordinates'\nexport * from './sankey'\nexport * from './swarmplot'\n","import React from 'react'\nimport { ResponsiveHeatMap, HeatMapDefaultProps } from '@nivo/heatmap'\nimport { patternLinesDef } from '@nivo/core'\nimport isFunction from 'lodash/isFunction'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/heatmap/meta.yml'\nimport mapper from '../../data/components/heatmap/mapper'\nimport { groups } from '../../data/components/heatmap/props'\nimport { generateLightDataSet } from '../../data/components/heatmap/generator'\n\nconst initialProperties = {\n    indexBy: 'country',\n\n    margin: {\n        top: 100,\n        right: 60,\n        bottom: 60,\n        left: 60,\n    },\n\n    minValue: 'auto',\n    maxValue: 'auto',\n    forceSquare: true,\n    sizeVariation: 0,\n    padding: 0,\n    colors: 'nivo',\n\n    axisTop: {\n        enable: true,\n        orient: 'top',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: -90,\n        legend: '',\n        legendOffset: 36,\n    },\n    axisRight: {\n        enable: false,\n        orient: 'right',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'country',\n        legendPosition: 'middle',\n        legendOffset: 40,\n    },\n    axisBottom: {\n        enable: false,\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: -90,\n        legend: '',\n        legendPosition: 'middle',\n        legendOffset: 36,\n    },\n    axisLeft: {\n        enable: true,\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'country',\n        legendPosition: 'middle',\n        legendOffset: -40,\n    },\n\n    enableGridX: false,\n    enableGridY: false,\n\n    cellShape: 'rect',\n    cellOpacity: 1,\n    cellBorderWidth: 0,\n    cellBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n\n    enableLabels: true,\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 1.8]],\n    },\n\n    defs: [\n        patternLinesDef('lines', {\n            background: 'inherit',\n            color: 'rgba(0, 0, 0, 0.1)',\n            rotation: -45,\n            lineWidth: 4,\n            spacing: 7,\n        }),\n    ],\n    fill: [{ match: d => false && d.value < 30, id: 'lines' }],\n\n    animate: true,\n    motionConfig: 'wobbly',\n    motionStiffness: 80,\n    motionDamping: 9,\n\n    isInteractive: true,\n    hoverTarget: 'cell',\n    cellHoverOpacity: 1,\n    cellHoverOthersOpacity: 0.25,\n}\n\nconst HeatMap = () => {\n    return (\n        <ComponentTemplate\n            name=\"HeatMap\"\n            meta={meta.HeatMap}\n            icon=\"heatmap\"\n            flavors={meta.flavors}\n            currentFlavor=\"svg\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={HeatMapDefaultProps}\n            propertiesMapper={mapper}\n            codePropertiesMapper={(properties, data) => ({\n                keys: data.keys,\n                ...properties,\n                cellShape: isFunction(properties.cellShape)\n                    ? 'Custom(props) => (…)'\n                    : properties.cellShape,\n            })}\n            generateData={generateLightDataSet}\n            getTabData={data => data.data}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveHeatMap\n                        data={data.data}\n                        keys={data.keys}\n                        {...properties}\n                        theme={theme}\n                        onClick={cell => {\n                            logAction({\n                                type: 'click',\n                                label: `[cell] ${cell.yKey}.${cell.xKey}: ${cell.value}`,\n                                color: cell.color,\n                                data: cell,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default HeatMap\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n"],"names":["day","date","setHours","step","setDate","getDate","start","end","getTimezoneOffset","days","range","randColor","Math","round","random","countryCodes","names","programmingLanguages","generateBulletData","id","max","title","subtitle","rangeCount","measureCount","markerCount","float","ranges","reduce","remaining","acc","measures","length","markers","map","generateChordData","keys","size","minValue","maxValue","maxSize","min","selectedKeys","slice","matrix","generateNetworkData","rootNodeRadius","minMidNodes","maxMidNodes","midNodeRadius","minLeaves","maxLeaves","leafRadius","rootNode","radius","depth","color","nodes","Array","from","_","k","links","extraNodes","forEach","push","source","target","distance","concat","generateParallelCoordinatesData","key","shuffle","value","availableNodes","n","name","getNodeTargets","currentPath","targets","filter","Error","includes","join","targetId","getNodesTargets","targetsById","link","generateSankeyData","nodeCount","maxIterations","Object","assign","node","nodeColor","randId","randomPrice","randomVolume","randomCategory","generateSwarmPlotData","groups","categoryCount","data","group","groupIndex","price","index","datum","volume","categories","randomizeSwarmPlotData","previousData","d","generateProgrammingLanguageStats","shouldShuffle","limit","langs","sets","label","language","uniqRand","generator","used","randCountryCode","generateDrinkStats","xSize","types","country","x","find","y","generateSeries","ids","xKeys","generateDayCounts","to","timeDays","dayFormat","timeFormat","generateOrderedDayCounts","generateCountriesData","withColors","libTreeItems","generateLibTree","children","tree","i","leaf","loc","wines","wineTastes","generateWinesTastes","randMin","randMax","taste","wine","initialProperties","indexBy","margin","top","right","bottom","left","forceSquare","sizeVariation","padding","colors","axisTop","enable","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","axisRight","legendPosition","axisBottom","axisLeft","enableGridX","enableGridY","cellShape","cellOpacity","cellBorderWidth","cellBorderColor","modifiers","enableLabels","labelTextColor","defs","patternLinesDef","background","rotation","lineWidth","spacing","fill","match","animate","motionConfig","motionStiffness","motionDamping","isInteractive","hoverTarget","cellHoverOpacity","cellHoverOthersOpacity","meta","icon","flavors","currentFlavor","properties","defaultProperties","HeatMapDefaultProps","propertiesMapper","mapper","codePropertiesMapper","isFunction","generateData","generateLightDataSet","getTabData","theme","logAction","onClick","cell","type","yKey","xKey","copyArray","shuffleSelf","module","exports","array","nativeFloor","floor","nativeRandom","lower","upper","values","collection","arrayMap","object","props","baseRandom","lastIndex","undefined","rand","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","temp","arrayShuffle","baseShuffle","isArray","baseValues"],"sourceRoot":""}