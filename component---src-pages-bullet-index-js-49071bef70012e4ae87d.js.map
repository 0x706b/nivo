{"version":3,"sources":["webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack:///../src/compute.ts","webpack:///../src/components/AxisTick.tsx","webpack:///../src/components/Axis.tsx","webpack:///../src/props.ts","webpack:///../src/components/Axes.tsx","webpack:///../src/components/GridLine.tsx","webpack:///../src/components/GridLines.tsx","webpack:///../src/components/Grid.tsx","webpack:///../src/canvas.ts","webpack:///./src/data/components/bullet/props.js","webpack:///./src/pages/bullet/index.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","centerScale","bandwidth","scale","offset","Math","timeByType","millisecond","second","minute","hour","day","week","sunday","monday","tuesday","wednesday","thursday","friday","saturday","month","year","timeTypes","timeIntervalRegexp","RegExp","isInteger","isFinite","getScaleTicks","Array","spec","matches","timeType","interval","Number","computeCartesianTicks","axis","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","textProps","textPropsByEngine","position","line","lineX","lineY","text","textX","textY","isRTL","document","textAlign","textBaseline","translate","d","x","y","ticks","getFormatter","formatter","timeFormat","Date","d3Format","computeGridLines","width","height","_values","lineValues","isArray","lineCount","x1","x2","y1","y2","AxisTick","_value","format","onClick","textAnchor","animatedProps","theme","useTheme","props","useMemo","style","opacity","cursor","event","transform","dominantBaseline","Axis","renderTick","legend","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","useSpring","lineX2","lineY2","config","immediate","transition","useTransition","tick","initial","textTransform","from","enter","update","leave","aria-hidden","tickIndex","rotate","transitionProps","axisPropTypes","PropTypes","bool","axisPropType","positions","Axes","xScale","yScale","axes","top","right","bottom","left","isXAxis","GridLine","GridLines","lines","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","_format","ctx","degreesToRadians","String","renderAxesToCanvas","renderGridLinesToCanvas","group","help","description","type","required","enableControlForFlavors","controlType","controlOptions","unit","min","max","step","defaultValue","defaultProps","layout","choices","label","reverse","spacing","measureSize","markerSize","themeProperty","flavors","rangeColors","includeSequential","measureColors","markerColors","axisPosition","titlePosition","titleAlign","titleOffset","titleRotation","start","motionProperties","groups","groupProperties","generateData","generateBulletData","shuffle","float","measureCount","rangeCount","markerCount","initialProperties","margin","titleOffsetX","titleOffsetY","motionConfig","Bullet","ComponentTemplate","name","meta","icon","currentFlavor","properties","defaultProperties","data","logAction","onRangeClick","range","id","v0","v1","color","onMeasureClick","measure","onMarkerClick","marker"],"mappings":"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","file":"component---src-pages-bullet-index-js-49071bef70012e4ae87d.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import {\n    CountableTimeInterval,\n    timeMillisecond,\n    utcMillisecond,\n    timeSecond,\n    utcSecond,\n    timeMinute,\n    utcMinute,\n    timeHour,\n    utcHour,\n    timeDay,\n    utcDay,\n    timeWeek,\n    utcWeek,\n    timeSunday,\n    utcSunday,\n    timeMonday,\n    utcMonday,\n    timeTuesday,\n    utcTuesday,\n    timeWednesday,\n    utcWednesday,\n    timeThursday,\n    utcThursday,\n    timeFriday,\n    utcFriday,\n    timeSaturday,\n    utcSaturday,\n    timeMonth,\n    utcMonth,\n    timeYear,\n    utcYear,\n} from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport {\n    AxisValue,\n    Point,\n    TicksSpec,\n    AnyScale,\n    ScaleWithBandwidth,\n    ValueFormatter,\n    Line,\n} from './types'\n\nexport const centerScale = <Value>(scale: ScaleWithBandwidth) => {\n    const bandwidth = scale.bandwidth()\n\n    if (bandwidth === 0) return scale\n\n    let offset = bandwidth / 2\n    if (scale.round()) {\n        offset = Math.round(offset)\n    }\n\n    return <T extends Value>(d: T) => (scale(d) ?? 0) + offset\n}\n\nconst timeByType: Record<string, [CountableTimeInterval, CountableTimeInterval]> = {\n    millisecond: [timeMillisecond, utcMillisecond],\n    second: [timeSecond, utcSecond],\n    minute: [timeMinute, utcMinute],\n    hour: [timeHour, utcHour],\n    day: [timeDay, utcDay],\n    week: [timeWeek, utcWeek],\n    sunday: [timeSunday, utcSunday],\n    monday: [timeMonday, utcMonday],\n    tuesday: [timeTuesday, utcTuesday],\n    wednesday: [timeWednesday, utcWednesday],\n    thursday: [timeThursday, utcThursday],\n    friday: [timeFriday, utcFriday],\n    saturday: [timeSaturday, utcSaturday],\n    month: [timeMonth, utcMonth],\n    year: [timeYear, utcYear],\n}\n\nconst timeTypes = Object.keys(timeByType)\nconst timeIntervalRegexp = new RegExp(`^every\\\\s*(\\\\d+)?\\\\s*(${timeTypes.join('|')})s?$`, 'i')\n\nconst isInteger = (value: unknown): value is number =>\n    typeof value === 'number' && isFinite(value) && Math.floor(value) === value\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const getScaleTicks = <Value extends AxisValue>(\n    scale: AnyScale,\n    spec?: TicksSpec<Value>\n) => {\n    // specific values\n    if (Array.isArray(spec)) {\n        return spec\n    }\n\n    // continuous scales\n    if ('ticks' in scale) {\n        // default behaviour\n        if (spec === undefined) {\n            return scale.ticks()\n        }\n\n        // specific tick count\n        if (isInteger(spec)) {\n            return scale.ticks(spec)\n        }\n\n        if (typeof spec === 'string' && 'useUTC' in scale) {\n            // time interval\n            const matches = spec.match(timeIntervalRegexp)\n            if (matches) {\n                // UTC is used as it's more predictible\n                // however local time could be used too\n                // let's see how it fits users' requirements\n                const timeType = timeByType[matches[2]][scale.useUTC ? 1 : 0]\n\n                if (matches[1] === undefined) {\n                    return scale.ticks(timeType)\n                }\n\n                const interval = timeType.every(Number(matches[1]))\n\n                if (interval) {\n                    return scale.ticks(interval)\n                }\n            }\n\n            throw new Error(`Invalid tickValues: ${spec}`)\n        }\n    }\n\n    // non linear scale default\n    return scale.domain()\n}\n\nexport const computeCartesianTicks = <Value extends AxisValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends AxisValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return (d => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return (d3Format(format) as unknown) as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends AxisValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const lineCount = isInteger(_values) ? _values : undefined\n\n    const values = lineValues || getScaleTicks(scale, lineCount)\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import React, { useMemo } from 'react'\nimport { animated } from 'react-spring'\nimport { useTheme } from '@nivo/core'\nimport { AxisTickProps, AxisValue } from '../types'\n\nexport const AxisTick = <Value extends AxisValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { useSpring, useTransition, animated } from 'react-spring'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AnyScale, AxisProps, AxisValue } from '../types'\n\nexport const Axis = <Value extends AxisValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import React from 'react'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AnyScale, AxisProps, AxisValue } from '../types'\n\nexport const Axes = <X extends AxisValue, Y extends AxisValue>({\n    xScale,\n    yScale,\n    width,\n    height,\n    top,\n    right,\n    bottom,\n    left,\n}: {\n    xScale: AnyScale\n    yScale: AnyScale\n    width: number\n    height: number\n    top?: AxisProps<X>\n    right?: AxisProps<Y>\n    bottom?: AxisProps<X>\n    left?: AxisProps<Y>\n}) => {\n    const axes = { top, right, bottom, left }\n\n    return (\n        <>\n            {positions.map(position => {\n                const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                    ? AxisProps<X> | undefined\n                    : AxisProps<Y> | undefined\n\n                if (!axis) return null\n\n                const isXAxis = position === 'top' || position === 'bottom'\n                const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n\n                return (\n                    <Axis\n                        key={position}\n                        {...axis}\n                        axis={isXAxis ? 'x' : 'y'}\n                        x={position === 'right' ? width : 0}\n                        y={position === 'bottom' ? height : 0}\n                        scale={isXAxis ? xScale : yScale}\n                        length={isXAxis ? width : height}\n                        ticksPosition={ticksPosition}\n                    />\n                )\n            })}\n        </>\n    )\n}\n","import React from 'react'\nimport { SpringValues, animated } from 'react-spring'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = ({\n    animatedProps,\n}: {\n    animatedProps: SpringValues<{\n        opacity: number\n        x1: number\n        x2: number\n        y1: number\n        y2: number\n    }>\n}) => {\n    const theme = useTheme()\n\n    return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n}\n","import React from 'react'\nimport { useTransition } from 'react-spring'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = ({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\nimport { AnyScale, AxisValue } from '../types'\n\nexport const Grid = <X extends AxisValue, Y extends AxisValue>({\n    width,\n    height,\n    xScale,\n    yScale,\n    xValues,\n    yValues,\n}: {\n    width: number\n    height: number\n    xScale?: AnyScale\n    xValues?: number | X[]\n    yScale?: AnyScale\n    yValues?: number | Y[]\n}) => {\n    const xLines = useMemo(() => {\n        if (!xScale) return false\n\n        return computeGridLines({\n            width,\n            height,\n            scale: xScale,\n            axis: 'x',\n            values: xValues,\n        })\n    }, [xScale, xValues, width, height])\n\n    const yLines = useMemo(() => {\n        if (!yScale) return false\n\n        return computeGridLines({\n            width,\n            height,\n            scale: yScale,\n            axis: 'y',\n            values: yValues,\n        })\n    }, [height, width, yScale, yValues])\n\n    return (\n        <>\n            {xLines && <GridLines lines={xLines} />}\n            {yLines && <GridLines lines={yLines} />}\n        </>\n    )\n}\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport {\n    AxisValue,\n    TicksSpec,\n    AnyScale,\n    AxisLegendPosition,\n    CanvasAxisProp,\n    ValueFormatter,\n} from './types'\n\nexport const renderAxisToCanvas = <Value extends AxisValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontSize}px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends AxisValue, Y extends AxisValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProp<X>\n        right?: CanvasAxisProp<Y>\n        bottom?: CanvasAxisProp<X>\n        left?: CanvasAxisProp<Y>\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProp<X> | undefined\n            : CanvasAxisProp<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends AxisValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { defaultProps } from '@nivo/bullet'\nimport { themeProperty, motionProperties, groupProperties } from '../../../lib/componentProperties'\n\nconst props = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                id:        {string|number}\n                title?:    {ReactNode}\n                subtitle?: {ReactNode}\n                data: Array<{\n                    ranges:   number[]\n                    measures: number[]\n                    markers?: number[]\n                }>\n            }>\n            \\`\\`\\`\n\n            If \\`title\\` is \\`undefined\\`, \\`id\\` will be used for\n            \\`title\\`.\n        `,\n        type: 'object[]',\n        required: true,\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        group: 'Base',\n        help: 'Chart width.',\n        description: 'not required if using `ResponsiveBullet`.',\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        group: 'Base',\n        help: 'Chart height.',\n        description: 'not required if using `ResponsiveBullet`.',\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'layout',\n        group: 'Base',\n        help: `How to display items.`,\n        type: 'string',\n        required: false,\n        defaultValue: defaultProps.layout,\n        controlType: 'radio',\n        controlOptions: {\n            choices: [\n                { label: 'horizontal', value: 'horizontal' },\n                { label: 'vertical', value: 'vertical' },\n            ],\n        },\n    },\n    {\n        key: 'reverse',\n        group: 'Base',\n        help: 'Reverse chart.',\n        description: `\n            Reverse chart, starts on top instead of bottom\n            for vertical layout and right instead of left\n            for horizontal one.\n        `,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.reverse,\n        controlType: 'switch',\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    {\n        key: 'spacing',\n        help: 'define spacing between items.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.spacing,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 100,\n        },\n    },\n    {\n        key: 'measureSize',\n        help: 'define size of measure related to item size, expressed as a ratio.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.measureSize,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 1,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'markerSize',\n        help: 'define size of markers related to item size, expressed as a ratio.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.markerSize,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 2,\n            step: 0.05,\n        },\n    },\n    themeProperty,\n    {\n        key: 'rangeComponent',\n        flavors: ['svg'],\n        group: 'Style',\n        help: 'Custom component for ranges.',\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'rangeColors',\n        help: 'Ranges colors',\n        description: `\n            Defines colors for ranges,\n            you can either use categorical colors:\n            \\`greens\\` or sequential form: \\`seq:green\\`.\n        `,\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: defaultProps.rangeColors,\n        controlType: 'colors',\n        group: 'Style',\n        controlOptions: {\n            includeSequential: true,\n        },\n    },\n    {\n        key: 'measureComponent',\n        flavors: ['svg'],\n        group: 'Style',\n        help: 'Custom component for measures.',\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'measureColors',\n        help: 'Measures colors.',\n        description: `\n            Defines colors for measures,\n            you can either use categorical colors:\n            \\`greens\\` or sequential form: \\`seq:green\\`.\n        `,\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: defaultProps.measureColors,\n        controlType: 'colors',\n        group: 'Style',\n        controlOptions: {\n            includeSequential: true,\n        },\n    },\n    {\n        key: 'markerComponent',\n        flavors: ['svg'],\n        group: 'Style',\n        help: 'Custom component for markers.',\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'markerColors',\n        help: 'Markers colors.',\n        description: `\n            Defines colors for markers,\n            you can either use categorical colors:\n            \\`greens\\` or sequential form: \\`seq:green\\`.\n        `,\n        type: 'string | Function| string[]',\n        required: false,\n        defaultValue: defaultProps.markerColors,\n        controlType: 'colors',\n        group: 'Style',\n        controlOptions: {\n            includeSequential: true,\n        },\n    },\n    {\n        key: 'axisPosition',\n        help: `Where to put axis.`,\n        type: 'string',\n        required: false,\n        defaultValue: defaultProps.axisPosition,\n        controlType: 'radio',\n        group: 'Axes',\n        controlOptions: {\n            choices: [\n                { label: 'before', value: 'before' },\n                { label: 'after', value: 'after' },\n            ],\n        },\n    },\n    {\n        key: 'titlePosition',\n        help: `Where to put title.`,\n        type: 'string',\n        required: false,\n        defaultValue: defaultProps.titlePosition,\n        controlType: 'radio',\n        group: 'Title',\n        controlOptions: {\n            choices: [\n                { label: 'before', value: 'before' },\n                { label: 'after', value: 'after' },\n            ],\n        },\n    },\n    {\n        key: 'titleAlign',\n        help: `title alignment.`,\n        type: 'string',\n        required: false,\n        defaultValue: defaultProps.titleAlign,\n        controlType: 'choices',\n        group: 'Title',\n        controlOptions: {\n            choices: [\n                { label: 'start', value: 'start' },\n                { label: 'middle', value: 'middle' },\n                { label: 'end', value: 'end' },\n            ],\n        },\n    },\n    {\n        key: 'titleOffsetX',\n        help: 'title x offset from bullet edge.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.titleOffset,\n        controlType: 'range',\n        group: 'Title',\n        controlOptions: {\n            min: -100,\n            max: 100,\n            unit: 'px',\n        },\n    },\n    {\n        key: 'titleOffsetY',\n        help: 'title y offset from bullet edge.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.titleOffset,\n        controlType: 'range',\n        group: 'Title',\n        controlOptions: {\n            min: -100,\n            max: 100,\n            unit: 'px',\n        },\n    },\n    {\n        key: 'titleRotation',\n        help: 'title rotation.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.titleRotation,\n        controlType: 'angle',\n        group: 'Title',\n        controlOptions: {\n            start: 90,\n            min: -360,\n            max: 360,\n            step: 5,\n        },\n    },\n    {\n        key: 'onRangeClick',\n        flavors: ['svg'],\n        type: '(range, event) => void',\n        group: 'Interactivity',\n        required: false,\n        help: 'onClick handler for ranges.',\n        description: `\n            onClick handler for ranges, will receive range\n            data as first argument & event as second one.\n\n            The data has the following shape:\n            \\`\\`\\`\n            {\n                id:    string,\n                v0:    number,\n                v1:    number,\n                index: number,\n                color: string,\n            }\n            \\`\\`\\`\n\n            \\`v1\\` is the value of the range while\n            \\`v0\\` is the value of previous range.\n        `,\n    },\n    {\n        key: 'onMeasureClick',\n        flavors: ['svg'],\n        type: '(measure, event) => void',\n        group: 'Interactivity',\n        required: false,\n        help: 'onClick handler for measures.',\n        description: `\n            onClick handler for measures, will receive measure\n            data as first argument & event as second one.\n\n            The data has the following shape:\n            \\`\\`\\`\n            {\n                id:    string,\n                v0:    number,\n                v1:    number,\n                index: number,\n                color: string,\n            }\n            \\`\\`\\`\n\n            \\`v1\\` is the value of the measure while\n            \\`v0\\` is the value of previous measure.\n        `,\n    },\n    {\n        key: 'onMarkerClick',\n        flavors: ['svg'],\n        type: '(marker, event) => void',\n        group: 'Interactivity',\n        required: false,\n        help: 'onClick handler for markers.',\n        description: `\n            onClick handler for markers, will receive marker\n            data as first argument & event as second one.\n\n            The data has the following shape:\n            \\`\\`\\`\n            {\n                id:    string,\n                value: number,\n                index: number,\n                color: string,\n            }\n            \\`\\`\\`\n        `,\n    },\n    ...motionProperties(['svg'], defaultProps, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport shuffle from 'lodash/shuffle'\nimport { ResponsiveBullet, defaultProps } from '@nivo/bullet'\nimport { generateBulletData } from '@nivo/generators'\nimport ComponentTemplate from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/bullet/meta.yml'\nimport { groups } from '../../data/components/bullet/props'\n\nconst generateData = () => [\n    generateBulletData('temp.', shuffle([100, 120, 140])[0]),\n    generateBulletData('power', 2, { float: true, measureCount: 2 }),\n    generateBulletData('volume', shuffle([40, 60, 80])[0], { rangeCount: 8 }),\n    generateBulletData('cost', 500000, { measureCount: 2 }),\n    generateBulletData('revenue', shuffle([9, 11, 13])[0], { markerCount: 2 }),\n]\n\nconst initialProperties = {\n    margin: {\n        top: 50,\n        right: 90,\n        bottom: 50,\n        left: 90,\n    },\n    layout: defaultProps.layout,\n    reverse: defaultProps.reverse,\n    spacing: 46,\n    titlePosition: defaultProps.titlePosition,\n    titleAlign: 'start',\n    titleOffsetX: -70,\n    titleOffsetY: defaultProps.titleOffsetY,\n    titleRotation: defaultProps.titleRotation,\n    measureSize: 0.2,\n    markerSize: 0.6,\n    axisPosition: defaultProps.axisPosition,\n    rangeColors: defaultProps.rangeColors,\n    measureColors: defaultProps.measureColors,\n    markerColors: defaultProps.markerColors,\n    animate: defaultProps.animate,\n    motionConfig: defaultProps.motionConfig,\n}\n\nconst Bullet = () => {\n    return (\n        <ComponentTemplate\n            name=\"Bullet\"\n            meta={meta.Bullet}\n            icon=\"bullet\"\n            flavors={meta.flavors}\n            currentFlavor=\"svg\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={defaultProps}\n            generateData={generateData}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveBullet\n                        data={data}\n                        {...properties}\n                        theme={theme}\n                        onRangeClick={range => {\n                            logAction({\n                                type: 'click',\n                                label: `[range] ${range.id}: [${range.v0}, ${range.v1}]`,\n                                color: range.color,\n                                data: range,\n                            })\n                        }}\n                        onMeasureClick={measure => {\n                            logAction({\n                                type: 'click',\n                                label: `[measure] ${measure.id}: [${measure.v0}, ${measure.v1}]`,\n                                color: measure.color,\n                                data: measure,\n                            })\n                        }}\n                        onMarkerClick={marker => {\n                            logAction({\n                                type: 'click',\n                                label: `[marker] ${marker.id}: ${marker.value}`,\n                                color: marker.color,\n                                data: marker,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default Bullet\n"],"sourceRoot":""}