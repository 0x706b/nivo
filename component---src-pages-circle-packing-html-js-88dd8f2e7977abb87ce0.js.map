{"version":3,"sources":["webpack:///./src/data/components/circle-packing/mapper.js","webpack:///./src/pages/circle-packing/html.js","webpack:///./src/data/components/circle-packing/props.js","webpack:///../node_modules/lodash/cloneDeep.js"],"names":["settingsMapper","valueFormat","mapFormat","label","value","d","id","generateData","generateLibTree","initialProperties","margin","top","right","bottom","left","identity","format","enabled","colors","scheme","colorBy","inheritColorFromParent","childColor","from","modifiers","padding","leavesOnly","enableLabels","labelsFilter","node","depth","labelsSkipRadius","labelTextColor","borderWidth","borderColor","animate","motionConfig","isInteractive","CirclePackingHtml","name","meta","icon","flavors","currentFlavor","properties","groups","defaultProperties","defaultProps","propertiesMapper","mapper","dataKey","data","theme","logAction","root","onClick","type","color","props","key","group","help","description","required","defaultValue","controlType","controlOptions","unit","min","max","enableControlForFlavors","step","themeProperty","choices","defsProperties","map","choice","motionProperties","groupProperties","baseClone","module","exports","CLONE_DEEP_FLAG"],"mappings":"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","file":"component---src-pages-circle-packing-html-js-88dd8f2e7977abb87ce0.js","sourcesContent":["import { mapFormat, settingsMapper } from '../../../lib/settings'\n\nexport default settingsMapper({\n    valueFormat: mapFormat,\n    label: value => {\n        if (value === `d => \\`\\${d.id}: \\${d.value}\\``) return d => `${d.id}: ${d.value}`\n        return value\n    },\n})\n","import React from 'react'\nimport { ResponsiveCirclePackingHtml, defaultProps } from '@nivo/circle-packing'\nimport { generateLibTree } from '@nivo/generators'\nimport ComponentTemplate from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/circle-packing/meta.yml'\nimport mapper from '../../data/components/circle-packing/mapper'\nimport { groups } from '../../data/components/circle-packing/props'\n\nconst generateData = () => generateLibTree()\n\nconst initialProperties = {\n    margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20,\n    },\n    identity: 'name',\n    value: 'loc',\n    valueFormat: { format: '', enabled: false },\n    colors: { scheme: 'spectral' },\n    colorBy: 'depth',\n    inheritColorFromParent: false,\n    childColor: {\n        from: 'color',\n        modifiers: [['brighter', 0.4]],\n    },\n    padding: 2,\n    leavesOnly: false,\n    enableLabels: true,\n    label: 'id',\n    labelsFilter: label => label.node.depth === 2,\n    labelsSkipRadius: 10,\n    labelTextColor: '#000000',\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.3]],\n    },\n    animate: true,\n    motionConfig: 'gentle',\n    isInteractive: true,\n}\n\nconst CirclePackingHtml = () => {\n    return (\n        <ComponentTemplate\n            name=\"CirclePackingHtml\"\n            meta={meta.CirclePackingHtml}\n            icon=\"circle-packing\"\n            flavors={meta.flavors}\n            currentFlavor=\"html\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={defaultProps}\n            propertiesMapper={mapper}\n            generateData={generateData}\n            dataKey=\"root\"\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveCirclePackingHtml\n                        root={data}\n                        {...properties}\n                        theme={theme}\n                        onClick={node => {\n                            logAction({\n                                type: 'click',\n                                label: `${node.id}: ${node.value}`,\n                                color: node.color,\n                                data: node,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default CirclePackingHtml\n","import { defaultProps } from '@nivo/circle-packing'\nimport {\n    themeProperty,\n    motionProperties,\n    defsProperties,\n    groupProperties,\n} from '../../../lib/componentProperties'\n\nconst props = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data, which should be immutable.',\n        description: `\n            Chart data, which must conform to this structure\n            if using the default \\`id\\` and \\`value\\` accessors:\n\n            \\`\\`\\`\n            {\n                // must be unique for the whole dataset\n                id: string | number\n                value: number\n                children: {\n                    id: string | number\n                    value: number\n                    children: ...\n                }[]\n            }\n            \\`\\`\\`\n\n            If using a different data structure, you must make sure\n            to adjust both \\`id\\` and \\`value\\`. Meaning you can provide\n            a completely different data structure as long as \\`id\\` and \\`value\\`\n            return the appropriate values.\n\n            Immutability of the data is important as re-computations\n            depends on it.\n        `,\n        type: 'object',\n        required: true,\n    },\n    {\n        key: 'id',\n        group: 'Base',\n        help: 'Id accessor.',\n        description: `\n            define id accessor, if string given,\n            will use \\`node[value]\\`,\n            if function given, it will be invoked\n            for each node and will receive the node as\n            first argument, it must return the node\n            id (string | number).\n        `,\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaultProps.id,\n    },\n    {\n        key: 'value',\n        group: 'Base',\n        help: 'Value accessor',\n        description: `\n            define value accessor, if string given,\n            will use \\`node[value]\\`,\n            if function given, it will be invoked\n            for each node and will receive the node as\n            first argument, it must return the node\n            value (number).\n        `,\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaultProps.value,\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'string | (value: number) => string | number',\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'padding',\n        help: 'Padding between each circle.',\n        description: `\n            Padding between adjacent circles.\n            Please be aware that when zoomed\n            this value will be affected by the zooming factor\n            and is expressed in pixels. See the\n            [official d3 documentation](https://github.com/d3/d3-hierarchy#pack_padding).\n        `,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.padding,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 32,\n        },\n    },\n    {\n        key: 'leavesOnly',\n        help: 'Only render leaf nodes (skip parent nodes).',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.leavesOnly,\n        controlType: 'switch',\n        group: 'Base',\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            not required if using \\`<ResponsiveCirclePacking/>\\`.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            not required if using \\`<ResponsiveCirclePacking/>\\`.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        required: false,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    themeProperty,\n    {\n        key: 'colors',\n        help: 'Define how to compute node color.',\n        description: `\n            colors used to colorize the circles,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: { scheme: 'nivo' },\n        controlType: 'ordinalColors',\n        group: 'Style',\n    },\n    {\n        key: 'colorBy',\n        help: `Define the property to use to assign a color to circles.`,\n        description: `\n            When using \\`id\\`, each node will get a new color,\n            and when using \\`depth\\` the nodes' color will depend on their depth.\n        `,\n        type: `'id' | 'depth'`,\n        required: false,\n        defaultValue: defaultProps.colorBy,\n        controlType: 'radio',\n        group: 'Style',\n        controlOptions: {\n            choices: [\n                { label: 'id', value: 'id' },\n                { label: 'depth', value: 'depth' },\n            ],\n        },\n    },\n    {\n        key: 'inheritColorFromParent',\n        help: 'Inherit color from parent node starting from 2nd level.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.inheritColorFromParent,\n        controlType: 'switch',\n        group: 'Style',\n    },\n    {\n        key: 'childColor',\n        help:\n            'Defines how to compute child nodes color, only used when inheritColorFromParent is enabled.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.childColor,\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    {\n        key: 'borderWidth',\n        help: 'Width of circle border.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.borderWidth,\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute border color.',\n        description: `\n            how to compute border color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.borderColor,\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'circleComponent',\n        help: 'Custom circle component.',\n        group: 'Style',\n        required: false,\n    },\n    {\n        key: 'enableLabels',\n        help: 'Enable/disable labels.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.enableLabels,\n        controlType: 'switch',\n        group: 'Labels',\n    },\n    {\n        key: 'label',\n        help: 'Label accessor.',\n        description: `\n            Defines how to get label text,\n            can be a string (used to access current node data property)\n            or a function which will receive the actual node data.\n        `,\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaultProps.label,\n        controlType: 'choices',\n        group: 'Labels',\n        controlOptions: {\n            choices: ['id', 'value', 'formattedValue', `d => \\`\\${d.id}: \\${d.value}\\``].map(\n                choice => ({\n                    label: choice,\n                    value: choice,\n                })\n            ),\n        },\n    },\n    {\n        key: 'labelsFilter',\n        help: 'Filter labels using custom conditions.',\n        description: `\n            Please note that at this stage, nodes are already excluded\n            according to \\`labelsSkipRadius\\`.\n            \n            This can be used to only show labels at a certain depth for example:\n            \n            \\`\\`\\`\n            <CirclePacking\n                labelsFilter={label => label.node.depth == 2}\n                {...props}\n            />\n            \\`\\`\\`\n        `,\n        type: '(label) => boolean',\n        required: false,\n        group: 'Labels',\n    },\n    {\n        key: 'labelsSkipRadius',\n        help: 'Skip label rendering if node radius is lower than given value, 0 to disable.',\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.labelsSkipRadius,\n        controlType: 'range',\n        group: 'Labels',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 32,\n        },\n    },\n    {\n        key: 'labelTextColor',\n        help: 'Method to compute label text color.',\n        description: `\n            how to compute label text color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.labelTextColor,\n        controlType: 'inheritedColor',\n        group: 'Labels',\n    },\n    {\n        key: 'labelComponent',\n        help: 'Custom label component.',\n        group: 'Labels',\n        required: false,\n    },\n    {\n        key: 'isInteractive',\n        flavors: ['svg', 'html', 'canvas'],\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.isInteractive,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg', 'html'],\n        group: 'Interactivity',\n        help: 'onMouseEnter handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg', 'html', 'canvas'],\n        group: 'Interactivity',\n        help: 'onMouseMove handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg', 'html'],\n        group: 'Interactivity',\n        help: 'onMouseLeave handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg', 'html', 'canvas'],\n        group: 'Interactivity',\n        help: 'onClick handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'zoomedId',\n        flavors: ['svg', 'html', 'canvas'],\n        help: `Zoom on a specific node.`,\n        description: `\n            If provided, zoom on the node having the provided ID,\n            this can be used to build a zoomable circle packing chart\n            when used in conjunction with the \\`onClick\\` property.  \n        `,\n        type: 'string | null',\n        required: false,\n        group: 'Interactivity',\n    },\n    ...motionProperties(['svg', 'html'], defaultProps, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = cloneDeep;\n"],"sourceRoot":""}