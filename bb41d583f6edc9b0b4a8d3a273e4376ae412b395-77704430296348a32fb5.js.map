{"version":3,"file":"bb41d583f6edc9b0b4a8d3a273e4376ae412b395-77704430296348a32fb5.js","mappings":"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","sources":["webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/Node.tsx","webpack://nivo-website/../src/props.tsx","webpack://nivo-website/../src/Tooltip.tsx","webpack://nivo-website/../src/ScatterPlotAnnotations.tsx","webpack://nivo-website/../src/Nodes.tsx","webpack://nivo-website/../src/Mesh.tsx","webpack://nivo-website/../src/ScatterPlot.tsx","webpack://nivo-website/../src/ResponsiveScatterPlot.tsx","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://nivo-website/../src/ScatterPlotCanvas.tsx","webpack://nivo-website/../src/ResponsiveScatterPlotCanvas.tsx"],"sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import get from 'lodash/get'\nimport isString from 'lodash/isString'\nimport isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport { scaleLinear } from 'd3-scale'\nimport { ComputedSerie } from '@nivo/scales'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n    ScatterPlotNodeDynamicSizeSpec,\n} from './types'\n\nconst isDynamicSizeSpec = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n): size is ScatterPlotNodeDynamicSizeSpec => isPlainObject(size)\n\nexport const getNodeSizeGenerator = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => {\n    if (typeof size === 'function') return size\n    if (isNumber(size)) return () => size\n    if (isDynamicSizeSpec<RawDatum>(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'symbolSize is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return (datum: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>) =>\n            sizeScale(get(datum, size.key))\n    }\n\n    throw new Error('nodeSize is invalid, it should be either a function, a number or an object')\n}\n\nexport const computePoints = <RawDatum extends ScatterPlotDatum>({\n    series,\n    formatX,\n    formatY,\n    getNodeId,\n}: {\n    series: ComputedSerie<{ id: string | number }, RawDatum>[]\n    formatX: (value: RawDatum['x']) => string | number\n    formatY: (value: RawDatum['x']) => string | number\n    getNodeId: (d: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'>) => string\n}): Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] => {\n    const points: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] = []\n\n    series.forEach(serie => {\n        serie.data.forEach((d, serieIndex) => {\n            const point: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'> = {\n                index: points.length,\n                serieIndex,\n                serieId: serie.id,\n                x: d.position.x as number,\n                xValue: d.data.x,\n                formattedX: formatX(d.data.x),\n                y: d.position.y as number,\n                yValue: d.data.y,\n                formattedY: formatY(d.data.y),\n                data: d.data,\n            }\n\n            points.push({\n                ...point,\n                id: getNodeId(point),\n            })\n        })\n    })\n\n    return points\n}\n","import { useMemo } from 'react'\nimport { useValueFormatter, usePropertyAccessor } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { useAnnotations } from '@nivo/annotations'\nimport { computePoints, getNodeSizeGenerator } from './compute'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDataProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n} from './types'\n\nconst useNodeSize = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => useMemo(() => getNodeSizeGenerator<RawDatum>(size), [size])\n\nexport const useScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScaleSpec,\n    xFormat,\n    yScaleSpec,\n    yFormat,\n    width,\n    height,\n    nodeId,\n    nodeSize,\n    colors,\n}: {\n    data: ScatterPlotDataProps<RawDatum>['data']\n    xScaleSpec: ScatterPlotCommonProps<RawDatum>['xScale']\n    xFormat?: ScatterPlotCommonProps<RawDatum>['xFormat']\n    yScaleSpec: ScatterPlotCommonProps<RawDatum>['yScale']\n    yFormat?: ScatterPlotCommonProps<RawDatum>['yFormat']\n    width: number\n    height: number\n    nodeId: ScatterPlotCommonProps<RawDatum>['nodeId']\n    nodeSize: ScatterPlotCommonProps<RawDatum>['nodeSize']\n    colors: ScatterPlotCommonProps<RawDatum>['colors']\n}) => {\n    const { series, xScale, yScale } = useMemo(\n        () =>\n            computeXYScalesForSeries<{ id: string | number }, RawDatum>(\n                data,\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getNodeId = usePropertyAccessor(nodeId)\n    const rawNodes = useMemo(\n        () => computePoints<RawDatum>({ series, formatX, formatY, getNodeId }),\n        [series, formatX, formatY, getNodeId]\n    )\n\n    const getNodeSize = useNodeSize<RawDatum>(nodeSize)\n\n    const getColor = useOrdinalColorScale(colors, 'serieId')\n\n    const nodes: ScatterPlotNodeData<RawDatum>[] = useMemo(\n        () =>\n            rawNodes.map(rawNode => ({\n                ...rawNode,\n                size: getNodeSize(rawNode),\n                color: getColor({ serieId: rawNode.serieId }),\n            })),\n        [rawNodes, getNodeSize, getColor]\n    )\n\n    const legendData = useMemo(\n        () =>\n            series.map(serie => ({\n                id: serie.id,\n                label: serie.id,\n                color: getColor({ serieId: serie.id }),\n            })),\n        [series, getColor]\n    )\n\n    return {\n        xScale,\n        yScale,\n        nodes,\n        legendData,\n    }\n}\n\nexport const useScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>(\n    items: ScatterPlotNodeData<RawDatum>[],\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n) =>\n    useAnnotations<ScatterPlotNodeData<RawDatum>>({\n        data: items,\n        annotations,\n        getPosition: (node: ScatterPlotNodeData<RawDatum>) => ({\n            x: node.x,\n            y: node.y,\n        }),\n        getDimensions: (node: ScatterPlotNodeData<RawDatum>) => ({\n            size: node.size,\n            width: node.size,\n            height: node.size,\n        }),\n    })\n","import { animated } from '@react-spring/web'\nimport { ScatterPlotDatum, ScatterPlotNodeProps } from './types'\nimport { useCallback } from 'react'\n\nconst interpolateRadius = (size: number) => size / 2\n\nexport const Node = <RawDatum extends ScatterPlotDatum>({\n    node,\n    style,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: ScatterPlotNodeProps<RawDatum>) => {\n    const handleMouseEnter = useCallback(event => onMouseEnter?.(node, event), [node, onMouseEnter])\n    const handleMouseMove = useCallback(event => onMouseMove?.(node, event), [node, onMouseMove])\n    const handleMouseLeave = useCallback(event => onMouseLeave?.(node, event), [node, onMouseLeave])\n    const handleClick = useCallback(event => onClick?.(node, event), [node, onClick])\n\n    return (\n        <animated.circle\n            cx={style.x}\n            cy={style.y}\n            r={style.size.to(interpolateRadius)}\n            fill={style.color}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n","import { CssMixBlendMode } from '@nivo/core'\nimport { Node } from './Node'\nimport { Tooltip } from './Tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotLayerId,\n    ScatterPlotNodeData,\n} from './types'\n\nexport const commonDefaultProps = {\n    xScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['xScale'],\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['yScale'],\n\n    enableGridX: true,\n    enableGridY: true,\n    axisBottom: {},\n    axisLeft: {},\n\n    nodeId: (({ serieId, index }) => `${serieId}.${index}`) as ScatterPlotCommonProps<\n        ScatterPlotDatum\n    >['nodeId'],\n    nodeSize: 9,\n    nodeComponent: Node,\n\n    colors: { scheme: 'nivo' } as ScatterPlotCommonProps<ScatterPlotDatum>['colors'],\n\n    isInteractive: true,\n    debugMesh: false,\n\n    tooltip: Tooltip,\n\n    markers: [],\n\n    legends: [],\n\n    annotations: [],\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    blendMode: 'normal' as CssMixBlendMode,\n    layers: [\n        'grid',\n        'axes',\n        'nodes',\n        'markers',\n        'mesh',\n        'legends',\n        'annotations',\n    ] as ScatterPlotLayerId[],\n    role: 'img',\n    useMesh: true,\n    animate: true,\n    motionConfig: 'default',\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'nodes', 'mesh', 'legends', 'annotations'] as ScatterPlotLayerId[],\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n    renderNode: (ctx: CanvasRenderingContext2D, node: ScatterPlotNodeData<ScatterPlotDatum>) => {\n        ctx.beginPath()\n        ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n        ctx.fillStyle = node.color\n        ctx.fill()\n    },\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ScatterPlotTooltipProps, ScatterPlotDatum } from './types'\n\nexport const Tooltip = <RawDatum extends ScatterPlotDatum>({\n    node,\n}: ScatterPlotTooltipProps<RawDatum>) => (\n    <BasicTooltip\n        id={node.serieId}\n        value={`x: ${node.formattedX}, y: ${node.formattedY}`}\n        enableChip={true}\n        color={node.color}\n    />\n)\n","import { Annotation } from '@nivo/annotations'\nimport { useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface ScatterPlotAnnotationsProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n}\n\nexport const ScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    annotations,\n}: ScatterPlotAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { CssMixBlendMode, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNode,\n    ScatterPlotNodeData,\n} from './types'\nimport { createElement, useCallback } from 'react'\n\ninterface NodesProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    nodeComponent: ScatterPlotNode<RawDatum>\n    isInteractive: boolean\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    blendMode: CssMixBlendMode\n}\n\nconst getNodeKey = <RawDatum extends ScatterPlotDatum>(node: ScatterPlotNodeData<RawDatum>) =>\n    node.id\nconst regularTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: node.size,\n    color: node.color,\n})\nconst leaveTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: 0,\n    color: node.color,\n})\n\nexport const Nodes = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    nodeComponent,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    blendMode,\n}: NodesProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        ScatterPlotNodeData<RawDatum>,\n        {\n            x: number\n            y: number\n            size: number\n            color: string\n        }\n    >(nodes, {\n        keys: getNodeKey,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseEnter = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (node, event) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n    const handleClick = useCallback((node, event) => onClick?.(node, event), [onClick])\n\n    return (\n        <>\n            {transition((style, node) =>\n                createElement(nodeComponent, {\n                    node,\n                    style,\n                    blendMode,\n                    isInteractive,\n                    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n                    onMouseMove: isInteractive ? handleMouseMove : undefined,\n                    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n                    onClick: isInteractive ? handleClick : undefined,\n                })\n            )}\n        </>\n    )\n}\n","import { createElement, useCallback } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface MeshProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    width: number\n    height: number\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    debug: boolean\n}\n\nexport const Mesh = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    width,\n    height,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}: MeshProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={nodes}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n","import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport { SvgWrapper, Container, useDimensions, CartesianMarkers } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useScatterPlot } from './hooks'\nimport { svgDefaultProps } from './props'\nimport { ScatterPlotAnnotations } from './ScatterPlotAnnotations'\nimport { Nodes } from './Nodes'\nimport { Mesh } from './Mesh'\nimport { ScatterPlotDatum, ScatterPlotLayerId, ScatterPlotSvgProps } from './types'\n\ntype InnerScatterPlotProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = svgDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = svgDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    colors = svgDefaultProps.colors,\n    blendMode = svgDefaultProps.blendMode,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = svgDefaultProps.nodeSize,\n    nodeComponent = svgDefaultProps.nodeComponent,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    annotations = svgDefaultProps.annotations,\n    isInteractive = svgDefaultProps.isInteractive,\n    useMesh = svgDefaultProps.useMesh,\n    debugMesh = svgDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip,\n    markers = svgDefaultProps.markers,\n    legends = svgDefaultProps.legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerScatterPlotProps<RawDatum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    const layerById: Record<ScatterPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        nodes: null,\n        markers: null,\n        mesh: null,\n        annotations: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as any) : null}\n                yScale={enableGridY ? (yScale as any) : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <Nodes<RawDatum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                blendMode={blendMode}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<RawDatum['x'], RawDatum['y']>\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (value: RawDatum['x']) => number}\n                yScale={yScale as (value: RawDatum['y']) => number}\n            />\n        )\n    }\n\n    if (layers.includes('mesh') && isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh<RawDatum>\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <ScatterPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legendData}\n            />\n        ))\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'string' && layerById[layer] !== undefined) {\n                    return layerById[layer]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                throw new Error(`Unknown layer (${layer})`)\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const ScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: ScatterPlotSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerScatterPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlot } from './ScatterPlot'\nimport { ScatterPlotDatum, ScatterPlotSvgProps } from './types'\n\nexport const ResponsiveScatterPlot = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ScatterPlot<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { createElement, useRef, useState, useEffect, useCallback, useMemo } from 'react'\nimport { Container, useDimensions, useTheme, getRelativeCursor, isCursorInRect } from '@nivo/core'\nimport { renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { CanvasAxisProp, renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { canvasDefaultProps, svgDefaultProps } from './props'\nimport { useScatterPlot, useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ntype InnerScatterPlotCanvasProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = canvasDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = canvasDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = canvasDefaultProps.nodeSize,\n    renderNode = canvasDefaultProps.renderNode,\n    enableGridX = canvasDefaultProps.enableGridX,\n    gridXValues,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    annotations = canvasDefaultProps.annotations,\n    isInteractive = canvasDefaultProps.isInteractive,\n    debugMesh = canvasDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip,\n    legends = canvasDefaultProps.legends,\n}: InnerScatterPlotCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ScatterPlotNodeData<RawDatum> | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas<RawDatum['x']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale as any,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas<RawDatum['y']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale as any,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas<ScatterPlotNodeData<RawDatum>>(ctx, {\n                    annotations: boundAnnotations as any,\n                    theme,\n                })\n            } else if (layer === 'axes') {\n                renderAxesToCanvas<RawDatum['x'], RawDatum['y']>(ctx, {\n                    xScale: xScale as any,\n                    yScale: yScale as any,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop as CanvasAxisProp<RawDatum['x']>,\n                    right: axisRight as CanvasAxisProp<RawDatum['y']>,\n                    bottom: axisBottom as CanvasAxisProp<RawDatum['x']>,\n                    left: axisLeft as CanvasAxisProp<RawDatum['y']>,\n                    theme,\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    renderNode(ctx, node)\n                })\n            } else if (layer === 'mesh') {\n                if (debugMesh === true) {\n                    renderVoronoiToCanvas(ctx, voronoi!)\n                    if (currentNode) {\n                        renderVoronoiCellToCanvas(ctx, voronoi!, currentNode.index)\n                    }\n                }\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            } else {\n                throw new Error(`Invalid layer: ${layer}`)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        renderNode,\n        layers,\n        customLayerProps,\n        theme,\n        xScale,\n        yScale,\n        nodes,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        legendData,\n        debugMesh,\n        voronoi,\n        currentNode,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const getNodeFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current!, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const handleMouseHover = useCallback(\n        event => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event)\n                if (currentNode && currentNode.id !== node.id) {\n                    onMouseLeave && onMouseLeave(currentNode, event)\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                if (!currentNode) {\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                onMouseMove && onMouseMove(node, event)\n            } else {\n                hideTooltip()\n                currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n            }\n        },\n        [\n            getNodeFromMouseEvent,\n            currentNode,\n            setCurrentNode,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentNode(null)\n            currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n        },\n        [hideTooltip, currentNode, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const node = getNodeFromMouseEvent(event)\n                node && onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const ScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: ScatterPlotCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n        <InnerScatterPlotCanvas<RawDatum> {...props} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlotCanvas } from './ScatterPlotCanvas'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum } from './types'\n\nexport const ResponsiveScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <ScatterPlotCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","forEach","getOwnPropertyDescriptors","defineProperties","getNodeSizeGenerator","size","isNumber","isPlainObject","isDynamicSizeSpec","isString","Array","sizeScale","scaleLinear","get","datum","useScatterPlot","data","xScaleSpec","xFormat","yScaleSpec","yFormat","width","height","nodeId","nodeSize","colors","useMemo","computeXYScalesForSeries","series","xScale","yScale","formatX","useValueFormatter","formatY","getNodeId","usePropertyAccessor","rawNodes","points","serie","point","index","serieIndex","serieId","x","d","xValue","formattedX","y","yValue","formattedY","id","computePoints","getNodeSize","getColor","useOrdinalColorScale","nodes","rawNode","color","legendData","label","useScatterPlotAnnotations","useAnnotations","annotations","getPosition","node","getDimensions","interpolateRadius","commonDefaultProps","type","min","max","enableGridX","enableGridY","axisBottom","axisLeft","nodeComponent","style","blendMode","isInteractive","onMouseEnter","onMouseMove","onMouseLeave","onClick","handleMouseEnter","useCallback","event","handleMouseMove","handleMouseLeave","handleClick","cx","cy","r","fill","mixBlendMode","undefined","scheme","debugMesh","tooltip","enableChip","markers","legends","svgDefaultProps","layers","role","useMesh","animate","motionConfig","canvasDefaultProps","pixelRatio","window","renderNode","ctx","Math","ScatterPlotAnnotations","boundAnnotations","_jsx","getNodeKey","regularTransition","leaveTransition","Nodes","useMotionConfig","springConfig","transition","useTransition","from","enter","update","leave","config","immediate","useTooltip","showTooltipFromEvent","hideTooltip","createElement","Mesh","debug","InnerScatterPlot","partialMargin","margin","gridXValues","gridYValues","axisTop","axisRight","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","customLayerProps","layerById","grid","axes","mesh","xValues","yValues","top","right","bottom","left","containerWidth","containerHeight","layer","ScatterPlot","theme","renderWrapper","otherProps","ResponsiveScatterPlot","_arrayLikeToArray","arr","len","arr2","_slicedToArray","isArray","arrayWithHoles","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","err","iterableToArrayLimit","o","minLen","arrayLikeToArray","n","toString","slice","constructor","name","test","unsupportedIterableToArray","TypeError","nonIterableRest","InnerScatterPlotCanvas","canvasEl","useRef","useTheme","useState","currentNode","setCurrentNode","useVoronoiMesh","delaunay","voronoi","useEffect","renderGridLinesToCanvas","scale","axis","values","renderAnnotationsToCanvas","renderAxesToCanvas","renderVoronoiToCanvas","renderVoronoiCellToCanvas","legend","renderLegendToCanvas","getNodeFromMouseEvent","getRelativeCursor","isCursorInRect","nodeIndex","handleMouseHover","ref","cursor","ScatterPlotCanvas","props","ResponsiveScatterPlotCanvas"],"sourceRoot":""}