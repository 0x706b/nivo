{"version":3,"file":"f55dd3e3f1a682def2611c1456d7674312b4072f-ead1737cb1acaac306bb.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/ascending.js","webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/bisector.js","webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/bisect.js","webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/array.js","webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/ticks.js","webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/range.js","webpack://nivo-website/../node_modules/d3-chord/src/math.js","webpack://nivo-website/../node_modules/d3-chord/src/chord.js","webpack://nivo-website/../node_modules/d3-chord/src/array.js","webpack://nivo-website/../node_modules/d3-chord/src/constant.js","webpack://nivo-website/../node_modules/d3-chord/src/ribbon.js","webpack://nivo-website/../src/ChordArcTooltip.tsx","webpack://nivo-website/../src/ChordRibbonTooltip.tsx","webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/ChordRibbon.tsx","webpack://nivo-website/../src/ChordRibbons.tsx","webpack://nivo-website/../src/ChordArc.tsx","webpack://nivo-website/../src/ChordArcs.tsx","webpack://nivo-website/../src/ChordLabels.tsx","webpack://nivo-website/../src/Chord.tsx","webpack://nivo-website/../src/ChordCanvas.tsx","webpack://nivo-website/../src/ResponsiveChord.tsx","webpack://nivo-website/../src/ResponsiveChordCanvas.tsx"],"sourcesContent":["export default function (a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}","import ascending from \"./ascending\";\nexport default function (compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function left(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      }\n\n      return lo;\n    },\n    right: function right(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;\n      }\n\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function (d, x) {\n    return ascending(f(d), x);\n  };\n}","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;","var array = Array.prototype;\nexport var slice = array.slice;\nexport var map = array.map;","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\nexport default function (start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n\n    while (++i < n) {\n      ticks[i] = (start + i) * step;\n    }\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n\n    while (++i < n) {\n      ticks[i] = (start - i) / step;\n    }\n  }\n\n  if (reverse) ticks.reverse();\n  return ticks;\n}\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}","export default function (start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}","export var cos = Math.cos;\nexport var sin = Math.sin;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var tau = pi * 2;\nexport var max = Math.max;","import { range } from \"d3-array\";\nimport { max, tau } from \"./math\";\n\nfunction compareValue(compare) {\n  return function (a, b) {\n    return compare(a.source.value + a.target.value, b.source.value + b.target.value);\n  };\n}\n\nexport default function () {\n  var padAngle = 0,\n      sortGroups = null,\n      sortSubgroups = null,\n      sortChords = null;\n\n  function chord(matrix) {\n    var n = matrix.length,\n        groupSums = [],\n        groupIndex = range(n),\n        subgroupIndex = [],\n        chords = [],\n        groups = chords.groups = new Array(n),\n        subgroups = new Array(n * n),\n        k,\n        x,\n        x0,\n        dx,\n        i,\n        j; // Compute the sum.\n\n    k = 0, i = -1;\n\n    while (++i < n) {\n      x = 0, j = -1;\n\n      while (++j < n) {\n        x += matrix[i][j];\n      }\n\n      groupSums.push(x);\n      subgroupIndex.push(range(n));\n      k += x;\n    } // Sort groups…\n\n\n    if (sortGroups) groupIndex.sort(function (a, b) {\n      return sortGroups(groupSums[a], groupSums[b]);\n    }); // Sort subgroups…\n\n    if (sortSubgroups) subgroupIndex.forEach(function (d, i) {\n      d.sort(function (a, b) {\n        return sortSubgroups(matrix[i][a], matrix[i][b]);\n      });\n    }); // Convert the sum to scaling factor for [0, 2pi].\n    // TODO Allow start and end angle to be specified?\n    // TODO Allow padding to be specified as percentage?\n\n    k = max(0, tau - padAngle * n) / k;\n    dx = k ? padAngle : tau / n; // Compute the start and end angle for each group and subgroup.\n    // Note: Opera has a bug reordering object literal properties!\n\n    x = 0, i = -1;\n\n    while (++i < n) {\n      x0 = x, j = -1;\n\n      while (++j < n) {\n        var di = groupIndex[i],\n            dj = subgroupIndex[di][j],\n            v = matrix[di][dj],\n            a0 = x,\n            a1 = x += v * k;\n        subgroups[dj * n + di] = {\n          index: di,\n          subindex: dj,\n          startAngle: a0,\n          endAngle: a1,\n          value: v\n        };\n      }\n\n      groups[di] = {\n        index: di,\n        startAngle: x0,\n        endAngle: x,\n        value: groupSums[di]\n      };\n      x += dx;\n    } // Generate chords for each (non-empty) subgroup-subgroup link.\n\n\n    i = -1;\n\n    while (++i < n) {\n      j = i - 1;\n\n      while (++j < n) {\n        var source = subgroups[j * n + i],\n            target = subgroups[i * n + j];\n\n        if (source.value || target.value) {\n          chords.push(source.value < target.value ? {\n            source: target,\n            target: source\n          } : {\n            source: source,\n            target: target\n          });\n        }\n      }\n    }\n\n    return sortChords ? chords.sort(sortChords) : chords;\n  }\n\n  chord.padAngle = function (_) {\n    return arguments.length ? (padAngle = max(0, _), chord) : padAngle;\n  };\n\n  chord.sortGroups = function (_) {\n    return arguments.length ? (sortGroups = _, chord) : sortGroups;\n  };\n\n  chord.sortSubgroups = function (_) {\n    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\n  };\n\n  chord.sortChords = function (_) {\n    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\n  };\n\n  return chord;\n}","export var slice = Array.prototype.slice;","export default function (x) {\n  return function () {\n    return x;\n  };\n}","import { slice } from \"./array\";\nimport constant from \"./constant\";\nimport { cos, halfPi, sin } from \"./math\";\nimport { path } from \"d3-path\";\n\nfunction defaultSource(d) {\n  return d.source;\n}\n\nfunction defaultTarget(d) {\n  return d.target;\n}\n\nfunction defaultRadius(d) {\n  return d.radius;\n}\n\nfunction defaultStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction defaultEndAngle(d) {\n  return d.endAngle;\n}\n\nexport default function () {\n  var source = defaultSource,\n      target = defaultTarget,\n      radius = defaultRadius,\n      startAngle = defaultStartAngle,\n      endAngle = defaultEndAngle,\n      context = null;\n\n  function ribbon() {\n    var buffer,\n        argv = slice.call(arguments),\n        s = source.apply(this, argv),\n        t = target.apply(this, argv),\n        sr = +radius.apply(this, (argv[0] = s, argv)),\n        sa0 = startAngle.apply(this, argv) - halfPi,\n        sa1 = endAngle.apply(this, argv) - halfPi,\n        sx0 = sr * cos(sa0),\n        sy0 = sr * sin(sa0),\n        tr = +radius.apply(this, (argv[0] = t, argv)),\n        ta0 = startAngle.apply(this, argv) - halfPi,\n        ta1 = endAngle.apply(this, argv) - halfPi;\n    if (!context) context = buffer = path();\n    context.moveTo(sx0, sy0);\n    context.arc(0, 0, sr, sa0, sa1);\n\n    if (sa0 !== ta0 || sa1 !== ta1) {\n      // TODO sr !== tr?\n      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));\n      context.arc(0, 0, tr, ta0, ta1);\n    }\n\n    context.quadraticCurveTo(0, 0, sx0, sy0);\n    context.closePath();\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  ribbon.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), ribbon) : radius;\n  };\n\n  ribbon.startAngle = function (_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : startAngle;\n  };\n\n  ribbon.endAngle = function (_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : endAngle;\n  };\n\n  ribbon.source = function (_) {\n    return arguments.length ? (source = _, ribbon) : source;\n  };\n\n  ribbon.target = function (_) {\n    return arguments.length ? (target = _, ribbon) : target;\n  };\n\n  ribbon.context = function (_) {\n    return arguments.length ? (context = _ == null ? null : _, ribbon) : context;\n  };\n\n  return ribbon;\n}","import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { ArcTooltipComponentProps } from './types'\n\nexport const ChordArcTooltip = memo(({ arc }: ArcTooltipComponentProps) => (\n    <BasicTooltip id={arc.label} value={arc.formattedValue} color={arc.color} enableChip={true} />\n))\n","import { memo } from 'react'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\nimport { RibbonTooltipComponentProps } from './types'\n\nexport const ChordRibbonTooltip = memo(({ ribbon }: RibbonTooltipComponentProps) => (\n    <TableTooltip\n        rows={[\n            [\n                <Chip key=\"chip\" color={ribbon.source.color} />,\n                <strong key=\"id\">{ribbon.source.label}</strong>,\n                ribbon.source.formattedValue,\n            ],\n            [\n                <Chip key=\"chip\" color={ribbon.target.color} />,\n                <strong key=\"id\">{ribbon.target.label}</strong>,\n                ribbon.target.formattedValue,\n            ],\n        ]}\n    />\n))\n","import { LayerId, ChordSvgProps, ChordCommonProps } from './types'\nimport { ChordArcTooltip } from './ChordArcTooltip'\nimport { ChordRibbonTooltip } from './ChordRibbonTooltip'\n\nexport const commonDefaultProps: Omit<\n    ChordCommonProps,\n    | 'valueFormat'\n    | 'margin'\n    | 'theme'\n    | 'onArcMouseEnter'\n    | 'onArcMouseMove'\n    | 'onArcMouseLeave'\n    | 'onArcClick'\n    | 'onRibbonMouseEnter'\n    | 'onRibbonMouseMove'\n    | 'onRibbonMouseLeave'\n    | 'onRibbonClick'\n    | 'renderWrapper'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['ribbons', 'arcs', 'labels', 'legends'],\n\n    padAngle: 0,\n    innerRadiusRatio: 0.9,\n    innerRadiusOffset: 0,\n\n    colors: { scheme: 'nivo' },\n\n    arcOpacity: 1,\n    activeArcOpacity: 1,\n    inactiveArcOpacity: 0.15,\n    arcBorderWidth: 1,\n    arcBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n    arcTooltip: ChordArcTooltip,\n\n    ribbonOpacity: 0.5,\n    activeRibbonOpacity: 0.85,\n    inactiveRibbonOpacity: 0.15,\n    ribbonBorderWidth: 1,\n    ribbonBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n    ribbonBlendMode: 'normal',\n\n    enableLabel: true,\n    label: 'id',\n    labelOffset: 12,\n    labelRotation: 0,\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    isInteractive: true,\n\n    legends: [],\n\n    animate: true,\n    motionConfig: 'gentle',\n\n    role: 'img',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    ribbonBlendMode: 'normal' as NonNullable<ChordSvgProps['ribbonBlendMode']>,\n    ribbonTooltip: ChordRibbonTooltip,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import { to, SpringValues } from '@react-spring/web'\nimport { arc as d3Arc } from 'd3-shape'\nimport { chord as d3Chord, ChordLayout, ribbon as d3Ribbon } from 'd3-chord'\nimport {\n    ArcDatum,\n    ChordCommonProps,\n    ChordDataProps,\n    RibbonAnimatedProps,\n    RibbonDatum,\n    RibbonGenerator,\n    ArcGenerator,\n    ArcAnimatedProps,\n} from './types'\nimport { OrdinalColorScale } from '@nivo/colors'\n\nexport const computeChordLayout = ({ padAngle }: { padAngle: ChordCommonProps['padAngle'] }) =>\n    d3Chord().padAngle(padAngle)\n\nexport const computeChordGenerators = ({\n    width,\n    height,\n    innerRadiusRatio,\n    innerRadiusOffset,\n}: {\n    width: number\n    height: number\n    innerRadiusRatio: ChordCommonProps['innerRadiusRatio']\n    innerRadiusOffset: ChordCommonProps['innerRadiusOffset']\n}) => {\n    const center: [number, number] = [width / 2, height / 2]\n    const radius = Math.min(width, height) / 2\n    const innerRadius = radius * innerRadiusRatio\n    const ribbonRadius = radius * (innerRadiusRatio - innerRadiusOffset)\n\n    return {\n        center,\n        radius,\n        innerRadius,\n        arcGenerator: d3Arc()\n            .outerRadius(radius)\n            .innerRadius(innerRadius) as unknown as ArcGenerator,\n        ribbonGenerator: d3Ribbon().radius(ribbonRadius) as unknown as RibbonGenerator,\n    }\n}\n\nexport const computeChordArcsAndRibbons = ({\n    chord,\n    data,\n    keys,\n    getLabel,\n    formatValue,\n    getColor,\n}: {\n    chord: ChordLayout\n    data: ChordDataProps['data']\n    keys: ChordDataProps['keys']\n    getLabel: (arc: Omit<ArcDatum, 'label' | 'color'>) => string\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<Omit<ArcDatum, 'label' | 'color'>>\n}): {\n    arcs: ArcDatum[]\n    ribbons: RibbonDatum[]\n} => {\n    const _ribbons = chord(data)\n\n    const arcs: ArcDatum[] = _ribbons.groups.map(chordGroup => {\n        const arc: Omit<ArcDatum, 'label' | 'color'> = {\n            ...chordGroup,\n            id: keys[chordGroup.index],\n            formattedValue: formatValue(chordGroup.value),\n        }\n\n        return {\n            ...arc,\n            label: getLabel(arc),\n            color: getColor(arc),\n        }\n    })\n\n    const ribbons: RibbonDatum[] = _ribbons.map(_ribbon => {\n        const source = {\n            ..._ribbon.source,\n            id: keys[_ribbon.source.index],\n            formattedValue: formatValue(_ribbon.source.value),\n        }\n\n        const target = {\n            ..._ribbon.target,\n            id: keys[_ribbon.target.index],\n            formattedValue: formatValue(_ribbon.target.value),\n        }\n\n        return {\n            ..._ribbon,\n            // ensure id remains the same even if source/target are reversed\n            id: [source.id, target.id].sort().join('.'),\n            source: {\n                ...source,\n                label: getLabel(source),\n                color: getColor(source),\n            },\n            target: {\n                ...target,\n                label: getLabel(target),\n                color: getColor(target),\n            },\n        }\n    })\n\n    return { arcs, ribbons }\n}\n\nexport const computeArcPath = ({\n    startAngle,\n    endAngle,\n    arcGenerator,\n}: SpringValues<Pick<ArcAnimatedProps, 'startAngle' | 'endAngle'>> & {\n    arcGenerator: ArcGenerator\n}) => to([startAngle, endAngle], (startAngle, endAngle) => arcGenerator({ startAngle, endAngle }))\n\nexport const computeRibbonPath = ({\n    sourceStartAngle,\n    sourceEndAngle,\n    targetStartAngle,\n    targetEndAngle,\n    ribbonGenerator,\n}: SpringValues<\n    Pick<\n        RibbonAnimatedProps,\n        'sourceStartAngle' | 'sourceEndAngle' | 'targetStartAngle' | 'targetEndAngle'\n    >\n> & {\n    ribbonGenerator: RibbonGenerator\n}) =>\n    to(\n        [sourceStartAngle, sourceEndAngle, targetStartAngle, targetEndAngle],\n        (sourceStartAngle, sourceEndAngle, targetStartAngle, targetEndAngle) =>\n            ribbonGenerator({\n                source: {\n                    startAngle: Math.min(sourceStartAngle, sourceEndAngle),\n                    endAngle: Math.max(sourceEndAngle, sourceStartAngle),\n                },\n                target: {\n                    startAngle: Math.min(targetStartAngle, targetEndAngle),\n                    endAngle: Math.max(targetEndAngle, targetStartAngle),\n                },\n            })\n    )\n","import { useMemo, useState } from 'react'\nimport {\n    useValueFormatter,\n    // @ts-ignore\n    getLabelGenerator,\n} from '@nivo/core'\nimport { OrdinalColorScale, useOrdinalColorScale } from '@nivo/colors'\nimport { computeChordLayout, computeChordGenerators, computeChordArcsAndRibbons } from './compute'\nimport { ArcDatum, ChordCommonProps, ChordDataProps, CustomLayerProps, RibbonDatum } from './types'\nimport { commonDefaultProps } from './defaults'\nimport { ChordLayout } from 'd3-chord'\n\nexport const useChordLayout = ({ padAngle }: { padAngle: ChordCommonProps['padAngle'] }) =>\n    useMemo(() => computeChordLayout({ padAngle }), [padAngle])\n\nexport const useChordGenerators = ({\n    width,\n    height,\n    innerRadiusRatio,\n    innerRadiusOffset,\n}: {\n    width: number\n    height: number\n    innerRadiusRatio: ChordCommonProps['innerRadiusRatio']\n    innerRadiusOffset: ChordCommonProps['innerRadiusOffset']\n}) =>\n    useMemo(\n        () =>\n            computeChordGenerators({\n                width,\n                height,\n                innerRadiusRatio,\n                innerRadiusOffset,\n            }),\n        [width, height, innerRadiusRatio, innerRadiusOffset]\n    )\n\nexport const useChordArcsAndRibbons = ({\n    chord,\n    getColor,\n    keys,\n    data,\n    getLabel,\n    formatValue,\n}: {\n    chord: ChordLayout\n    data: ChordDataProps['data']\n    keys: ChordDataProps['keys']\n    getLabel: (arc: Omit<ArcDatum, 'label' | 'color'>) => string\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<Omit<ArcDatum, 'label' | 'color'>>\n}) =>\n    useMemo(\n        () =>\n            computeChordArcsAndRibbons({\n                chord,\n                data,\n                keys,\n                getLabel,\n                formatValue,\n                getColor,\n            }),\n        [chord, getColor, keys, data, getLabel, formatValue]\n    )\n\nexport const useChord = ({\n    data,\n    keys,\n    label = commonDefaultProps.label,\n    valueFormat,\n    width,\n    height,\n    innerRadiusRatio = commonDefaultProps.innerRadiusRatio,\n    innerRadiusOffset = commonDefaultProps.innerRadiusOffset,\n    padAngle = commonDefaultProps.padAngle,\n    colors = commonDefaultProps.colors,\n}: {\n    data: ChordDataProps['data']\n    keys: ChordDataProps['keys']\n    label?: ChordCommonProps['label']\n    valueFormat?: ChordCommonProps['valueFormat']\n    width: number\n    height: number\n    innerRadiusRatio?: ChordCommonProps['innerRadiusRatio']\n    innerRadiusOffset?: ChordCommonProps['innerRadiusOffset']\n    padAngle?: ChordCommonProps['padAngle']\n    colors?: ChordCommonProps['colors']\n}) => {\n    const chord = useChordLayout({ padAngle })\n    const { center, radius, innerRadius, arcGenerator, ribbonGenerator } = useChordGenerators({\n        width,\n        height,\n        innerRadiusRatio,\n        innerRadiusOffset,\n    })\n    const getLabel = useMemo(() => getLabelGenerator(label), [label])\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const { arcs, ribbons } = useChordArcsAndRibbons({\n        chord,\n        getColor,\n        keys,\n        data,\n        getLabel,\n        formatValue,\n    })\n\n    return {\n        center,\n        chord,\n        radius,\n        innerRadius,\n        arcGenerator,\n        ribbonGenerator,\n        getColor,\n        arcs,\n        ribbons,\n    }\n}\n\nexport const useChordSelection = ({\n    arcOpacity = commonDefaultProps.arcOpacity,\n    activeArcOpacity = commonDefaultProps.activeArcOpacity,\n    inactiveArcOpacity = commonDefaultProps.inactiveArcOpacity,\n    ribbons,\n    ribbonOpacity = commonDefaultProps.ribbonOpacity,\n    activeRibbonOpacity = commonDefaultProps.activeRibbonOpacity,\n    inactiveRibbonOpacity = commonDefaultProps.inactiveRibbonOpacity,\n}: {\n    arcOpacity?: ChordCommonProps['arcOpacity']\n    activeArcOpacity?: ChordCommonProps['activeArcOpacity']\n    inactiveArcOpacity?: ChordCommonProps['inactiveArcOpacity']\n    ribbons: RibbonDatum[]\n    ribbonOpacity?: ChordCommonProps['ribbonOpacity']\n    activeRibbonOpacity?: ChordCommonProps['activeRibbonOpacity']\n    inactiveRibbonOpacity?: ChordCommonProps['inactiveRibbonOpacity']\n}) => {\n    const [currentArc, setCurrentArc] = useState<ArcDatum | null>(null)\n    const [currentRibbon, setCurrentRibbon] = useState<RibbonDatum | null>(null)\n\n    const selection = useMemo(() => {\n        const selectedArcIds = []\n        const selectedRibbonIds = []\n\n        if (currentArc) {\n            selectedArcIds.push(currentArc.id)\n            ribbons\n                .filter(\n                    ribbon =>\n                        ribbon.source.id === currentArc.id || ribbon.target.id === currentArc.id\n                )\n                .forEach(ribbon => {\n                    selectedRibbonIds.push(ribbon.id)\n                })\n        }\n\n        if (currentRibbon) {\n            selectedArcIds.push(currentRibbon.source.id)\n            selectedArcIds.push(currentRibbon.target.id)\n            selectedRibbonIds.push(currentRibbon.id)\n        }\n\n        return { selectedArcIds, selectedRibbonIds }\n    }, [currentArc, currentRibbon, ribbons])\n\n    const hasSelection =\n        selection.selectedArcIds.length > 1 || selection.selectedRibbonIds.length > 0\n\n    const getArcOpacity = useMemo(\n        () => (arc: ArcDatum) => {\n            if (!hasSelection) return arcOpacity\n\n            return selection.selectedArcIds.includes(arc.id) ? activeArcOpacity : inactiveArcOpacity\n        },\n        [hasSelection, selection.selectedArcIds, arcOpacity, activeArcOpacity, inactiveArcOpacity]\n    )\n    const getRibbonOpacity = useMemo(\n        () => (ribbon: RibbonDatum) => {\n            if (!hasSelection) return ribbonOpacity\n\n            return selection.selectedRibbonIds.includes(ribbon.id)\n                ? activeRibbonOpacity\n                : inactiveRibbonOpacity\n        },\n        [\n            hasSelection,\n            selection.selectedRibbonIds,\n            ribbonOpacity,\n            activeRibbonOpacity,\n            inactiveRibbonOpacity,\n        ]\n    )\n\n    return {\n        currentArc,\n        setCurrentArc,\n        currentRibbon,\n        setCurrentRibbon,\n        hasSelection,\n        ...selection,\n        getArcOpacity,\n        getRibbonOpacity,\n    }\n}\n\nexport const useCustomLayerProps = ({\n    center,\n    radius,\n    arcs,\n    arcGenerator,\n    ribbons,\n    ribbonGenerator,\n}: {\n    center: [number, number]\n    radius: number\n    arcs: ArcDatum[]\n    arcGenerator: any\n    ribbons: RibbonDatum[]\n    ribbonGenerator: any\n}): CustomLayerProps =>\n    useMemo(\n        () => ({\n            center,\n            radius,\n            arcs,\n            arcGenerator,\n            ribbons,\n            ribbonGenerator,\n        }),\n        [center, radius, arcs, arcGenerator, ribbons, ribbonGenerator]\n    )\n","import { createElement, memo, useMemo, MouseEvent } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ChordCommonProps,\n    ChordSvgProps,\n    RibbonAnimatedProps,\n    RibbonDatum,\n    RibbonGenerator,\n} from './types'\nimport { computeRibbonPath } from './compute'\n\ninterface ChordRibbonProps {\n    ribbon: RibbonDatum\n    ribbonGenerator: RibbonGenerator\n    animatedProps: SpringValues<RibbonAnimatedProps>\n    borderWidth: ChordCommonProps['ribbonBorderWidth']\n    blendMode: NonNullable<ChordSvgProps['ribbonBlendMode']>\n    setCurrent: (ribbon: RibbonDatum | null) => void\n    isInteractive: ChordCommonProps['isInteractive']\n    tooltip: NonNullable<ChordSvgProps['ribbonTooltip']>\n    onMouseEnter: ChordSvgProps['onRibbonMouseEnter']\n    onMouseMove: ChordSvgProps['onRibbonMouseMove']\n    onMouseLeave: ChordSvgProps['onRibbonMouseLeave']\n    onClick: ChordSvgProps['onRibbonClick']\n}\n\nexport const ChordRibbon = memo(\n    ({\n        ribbon,\n        ribbonGenerator,\n        animatedProps,\n        borderWidth,\n        blendMode,\n        isInteractive,\n        setCurrent,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordRibbonProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(ribbon)\n                showTooltipFromEvent(createElement(tooltip, { ribbon }), event)\n                onMouseEnter?.(ribbon, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, ribbon, onMouseEnter, setCurrent])\n\n        const handleMouseMove = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                showTooltipFromEvent(createElement(tooltip, { ribbon }), event)\n                onMouseMove?.(ribbon, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, ribbon, onMouseMove])\n\n        const handleMouseLeave = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(null)\n                hideTooltip()\n                onMouseLeave?.(ribbon, event)\n            }\n        }, [isInteractive, hideTooltip, ribbon, onMouseLeave, setCurrent])\n\n        const handleClick = useMemo(() => {\n            if (!isInteractive || !onClick) return undefined\n\n            return (event: MouseEvent) => onClick?.(ribbon, event)\n        }, [isInteractive, ribbon, onClick])\n\n        return (\n            <animated.path\n                data-testid={`ribbon.${ribbon.source.id}.${ribbon.target.id}`}\n                d={computeRibbonPath({\n                    sourceStartAngle: animatedProps.sourceStartAngle,\n                    sourceEndAngle: animatedProps.sourceEndAngle,\n                    targetStartAngle: animatedProps.targetStartAngle,\n                    targetEndAngle: animatedProps.targetEndAngle,\n                    ribbonGenerator,\n                })}\n                fill={animatedProps.color}\n                opacity={animatedProps.opacity}\n                strokeWidth={borderWidth}\n                stroke={animatedProps.borderColor}\n                style={{ mixBlendMode: blendMode }}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport {\n    useTheme,\n    // @ts-ignore\n    midAngle,\n    useMotionConfig,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { ChordRibbon } from './ChordRibbon'\nimport {\n    ChordCommonProps,\n    ChordSvgProps,\n    RibbonDatum,\n    RibbonAnimatedProps,\n    RibbonGenerator,\n    ArcDatum,\n} from './types'\n\n/**\n * Used to get ribbon angles, instead of using source and target arcs,\n * we sort arcs by value to have smooth transitions, otherwise,\n * if source|target arc value becomes greater than the other,\n * the ribbon will be reversed.\n */\nconst getRibbonAngles = ({ source, target }: RibbonDatum, useMiddleAngle: boolean) => {\n    let firstArc: ArcDatum\n    let secondArc: ArcDatum\n    if (source.startAngle < target.startAngle) {\n        firstArc = source\n        secondArc = target\n    } else {\n        firstArc = target\n        secondArc = source\n    }\n\n    if (useMiddleAngle) {\n        const firstMiddleAngle = midAngle(firstArc)\n        const secondMiddleAngle = midAngle(secondArc)\n\n        return {\n            sourceStartAngle: firstMiddleAngle,\n            sourceEndAngle: firstMiddleAngle,\n            targetStartAngle: secondMiddleAngle,\n            targetEndAngle: secondMiddleAngle,\n        }\n    }\n\n    return {\n        sourceStartAngle: firstArc.startAngle,\n        sourceEndAngle: firstArc.endAngle,\n        targetStartAngle: secondArc.startAngle,\n        targetEndAngle: secondArc.endAngle,\n    }\n}\n\ninterface ChordRibbonsProps {\n    ribbons: RibbonDatum[]\n    ribbonGenerator: RibbonGenerator\n    borderWidth: ChordCommonProps['ribbonBorderWidth']\n    borderColor: ChordCommonProps['ribbonBorderColor']\n    getOpacity: (ribbon: RibbonDatum) => number\n    blendMode: NonNullable<ChordSvgProps['ribbonBlendMode']>\n    isInteractive: ChordCommonProps['isInteractive']\n    setCurrent: (ribbon: RibbonDatum | null) => void\n    tooltip: NonNullable<ChordSvgProps['ribbonTooltip']>\n    onMouseEnter: ChordSvgProps['onRibbonMouseEnter']\n    onMouseMove: ChordSvgProps['onRibbonMouseMove']\n    onMouseLeave: ChordSvgProps['onRibbonMouseLeave']\n    onClick: ChordSvgProps['onRibbonClick']\n}\n\nexport const ChordRibbons = memo(\n    ({\n        ribbons,\n        ribbonGenerator,\n        borderWidth,\n        borderColor,\n        getOpacity,\n        blendMode,\n        isInteractive,\n        setCurrent,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordRibbonsProps) => {\n        const { animate, config: springConfig } = useMotionConfig()\n\n        const theme = useTheme()\n        const getBorderColor = useInheritedColor(borderColor, theme)\n\n        const transition = useTransition<RibbonDatum, RibbonAnimatedProps>(ribbons, {\n            keys: ribbon => ribbon.id,\n            initial: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: getOpacity(ribbon),\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            from: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: 0,\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            update: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: getOpacity(ribbon),\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            leave: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: 0,\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            expires: true,\n            config: springConfig,\n            immediate: !animate,\n        })\n\n        return (\n            <>\n                {transition((animatedProps, ribbon) => (\n                    <ChordRibbon\n                        key={ribbon.id}\n                        ribbon={ribbon}\n                        ribbonGenerator={ribbonGenerator}\n                        animatedProps={animatedProps}\n                        borderWidth={borderWidth}\n                        blendMode={blendMode}\n                        setCurrent={setCurrent}\n                        isInteractive={isInteractive}\n                        tooltip={tooltip}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                    />\n                ))}\n            </>\n        )\n    }\n)\n","import { createElement, memo, useMemo, MouseEvent } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ArcAnimatedProps, ArcDatum, ArcGenerator, ChordCommonProps } from './types'\nimport { computeArcPath } from './compute'\n\ninterface ChordArcProps {\n    arc: ArcDatum\n    animatedProps: SpringValues<ArcAnimatedProps>\n    arcGenerator: ArcGenerator\n    borderWidth: number\n    setCurrent: (arc: ArcDatum | null) => void\n    isInteractive: ChordCommonProps['isInteractive']\n    onMouseEnter?: ChordCommonProps['onArcMouseEnter']\n    onMouseMove?: ChordCommonProps['onArcMouseMove']\n    onMouseLeave?: ChordCommonProps['onArcMouseLeave']\n    onClick?: ChordCommonProps['onArcClick']\n    tooltip: ChordCommonProps['arcTooltip']\n}\n\nexport const ChordArc = memo(\n    ({\n        arc,\n        animatedProps,\n        borderWidth,\n        arcGenerator,\n        setCurrent,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordArcProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(arc)\n                showTooltipFromEvent(createElement(tooltip, { arc }), event)\n                onMouseEnter?.(arc, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, arc, onMouseEnter, setCurrent])\n\n        const handleMouseMove = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                showTooltipFromEvent(createElement(tooltip, { arc }), event)\n                onMouseMove?.(arc, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, arc, onMouseMove])\n\n        const handleMouseLeave = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(null)\n                hideTooltip()\n                onMouseLeave?.(arc, event)\n            }\n        }, [isInteractive, hideTooltip, arc, onMouseLeave, setCurrent])\n\n        const handleClick = useMemo(() => {\n            if (!isInteractive || !onClick) return undefined\n\n            return (event: MouseEvent) => onClick?.(arc, event)\n        }, [isInteractive, arc, onClick])\n\n        return (\n            <animated.path\n                data-testid={`arc.${arc.id}`}\n                d={computeArcPath({\n                    startAngle: animatedProps.startAngle,\n                    endAngle: animatedProps.endAngle,\n                    arcGenerator,\n                })}\n                fill={animatedProps.color}\n                opacity={animatedProps.opacity}\n                strokeWidth={borderWidth}\n                stroke={animatedProps.borderColor}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { ChordArc } from './ChordArc'\nimport { ArcDatum, ArcGenerator, ChordCommonProps, ArcAnimatedProps } from './types'\n\ninterface ChordArcsProps {\n    arcs: ArcDatum[]\n    arcGenerator: ArcGenerator\n    borderWidth: ChordCommonProps['arcBorderWidth']\n    borderColor: ChordCommonProps['arcBorderColor']\n    getOpacity: (arc: ArcDatum) => number\n    setCurrent: (arc: ArcDatum | null) => void\n    isInteractive: ChordCommonProps['isInteractive']\n    onMouseEnter?: ChordCommonProps['onArcMouseEnter']\n    onMouseMove?: ChordCommonProps['onArcMouseMove']\n    onMouseLeave?: ChordCommonProps['onArcMouseLeave']\n    onClick?: ChordCommonProps['onArcClick']\n    tooltip: ChordCommonProps['arcTooltip']\n}\n\nexport const ChordArcs = memo(\n    ({\n        arcs,\n        borderWidth,\n        borderColor,\n        getOpacity,\n        arcGenerator,\n        setCurrent,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordArcsProps) => {\n        const { animate, config: springConfig } = useMotionConfig()\n\n        const theme = useTheme()\n        const getBorderColor = useInheritedColor(borderColor, theme)\n\n        const transition = useTransition<ArcDatum, ArcAnimatedProps>(arcs, {\n            keys: arc => arc.id,\n            initial: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: getOpacity(arc),\n                borderColor: getBorderColor(arc),\n            }),\n            from: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: 0,\n                borderColor: getBorderColor(arc),\n            }),\n            update: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: getOpacity(arc),\n                borderColor: getBorderColor(arc),\n            }),\n            leave: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: 0,\n                borderColor: getBorderColor(arc),\n            }),\n            expires: true,\n            config: springConfig,\n            immediate: !animate,\n        })\n\n        return (\n            <>\n                {transition((animatedProps, arc) => (\n                    <ChordArc\n                        key={arc.id}\n                        arc={arc}\n                        arcGenerator={arcGenerator}\n                        animatedProps={animatedProps}\n                        borderWidth={borderWidth}\n                        setCurrent={setCurrent}\n                        isInteractive={isInteractive}\n                        tooltip={tooltip}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                    />\n                ))}\n            </>\n        )\n    }\n)\n","import { memo, useMemo } from 'react'\nimport { useTransition, animated, to } from '@react-spring/web'\nimport {\n    // @ts-ignore\n    midAngle,\n    // @ts-ignore\n    getPolarLabelProps,\n    useTheme,\n} from '@nivo/core'\nimport { useMotionConfig } from '@nivo/core'\nimport { ArcDatum, ChordCommonProps } from './types'\nimport { useInheritedColor } from '@nivo/colors'\n\ninterface ChordLabelsProps {\n    arcs: ArcDatum[]\n    radius: number\n    rotation: number\n    color: ChordCommonProps['labelTextColor']\n}\n\nexport const ChordLabels = memo(({ arcs, radius, rotation, color }: ChordLabelsProps) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    const labels = useMemo(\n        () =>\n            arcs.map(arc => {\n                const angle = midAngle(arc)\n                const textProps = getPolarLabelProps(radius, angle, rotation)\n\n                return {\n                    id: arc.id,\n                    label: arc.label,\n                    x: textProps.x,\n                    y: textProps.y,\n                    rotation: textProps.rotate,\n                    color: getColor(arc),\n                    textAnchor: textProps.align,\n                    dominantBaseline: textProps.baseline,\n                }\n            }),\n        [arcs, radius, rotation, getColor]\n    )\n\n    const transition = useTransition<\n        typeof labels[number],\n        {\n            x: number\n            y: number\n            rotation: number\n            color: string\n        }\n    >(labels, {\n        keys: label => label.id,\n        initial: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        from: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        enter: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        update: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        expires: true,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, label) => (\n                <animated.text\n                    key={label.id}\n                    data-testid={`label.${label.id}`}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: transitionProps.color,\n                    }}\n                    transform={to(\n                        [transitionProps.x, transitionProps.y, transitionProps.rotation],\n                        (x, y, rotation) => `translate(${x}, ${y}) rotate(${rotation})`\n                    )}\n                    textAnchor={label.textAnchor}\n                    dominantBaseline={label.dominantBaseline}\n                >\n                    {label.label}\n                </animated.text>\n            ))}\n        </>\n    )\n})\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { svgDefaultProps } from './defaults'\nimport { useChord, useChordSelection, useCustomLayerProps } from './hooks'\nimport { ChordRibbons } from './ChordRibbons'\nimport { ChordArcs } from './ChordArcs'\nimport { ChordLabels } from './ChordLabels'\nimport { ChordSvgProps, LayerId } from './types'\n\ntype InnerChordProps = Omit<ChordSvgProps, 'animate' | 'motionConfig' | 'renderWrapper' | 'theme'>\n\nconst InnerChord = ({\n    data,\n    keys,\n    label,\n    valueFormat,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    innerRadiusRatio = svgDefaultProps.innerRadiusRatio,\n    innerRadiusOffset = svgDefaultProps.innerRadiusOffset,\n    padAngle = svgDefaultProps.padAngle,\n\n    layers = svgDefaultProps.layers,\n\n    colors = svgDefaultProps.colors,\n\n    arcBorderWidth = svgDefaultProps.arcBorderWidth,\n    arcBorderColor = svgDefaultProps.arcBorderColor,\n    arcOpacity = svgDefaultProps.arcOpacity,\n    activeArcOpacity = svgDefaultProps.activeArcOpacity,\n    inactiveArcOpacity = svgDefaultProps.inactiveArcOpacity,\n    arcTooltip = svgDefaultProps.arcTooltip,\n\n    ribbonBorderWidth = svgDefaultProps.ribbonBorderWidth,\n    ribbonBorderColor = svgDefaultProps.ribbonBorderColor,\n    ribbonBlendMode = svgDefaultProps.ribbonBlendMode,\n    ribbonOpacity = svgDefaultProps.ribbonOpacity,\n    activeRibbonOpacity = svgDefaultProps.activeRibbonOpacity,\n    inactiveRibbonOpacity = svgDefaultProps.inactiveRibbonOpacity,\n    ribbonTooltip = svgDefaultProps.ribbonTooltip,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    labelOffset = svgDefaultProps.labelOffset,\n    labelRotation = svgDefaultProps.labelRotation,\n    labelTextColor = svgDefaultProps.labelTextColor,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    onArcMouseEnter,\n    onArcMouseMove,\n    onArcMouseLeave,\n    onArcClick,\n    onRibbonMouseEnter,\n    onRibbonMouseMove,\n    onRibbonMouseLeave,\n    onRibbonClick,\n\n    legends = svgDefaultProps.legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerChordProps) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { center, radius, arcGenerator, ribbonGenerator, arcs, ribbons } = useChord({\n        data,\n        keys,\n        label,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        innerRadiusRatio,\n        innerRadiusOffset,\n        padAngle,\n        colors,\n    })\n\n    const { setCurrentArc, setCurrentRibbon, getArcOpacity, getRibbonOpacity } = useChordSelection({\n        arcOpacity,\n        activeArcOpacity,\n        inactiveArcOpacity,\n        ribbons,\n        ribbonOpacity,\n        activeRibbonOpacity,\n        inactiveRibbonOpacity,\n    })\n\n    const customLayerProps = useCustomLayerProps({\n        center,\n        radius,\n        arcs,\n        arcGenerator,\n        ribbons,\n        ribbonGenerator,\n    })\n\n    if (radius <= 0) return null\n\n    const legendData = arcs.map(arc => ({\n        id: arc.id,\n        label: arc.label,\n        color: arc.color,\n    }))\n\n    const layerById: Record<LayerId, ReactNode> = {\n        ribbons: null,\n        arcs: null,\n        labels: null,\n        legends: null,\n    }\n\n    if (layers.includes('ribbons')) {\n        layerById.ribbons = (\n            <g key=\"ribbons\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordRibbons\n                    ribbons={ribbons}\n                    ribbonGenerator={ribbonGenerator}\n                    borderWidth={ribbonBorderWidth}\n                    borderColor={ribbonBorderColor}\n                    getOpacity={getRibbonOpacity}\n                    blendMode={ribbonBlendMode}\n                    setCurrent={setCurrentRibbon}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onRibbonMouseEnter}\n                    onMouseMove={onRibbonMouseMove}\n                    onMouseLeave={onRibbonMouseLeave}\n                    onClick={onRibbonClick}\n                    tooltip={ribbonTooltip}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <g key=\"arcs\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordArcs\n                    arcs={arcs}\n                    arcGenerator={arcGenerator}\n                    borderWidth={arcBorderWidth}\n                    borderColor={arcBorderColor}\n                    getOpacity={getArcOpacity}\n                    setCurrent={setCurrentArc}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onArcMouseEnter}\n                    onMouseMove={onArcMouseMove}\n                    onMouseLeave={onArcMouseLeave}\n                    onClick={onArcClick}\n                    tooltip={arcTooltip}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('labels') && enableLabel) {\n        layerById.labels = (\n            <g key=\"labels\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordLabels\n                    arcs={arcs}\n                    radius={radius + labelOffset}\n                    rotation={labelRotation}\n                    color={labelTextColor}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('legends') && legends.length > 0) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Chord = ({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: ChordSvgProps) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerChord isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { createElement, useRef, useEffect, useCallback, MouseEvent } from 'react'\nimport {\n    useDimensions,\n    useTheme,\n    // @ts-ignore\n    midAngle,\n    // @ts-ignore\n    getPolarLabelProps,\n    degreesToRadians,\n    getRelativeCursor,\n    Margin,\n    Container,\n} from '@nivo/core'\nimport { findArcUnderCursor } from '@nivo/arcs'\nimport { useInheritedColor } from '@nivo/colors'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useChord, useChordSelection, useCustomLayerProps } from './hooks'\nimport { ArcDatum, ChordCanvasProps } from './types'\nimport { canvasDefaultProps } from './defaults'\n\nconst getArcFromMouseEvent = ({\n    event,\n    canvasEl,\n    center,\n    margin,\n    radius,\n    innerRadius,\n    arcs,\n}: {\n    event: MouseEvent\n    canvasEl: HTMLCanvasElement\n    center: [number, number]\n    margin: Margin\n    radius: number\n    innerRadius: number\n    arcs: ArcDatum[]\n}) => {\n    const [x, y] = getRelativeCursor(canvasEl, event)\n    const centerX = margin.left + center[0]\n    const centerY = margin.top + center[1]\n\n    return findArcUnderCursor(centerX, centerY, radius, innerRadius, arcs as any[], x, y)\n}\n\ntype InnerChordCanvasProps = Omit<ChordCanvasProps, 'renderWrapper' | 'theme'>\n\nconst InnerChordCanvas = ({\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    margin: partialMargin,\n    data,\n    keys,\n    width,\n    height,\n    label = canvasDefaultProps.label,\n    valueFormat,\n    innerRadiusRatio = canvasDefaultProps.innerRadiusRatio,\n    innerRadiusOffset = canvasDefaultProps.innerRadiusOffset,\n    padAngle = canvasDefaultProps.padAngle,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    arcBorderWidth = canvasDefaultProps.arcBorderWidth,\n    arcBorderColor = canvasDefaultProps.arcBorderColor,\n    arcOpacity = canvasDefaultProps.arcOpacity,\n    activeArcOpacity = canvasDefaultProps.activeArcOpacity,\n    inactiveArcOpacity = canvasDefaultProps.inactiveArcOpacity,\n    arcTooltip = canvasDefaultProps.arcTooltip,\n    ribbonBorderWidth = canvasDefaultProps.ribbonBorderWidth,\n    ribbonBorderColor = canvasDefaultProps.ribbonBorderColor,\n    ribbonOpacity = canvasDefaultProps.ribbonOpacity,\n    activeRibbonOpacity = canvasDefaultProps.activeRibbonOpacity,\n    inactiveRibbonOpacity = canvasDefaultProps.inactiveRibbonOpacity,\n    enableLabel = canvasDefaultProps.enableLabel,\n    labelOffset = canvasDefaultProps.labelOffset,\n    labelRotation = canvasDefaultProps.labelRotation,\n    labelTextColor = canvasDefaultProps.labelTextColor,\n    isInteractive = canvasDefaultProps.isInteractive,\n    onArcMouseEnter,\n    onArcMouseMove,\n    onArcMouseLeave,\n    onArcClick,\n    legends = canvasDefaultProps.legends,\n}: InnerChordCanvasProps) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const { innerWidth, innerHeight, outerWidth, outerHeight, margin } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { center, radius, innerRadius, arcGenerator, ribbonGenerator, arcs, ribbons } = useChord({\n        data,\n        keys,\n        label,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        innerRadiusRatio,\n        innerRadiusOffset,\n        padAngle,\n        colors,\n    })\n\n    const { currentArc, setCurrentArc, getArcOpacity, getRibbonOpacity } = useChordSelection({\n        arcOpacity,\n        activeArcOpacity,\n        inactiveArcOpacity,\n        ribbons,\n        ribbonOpacity,\n        activeRibbonOpacity,\n        inactiveRibbonOpacity,\n    })\n\n    const theme = useTheme()\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const getArcBorderColor = useInheritedColor(arcBorderColor, theme)\n    const getRibbonBorderColor = useInheritedColor(ribbonBorderColor, theme)\n\n    const layerContext = useCustomLayerProps({\n        center,\n        radius,\n        arcs,\n        arcGenerator,\n        ribbons,\n        ribbonGenerator,\n    })\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        if (radius <= 0) return\n\n        layers.forEach(layer => {\n            if (layer === 'ribbons') {\n                ctx.save()\n                ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                ribbonGenerator.context(ctx)\n                ribbons.forEach(ribbon => {\n                    ctx.save()\n\n                    ctx.globalAlpha = getRibbonOpacity(ribbon)\n                    ctx.fillStyle = ribbon.source.color\n                    ctx.beginPath()\n                    ribbonGenerator(ribbon)\n                    ctx.fill()\n\n                    if (ribbonBorderWidth > 0) {\n                        ctx.strokeStyle = getRibbonBorderColor(ribbon.source)\n                        ctx.lineWidth = ribbonBorderWidth\n                        ctx.stroke()\n                    }\n\n                    ctx.restore()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'arcs') {\n                ctx.save()\n                ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                arcGenerator.context(ctx)\n                arcs.forEach(arc => {\n                    ctx.save()\n\n                    ctx.globalAlpha = getArcOpacity(arc)\n                    ctx.fillStyle = arc.color\n                    ctx.beginPath()\n                    arcGenerator(arc)\n                    ctx.fill()\n\n                    if (arcBorderWidth > 0) {\n                        ctx.strokeStyle = getArcBorderColor(arc)\n                        ctx.lineWidth = arcBorderWidth\n                        ctx.stroke()\n                    }\n\n                    ctx.restore()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'labels' && enableLabel === true) {\n                ctx.save()\n                ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                ctx.font = `${theme.labels.text.fontSize}px ${\n                    theme.labels.text.fontFamily || 'sans-serif'\n                }`\n\n                arcs.forEach(arc => {\n                    const angle = midAngle(arc)\n                    const props = getPolarLabelProps(radius + labelOffset, angle, labelRotation)\n\n                    ctx.save()\n                    ctx.translate(props.x, props.y)\n                    ctx.rotate(degreesToRadians(props.rotate))\n\n                    ctx.textAlign = props.align\n                    ctx.textBaseline = props.baseline\n                    ctx.fillStyle = getLabelTextColor(arc)\n                    ctx.fillText(arc.label, 0, 0)\n\n                    ctx.restore()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'legends') {\n                ctx.save()\n                ctx.translate(margin.left, margin.top)\n\n                const legendData = arcs.map(arc => ({\n                    id: arc.id,\n                    label: arc.label,\n                    color: arc.color,\n                }))\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n\n                ctx.restore()\n            }\n\n            if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin,\n        pixelRatio,\n        center,\n        radius,\n        theme,\n        layers,\n        arcs,\n        arcGenerator,\n        getArcOpacity,\n        arcBorderWidth,\n        getArcBorderColor,\n        ribbons,\n        ribbonGenerator,\n        getRibbonOpacity,\n        ribbonBorderWidth,\n        getRibbonBorderColor,\n        enableLabel,\n        labelOffset,\n        labelRotation,\n        getLabelTextColor,\n        legends,\n        layerContext,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            if (canvasEl.current === null) return\n\n            const arc = getArcFromMouseEvent({\n                event,\n                canvasEl: canvasEl.current,\n                center,\n                margin,\n                radius,\n                innerRadius,\n                arcs,\n            })\n\n            if (arc) {\n                setCurrentArc(arc)\n                showTooltipFromEvent(createElement(arcTooltip, { arc }), event)\n                !currentArc && onArcMouseEnter && onArcMouseEnter(arc, event)\n                onArcMouseMove && onArcMouseMove(arc, event)\n                currentArc &&\n                    currentArc.id !== arc.id &&\n                    onArcMouseLeave &&\n                    onArcMouseLeave(arc, event)\n            } else {\n                setCurrentArc(null)\n                hideTooltip()\n                currentArc && onArcMouseLeave && onArcMouseLeave(currentArc, event)\n            }\n        },\n        [\n            canvasEl,\n            center,\n            margin,\n            radius,\n            innerRadius,\n            arcs,\n            setCurrentArc,\n            currentArc,\n            showTooltipFromEvent,\n            hideTooltip,\n            arcTooltip,\n            onArcMouseEnter,\n            onArcMouseMove,\n            onArcMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setCurrentArc(null)\n        hideTooltip()\n    }, [setCurrentArc, hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            if (canvasEl.current === null || !onArcClick) return\n\n            const arc = getArcFromMouseEvent({\n                event,\n                canvasEl: canvasEl.current,\n                center,\n                margin,\n                radius,\n                innerRadius,\n                arcs,\n            })\n\n            arc && onArcClick(arc, event)\n        },\n        [canvasEl, center, margin, radius, innerRadius, arcs, onArcClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const ChordCanvas = ({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: ChordCanvasProps) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerChordCanvas isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Chord } from './Chord'\nimport { ChordSvgProps } from './types'\n\nexport const ResponsiveChord = (props: Omit<ChordSvgProps, 'width' | 'height'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Chord {...props} width={width} height={height} />}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ChordCanvas } from './ChordCanvas'\nimport { ChordCanvasProps } from './types'\n\nexport const ResponsiveChordCanvas = (props: Omit<ChordCanvasProps, 'width' | 'height'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ChordCanvas {...props} width={width} height={height} />}\n    </ResponsiveWrapper>\n)\n"],"names":["a","b","NaN","compare","length","f","d","x","array","Array","prototype","slice","map","Math","sqrt","start","stop","step","n","arguments","i","max","ceil","range","cos","sin","pi","PI","halfPi","tau","compareValue","source","value","target","defaultSource","defaultTarget","defaultRadius","radius","defaultStartAngle","startAngle","defaultEndAngle","endAngle","context","ribbon","buffer","argv","s","apply","this","t","sr","sa0","sa1","sx0","sy0","tr","ta0","ta1","path","moveTo","arc","quadraticCurveTo","closePath","_","ChordArcTooltip","memo","id","color","enableChip","ChordRibbonTooltip","rows","label","commonDefaultProps","layers","padAngle","innerRadiusRatio","innerRadiusOffset","colors","scheme","arcOpacity","activeArcOpacity","inactiveArcOpacity","arcBorderWidth","arcBorderColor","from","modifiers","arcTooltip","ribbonOpacity","activeRibbonOpacity","inactiveRibbonOpacity","ribbonBorderWidth","ribbonBorderColor","ribbonBlendMode","enableLabel","labelOffset","labelRotation","labelTextColor","isInteractive","legends","animate","motionConfig","role","svgDefaultProps","ribbonTooltip","canvasDefaultProps","pixelRatio","window","computeChordLayout","sortGroups","sortSubgroups","sortChords","chord","matrix","k","x0","dx","j","groupSums","groupIndex","subgroupIndex","chords","groups","subgroups","push","sort","forEach","di","dj","v","a0","a1","index","subindex","d3Chord","computeArcPath","arcGenerator","to","computeRibbonPath","sourceStartAngle","sourceEndAngle","targetStartAngle","targetEndAngle","ribbonGenerator","useChordGenerators","width","height","useMemo","center","innerRadius","ribbonRadius","d3Arc","d3Ribbon","computeChordGenerators","useChordArcsAndRibbons","getColor","keys","data","getLabel","formatValue","_ribbons","arcs","chordGroup","formattedValue","ribbons","_ribbon","computeChordArcsAndRibbons","useChord","valueFormat","useChordLayout","getLabelGenerator","useValueFormatter","useOrdinalColorScale","useChordSelection","useState","currentArc","setCurrentArc","currentRibbon","setCurrentRibbon","selection","selectedArcIds","selectedRibbonIds","hasSelection","getArcOpacity","getRibbonOpacity","useCustomLayerProps","ChordRibbon","animatedProps","borderWidth","blendMode","setCurrent","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","handleClick","fill","opacity","strokeWidth","stroke","style","mixBlendMode","getRibbonAngles","firstArc","secondArc","firstMiddleAngle","midAngle","secondMiddleAngle","ChordRibbons","borderColor","getOpacity","useMotionConfig","springConfig","theme","useTheme","getBorderColor","useInheritedColor","transition","useTransition","initial","update","leave","expires","config","immediate","ChordArc","ChordArcs","ChordLabels","rotation","labels","angle","textProps","getPolarLabelProps","y","textAnchor","dominantBaseline","baseline","enter","pointerEvents","transitionProps","transform","InnerChord","partialMargin","margin","onArcMouseEnter","onArcMouseMove","onArcMouseLeave","onArcClick","onRibbonMouseEnter","onRibbonMouseMove","onRibbonMouseLeave","onRibbonClick","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","customLayerProps","legendData","layerById","containerWidth","containerHeight","layer","Chord","renderWrapper","otherProps","getArcFromMouseEvent","event","canvasEl","getRelativeCursor","centerX","centerY","findArcUnderCursor","InnerChordCanvas","useRef","getLabelTextColor","getArcBorderColor","getRibbonBorderColor","layerContext","useEffect","ctx","props","degreesToRadians","legend","renderLegendToCanvas","handleMouseHover","useCallback","ref","cursor","undefined","ChordCanvas","ResponsiveChord","ResponsiveChordCanvas"],"sourceRoot":""}