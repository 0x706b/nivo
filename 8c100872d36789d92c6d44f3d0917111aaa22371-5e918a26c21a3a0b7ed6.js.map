{"version":3,"file":"8c100872d36789d92c6d44f3d0917111aaa22371-5e918a26c21a3a0b7ed6.js","mappings":"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","sources":["webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack://nivo-website/../src/utils.ts","webpack://nivo-website/../src/arcTransitionMode.ts","webpack://nivo-website/../src/centers.ts","webpack://nivo-website/../src/arc_labels/ArcLabel.tsx","webpack://nivo-website/../src/arc_labels/ArcLabelsLayer.tsx","webpack://nivo-website/../src/arc_labels/canvas.ts","webpack://nivo-website/../src/arc_labels/useArcLabels.ts","webpack://nivo-website/../src/arc_link_labels/compute.ts","webpack://nivo-website/../src/arc_link_labels/useArcLinkLabelsTransition.ts","webpack://nivo-website/../src/arc_link_labels/ArcLinkLabel.tsx","webpack://nivo-website/../src/arc_link_labels/ArcLinkLabelsLayer.tsx","webpack://nivo-website/../src/arc_link_labels/canvas.ts","webpack://nivo-website/../src/arc_link_labels/useArcLinkLabels.ts","webpack://nivo-website/../src/arc_link_labels/useArcLinks.ts","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://nivo-website/../src/ArcLine.tsx","webpack://nivo-website/../src/ArcShape.tsx","webpack://nivo-website/../src/interpolateArc.ts","webpack://nivo-website/../src/ArcsLayer.tsx","webpack://nivo-website/../src/useArcsTransition.ts","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://nivo-website/../src/boundingBox.ts","webpack://nivo-website/../src/interactivity.ts","webpack://nivo-website/../src/useArcGenerator.ts"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import { useMemo } from 'react'\nimport { radiansToDegrees, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { DatumWithArc } from './types'\n\n/**\n * Make sure an angle (expressed in radians)\n * always falls in the range 0~2*PI.\n */\nexport const getNormalizedAngle = (angle: number) => {\n    let normalizedAngle = angle % (Math.PI * 2)\n    if (normalizedAngle < 0) {\n        normalizedAngle += Math.PI * 2\n    }\n\n    return normalizedAngle\n}\n\n/**\n * Filter out arcs with a length below `skipAngle`.\n */\nexport const filterDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) =>\n    data.filter(\n        datum => Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >= skipAngle\n    )\n\n/**\n * Memoized version of `filterDataBySkipAngle`.\n */\nexport const useFilteredDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) => useMemo(() => filterDataBySkipAngle(data, skipAngle), [data, skipAngle])\n\nexport const svgEllipticalArcCommand = (\n    radius: number,\n    largeArcFlag: 0 | 1,\n    sweepFlag: 0 | 1,\n    x: number,\n    y: number\n) =>\n    [\n        'A',\n        radius,\n        radius,\n        0, // x-axis-rotation\n        largeArcFlag,\n        sweepFlag,\n        x,\n        y,\n    ].join(' ')\n\nexport const generateSvgArc = (\n    radius: number,\n    originalStartAngle: number,\n    originalEndAngle: number\n): string => {\n    const startAngle = Math.min(originalStartAngle, originalEndAngle)\n    const endAngle = Math.max(originalStartAngle, originalEndAngle)\n\n    const start = positionFromAngle(degreesToRadians(endAngle), radius)\n    const end = positionFromAngle(degreesToRadians(startAngle), radius)\n\n    // we have a full circle, we cannot use a single elliptical arc\n    // to draw it, so we use 2 in that case.\n    if (endAngle - startAngle >= 360) {\n        const mid = positionFromAngle(degreesToRadians(startAngle + 180), radius)\n\n        return [\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 1, mid.x, mid.y),\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 0, mid.x, mid.y),\n        ].join(' ')\n    }\n\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1\n\n    return [\n        `M ${start.x} ${start.y}`,\n        svgEllipticalArcCommand(radius, largeArcFlag, 0, end.x, end.y),\n    ].join(' ')\n}\n","import { Arc, DatumWithArc } from './types'\nimport { useMemo } from 'react'\n\nexport interface ArcTransitionModeConfig {\n    enter: (arc: Arc) => Arc\n    update: (arc: Arc) => Arc\n    leave: (arc: Arc) => Arc\n}\n\nexport const arcTransitionModes = [\n    'startAngle',\n    'middleAngle',\n    'endAngle',\n    'innerRadius',\n    'centerRadius',\n    'outerRadius',\n    'pushIn',\n    'pushOut',\n] as const\nexport type ArcTransitionMode = typeof arcTransitionModes[number]\n\nexport const arcTransitionModeById: Record<ArcTransitionMode, ArcTransitionModeConfig> = {\n    startAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n    },\n    middleAngle: {\n        enter: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n    },\n    endAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n    },\n    innerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n    },\n    centerRadius: {\n        enter: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n    },\n    outerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n    pushIn: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n    },\n    pushOut: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n}\n\nexport interface TransitionExtra<Datum extends DatumWithArc, ExtraProps> {\n    enter: (datum: Datum) => ExtraProps\n    update: (datum: Datum) => ExtraProps\n    leave: (datum: Datum) => ExtraProps\n}\n\nexport const useArcTransitionMode = <Datum extends DatumWithArc, ExtraProps>(\n    mode: ArcTransitionMode,\n    extraTransition?: TransitionExtra<Datum, ExtraProps>\n) =>\n    useMemo(() => {\n        const transitionMode = arcTransitionModeById[mode]\n\n        return {\n            enter: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.enter(datum.arc),\n                ...(extraTransition ? extraTransition.enter(datum) : {}),\n            }),\n            update: (datum: Datum) => ({\n                progress: 1,\n                ...transitionMode.update(datum.arc),\n                ...(extraTransition ? extraTransition.update(datum) : {}),\n            }),\n            leave: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.leave(datum.arc),\n                ...(extraTransition ? extraTransition.leave(datum) : {}),\n            }),\n        }\n    }, [mode, extraTransition])\n","import { useMemo } from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport {\n    // @ts-ignore\n    midAngle,\n    positionFromAngle,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Arc, DatumWithArc, Point } from './types'\nimport { filterDataBySkipAngle } from './utils'\nimport { ArcTransitionMode, TransitionExtra, useArcTransitionMode } from './arcTransitionMode'\n\nexport const computeArcCenter = (arc: Arc, offset: number): Point => {\n    const angle = midAngle(arc) - Math.PI / 2\n    const radius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) * offset\n\n    return positionFromAngle(angle, radius)\n}\n\nexport const interpolateArcCenter = (offset: number) => (\n    startAngleValue: SpringValue<number>,\n    endAngleValue: SpringValue<number>,\n    innerRadiusValue: SpringValue<number>,\n    outerRadiusValue: SpringValue<number>\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            const centroid = computeArcCenter(\n                { startAngle, endAngle, innerRadius, outerRadius },\n                offset\n            )\n\n            return `translate(${centroid.x},${centroid.y})`\n        }\n    )\n\nexport const useArcCentersTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset = 0.5,\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArcCenter(offset),\n    }\n}\n\nexport interface ArcCenter<Datum extends DatumWithArc> extends Point {\n    data: Datum\n}\n\n/**\n * Compute an array of arc centers from an array of data containing arcs.\n *\n * If you plan to animate those, you could use `useArcCentersTransition`\n * instead, you could use the returned array with react-spring `useTransition`,\n * but this would lead to cartesian transitions (x/y), while `useArcCentersTransition`\n * will generate proper transitions using radius/angle.\n */\nexport const useArcCenters = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    offset = 0.5,\n    skipAngle = 0,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset?: number\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // this can be used to append extra properties to the centers,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: Datum) => ExtraProps\n}): (ArcCenter<Datum> & ExtraProps)[] =>\n    useMemo(\n        () =>\n            filterDataBySkipAngle<Datum>(data, skipAngle)\n                // compute position and extra props for each eligible datum\n                .map(datum => {\n                    const position = computeArcCenter(datum.arc, offset)\n\n                    return {\n                        ...computeExtraProps(datum),\n                        x: position.x,\n                        y: position.y,\n                        data: datum,\n                    }\n                }),\n        [data, offset, skipAngle, computeExtraProps]\n    )\n","import { CSSProperties } from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\n\nconst staticStyle: CSSProperties = {\n    pointerEvents: 'none',\n}\n\nexport interface ArcLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        progress: SpringValue<number>\n        transform: Interpolation<string>\n        textColor: string\n    }\n}\n\nexport const ArcLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={style.transform} opacity={style.progress} style={staticStyle}>\n            <animated.text\n                textAnchor=\"middle\"\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { createElement, useMemo } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, radiansToDegrees, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useArcCentersTransition } from '../centers'\nimport { ArcTransitionMode } from '../arcTransitionMode'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabelsProps } from './props'\nimport { ArcLabel, ArcLabelProps } from './ArcLabel'\n\nexport type ArcLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: PropertyAccessor<Datum, string>\n    radiusOffset: ArcLabelsProps<Datum>['arcLabelsRadiusOffset']\n    skipAngle: ArcLabelsProps<Datum>['arcLabelsSkipAngle']\n    textColor: ArcLabelsProps<Datum>['arcLabelsTextColor']\n    transitionMode: ArcTransitionMode\n    component?: ArcLabelsProps<Datum>['arcLabelsComponent']\n}\n\nexport const ArcLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    transitionMode,\n    label: labelAccessor,\n    radiusOffset,\n    skipAngle,\n    textColor,\n    component = ArcLabel,\n}: ArcLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useMemo(\n        () =>\n            data.filter(datum => {\n                return (\n                    Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                    skipAngle\n                )\n            }),\n        [data, skipAngle]\n    )\n\n    const { transition, interpolate } = useArcCentersTransition<Datum>(\n        filteredData,\n        radiusOffset,\n        transitionMode\n    )\n\n    const Label: ArcLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        transform: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textColor: getTextColor(datum),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabel } from './useArcLabels'\n\nexport const drawCanvasArcLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLabel<Datum>[],\n    theme: CompleteTheme\n) => {\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.fillText(`${label.label}`, label.x, label.y)\n    })\n}\n","import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcCenters, ArcCenter } from '../centers'\n\nexport interface ArcLabel<Datum extends DatumWithArcAndColor> extends ArcCenter<Datum> {\n    label: string\n    textColor: string\n}\n\n/**\n * Compute arc labels, please note that the datum should\n * contain a color in order to be able to compute the label text color.\n *\n * Please see `useArcCenters` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset,\n    skipAngle,\n    label,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    skipAngle?: number\n    label: PropertyAccessor<Datum, string>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (datum: Datum) => {\n            return {\n                label: getLabel(datum),\n                textColor: getTextColor(datum),\n            }\n        },\n        [getLabel, getTextColor]\n    )\n\n    return useArcCenters<Datum, Omit<ArcLabel<Datum>, keyof ArcCenter<Datum>>>({\n        data,\n        offset,\n        skipAngle,\n        computeExtraProps,\n    })\n}\n","import { positionFromAngle } from '@nivo/core'\nimport { Arc, Point } from '../types'\nimport { getNormalizedAngle } from '../utils'\nimport { ArcLink } from './types'\n\n/**\n * Compute text anchor for a given arc.\n *\n * `computeArcLink` already computes a `side`, but when using\n * `react-spring`, you cannot have a single interpolation\n * returning several output values, so we need to compute\n * them in separate interpolations.\n */\nexport const computeArcLinkTextAnchor = (arc: Arc): 'start' | 'end' => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        return 'start'\n    }\n\n    return 'end'\n}\n\n/**\n * Compute the link of a single arc, returning its points,\n * please note that points coordinates are relative to\n * the center of the arc.\n */\nexport const computeArcLink = (\n    arc: Arc,\n    offset: number,\n    diagonalLength: number,\n    straightLength: number\n): ArcLink => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n    const point0: Point = positionFromAngle(centerAngle, arc.outerRadius + offset)\n    const point1: Point = positionFromAngle(centerAngle, arc.outerRadius + offset + diagonalLength)\n\n    let side: ArcLink['side']\n    let point2: Point\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        side = 'after'\n        point2 = {\n            x: point1.x + straightLength,\n            y: point1.y,\n        }\n    } else {\n        side = 'before'\n        point2 = {\n            x: point1.x - straightLength,\n            y: point1.y,\n        }\n    }\n\n    return {\n        side,\n        points: [point0, point1, point2],\n    }\n}\n","import { useMemo } from 'react'\nimport { SpringValue, useTransition, to } from '@react-spring/web'\nimport { line } from 'd3-shape'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, Point } from '../types'\nimport { useFilteredDataBySkipAngle } from '../utils'\nimport { computeArcLink, computeArcLinkTextAnchor } from './compute'\n\nconst lineGenerator = line<Point>()\n    .x(d => d.x)\n    .y(d => d.y)\n\ntype AnimatedProps = {\n    startAngle: number\n    endAngle: number\n    innerRadius: number\n    outerRadius: number\n    offset: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    linkColor: string\n    textColor: string\n    opacity: number\n}\n\nconst useTransitionPhases = <Datum extends DatumWithArcAndColor>({\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset,\n    getLinkColor,\n    getTextColor,\n}: Pick<AnimatedProps, 'offset' | 'diagonalLength' | 'straightLength' | 'textOffset'> & {\n    getLinkColor: (datum: Datum) => string\n    getTextColor: (datum: Datum) => string\n}): Record<'enter' | 'update' | 'leave', (datum: Datum) => AnimatedProps> =>\n    useMemo(\n        () => ({\n            enter: (datum: Datum) => ({\n                startAngle: datum.arc.startAngle,\n                endAngle: datum.arc.endAngle,\n                innerRadius: datum.arc.innerRadius,\n                outerRadius: datum.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(datum),\n                textColor: getTextColor(datum),\n                opacity: 0,\n            }),\n            update: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength,\n                straightLength,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 1,\n            }),\n            leave: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 0,\n            }),\n        }),\n        [diagonalLength, straightLength, textOffset, getLinkColor, getTextColor]\n    )\n\nconst interpolateLink = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated\n        ) => {\n            const { points } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            return lineGenerator(points)\n        }\n    )\n\nconst interpolateTextAnchor = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return computeArcLinkTextAnchor({\n                startAngle,\n                endAngle,\n                innerRadius,\n                outerRadius,\n            })\n        }\n    )\n\n/**\n * Interpolating the text position involves almost the same computation\n * as `interpolateLink`, unfortunately `react-spring` does not support\n * multiple output values from a single interpolation.\n *\n * We should revise this if `react-spring` adds this feature at some point.\n */\nconst interpolateTextPosition = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>,\n    textOffsetValue: SpringValue<AnimatedProps['textOffset']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n            textOffsetValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated,\n            textOffset\n        ) => {\n            const { points, side } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            const position = points[2]\n            if (side === 'before') {\n                position.x -= textOffset\n            } else {\n                position.x += textOffset\n            }\n\n            return `translate(${position.x},${position.y})`\n        }\n    )\n\n/**\n * This hook can be used to animate a group of arc link labels,\n * if you just want to compute the labels, please use `useArcLinkLabels`.\n */\nexport const useArcLinkLabelsTransition = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset = 0,\n    diagonalLength,\n    straightLength,\n    skipAngle = 0,\n    textOffset,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    skipAngle?: number\n    textOffset: number\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useFilteredDataBySkipAngle<Datum>(data, skipAngle)\n    const transitionPhases = useTransitionPhases<Datum>({\n        offset,\n        diagonalLength,\n        straightLength,\n        textOffset,\n        getLinkColor,\n        getTextColor,\n    })\n\n    const transition = useTransition<Datum, AnimatedProps>(filteredData, {\n        keys: datum => datum.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolateLink,\n        interpolateTextAnchor,\n        interpolateTextPosition,\n    }\n}\n","import { useTheme } from '@nivo/core'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from '../types'\n\nexport interface ArcLinkLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        path: Interpolation<string>\n        thickness: number\n        textPosition: Interpolation<string>\n        textAnchor: Interpolation<'start' | 'end'>\n        linkColor: SpringValue<string>\n        opacity: SpringValue<number>\n        textColor: SpringValue<string>\n    }\n}\n\nexport const ArcLinkLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLinkLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={style.opacity}>\n            <animated.path\n                fill=\"none\"\n                stroke={style.linkColor}\n                strokeWidth={style.thickness}\n                d={style.path}\n            />\n            <animated.text\n                transform={style.textPosition}\n                textAnchor={style.textAnchor}\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { createElement } from 'react'\nimport { usePropertyAccessor } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcLinkLabelsTransition } from './useArcLinkLabelsTransition'\nimport { ArcLinkLabelsProps } from './props'\nimport { ArcLinkLabel, ArcLinkLabelProps } from './ArcLinkLabel'\n\nexport type ArcLinkLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLinkLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLinkLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: ArcLinkLabelsProps<Datum>['arcLinkLabel']\n    skipAngle: ArcLinkLabelsProps<Datum>['arcLinkLabelsSkipAngle']\n    offset: ArcLinkLabelsProps<Datum>['arcLinkLabelsOffset']\n    diagonalLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsDiagonalLength']\n    straightLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsStraightLength']\n    strokeWidth: ArcLinkLabelsProps<Datum>['arcLinkLabelsThickness']\n    textOffset: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextOffset']\n    textColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextColor']\n    linkColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsColor']\n    component?: ArcLinkLabelComponent<Datum>\n}\n\nexport const ArcLinkLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    label: labelAccessor,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    strokeWidth,\n    textOffset,\n    textColor,\n    linkColor,\n    component = ArcLinkLabel,\n}: ArcLinkLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n\n    const {\n        transition,\n        interpolateLink,\n        interpolateTextAnchor,\n        interpolateTextPosition,\n    } = useArcLinkLabelsTransition<Datum>({\n        data,\n        skipAngle,\n        offset,\n        diagonalLength,\n        straightLength,\n        textOffset,\n        linkColor,\n        textColor,\n    })\n\n    const Label: ArcLinkLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        thickness: strokeWidth,\n                        path: interpolateLink(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength\n                        ),\n                        textAnchor: interpolateTextAnchor(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textPosition: interpolateTextPosition(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength,\n                            transitionProps.textOffset\n                        ),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n","import {\n    // @ts-ignore\n    textPropsByEngine,\n    CompleteTheme,\n} from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkLabel } from './types'\n\nexport const drawCanvasArcLinkLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLinkLabel<Datum>[],\n    theme: CompleteTheme,\n    strokeWidth: number\n) => {\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.textAlign = textPropsByEngine.canvas.align[label.textAnchor]\n        ctx.fillText(`${label.label}`, label.x, label.y)\n\n        ctx.beginPath()\n        ctx.strokeStyle = label.linkColor\n        ctx.lineWidth = strokeWidth\n        label.points.forEach((point, index) => {\n            if (index === 0) ctx.moveTo(point.x, point.y)\n            else ctx.lineTo(point.x, point.y)\n        })\n        ctx.stroke()\n    })\n}\n","import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkWithDatum, ArcLinkLabel } from './types'\nimport { useArcLinks } from './useArcLinks'\n\n/**\n * Compute arc link labels, please note that the datum should\n * contain a color in order to be able to compute the link/label text color.\n *\n * Please see `useArcLinks` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLinkLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset = 0,\n    label,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    skipAngle?: number\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    label: PropertyAccessor<Datum, string>\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (link: ArcLinkWithDatum<Datum>) => {\n            const position = {\n                x: link.points[2].x,\n                y: link.points[2].y,\n            }\n            let textAnchor: ArcLinkLabel<Datum>['textAnchor']\n            if (link.side === 'before') {\n                position.x -= textOffset\n                textAnchor = 'end'\n            } else {\n                position.x += textOffset\n                textAnchor = 'start'\n            }\n\n            return {\n                ...position,\n                label: getLabel(link.data),\n                linkColor: getLinkColor(link.data),\n                textAnchor,\n                textColor: getTextColor(link.data),\n            }\n        },\n        [getLabel, getLinkColor, getTextColor, textOffset]\n    )\n\n    return useArcLinks<Datum, Omit<ArcLinkLabel<Datum>, keyof ArcLinkWithDatum<Datum>>>({\n        data,\n        skipAngle,\n        offset,\n        diagonalLength,\n        straightLength,\n        computeExtraProps,\n    })\n}\n","import { useMemo } from 'react'\nimport { radiansToDegrees } from '@nivo/core'\nimport { DatumWithArc } from '../types'\nimport { ArcLinkWithDatum } from './types'\nimport { computeArcLink } from './compute'\n\n/**\n * Compute links for an array of data containing arcs.\n *\n * This is typically used to create labels for arcs,\n * and it's used for the `useArcLinkLabels` hook.\n */\nexport const useArcLinks = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    skipAngle = 0,\n    offset = 0.5,\n    diagonalLength,\n    straightLength,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // offset from arc outer radius in pixels\n    offset?: number\n    // length of the diagonal segment of the link\n    diagonalLength: number\n    // length of the straight segment of the link\n    straightLength: number\n    // this can be used to append extra properties to the links,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: ArcLinkWithDatum<Datum>) => ExtraProps\n}): (ArcLinkWithDatum<Datum> & ExtraProps)[] => {\n    const links = useMemo(\n        () =>\n            data\n                // filter out arcs with a length below `skipAngle`\n                .filter(\n                    datum =>\n                        Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                        skipAngle\n                )\n                // compute the link for each eligible arc\n                .map(datum => ({\n                    ...computeArcLink(datum.arc, offset, diagonalLength, straightLength),\n                    data: datum,\n                })),\n        [data, skipAngle, offset, diagonalLength, straightLength]\n    )\n\n    // splitting memoization of links and extra props can be more efficient,\n    // this way if only `computeExtraProps` changes, we skip links computation.\n    return useMemo(\n        () =>\n            links.map(link => ({\n                ...computeExtraProps(link),\n                ...link,\n            })),\n        [links, computeExtraProps]\n    )\n}\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { animated, to, AnimatedProps } from '@react-spring/web'\nimport { ExtractProps } from '@nivo/core'\nimport { generateSvgArc } from './utils'\n\ntype ArcLineProps = {\n    animated: AnimatedProps<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>\n} & ExtractProps<typeof animated.path>\n\nexport const ArcLine = ({ animated: animatedProps, ...rest }: ArcLineProps) => (\n    <animated.path\n        d={to(\n            [animatedProps.radius, animatedProps.startAngle, animatedProps.endAngle],\n            (radius, start, end) => generateSvgArc(radius, start, end)\n        )}\n        {...rest}\n    />\n)\n","import { useCallback } from 'react'\nimport * as React from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from './types'\n\nexport type ArcMouseHandler<Datum extends DatumWithArcAndColor> = (\n    datum: Datum,\n    event: React.MouseEvent<SVGPathElement>\n) => void\n\nexport interface ArcShapeProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    style: {\n        opacity: SpringValue<number>\n        color: SpringValue<string>\n        borderWidth: number\n        borderColor: SpringValue<string>\n        path: Interpolation<string>\n    }\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n}\n\n/**\n * A simple arc component to be used typically with an `ArcsLayer`.\n *\n * Please note that the component accepts `SpringValue`s instead of\n * regular values to support animations.\n */\nexport const ArcShape = <Datum extends DatumWithArcAndColor>({\n    datum,\n    style,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: ArcShapeProps<Datum>) => {\n    const handleClick = useCallback(event => onClick?.(datum, event), [onClick, datum])\n\n    const handleMouseEnter = useCallback(event => onMouseEnter?.(datum, event), [\n        onMouseEnter,\n        datum,\n    ])\n\n    const handleMouseMove = useCallback(event => onMouseMove?.(datum, event), [onMouseMove, datum])\n\n    const handleMouseLeave = useCallback(event => onMouseLeave?.(datum, event), [\n        onMouseLeave,\n        datum,\n    ])\n\n    return (\n        <animated.path\n            d={style.path}\n            opacity={style.opacity}\n            fill={datum.fill || style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            onClick={onClick ? handleClick : undefined}\n            onMouseEnter={onMouseEnter ? handleMouseEnter : undefined}\n            onMouseMove={onMouseMove ? handleMouseMove : undefined}\n            onMouseLeave={onMouseLeave ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { to, SpringValue } from '@react-spring/web'\nimport { ArcGenerator } from './types'\n\n/**\n * Directly animating paths for arcs leads to sub-optimal results\n * as the interpolation is going to be linear while we deal with polar coordinates,\n * this interpolator is going to generate proper arc transitions.\n * It should be used with the `useAnimatedArc` or `useArcsTransition` hooks.\n */\nexport const interpolateArc = (\n    startAngleValue: SpringValue<number>,\n    endAngleValue: SpringValue<number>,\n    innerRadiusValue: SpringValue<number>,\n    outerRadiusValue: SpringValue<number>,\n    arcGenerator: ArcGenerator\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return arcGenerator({\n                startAngle,\n                endAngle,\n                innerRadius: Math.max(0, innerRadius),\n                outerRadius: Math.max(0, outerRadius),\n            })\n        }\n    )\n","import { createElement } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, ArcGenerator } from './types'\nimport { useArcsTransition } from './useArcsTransition'\nimport { ArcTransitionMode } from './arcTransitionMode'\nimport { ArcMouseHandler, ArcShape, ArcShapeProps } from './ArcShape'\n\nexport type ArcComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcShapeProps<Datum>\n) => JSX.Element\n\ninterface ArcsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    arcGenerator: ArcGenerator\n    borderWidth: number\n    borderColor: InheritedColorConfig<Datum>\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n    transitionMode: ArcTransitionMode\n    component?: ArcComponent<Datum>\n}\n\nexport const ArcsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode,\n    component = ArcShape,\n}: ArcsLayerProps<Datum>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<Datum>(borderColor, theme)\n\n    const { transition, interpolate } = useArcsTransition<\n        Datum,\n        {\n            opacity: number\n            color: string\n            borderColor: string\n        }\n    >(data, transitionMode, {\n        enter: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        update: datum => ({\n            opacity: 1,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        leave: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n    })\n\n    const Arc: ArcComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Arc, {\n                    key: datum.id,\n                    datum,\n                    style: {\n                        ...transitionProps,\n                        borderWidth,\n                        path: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            arcGenerator\n                        ),\n                    },\n                    onClick,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                })\n            })}\n        </g>\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { DatumWithArc } from './types'\nimport { ArcTransitionMode, useArcTransitionMode, TransitionExtra } from './arcTransitionMode'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a group of arcs,\n * if you want to animate a single arc,\n * please have a look at the `useAnimatedArc` hook.\n */\nexport const useArcsTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArc,\n    }\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { positionFromAngle, degreesToRadians } from '@nivo/core'\n\n/**\n * Computes the bounding box for a circle arc.\n *\n * Assumptions:\n *   - Anywhere the arc intersects an axis will be a max or a min.\n *   - If the arc doesn't intersect an axis, then the center\n *     will be one corner of the bounding rectangle,\n *     and this is the only case when it will be.\n *   - The only other possible extreme points of the sector to consider\n *     are the endpoints of the radii.\n *\n * This script was built within the help of this answer on stackoverflow:\n *   https://stackoverflow.com/questions/1336663/2d-bounding-box-of-a-sector\n */\nexport const computeArcBoundingBox = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    // in degrees\n    startAngle: number,\n    // in degrees\n    endAngle: number,\n    includeCenter = true\n) => {\n    let points: [number, number][] = []\n\n    const p0 = positionFromAngle(degreesToRadians(startAngle), radius)\n    points.push([p0.x, p0.y])\n\n    const p1 = positionFromAngle(degreesToRadians(endAngle), radius)\n    points.push([p1.x, p1.y])\n\n    for (\n        let angle = Math.round(Math.min(startAngle, endAngle));\n        angle <= Math.round(Math.max(startAngle, endAngle));\n        angle++\n    ) {\n        if (angle % 90 === 0) {\n            const p = positionFromAngle(degreesToRadians(angle), radius)\n            points.push([p.x, p.y])\n        }\n    }\n\n    points = points.map(([x, y]) => [centerX + x, centerY + y])\n    if (includeCenter) {\n        points.push([centerX, centerY])\n    }\n\n    const xs = points.map(([x]) => x)\n    const ys = points.map(([, y]) => y)\n\n    const x0 = Math.min(...xs)\n    const x1 = Math.max(...xs)\n\n    const y0 = Math.min(...ys)\n    const y1 = Math.max(...ys)\n\n    return {\n        points,\n        x: x0,\n        y: y0,\n        width: x1 - x0,\n        height: y1 - y0,\n    }\n}\n","import { getDistance, getAngle } from '@nivo/core'\nimport { Arc } from './types'\n\n/**\n * Check if cursor is in given ring.\n */\nexport const isCursorInRing = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    cursorX: number,\n    cursorY: number\n) => {\n    const distance = getDistance(cursorX, cursorY, centerX, centerY)\n\n    return distance < radius && distance > innerRadius\n}\n\n/**\n * Search for an arc being under cursor.\n */\nexport const findArcUnderCursor = <A extends Arc = Arc>(\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    arcs: A[],\n    cursorX: number,\n    cursorY: number\n): A | undefined => {\n    if (!isCursorInRing(centerX, centerY, radius, innerRadius, cursorX, cursorY)) {\n        return undefined\n    }\n\n    const cursorAngle = getAngle(cursorX, cursorY, centerX, centerY)\n\n    return arcs.find(\n        ({ startAngle, endAngle }) => cursorAngle >= startAngle && cursorAngle < endAngle\n    )\n}\n","import { useMemo } from 'react'\nimport { arc as d3Arc } from 'd3-shape'\nimport { ArcGenerator, Arc } from './types'\n\n/**\n * Memoize a d3 arc generator.\n *\n * Please note that both inner/outer radius aren't static\n * and should come from the arc itself, while it requires\n * more props on the arcs, it provides more flexibility\n * because it's not limited to pie then but can also work\n * with charts such as sunbursts.\n */\nexport const useArcGenerator = ({\n    cornerRadius = 0,\n    padAngle = 0,\n}: {\n    cornerRadius?: number\n    padAngle?: number\n} = {}): ArcGenerator =>\n    useMemo(\n        () =>\n            d3Arc<Arc>()\n                .innerRadius(arc => arc.innerRadius)\n                .outerRadius(arc => arc.outerRadius)\n                .cornerRadius(cornerRadius)\n                .padAngle(padAngle),\n        [cornerRadius, padAngle]\n    )\n"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","getNormalizedAngle","angle","normalizedAngle","Math","filterDataBySkipAngle","data","datum","radiansToDegrees","svgEllipticalArcCommand","arcTransitionModes","arcTransitionModeById","startAngle","enter","endAngle","arc","update","leave","middleAngle","innerRadius","outerRadius","centerRadius","pushIn","pushOut","useArcTransitionMode","useMemo","transitionMode","progress","extraTransition","mode","computeArcCenter","midAngle","radius","positionFromAngle","interpolateArcCenter","offset","to","startAngleValue","centroid","staticStyle","pointerEvents","ArcLabel","label","style","theme","useTheme","transform","opacity","textAnchor","dominantBaseline","fill","textColor","ArcLabelsLayer","center","labelAccessor","radiusOffset","skipAngle","component","getLabel","usePropertyAccessor","getTextColor","useInheritedColor","extra","useMotionConfig","animate","springConfig","phases","transition","useTransition","initial","from","config","immediate","interpolate","useArcCentersTransition","Label","createElement","transitionProps","drawCanvasArcLabels","ctx","labels","useArcLabels","computeExtraProps","position","x","y","useArcCenters","useCallback","computeArcLink","centerAngle","point0","point1","side","point2","points","lineGenerator","d","interpolateLink","interpolateTextAnchor","interpolateTextPosition","useArcLinkLabelsTransition","diagonalLength","straightLength","textOffset","linkColor","getLinkColor","filteredData","useFilteredDataBySkipAngle","transitionPhases","useTransitionPhases","ArcLinkLabel","stroke","strokeWidth","path","ArcLinkLabelsLayer","thickness","textPosition","drawCanvasArcLinkLabels","textPropsByEngine","index","point","useArcLinkLabels","links","link","useArcLinks","_objectWithoutProperties","excluded","sourceKeys","indexOf","objectWithoutPropertiesLoose","sourceSymbolKeys","prototype","propertyIsEnumerable","call","ArcLine","animatedProps","rest","start","degreesToRadians","end","mid","largeArcFlag","generateSvgArc","ArcShape","onClick","onMouseEnter","onMouseMove","onMouseLeave","handleClick","event","handleMouseEnter","handleMouseMove","handleMouseLeave","undefined","interpolateArc","arcGenerator","ArcsLayer","borderWidth","borderColor","getBorderColor","useArcsTransition","color","Arc","_arrayLikeToArray","arr","len","arr2","Array","_unsupportedIterableToArray","o","minLen","arrayLikeToArray","n","toString","slice","constructor","name","test","_toConsumableArray","isArray","arrayWithoutHoles","iter","Symbol","iterator","iterableToArray","unsupportedIterableToArray","TypeError","nonIterableSpread","_slicedToArray","arrayWithHoles","_arr","_n","_d","_e","_s","_i","next","done","err","iterableToArrayLimit","nonIterableRest","computeArcBoundingBox","includeCenter","p0","p1","p","centerX","centerY","xs","ys","x0","x1","y0","y1","width","height","findArcUnderCursor","distance","getDistance","cursorX","isCursorInRing","cursorAngle","getAngle","arcs","useArcGenerator","cornerRadius","padAngle"],"sourceRoot":""}