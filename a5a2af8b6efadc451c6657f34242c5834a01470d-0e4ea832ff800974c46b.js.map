{"version":3,"file":"a5a2af8b6efadc451c6657f34242c5834a01470d-0e4ea832ff800974c46b.js","mappings":"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","sources":["webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/utils.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/AnnotationNote.tsx","webpack://nivo-website/../src/AnnotationLink.tsx","webpack://nivo-website/../src/CircleAnnotationOutline.tsx","webpack://nivo-website/../src/DotAnnotationOutline.tsx","webpack://nivo-website/../src/RectAnnotationOutline.tsx","webpack://nivo-website/../src/Annotation.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/BarAnnotations.tsx","webpack://nivo-website/../src/BarLegends.tsx","webpack://nivo-website/../src/BarItem.tsx","webpack://nivo-website/../src/BarTooltip.tsx","webpack://nivo-website/../src/compute/common.ts","webpack://nivo-website/../src/compute/grouped.ts","webpack://nivo-website/../src/compute/stacked.ts","webpack://nivo-website/../src/compute/legends.ts","webpack://nivo-website/../src/Bar.tsx","webpack://nivo-website/../src/BarCanvas.tsx","webpack://nivo-website/../src/ResponsiveBar.tsx","webpack://nivo-website/../src/ResponsiveBarCanvas.tsx","webpack://nivo-website/../node_modules/lodash/_baseFilter.js","webpack://nivo-website/../node_modules/lodash/filter.js"],"sourcesContent":["export const defaultProps = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 13,\n}\n","import {\n    AnnotationSpec,\n    CircleAnnotationSpec,\n    DotAnnotationSpec,\n    Note,\n    NoteCanvas,\n    NoteSvg,\n    RectAnnotationSpec,\n} from './types'\nimport { isValidElement } from 'react'\n\nexport const isSvgNote = <Datum>(note: Note<Datum>): note is NoteSvg<Datum> => {\n    const noteType = typeof note\n\n    return (\n        isValidElement(note) ||\n        noteType === 'string' ||\n        noteType === 'function' ||\n        noteType === 'object'\n    )\n}\n\nexport const isCanvasNote = <Datum>(note: Note<Datum>): note is NoteCanvas<Datum> => {\n    const noteType = typeof note\n\n    return noteType === 'string' || noteType === 'function'\n}\n\nexport const isCircleAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is CircleAnnotationSpec<Datum> => annotationSpec.type === 'circle'\n\nexport const isDotAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is DotAnnotationSpec<Datum> => annotationSpec.type === 'dot'\n\nexport const isRectAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is RectAnnotationSpec<Datum> => annotationSpec.type === 'rect'\n","import { filter, isNumber, omit } from 'lodash'\nimport {\n    radiansToDegrees,\n    absoluteAngleDegrees,\n    degreesToRadians,\n    positionFromAngle,\n} from '@nivo/core'\nimport { defaultProps } from './props'\nimport {\n    AnnotationPositionGetter,\n    AnnotationDimensionsGetter,\n    BoundAnnotation,\n    AnnotationMatcher,\n    AnnotationInstructions,\n} from './types'\nimport { isCircleAnnotation, isRectAnnotation } from './utils'\n\nexport const bindAnnotations = <\n    Datum = {\n        x: number\n        y: number\n    }\n>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}): BoundAnnotation<Datum>[] =>\n    annotations.reduce((acc: BoundAnnotation<Datum>[], annotation) => {\n        const offset = annotation.offset || 0\n\n        return [\n            ...acc,\n            ...filter<Datum>(data, annotation.match).map(datum => {\n                const position = getPosition(datum)\n                const dimensions = getDimensions(datum)\n\n                if (isCircleAnnotation(annotation) || isRectAnnotation(annotation)) {\n                    dimensions.size = dimensions.size + offset * 2\n                    dimensions.width = dimensions.width + offset * 2\n                    dimensions.height = dimensions.height + offset * 2\n                }\n\n                // acc.push({\n                //     ...omit(annotation, ['match', 'offset']),\n                //     ...position,\n                //     ...dimensions,\n                //     size: annotation.size || dimensions.size,\n                //     datum,\n                // } as any)\n                // return [\n                //     ...acc,\n                //     {\n                //         ...omit(annotation, ['match', 'offset']),\n                //         ...position,\n                //         ...dimensions,\n                //         size: annotation.size || dimensions.size,\n                //         datum,\n                //     },\n                // ]\n                return {\n                    ...omit(annotation, ['match', 'offset']),\n                    ...position,\n                    ...dimensions,\n                    size: annotation.size || dimensions.size,\n                    datum,\n                } as Required<BoundAnnotation<Datum>>\n            }),\n        ]\n\n        // return acc\n    }, [])\n\nexport const getLinkAngle = (\n    sourceX: number,\n    sourceY: number,\n    targetX: number,\n    targetY: number\n) => {\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX)\n\n    return absoluteAngleDegrees(radiansToDegrees(angle))\n}\n\nexport const computeAnnotation = <Datum>(\n    annotation: BoundAnnotation<Datum>\n): AnnotationInstructions => {\n    const {\n        x,\n        y,\n        noteX,\n        noteY,\n        noteWidth = defaultProps.noteWidth,\n        noteTextOffset = defaultProps.noteTextOffset,\n    } = annotation\n\n    let computedNoteX: number\n    let computedNoteY: number\n\n    if (isNumber(noteX)) {\n        computedNoteX = x + noteX\n    } else if (noteX.abs !== undefined) {\n        computedNoteX = noteX.abs\n    } else {\n        throw new Error(`noteX should be either a number or an object containing an 'abs' property`)\n    }\n\n    if (isNumber(noteY)) {\n        computedNoteY = y + noteY\n    } else if (noteY.abs !== undefined) {\n        computedNoteY = noteY.abs\n    } else {\n        throw new Error(`noteY should be either a number or an object containing an 'abs' property`)\n    }\n\n    let computedX = x\n    let computedY = y\n\n    const angle = getLinkAngle(x, y, computedNoteX, computedNoteY)\n\n    if (isCircleAnnotation<Datum>(annotation)) {\n        const position = positionFromAngle(degreesToRadians(angle), annotation.size / 2)\n        computedX += position.x\n        computedY += position.y\n    }\n\n    if (isRectAnnotation<Datum>(annotation)) {\n        const eighth = Math.round((angle + 90) / 45) % 8\n        if (eighth === 0) {\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 1) {\n            computedX += annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 2) {\n            computedX += annotation.width / 2\n        }\n        if (eighth === 3) {\n            computedX += annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 4) {\n            computedY += annotation.height / 2\n        }\n        if (eighth === 5) {\n            computedX -= annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 6) {\n            computedX -= annotation.width / 2\n        }\n        if (eighth === 7) {\n            computedX -= annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n    }\n\n    let textX = computedNoteX\n    const textY = computedNoteY - noteTextOffset\n\n    let noteLineX = computedNoteX\n    const noteLineY = computedNoteY\n\n    if ((angle + 90) % 360 > 180) {\n        textX -= noteWidth\n        noteLineX -= noteWidth\n    } else {\n        noteLineX += noteWidth\n    }\n\n    return {\n        points: [\n            [computedX, computedY],\n            [computedNoteX, computedNoteY],\n            [noteLineX, noteLineY],\n        ] as [number, number][],\n        text: [textX, textY],\n        angle: angle + 90,\n    }\n}\n","import { useMemo } from 'react'\nimport { bindAnnotations, computeAnnotation } from './compute'\nimport {\n    AnnotationDimensionsGetter,\n    AnnotationMatcher,\n    AnnotationPositionGetter,\n    BoundAnnotation,\n} from './types'\n\n/**\n * Bind annotations to a dataset.\n */\nexport const useAnnotations = <Datum>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}) =>\n    useMemo(\n        () =>\n            bindAnnotations<Datum>({\n                data,\n                annotations,\n                getPosition,\n                getDimensions,\n            }),\n        [data, annotations, getPosition, getDimensions]\n    )\n\nexport const useComputedAnnotations = <Datum>({\n    annotations,\n}: {\n    annotations: BoundAnnotation<Datum>[]\n}) =>\n    useMemo(\n        () =>\n            annotations.map(annotation => ({\n                ...annotation,\n                computed: computeAnnotation<Datum>({\n                    ...annotation,\n                }),\n            })),\n        [annotations]\n    )\n\nexport const useComputedAnnotation = <Datum>(annotation: BoundAnnotation<Datum>) =>\n    useMemo(() => computeAnnotation<Datum>(annotation), [annotation])\n","import { createElement } from 'react'\nimport omit from 'lodash/omit'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { NoteSvg } from './types'\n\nexport const AnnotationNote = <Datum,>({\n    datum,\n    x,\n    y,\n    note,\n}: {\n    datum: Datum\n    x: number\n    y: number\n    note: NoteSvg<Datum>\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    if (typeof note === 'function') {\n        return createElement(note, { x, y, datum })\n    }\n\n    return (\n        <>\n            {theme.annotations.text.outlineWidth > 0 && (\n                <animated.text\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    style={{\n                        ...theme.annotations.text,\n                        strokeLinejoin: 'round',\n                        strokeWidth: theme.annotations.text.outlineWidth * 2,\n                        stroke: theme.annotations.text.outlineColor,\n                    }}\n                >\n                    {note}\n                </animated.text>\n            )}\n            <animated.text\n                x={animatedProps.x}\n                y={animatedProps.y}\n                style={omit(theme.annotations.text, ['outlineWidth', 'outlineColor'])}\n            >\n                {note}\n            </animated.text>\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath, useTheme } from '@nivo/core'\n\nexport const AnnotationLink = ({\n    points,\n    isOutline = false,\n}: {\n    points: [number, number][]\n    isOutline?: boolean\n}) => {\n    const theme = useTheme()\n\n    const path = useMemo(() => {\n        const [firstPoint, ...otherPoints] = points\n\n        return otherPoints.reduce(\n            (acc, [x, y]) => `${acc} L${x},${y}`,\n            `M${firstPoint[0]},${firstPoint[1]}`\n        )\n    }, [points])\n\n    const animatedPath = useAnimatedPath(path)\n\n    if (isOutline && theme.annotations.link.outlineWidth <= 0) {\n        return null\n    }\n\n    const style = { ...theme.annotations.link }\n    if (isOutline) {\n        style.strokeLinecap = 'square'\n        style.strokeWidth =\n            theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n        style.stroke = theme.annotations.link.outlineColor\n        style.opacity = theme.annotations.link.outlineOpacity\n    }\n\n    return <animated.path fill=\"none\" d={animatedPath} style={style} />\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const CircleAnnotationOutline = ({ x, y, size }: { x: number; y: number; size: number }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { defaultProps } from './props'\n\nexport const DotAnnotationOutline = ({\n    x,\n    y,\n    size = defaultProps.dotSize,\n}: {\n    x: number\n    y: number\n    size?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth: theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.symbol}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const RectAnnotationOutline = ({\n    x,\n    y,\n    width,\n    height,\n    borderRadius = 6,\n}: {\n    x: number\n    y: number\n    width: number\n    height: number\n    borderRadius?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x: x - width / 2,\n        y: y - height / 2,\n        width,\n        height,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.rect\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    rx={borderRadius}\n                    ry={borderRadius}\n                    width={animatedProps.width}\n                    height={animatedProps.height}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.rect\n                x={animatedProps.x}\n                y={animatedProps.y}\n                rx={borderRadius}\n                ry={borderRadius}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useComputedAnnotation } from './hooks'\nimport { AnnotationNote } from './AnnotationNote'\nimport { AnnotationLink } from './AnnotationLink'\nimport { CircleAnnotationOutline } from './CircleAnnotationOutline'\nimport { DotAnnotationOutline } from './DotAnnotationOutline'\nimport { RectAnnotationOutline } from './RectAnnotationOutline'\nimport { BoundAnnotation } from './types'\nimport { isCircleAnnotation, isDotAnnotation, isRectAnnotation, isSvgNote } from './utils'\n\nexport const Annotation = <Datum,>(annotation: BoundAnnotation<Datum>) => {\n    const { datum, x, y, note } = annotation\n    const computed = useComputedAnnotation(annotation)\n\n    if (!isSvgNote(note)) {\n        throw new Error('note should be a valid react element')\n    }\n\n    return (\n        <>\n            <AnnotationLink points={computed.points} isOutline={true} />\n            {isCircleAnnotation(annotation) && (\n                <CircleAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isDotAnnotation(annotation) && (\n                <DotAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isRectAnnotation(annotation) && (\n                <RectAnnotationOutline\n                    x={x}\n                    y={y}\n                    width={annotation.width}\n                    height={annotation.height}\n                    borderRadius={annotation.borderRadius}\n                />\n            )}\n            <AnnotationLink points={computed.points} />\n            <AnnotationNote datum={datum} x={computed.text[0]} y={computed.text[1]} note={note} />\n        </>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { ComputedAnnotation } from './types'\nimport { isCanvasNote, isCircleAnnotation, isDotAnnotation, isRectAnnotation } from './utils'\n\nconst drawPoints = (ctx: CanvasRenderingContext2D, points: [number, number][]) => {\n    points.forEach(([x, y], index) => {\n        if (index === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    })\n}\n\nexport const renderAnnotationsToCanvas = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        annotations,\n        theme,\n    }: {\n        annotations: ComputedAnnotation<Datum>[]\n        theme: CompleteTheme\n    }\n) => {\n    if (annotations.length === 0) return\n\n    ctx.save()\n    annotations.forEach(annotation => {\n        if (!isCanvasNote(annotation.note)) {\n            throw new Error('note is invalid for canvas implementation')\n        }\n\n        if (theme.annotations.link.outlineWidth > 0) {\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.annotations.link.outlineColor\n            ctx.lineWidth =\n                theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n            ctx.beginPath()\n            drawPoints(ctx, annotation.computed.points)\n            ctx.stroke()\n            ctx.lineCap = 'butt'\n        }\n\n        if (isCircleAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation) && theme.annotations.symbol.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.symbol.outlineColor\n            ctx.lineWidth = theme.annotations.symbol.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isRectAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        ctx.strokeStyle = theme.annotations.link.stroke\n        ctx.lineWidth = theme.annotations.link.strokeWidth\n        ctx.beginPath()\n        drawPoints(ctx, annotation.computed.points)\n        ctx.stroke()\n\n        if (isCircleAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation)) {\n            ctx.fillStyle = theme.annotations.symbol.fill\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.fill()\n        }\n\n        if (isRectAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        if (typeof annotation.note === 'function') {\n            annotation.note(ctx, {\n                datum: annotation.datum,\n                x: annotation.computed.text[0],\n                y: annotation.computed.text[1],\n                theme,\n            })\n        } else {\n            ctx.font = `${theme.annotations.text.fontSize}px ${theme.annotations.text.fontFamily}`\n            ctx.fillStyle = theme.annotations.text.fill\n            ctx.strokeStyle = theme.annotations.text.outlineColor\n            ctx.lineWidth = theme.annotations.text.outlineWidth * 2\n            if (theme.annotations.text.outlineWidth > 0) {\n                ctx.lineJoin = 'round'\n                ctx.strokeText(\n                    annotation.note,\n                    annotation.computed.text[0],\n                    annotation.computed.text[1]\n                )\n                ctx.lineJoin = 'miter'\n            }\n            ctx.fillText(annotation.note, annotation.computed.text[0], annotation.computed.text[1])\n        }\n    })\n    ctx.restore()\n}\n","import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: RawDatum[], keys: string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport { uniqBy } from 'lodash'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarDatum, BarLayer, BarLayerId, BarSvgProps, ComputedBarDatumWithValue } from './types'\nimport { BarLegends } from './BarLegends'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { svgDefaultProps } from './props'\nimport { useTransition } from '@react-spring/web'\nimport { useBar } from './hooks'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel,\n    label,\n    labelSkipWidth,\n    labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as any) : null}\n                yScale={enableGridY ? (yScale as any) : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: any = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            innerWidth,\n            innerHeight,\n            width,\n            height,\n            bars,\n            xScale,\n            yScale,\n        }),\n        [commonProps, margin, innerWidth, innerHeight, width, height, bars, xScale, yScale]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { BarCanvasLayer, BarCanvasProps, BarDatum, ComputedBarDatum } from './types'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel,\n    label,\n    labelSkipWidth,\n    labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: any = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            margin,\n            innerWidth,\n            innerHeight,\n            width,\n            height,\n            bars,\n            xScale,\n            yScale,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            height,\n            innerHeight,\n            innerWidth,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            margin,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            bars,\n            xScale,\n            yScale,\n            tooltip,\n            width,\n        ]\n    )\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: xScale as any,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: yScale as any,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale as any,\n                    yScale: yScale as any,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: Omit<BarSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: Omit<BarCanvasProps<RawDatum>, 'height' | 'width'>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n"],"names":["defaultProps","isCircleAnnotation","annotationSpec","type","isDotAnnotation","isRectAnnotation","computeAnnotation","annotation","computedNoteX","computedNoteY","x","y","noteX","noteY","noteWidth","noteTextOffset","_isNumber","abs","Error","computedX","computedY","angle","sourceX","sourceY","targetX","targetY","Math","atan2","absoluteAngleDegrees","radiansToDegrees","getLinkAngle","position","positionFromAngle","degreesToRadians","size","eighth","round","height","width","textX","noteLineX","points","text","useAnnotations","data","annotations","getPosition","getDimensions","useMemo","reduce","acc","offset","_filter","match","map","datum","dimensions","_omit","bindAnnotations","useComputedAnnotations","computed","AnnotationNote","note","theme","useTheme","useMotionConfig","animate","springConfig","config","animatedProps","useSpring","immediate","createElement","_jsxs","outlineWidth","_jsx","animated","style","strokeLinejoin","strokeWidth","stroke","outlineColor","omit","AnnotationLink","isOutline","path","firstPoint","animatedPath","useAnimatedPath","link","strokeLinecap","opacity","outlineOpacity","fill","d","CircleAnnotationOutline","radius","outline","circle","cx","cy","r","DotAnnotationOutline","dotSize","symbol","RectAnnotationOutline","borderRadius","rect","rx","ry","Annotation","useComputedAnnotation","noteType","isValidElement","isSvgNote","drawPoints","ctx","forEach","index","moveTo","lineTo","renderAnnotationsToCanvas","length","save","isCanvasNote","lineCap","strokeStyle","lineWidth","beginPath","arc","PI","fillStyle","font","fontSize","fontFamily","lineJoin","strokeText","fillText","restore","BarAnnotations","bars","boundAnnotations","bar","max","i","BarLegends","legends","toggleSerie","legend","BoxLegendSvg","containerWidth","containerHeight","dataFrom","label","indexBy","keys","groupMode","layout","reverse","minValue","maxValue","valueScale","indexScale","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","from","colorBy","colors","scheme","borderWidth","borderColor","isInteractive","tooltip","color","BasicTooltip","id","value","formattedValue","enableChip","tooltipLabel","indexValue","initialHiddenIds","markers","svgDefaultProps","layers","barComponent","labelColor","labelOpacity","labelX","labelY","transform","shouldRenderLabel","onClick","onMouseEnter","onMouseLeave","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","g","to","focusable","tabIndex","undefined","onMouseMove","onFocus","onBlur","textAnchor","dominantBaseline","fillOpacity","labels","pointerEvents","defs","motionConfig","role","canvasDefaultProps","pixelRatio","window","devicePixelRatio","getIndexScale","getIndex","axis","computeScale","all","min","normalizeData","key","item","filterNullValues","Object","coerceValue","Number","gt","other","lt","range","start","end","Array","repeat","_","clampToZero","generateVerticalGroupedBars","barWidth","yRef","formatValue","getColor","getTooltipLabel","xScale","yScale","margin","compare","cleanedData","domain","rawValue","barHeight","barData","hidden","push","left","top","generateHorizontalGroupedBars","xRef","generateGroupedBars","indexScaleConfig","hiddenIds","props","filter","includes","otherAxis","scaleSpec","clampMin","values","entry","k","Boolean","isFinite","scale","bandwidth","params","flattenDeep","arr","some","isArray","concat","generateVerticalStackedBars","stackedData","stackedDataItem","generateHorizontalStackedBars","generateStackedBars","array","stack","num","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","_uniqBy","useBar","valueFormat","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","InnerBar","partialMargin","axisTop","axisRight","gridXValues","gridYValues","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","transition","useTransition","enter","update","leave","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","right","bottom","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","layer","Bar","renderWrapper","otherProps","Container","findBarUnderCursor","nodes","isCursorInRect","node","InnerBarCanvas","renderBar","quadraticCurveTo","closePath","textBaseline","textAlign","canvasRef","canvasEl","useRef","useEffect","current","getContext","background","fillRect","translate","line","renderGridLinesToCanvas","renderAxesToCanvas","renderLegendToCanvas","handleMouseHover","getRelativeCursor","ref","canvas","cursor","BarCanvas","forwardRef","ResponsiveBar","ResponsiveWrapper","ResponsiveBarCanvas","baseEach","module","exports","collection","predicate","result","arrayFilter","baseFilter","baseIteratee"],"sourceRoot":""}