{"version":3,"file":"eff292ce57065fa8acbb053d07b8c1570e194112-4de34a617b38104a27f0.js","mappings":"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","sources":["webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack://nivo-website/../src/WaffleGridCell.tsx","webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://nivo-website/../src/WaffleGridBlankCells.tsx","webpack://nivo-website/../src/WaffleGridValueCells.tsx","webpack://nivo-website/../src/WaffleGridCells.tsx","webpack://nivo-website/../src/WaffleGridAxisX.tsx","webpack://nivo-website/../src/WaffleGridAxisY.tsx","webpack://nivo-website/../src/WaffleGridAxes.tsx","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/WaffleGrid.tsx","webpack://nivo-website/../src/ResponsiveWaffleGrid.tsx","webpack://nivo-website/../node_modules/gatsby/node_modules/core-js/internals/a-function.js","webpack://nivo-website/../node_modules/gatsby/node_modules/core-js/internals/array-species-constructor.js","webpack://nivo-website/../node_modules/gatsby/node_modules/core-js/internals/array-species-create.js","webpack://nivo-website/../node_modules/gatsby/node_modules/core-js/internals/flatten-into-array.js","webpack://nivo-website/../node_modules/gatsby/node_modules/core-js/internals/function-bind-context.js","webpack://nivo-website/../node_modules/gatsby/node_modules/core-js/internals/is-array.js","webpack://nivo-website/../node_modules/gatsby/node_modules/core-js/modules/es.array.flat.js"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import { animated } from '@react-spring/web'\nimport { WaffleGridCellProps } from './types'\n\nexport const WaffleGridCell = ({ style }: WaffleGridCellProps) => {\n    return (\n        <animated.circle\n            cx={style.x}\n            cy={style.y}\n            r={style.radius}\n            fill={style.color}\n            opacity={style.opacity}\n        />\n    )\n}\n","import { colorSchemes } from '@nivo/colors'\nimport { WaffleGridLayerId } from './types'\nimport { WaffleGridCell } from './WaffleGridCell'\n\nexport const commonDefaultProps = {\n    spacing: 6,\n    enableBlankCells: true,\n\n    blankCellColor: { theme: 'grid.line.stroke' },\n    valueCellColor: colorSchemes.nivo[1],\n\n    layers: ['grid', 'axes', 'cells'] as WaffleGridLayerId[],\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n\n    renderWrapper: true,\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    blankCellComponent: WaffleGridCell,\n    valueCellComponent: WaffleGridCell,\n    blankCellsStaggeredDelay: 2,\n    valueCellsStaggeredDelay: 2,\n}\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { createElement } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig, useSpringConfig } from '@nivo/core'\nimport { WaffleGridCellData, WaffleGridCellComponent, WaffleGridSvgProps } from './types'\n\nexport const WaffleGridBlankCells = ({\n    cells,\n    cellComponent,\n    motionConfig,\n    staggeredDelay,\n}: {\n    cells: WaffleGridCellData[]\n    cellComponent: WaffleGridCellComponent\n    motionConfig: WaffleGridSvgProps['blankCellsMotionConfig']\n    staggeredDelay: number\n}) => {\n    const { animate, config: defaultSpringConfig } = useMotionConfig()\n    const springConfig = useSpringConfig(motionConfig || defaultSpringConfig)\n\n    const transitions = useTransition<\n        WaffleGridCellData,\n        {\n            x: number\n            y: number\n            radius: number\n            color: string\n            opacity: number\n        }\n    >(cells, {\n        keys: cell => cell.key,\n        from: inOutTransition,\n        enter: finalTransition,\n        update: finalTransition,\n        leave: inOutTransition,\n        trail: animate ? staggeredDelay : undefined,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transitions((style, cell) =>\n                createElement(cellComponent, {\n                    cell,\n                    style,\n                })\n            )}\n        </>\n    )\n}\n\nconst inOutTransition = (cell: WaffleGridCellData) => ({\n    x: cell.x + cell.size / 2,\n    y: cell.y + cell.size / 2,\n    radius: cell.size / 2,\n    color: cell.color,\n    opacity: 0,\n})\nconst finalTransition = (cell: WaffleGridCellData) => ({\n    x: cell.x + cell.size / 2,\n    y: cell.y + cell.size / 2,\n    radius: cell.size / 2,\n    color: cell.color,\n    opacity: 1,\n})\n","import { createElement } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig, useSpringConfig } from '@nivo/core'\nimport { WaffleGridCellData, WaffleGridCellComponent, WaffleGridSvgProps } from './types'\n\nexport const WaffleGridValueCells = ({\n    cells,\n    cellComponent,\n    motionConfig,\n    staggeredDelay,\n}: {\n    cells: WaffleGridCellData[]\n    cellComponent: WaffleGridCellComponent\n    motionConfig: WaffleGridSvgProps['valueCellsMotionConfig']\n    staggeredDelay: number\n}) => {\n    const { animate, config: defaultSpringConfig } = useMotionConfig()\n    const springConfig = useSpringConfig(motionConfig || defaultSpringConfig)\n\n    const transitions = useTransition<\n        WaffleGridCellData,\n        {\n            x: number\n            y: number\n            radius: number\n            color: string\n            opacity: number\n        }\n    >(cells, {\n        keys: cell => cell.index,\n        from: inTransition,\n        enter: finalTransition,\n        update: finalTransition,\n        leave: outTransition,\n        trail: animate ? staggeredDelay : undefined,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transitions((style, cell) =>\n                createElement(cellComponent, {\n                    cell,\n                    style,\n                })\n            )}\n        </>\n    )\n}\n\nconst inTransition = (cell: WaffleGridCellData) => ({\n    x: cell.x + cell.size / 2 - Math.random() * 200,\n    y: cell.y + cell.size / 2 - Math.random() * 200,\n    radius: cell.size / 2,\n    color: cell.color,\n    opacity: 0,\n})\nconst finalTransition = (cell: WaffleGridCellData) => ({\n    x: cell.x + cell.size / 2,\n    y: cell.y + cell.size / 2,\n    radius: cell.size / 2,\n    color: cell.color,\n    opacity: 1,\n})\nconst outTransition = (cell: WaffleGridCellData) => ({\n    x: cell.x + cell.size / 2 + Math.random() * 200,\n    y: cell.y + cell.size / 2 + Math.random() * 200,\n    radius: cell.size / 2,\n    color: cell.color,\n    opacity: 0,\n})\n","import { WaffleGridCellData, WaffleGridCellComponent, WaffleGridSvgProps } from './types'\nimport { WaffleGridBlankCells } from './WaffleGridBlankCells'\nimport { WaffleGridValueCells } from './WaffleGridValueCells'\n\nexport const WaffleGridCells = ({\n    enableBlankCells,\n    blankCells,\n    blankCellComponent,\n    blankCellsMotionConfig,\n    blankCellsStaggeredDelay,\n    valueCells,\n    valueCellComponent,\n    valueCellsMotionConfig,\n    valueCellsStaggeredDelay,\n}: {\n    enableBlankCells: boolean\n    blankCells: WaffleGridCellData[]\n    blankCellComponent: WaffleGridCellComponent\n    blankCellsMotionConfig: WaffleGridSvgProps['blankCellsMotionConfig']\n    blankCellsStaggeredDelay: number\n    valueCells: WaffleGridCellData[]\n    valueCellComponent: WaffleGridCellComponent\n    valueCellsMotionConfig: WaffleGridSvgProps['valueCellsMotionConfig']\n    valueCellsStaggeredDelay: number\n}) => {\n    return (\n        <g>\n            {enableBlankCells && (\n                <WaffleGridBlankCells\n                    cells={blankCells}\n                    cellComponent={blankCellComponent}\n                    motionConfig={blankCellsMotionConfig}\n                    staggeredDelay={blankCellsStaggeredDelay}\n                />\n            )}\n            <WaffleGridValueCells\n                cells={valueCells}\n                cellComponent={valueCellComponent}\n                motionConfig={valueCellsMotionConfig}\n                staggeredDelay={valueCellsStaggeredDelay}\n            />\n        </g>\n    )\n}\n","import { animated, config, useTransition } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { WaffleGridAxisDataX, WaffleGridAxisTickX } from './types'\n\nconst transitionConfig = config.stiff\nconst transitionTrail = 60\n\nexport const WaffleGridAxisX = ({ axis }: { axis: WaffleGridAxisDataX }) => {\n    const theme = useTheme()\n\n    const y = axis.y + 10\n\n    const transitions = useTransition<\n        WaffleGridAxisTickX,\n        {\n            rotation: string\n            position: string\n            opacity: number\n        }\n    >(axis.ticks, {\n        keys: tick => tick.id,\n        from: tick => ({\n            rotation: `rotate(-45)`,\n            position: `translate(${tick.x + tick.width / 2 - 100}, ${y})`,\n            opacity: 0,\n        }),\n        enter: tick => ({\n            rotation: `rotate(-90)`,\n            position: `translate(${tick.x + tick.width / 2}, ${y})`,\n            opacity: 1,\n        }),\n        update: tick => ({\n            rotation: `rotate(-90)`,\n            position: `translate(${tick.x + tick.width / 2}, ${y})`,\n            opacity: 1,\n        }),\n        leave: tick => ({\n            rotation: `rotate(-135)`,\n            position: `translate(${tick.x + tick.width / 2}, ${y + 100})`,\n            opacity: 0,\n        }),\n        trail: transitionTrail,\n        config: transitionConfig,\n    })\n\n    return (\n        <>\n            {transitions(({ position, rotation, opacity }, tick) => {\n                return (\n                    <animated.g opacity={opacity} transform={position}>\n                        <animated.g transform={rotation}>\n                            <text\n                                textAnchor=\"end\"\n                                dominantBaseline=\"middle\"\n                                style={theme.axis.ticks.text}\n                            >\n                                {tick.id}\n                            </text>\n                        </animated.g>\n                    </animated.g>\n                )\n            })}\n        </>\n    )\n}\n","import { animated, config, useTransition } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { WaffleGridAxisDataY, WaffleGridAxisTickY } from './types'\n\nconst transitionConfig = config.stiff\nconst transitionTrail = 60\n\nexport const WaffleGridAxisY = ({ axis }: { axis: WaffleGridAxisDataY }) => {\n    const theme = useTheme()\n\n    const x = axis.x - 10\n\n    const transitions = useTransition<\n        WaffleGridAxisTickY,\n        {\n            rotation: string\n            position: string\n            opacity: number\n        }\n    >(axis.ticks, {\n        keys: tick => tick.id,\n        from: tick => ({\n            rotation: `rotate(45)`,\n            position: `translate(${x - 100}, ${tick.y + tick.height / 2})`,\n            opacity: 0,\n        }),\n        enter: tick => ({\n            rotation: `rotate(0)`,\n            position: `translate(${x}, ${tick.y + tick.height / 2})`,\n            opacity: 1,\n        }),\n        update: tick => ({\n            rotation: `rotate(0)`,\n            position: `translate(${x}, ${tick.y + tick.height / 2})`,\n            opacity: 1,\n        }),\n        leave: tick => ({\n            rotation: `rotate(-45)`,\n            position: `translate(${x + 100}, ${tick.y + tick.height / 2 + 100})`,\n            opacity: 0,\n        }),\n        trail: transitionTrail,\n        config: transitionConfig,\n    })\n\n    return (\n        <>\n            {transitions(({ position, rotation, opacity }, tick) => {\n                return (\n                    <animated.g opacity={opacity} transform={position}>\n                        <animated.g transform={rotation}>\n                            <text\n                                textAnchor=\"end\"\n                                dominantBaseline=\"middle\"\n                                style={theme.axis.ticks.text}\n                            >\n                                {tick.id}\n                            </text>\n                        </animated.g>\n                    </animated.g>\n                )\n            })}\n        </>\n    )\n}\n","import { WaffleGridAxisDataX, WaffleGridAxisDataY } from './types'\nimport { WaffleGridAxisX } from './WaffleGridAxisX'\nimport { WaffleGridAxisY } from './WaffleGridAxisY'\n\nexport const WaffleGridAxes = ({\n    xAxis,\n    yAxis,\n}: {\n    xAxis: WaffleGridAxisDataX\n    yAxis: WaffleGridAxisDataY\n}) => {\n    return (\n        <>\n            <WaffleGridAxisX axis={xAxis} />\n            <WaffleGridAxisY axis={yAxis} />\n        </>\n    )\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport {\n    WaffleGridDataProps,\n    WaffleGridCommonProps,\n    WaffleGridCellData,\n    WaffleGridAxisDataX,\n    WaffleGridAxisDataY,\n} from './types'\nimport { svgDefaultProps } from './defaults'\n\nconst nearestSquare = (n: number) => Math.pow(Math.ceil(Math.sqrt(n)), 2)\n\nexport const useWaffleGrid = ({\n    width: _width,\n    height: _height,\n    data,\n    xRange,\n    yRange,\n    cellValue,\n    spacing = svgDefaultProps.spacing,\n    blankCellColor,\n    valueCellColor,\n}: {\n    width: number\n    height: number\n    data: WaffleGridDataProps['data']\n    xRange: WaffleGridDataProps['xRange']\n    yRange: WaffleGridDataProps['yRange']\n    cellValue: WaffleGridDataProps['cellValue']\n    spacing: WaffleGridCommonProps['spacing']\n    blankCellColor: WaffleGridCommonProps['blankCellColor']\n    valueCellColor: WaffleGridCommonProps['valueCellColor']\n}) => {\n    const xLength = xRange.length\n    const yLength = yRange.length\n\n    const maxValue = Math.max(...data.flat())\n    const waffleCellCount = nearestSquare(maxValue / cellValue)\n    const waffleCellSize = Math.sqrt(waffleCellCount)\n\n    let width = _width\n    let height = _height\n    let cellSize: number\n    if (xLength > yLength) {\n        height = (width / xLength) * yLength\n        cellSize = (width - spacing * (xLength + 1)) / xLength / waffleCellSize\n    } else {\n        width = (height / yLength) * xLength\n        cellSize = (height - spacing * (yLength + 1)) / yLength / waffleCellSize\n    }\n\n    const originX = (_width - width) / 2\n    const originY = (_height - height) / 2\n    const waffleSize = cellSize * waffleCellSize\n\n    const xAxis: WaffleGridAxisDataX = {\n        ticks: xRange.map((xKey, index) => ({\n            id: xKey,\n            x: originX + spacing * (index + 1) + waffleSize * index,\n            width: waffleSize,\n        })),\n        y: originY + height,\n    }\n    const yAxis: WaffleGridAxisDataY = {\n        ticks: yRange.map((yKey, index) => ({\n            id: yKey,\n            y: originY + spacing * (index + 1) + waffleSize * index,\n            height: waffleSize,\n        })),\n        x: originX,\n    }\n\n    const waffleArray = Array.from({ length: waffleCellSize })\n\n    const cells: WaffleGridCellData[] = []\n    let cellIndex = 0\n    data.forEach((row, rowIndex) => {\n        const waffleY = yAxis.ticks[rowIndex].y\n\n        row.forEach((blockValue, columnIndex) => {\n            const waffleX = xAxis.ticks[columnIndex].x\n\n            const lastValueDotIndex = Math.min(Math.round(blockValue / cellValue), waffleCellCount)\n\n            let cellWaffleIndex = 0\n            waffleArray.forEach((_, dotRow) => {\n                const cellY = waffleY + cellSize * dotRow\n\n                waffleArray.forEach((__, dotColumn) => {\n                    const cellX = waffleX + cellSize * dotColumn\n                    const hasValue = cellWaffleIndex <= lastValueDotIndex\n\n                    cells.push({\n                        key: `${columnIndex}.${rowIndex}.${dotColumn}.${dotRow}`,\n                        index: cellIndex,\n                        x: cellX,\n                        y: cellY,\n                        size: cellSize,\n                        color: '',\n                        hasValue,\n                    })\n\n                    cellWaffleIndex++\n                    cellIndex++\n                })\n            })\n        })\n    })\n\n    const theme = useTheme()\n\n    const getBlankCellColor = useInheritedColor(blankCellColor, theme)\n    const blankCells = cells\n        .filter(cell => !cell.hasValue)\n        .map((cell, index) => ({\n            ...cell,\n            index,\n            color: getBlankCellColor(cell),\n        }))\n\n    const getValueCellColor = useInheritedColor(valueCellColor, theme)\n    const valueCells = cells\n        .filter(cell => cell.hasValue)\n        .map((cell, index) => ({\n            ...cell,\n            index,\n            color: getValueCellColor(cell),\n        }))\n\n    return {\n        blankCells,\n        valueCells,\n        xAxis,\n        yAxis,\n    }\n}\n","import { ReactNode, Fragment, createElement, useMemo } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { WaffleGridCells } from './WaffleGridCells'\nimport { WaffleGridAxes } from './WaffleGridAxes'\nimport { WaffleGridSvgProps, WaffleGridLayerId, WaffleGridCustomLayerProps } from './types'\nimport { svgDefaultProps } from './defaults'\nimport { useWaffleGrid } from './hooks'\n\ntype InnerWaffleGridProps = Omit<\n    WaffleGridSvgProps,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nexport const InnerWaffleGrid = ({\n    width,\n    height,\n    data,\n    xRange,\n    yRange,\n    cellValue,\n    spacing = svgDefaultProps.spacing,\n    margin: partialMargin,\n    enableBlankCells = svgDefaultProps.enableBlankCells,\n    blankCellColor = svgDefaultProps.blankCellColor,\n    valueCellColor = svgDefaultProps.valueCellColor,\n    layers = svgDefaultProps.layers,\n    blankCellComponent = svgDefaultProps.blankCellComponent,\n    valueCellComponent = svgDefaultProps.valueCellComponent,\n    blankCellsMotionConfig,\n    blankCellsStaggeredDelay = svgDefaultProps.blankCellsStaggeredDelay,\n    valueCellsMotionConfig,\n    valueCellsStaggeredDelay = svgDefaultProps.valueCellsStaggeredDelay,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerWaffleGridProps) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { blankCells, valueCells, xAxis, yAxis } = useWaffleGrid({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        xRange,\n        yRange,\n        cellValue,\n        spacing,\n        blankCellColor,\n        valueCellColor,\n    })\n\n    const layerById: Record<WaffleGridLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        cells: null,\n    }\n\n    if (layers.includes('cells')) {\n        layerById.cells = (\n            <WaffleGridCells\n                key=\"cells\"\n                enableBlankCells={enableBlankCells}\n                blankCells={blankCells}\n                blankCellComponent={blankCellComponent}\n                blankCellsMotionConfig={blankCellsMotionConfig}\n                blankCellsStaggeredDelay={blankCellsStaggeredDelay}\n                valueCells={valueCells}\n                valueCellComponent={valueCellComponent}\n                valueCellsMotionConfig={valueCellsMotionConfig}\n                valueCellsStaggeredDelay={valueCellsStaggeredDelay}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = <WaffleGridAxes key=\"axes\" xAxis={xAxis} yAxis={yAxis} />\n    }\n\n    const customLayerProps = useMemo<WaffleGridCustomLayerProps>(\n        () => ({\n            blankCells,\n            valueCells,\n        }),\n        [blankCells, valueCells]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const WaffleGrid = ({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: WaffleGridSvgProps) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerWaffleGrid isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { WaffleGridSvgProps } from './types'\nimport { WaffleGrid } from './WaffleGrid'\n\nexport const ResponsiveWaffleGrid = (props: Omit<WaffleGridSvgProps, 'height' | 'width'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <WaffleGrid width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","module.exports = function (it) {\n  if (typeof it != 'function') {\n    throw TypeError(String(it) + ' is not a function');\n  } return it;\n};\n","var isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// a part of `ArraySpeciesCreate` abstract operation\n// https://tc39.es/ecma262/#sec-arrayspeciescreate\nmodule.exports = function (originalArray) {\n  var C;\n  if (isArray(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    else if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","var arraySpeciesConstructor = require('../internals/array-species-constructor');\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.es/ecma262/#sec-arrayspeciescreate\nmodule.exports = function (originalArray, length) {\n  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);\n};\n","'use strict';\nvar isArray = require('../internals/is-array');\nvar toLength = require('../internals/to-length');\nvar bind = require('../internals/function-bind-context');\n\n// `FlattenIntoArray` abstract operation\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? bind(mapper, thisArg, 3) : false;\n  var element;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      if (depth > 0 && isArray(element)) {\n        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n};\n\nmodule.exports = flattenIntoArray;\n","var aFunction = require('../internals/a-function');\n\n// optional / simple context binding\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 0: return function () {\n      return fn.call(that);\n    };\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","var classof = require('../internals/classof-raw');\n\n// `IsArray` abstract operation\n// https://tc39.es/ecma262/#sec-isarray\n// eslint-disable-next-line es/no-array-isarray -- safe\nmodule.exports = Array.isArray || function isArray(arg) {\n  return classof(arg) == 'Array';\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar flattenIntoArray = require('../internals/flatten-into-array');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar toInteger = require('../internals/to-integer');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\n// `Array.prototype.flat` method\n// https://tc39.es/ecma262/#sec-array.prototype.flat\n$({ target: 'Array', proto: true }, {\n  flat: function flat(/* depthArg = 1 */) {\n    var depthArg = arguments.length ? arguments[0] : undefined;\n    var O = toObject(this);\n    var sourceLen = toLength(O.length);\n    var A = arraySpeciesCreate(O, 0);\n    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));\n    return A;\n  }\n});\n"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","WaffleGridCell","style","cx","cy","r","fill","opacity","svgDefaultProps","spacing","enableBlankCells","blankCellColor","theme","valueCellColor","colorSchemes","layers","isInteractive","animate","motionConfig","renderWrapper","blankCellComponent","valueCellComponent","blankCellsStaggeredDelay","valueCellsStaggeredDelay","_objectWithoutProperties","excluded","sourceKeys","indexOf","objectWithoutPropertiesLoose","sourceSymbolKeys","prototype","propertyIsEnumerable","call","WaffleGridBlankCells","cells","cellComponent","staggeredDelay","useMotionConfig","defaultSpringConfig","springConfig","useSpringConfig","transitions","useTransition","cell","from","enter","update","leave","trail","config","immediate","createElement","inOutTransition","x","y","radius","color","finalTransition","WaffleGridValueCells","inTransition","Math","outTransition","WaffleGridCells","blankCells","blankCellsMotionConfig","valueCells","valueCellsMotionConfig","transitionConfig","WaffleGridAxisX","axis","useTheme","tick","rotation","position","transform","textAnchor","dominantBaseline","id","WaffleGridAxisY","WaffleGridAxes","xAxis","yAxis","_arrayLikeToArray","arr","len","arr2","Array","_toConsumableArray","isArray","arrayLikeToArray","arrayWithoutHoles","iter","Symbol","iterator","iterableToArray","o","minLen","n","toString","slice","constructor","name","test","unsupportedIterableToArray","TypeError","nonIterableSpread","useWaffleGrid","_width","width","_height","height","data","xRange","yRange","cellValue","xLength","yLength","maxValue","waffleCellCount","waffleCellSize","cellSize","originX","originY","waffleSize","ticks","index","waffleArray","cellIndex","waffleY","row","waffleX","lastValueDotIndex","blockValue","cellWaffleIndex","cellY","cellX","hasValue","size","getBlankCellColor","useInheritedColor","getValueCellColor","InnerWaffleGrid","partialMargin","margin","role","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","layerById","grid","axes","customLayerProps","useMemo","layer","WaffleGrid","otherProps","ResponsiveWaffleGrid","props","module","exports","it","String","isObject","SPECIES","wellKnownSymbol","originalArray","C","undefined","arraySpeciesConstructor","toLength","bind","flattenIntoArray","original","sourceLen","start","depth","mapper","thisArg","element","targetIndex","sourceIndex","mapFn","aFunction","fn","that","a","b","c","classof","arg","$","toObject","toInteger","arraySpeciesCreate","proto","flat","depthArg","O","this","A"],"sourceRoot":""}