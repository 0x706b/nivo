{"version":3,"file":"ba344a88e745567caeb0d1944109937757303e67-a3e781a0986d8b948dc5.js","mappings":"6VAGA,SAASA,EAAMC,GACb,OAAOA,EAAED,MAGX,SAASE,EAAKC,EAAUC,GACtB,IAAIC,EAAOF,EAASG,IAAIF,GACxB,IAAKC,EAAM,MAAM,IAAIE,MAAM,mBAAqBH,GAChD,OAAOC,E,0YCNT,IAAMG,EAAyB,gBAC3BH,EAD2B,OAEjBI,EAFiB,WAG3BC,EAH2B,UAI3BC,EAJ2B,eAK3BC,EAL2B,cAM3BC,EAN2B,sBAQ3B,SAAC,WAAD,CACI,sBAAqBR,EADzB,GAEIS,WAAWC,EAAAA,EAAAA,IAAG,CAACN,EAAD,EAAkBA,EAAlB,EAAmCA,EAApC,QAA0D,gBACnE,MAAM,aAAN,4BAEJO,GAAGD,EAAAA,EAAAA,IAAG,CAACN,EAAF,OAAuB,SAAAQ,GAAI,OAAIA,EAAJ,KAChCC,KAAMT,EANV,MAOIU,YAAaV,EAPjB,YAQIW,OAAQX,EARZ,YASIY,QAASZ,EATb,QAUIC,QAASA,EAAU,SAAAY,GAAK,OAAIZ,EAAQL,EAAZ,SAV5B,EAWIM,aAAcA,EAAe,SAAAW,GAAK,OAAIX,EAAaN,EAAjB,SAXtC,EAYIO,YAAaA,EAAc,SAAAU,GAAK,OAAIV,EAAYP,EAAhB,SAZpC,EAaIQ,aAAcA,EAAe,SAAAS,GAAK,OAAIT,EAAaR,EAAjB,SAAgCkB,KCrBpEC,EAAyB,gBAC3BC,EAD2B,OAEjBhB,EAFiB,WAG3BiB,EAH2B,mBAK3B,SAAC,SAAD,CACI,sBAAqBD,EADzB,GAEIL,OAAQX,EAFZ,MAGIkB,MAAO,CAAEC,aAAcF,GACvBP,YAAaM,EAJjB,UAKII,cALJ,QAMIR,QAASZ,EANb,QAOIqB,GAAIrB,EAPR,GAQIsB,GAAItB,EARR,GASIuB,GAAIvB,EATR,GAUIwB,GAAIxB,EAAcwB,MCZbC,EAWT,CACAC,OAAQ,CAAC,QAAQ,QADjB,eAGAC,aAHA,GAIAC,kBAJA,EAKAC,YALA,GAMAC,YANA,EAOAC,YAPA,IAQAC,WARA,IAUAC,SAVA,GAWAC,eAXA,GAYAC,iBAZA,EAaAC,UAbA,UAcAC,gBAdA,EAeAC,gBAAiB,CAAEC,KAAM,SAEzBC,cAjBA,EAkBAC,UAAW,CAAEF,KAAM,gBAEnBG,eApBA,EAqBAC,qBArBA,GAsBAC,YCrC8B,gBAA2BhD,EAA3B,cAC9B,eAAciD,GAAIjD,EAAlB,GAA2BkD,YAA3B,EAA6CC,MAAOnD,EAAKmD,SDsCzDC,YAxBA,GA0BAC,SA1BA,EA2BAC,aA3BA,SA6BAC,KAAM,OAGGC,EAAe,QAExBC,eFvBuBC,EAAAA,EAAAA,MAApB,GE0BHC,eDhCuBD,EAAAA,EAAAA,MAApB,GCmCHE,cAAe,WAGNC,EAAkB,QAE3BC,WE7D4B,cAI5BC,EAAAA,UAAgB/D,EAAhB+D,MACAA,EAAAA,YACAA,EAAAA,IAAQ/D,EAAR+D,EAAgB/D,EAAhB+D,EAAwB/D,EAAAA,KAAxB+D,EAAAA,EAA0C,EAAIC,KAA9CD,IACAA,EAAAA,OAEI/D,EAAAA,YAAJ,IACI+D,EAAAA,YAAkB/D,EAAlB+D,YACAA,EAAAA,UAAgB/D,EAAhB+D,YACAA,EAAAA,WFkDJE,WG9D4B,cAI5BF,EAAAA,YAAkB3C,EAAlB2C,MACAA,EAAAA,UAAgB3C,EAAhB2C,UAEAA,EAAAA,YACAA,EAAAA,OAAW3C,EAAAA,OAAX2C,EAA0B3C,EAAAA,OAA1B2C,GACAA,EAAAA,OAAW3C,EAAAA,OAAX2C,EAA0B3C,EAAAA,OAA1B2C,GACAA,EAAAA,UHqDAG,WAAY,oBAAOC,QAAyBA,OAAAA,kBAA+B,IAJhD,YI5CzBC,EAAiB,mBAGnBC,EAAAA,EAAAA,UAAQ,WACJ,yBAAWC,EAAmCA,EACvC,uBACR,CANgB,KAQjBC,EAAmB,YAclB,IAbHxC,EAaE,EAbFA,aACAC,EAYE,EAZFA,kBACAC,EAWE,EAXFA,YACAC,EAUE,EAVFA,YACAC,EASE,EATFA,YACAqC,EAQE,EARFA,OASMC,EAAkBL,EAAxB,GAEMM,EAAUF,EAAhB,GACMG,EAAUH,EAAhB,GAEA,OAAOH,EAAAA,EAAAA,UAAQ,WACX,IAAMO,EPjCC,SAAUC,GACvB,IAEIC,EAEAC,EACAC,EACAC,EACAC,EACAC,EARAlC,EAAKtD,EACLyF,EAWJ,SAAyBhE,GACvB,OAAO,EAAI4C,KAAKqB,IAAIJ,EAAM7D,EAAKkE,OAAO3F,OAAQsF,EAAM7D,EAAKmE,OAAO5F,SAV9D6F,GAAW,EAAAC,EAAA,GAAS,IAMpBrD,EAAa,EAOjB,SAASsD,EAAMC,GACb,IAAK,IAAIC,EAAI,EAAGC,EAAIhB,EAAMiB,OAAQF,EAAIxD,IAAcwD,EAClD,IAAK,IAAWxE,EAAMkE,EAAQC,EAAQQ,EAAGC,EAAGC,EAAGC,EAAtCC,EAAI,EAAqCA,EAAIN,IAAKM,EACxCb,GAAjBlE,EAAOyD,EAAMsB,IAAkBb,OAC/BS,GADuCR,EAASnE,EAAKmE,QAC1CQ,EAAIR,EAAOa,GAAKd,EAAOS,EAAIT,EAAOc,KAAM,EAAAC,EAAA,GAAOlB,GAC1Da,EAAIT,EAAOS,EAAIT,EAAOe,GAAKhB,EAAOU,EAAIV,EAAOgB,KAAM,EAAAD,EAAA,GAAOlB,GAG1DY,GADAE,IADAA,EAAIjC,KAAKuC,KAAKR,EAAIA,EAAIC,EAAIA,IACjBjB,EAAUoB,IAAMF,EAAIN,EAAQb,EAAUqB,GACvCH,GAAKC,EACbV,EAAOa,IAAML,GAAKG,EAAIhB,EAAKiB,IAC3BZ,EAAOe,IAAMN,EAAIE,EACjBZ,EAAOc,IAAML,GAAKG,EAAI,EAAIA,GAC1BZ,EAAOgB,IAAMN,EAAIE,EAKvB,SAASM,IACP,GAAKxB,EAAL,CACA,IAAImB,EAMA/E,EALAyE,EAAIb,EAAMc,OACVW,EAAI5B,EAAMiB,OACVhG,EAAW,IAAI4G,IAAI1B,EAAM2B,KAAI,SAAU/G,EAAGuG,GAC5C,MAAO,CAAClD,EAAGrD,EAAGuG,EAAGnB,GAAQpF,OAI3B,IAAKuG,EAAI,EAAGlB,EAAQ,IAAI2B,MAAMf,GAAIM,EAAIM,IAAKN,GACzC/E,EAAOyD,EAAMsB,IAASxG,MAAQwG,EACH,iBAAhB/E,EAAKkE,SAAqBlE,EAAKkE,OAASzF,EAAKC,EAAUsB,EAAKkE,SAC5C,iBAAhBlE,EAAKmE,SAAqBnE,EAAKmE,OAAS1F,EAAKC,EAAUsB,EAAKmE,SACvEN,EAAM7D,EAAKkE,OAAO3F,QAAUsF,EAAM7D,EAAKkE,OAAO3F,QAAU,GAAK,EAC7DsF,EAAM7D,EAAKmE,OAAO5F,QAAUsF,EAAM7D,EAAKmE,OAAO5F,QAAU,GAAK,EAG/D,IAAKwG,EAAI,EAAGjB,EAAO,IAAI0B,MAAMH,GAAIN,EAAIM,IAAKN,EACxC/E,EAAOyD,EAAMsB,GAAIjB,EAAKiB,GAAKlB,EAAM7D,EAAKkE,OAAO3F,QAAUsF,EAAM7D,EAAKkE,OAAO3F,OAASsF,EAAM7D,EAAKmE,OAAO5F,QAGtGmF,EAAY,IAAI8B,MAAMH,GAAII,IAC1B9B,EAAY,IAAI6B,MAAMH,GAAIK,KAG5B,SAASD,IACP,GAAK7B,EAEL,IAAK,IAAImB,EAAI,EAAGN,EAAIhB,EAAMiB,OAAQK,EAAIN,IAAKM,EACzCrB,EAAUqB,IAAMf,EAASP,EAAMsB,GAAIA,EAAGtB,GAI1C,SAASiC,IACP,GAAK9B,EAEL,IAAK,IAAImB,EAAI,EAAGN,EAAIhB,EAAMiB,OAAQK,EAAIN,IAAKM,EACzCpB,EAAUoB,IAAMX,EAASX,EAAMsB,GAAIA,EAAGtB,GA8B1C,OA3Fa,MAATA,IAAeA,EAAQ,IAiE3Ba,EAAMc,WAAa,SAAUO,EAAQC,GACnChC,EAAQ+B,EACR5B,EAAS6B,EACTR,KAGFd,EAAMb,MAAQ,SAAUoC,GACtB,OAAOC,UAAUpB,QAAUjB,EAAQoC,EAAGT,IAAcd,GAASb,GAG/Da,EAAMzC,GAAK,SAAUgE,GACnB,OAAOC,UAAUpB,QAAU7C,EAAKgE,EAAGvB,GAASzC,GAG9CyC,EAAMtD,WAAa,SAAU6E,GAC3B,OAAOC,UAAUpB,QAAU1D,GAAc6E,EAAGvB,GAAStD,GAGvDsD,EAAMN,SAAW,SAAU6B,GACzB,OAAOC,UAAUpB,QAAUV,EAAwB,mBAAN6B,EAAmBA,GAAI,EAAAxB,EAAA,IAAUwB,GAAIJ,IAAsBnB,GAASN,GAGnHM,EAAMF,SAAW,SAAUyB,GACzB,OAAOC,UAAUpB,QAAUN,EAAwB,mBAANyB,EAAmBA,GAAI,EAAAxB,EAAA,IAAUwB,GAAIH,IAAsBpB,GAASF,GAG5GE,EOrEiB,aACJ,SAAAtE,GAAI,OAAIqD,EAAgBrD,EAApB,SADA,SAAlB,GAIM+F,EC9CC,WACb,IAAInC,EACAhF,EACAmF,EACAQ,EAEAb,EADAM,GAAW,EAAAK,EAAA,IAAU,IAErB2B,EAAe,EACfC,EAAeC,EAAAA,EACfC,EAAS,IAEb,SAAS7B,EAAMuB,GACb,IAAId,EACAN,EAAIb,EAAMc,OACV0B,GAAO,EAAAC,EAAA,GAASzC,EAAO,EAAAe,EAAG,EAAAC,GAAG0B,WAAWC,GAE5C,IAAKhC,EAAQsB,EAAGd,EAAI,EAAGA,EAAIN,IAAKM,EAC9BnG,EAAOgF,EAAMmB,GAAIqB,EAAKI,MAAMC,GAIhC,SAASrB,IACP,GAAKxB,EAAL,CACA,IAAImB,EAEAnG,EADA6F,EAAIb,EAAMc,OAId,IAFAhB,EAAY,IAAI8B,MAAMf,GAEjBM,EAAI,EAAGA,EAAIN,IAAKM,EACnBnG,EAAOgF,EAAMmB,GAAIrB,EAAU9E,EAAKL,QAAUyF,EAASpF,EAAMmG,EAAGnB,IAIhE,SAAS2C,EAAWG,GAClB,IACIC,EACAC,EAEAjC,EACAC,EACAG,EANAf,EAAW,EAGX6C,EAAS,EAKb,GAAIH,EAAKhC,OAAQ,CACf,IAAKC,EAAIC,EAAIG,EAAI,EAAGA,EAAI,IAAKA,GACtB4B,EAAID,EAAK3B,MAAQ6B,EAAIhE,KAAKkE,IAAIH,EAAEI,UACnC/C,GAAY2C,EAAEI,MAAOF,GAAUD,EAAGjC,GAAKiC,EAAID,EAAEhC,EAAGC,GAAKgC,EAAID,EAAE/B,GAI/D8B,EAAK/B,EAAIA,EAAIkC,EACbH,EAAK9B,EAAIA,EAAIiC,MAEV,EACHF,EAAID,GACF/B,EAAIgC,EAAEK,KAAKrC,EACbgC,EAAE/B,EAAI+B,EAAEK,KAAKpC,EAEb,GACEZ,GAAYN,EAAUiD,EAAEK,KAAKzI,aACtBoI,EAAIA,EAAEM,MAGjBP,EAAKK,MAAQ/C,EAGf,SAASyC,EAAMC,EAAMrG,EAAIwF,EAAGtF,GAC1B,IAAKmG,EAAKK,MAAO,OAAO,EACxB,IAAIpC,EAAI+B,EAAK/B,EAAI/F,EAAK+F,EAClBC,EAAI8B,EAAK9B,EAAIhG,EAAKgG,EAClBsC,EAAI3G,EAAKF,EACTwE,EAAIF,EAAIA,EAAIC,EAAIA,EAGpB,GAAIsC,EAAIA,EAAIf,EAAStB,EASnB,OARIA,EAAIoB,IACI,IAANtB,IAA6BE,IAApBF,GAAI,EAAAM,EAAA,GAAOlB,IAAkBY,GAChC,IAANC,IAA6BC,IAApBD,GAAI,EAAAK,EAAA,GAAOlB,IAAkBa,GACtCC,EAAImB,IAAcnB,EAAIjC,KAAKuC,KAAKa,EAAenB,IACnDjG,EAAKoG,IAAML,EAAI+B,EAAKK,MAAQxC,EAAQM,EACpCjG,EAAKsG,IAAMN,EAAI8B,EAAKK,MAAQxC,EAAQM,IAG/B,EAEJ,KAAI6B,EAAKhC,QAAUG,GAAKoB,GAAxB,EAGDS,EAAKM,OAASpI,GAAQ8H,EAAKO,QACnB,IAANtC,IAA6BE,IAApBF,GAAI,EAAAM,EAAA,GAAOlB,IAAkBY,GAChC,IAANC,IAA6BC,IAApBD,GAAI,EAAAK,EAAA,GAAOlB,IAAkBa,GACtCC,EAAImB,IAAcnB,EAAIjC,KAAKuC,KAAKa,EAAenB,KAGrD,GACM6B,EAAKM,OAASpI,IAChBsI,EAAIxD,EAAUgD,EAAKM,KAAKzI,OAASgG,EAAQM,EACzCjG,EAAKoG,IAAML,EAAIuC,EACftI,EAAKsG,IAAMN,EAAIsC,SAEVR,EAAOA,EAAKO,OAyBvB,OAtBA3C,EAAMc,WAAa,SAAUO,EAAQC,GACnChC,EAAQ+B,EACR5B,EAAS6B,EACTR,KAGFd,EAAMN,SAAW,SAAU6B,GACzB,OAAOC,UAAUpB,QAAUV,EAAwB,mBAAN6B,EAAmBA,GAAI,EAAAxB,EAAA,IAAUwB,GAAIT,IAAcd,GAASN,GAG3GM,EAAMxD,YAAc,SAAU+E,GAC5B,OAAOC,UAAUpB,QAAUsB,EAAeH,EAAIA,EAAGvB,GAAS1B,KAAKuC,KAAKa,IAGtE1B,EAAMvD,YAAc,SAAU8E,GAC5B,OAAOC,UAAUpB,QAAUuB,EAAeJ,EAAIA,EAAGvB,GAAS1B,KAAKuC,KAAKc,IAGtE3B,EAAM6C,MAAQ,SAAUtB,GACtB,OAAOC,UAAUpB,QAAUyB,EAASN,EAAIA,EAAGvB,GAAS1B,KAAKuC,KAAKgB,IAGzD7B,ED9EmB8C,GAAAA,UAAAA,GAAAA,YAAAA,GAAAA,YAApB,GAKMC,EEvDC,SAAU1C,EAAGC,GAC1B,IAAIhB,EACAI,EAAW,EAIf,SAASM,IACP,IAAIS,EAEAnG,EADA6F,EAAIb,EAAMc,OAEV4C,EAAK,EACLC,EAAK,EAET,IAAKxC,EAAI,EAAGA,EAAIN,IAAKM,EACFuC,IAAjB1I,EAAOgF,EAAMmB,IAAeJ,EAAG4C,GAAM3I,EAAKgG,EAG5C,IAAK0C,GAAMA,EAAK7C,EAAIE,GAAKX,EAAUuD,GAAMA,EAAK9C,EAAIG,GAAKZ,EAAUe,EAAI,EAAGA,EAAIN,IAAKM,GAC/EnG,EAAOgF,EAAMmB,IAASJ,GAAK2C,EAAI1I,EAAKgG,GAAK2C,EAoB7C,OAnCS,MAAL5C,IAAWA,EAAI,GACV,MAALC,IAAWA,EAAI,GAkBnBN,EAAMc,WAAa,SAAUS,GAC3BjC,EAAQiC,GAGVvB,EAAMK,EAAI,SAAUkB,GAClB,OAAOC,UAAUpB,QAAUC,GAAKkB,EAAGvB,GAASK,GAG9CL,EAAMM,EAAI,SAAUiB,GAClB,OAAOC,UAAUpB,QAAUE,GAAKiB,EAAGvB,GAASM,GAG9CN,EAAMN,SAAW,SAAU6B,GACzB,OAAOC,UAAUpB,QAAUV,GAAY6B,EAAGvB,GAASN,GAG9CM,EFiBmBkD,CAAYlE,EAAhC,GAEA,MAAO,CAAEtD,KAAF,EAAmByH,OAAnB,EAAwCrE,OAAQiE,KACxD,CAAC,EAAD,UAbH,KAuGSK,EAAa,YAwCnB,IAvCHtE,EAuCE,EAvCFA,OACAQ,EAsCE,EAtCFA,MACAH,EAqCE,EArCFA,MAqCE,IApCF9C,aAAAA,OAoCE,MApCaF,EAAmBE,aAoChC,MAnCFC,kBAAAA,OAmCE,MAnCkBH,EAAmBG,kBAmCrC,MAlCFC,YAAAA,OAkCE,MAlCYJ,EAAmBI,YAkC/B,MAjCFC,YAAAA,OAiCE,MAjCYL,EAAmBK,YAiC/B,MAhCFC,YAAAA,OAgCE,MAhCYN,EAAmBM,YAgC/B,MA/BFC,WAAAA,OA+BE,MA/BWP,EAAmBO,WA+B9B,MA9BFC,SAAAA,OA8BE,MA9BSR,EAAmBQ,SA8B5B,MA7BFC,eAAAA,OA6BE,MA7BeT,EAAmBS,eA6BlC,MA5BFC,iBAAAA,OA4BE,MA5BiBV,EAAmBU,iBA4BpC,MA3BFC,UAAAA,OA2BE,MA3BUX,EAAmBW,UA2B7B,MA1BFC,gBAAAA,OA0BE,MA1BgBZ,EAAmBY,gBA0BnC,MAzBFC,gBAAAA,OAyBE,MAzBgBb,EAAmBa,gBAyBnC,MAxBFE,cAAAA,OAwBE,MAxBcf,EAAmBe,cAwBjC,MAvBFC,UAAAA,OAuBE,MAvBUhB,EAAmBgB,UAuB7B,MAtBFC,cAAAA,OAsBE,MAtBcjB,EAAmBiB,cAsBjC,MArBFC,qBAAAA,OAqBE,MArBqBlB,EAAmBkB,qBAqBxC,EAGF,GAA4CgG,EAAAA,EAAAA,UAA5C,MAAOC,EAAP,KAAuBC,EAAvB,KACA,GAA4CF,EAAAA,EAAAA,UAA5C,MAAOG,EAAP,KAAuBC,EAAvB,KAEMC,EAAS7E,EAA6B,CACxCxC,aADwC,EAExCC,kBAFwC,EAGxCC,YAHwC,EAIxCC,YAJwC,EAKxCC,YALwC,EAMxCqC,OAAAA,KAGJ6E,EAAAA,EAAAA,YAAU,WAEN,IAAMC,EAAyCtE,EAAA,KAAU,SAAAhF,GAAI,MAAK,CAC9DiD,GAAIjD,EAD0D,GAE9DoI,KAAK,EAAD,GAF0D,GAI9DzI,MAJ8D,EAK9DoG,EAL8D,EAM9DC,EAN8D,EAO9DI,GAP8D,EAQ9DE,GAAI,MAEFiD,EAA+C1E,EAAA,KAAU,SAAAzD,GAAI,MAAK,CACpEgH,KAAK,EAAD,GADgE,GAGpEzI,MAHoE,EAOpE2F,OAAQgE,EAAA,MAAqB,SAAAtJ,GAAI,OAAIA,EAAAA,KAAYoB,EAAhB,UACjCmE,OAAQ+D,EAAA,MAAqB,SAAAtJ,GAAI,OAAIA,EAAAA,KAAYoB,EAAhB,cAG/BoI,GAAaC,EAAAA,EAAAA,GAAAA,GAAAA,MAAAA,OACAL,EAAAA,KAAAA,MADAK,IAAAA,MAAAA,SAEEL,EAFFK,QAAAA,MAAAA,SAGEL,EAHFK,QAAnB,OAYA,OALAD,EAAAA,KAAAA,GAEAP,EAAAA,GACAE,EAAAA,GAEO,WACHK,EAAAA,UAEL,CAACxE,EAAM,EAAP,MAtCHqE,IAwCA,OAA0CN,EAAAA,EAAAA,UAA1C,GAAOW,GAAP,KAAsBC,GAAtB,KAEMC,GAhLW,YAkBd,IAjBHhJ,EAiBE,EAjBFA,KACAiJ,EAgBE,EAhBFA,WACAC,EAeE,EAfFA,aACA3G,EAcE,EAdFA,MACA4G,EAaE,EAbFA,YACAC,EAYE,EAZFA,YACAlH,EAWE,EAXFA,cACA4G,EAUE,EAVFA,cAWMO,GAAQC,EAAAA,EAAAA,MAERC,EAAU/F,EAAhB,GACMgG,EAAWhG,EAAjB,GACMiG,EAAiBjG,EAAvB,GACMkG,GAAiBC,EAAAA,EAAAA,IAAkBP,EAAzC,GACMQ,GAAiBC,EAAAA,EAAAA,cACnB,YACI,IAAMtH,EAAQiH,EAASpK,EAAvB,MAEA,MAAO,CACHY,KAAMuJ,EAAQnK,EADX,MAEHmD,MAFG,EAGH4G,YAAaM,EAAerK,EAHzB,MAIHgK,YAAaM,EAAe,EAAD,MAAYnH,MAAAA,QAG/C,CAACgH,EAAQ,EAAT,EAXJ,IAcMO,EAAgBtG,EAAtB,GACMuG,GAAiBF,EAAAA,EAAAA,cACnB,YACI,IAAMtH,EAAQiH,EAASpK,EAAvB,MAEA,MAAO,CACHY,KAAM8J,EAAc1K,EADjB,MAEHmD,MAFG,EAGH4G,YAAaM,EAAerK,EAHzB,MAIHgK,YAAaM,EAAe,EAAD,MAAYnH,MAAAA,QAG/C,CAACuH,EAAc,EAAf,EAXJ,IAcME,EAAkBxG,EAAxB,GACMyG,GAAmBJ,EAAAA,EAAAA,cACrB,YACI,IAAMtH,EAAQiH,EAASpK,EAAvB,MAEA,MAAO,CACHY,KAAMgK,EAAgB5K,EADnB,MAEHmD,MAFG,EAGH4G,YAAaM,EAAerK,EAHzB,MAIHgK,YAAaM,EAAe,EAAD,MAAYnH,MAAAA,QAG/C,CAACyH,EAAgB,EAAjB,EAXJ,IAcA,OAAOH,EAAAA,EAAAA,cACH,YACI,OAAK3H,GAAL,IAAsB4G,EAAAA,OAClBA,EAAAA,SAAuB1J,EAA3B,IAA4C2K,EAAP,GAC9BE,EAAP,GAFyDL,EAAP,KAItD,CAACA,EAAe,EAAhB,IANJ,IA2GqBM,CAAyB,CAC1ClK,KAD0C,EAE1CiJ,WAF0C,EAG1CC,aAH0C,EAI1C3G,MAJ0C,EAK1C4G,YAL0C,EAM1CC,YAN0C,EAO1ClH,cAP0C,EAQ1C4G,cAAAA,KAEEqB,IAA6C1G,EAAAA,EAAAA,UAAQ,WACvD,cAAI2E,EAAgC,KAE7BA,EAAA,KAAmB,SAAAhJ,GAAI,cAEvB4J,GAFuB,SAI/B,CAACZ,EAPJ,KASMiB,IAAQC,EAAAA,EAAAA,MACRc,GAAmB5G,EAAzB,GACM6G,IAAeV,EAAAA,EAAAA,IAAkB1H,EAAvC,IAEMqI,IAAmD7G,EAAAA,EAAAA,UAAQ,WAC7D,OAAI6E,OAAAA,GAAJ,OAA+B6B,GAA+B,KAEvD7B,EAAA,KAAmB,YAAyB,IAAtBvJ,EAAqB,EAArBA,MAAUyB,EAAW,OACxC+J,EAA+E,CACjFlI,GAAO7B,EAAAA,OAAL,OAAuBA,EAAAA,OADwD,GAEjFgH,KAAMhH,EAF2E,KAGjFzB,MAHiF,EAIjF2F,OAAQyF,GAAA,MAAmB,SAAA/K,GAAI,OAAIA,EAAAA,KAAYoB,EAAAA,OAAhB,MAC/BmE,OAAQwF,GAAA,MAAmB,SAAA/K,GAAI,OAAIA,EAAAA,KAAYoB,EAAAA,OAAhB,OAGnC,OAAO,EAAP,MAEIgK,UAAWJ,GAFf,GAGI7H,MAAO8H,GAAaE,UAG7B,CAACjC,EAAe,GAAhB,GAlBH,KAoBA,MAAO,CACHlE,MADG,GAEHH,MAFG,GAGH6E,cAHG,GAIHC,iBAAAA,KAIF0B,EAA4B,kBAAuD,CACrFtF,EAAG/F,EADkF,EAErFgG,EAAGhG,EAAKgG,IAGNsF,EAA8B,kBAAuD,CACvF1K,KAAMZ,EADiF,KAEvFuL,MAAOvL,EAFgF,KAGvFwL,OAAQxL,EAAKY,OAGJ6K,EAAqB,qBAI9BC,EAAAA,EAAAA,IAAmC,CAC/BtD,KAD+B,EAE/BhF,YAF+B,EAG/BuI,YAH+B,EAI/BC,cAAeN,KG1RVO,EAAe,YAIU,IAHlChH,EAGiC,EAHjCA,MACAlB,EAEiC,EAFjCA,cACAtC,EACiC,EADjCA,UAEA,GAA0CyK,EAAAA,EAAAA,MAAlCzI,EAAR,UAAyB0I,EAAzB,SAEA,GAA6C1H,EAAAA,EAAAA,UACzC,iBAAM,CA5BV,kBAAqC,CACjC5C,GAAIL,EAAAA,OAD6B,EAEjCM,GAAIN,EAAAA,OAF6B,EAGjCO,GAAIP,EAAAA,OAH6B,EAIjCQ,GAAIR,EAAAA,OAJ6B,EAKjC+B,MAAO/B,EAL0B,MAMjCJ,QAAS,IAKb,kBAAqC,CACjCS,GAAIL,EAAAA,OAD6B,EAEjCM,GAAIN,EAAAA,OAF6B,EAGjCO,GAAIP,EAAAA,OAH6B,EAIjCQ,GAAIR,EAAAA,OAJ6B,EAKjC+B,MAAO/B,EAL0B,MAMjCJ,QAAS,OAUb,IAAOgL,EAAP,KAAwBC,EAAxB,KAKMC,GAAaC,EAAAA,EAAAA,eAAa,EAUvB,CACLC,KAAM,SAAAhL,GAAI,OAAIA,EAAJ,IACViL,QAFK,EAGL1J,KAHK,EAIL2J,MAJK,EAKLC,OALK,EAMLC,SANK,EAOLC,OAPK,EAQLC,WAAYrJ,IAGhB,OACI,8BACK6I,GAAW,cACR,OAAOS,EAAAA,EAAAA,eAAchJ,EAAe,CAChCiJ,IAAKxL,EAD2B,GAEhCA,KAFgC,EAGhCyL,SAHgC,EAIhCxL,UAAAA,UChBPyL,EAAe,YAUU,IATlC9H,EASiC,EATjCA,MACAvB,EAQiC,EARjCA,cACAnD,EAOiC,EAPjCA,aACAC,EAMiC,EANjCA,YACAC,EAKiC,EALjCA,aACAH,EAIiC,EAJjCA,QACA0M,EAGiC,EAHjCA,QACApD,EAEiC,EAFjCA,iBACA7G,EACiC,EADjCA,cAEA,GAA0CgJ,EAAAA,EAAAA,MAAlCzI,EAAR,UAAyB0I,EAAzB,SAEA,GAA6D1H,EAAAA,EAAAA,UACzD,iBAAM,CAnDV,kBAA+B,CAC3B0B,EAAG/F,EADwB,EAE3BgG,EAAGhG,EAFwB,EAG3BY,KAAMZ,EAHqB,KAI3BmD,MAAOnD,EAJoB,MAK3B+J,YAAa/J,EALc,YAM3BgK,YAAahK,EANc,YAO3BgN,MAP2B,EAQ3BhM,QAAS,IAKb,kBAA4B,CACxB+E,EAAG/F,EADqB,EAExBgG,EAAGhG,EAFqB,EAGxBY,KAAMZ,EAHkB,KAIxBmD,MAAOnD,EAJiB,MAKxB+J,YAAa/J,EALW,YAMxBgK,YAAahK,EANW,YAOxBgN,MAPwB,EAQxBhM,QAAS,IAKb,kBAA+B,CAC3B+E,EAAG/F,EADwB,EAE3BgG,EAAGhG,EAFwB,EAG3BY,KAAMZ,EAHqB,KAI3BmD,MAAOnD,EAJoB,MAK3B+J,YAAa/J,EALc,YAM3BgK,YAAahK,EANc,YAO3BgN,MAP2B,EAQ3BhM,QAAS,OAgBb,IAAOgL,EAAP,KAAwBC,EAAxB,KAA2CgB,EAA3C,KAKMf,GAAaC,EAAAA,EAAAA,eAAa,EAA+C,CAC3EC,KAAM,SAAApM,GAAI,OAAIA,EAAJ,IACVqM,QAF2E,EAG3E1J,KAH2E,EAI3E2J,MAJ2E,EAK3EC,OAL2E,EAM3EW,MAN2E,EAO3ET,OAP2E,EAQ3EC,WAAYrJ,IAGhB,GAA8C8J,EAAAA,EAAAA,MAAtCC,EAAR,uBAA8BC,EAA9B,cAEMC,GAAmB7C,EAAAA,EAAAA,cACrB,cACI2C,GAAqBT,EAAAA,EAAAA,eAAcI,EAAS,CAAE/M,KAAAA,IAA9CoN,GACAzD,EAAiB,CAAC3J,EAAlB2J,KACArJ,MAAAA,GAAAA,EAAY,EAAZA,KAEJ,CAAC8M,EAAqB,EAAtB,EANJ,IASMG,GAAkB9C,EAAAA,EAAAA,cACpB,cACI2C,GAAqBT,EAAAA,EAAAA,eAAcI,EAAS,CAAE/M,KAAAA,IAA9CoN,GACA7M,MAAAA,GAAAA,EAAW,EAAXA,KAEJ,CAAC6M,EAAqB,EAL1B,IAQMI,GAAmB/C,EAAAA,EAAAA,cACrB,cACI4C,IACA1D,EAAAA,IACAnJ,MAAAA,GAAAA,EAAY,EAAZA,KAEJ,CAAC6M,EAAY,EANjB,IASA,OACI,8BACKnB,GAAW,qBACRS,EAAAA,EAAAA,eAAclJ,EAAe,CACzBmJ,IAAK5M,EADoB,GAEzBA,KAFyB,EAGzB6M,SAHyB,EAIzBvM,aAAcwC,EAAa,OAJF,EAKzBvC,YAAauC,EAAa,OALD,EAMzBtC,aAAcsC,EAAa,OANF,EAOzBzC,QAASyC,EAAa,OAAa5B,UCnH1CuM,EAAyB,YAGU,IAF5CzI,EAE2C,EAF3CA,MACA5B,EAC2C,EAD3CA,YAEMsK,EAAmBjC,EAAkB,EAA3C,GAEA,OACI,8BACKiC,EAAA,KAAqB,qBAClBC,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAAA,GAAAA,GADkB,SAR3B,qECYDC,EAAe,YAiDiB,IAhDlCrC,EAgDiC,EAhDjCA,MACAC,EA+CiC,EA/CjCA,OACQqC,EA8CyB,EA9CjCC,OA8CiC,IA5CjC1F,KAAe2F,EA4CkB,EA5CzB/I,MAAwBgJ,EA4CC,EA5CRnJ,MA4CQ,IA1CjC9C,aAAAA,OA0CiC,MA1ClByB,EAAgBzB,aA0CE,MAzCjCC,kBAAAA,OAyCiC,MAzCbwB,EAAgBxB,kBAyCH,MAxCjCC,YAAAA,OAwCiC,MAxCnBuB,EAAgBvB,YAwCG,MAvCjCC,YAAAA,OAuCiC,MAvCnBsB,EAAgBtB,YAuCG,MAtCjCC,YAAAA,OAsCiC,MAtCnBqB,EAAgBrB,YAsCG,MArCjCC,WAAAA,OAqCiC,MArCpBoB,EAAgBpB,WAqCI,MAnCjCN,OAAAA,OAmCiC,MAnCxB0B,EAAgB1B,OAmCQ,MAjCjC2B,cAAAA,OAiCiC,MAjCjBD,EAAgBC,cAiCC,MA9BjCpB,SAAAA,OA8BiC,MA9BtBmB,EAAgBnB,SA8BM,MA7BjCC,eAAAA,OA6BiC,MA7BhBkB,EAAgBlB,eA6BA,MA5BjCC,iBAAAA,OA4BiC,MA5BdiB,EAAgBjB,iBA4BF,MA3BjCC,UAAAA,OA2BiC,MA3BrBgB,EAAgBhB,UA2BK,MA1BjCC,gBAAAA,OA0BiC,MA1Bfe,EAAgBf,gBA0BD,MAzBjCC,gBAAAA,OAyBiC,MAzBfc,EAAgBd,gBAyBD,MAvBjCiB,cAAAA,OAuBiC,MAvBjBH,EAAgBG,cAuBC,MApBjCf,cAAAA,OAoBiC,MApBjBY,EAAgBZ,cAoBC,MAnBjCC,UAAAA,OAmBiC,MAnBrBW,EAAgBX,UAmBK,MAlBjCe,cAAAA,OAkBiC,MAlBjBJ,EAAgBI,cAkBC,MAhBjCR,YAAAA,OAgBiC,MAhBnBI,EAAgBJ,YAgBG,MAZjCN,cAAAA,QAYiC,MAZjBU,EAAgBV,cAYC,OAXjCC,qBAAAA,QAWiC,OAXVS,EAAgBT,qBAWN,QAVjCC,YAAAA,QAUiC,OAVnBQ,EAAgBR,YAUG,GATjC1C,GASiC,EATjCA,aACAC,GAQiC,EARjCA,YACAC,GAOiC,EAPjCA,aACAH,GAMiC,EANjCA,QAMiC,KAJjCkD,KAAAA,QAIiC,OAJ1BC,EAAgBD,KAIU,GAHjC0K,GAGiC,EAHjCA,UACAC,GAEiC,EAFjCA,eACAC,GACiC,EADjCA,gBAEA,IAAqEC,EAAAA,EAAAA,IAAc,EAAD,EAAlF,GAAQN,GAAR,UAAgBO,GAAhB,cAA4BC,GAA5B,eAAyCC,GAAzC,cAAqDC,GAArD,eAMA,GAA0D1F,EAAuB,CAC7EtE,OAAQ,CAAC6J,GAAD,EAAiBC,GADoD,GAE7EtJ,MAF6E,EAG7EH,MAH6E,EAI7E9C,aAJ6E,EAK7EC,kBAL6E,EAM7EC,YAN6E,EAO7EC,YAP6E,EAQ7EC,YAR6E,EAS7EC,WAT6E,EAU7EC,SAV6E,EAW7EC,eAX6E,EAY7EC,iBAZ6E,EAa7EC,UAb6E,EAc7EC,gBAd6E,EAe7EC,gBAf6E,EAgB7EE,cAhB6E,EAiB7EC,UAjB6E,EAkB7EC,cAlB6E,GAmB7EC,qBAAAA,KAnBIiC,GAAR,SAAeH,GAAf,SAAsB6E,GAAtB,iBAAqCC,GAArC,oBAsBM8E,GAAwC,CAC1C5J,MAD0C,KAE1CG,MAF0C,KAG1C5B,YAAa,MAGbtB,EAAAA,SAAAA,UAAJ,OAAgC+C,KAC5B4J,GAAAA,OACI,YAEI5J,MAFJ,GAGIlB,cAHJ,EAIItC,UAAWuC,GALnB6K,UAUA3M,EAAAA,SAAAA,UAAJ,OAAgCkD,KAC5ByJ,GAAAA,OACI,YAEIzJ,MAFJ,GAGIvB,cAHJ,EAIInD,aAJJ,GAKIC,YALJ,GAMIC,aANJ,GAOIH,QAPJ,GAQI0M,QARJ,GASIpD,iBATJ,GAUI7G,cAAeA,IAXvB2L,UAgBA3M,EAAAA,SAAAA,gBAAJ,OAAsCkD,KAClCyJ,GAAAA,aACI,YAEIzJ,MAFJ,GAGI5B,YAAaA,GAJrBqL,gBASJ,IAAMC,IAAiDrK,EAAAA,EAAAA,UACnD,iBAAO,CACHW,MAAOA,IADJ,GAEHH,MAAOA,IAFJ,GAGH6E,cAHG,GAIHC,iBAAAA,MAEJ,CAAC3E,GAAM,GAAP,GAPJ,KAUA,OACI,eACIuG,MADJ,GAEIC,OAFJ,GAGIsC,OAHJ,GAIIvK,KAJJ,GAKI0K,UALJ,GAMIC,eANJ,GAOIC,gBAPJ,YASKrM,EAAA,KAAW,cAAe,IAAD,EACtB,yBAAW6M,GACA,+BAAmBhC,EAAAA,EAAAA,eAAcgC,EAAM,KAA9C,GAGJ,eAAOF,QAAP,EAAOA,GAAP,iBAMHG,EAAU,kCACnB9L,OADmB,MACHU,EADG,4BAEnBH,OAFmB,MAETG,EAFS,2BAGnBF,OAHmB,MAGJE,EAHI,eAInByG,EAJmB,QAKnB4E,EALmB,gBAMhBC,EANgB,cAQnB,eAEQzL,QAFR,EAGQP,cAHR,EAIQQ,aAJR,EAKQuL,cALR,EAMQ5E,MANR,YASI,cAA0BnH,cAAeA,GAAzC,OC3LKiM,EAAoB,mBAM7B,uBACK,gBAAGxD,EAAH,QAAUC,EAAV,gBAAuB,cAAqBD,MAArB,EAAmCC,OAAQA,GAAlE,QAPwB,qECiB3BwD,EAAqB,YAqCiB,IApCxCzD,EAoCuC,EApCvCA,MACAC,EAmCuC,EAnCvCA,OACQqC,EAkC+B,EAlCvCC,OAkCuC,IAjCvC5J,WAAAA,OAiCuC,MAjC1BL,EAAmBK,WAiCO,MA/BvCkE,KAAe2F,EA+BwB,EA/B/B/I,MAAwBgJ,EA+BO,EA/BdnJ,MA+Bc,IA7BvC9C,aAAAA,OA6BuC,MA7BxB8B,EAAmB9B,aA6BK,MA5BvCC,kBAAAA,OA4BuC,MA5BnB6B,EAAmB7B,kBA4BA,MA3BvCC,YAAAA,OA2BuC,MA3BzB4B,EAAmB5B,YA2BM,MA1BvCC,YAAAA,OA0BuC,MA1BzB2B,EAAmB3B,YA0BM,MAzBvCC,YAAAA,OAyBuC,MAzBzB0B,EAAmB1B,YAyBM,MAxBvCC,WAAAA,OAwBuC,MAxB1ByB,EAAmBzB,WAwBO,MAtBvCN,OAAAA,OAsBuC,MAtB9B+B,EAAmB/B,OAsBW,MApBvCgC,WAAAA,OAoBuC,MApB1BD,EAAmBC,WAoBO,MAnBvCzB,SAAAA,OAmBuC,MAnB5BwB,EAAmBxB,SAmBS,MAlBvCC,eAAAA,OAkBuC,MAlBtBuB,EAAmBvB,eAkBG,MAjBvCC,iBAAAA,OAiBuC,MAjBpBsB,EAAmBtB,iBAiBC,MAhBvCC,UAAAA,OAgBuC,MAhB3BqB,EAAmBrB,UAgBQ,MAfvCC,gBAAAA,OAeuC,MAfrBoB,EAAmBpB,gBAeE,MAdvCC,gBAAAA,OAcuC,MAdrBmB,EAAmBnB,gBAcE,MAZvCuB,WAAAA,OAYuC,MAZ1BJ,EAAmBI,WAYO,MAXvCrB,cAAAA,OAWuC,MAXvBiB,EAAmBjB,cAWI,MAVvCC,UAAAA,OAUuC,MAV3BgB,EAAmBhB,UAUQ,MARvCO,YAAAA,OAQuC,MARzBS,EAAmBT,YAQM,MAJvCN,cAAAA,QAIuC,MAJvBe,EAAmBf,cAII,OAHvCC,qBAAAA,QAGuC,OAHhBc,EAAmBd,qBAGH,QAFvCC,YAAAA,QAEuC,OAFzBa,EAAmBb,YAEM,GADvC3C,GACuC,EADvCA,QAEM4O,IAAWC,EAAAA,EAAAA,QAAjB,MACA,IAAqEd,EAAAA,EAAAA,IAAc,EAAD,EAAlF,GAAQN,GAAR,UAAgBO,GAAhB,cAA4BC,GAA5B,eAAyCC,GAAzC,cAAqDC,GAArD,eAMA,GAA0D1F,EAAuB,CAC7EtE,OAAQ,CAAC6J,GAAD,EAAiBC,GADoD,GAE7EtJ,MAF6E,EAG7EH,MAH6E,EAI7E9C,aAJ6E,EAK7EC,kBAL6E,EAM7EC,YAN6E,EAO7EC,YAP6E,EAQ7EC,YAR6E,EAS7EC,WAT6E,EAU7EC,SAV6E,EAW7EC,eAX6E,EAY7EC,iBAZ6E,EAa7EC,UAb6E,EAc7EC,gBAd6E,EAe7EC,gBAf6E,EAgB7EE,cAhB6E,EAiB7EC,UAjB6E,EAkB7EC,cAlB6E,GAmB7EC,qBAAAA,KAnBIiC,GAAR,SAAeH,GAAf,SAAsB6E,GAAtB,iBAAqCC,GAArC,oBAsBM+D,GAAmBjC,EAAkB,GAA3C,GACM0D,IAAsBC,EAAAA,EAAAA,IAA2C,CACnEhM,YAAasK,KAGXgB,IAAiDrK,EAAAA,EAAAA,UACnD,iBAAO,CACHW,MAAOA,IADJ,GAEHH,MAAOA,IAFJ,GAGH6E,cAHG,GAIHC,iBAAAA,MAEJ,CAAC3E,GAAM,GAAP,GAPJ,KAUMiF,IAAQC,EAAAA,EAAAA,OAEdb,EAAAA,EAAAA,YAAU,WACN,UAAI4F,GAAAA,QAAJ,CAEAA,GAAAA,QAAAA,MAAyBV,GAAzBU,EACAA,GAAAA,QAAAA,OAA0BT,GAA1BS,EAEA,IAAMlL,EAAMkL,GAAAA,QAAAA,WAAZ,MAEAlL,EAAAA,MAAAA,EAAAA,GAEAA,EAAAA,UAAgBkG,GAAhBlG,WACAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IACAA,EAAAA,UAAc+J,GAAd/J,KAA2B+J,GAA3B/J,KAEAjC,EAAAA,SAAe,SAAA6M,GACPA,UAAAA,GAAJ,OAAyB9J,GACrBA,GAAAA,SAAc,SAAAzD,GAAI,OAAI6C,EAAWF,EAAf,MACX4K,UAAAA,GAAJ,OAAyB3J,GAC5BA,GAAAA,SAAc,SAAAhF,GAAI,OAAI8D,EAAWC,EAAf,MACf,gBAAI4K,GACPU,EAAAA,EAAAA,IAAyB,EAA0B,CAC/CjM,YAD+C,GAE/C6G,MAAAA,KAEG,mBAAO0E,GAAP,OAA+B3J,IAAnC,OAAqDH,IACxD8J,EAAM5K,EAAN4K,UAGT,CAAC,GAAD,MAICb,GAJD,KAKCA,GALD,wBA5BHzE,KA6CA,IAAMiG,IAAwB7E,EAAAA,EAAAA,cAC1B,YACI,GAAKwE,GAAD,SAAJ,OAAyBjK,GAAzB,CAEA,OAAeuK,EAAAA,EAAAA,IAAkBN,GAAD,QAAhC,GAAOlJ,EAAP,KAAUC,EAAV,KAEA,OAAOhB,GAAA,MAAW,SAAAhF,GAOd,OANyBwP,EAAAA,EAAAA,IACrBxP,EADgC,EAEhCA,EAFgC,EAGhC+F,EAAI+H,GAH4B,KAIhC9H,EAAI8H,GAJR,MAM2B9N,EAAAA,KAA3B,QAGR,CAACiP,GAAS,GAhBd,KAmBA,IAA8C9B,EAAAA,EAAAA,MAAtCC,GAAR,wBAA8BC,GAA9B,eAEMoC,IAAmBhF,EAAAA,EAAAA,cACrB,YACI,IAAMzK,EAAOsP,GAAb,GACA,GACIlC,IAAqBT,EAAAA,EAAAA,eAAc3J,GAAa,CAAEhD,KAAAA,IAAlDoN,GACAzD,GAAiB,CAAC3J,EAAlB2J,OAEA0D,KACA1D,GAAAA,OAGR,CAAC2F,GAAsB,GAAvB,MAXJ,KAcM9B,IAAmB/C,EAAAA,EAAAA,cAAY,WACjC4C,KACA1D,GAAAA,MACD,CAAC0D,GAHJ,KAKMqC,IAAcjF,EAAAA,EAAAA,cAChB,YACI,OAEA,IAAMzK,EAAOsP,GAAb,GACA,GACIjP,GAAQL,EAARK,MAGR,CAACiP,GATL,KAYA,OACI,mBACIK,IADJ,GAEIpE,MAAOgD,GAFX,EAGI/C,OAAQgD,GAHZ,EAIIlN,MAAO,CACHiK,MADG,GAEHC,OAFG,GAGHoE,OAAQ9M,GAAa,OAAY,UAErCzC,QAASyC,GAAa,QAT1B,EAUIxC,aAAcwC,GAAa,QAV/B,EAWItC,aAAcsC,GAAa,QAX/B,EAYIvC,YAAauC,GAAa,QAAsB5B,KAK/C2O,EAAgB,gBAIzB5F,EAJyB,0BAKzBnH,OALyB,MAKTe,EALS,4BAMzBR,OANyB,MAMfQ,EANe,2BAOzBP,OAPyB,MAOVO,EAPU,eAQzBgL,EARyB,gBAStBC,EATsB,cAWzB,eAAiBhM,cAAjB,EAAgCO,QAAhC,EAAyCC,aAAzC,EAAuD2G,MAAvD,EAA8D4E,cAA9D,YACI,cAAgC/L,cAAeA,GAA/C,OCpOKgN,EAA0B,mBAMnC,uBACK,gBAAGvE,EAAH,QAAUC,EAAV,gBACG,cAA2BD,MAA3B,EAAyCC,OAAQA,GADpD","sources":["webpack://nivo-website/../node_modules/d3-force/src/link.js","webpack://nivo-website/../src/NetworkNode.tsx","webpack://nivo-website/../src/NetworkLink.tsx","webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../src/NetworkNodeTooltip.tsx","webpack://nivo-website/../src/renderCanvasNode.ts","webpack://nivo-website/../src/renderCanvasLink.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../node_modules/d3-force/src/manyBody.js","webpack://nivo-website/../node_modules/d3-force/src/center.js","webpack://nivo-website/../src/NetworkLinks.tsx","webpack://nivo-website/../src/NetworkNodes.tsx","webpack://nivo-website/../src/NetworkNodeAnnotations.tsx","webpack://nivo-website/../src/Network.tsx","webpack://nivo-website/../src/ResponsiveNetwork.tsx","webpack://nivo-website/../src/NetworkCanvas.tsx","webpack://nivo-website/../src/ResponsiveNetworkCanvas.tsx"],"sourcesContent":["import constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"node not found: \" + nodeId);\n  return node;\n}\n\nexport default function (links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      count,\n      bias,\n      random,\n      iterations = 1;\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle(random);\n        y = target.y + target.vy - source.y - source.vy || jiggle(random);\n        l = Math.sqrt(x * x + y * y);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l;\n        target.vx -= x * (b = bias[i]);\n        target.vy -= y * b;\n        source.vx += x * (b = 1 - b);\n        source.vy += y * b;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = new Map(nodes.map(function (d, i) {\n      return [id(d, i, nodes), d];\n    })),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function (_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.links = function (_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function (_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function (_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function (_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}","import { memo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { InputNode, NodeProps } from './types'\n\nconst NonMemoizedNetworkNode = <Node extends InputNode>({\n    node,\n    animated: animatedProps,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: NodeProps<Node>) => (\n    <animated.circle\n        data-testid={`node.${node.id}`}\n        transform={to([animatedProps.x, animatedProps.y, animatedProps.scale], (x, y, scale) => {\n            return `translate(${x},${y}) scale(${scale})`\n        })}\n        r={to([animatedProps.size], size => size / 2)}\n        fill={animatedProps.color}\n        strokeWidth={animatedProps.borderWidth}\n        stroke={animatedProps.borderColor}\n        opacity={animatedProps.opacity}\n        onClick={onClick ? event => onClick(node, event) : undefined}\n        onMouseEnter={onMouseEnter ? event => onMouseEnter(node, event) : undefined}\n        onMouseMove={onMouseMove ? event => onMouseMove(node, event) : undefined}\n        onMouseLeave={onMouseLeave ? event => onMouseLeave(node, event) : undefined}\n    />\n)\n\nexport const NetworkNode = memo(NonMemoizedNetworkNode) as typeof NonMemoizedNetworkNode\n","import { animated } from '@react-spring/web'\nimport { InputLink, InputNode, LinkProps } from './types'\nimport { memo } from 'react'\n\nconst NonMemoizedNetworkLink = <Node extends InputNode, Link extends InputLink>({\n    link,\n    animated: animatedProps,\n    blendMode,\n}: LinkProps<Node, Link>) => (\n    <animated.line\n        data-testid={`link.${link.id}`}\n        stroke={animatedProps.color}\n        style={{ mixBlendMode: blendMode }}\n        strokeWidth={link.thickness}\n        strokeLinecap=\"round\"\n        opacity={animatedProps.opacity}\n        x1={animatedProps.x1}\n        y1={animatedProps.y1}\n        x2={animatedProps.x2}\n        y2={animatedProps.y2}\n    />\n)\n\nexport const NetworkLink = memo(NonMemoizedNetworkLink) as typeof NonMemoizedNetworkLink\n","import { NetworkCommonProps, InputNode, LayerId, NetworkSvgProps, InputLink } from './types'\nimport { NetworkNode } from './NetworkNode'\nimport { renderCanvasNode } from './renderCanvasNode'\nimport { NetworkLink } from './NetworkLink'\nimport { renderCanvasLink } from './renderCanvasLink'\nimport { NetworkNodeTooltip } from './NetworkNodeTooltip'\n\nexport const commonDefaultProps: Omit<\n    NetworkCommonProps<InputNode, InputLink>,\n    | 'margin'\n    | 'theme'\n    | 'onClick'\n    | 'renderWrapper'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['links', 'nodes', 'annotations'],\n\n    linkDistance: 30,\n    centeringStrength: 1,\n    repulsivity: 10,\n    distanceMin: 1,\n    distanceMax: Infinity,\n    iterations: 120,\n\n    nodeSize: 12,\n    activeNodeSize: 18,\n    inactiveNodeSize: 8,\n    nodeColor: '#000000',\n    nodeBorderWidth: 0,\n    nodeBorderColor: { from: 'color' },\n\n    linkThickness: 1,\n    linkColor: { from: 'source.color' },\n\n    isInteractive: true,\n    defaultActiveNodeIds: [],\n    nodeTooltip: NetworkNodeTooltip,\n\n    annotations: [],\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n\n    role: 'img',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: NetworkNode as NonNullable<\n        NetworkSvgProps<InputNode, InputLink>['nodeComponent']\n    >,\n    linkComponent: NetworkLink as NonNullable<\n        NetworkSvgProps<InputNode, InputLink>['linkComponent']\n    >,\n    linkBlendMode: 'normal' as NonNullable<NetworkSvgProps<InputNode, InputLink>['linkBlendMode']>,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    renderNode: renderCanvasNode,\n    renderLink: renderCanvasLink,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { InputNode, NodeTooltipProps } from './types'\n\nexport const NetworkNodeTooltip = <Node extends InputNode>({ node }: NodeTooltipProps<Node>) => (\n    <BasicTooltip id={node.id} enableChip={true} color={node.color} />\n)\n","import { ComputedNode, InputNode } from './types'\n\nexport const renderCanvasNode = <Node extends InputNode>(\n    ctx: CanvasRenderingContext2D,\n    node: ComputedNode<Node>\n) => {\n    ctx.fillStyle = node.color\n    ctx.beginPath()\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n    ctx.fill()\n\n    if (node.borderWidth > 0) {\n        ctx.strokeStyle = node.borderColor\n        ctx.lineWidth = node.borderWidth\n        ctx.stroke()\n    }\n}\n","import { InputNode, ComputedLink, InputLink } from './types'\n\nexport const renderCanvasLink = <Node extends InputNode, Link extends InputLink>(\n    ctx: CanvasRenderingContext2D,\n    link: ComputedLink<Node, Link>\n) => {\n    ctx.strokeStyle = link.color\n    ctx.lineWidth = link.thickness\n\n    ctx.beginPath()\n    ctx.moveTo(link.source.x, link.source.y)\n    ctx.lineTo(link.target.x, link.target.y)\n    ctx.stroke()\n}\n","import { useState, useEffect, useMemo, useCallback } from 'react'\nimport { forceSimulation, forceManyBody, forceCenter, forceLink } from 'd3-force'\nimport { useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { AnnotationMatcher, useAnnotations } from '@nivo/annotations'\nimport { commonDefaultProps } from './defaults'\nimport {\n    InputLink,\n    InputNode,\n    NetworkCommonProps,\n    DerivedProp,\n    ComputedNode,\n    ComputedLink,\n    TransientNode,\n    TransientLink,\n} from './types'\n\nconst useDerivedProp = <Target, Output extends string | number>(\n    instruction: DerivedProp<Target, Output>\n) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useComputeForces = <Node extends InputNode, Link extends InputLink>({\n    linkDistance,\n    centeringStrength,\n    repulsivity,\n    distanceMin,\n    distanceMax,\n    center,\n}: {\n    linkDistance: NetworkCommonProps<Node, Link>['linkDistance']\n    centeringStrength: NetworkCommonProps<Node, Link>['centeringStrength']\n    repulsivity: NetworkCommonProps<Node, Link>['repulsivity']\n    distanceMin: NetworkCommonProps<Node, Link>['distanceMin']\n    distanceMax: NetworkCommonProps<Node, Link>['distanceMax']\n    center: [number, number]\n}) => {\n    const getLinkDistance = useDerivedProp<Link, number>(linkDistance)\n\n    const centerX = center[0]\n    const centerY = center[1]\n\n    return useMemo(() => {\n        const linkForce = forceLink<TransientNode<Node>, TransientLink<Node, Link>>()\n            .distance(link => getLinkDistance(link.data))\n            .strength(centeringStrength)\n\n        const chargeForce = forceManyBody()\n            .strength(-repulsivity)\n            .distanceMin(distanceMin)\n            .distanceMax(distanceMax)\n\n        const centerForce = forceCenter(centerX, centerY)\n\n        return { link: linkForce, charge: chargeForce, center: centerForce }\n    }, [\n        getLinkDistance,\n        centeringStrength,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        centerX,\n        centerY,\n    ])\n}\n\nconst useNodeStyle = <Node extends InputNode, Link extends InputLink>({\n    size,\n    activeSize,\n    inactiveSize,\n    color,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    activeNodeIds,\n}: {\n    size: NetworkCommonProps<Node, Link>['nodeSize']\n    activeSize: NetworkCommonProps<Node, Link>['activeNodeSize']\n    inactiveSize: NetworkCommonProps<Node, Link>['inactiveNodeSize']\n    color: NetworkCommonProps<Node, Link>['nodeColor']\n    borderWidth: NetworkCommonProps<Node, Link>['nodeBorderWidth']\n    borderColor: NetworkCommonProps<Node, Link>['nodeBorderColor']\n    isInteractive: NetworkCommonProps<Node, Link>['isInteractive']\n    activeNodeIds: string[]\n}) => {\n    const theme = useTheme()\n\n    const getSize = useDerivedProp(size)\n    const getColor = useDerivedProp(color)\n    const getBorderWidth = useDerivedProp(borderWidth)\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getNormalStyle = useCallback(\n        (node: TransientNode<Node>) => {\n            const color = getColor(node.data)\n\n            return {\n                size: getSize(node.data),\n                color,\n                borderWidth: getBorderWidth(node.data),\n                borderColor: getBorderColor({ ...node, color }),\n            }\n        },\n        [getSize, getColor, getBorderWidth, getBorderColor]\n    )\n\n    const getActiveSize = useDerivedProp(activeSize)\n    const getActiveStyle = useCallback(\n        (node: TransientNode<Node>) => {\n            const color = getColor(node.data)\n\n            return {\n                size: getActiveSize(node.data),\n                color,\n                borderWidth: getBorderWidth(node.data),\n                borderColor: getBorderColor({ ...node, color }),\n            }\n        },\n        [getActiveSize, getColor, getBorderWidth, getBorderColor]\n    )\n\n    const getInactiveSize = useDerivedProp(inactiveSize)\n    const getInactiveStyle = useCallback(\n        (node: TransientNode<Node>) => {\n            const color = getColor(node.data)\n\n            return {\n                size: getInactiveSize(node.data),\n                color,\n                borderWidth: getBorderWidth(node.data),\n                borderColor: getBorderColor({ ...node, color }),\n            }\n        },\n        [getInactiveSize, getColor, getBorderWidth, getBorderColor]\n    )\n\n    return useCallback(\n        (node: TransientNode<Node>) => {\n            if (!isInteractive || activeNodeIds.length === 0) return getNormalStyle(node)\n            if (activeNodeIds.includes(node.id)) return getActiveStyle(node)\n            return getInactiveStyle(node)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeNodeIds]\n    )\n}\n\nexport const useNetwork = <Node extends InputNode = InputNode, Link extends InputLink = InputLink>({\n    center,\n    nodes,\n    links,\n    linkDistance = commonDefaultProps.linkDistance,\n    centeringStrength = commonDefaultProps.centeringStrength,\n    repulsivity = commonDefaultProps.repulsivity,\n    distanceMin = commonDefaultProps.distanceMin,\n    distanceMax = commonDefaultProps.distanceMax,\n    iterations = commonDefaultProps.iterations,\n    nodeSize = commonDefaultProps.nodeSize,\n    activeNodeSize = commonDefaultProps.activeNodeSize,\n    inactiveNodeSize = commonDefaultProps.inactiveNodeSize,\n    nodeColor = commonDefaultProps.nodeColor,\n    nodeBorderWidth = commonDefaultProps.nodeBorderWidth,\n    nodeBorderColor = commonDefaultProps.nodeBorderColor,\n    linkThickness = commonDefaultProps.linkThickness,\n    linkColor = commonDefaultProps.linkColor,\n    isInteractive = commonDefaultProps.isInteractive,\n    defaultActiveNodeIds = commonDefaultProps.defaultActiveNodeIds,\n}: {\n    center: [number, number]\n    nodes: Node[]\n    links: Link[]\n    linkDistance?: NetworkCommonProps<Node, Link>['linkDistance']\n    centeringStrength?: NetworkCommonProps<Node, Link>['centeringStrength']\n    repulsivity?: NetworkCommonProps<Node, Link>['repulsivity']\n    distanceMin?: NetworkCommonProps<Node, Link>['distanceMin']\n    distanceMax?: NetworkCommonProps<Node, Link>['distanceMax']\n    iterations?: NetworkCommonProps<Node, Link>['iterations']\n    nodeSize?: NetworkCommonProps<Node, Link>['nodeSize']\n    activeNodeSize?: NetworkCommonProps<Node, Link>['activeNodeSize']\n    inactiveNodeSize?: NetworkCommonProps<Node, Link>['inactiveNodeSize']\n    nodeColor?: NetworkCommonProps<Node, Link>['nodeColor']\n    nodeBorderWidth?: NetworkCommonProps<Node, Link>['nodeBorderWidth']\n    nodeBorderColor?: NetworkCommonProps<Node, Link>['nodeBorderColor']\n    linkThickness?: NetworkCommonProps<Node, Link>['linkThickness']\n    linkColor?: NetworkCommonProps<Node, Link>['linkColor']\n    isInteractive?: NetworkCommonProps<Node, Link>['isInteractive']\n    defaultActiveNodeIds?: NetworkCommonProps<Node, Link>['defaultActiveNodeIds']\n}) => {\n    // we're using `null` instead of empty array so that we can dissociate\n    // initial rendering from updates when using transitions.\n    const [transientNodes, setTransientNodes] = useState<null | TransientNode<Node>[]>(null)\n    const [transientLinks, setTransientLinks] = useState<null | TransientLink<Node, Link>[]>(null)\n\n    const forces = useComputeForces<Node, Link>({\n        linkDistance,\n        centeringStrength,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        center,\n    })\n\n    useEffect(() => {\n        // copy the nodes & links to avoid mutating the original ones.\n        const _transientNodes: TransientNode<Node>[] = nodes.map(node => ({\n            id: node.id,\n            data: { ...node },\n            // the properties below are populated by D3, via mutations\n            index: 0,\n            x: 0,\n            y: 0,\n            vx: 0,\n            vy: 0,\n        }))\n        const _transientLinks: TransientLink<Node, Link>[] = links.map(link => ({\n            data: { ...link },\n            // populated by D3, via mutation\n            index: 0,\n            // replace ids with objects, otherwise D3 does this automatically\n            // which is a bit annoying with typings because then `source` & `target`\n            // can be either strings (before the simulation) or an objects (after).\n            source: _transientNodes.find(node => node.id === link.source)!,\n            target: _transientNodes.find(node => node.id === link.target)!,\n        }))\n\n        const simulation = forceSimulation(_transientNodes)\n            .force('link', forces.link.links(_transientLinks))\n            .force('charge', forces.charge)\n            .force('center', forces.center)\n            .stop()\n\n        // this will set `index`, `x`, `y`, `vx`, `vy` for each node.\n        simulation.tick(iterations)\n\n        setTransientNodes(_transientNodes)\n        setTransientLinks(_transientLinks)\n\n        return () => {\n            simulation.stop()\n        }\n    }, [nodes, links, forces, iterations, setTransientNodes, setTransientLinks])\n\n    const [activeNodeIds, setActiveNodeIds] = useState<string[]>(defaultActiveNodeIds)\n\n    const getNodeStyle = useNodeStyle<Node, Link>({\n        size: nodeSize,\n        activeSize: activeNodeSize,\n        inactiveSize: inactiveNodeSize,\n        color: nodeColor,\n        borderWidth: nodeBorderWidth,\n        borderColor: nodeBorderColor,\n        isInteractive,\n        activeNodeIds,\n    })\n    const computedNodes: ComputedNode<Node>[] | null = useMemo(() => {\n        if (transientNodes === null) return null\n\n        return transientNodes.map(node => ({\n            ...node,\n            ...getNodeStyle(node),\n        }))\n    }, [transientNodes, getNodeStyle])\n\n    const theme = useTheme()\n    const getLinkThickness = useDerivedProp(linkThickness)\n    const getLinkColor = useInheritedColor(linkColor, theme)\n\n    const computedLinks: ComputedLink<Node, Link>[] | null = useMemo(() => {\n        if (transientLinks === null || computedNodes === null) return null\n\n        return transientLinks.map(({ index, ...link }) => {\n            const linkWithComputedNodes: Omit<ComputedLink<Node, Link>, 'color' | 'thickness'> = {\n                id: `${link.source.id}.${link.target.id}`,\n                data: link.data,\n                index,\n                source: computedNodes.find(node => node.id === link.source.id)!,\n                target: computedNodes.find(node => node.id === link.target.id)!,\n            }\n\n            return {\n                ...linkWithComputedNodes,\n                thickness: getLinkThickness(linkWithComputedNodes),\n                color: getLinkColor(linkWithComputedNodes),\n            }\n        })\n    }, [transientLinks, computedNodes, getLinkThickness, getLinkColor])\n\n    return {\n        nodes: computedNodes,\n        links: computedLinks,\n        activeNodeIds,\n        setActiveNodeIds,\n    }\n}\n\nconst getNodeAnnotationPosition = <Node extends InputNode>(node: ComputedNode<Node>) => ({\n    x: node.x,\n    y: node.y,\n})\n\nconst getNodeAnnotationDimensions = <Node extends InputNode>(node: ComputedNode<Node>) => ({\n    size: node.size,\n    width: node.size,\n    height: node.size,\n})\n\nexport const useNodeAnnotations = <Node extends InputNode>(\n    nodes: ComputedNode<Node>[],\n    annotations: AnnotationMatcher<ComputedNode<Node>>[]\n) =>\n    useAnnotations<ComputedNode<Node>>({\n        data: nodes,\n        annotations,\n        getPosition: getNodeAnnotationPosition,\n        getDimensions: getNodeAnnotationDimensions,\n    })\n","import { quadtree } from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\nimport { x, y } from \"./simulation.js\";\nexport default function () {\n  var nodes,\n      node,\n      random,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i,\n        n = nodes.length,\n        tree = quadtree(nodes, x, y).visitAfter(accumulate);\n\n    for (alpha = _, i = 0; i < n; ++i) {\n      node = nodes[i], tree.visit(apply);\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        node;\n    strengths = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n    }\n  }\n\n  function accumulate(quad) {\n    var strength = 0,\n        q,\n        c,\n        weight = 0,\n        x,\n        y,\n        i; // For internal nodes, accumulate forces from child quadrants.\n\n    if (quad.length) {\n      for (x = y = i = 0; i < 4; ++i) {\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n        }\n      }\n\n      quad.x = x / weight;\n      quad.y = y / weight;\n    } // For leaf nodes, accumulate forces from coincident quadrants.\n    else {\n      q = quad;\n      q.x = q.data.x;\n      q.y = q.data.y;\n\n      do {\n        strength += strengths[q.data.index];\n      } while (q = q.next);\n    }\n\n    quad.value = strength;\n  }\n\n  function apply(quad, x1, _, x2) {\n    if (!quad.value) return true;\n    var x = quad.x - node.x,\n        y = quad.y - node.y,\n        w = x2 - x1,\n        l = x * x + y * y; // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(random), l += x * x;\n        if (y === 0) y = jiggle(random), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * quad.value * alpha / l;\n        node.vy += y * quad.value * alpha / l;\n      }\n\n      return true;\n    } // Otherwise, process points directly.\n    else if (quad.length || l >= distanceMax2) return; // Limit forces for very close nodes; randomize direction if coincident.\n\n\n    if (quad.data !== node || quad.next) {\n      if (x === 0) x = jiggle(random), l += x * x;\n      if (y === 0) y = jiggle(random), l += y * y;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do {\n      if (quad.data !== node) {\n        w = strengths[quad.data.index] * alpha / l;\n        node.vx += x * w;\n        node.vy += y * w;\n      }\n    } while (quad = quad.next);\n  }\n\n  force.initialize = function (_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function (_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function (_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function (_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}","export default function (x, y) {\n  var nodes,\n      strength = 1;\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n\n  function force() {\n    var i,\n        n = nodes.length,\n        node,\n        sx = 0,\n        sy = 0;\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], sx += node.x, sy += node.y;\n    }\n\n    for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i) {\n      node = nodes[i], node.x -= sx, node.y -= sy;\n    }\n  }\n\n  force.initialize = function (_) {\n    nodes = _;\n  };\n\n  force.x = function (_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function (_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  return force;\n}","import { createElement, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { ComputedLink, InputLink, InputNode, LinkComponent, NetworkSvgProps } from './types'\n\ninterface NetworkLinksProps<Node extends InputNode, Link extends InputLink> {\n    links: ComputedLink<Node, Link>[]\n    linkComponent: LinkComponent<Node, Link>\n    blendMode: NonNullable<NetworkSvgProps<Node, Link>['linkBlendMode']>\n}\n\nconst getEnterTransition =\n    <Node extends InputNode, Link extends InputLink>() =>\n    (link: ComputedLink<Node, Link>) => ({\n        x1: link.source.x,\n        y1: link.source.y,\n        x2: link.source.x,\n        y2: link.source.y,\n        color: link.color,\n        opacity: 0,\n    })\n\nconst getRegularTransition =\n    <Node extends InputNode, Link extends InputLink>() =>\n    (link: ComputedLink<Node, Link>) => ({\n        x1: link.source.x,\n        y1: link.source.y,\n        x2: link.target.x,\n        y2: link.target.y,\n        color: link.color,\n        opacity: 1,\n    })\n\nexport const NetworkLinks = <Node extends InputNode, Link extends InputLink>({\n    links,\n    linkComponent,\n    blendMode,\n}: NetworkLinksProps<Node, Link>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const [enterTransition, regularTransition] = useMemo(\n        () => [getEnterTransition<Node, Link>(), getRegularTransition<Node, Link>()],\n        []\n    )\n\n    const transition = useTransition<\n        ComputedLink<Node, Link>,\n        {\n            x1: number\n            y1: number\n            x2: number\n            y2: number\n            color: string\n            opacity: number\n        }\n    >(links, {\n        keys: link => link.id,\n        initial: regularTransition,\n        from: enterTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        expires: true,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, link) => {\n                return createElement(linkComponent, {\n                    key: link.id,\n                    link,\n                    animated: transitionProps,\n                    blendMode,\n                })\n            })}\n        </>\n    )\n}\n","import { createElement, useCallback, useMemo, MouseEvent } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { InputNode, ComputedNode, NodeAnimatedProps, NetworkSvgProps, InputLink } from './types'\n\ninterface NetworkNodesProps<Node extends InputNode, Link extends InputLink> {\n    nodes: ComputedNode<Node>[]\n    nodeComponent: NonNullable<NetworkSvgProps<Node, Link>['nodeComponent']>\n    onMouseEnter: NetworkSvgProps<Node, Link>['onMouseEnter']\n    onMouseMove: NetworkSvgProps<Node, Link>['onMouseMove']\n    onMouseLeave: NetworkSvgProps<Node, Link>['onMouseLeave']\n    onClick: NetworkSvgProps<Node, Link>['onClick']\n    tooltip: NonNullable<NetworkSvgProps<Node, Link>['nodeTooltip']>\n    setActiveNodeIds: (nodeIds: string[]) => void\n    isInteractive: NonNullable<NetworkSvgProps<Node, Link>['isInteractive']>\n}\n\nconst getEnterTransition =\n    <Node extends InputNode>() =>\n    (node: ComputedNode<Node>) => ({\n        x: node.x,\n        y: node.y,\n        size: node.size,\n        color: node.color,\n        borderWidth: node.borderWidth,\n        borderColor: node.borderColor,\n        scale: 0,\n        opacity: 0,\n    })\n\nconst getRegularTransition =\n    <N extends InputNode>() =>\n    (node: ComputedNode<N>) => ({\n        x: node.x,\n        y: node.y,\n        size: node.size,\n        color: node.color,\n        borderWidth: node.borderWidth,\n        borderColor: node.borderColor,\n        scale: 1,\n        opacity: 1,\n    })\n\nconst getExitTransition =\n    <Node extends InputNode>() =>\n    (node: ComputedNode<Node>) => ({\n        x: node.x,\n        y: node.y,\n        size: node.size,\n        color: node.color,\n        borderWidth: node.borderWidth,\n        borderColor: node.borderColor,\n        scale: 0,\n        opacity: 0,\n    })\n\nexport const NetworkNodes = <Node extends InputNode, Link extends InputLink>({\n    nodes,\n    nodeComponent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    setActiveNodeIds,\n    isInteractive,\n}: NetworkNodesProps<Node, Link>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const [enterTransition, regularTransition, exitTransition] = useMemo(\n        () => [getEnterTransition<Node>(), getRegularTransition<Node>(), getExitTransition<Node>()],\n        []\n    )\n\n    const transition = useTransition<ComputedNode<Node>, NodeAnimatedProps>(nodes, {\n        keys: node => node.id,\n        initial: regularTransition,\n        from: enterTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: exitTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node: ComputedNode<Node>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            setActiveNodeIds([node.id])\n            onMouseEnter?.(node, event)\n        },\n        [showTooltipFromEvent, tooltip, setActiveNodeIds, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ComputedNode<Node>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ComputedNode<Node>, event: MouseEvent) => {\n            hideTooltip()\n            setActiveNodeIds([])\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, setActiveNodeIds, onMouseLeave]\n    )\n\n    return (\n        <>\n            {transition((transitionProps, node) =>\n                createElement(nodeComponent, {\n                    key: node.id,\n                    node,\n                    animated: transitionProps,\n                    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n                    onMouseMove: isInteractive ? handleMouseMove : undefined,\n                    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n                    onClick: isInteractive ? onClick : undefined,\n                })\n            )}\n        </>\n    )\n}\n","import { Annotation } from '@nivo/annotations'\nimport { ComputedNode, InputLink, InputNode, NetworkSvgProps } from './types'\nimport { useNodeAnnotations } from './hooks'\n\ninterface NetworkNodeAnnotationsProps<Node extends InputNode, Link extends InputLink> {\n    nodes: ComputedNode<Node>[]\n    annotations: NonNullable<NetworkSvgProps<Node, Link>['annotations']>\n}\n\nexport const NetworkNodeAnnotations = <Node extends InputNode, Link extends InputLink>({\n    nodes,\n    annotations,\n}: NetworkNodeAnnotationsProps<Node, Link>) => {\n    const boundAnnotations = useNodeAnnotations<Node>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { svgDefaultProps } from './defaults'\nimport { useNetwork } from './hooks'\nimport { NetworkLinks } from './NetworkLinks'\nimport { NetworkNodes } from './NetworkNodes'\nimport { NetworkNodeAnnotations } from './NetworkNodeAnnotations'\nimport {\n    InputNode,\n    LayerId,\n    NodeTooltip,\n    NetworkSvgProps,\n    InputLink,\n    CustomLayerProps,\n} from './types'\n\ntype InnerNetworkProps<Node extends InputNode, Link extends InputLink> = Omit<\n    NetworkSvgProps<Node, Link>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerNetwork = <Node extends InputNode, Link extends InputLink>({\n    width,\n    height,\n    margin: partialMargin,\n\n    data: { nodes: rawNodes, links: rawLinks },\n\n    linkDistance = svgDefaultProps.linkDistance,\n    centeringStrength = svgDefaultProps.centeringStrength,\n    repulsivity = svgDefaultProps.repulsivity,\n    distanceMin = svgDefaultProps.distanceMin,\n    distanceMax = svgDefaultProps.distanceMax,\n    iterations = svgDefaultProps.iterations,\n\n    layers = svgDefaultProps.layers,\n\n    nodeComponent = svgDefaultProps.nodeComponent as NonNullable<\n        NetworkSvgProps<Node, Link>['nodeComponent']\n    >,\n    nodeSize = svgDefaultProps.nodeSize,\n    activeNodeSize = svgDefaultProps.activeNodeSize,\n    inactiveNodeSize = svgDefaultProps.inactiveNodeSize,\n    nodeColor = svgDefaultProps.nodeColor,\n    nodeBorderWidth = svgDefaultProps.nodeBorderWidth,\n    nodeBorderColor = svgDefaultProps.nodeBorderColor,\n\n    linkComponent = svgDefaultProps.linkComponent as NonNullable<\n        NetworkSvgProps<Node, Link>['linkComponent']\n    >,\n    linkThickness = svgDefaultProps.linkThickness,\n    linkColor = svgDefaultProps.linkColor,\n    linkBlendMode = svgDefaultProps.linkBlendMode,\n\n    annotations = svgDefaultProps.annotations as NonNullable<\n        NetworkSvgProps<Node, Link>['annotations']\n    >,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    defaultActiveNodeIds = svgDefaultProps.defaultActiveNodeIds,\n    nodeTooltip = svgDefaultProps.nodeTooltip as NodeTooltip<Node>,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerNetworkProps<Node, Link>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, links, activeNodeIds, setActiveNodeIds } = useNetwork<Node, Link>({\n        center: [innerWidth / 2, innerHeight / 2],\n        nodes: rawNodes,\n        links: rawLinks,\n        linkDistance,\n        centeringStrength,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        nodeBorderWidth,\n        nodeBorderColor,\n        linkThickness,\n        linkColor,\n        isInteractive,\n        defaultActiveNodeIds,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        links: null,\n        nodes: null,\n        annotations: null,\n    }\n\n    if (layers.includes('links') && links !== null) {\n        layerById.links = (\n            <NetworkLinks<Node, Link>\n                key=\"links\"\n                links={links}\n                linkComponent={linkComponent}\n                blendMode={linkBlendMode}\n            />\n        )\n    }\n\n    if (layers.includes('nodes') && nodes !== null) {\n        layerById.nodes = (\n            <NetworkNodes<Node, Link>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={nodeTooltip}\n                setActiveNodeIds={setActiveNodeIds}\n                isInteractive={isInteractive}\n            />\n        )\n    }\n\n    if (layers.includes('annotations') && nodes !== null) {\n        layerById.annotations = (\n            <NetworkNodeAnnotations<Node, Link>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    const customLayerProps: CustomLayerProps<Node, Link> = useMemo(\n        () => ({\n            nodes: nodes || [],\n            links: links || [],\n            activeNodeIds,\n            setActiveNodeIds,\n        }),\n        [nodes, links, activeNodeIds, setActiveNodeIds]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Network = <Node extends InputNode = InputNode, Link extends InputLink = InputLink>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: NetworkSvgProps<Node, Link>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerNetwork<Node, Link> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { InputLink, InputNode, NetworkSvgProps } from './types'\nimport { Network } from './Network'\n\nexport const ResponsiveNetwork = <\n    Node extends InputNode = InputNode,\n    Link extends InputLink = InputLink\n>(\n    props: Omit<NetworkSvgProps<Node, Link>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Network<Node, Link> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { useCallback, useRef, useEffect, createElement, MouseEvent, useMemo } from 'react'\nimport { getDistance, getRelativeCursor, Container, useDimensions, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useComputedAnnotations, renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { canvasDefaultProps } from './defaults'\nimport { useNetwork, useNodeAnnotations } from './hooks'\nimport {\n    NetworkCanvasProps,\n    InputNode,\n    ComputedNode,\n    NodeTooltip,\n    InputLink,\n    NetworkSvgProps,\n    CustomLayerProps,\n} from './types'\n\ntype InnerNetworkCanvasProps<Node extends InputNode, Link extends InputLink> = Omit<\n    NetworkCanvasProps<Node, Link>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerNetworkCanvas = <Node extends InputNode, Link extends InputLink>({\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    data: { nodes: rawNodes, links: rawLinks },\n\n    linkDistance = canvasDefaultProps.linkDistance,\n    centeringStrength = canvasDefaultProps.centeringStrength,\n    repulsivity = canvasDefaultProps.repulsivity,\n    distanceMin = canvasDefaultProps.distanceMin,\n    distanceMax = canvasDefaultProps.distanceMax,\n    iterations = canvasDefaultProps.iterations,\n\n    layers = canvasDefaultProps.layers,\n\n    renderNode = canvasDefaultProps.renderNode,\n    nodeSize = canvasDefaultProps.nodeSize,\n    activeNodeSize = canvasDefaultProps.activeNodeSize,\n    inactiveNodeSize = canvasDefaultProps.inactiveNodeSize,\n    nodeColor = canvasDefaultProps.nodeColor,\n    nodeBorderWidth = canvasDefaultProps.nodeBorderWidth,\n    nodeBorderColor = canvasDefaultProps.nodeBorderColor,\n\n    renderLink = canvasDefaultProps.renderLink,\n    linkThickness = canvasDefaultProps.linkThickness,\n    linkColor = canvasDefaultProps.linkColor,\n\n    annotations = canvasDefaultProps.annotations as NonNullable<\n        NetworkSvgProps<Node, Link>['annotations']\n    >,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    defaultActiveNodeIds = canvasDefaultProps.defaultActiveNodeIds,\n    nodeTooltip = canvasDefaultProps.nodeTooltip as NodeTooltip<Node>,\n    onClick,\n}: InnerNetworkCanvasProps<Node, Link>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, links, activeNodeIds, setActiveNodeIds } = useNetwork<Node, Link>({\n        center: [innerWidth / 2, innerHeight / 2],\n        nodes: rawNodes,\n        links: rawLinks,\n        linkDistance,\n        centeringStrength,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        nodeBorderWidth,\n        nodeBorderColor,\n        linkThickness,\n        linkColor,\n        isInteractive,\n        defaultActiveNodeIds,\n    })\n\n    const boundAnnotations = useNodeAnnotations<Node>(nodes!, annotations)\n    const computedAnnotations = useComputedAnnotations<ComputedNode<Node>>({\n        annotations: boundAnnotations,\n    })\n\n    const customLayerProps: CustomLayerProps<Node, Link> = useMemo(\n        () => ({\n            nodes: nodes || [],\n            links: links || [],\n            activeNodeIds,\n            setActiveNodeIds,\n        }),\n        [nodes, links, activeNodeIds, setActiveNodeIds]\n    )\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'links' && links !== null) {\n                links.forEach(link => renderLink(ctx, link))\n            } else if (layer === 'nodes' && nodes !== null) {\n                nodes.forEach(node => renderNode(ctx, node))\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas<ComputedNode<Node>>(ctx, {\n                    annotations: computedAnnotations as any,\n                    theme,\n                })\n            } else if (typeof layer === 'function' && nodes !== null && links !== null) {\n                layer(ctx, customLayerProps)\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        margin.left,\n        margin.top,\n        pixelRatio,\n        layers,\n        theme,\n        nodes,\n        links,\n        renderNode,\n        renderLink,\n        computedAnnotations,\n        customLayerProps,\n    ])\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: MouseEvent) => {\n            if (!canvasEl.current || nodes === null) return undefined\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n            return nodes.find(node => {\n                const distanceFromNode = getDistance(\n                    node.x,\n                    node.y,\n                    x - margin.left,\n                    y - margin.top\n                )\n                return distanceFromNode <= node.size / 2\n            })\n        },\n        [canvasEl, margin, nodes]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                showTooltipFromEvent(createElement(nodeTooltip, { node }), event)\n                setActiveNodeIds([node.id])\n            } else {\n                hideTooltip()\n                setActiveNodeIds([])\n            }\n        },\n        [getNodeFromMouseEvent, showTooltipFromEvent, nodeTooltip, hideTooltip, setActiveNodeIds]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setActiveNodeIds([])\n    }, [hideTooltip, setActiveNodeIds])\n\n    const handleClick = useCallback(\n        (event: MouseEvent) => {\n            if (!onClick) return\n\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n        />\n    )\n}\n\nexport const NetworkCanvas = <\n    Node extends InputNode = InputNode,\n    Link extends InputLink = InputLink\n>({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: NetworkCanvasProps<Node, Link>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerNetworkCanvas<Node, Link> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { NetworkCanvasProps, InputNode, InputLink } from './types'\nimport { NetworkCanvas } from './NetworkCanvas'\n\nexport const ResponsiveNetworkCanvas = <\n    Node extends InputNode = InputNode,\n    Link extends InputLink = InputLink\n>(\n    props: Omit<NetworkCanvasProps<Node, Link>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <NetworkCanvas<Node, Link> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["index","d","find","nodeById","nodeId","node","get","Error","NonMemoizedNetworkNode","animatedProps","onClick","onMouseEnter","onMouseMove","onMouseLeave","transform","to","r","size","fill","strokeWidth","stroke","opacity","event","undefined","NonMemoizedNetworkLink","link","blendMode","style","mixBlendMode","strokeLinecap","x1","y1","x2","y2","commonDefaultProps","layers","linkDistance","centeringStrength","repulsivity","distanceMin","distanceMax","iterations","nodeSize","activeNodeSize","inactiveNodeSize","nodeColor","nodeBorderWidth","nodeBorderColor","from","linkThickness","linkColor","isInteractive","defaultActiveNodeIds","nodeTooltip","id","enableChip","color","annotations","animate","motionConfig","role","svgDefaultProps","nodeComponent","memo","linkComponent","linkBlendMode","canvasDefaultProps","renderNode","ctx","Math","renderLink","pixelRatio","window","useDerivedProp","useMemo","instruction","useComputeForces","center","getLinkDistance","centerX","centerY","linkForce","links","strengths","distances","nodes","count","bias","random","strength","min","source","target","distance","constant","force","alpha","k","n","length","x","y","l","b","i","vx","jiggle","vy","sqrt","initialize","m","Map","map","Array","initializeStrength","initializeDistance","_nodes","_random","_","arguments","chargeForce","distanceMin2","distanceMax2","Infinity","theta2","tree","quadtree","visitAfter","accumulate","visit","apply","quad","q","c","weight","abs","value","data","next","w","theta","forceManyBody","centerForce","sx","sy","forceCenter","charge","useNetwork","useState","transientNodes","setTransientNodes","transientLinks","setTransientLinks","forces","useEffect","_transientNodes","_transientLinks","simulation","forceSimulation","activeNodeIds","setActiveNodeIds","getNodeStyle","activeSize","inactiveSize","borderWidth","borderColor","theme","useTheme","getSize","getColor","getBorderWidth","getBorderColor","useInheritedColor","getNormalStyle","useCallback","getActiveSize","getActiveStyle","getInactiveSize","getInactiveStyle","useNodeStyle","computedNodes","getLinkThickness","getLinkColor","computedLinks","linkWithComputedNodes","thickness","getNodeAnnotationPosition","getNodeAnnotationDimensions","width","height","useNodeAnnotations","useAnnotations","getPosition","getDimensions","NetworkLinks","useMotionConfig","springConfig","enterTransition","regularTransition","transition","useTransition","keys","initial","enter","update","expires","config","immediate","createElement","key","animated","NetworkNodes","tooltip","scale","exitTransition","leave","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","handleMouseMove","handleMouseLeave","NetworkNodeAnnotations","boundAnnotations","_jsx","InnerNetwork","partialMargin","margin","rawNodes","rawLinks","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","layerById","customLayerProps","layer","Network","renderWrapper","otherProps","ResponsiveNetwork","InnerNetworkCanvas","canvasEl","useRef","computedAnnotations","useComputedAnnotations","renderAnnotationsToCanvas","getNodeFromMouseEvent","getRelativeCursor","getDistance","handleMouseHover","handleClick","ref","cursor","NetworkCanvas","ResponsiveNetworkCanvas"],"sourceRoot":""}