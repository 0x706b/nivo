{"version":3,"file":"component---src-pages-network-canvas-js-aa1cf0525ce2f702e5db.js","mappings":"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","sources":["webpack://nivo-website/./src/data/components/network/props.ts","webpack://nivo-website/./src/pages/network/canvas.js"],"sourcesContent":["import { NetworkDefaultProps } from '@nivo/network'\nimport { motionProperties, groupProperties } from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'width',\n        group: 'Base',\n        help: 'Chart width.',\n        description: `\n            Not required if using responsive component.\n        `,\n        type: 'number',\n        required: true,\n        flavors: ['svg', 'canvas'],\n        enableControlForFlavors: ['api'],\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        group: 'Base',\n        help: 'Chart height.',\n        description: `\n            Not required if using responsive component.\n        `,\n        type: 'number',\n        required: true,\n        flavors: ['svg', 'canvas'],\n        enableControlForFlavors: ['api'],\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        required: false,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'margin',\n        group: 'Base',\n        type: 'object',\n        required: false,\n        help: 'Chart margin.',\n        flavors: ['svg', 'canvas'],\n        controlType: 'margin',\n    },\n    {\n        key: 'linkDistance',\n        group: 'Simulation',\n        type: 'number | string | (link: Link) => number',\n        required: false,\n        help: `Control links' distance.`,\n        flavors: ['svg', 'canvas'],\n        description: `\n            If you set a **number**, this value will be used for all links.\n\n            If you use a **string**, this will be used to pick the distance\n            from the corresponding link property, thus, this property\n            should exist on each link.\n\n            If you use a **function**, it will receive a link and must return\n            the desired distance.\n        `,\n    },\n    {\n        key: 'repulsivity',\n        group: 'Simulation',\n        type: 'number',\n        required: false,\n        help: 'Control how nodes repel each other.',\n        description: `\n            This value will also affect the strength\n            of \\`distanceMin\\` and \\`distanceMax\\`.\n        `,\n        flavors: ['svg', 'canvas'],\n        controlType: 'range',\n        controlOptions: {\n            min: 1,\n            max: 100,\n        },\n        defaultValue: NetworkDefaultProps.repulsivity,\n    },\n    {\n        key: 'distanceMin',\n        group: 'Simulation',\n        type: 'number',\n        required: false,\n        help: 'Sets the minimum distance between nodes for the many-body force.',\n        flavors: ['svg', 'canvas'],\n        defaultValue: NetworkDefaultProps.distanceMin,\n    },\n    {\n        key: 'distanceMax',\n        group: 'Simulation',\n        type: 'number',\n        required: false,\n        help: 'Sets the maximum disteance between nodes for the many-body force.',\n        flavors: ['svg', 'canvas'],\n        defaultValue: NetworkDefaultProps.distanceMax,\n    },\n    {\n        key: 'iterations',\n        group: 'Simulation',\n        help: 'Adjust the simulation quality.',\n        description: `\n            Increasing this number will result in a **more accurate simulation**,\n            however it will also involve more computing.\n        `,\n        type: 'number',\n        required: false,\n        defaultValue: NetworkDefaultProps.iterations,\n        flavors: ['svg', 'canvas'],\n        controlType: 'range',\n        controlOptions: {\n            min: 60,\n            max: 260,\n        },\n    },\n    {\n        key: 'nodeColor',\n        group: 'Nodes',\n        type: 'string | (node: Node) => string',\n        required: false,\n        help: `Control nodes' color.`,\n        flavors: ['svg', 'canvas'],\n    },\n    {\n        key: 'nodeBorderWidth',\n        group: 'Nodes',\n        type: 'number | (node: Node) => number',\n        required: false,\n        help: `Control nodes' border width.`,\n        defaultValue: NetworkDefaultProps.nodeBorderWidth,\n        flavors: ['svg', 'canvas'],\n        controlType: 'lineWidth',\n    },\n    {\n        key: 'nodeBorderColor',\n        group: 'Nodes',\n        type: 'string | object | (link: Link) => string',\n        required: false,\n        help: `Control nodes' border color.`,\n        defaultValue: NetworkDefaultProps.nodeBorderColor,\n        flavors: ['svg', 'canvas'],\n        controlType: 'inheritedColor',\n    },\n    {\n        key: 'linkThickness',\n        enableControlForFlavors: ['canvas'],\n        group: 'Links',\n        type: 'number | (link: Link) => number',\n        required: false,\n        help: `Control links' thickness.`,\n        flavors: ['svg', 'canvas'],\n        defaultValue: NetworkDefaultProps.linkThickness,\n        controlType: 'lineWidth',\n    },\n    {\n        key: 'linkColor',\n        group: 'Links',\n        type: 'string | (link: Link) => string',\n        required: false,\n        help: `Control links' color.`,\n        defaultValue: NetworkDefaultProps.linkColor,\n        flavors: ['svg', 'canvas'],\n        controlType: 'inheritedColor',\n        controlOptions: {\n            inheritableProperties: ['source.color', 'target.color'],\n        },\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom tooltip component.',\n        flavors: ['svg', 'canvas'],\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML\n            element and will receive the node's data.\n        `,\n    },\n    {\n        key: 'onClick',\n        group: 'Interactivity',\n        help: 'onClick handler.',\n        type: '(node, event) => void',\n        required: false,\n        flavors: ['svg', 'canvas'],\n    },\n    {\n        key: 'layers',\n        type: `('links' | 'nodes')[] | FunctionComponent<LayerProps>`,\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        required: false,\n        defaultValue: NetworkDefaultProps.layers,\n        flavors: ['svg', 'canvas'],\n    },\n    ...motionProperties(['svg'], NetworkDefaultProps),\n]\n\nexport const groups = groupProperties(props)\n","import React from 'react'\nimport { ResponsiveNetworkCanvas, NetworkCanvasDefaultProps } from '@nivo/network'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/network/meta.yml'\nimport { groups } from '../../data/components/network/props'\nimport { generateNetworkData } from '@nivo/generators'\n\nconst initialProperties = Object.freeze({\n    pixelRatio:\n        typeof window !== 'undefined' && window.devicePixelRatio ? window.devicePixelRatio : 1,\n\n    margin: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    },\n\n    linkDistance: 'distance',\n    repulsivity: 4,\n    iterations: 60,\n\n    nodeColor: node => node.color,\n    nodeBorderWidth: 1,\n    nodeBorderColor: { theme: 'background' },\n\n    linkColor: NetworkCanvasDefaultProps.linkColor,\n    linkThickness: 1,\n\n    isInteractive: true,\n})\n\nconst generateData = () => generateNetworkData()\n\nconst NetworkCanvas = () => {\n    return (\n        <ComponentTemplate\n            name=\"NetworkCanvas\"\n            meta={meta.NetworkCanvas}\n            icon=\"network\"\n            flavors={meta.flavors}\n            currentFlavor=\"canvas\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={NetworkCanvasDefaultProps}\n            generateData={() =>\n                generateData({\n                    rootNodeRadius: 10,\n                    maxMidNodes: 32,\n                    midNodeRadius: 6,\n                    leafRadius: 3,\n                })\n            }\n            getDataSize={data => data.nodes.length}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveNetworkCanvas\n                        nodes={data.nodes}\n                        links={data.links}\n                        {...properties}\n                        theme={theme}\n                        onClick={node => {\n                            logAction({\n                                type: 'click',\n                                label: `[node] id: ${node.id}, index: ${node.index}`,\n                                color: node.color,\n                                data: node,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default NetworkCanvas\n"],"names":["props","key","group","help","description","type","required","flavors","enableControlForFlavors","controlType","controlOptions","unit","min","max","step","defaultValue","NetworkDefaultProps","inheritableProperties","motionProperties","groups","groupProperties","initialProperties","Object","freeze","pixelRatio","window","devicePixelRatio","margin","top","right","bottom","left","linkDistance","repulsivity","iterations","nodeColor","node","color","nodeBorderWidth","nodeBorderColor","theme","linkColor","NetworkCanvasDefaultProps","linkThickness","isInteractive","name","meta","icon","currentFlavor","properties","defaultProperties","generateData","generateNetworkData","getDataSize","data","nodes","length","logAction","links","onClick","label","id","index"],"sourceRoot":""}