{"version":3,"file":"c0102c4e61ed07f26cd4cea40f092058d0010fd8-99d5a0feac4bf91c5b2b.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-shape/src/array.js","webpack://nivo-website/../node_modules/d3-shape/src/stack.js","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/utils.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/AnnotationNote.tsx","webpack://nivo-website/../src/AnnotationLink.tsx","webpack://nivo-website/../src/CircleAnnotationOutline.tsx","webpack://nivo-website/../src/DotAnnotationOutline.tsx","webpack://nivo-website/../src/RectAnnotationOutline.tsx","webpack://nivo-website/../src/Annotation.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/BarAnnotations.tsx","webpack://nivo-website/../src/BarLegends.tsx","webpack://nivo-website/../src/BarItem.tsx","webpack://nivo-website/../src/BarTooltip.tsx","webpack://nivo-website/../src/compute/common.ts","webpack://nivo-website/../src/compute/grouped.ts","webpack://nivo-website/../src/compute/stacked.ts","webpack://nivo-website/../src/compute/legends.ts","webpack://nivo-website/../src/Bar.tsx","webpack://nivo-website/../src/BarCanvas.tsx","webpack://nivo-website/../src/ResponsiveBar.tsx","webpack://nivo-website/../src/ResponsiveBarCanvas.tsx","webpack://nivo-website/../node_modules/lodash/_baseFilter.js","webpack://nivo-website/../node_modules/lodash/filter.js"],"sourcesContent":["export var slice = Array.prototype.slice;","import { slice } from \"./array.js\";\nimport constant from \"./constant.js\";\nimport offsetNone from \"./offset/none.js\";\nimport orderNone from \"./order/none.js\";\n\nfunction stackValue(d, key) {\n  return d[key];\n}\n\nexport default function () {\n  var keys = constant([]),\n      order = orderNone,\n      offset = offsetNone,\n      value = stackValue;\n\n  function stack(data) {\n    var kz = keys.apply(this, arguments),\n        i,\n        m = data.length,\n        n = kz.length,\n        sz = new Array(n),\n        oz;\n\n    for (i = 0; i < n; ++i) {\n      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\n        si[j] = sij = [0, +value(data[j], ki, j, data)];\n        sij.data = data[j];\n      }\n\n      si.key = ki;\n    }\n\n    for (i = 0, oz = order(sz); i < n; ++i) {\n      sz[oz[i]].index = i;\n    }\n\n    offset(sz, oz);\n    return sz;\n  }\n\n  stack.keys = function (_) {\n    return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : keys;\n  };\n\n  stack.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), stack) : value;\n  };\n\n  stack.order = function (_) {\n    return arguments.length ? (order = _ == null ? orderNone : typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : order;\n  };\n\n  stack.offset = function (_) {\n    return arguments.length ? (offset = _ == null ? offsetNone : _, stack) : offset;\n  };\n\n  return stack;\n}","export const defaultProps = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 13,\n}\n","import {\n    AnnotationSpec,\n    CircleAnnotationSpec,\n    DotAnnotationSpec,\n    Note,\n    NoteCanvas,\n    NoteSvg,\n    RectAnnotationSpec,\n} from './types'\nimport { isValidElement } from 'react'\n\nexport const isSvgNote = <Datum>(note: Note<Datum>): note is NoteSvg<Datum> => {\n    const noteType = typeof note\n\n    return (\n        isValidElement(note) ||\n        noteType === 'string' ||\n        noteType === 'function' ||\n        noteType === 'object'\n    )\n}\n\nexport const isCanvasNote = <Datum>(note: Note<Datum>): note is NoteCanvas<Datum> => {\n    const noteType = typeof note\n\n    return noteType === 'string' || noteType === 'function'\n}\n\nexport const isCircleAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is CircleAnnotationSpec<Datum> => annotationSpec.type === 'circle'\n\nexport const isDotAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is DotAnnotationSpec<Datum> => annotationSpec.type === 'dot'\n\nexport const isRectAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is RectAnnotationSpec<Datum> => annotationSpec.type === 'rect'\n","import { filter, isNumber, omit } from 'lodash'\nimport {\n    radiansToDegrees,\n    absoluteAngleDegrees,\n    degreesToRadians,\n    positionFromAngle,\n} from '@nivo/core'\nimport { defaultProps } from './props'\nimport {\n    AnnotationSpec,\n    AnnotationPositionGetter,\n    AnnotationDimensionsGetter,\n    BoundAnnotation,\n    AnnotationMatcher,\n    AnnotationInstructions,\n} from './types'\nimport { isCircleAnnotation, isRectAnnotation } from './utils'\n\nexport const bindAnnotations = <\n    Datum = {\n        x: number\n        y: number\n    }\n>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}): BoundAnnotation<Datum>[] =>\n    annotations.reduce((acc: BoundAnnotation<Datum>[], annotation) => {\n        const offset = annotation.offset || 0\n\n        return [\n            ...acc,\n            ...filter<Datum>(data, annotation.match).map(datum => {\n                const position = getPosition(datum)\n                const dimensions = getDimensions(datum)\n\n                if (isCircleAnnotation(annotation) || isRectAnnotation(annotation)) {\n                    dimensions.size = dimensions.size + offset * 2\n                    dimensions.width = dimensions.width + offset * 2\n                    dimensions.height = dimensions.height + offset * 2\n                }\n\n                // acc.push({\n                //     ...omit(annotation, ['match', 'offset']),\n                //     ...position,\n                //     ...dimensions,\n                //     size: annotation.size || dimensions.size,\n                //     datum,\n                // } as any)\n                // return [\n                //     ...acc,\n                //     {\n                //         ...omit(annotation, ['match', 'offset']),\n                //         ...position,\n                //         ...dimensions,\n                //         size: annotation.size || dimensions.size,\n                //         datum,\n                //     },\n                // ]\n                return {\n                    ...omit(annotation, ['match', 'offset']),\n                    ...position,\n                    ...dimensions,\n                    size: annotation.size || dimensions.size,\n                    datum,\n                } as Required<BoundAnnotation<Datum>>\n            }),\n        ]\n\n        // return acc\n    }, [])\n\nexport const getLinkAngle = (\n    sourceX: number,\n    sourceY: number,\n    targetX: number,\n    targetY: number\n) => {\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX)\n\n    return absoluteAngleDegrees(radiansToDegrees(angle))\n}\n\nexport const computeAnnotation = <Datum>(\n    annotation: Required<AnnotationSpec<Datum>>\n): AnnotationInstructions => {\n    const {\n        x,\n        y,\n        noteX,\n        noteY,\n        noteWidth = defaultProps.noteWidth,\n        noteTextOffset = defaultProps.noteTextOffset,\n    } = annotation\n\n    let computedNoteX: number\n    let computedNoteY: number\n\n    if (isNumber(noteX)) {\n        computedNoteX = x + noteX\n    } else if (noteX.abs !== undefined) {\n        computedNoteX = noteX.abs\n    } else {\n        throw new Error(`noteX should be either a number or an object containing an 'abs' property`)\n    }\n\n    if (isNumber(noteY)) {\n        computedNoteY = y + noteY\n    } else if (noteY.abs !== undefined) {\n        computedNoteY = noteY.abs\n    } else {\n        throw new Error(`noteY should be either a number or an object containing an 'abs' property`)\n    }\n\n    let computedX = x\n    let computedY = y\n\n    const angle = getLinkAngle(x, y, computedNoteX, computedNoteY)\n\n    if (isCircleAnnotation<Datum>(annotation)) {\n        const position = positionFromAngle(degreesToRadians(angle), annotation.size / 2)\n        computedX += position.x\n        computedY += position.y\n    }\n\n    if (isRectAnnotation<Datum>(annotation)) {\n        const eighth = Math.round((angle + 90) / 45) % 8\n        if (eighth === 0) {\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 1) {\n            computedX += annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 2) {\n            computedX += annotation.width / 2\n        }\n        if (eighth === 3) {\n            computedX += annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 4) {\n            computedY += annotation.height / 2\n        }\n        if (eighth === 5) {\n            computedX -= annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 6) {\n            computedX -= annotation.width / 2\n        }\n        if (eighth === 7) {\n            computedX -= annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n    }\n\n    let textX = computedNoteX\n    const textY = computedNoteY - noteTextOffset\n\n    let noteLineX = computedNoteX\n    const noteLineY = computedNoteY\n\n    if ((angle + 90) % 360 > 180) {\n        textX -= noteWidth\n        noteLineX -= noteWidth\n    } else {\n        noteLineX += noteWidth\n    }\n\n    return {\n        points: [\n            [computedX, computedY],\n            [computedNoteX, computedNoteY],\n            [noteLineX, noteLineY],\n        ] as [number, number][],\n        text: [textX, textY],\n        angle: angle + 90,\n    }\n}\n","import { useMemo } from 'react'\nimport { bindAnnotations, computeAnnotation } from './compute'\nimport {\n    AnnotationDimensionsGetter,\n    AnnotationMatcher,\n    AnnotationPositionGetter,\n    AnnotationSpec,\n} from './types'\n\n/**\n * Bind annotations to a dataset.\n */\nexport const useAnnotations = <Datum>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}) =>\n    useMemo(\n        () =>\n            bindAnnotations<Datum>({\n                data,\n                annotations,\n                getPosition,\n                getDimensions,\n            }),\n        [data, annotations, getPosition, getDimensions]\n    )\n\nexport const useComputedAnnotations = <Datum>({\n    annotations,\n}: {\n    annotations: Required<AnnotationSpec<Datum>>[]\n}) =>\n    useMemo(\n        () =>\n            annotations.map(annotation => ({\n                ...annotation,\n                computed: computeAnnotation<Datum>({\n                    ...annotation,\n                }),\n            })),\n        [annotations]\n    )\n\nexport const useComputedAnnotation = <Datum>(annotation: Required<AnnotationSpec<Datum>>) =>\n    useMemo(() => computeAnnotation<Datum>(annotation), [annotation])\n","import { createElement } from 'react'\nimport omit from 'lodash/omit'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { NoteSvg } from './types'\n\nexport const AnnotationNote = <Datum,>({\n    datum,\n    x,\n    y,\n    note,\n}: {\n    datum: Datum\n    x: number\n    y: number\n    note: NoteSvg<Datum>\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    if (typeof note === 'function') {\n        return createElement(note, { x, y, datum })\n    }\n\n    return (\n        <>\n            {theme.annotations.text.outlineWidth > 0 && (\n                <animated.text\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    style={{\n                        ...theme.annotations.text,\n                        strokeLinejoin: 'round',\n                        strokeWidth: theme.annotations.text.outlineWidth * 2,\n                        stroke: theme.annotations.text.outlineColor,\n                    }}\n                >\n                    {note}\n                </animated.text>\n            )}\n            <animated.text\n                x={animatedProps.x}\n                y={animatedProps.y}\n                style={omit(theme.annotations.text, ['outlineWidth', 'outlineColor'])}\n            >\n                {note}\n            </animated.text>\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath, useTheme } from '@nivo/core'\n\nexport const AnnotationLink = ({\n    points,\n    isOutline = false,\n}: {\n    points: [number, number][]\n    isOutline?: boolean\n}) => {\n    const theme = useTheme()\n\n    const path = useMemo(() => {\n        const [firstPoint, ...otherPoints] = points\n\n        return otherPoints.reduce(\n            (acc, [x, y]) => `${acc} L${x},${y}`,\n            `M${firstPoint[0]},${firstPoint[1]}`\n        )\n    }, [points])\n\n    const animatedPath = useAnimatedPath(path)\n\n    if (isOutline && theme.annotations.link.outlineWidth <= 0) {\n        return null\n    }\n\n    const style = { ...theme.annotations.link }\n    if (isOutline) {\n        style.strokeLinecap = 'square'\n        style.strokeWidth =\n            theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n        style.stroke = theme.annotations.link.outlineColor\n    }\n\n    return <animated.path fill=\"none\" d={animatedPath} style={style} />\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const CircleAnnotationOutline = ({ x, y, size }: { x: number; y: number; size: number }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { defaultProps } from './props'\n\nexport const DotAnnotationOutline = ({\n    x,\n    y,\n    size = defaultProps.dotSize,\n}: {\n    x: number\n    y: number\n    size?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth: theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.symbol}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const RectAnnotationOutline = ({\n    x,\n    y,\n    width,\n    height,\n}: {\n    x: number\n    y: number\n    width: number\n    height: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x: x - width / 2,\n        y: y - height / 2,\n        width,\n        height,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.rect\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    width={animatedProps.width}\n                    height={animatedProps.height}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.rect\n                x={animatedProps.x}\n                y={animatedProps.y}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useComputedAnnotation } from './hooks'\nimport { AnnotationNote } from './AnnotationNote'\nimport { AnnotationLink } from './AnnotationLink'\nimport { CircleAnnotationOutline } from './CircleAnnotationOutline'\nimport { DotAnnotationOutline } from './DotAnnotationOutline'\nimport { RectAnnotationOutline } from './RectAnnotationOutline'\nimport { BoundAnnotation } from './types'\nimport { isCircleAnnotation, isDotAnnotation, isRectAnnotation, isSvgNote } from './utils'\n\nexport const Annotation = <Datum,>(annotation: BoundAnnotation<Datum>) => {\n    const { datum, x, y, note } = annotation\n    const computed = useComputedAnnotation(annotation)\n\n    if (!isSvgNote(note)) {\n        throw new Error('note should be a valid react element')\n    }\n\n    return (\n        <>\n            <AnnotationLink points={computed.points} isOutline={true} />\n            {isCircleAnnotation(annotation) && (\n                <CircleAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isDotAnnotation(annotation) && (\n                <DotAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isRectAnnotation(annotation) && (\n                <RectAnnotationOutline\n                    x={x}\n                    y={y}\n                    width={annotation.width}\n                    height={annotation.height}\n                />\n            )}\n            <AnnotationLink points={computed.points} />\n            <AnnotationNote datum={datum} x={computed.text[0]} y={computed.text[1]} note={note} />\n        </>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { ComputedAnnotation } from './types'\nimport { isCanvasNote, isCircleAnnotation, isDotAnnotation, isRectAnnotation } from './utils'\n\nconst drawPoints = (ctx: CanvasRenderingContext2D, points: [number, number][]) => {\n    points.forEach(([x, y], index) => {\n        if (index === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    })\n}\n\nexport const renderAnnotationsToCanvas = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        annotations,\n        theme,\n    }: {\n        annotations: ComputedAnnotation<Datum>[]\n        theme: CompleteTheme\n    }\n) => {\n    if (annotations.length === 0) return\n\n    ctx.save()\n    annotations.forEach(annotation => {\n        if (!isCanvasNote(annotation.note)) {\n            throw new Error('note is invalid for canvas implementation')\n        }\n\n        if (theme.annotations.link.outlineWidth > 0) {\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.annotations.link.outlineColor\n            ctx.lineWidth =\n                theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n            ctx.beginPath()\n            drawPoints(ctx, annotation.computed.points)\n            ctx.stroke()\n            ctx.lineCap = 'butt'\n        }\n\n        if (isCircleAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation) && theme.annotations.symbol.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.symbol.outlineColor\n            ctx.lineWidth = theme.annotations.symbol.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isRectAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        ctx.strokeStyle = theme.annotations.link.stroke\n        ctx.lineWidth = theme.annotations.link.strokeWidth\n        ctx.beginPath()\n        drawPoints(ctx, annotation.computed.points)\n        ctx.stroke()\n\n        if (isCircleAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation)) {\n            ctx.fillStyle = theme.annotations.symbol.fill\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.fill()\n        }\n\n        if (isRectAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        if (typeof annotation.note === 'function') {\n            annotation.note(ctx, {\n                datum: annotation.datum,\n                x: annotation.computed.text[0],\n                y: annotation.computed.text[1],\n                theme,\n            })\n        } else {\n            ctx.font = `${theme.annotations.text.fontSize}px ${theme.annotations.text.fontFamily}`\n            ctx.fillStyle = theme.annotations.text.fill\n            ctx.strokeStyle = theme.annotations.text.outlineColor\n            ctx.lineWidth = theme.annotations.text.outlineWidth * 2\n            if (theme.annotations.text.outlineWidth > 0) {\n                ctx.lineJoin = 'round'\n                ctx.strokeText(\n                    annotation.note,\n                    annotation.computed.text[0],\n                    annotation.computed.text[1]\n                )\n                ctx.lineJoin = 'miter'\n            }\n            ctx.fillText(annotation.note, annotation.computed.text[0], annotation.computed.text[1])\n        }\n    })\n    ctx.restore()\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: RawDatum[], keys: string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport { uniqBy } from 'lodash'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarDatum, BarLayer, BarLayerId, BarSvgProps, ComputedBarDatumWithValue } from './types'\nimport { BarLegends } from './BarLegends'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { svgDefaultProps } from './props'\nimport { useTransition } from '@react-spring/web'\nimport { useBar } from './hooks'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel,\n    label,\n    labelSkipWidth,\n    labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as any) : null}\n                yScale={enableGridY ? (yScale as any) : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: any = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            innerWidth,\n            innerHeight,\n            width,\n            height,\n            bars,\n            xScale,\n            yScale,\n        }),\n        [commonProps, margin, innerWidth, innerHeight, width, height, bars, xScale, yScale]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { BarCanvasLayer, BarCanvasProps, BarDatum, ComputedBarDatum } from './types'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\n\ndeclare module 'react' {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    function forwardRef<T, P = {}>(\n        render: (props: P, ref: React.Ref<T>) => React.ReactElement | null\n    ): (props: P & React.RefAttributes<T>) => React.ReactElement | null\n}\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel,\n    label,\n    labelSkipWidth,\n    labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: any = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            margin,\n            innerWidth,\n            innerHeight,\n            width,\n            height,\n            bars,\n            xScale,\n            yScale,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            height,\n            innerHeight,\n            innerWidth,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            margin,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            bars,\n            xScale,\n            yScale,\n            tooltip,\n            width,\n        ]\n    )\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: xScale as any,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: yScale as any,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale as any,\n                    yScale: yScale as any,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: Omit<BarSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: Omit<BarCanvasProps<RawDatum>, 'height' | 'width'>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas width={width} height={height} {...props} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n"],"names":["slice","Array","prototype","stackValue","d","key","keys","order","offset","value","stack","data","i","oz","kz","apply","this","arguments","m","length","n","sz","sij","ki","si","j","index","_","defaultProps","isCircleAnnotation","annotationSpec","type","isDotAnnotation","isRectAnnotation","computeAnnotation","annotation","computedNoteX","computedNoteY","x","y","noteX","noteY","noteWidth","noteTextOffset","_isNumber","abs","Error","computedX","computedY","angle","sourceX","sourceY","targetX","targetY","Math","atan2","absoluteAngleDegrees","radiansToDegrees","getLinkAngle","position","positionFromAngle","degreesToRadians","size","eighth","round","height","width","textX","noteLineX","points","text","useAnnotations","annotations","getPosition","getDimensions","useMemo","reduce","acc","_filter","match","map","datum","dimensions","_omit","bindAnnotations","useComputedAnnotations","computed","AnnotationNote","note","theme","useTheme","useMotionConfig","animate","springConfig","config","animatedProps","useSpring","immediate","createElement","_jsxs","outlineWidth","_jsx","animated","style","strokeLinejoin","strokeWidth","stroke","outlineColor","omit","AnnotationLink","isOutline","path","firstPoint","animatedPath","useAnimatedPath","link","strokeLinecap","fill","CircleAnnotationOutline","radius","outline","circle","cx","cy","r","DotAnnotationOutline","dotSize","symbol","RectAnnotationOutline","rect","Annotation","useComputedAnnotation","noteType","isValidElement","isSvgNote","drawPoints","ctx","forEach","moveTo","lineTo","renderAnnotationsToCanvas","save","isCanvasNote","lineCap","strokeStyle","lineWidth","beginPath","arc","PI","fillStyle","font","fontSize","fontFamily","lineJoin","strokeText","fillText","restore","computeCartesianTicks","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","centerScale","line","lineX","lineY","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","top","bottom","left","right","ticks","getFormatter","format","formatter","timeFormat","Date","d3Format","computeGridLines","_values","isArray","lines","x1","x2","y1","y2","memoizedAxisTick","memo","_value","onClick","textAnchor","props","opacity","cursor","event","g","transform","dominantBaseline","textTransform","memoizedAxis","renderTick","AxisTick","legend","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","lineX2","lineY2","transition","useTransition","t","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","rotate","domain","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","axes","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","_format","fontWeight","Number","String","renderAxesToCanvas","renderGridLinesToCanvas","BarAnnotations","bars","boundAnnotations","bar","max","BarLegends","legends","toggleSerie","BoxLegendSvg","containerWidth","containerHeight","dataFrom","label","indexBy","groupMode","layout","reverse","minValue","maxValue","valueScale","indexScale","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","colorBy","colors","scheme","borderRadius","borderWidth","borderColor","isInteractive","tooltip","color","BasicTooltip","id","formattedValue","enableChip","tooltipLabel","indexValue","initialHiddenIds","markers","svgDefaultProps","layers","barComponent","labelColor","labelOpacity","labelX","labelY","shouldRenderLabel","onMouseEnter","onMouseLeave","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","handleClick","useCallback","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","to","rx","ry","focusable","tabIndex","undefined","onMouseMove","onFocus","onBlur","fillOpacity","labels","pointerEvents","defs","motionConfig","role","canvasDefaultProps","pixelRatio","window","devicePixelRatio","getIndexScale","getIndex","computeScale","all","min","normalizeData","item","filterNullValues","Object","coerceValue","gt","other","lt","range","start","end","repeat","clampToZero","generateVerticalGroupedBars","barWidth","yRef","getColor","getTooltipLabel","margin","compare","cleanedData","rawValue","barHeight","barData","hidden","push","generateHorizontalGroupedBars","xRef","generateGroupedBars","indexScaleConfig","hiddenIds","filter","includes","otherAxis","scaleSpec","clampMin","entry","k","Boolean","isFinite","bandwidth","params","flattenDeep","arr","some","concat","generateVerticalStackedBars","stackedData","stackedDataItem","generateHorizontalStackedBars","generateStackedBars","array","num","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","_uniqBy","useBar","valueFormat","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","InnerBar","partialMargin","axisTop","axisRight","gridXValues","gridYValues","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","Fragment","CartesianMarkers","layerContext","SvgWrapper","layer","Bar","renderWrapper","otherProps","Container","findBarUnderCursor","nodes","isCursorInRect","node","InnerBarCanvas","renderBar","quadraticCurveTo","closePath","canvasRef","canvasEl","useRef","useEffect","current","getContext","background","fillRect","renderLegendToCanvas","handleMouseHover","getRelativeCursor","ref","canvas","BarCanvas","forwardRef","ResponsiveBar","ResponsiveWrapper","ResponsiveBarCanvas","baseEach","module","exports","collection","predicate","result","arrayFilter","baseFilter","baseIteratee"],"sourceRoot":""}