{"version":3,"file":"component---src-pages-waffle-html-js-0c470dcfa41ee2573726.js","mappings":"kaAQA,IAAMA,EAAe,iBAAM,CACvB,CACIC,GAAI,MACJC,MAAO,MACPC,MAAuB,GAAhBC,KAAKC,SACZC,MAAO,WAEX,CACIL,GAAI,QACJC,MAAO,QACPC,MAAuB,GAAhBC,KAAKC,SACZC,MAAO,WAEX,CACIL,GAAI,WACJC,MAAO,WACPC,MAAuB,GAAhBC,KAAKC,SACZC,MAAO,aAITC,EAAoB,CACtBC,MAAO,IAEPC,KAAM,GACNC,QAAS,GACTC,cAAe,SACfC,QAAS,EAETC,OAAQ,CACJC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,IAGVC,cAAe,UACfC,WAAY,UACZC,aAAc,EACdC,OAAQ,CAAEC,OAAQ,QAClBC,YAAa,EACbC,YAAa,CACTC,KAAM,QACNC,MAAO,CAAC,CAAC,SAAU,MAGvBC,SAAS,EACTC,gBAAiB,GACjBC,cAAe,GAEfC,eAAe,EACf,0BAA0B,EAC1BC,QAAS,MAgEb,UA7DmB,WACf,IAE4CC,GAExCC,EAAAA,EAAAA,gBAAe,cAHfD,MACIE,gBAAmBC,gBAY3B,OACI,SAAC,IAAD,CACIC,KAAK,aACLC,KAAMA,EAAAA,GACNC,KAAK,SACLC,QAASF,EAAAA,GACTG,cAAc,OACdC,WAAYC,EAAAA,EACZC,iBAAkBC,EAAAA,EAClBrC,kBAAmBA,EACnBsC,kBAAmBC,EAAAA,GACnBC,qBAAsB,SAAAN,GAAU,YACzBA,EADyB,CAE5BvB,cAAeuB,EAAWvB,cAAgB,gCAA6B8B,EACvEjB,QAASU,EAAWV,QAAU,mCAAgCiB,KAElEhD,aAAcA,EACdgC,MAAOA,EAhBX,SAkBK,SAACS,EAAYQ,EAAMC,EAAOC,GACvB,OACI,SAAC,KAAD,GACIF,KAAMA,GACFR,EAFR,CAGIS,MAAOA,EACPE,QAAS,SAAAC,GACL,IAAInD,EAEAA,OADoB8C,IAApBK,EAAKJ,KAAK9C,MACCkD,EAAKJ,KAAK/C,MAAhB,KAA0BmD,EAAKJ,KAAK9C,MAApC,eAAwDkD,EAAKC,SAA7D,IAEA,sBAAyBD,EAAKC,SAEvCH,EAAU,CACNI,KAAM,QACNrD,MAAM,UAAWA,EACjBI,MAAO+C,EAAK/C,MACZ2C,KAAMI","sources":["webpack://nivo-website/./src/pages/waffle/html.js"],"sourcesContent":["import React from 'react'\nimport { ResponsiveWaffleHtml, WaffleDefaultProps } from '@nivo/waffle'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/waffle/meta.yml'\nimport { groups } from '../../data/components/waffle/props'\nimport mapper from '../../data/components/waffle/mapper'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst generateData = () => [\n    {\n        id: 'men',\n        label: 'men',\n        value: Math.random() * 33,\n        color: '#468df3',\n    },\n    {\n        id: 'women',\n        label: 'women',\n        value: Math.random() * 33,\n        color: '#ba72ff',\n    },\n    {\n        id: 'children',\n        label: 'children',\n        value: Math.random() * 33,\n        color: '#a1cfff',\n    },\n]\n\nconst initialProperties = {\n    total: 100,\n\n    rows: 18,\n    columns: 14,\n    fillDirection: 'bottom',\n    padding: 1,\n\n    margin: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10,\n    },\n\n    cellComponent: 'default',\n    emptyColor: '#cccccc',\n    emptyOpacity: 1,\n    colors: { scheme: 'set2' },\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        gamma: [['darker', 0.3]],\n    },\n\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 11,\n\n    isInteractive: true,\n    'custom tooltip example': false,\n    tooltip: null,\n}\n\nconst WaffleHtml = () => {\n    const {\n        image: {\n            childImageSharp: { gatsbyImageData: image },\n        },\n    } = useStaticQuery(graphql`\n        query {\n            image: file(absolutePath: { glob: \"**/src/assets/captures/waffle-html.png\" }) {\n                childImageSharp {\n                    gatsbyImageData(layout: FIXED, width: 700, quality: 100)\n                }\n            }\n        }\n    `)\n\n    return (\n        <ComponentTemplate\n            name=\"WaffleHtml\"\n            meta={meta.WaffleHtml}\n            icon=\"waffle\"\n            flavors={meta.flavors}\n            currentFlavor=\"html\"\n            properties={groups}\n            propertiesMapper={mapper}\n            initialProperties={initialProperties}\n            defaultProperties={WaffleDefaultProps}\n            codePropertiesMapper={properties => ({\n                ...properties,\n                cellComponent: properties.cellComponent ? 'CustomCell(props) => (…)' : undefined,\n                tooltip: properties.tooltip ? 'CustomTooltip(props) => (…)' : undefined,\n            })}\n            generateData={generateData}\n            image={image}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveWaffleHtml\n                        data={data}\n                        {...properties}\n                        theme={theme}\n                        onClick={node => {\n                            let label\n                            if (node.data.value !== undefined) {\n                                label = `${node.data.label}: ${node.data.value} (position: ${node.position})`\n                            } else {\n                                label = `empty at position: ${node.position}`\n                            }\n                            logAction({\n                                type: 'click',\n                                label: `[cell] ${label}`,\n                                color: node.color,\n                                data: node,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default WaffleHtml\n"],"names":["generateData","id","label","value","Math","random","color","initialProperties","total","rows","columns","fillDirection","padding","margin","top","right","bottom","left","cellComponent","emptyColor","emptyOpacity","colors","scheme","borderWidth","borderColor","from","gamma","animate","motionStiffness","motionDamping","isInteractive","tooltip","image","useStaticQuery","childImageSharp","gatsbyImageData","name","meta","icon","flavors","currentFlavor","properties","groups","propertiesMapper","mapper","defaultProperties","WaffleDefaultProps","codePropertiesMapper","undefined","data","theme","logAction","onClick","node","position","type"],"sourceRoot":""}