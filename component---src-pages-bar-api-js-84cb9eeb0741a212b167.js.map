{"version":3,"file":"component---src-pages-bar-api-js-84cb9eeb0741a212b167.js","mappings":"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/B,gBAAiB,CACbgC,SAAU,OACVF,OAAQ,WACRC,UAAW,SACXE,SAAS,EACTC,WAAY,EACZC,WAAY,EACZC,UAAW,IACXC,WAAY,GACZC,aAAc,EACdC,WAAY,GACZC,cAAe,gBACfC,QAAS,SAACC,GACNC,QAAQC,IAAIC,KAAKC,UAAUJ,EAAM,KAAM,eAKpDK,EAAAA,EAAAA,IAAiB,CAAC,OAAQ/C,EAAAA,GAAiB,gBA1ftB,CA2fxB,CACIR,IAAK,cACLK,QAAS,CAAC,OACVD,UAAU,EACVH,MAAO,gBACPC,KAAM,kFACNI,YAAY,qTAOZH,KAAM,UACNM,QAAS,CAAEN,KAAM,WAErB,CACIH,IAAK,YACLK,QAAS,CAAC,OACVD,UAAU,EACVH,MAAO,gBACPC,KAAM,yEACNC,KAAM,UAEV,CACIH,IAAK,iBACLK,QAAS,CAAC,OACVD,UAAU,EACVH,MAAO,gBACPC,KAAM,mFACNC,KAAM,UAEV,CACIH,IAAK,kBACLK,QAAS,CAAC,OACVD,UAAU,EACVH,MAAO,gBACPC,KAAM,qFACNC,KAAM,UAEV,CACIH,IAAK,eACLK,QAAS,CAAC,OACVD,UAAU,EACVH,MAAO,gBACPC,KAAM,0EACNC,KAAM,oBAEV,CACIH,IAAK,oBACLK,QAAS,CAAC,OACVD,UAAU,EACVH,MAAO,gBACPC,KAAM,oFACNC,KAAM,oBAEV,CACIH,IAAK,qBACLK,QAAS,CAAC,OACVD,UAAU,EACVH,MAAO,gBACPC,KAAM,sFACNC,KAAM,sBAIDqD,GAASC,EAAAA,EAAAA,IAAgB1D,I,4FC9kBhC2D,EAAS,CACX,UACA,SACA,WACA,QACA,QACA,QACA,OACA,QACA,QACA,QACA,OACA,QACA,WACA,WACA,QACA,YACA,WACA,QACA,aACA,WACA,OACA,UACA,QACA,QACA,YACA,UACA,QACA,WACA,MACA,SACA,QACA,UACA,SACA,YACA,aACA,aACA,YACA,gBACA,QACA,UACA,WACA,cACA,WACA,QACA,UACA,YACA,WA/CW,gBAiDX,cACA,UACA,gBACA,WACA,YACA,SACA,UACA,YAGSC,EAAuB,iBAAO,CACvCT,MA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","sources":["webpack://nivo-website/../node_modules/d3-shape/src/constant.js","webpack://nivo-website/./src/data/components/bar/props.ts","webpack://nivo-website/./src/data/components/bar/generator.js","webpack://nivo-website/./src/data/components/bar/mapper.js","webpack://nivo-website/./src/pages/bar/api.js"],"sourcesContent":["export default function (x) {\n  return function constant() {\n    return x;\n  };\n}","import { svgDefaultProps } from '@nivo/bar'\nimport {\n    themeProperty,\n    motionProperties,\n    defsProperties,\n    getLegendsProps,\n    groupProperties,\n} from '../../../lib/componentProperties'\nimport {\n    chartDimensions,\n    ordinalColors,\n    chartGrid,\n    axes,\n    isInteractive,\n} from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg', 'canvas', 'api']\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        type: 'object[]',\n        required: true,\n        flavors: allFlavors,\n    },\n    {\n        key: 'indexBy',\n        group: 'Base',\n        help: 'Key to use to index the data.',\n        description: `\n            Key to use to index the data,\n            this key must exist in each data item.\n\n            You can also provide a function which will\n            receive the data item and must return the desired index.\n        `,\n        type: 'string | (datum: RawDatum): string | number',\n        flavors: allFlavors,\n        required: false,\n        defaultValue: svgDefaultProps.indexBy,\n    },\n    {\n        key: 'keys',\n        group: 'Base',\n        help: 'Keys to use to determine each serie.',\n        type: 'string[]',\n        flavors: allFlavors,\n        required: false,\n        defaultValue: svgDefaultProps.keys,\n    },\n    {\n        key: 'groupMode',\n        group: 'Base',\n        help: `How to group bars.`,\n        type: `'grouped' | 'stacked'`,\n        flavors: allFlavors,\n        required: false,\n        defaultValue: svgDefaultProps.groupMode,\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'stacked', value: 'stacked' },\n                { label: 'grouped', value: 'grouped' },\n            ],\n        },\n    },\n    {\n        key: 'layout',\n        group: 'Base',\n        help: `How to display bars.`,\n        type: `'horizontal' | 'vertical'`,\n        flavors: allFlavors,\n        required: false,\n        defaultValue: svgDefaultProps.layout,\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'horizontal', value: 'horizontal' },\n                { label: 'vertical', value: 'vertical' },\n            ],\n        },\n    },\n    {\n        key: 'valueScale',\n        group: 'Base',\n        type: 'object',\n        help: `value scale configuration.`,\n        defaultValue: svgDefaultProps.valueScale,\n        flavors: allFlavors,\n        required: false,\n        control: {\n            type: 'object',\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type.`,\n                    type: 'string',\n                    required: true,\n                    flavors: allFlavors,\n                    control: {\n                        type: 'choices',\n                        disabled: true,\n                        choices: ['linear', 'symlog'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'indexScale',\n        group: 'Base',\n        type: 'object',\n        help: `index scale configuration.`,\n        defaultValue: svgDefaultProps.indexScale,\n        flavors: allFlavors,\n        required: false,\n        control: {\n            type: 'object',\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type.`,\n                    type: 'string',\n                    required: true,\n                    flavors: ['svg', 'canvas', 'api'],\n                    control: {\n                        type: 'choices',\n                        disabled: true,\n                        choices: ['band'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n                {\n                    key: 'round',\n                    required: true,\n                    flavors: ['svg', 'canvas', 'api'],\n                    help: 'Toggle index scale (for bar width) rounding.',\n                    type: 'boolean',\n                    control: { type: 'switch' },\n                },\n            ],\n        },\n    },\n    {\n        key: 'reverse',\n        group: 'Base',\n        help: 'Reverse bars, starts on top instead of bottom for vertical layout and right instead of left for horizontal one.',\n        type: 'boolean',\n        required: false,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.reverse,\n        control: { type: 'switch' },\n    },\n    {\n        key: 'minValue',\n        group: 'Base',\n        help: 'Minimum value.',\n        description: `\n            Minimum value, if 'auto',\n            will use min value from the provided data.\n        `,\n        required: false,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.minValue,\n        type: `number | 'auto'`,\n        control: {\n            type: 'switchableRange',\n            disabledValue: 'auto',\n            defaultValue: -1000,\n            min: -1000,\n            max: 0,\n        },\n    },\n    {\n        key: 'maxValue',\n        group: 'Base',\n        help: 'Maximum value.',\n        description: `\n            Maximum value, if 'auto',\n            will use max value from the provided data.\n        `,\n        required: false,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.maxValue,\n        type: `number | 'auto'`,\n        control: {\n            type: 'switchableRange',\n            disabledValue: 'auto',\n            defaultValue: 1000,\n            min: 0,\n            max: 1000,\n        },\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        flavors: allFlavors,\n        type: 'string | (value: number) => string | number',\n        control: { type: 'valueFormat' },\n    },\n    {\n        key: 'padding',\n        help: 'Padding between each bar (ratio).',\n        type: 'number',\n        required: false,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.padding,\n        group: 'Base',\n        control: {\n            type: 'range',\n            min: 0,\n            max: 0.9,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'innerPadding',\n        help: 'Padding between grouped/stacked bars.',\n        type: 'number',\n        required: false,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.innerPadding,\n        group: 'Base',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 10,\n        },\n    },\n    ...chartDimensions(allFlavors),\n    themeProperty(allFlavors),\n    ordinalColors({\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.colors,\n    }),\n    {\n        key: 'colorBy',\n        type: `'id' | 'indexValue'`,\n        help: 'Property used to determine node color.',\n        description: `\n            Property to use to determine node color.\n        `,\n        flavors: allFlavors,\n        required: false,\n        defaultValue: svgDefaultProps.colorBy,\n        group: 'Style',\n        control: {\n            type: 'choices',\n            choices: [\n                {\n                    label: 'id',\n                    value: 'id',\n                },\n                {\n                    label: 'indexValue',\n                    value: 'indexValue',\n                },\n            ],\n        },\n    },\n    {\n        key: 'borderRadius',\n        help: 'Rectangle border radius.',\n        type: 'number',\n        flavors: ['svg', 'canvas', 'api'],\n        required: false,\n        defaultValue: svgDefaultProps.borderRadius,\n        group: 'Style',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 36,\n        },\n    },\n    {\n        key: 'borderWidth',\n        help: 'Width of bar border.',\n        type: 'number',\n        flavors: ['svg', 'canvas', 'api'],\n        required: false,\n        defaultValue: svgDefaultProps.borderWidth,\n        group: 'Style',\n        control: { type: 'lineWidth' },\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute border color.',\n        description: `\n            how to compute border color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        type: 'string | object | Function',\n        flavors: ['svg', 'canvas', 'api'],\n        required: false,\n        defaultValue: svgDefaultProps.borderColor,\n        group: 'Style',\n        control: { type: 'inheritedColor' },\n    },\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'layers',\n        flavors: ['svg', 'canvas'],\n        help: 'Defines the order of layers.',\n        description: `\n            Defines the order of layers, available layers are:\n            \\`grid\\`, \\`axes\\`, \\`bars\\`, \\`markers\\`, \\`legends\\`,\n            \\`annotations\\`. The \\`markers\\` layer is not available\n            in the canvas flavor.\n\n            You can also use this to insert extra layers to the chart,\n            this extra layer must be a function which will receive\n            the chart computed data and must return a valid SVG\n            element.\n        `,\n        type: 'Array<string | Function>',\n        required: false,\n        defaultValue: svgDefaultProps.layers,\n        group: 'Customization',\n    },\n    {\n        key: 'enableLabel',\n        help: 'Enable/disable labels.',\n        type: 'boolean',\n        flavors: ['svg', 'canvas', 'api'],\n        required: false,\n        defaultValue: svgDefaultProps.enableLabel,\n        group: 'Labels',\n        control: { type: 'switch' },\n    },\n    {\n        key: 'label',\n        group: 'Labels',\n        help: 'Define how bar labels are computed.',\n        description: `\n            Define how bar labels are computed.\n\n            By default it will use the bar's value.\n            It accepts a string which will be used to access\n            a specific bar data property, such as\n            \\`'value'\\` or \\`'id'\\`.\n\n            You can also use a funtion if you want to\n            add more logic, this function will receive\n            the current bar's data and must return\n            the computed label which, depending on the context,\n            should return a string or an svg element (Bar) or\n            a string (BarCanvas). For example let's say you want\n            to use a label with both the id and the value,\n            you can achieve this with:\n            \\`\\`\\`\n            label={d => \\`\\${d.id}: \\${d.value}\\`}\n            \\`\\`\\`\n        `,\n        type: 'string | Function',\n        flavors: ['svg', 'canvas', 'api'],\n        required: false,\n        defaultValue: svgDefaultProps.label,\n    },\n    {\n        key: 'labelSkipWidth',\n        help: 'Skip label if bar width is lower than provided value, ignored if 0.',\n        type: 'number',\n        flavors: ['svg', 'canvas', 'api'],\n        required: false,\n        defaultValue: svgDefaultProps.labelSkipWidth,\n        group: 'Labels',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 36,\n        },\n    },\n    {\n        key: 'labelSkipHeight',\n        help: 'Skip label if bar height is lower than provided value, ignored if 0.',\n        type: 'number',\n        flavors: ['svg', 'canvas', 'api'],\n        required: false,\n        defaultValue: svgDefaultProps.labelSkipHeight,\n        group: 'Labels',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 36,\n        },\n    },\n    {\n        key: 'labelTextColor',\n        help: 'Defines how to compute label text color.',\n        type: 'string | object | Function',\n        flavors: ['svg', 'canvas', 'api'],\n        required: false,\n        defaultValue: svgDefaultProps.labelTextColor,\n        control: { type: 'inheritedColor' },\n        group: 'Labels',\n    },\n    ...chartGrid({\n        flavors: allFlavors,\n        xDefault: svgDefaultProps.enableGridX,\n        yDefault: svgDefaultProps.enableGridY,\n        values: true,\n    }),\n    ...axes({ flavors: allFlavors }),\n    isInteractive({\n        flavors: ['svg', 'canvas'],\n        defaultValue: svgDefaultProps.isInteractive,\n    }),\n    {\n        key: 'tooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Tooltip custom component',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will receive\n            the following data:\n            \\`\\`\\`\n            {\n                bar: {\n                    id:             string | number,\n                    value:          number,\n                    formattedValue: string,\n                    index:          number,\n                    indexValue:     string | number,\n                    // datum associated to the current index (raw data)\n                    data:           object\n                },\n                color: string,\n                label: string\n            }\n            \\`\\`\\`\n            You can also customize the style of the tooltip\n            using the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'Showcase custom tooltip component.',\n        type: 'boolean',\n        required: false,\n        control: { type: 'switch' },\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'onClick handler',\n        description: `\n            onClick handler, will receive node data as first argument\n            & event as second one. The node data has the following shape:\n\n            \\`\\`\\`\n            {\n                id:             string | number,\n                value:          number,\n                formattedValue: string,\n                index:          number,\n                indexValue:     string | number,\n                color:          string,\n                // datum associated to the current index (raw data)\n                data:           object\n            }\n            \\`\\`\\`\n        `,\n    },\n    {\n        key: 'legends',\n        flavors: ['svg', 'canvas'],\n        type: 'object[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        required: false,\n        control: {\n            type: 'array',\n            props: getLegendsProps(['svg']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index: number, legend: any) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            svgDefaultProps: {\n                dataFrom: 'keys',\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: (data: any) => {\n                    console.log(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n    ...motionProperties(['svg'], svgDefaultProps, 'react-spring'),\n    {\n        key: 'isFocusable',\n        flavors: ['svg'],\n        required: false,\n        group: 'Accessibility',\n        help: 'Make the root SVG element and each bar item focusable, for keyboard navigation.',\n        description: `\n            If enabled, focusing will also reveal the tooltip if \\`isInteractive\\` is \\`true\\`,\n            when a bar gains focus and hide it on blur.\n            \n            Also note that if this option is enabled, focusing a bar will reposition the tooltip\n            at a fixed location.\n        `,\n        type: 'boolean',\n        control: { type: 'switch' },\n    },\n    {\n        key: 'ariaLabel',\n        flavors: ['svg'],\n        required: false,\n        group: 'Accessibility',\n        help: 'Main element [aria-label](https://www.w3.org/TR/wai-aria/#aria-label).',\n        type: 'string',\n    },\n    {\n        key: 'ariaLabelledBy',\n        flavors: ['svg'],\n        required: false,\n        group: 'Accessibility',\n        help: 'Main element [aria-labelledby](https://www.w3.org/TR/wai-aria/#aria-labelledby).',\n        type: 'string',\n    },\n    {\n        key: 'ariaDescribedBy',\n        flavors: ['svg'],\n        required: false,\n        group: 'Accessibility',\n        help: 'Main element [aria-describedby](https://www.w3.org/TR/wai-aria/#aria-describedby).',\n        type: 'string',\n    },\n    {\n        key: 'barAriaLabel',\n        flavors: ['svg'],\n        required: false,\n        group: 'Accessibility',\n        help: '[aria-label](https://www.w3.org/TR/wai-aria/#aria-label) for bar items.',\n        type: '(data) => string',\n    },\n    {\n        key: 'barAriaLabelledBy',\n        flavors: ['svg'],\n        required: false,\n        group: 'Accessibility',\n        help: '[aria-labelledby](https://www.w3.org/TR/wai-aria/#aria-labelledby) for bar items.',\n        type: '(data) => string',\n    },\n    {\n        key: 'barAriaDescribedBy',\n        flavors: ['svg'],\n        required: false,\n        group: 'Accessibility',\n        help: '[aria-describedby](https://www.w3.org/TR/wai-aria/#aria-describedby) for bar items.',\n        type: '(data) => string',\n    },\n]\n\nexport const groups = groupProperties(props)\n","import { generateCountriesData } from '@nivo/generators'\n\nconst dishes = [\n    'hot dog',\n    'burger',\n    'sandwich',\n    'kebab',\n    'fries',\n    'donut',\n    'junk',\n    'sushi',\n    'ramen',\n    'curry',\n    'udon',\n    'bagel',\n    'yakitori',\n    'takoyaki',\n    'tacos',\n    'miso soup',\n    'tortilla',\n    'tapas',\n    'chipirones',\n    'gazpacho',\n    'soba',\n    'bavette',\n    'steak',\n    'pizza',\n    'spaghetti',\n    'ravioli',\n    'salad',\n    'pad thai',\n    'bun',\n    'waffle',\n    'crepe',\n    'churros',\n    'paella',\n    'empanadas',\n    'bruschetta',\n    'onion soup',\n    'cassoulet',\n    'bouillabaisse',\n    'unagi',\n    'tempura',\n    'tonkatsu',\n    'shabu-shabu',\n    'twinkies',\n    'jerky',\n    'fajitas',\n    'jambalaya',\n    'meatloaf',\n    `mac n' cheese`,\n    'baked beans',\n    'popcorn',\n    'buffalo wings',\n    'BBQ ribs',\n    'apple pie',\n    'nachos',\n    'risotto',\n    'tiramisu',\n]\n\nexport const generateLightDataSet = () => ({\n    data: generateCountriesData(dishes.slice(0, 6), { size: 7, max: 200 }),\n    keys: dishes.slice(0, 6),\n})\n\nexport const generateHeavyDataSet = () => ({\n    data: generateCountriesData(dishes, { size: 21, max: 200 }),\n    keys: dishes,\n})\n","import React from 'react'\nimport styled from 'styled-components'\nimport { settingsMapper, mapAxis, mapFormat } from '../../../lib/settings'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n    background: #333;\n    padding: 12px 16px;\n    font-size: 12px;\n    border-radius: 2px;\n`\nconst TooltipKey = styled.span`\n    font-weight: 600;\n`\nconst TooltipValue = styled.span``\n\nconst CustomTooltip = ({ color, ...bar }) => {\n    return (\n        <TooltipWrapper style={{ color: color }}>\n            <TooltipKey>id</TooltipKey>\n            <TooltipValue>{bar.id}</TooltipValue>\n            <TooltipKey>value</TooltipKey>\n            <TooltipValue>{bar.value}</TooltipValue>\n            <TooltipKey>formattedValue</TooltipKey>\n            <TooltipValue>{bar.formattedValue}</TooltipValue>\n            <TooltipKey>index</TooltipKey>\n            <TooltipValue>{bar.index}</TooltipValue>\n            <TooltipKey>indexValue</TooltipKey>\n            <TooltipValue>{bar.indexValue}</TooltipValue>\n            <TooltipKey>color</TooltipKey>\n            <TooltipValue>{color}</TooltipValue>\n        </TooltipWrapper>\n    )\n}\n\nexport default settingsMapper(\n    {\n        valueFormat: mapFormat,\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return undefined\n\n            return CustomTooltip\n        },\n    },\n    {\n        exclude: [\n            'enable axisTop',\n            'enable axisRight',\n            'enable axisBottom',\n            'enable axisLeft',\n            'custom tooltip example',\n        ],\n    }\n)\n","import React from 'react'\nimport { Seo } from '../../components/Seo'\nimport ApiClient from '../../components/components/api-client/ApiClient'\nimport { groups } from '../../data/components/bar/props'\nimport meta from '../../data/components/bar/meta.yml'\nimport mapper from '../../data/components/bar/mapper'\nimport { generateLightDataSet } from '../../data/components/bar/generator'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst { data, keys } = generateLightDataSet()\n\nconst BarApi = () => {\n    const {\n        image: {\n            childImageSharp: { gatsbyImageData: image },\n        },\n    } = useStaticQuery(graphql`\n        query {\n            image: file(absolutePath: { glob: \"**/src/assets/captures/bar.png\" }) {\n                childImageSharp {\n                    gatsbyImageData(layout: FIXED, width: 900, quality: 100)\n                }\n            }\n        }\n    `)\n\n    return (\n        <>\n            <Seo title=\"Bar HTTP API\" image={image} keywords={[...meta.Bar.tags, 'HTTP API']} />\n            <ApiClient\n                componentName=\"Bar\"\n                chartClass=\"bar\"\n                apiPath=\"/charts/bar\"\n                flavors={meta.flavors}\n                dataProperty=\"data\"\n                controlGroups={groups}\n                propsMapper={mapper}\n                defaultProps={{\n                    width: 1200,\n                    height: 500,\n                    margin: {\n                        top: 40,\n                        right: 50,\n                        bottom: 40,\n                        left: 50,\n                    },\n                    data: JSON.stringify(data, null, '  '),\n                    keys: keys,\n                    indexBy: 'country',\n\n                    colors: { scheme: 'nivo' },\n                    colorBy: 'id',\n                    borderRadius: 0,\n                    borderWidth: 0,\n                    borderColor: {\n                        from: 'color',\n                        modifiers: [['darker', 1.6]],\n                    },\n\n                    padding: 0.2,\n                    innerPadding: 0,\n                    minValue: 'auto',\n                    maxValue: 'auto',\n\n                    groupMode: 'stacked',\n                    layout: 'vertical',\n                    reverse: false,\n\n                    valueScale: { type: 'linear' },\n                    indexScale: { type: 'band', round: true },\n                    valueFormat: { format: '', enabled: false },\n\n                    axisTop: {\n                        enable: false,\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: '',\n                        legendOffset: 36,\n                    },\n                    axisRight: {\n                        enable: false,\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: '',\n                        legendOffset: 0,\n                    },\n                    axisBottom: {\n                        enable: true,\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'country',\n                        legendPosition: 'middle',\n                        legendOffset: 36,\n                    },\n                    axisLeft: {\n                        enable: true,\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'food',\n                        legendPosition: 'middle',\n                        legendOffset: -40,\n                    },\n\n                    enableGridX: false,\n                    enableGridY: true,\n\n                    enableLabel: true,\n                    labelSkipWidth: 12,\n                    labelSkipHeight: 12,\n                    labelTextColor: {\n                        from: 'color',\n                        modifiers: [['darker', 1.6]],\n                    },\n                }}\n            />\n        </>\n    )\n}\n\nexport default BarApi\n"],"names":["x","allFlavors","props","key","group","help","type","required","flavors","description","defaultValue","svgDefaultProps","control","choices","label","value","disabled","map","v","disabledValue","min","max","step","unit","chartDimensions","themeProperty","ordinalColors","defsProperties","chartGrid","xDefault","yDefault","values","axes","isInteractive","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","dataFrom","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","data","console","log","JSON","stringify","motionProperties","groups","groupProperties","dishes","generateLightDataSet","generateCountriesData","slice","size","keys","generateHeavyDataSet","TooltipWrapper","styled","TooltipKey","TooltipValue","CustomTooltip","color","bar","style","id","formattedValue","indexValue","settingsMapper","valueFormat","mapFormat","axisTop","mapAxis","axisRight","axisBottom","axisLeft","tooltip","exclude","image","useStaticQuery","childImageSharp","gatsbyImageData","title","keywords","meta","componentName","chartClass","apiPath","dataProperty","controlGroups","propsMapper","mapper","defaultProps","width","height","margin","top","right","bottom","left","indexBy","colors","scheme","colorBy","borderRadius","borderWidth","borderColor","from","modifiers","padding","innerPadding","minValue","maxValue","groupMode","layout","reverse","valueScale","indexScale","round","format","enabled","enable","tickSize","tickPadding","tickRotation","legendOffset","legendPosition","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor"],"sourceRoot":""}