{"version":3,"file":"component---src-pages-marimekko-index-tsx-ec27ee9da0906495e8c4.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-shape/src/constant.js","webpack://nivo-website/./src/lib/settings.ts","webpack://nivo-website/./src/data/components/marimekko/mapper.tsx","webpack://nivo-website/./src/data/components/marimekko/props.ts","webpack://nivo-website/./src/pages/marimekko/index.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/types.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/Bar.tsx","webpack://nivo-website/../src/Bars.tsx","webpack://nivo-website/../src/BarTooltip.tsx","webpack://nivo-website/../src/Marimekko.tsx","webpack://nivo-website/../src/ResponsiveMarimekko.tsx","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/random.js"],"sourcesContent":["export default function (x) {\n  return function constant() {\n    return x;\n  };\n}","import omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\nimport { AxisProps, CanvasAxisProps } from '@nivo/axes'\n\nexport const settingsMapper =\n    (mapping: any, { exclude = [] }: { exclude?: string[] } = {}) =>\n    (settings: any, options: any = {}) => {\n        const overrides: any = {}\n\n        Object.keys(settings).forEach(key => {\n            if (mapping[key]) {\n                overrides[key] = mapping[key](settings[key], settings, options)\n            }\n        })\n\n        return {\n            ...omit(settings, exclude),\n            ...overrides,\n        }\n    }\n\nexport type AxisWithToggle<Axis extends AxisProps | CanvasAxisProps> = NonNullable<Axis> & {\n    enable: boolean\n}\n\nexport const mapAxis = (type: 'top' | 'right' | 'bottom' | 'left') => (value: any, settings: any) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }: { format: string; enabled: boolean }) =>\n    enabled ? format : undefined\n","import React from 'react'\nimport styled from 'styled-components'\nimport { patternLinesDef } from '@nivo/core'\nimport { mapAxis, mapFormat, settingsMapper } from '../../../lib/settings'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n    background: #333;\n    padding: 12px 16px;\n    font-size: 12px;\n    border-radius: 2px;\n`\nconst TooltipKey = styled.span``\nconst TooltipValue = styled.span`\n    font-weight: 600;\n`\n\nconst CustomTooltip = ({ bar }) => (\n    <TooltipWrapper style={{ color: bar.color }}>\n        <TooltipKey>datum.id</TooltipKey>\n        <TooltipValue>{bar.datum.id}</TooltipValue>\n        <TooltipKey>id</TooltipKey>\n        <TooltipValue>{bar.id}</TooltipValue>\n        <TooltipKey>value</TooltipKey>\n        <TooltipValue>{bar.value}</TooltipValue>\n        <TooltipKey>color</TooltipKey>\n        <TooltipValue>{bar.color}</TooltipValue>\n        <TooltipKey>thickness</TooltipKey>\n        <TooltipValue>{bar.datum.thickness}</TooltipValue>\n    </TooltipWrapper>\n)\n\nexport default settingsMapper(\n    {\n        valueFormat: mapFormat,\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return undefined\n\n            return CustomTooltip\n        },\n        defs: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                patternLinesDef('lines', {\n                    background: 'rgba(0, 0, 0, 0)',\n                    color: 'inherit',\n                    rotation: -45,\n                    lineWidth: 4,\n                    spacing: 8,\n                }),\n            ]\n        },\n        fill: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                { match: { id: 'agree strongly' }, id: 'lines' },\n                { match: { id: 'disagree strongly' }, id: 'lines' },\n            ]\n        },\n    },\n    {\n        exclude: ['custom tooltip example', 'showcase pattern usage'],\n    }\n)\n","import { defaultProps as defaults, offsetById } from '@nivo/marimekko'\nimport { OrdinalColorScaleConfig } from '@nivo/colors'\nimport {\n    themeProperty,\n    defsProperties,\n    groupProperties,\n    getLegendsProps,\n    motionProperties,\n} from '../../../lib/componentProperties'\nimport {\n    chartDimensions,\n    ordinalColors,\n    chartGrid,\n    axes,\n    isInteractive,\n} from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg']\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Chart data, which should be immutable.',\n        description: `\n            The data doesn't have to conform to a specific schema,\n            it's gonna depend on how you configure \\`id\\`, \\`value\\`\n            and \\`dimensions\\`.\n        `,\n        type: 'RawDatum[]',\n        required: true,\n    },\n    {\n        key: 'id',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'ID accessor.',\n        description: `\n            Define how to access the ID of each datum,\n            by default, nivo will look for the \\`id\\` property.\n        `,\n        type: 'string | (datum: RawDatum): string | number',\n        required: true,\n    },\n    {\n        key: 'value',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Value accessor.',\n        description: `\n            Define how to access the value of each datum,\n            which will dictate the thickness of the bars,\n            by default, nivo will look for the \\`value\\` property.\n        `,\n        type: 'string | (datum: RawDatum): number',\n        required: true,\n    },\n    {\n        key: 'dimensions',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Data dimensions configuration.',\n        type: '{ id: string, value: string | (datum: RawDatum) => number }',\n        required: true,\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'string | (value: number) => string | number',\n        control: { type: 'valueFormat' },\n    },\n    {\n        key: 'layout',\n        help: `How to display bars.`,\n        type: 'string',\n        flavors: allFlavors,\n        required: false,\n        defaultValue: defaults.layout,\n        group: 'Base',\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'horizontal', value: 'horizontal' },\n                { label: 'vertical', value: 'vertical' },\n            ],\n        },\n    },\n    {\n        key: 'offset',\n        help: 'Offset type.',\n        type: 'OffsetId',\n        flavors: allFlavors,\n        required: false,\n        group: 'Base',\n        defaultValue: defaults.offset,\n        control: {\n            type: 'choices',\n            choices: Object.keys(offsetById).map(key => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'outerPadding',\n        help: 'Space before the first bar and after the last one.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.outerPadding,\n        group: 'Base',\n        control: {\n            type: 'range',\n            min: 0,\n            max: 20,\n            unit: 'px',\n        },\n    },\n    {\n        key: 'innerPadding',\n        help: 'Space between bars.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.innerPadding,\n        group: 'Base',\n        control: {\n            type: 'range',\n            min: 0,\n            max: 20,\n            unit: 'px',\n        },\n    },\n    ...chartDimensions(allFlavors),\n    themeProperty(allFlavors),\n    ordinalColors({\n        flavors: allFlavors,\n        defaultValue: defaults.colors as OrdinalColorScaleConfig,\n    }),\n    ...defsProperties('Style', allFlavors),\n    {\n        key: 'showcase pattern usage',\n        flavors: ['svg'],\n        help: 'Patterns.',\n        required: false,\n        description: `\n            You can use \\`defs\\` and \\`fill\\` properties\n            to use patterns, see\n            [dedicated guide](self:/guides/patterns)\n            for further information.\n        `,\n        type: 'boolean',\n        control: { type: 'switch' },\n        group: 'Style',\n    },\n    {\n        key: 'borderWidth',\n        help: 'Slices border width.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.borderWidth,\n        control: { type: 'lineWidth' },\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute border color.',\n        flavors: allFlavors,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.borderColor,\n        control: { type: 'inheritedColor' },\n        group: 'Style',\n    },\n    ...chartGrid({\n        flavors: allFlavors,\n        values: true,\n        xDefault: defaults.enableGridX,\n        yDefault: defaults.enableGridY,\n    }),\n    ...axes({ flavors: allFlavors }),\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        flavors: allFlavors,\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer must be a component.\n            \n            The layer component which will receive the chart's\n            context & computed data and must return a valid SVG element\n            for the \\`Marimekko\\` component.\n            \n            The props passed to layers have the following structure:\n            \n            \\`\\`\\`\n            {\n                data: ComputedDatum<RawDatum>[]\n                bars: BarDatum<RawDatum>[]\n                thicknessScale: ScaleLinear<number, number>\n                dimensionsScale: ScaleLinear<number, number>\n            }\n            \\`\\`\\`\n        `,\n        required: false,\n        type: 'Array<string | Function>',\n        defaultValue: defaults.layers,\n    },\n    isInteractive({\n        flavors: ['svg'],\n        defaultValue: defaults.isInteractive,\n    }),\n    {\n        key: 'onClick',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onClick handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseEnter handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseMove handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseLeave handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        flavors: allFlavors,\n        type: 'Component',\n        required: false,\n        help: 'Custom tooltip component',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will receive\n            the following props:\n            \n            \\`\\`\\`\n            {\n                bar: BarDatum<RawDatum>\n            }\n            \\`\\`\\`\n            \n            You can also customize the style of the tooltip using\n            the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        help: 'Showcase custom tooltip.',\n        flavors: allFlavors,\n        required: false,\n        type: 'boolean',\n        control: { type: 'switch' },\n        group: 'Interactivity',\n    },\n    ...motionProperties(['svg'], defaults, 'react-spring'),\n    {\n        key: 'legends',\n        flavors: ['svg'],\n        type: 'Legend[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        required: false,\n        control: {\n            type: 'array',\n            props: getLegendsProps(['svg']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend: any) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: (data: any) => {\n                    console.log(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n]\n\nexport const groups = groupProperties(props)\n","import React from 'react'\nimport { ResponsiveMarimekko, defaultProps } from '@nivo/marimekko'\nimport { random, omit } from 'lodash'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/marimekko/meta.yml'\nimport mapper from '../../data/components/marimekko/mapper'\nimport { groups } from '../../data/components/marimekko/props'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst getRandomValue = () => random(0, 32)\n\nconst generateData = () =>\n    [`it's good`, `it's sweet`, `it's spicy`, 'worth eating', 'worth buying'].map(statement => ({\n        statement,\n        participation: getRandomValue(),\n        stronglyAgree: getRandomValue(),\n        agree: getRandomValue(),\n        disagree: getRandomValue(),\n        stronglyDisagree: getRandomValue(),\n    }))\n\nconst initialProperties = {\n    id: 'statement',\n    value: 'participation',\n    dimensions: [\n        {\n            id: 'disagree strongly',\n            value: 'stronglyDisagree',\n        },\n        {\n            id: 'disagree',\n            value: 'disagree',\n        },\n        {\n            id: 'agree',\n            value: 'agree',\n        },\n        {\n            id: 'agree strongly',\n            value: 'stronglyAgree',\n        },\n    ],\n    layout: defaultProps.layout,\n    offset: defaultProps.offset,\n    outerPadding: defaultProps.outerPadding,\n    innerPadding: 9,\n\n    axisTop: {\n        enable: false,\n        orient: 'top',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 36,\n    },\n    axisRight: {\n        enable: true,\n        orient: 'right',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 0,\n    },\n    axisBottom: {\n        enable: true,\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'participation',\n        legendOffset: 36,\n        legendPosition: 'middle',\n    },\n    axisLeft: {\n        enable: true,\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'opinions',\n        legendOffset: -40,\n        legendPosition: 'middle',\n    },\n    enableGridX: defaultProps.enableGridX,\n    enableGridY: defaultProps.enableGridY,\n\n    margin: {\n        top: 40,\n        right: 80,\n        bottom: 100,\n        left: 80,\n    },\n\n    valueFormat: { format: '', enabled: false },\n\n    colors: { scheme: 'spectral' },\n\n    borderWidth: 1,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.2]],\n    },\n\n    isInteractive: true,\n    'custom tooltip example': false,\n    tooltip: null,\n    'showcase pattern usage': true,\n\n    defs: [],\n    fill: [],\n\n    animate: defaultProps.animate,\n    motionConfig: defaultProps.motionConfig,\n\n    legends: [\n        {\n            anchor: 'bottom',\n            direction: 'row',\n            justify: false,\n            translateX: 0,\n            translateY: 80,\n            itemsSpacing: 0,\n            itemWidth: 140,\n            itemHeight: 18,\n            itemTextColor: '#999',\n            itemDirection: 'right-to-left',\n            itemOpacity: 1,\n            symbolSize: 18,\n            symbolShape: 'square',\n            effects: [\n                {\n                    on: 'hover',\n                    style: {\n                        itemTextColor: '#000',\n                    },\n                },\n            ],\n        },\n    ],\n}\n\nconst Marimekko = () => {\n    const {\n        image: {\n            childImageSharp: { gatsbyImageData: image },\n        },\n    } = useStaticQuery(graphql`\n        query {\n            image: file(absolutePath: { glob: \"**/src/assets/captures/marimekko.png\" }) {\n                childImageSharp {\n                    gatsbyImageData(layout: FIXED, width: 700, quality: 100)\n                }\n            }\n        }\n    `)\n\n    return (\n        <ComponentTemplate\n            name=\"Marimekko\"\n            meta={meta.Marimekko}\n            icon=\"marimekko\"\n            flavors={meta.flavors}\n            currentFlavor=\"svg\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={defaultProps}\n            propertiesMapper={mapper}\n            generateData={generateData}\n            image={image}\n        >\n            {(properties, data, theme, logAction) => {\n                const handleClick = bar => {\n                    logAction({\n                        type: 'click',\n                        label: `[bar] ${bar.datum.id} - ${bar.id}: ${bar.value}`,\n                        color: bar.color,\n                        // prevent cyclic dependency\n                        data: {\n                            ...omit(bar, ['datum']),\n                            datum: omit(bar.datum, ['dimensions']),\n                        },\n                    })\n                }\n\n                return (\n                    <ResponsiveMarimekko\n                        data={data}\n                        {...properties}\n                        theme={theme}\n                        onClick={handleClick}\n                        legends={properties.legends.map(legend => ({\n                            ...legend,\n                        }))}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default Marimekko\n","import { LayerId, Layout, OffsetId } from './types'\n\nexport const defaultProps = {\n    layout: 'vertical' as Layout,\n    offset: 'none' as OffsetId,\n    outerPadding: 0,\n    innerPadding: 3,\n\n    layers: ['grid', 'axes', 'bars', 'legends'] as LayerId[],\n\n    enableGridX: false,\n    enableGridY: true,\n\n    colors: { scheme: 'nivo' },\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import * as React from 'react'\nimport {\n    stackOffsetDiverging,\n    stackOffsetExpand,\n    stackOffsetNone,\n    stackOffsetSilhouette,\n    stackOffsetWiggle,\n} from 'd3-shape'\nimport { ScaleLinear } from '@nivo/scales'\nimport { Box, Dimensions, Theme, SvgDefsAndFill, ModernMotionProps, ValueFormat } from '@nivo/core'\nimport { AxisProps } from '@nivo/axes'\nimport { OrdinalColorScaleConfig, InheritedColorConfig } from '@nivo/colors'\nimport { LegendProps } from '@nivo/legends'\n\nexport type DatumId = string | number\nexport type DatumValue = number\nexport type DatumFormattedValue = string | number\n\nexport type DatumPropertyAccessor<RawDatum, T> = (datum: RawDatum) => T\n\nexport interface DataProps<RawDatum> {\n    data: RawDatum[]\n    id: string | number | DatumPropertyAccessor<RawDatum, DatumId>\n    value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    dimensions: {\n        id: string\n        value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    }[]\n    valueFormat?: ValueFormat<number>\n}\n\nexport interface NormalizedDatum<RawDatum> {\n    index: number\n    id: DatumId\n    value: DatumValue\n    data: RawDatum\n}\n\nexport interface DimensionDatum<RawDatum> {\n    id: string\n    value: number\n    formattedValue: string | number\n    color: string\n    x: number\n    y: number\n    width: number\n    height: number\n    datum: ComputedDatum<RawDatum>\n}\n\nexport interface ComputedDatum<RawDatum> extends NormalizedDatum<RawDatum> {\n    x: number\n    y: number\n    width: number\n    height: number\n    dimensions: DimensionDatum<RawDatum>[]\n}\n\nexport interface BarDatum<RawDatum> extends DimensionDatum<RawDatum> {\n    key: string\n    fill?: string\n    borderColor: string\n    borderWidth: number\n}\n\nexport type LabelAccessorFunction<RawDatum> = (datum: ComputedDatum<RawDatum>) => string | number\n\nexport type LayerId = 'grid' | 'axes' | 'bars' | 'legends'\n\nexport interface CustomLayerProps<RawDatum> {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number>\n    dimensionsScale: ScaleLinear<number>\n}\n\nexport type CustomLayer<RawDatum> = React.FC<CustomLayerProps<RawDatum>>\n\nexport type Layer<RawDatum> = LayerId | CustomLayer<RawDatum>\n\nexport interface TooltipProps<RawDatum> {\n    bar: BarDatum<RawDatum>\n}\n\nexport type BarTooltipType<RawDatum> = (props: TooltipProps<RawDatum>) => JSX.Element\n\nexport type Layout = 'horizontal' | 'vertical'\n\nexport const offsetById = {\n    // Applies a zero baseline and normalizes the values\n    // for each point such that the topline is always one.\n    expand: stackOffsetExpand,\n    // Positive values are stacked above zero, negative values\n    // are stacked below zero, and zero values are stacked at zero.\n    diverging: stackOffsetDiverging,\n    // Applies a zero baseline.\n    none: stackOffsetNone,\n    // Shifts the baseline down such that the center of the streamgraph\n    // is always at zero.\n    silouhette: stackOffsetSilhouette,\n    // Shifts the baseline so as to minimize the weighted wiggle of layers.\n    // This offset is recommended for streamgraphs in conjunction with the inside-out order.\n    // See Stacked Graphs—Geometry & Aesthetics by Bryon & Wattenberg for more information.\n    wiggle: stackOffsetWiggle,\n}\n\nexport type OffsetId = keyof typeof offsetById\n\nexport type CommonProps<RawDatum> = {\n    margin: Box\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n\n    // axes and grid\n    axisTop?: AxisProps | null\n    axisRight?: AxisProps | null\n    axisBottom?: AxisProps | null\n    axisLeft?: AxisProps | null\n    enableGridX: boolean\n    gridXValues?: number[]\n    enableGridY: boolean\n    gridYValues?: number[]\n\n    // colors, theme and border\n    colors: OrdinalColorScaleConfig<Omit<DimensionDatum<RawDatum>, 'color' | 'fill'>>\n    theme: Theme\n    borderWidth: number\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // labels\n    enableLabels: boolean\n    label: string | LabelAccessorFunction<RawDatum>\n    labelSkipWidth: number\n    labelSkipHeight: number\n    labelTextColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // interactivity\n    isInteractive: boolean\n    tooltip: BarTooltipType<RawDatum>\n\n    legends: LegendProps[]\n\n    role: string\n}\n\nexport type MouseEventHandler<RawDatum, ElementType> = (\n    datum: BarDatum<RawDatum>,\n    event: React.MouseEvent<ElementType>\n) => void\n\nexport type MouseEventHandlers<RawDatum, ElementType> = Partial<{\n    onClick: MouseEventHandler<RawDatum, ElementType>\n    onMouseEnter: MouseEventHandler<RawDatum, ElementType>\n    onMouseMove: MouseEventHandler<RawDatum, ElementType>\n    onMouseLeave: MouseEventHandler<RawDatum, ElementType>\n}>\n\nexport type SvgProps<RawDatum> = DataProps<RawDatum> &\n    Dimensions &\n    Partial<CommonProps<RawDatum>> &\n    ModernMotionProps &\n    SvgDefsAndFill<BarDatum<RawDatum>> &\n    MouseEventHandlers<RawDatum, SVGRectElement> & {\n        layers?: Layer<RawDatum>[]\n    }\n","import { useMemo } from 'react'\nimport { get } from 'lodash'\nimport { stack as d3Stack, Stack, Series } from 'd3-shape'\nimport { useValueFormatter, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { createLinearScale, ScaleLinear } from '@nivo/scales'\nimport {\n    NormalizedDatum,\n    ComputedDatum,\n    DataProps,\n    DatumPropertyAccessor,\n    Layout,\n    DimensionDatum,\n    CommonProps,\n    CustomLayerProps,\n    BarDatum,\n    OffsetId,\n    offsetById,\n} from './types'\n\n// d3 stack does not support defining `.keys()` using\n// a mix of keys and custom value accessors, so we're\n// building a map of accessors in any case, we're gonna\n// use it later for `stack.value()`.\nexport const useDataDimensions = <RawDatum>(rawDimensions: DataProps<RawDatum>['dimensions']) =>\n    useMemo(() => {\n        const dimensions: Record<string, (datum: RawDatum) => number> = {}\n        const dimensionIds: string[] = []\n        rawDimensions.forEach(dimension => {\n            dimensionIds.push(dimension.id)\n            dimensions[dimension.id] =\n                typeof dimension.value === 'function'\n                    ? dimension.value\n                    : (datum: RawDatum) => get(datum, dimension.value as string, 0)\n        })\n\n        return { dimensionIds, dimensions }\n    }, [rawDimensions])\n\nexport const useStack = <RawDatum>(\n    dimensionIds: string[],\n    dimensions: Record<string, (datum: RawDatum) => number>,\n    offset: OffsetId\n) =>\n    useMemo(() => {\n        const offsetFunction = offsetById[offset]\n\n        return d3Stack<RawDatum>()\n            .keys(dimensionIds)\n            .value((datum, key) => dimensions[key](datum))\n            .offset(offsetFunction)\n    }, [dimensionIds, dimensions, offset])\n\nexport const useStackedData = <RawDatum>(\n    stack: Stack<any, RawDatum, string>,\n    data: DataProps<RawDatum>['data']\n) =>\n    useMemo(() => {\n        const stacked = stack(data)\n\n        const allValues: number[] = []\n        stacked.forEach(dimension => {\n            dimension.forEach(datum => {\n                allValues.push(datum[0])\n                allValues.push(datum[1])\n            })\n        })\n\n        const min = Math.min(...allValues)\n        const max = Math.max(...allValues)\n\n        return {\n            stacked,\n            min,\n            max,\n        }\n    }, [stack, data])\n\nexport const useDimensionsScale = (\n    min: number,\n    max: number,\n    width: number,\n    height: number,\n    layout: Layout\n) =>\n    useMemo(() => {\n        const scaleData = { all: [min, max], min, max }\n        const size = layout === 'vertical' ? height : width\n        const axis = layout === 'vertical' ? 'y' : 'x'\n        // here 'axis' determines whether the domain should be reversed or not\n        return createLinearScale({ type: 'linear', min, max }, scaleData, size, axis)\n    }, [min, max, width, height, layout])\n\nexport const useNormalizedData = <RawDatum>(\n    data: DataProps<RawDatum>['data'],\n    id: DataProps<RawDatum>['id'],\n    value: DataProps<RawDatum>['value']\n) => {\n    const getId: DatumPropertyAccessor<RawDatum, string | number> =\n        typeof id === 'function' ? id : (datum: RawDatum) => get(datum, id)\n    const getValue: DatumPropertyAccessor<RawDatum, number> =\n        typeof value === 'function' ? value : (datum: RawDatum) => get(datum, value, 0)\n\n    return useMemo(() => {\n        const normalized: NormalizedDatum<RawDatum>[] = []\n        data.forEach((datum, index) => {\n            const datumId = getId(datum)\n            const datumValue = getValue(datum)\n\n            normalized.push({\n                index,\n                id: datumId,\n                value: datumValue,\n                data: datum,\n            })\n        })\n\n        return normalized\n    }, [data, getId, getValue])\n}\n\nexport const useThicknessScale = <RawDatum>({\n    data,\n    width,\n    height,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    width: number\n    height: number\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) =>\n    useMemo(() => {\n        const totalValue = data.reduce((acc, datum) => acc + datum.value, 0)\n        const scaleData = { all: [0, totalValue], min: 0, max: totalValue }\n        const totalPadding = 2 * outerPadding + (data.length - 1) * innerPadding\n        const size = layout === 'vertical' ? width - totalPadding : height - totalPadding\n        // here 'axis' means that the scale will be going forward, i.e. not reversed\n        return createLinearScale({ type: 'linear' }, scaleData, size, 'x')\n    }, [data, width, height, layout])\n\nexport const useComputedData = <RawDatum>({\n    data,\n    stacked,\n    dimensionIds,\n    valueFormat,\n    thicknessScale,\n    dimensionsScale,\n    colors,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    stacked: Series<RawDatum, string>[]\n    dimensionIds: string[]\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    thicknessScale: ScaleLinear<number>\n    dimensionsScale: ScaleLinear<number>\n    colors: CommonProps<RawDatum>['colors']\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) => {\n    const getColor = useOrdinalColorScale<Omit<DimensionDatum<RawDatum>, 'color'>>(colors, 'id')\n\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    return useMemo(() => {\n        const computedData: ComputedDatum<RawDatum>[] = []\n\n        let position = outerPadding\n\n        data.forEach(datum => {\n            const thickness = thicknessScale(datum.value)\n\n            const computedDatum: ComputedDatum<RawDatum> = {\n                ...datum,\n                x: layout === 'vertical' ? position : 0,\n                y: layout === 'vertical' ? 0 : position,\n                width: layout === 'vertical' ? thickness : 0,\n                height: layout === 'vertical' ? 0 : thickness,\n                dimensions: [],\n            }\n\n            const allPositions: number[] = []\n            let totalSize = 0\n\n            position += thickness + innerPadding\n\n            dimensionIds.forEach(dimensionId => {\n                const dimension = stacked.find(stack => stack.key === dimensionId)\n                if (dimension) {\n                    const dimensionPoint = dimension[datum.index]\n                    const dimensionDatum: DimensionDatum<RawDatum> = {\n                        id: dimensionId,\n                        datum: computedDatum,\n                        value: dimensionPoint[1] - dimensionPoint[0],\n                        formattedValue: formatValue(dimensionPoint[1] - dimensionPoint[0]),\n                        color: 'rgba(0, 0, 0, 0)',\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    }\n\n                    const position0 = dimensionsScale(dimensionPoint[0])\n                    const position1 = dimensionsScale(dimensionPoint[1])\n\n                    if (layout === 'vertical') {\n                        dimensionDatum.x = computedDatum.x\n                        dimensionDatum.y = Math.min(position0, position1)\n                        dimensionDatum.width = computedDatum.width\n                        dimensionDatum.height = Math.max(position0, position1) - dimensionDatum.y\n\n                        allPositions.push(dimensionDatum.y)\n                        totalSize += dimensionDatum.height\n                    } else {\n                        dimensionDatum.x = Math.min(position0, position1)\n                        dimensionDatum.y = computedDatum.y\n                        dimensionDatum.width = Math.max(position0, position1) - dimensionDatum.x\n                        dimensionDatum.height = computedDatum.height\n\n                        allPositions.push(dimensionDatum.x)\n                        totalSize += dimensionDatum.width\n                    }\n\n                    dimensionDatum.color = getColor(dimensionDatum)\n\n                    computedDatum.dimensions.push(dimensionDatum)\n                }\n\n                if (layout === 'vertical') {\n                    computedDatum.y = Math.min(...allPositions)\n                    computedDatum.height = totalSize\n                } else {\n                    computedDatum.x = Math.min(...allPositions)\n                    computedDatum.width = totalSize\n                }\n            })\n\n            computedData.push(computedDatum)\n        })\n\n        return computedData\n    }, [\n        data,\n        stacked,\n        dimensionIds,\n        thicknessScale,\n        dimensionsScale,\n        layout,\n        outerPadding,\n        innerPadding,\n        getColor,\n        formatValue,\n    ])\n}\n\nexport const useBars = <RawDatum>(\n    data: ComputedDatum<RawDatum>[],\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>,\n    borderWidth: number\n) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<DimensionDatum<RawDatum>>(borderColor, theme)\n\n    return useMemo(() => {\n        const all: BarDatum<RawDatum>[] = []\n        data.forEach(datum => {\n            datum.dimensions.forEach(dimension => {\n                all.push({\n                    key: `${datum.id}-${dimension.id}`,\n                    ...dimension,\n                    borderColor: getBorderColor(dimension),\n                    borderWidth,\n                })\n            })\n        })\n\n        return all\n    }, [data, borderWidth, getBorderColor])\n}\n\nexport const useMarimekko = <RawDatum>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions: rawDimensions,\n    layout,\n    offset,\n    outerPadding,\n    innerPadding,\n    colors,\n    borderColor,\n    borderWidth,\n    width,\n    height,\n}: {\n    data: DataProps<RawDatum>['data']\n    id: DataProps<RawDatum>['id']\n    value: DataProps<RawDatum>['value']\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    dimensions: DataProps<RawDatum>['dimensions']\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n    colors: CommonProps<RawDatum>['colors']\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n    borderWidth: number\n    width: number\n    height: number\n}) => {\n    const { dimensionIds, dimensions } = useDataDimensions<RawDatum>(rawDimensions)\n    const stack = useStack<RawDatum>(dimensionIds, dimensions, offset)\n    const { stacked, min, max } = useStackedData<RawDatum>(stack, data)\n    const normalizedData = useNormalizedData<RawDatum>(data, id, value)\n    const thicknessScale = useThicknessScale({\n        data: normalizedData,\n        width,\n        height,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const dimensionsScale = useDimensionsScale(min, max, width, height, layout)\n    const computedData = useComputedData<RawDatum>({\n        data: normalizedData,\n        stacked,\n        dimensionIds,\n        valueFormat,\n        thicknessScale,\n        dimensionsScale,\n        colors,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const bars = useBars<RawDatum>(computedData, borderColor, borderWidth)\n\n    return {\n        computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n        dimensionIds,\n    }\n}\n\nexport const useLayerContext = <RawDatum>({\n    data,\n    bars,\n    thicknessScale,\n    dimensionsScale,\n}: {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number>\n    dimensionsScale: ScaleLinear<number>\n}): CustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            data,\n            bars,\n            thicknessScale,\n            dimensionsScale,\n        }),\n        [data, bars, thicknessScale, dimensionsScale]\n    )\n\nexport const useLegendData = <RawDatum>(dimensionIds: string[], bars: BarDatum<RawDatum>[]) => {\n    const legendData: {\n        id: string\n        label: string\n        color: string\n        fill?: string\n    }[] = []\n\n    dimensionIds.forEach(dimensionId => {\n        const bar = bars.find(bar => bar.id === dimensionId)\n        if (bar) {\n            legendData.push({\n                id: dimensionId,\n                label: dimensionId,\n                color: bar.color,\n                fill: bar.fill,\n            })\n        }\n    })\n\n    return legendData\n}\n","import { createElement, MouseEvent, useCallback } from 'react'\nimport { animated, SpringValues, to } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\n\ninterface BarProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    bar: BarDatum<RawDatum>\n    animatedProps: SpringValues<{\n        x: number\n        y: number\n        width: number\n        height: number\n        opacity: number\n        color: string\n        borderColor: string\n    }>\n    isInteractive: boolean\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bar = <RawDatum,>({\n    bar,\n    animatedProps,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        event => showTooltipFromEvent(createElement(tooltip, { bar }), event),\n        [showTooltipFromEvent, tooltip, bar]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.(bar, event)\n        },\n        [onClick, bar]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseMove?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(bar, event)\n            hideTooltip()\n        },\n        [onMouseLeave, bar, hideTooltip]\n    )\n\n    return (\n        <animated.rect\n            x={animatedProps.x}\n            y={animatedProps.y}\n            width={to(animatedProps.width, value => Math.max(value, 0))}\n            height={to(animatedProps.height, value => Math.max(value, 0))}\n            fill={bar.fill ?? animatedProps.color}\n            stroke={animatedProps.borderColor}\n            strokeWidth={bar.borderWidth}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\nimport { Bar } from './Bar'\n\ninterface BarsProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    isInteractive: boolean\n    bars: BarDatum<RawDatum>[]\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bars = <RawDatum,>({\n    bars,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarsProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<\n        BarDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            width: number\n            height: number\n            color: string\n            opacity: number\n            borderColor: string\n        }\n    >(bars, {\n        keys: bar => bar.key,\n        initial: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        from: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 0,\n            borderColor: bar.borderColor,\n        }),\n        enter: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        update: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        leave: bar => ({\n            opacity: 0,\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, bar) => (\n                <Bar<RawDatum>\n                    key={bar.key}\n                    bar={bar}\n                    animatedProps={style}\n                    isInteractive={isInteractive}\n                    tooltip={tooltip}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                />\n            ))}\n        </>\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BarDatum } from './types'\n\nexport const BarTooltip = <RawDatum,>({ bar }: { bar: BarDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={`${bar.datum.id} - ${bar.id}`}\n        value={bar.formattedValue}\n        enableChip={true}\n        color={bar.color}\n    />\n)\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { SvgProps, LayerId, DimensionDatum } from './types'\nimport { defaultProps } from './props'\nimport { useMarimekko, useLayerContext, useLegendData } from './hooks'\nimport { Bars } from './Bars'\nimport { BarTooltip } from './BarTooltip'\n\nconst InnerMarimekko = <RawDatum,>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions,\n    width,\n    height,\n    margin: partialMargin,\n    layout = defaultProps.layout,\n    offset = defaultProps.offset,\n    outerPadding = defaultProps.outerPadding,\n    innerPadding = defaultProps.innerPadding,\n    layers = defaultProps.layers,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<DimensionDatum<RawDatum>, 'color'>\n    >,\n    defs = [],\n    fill = [],\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<DimensionDatum<RawDatum>>,\n    isInteractive = defaultProps.isInteractive,\n    tooltip = BarTooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    legends = [],\n    role,\n}: SvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { computedData, bars, thicknessScale, dimensionsScale, dimensionIds } =\n        useMarimekko<RawDatum>({\n            data,\n            id,\n            value,\n            dimensions,\n            valueFormat,\n            layout,\n            offset,\n            outerPadding,\n            innerPadding,\n            colors,\n            borderColor,\n            borderWidth,\n            width: innerWidth,\n            height: innerHeight,\n        })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        bars: null,\n        legends: null,\n    }\n\n    const boundDefs = bindDefs(defs, bars, fill)\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Bars<RawDatum>\n                key=\"bars\"\n                bars={bars}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n            />\n        )\n    }\n\n    const xScale = layout === 'vertical' ? thicknessScale : dimensionsScale\n    const yScale = layout === 'vertical' ? dimensionsScale : thicknessScale\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                xScale={enableGridX ? xScale : undefined}\n                yScale={enableGridY ? yScale : undefined}\n                width={innerWidth}\n                height={innerHeight}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    const legendData = useLegendData<RawDatum>(dimensionIds, bars)\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <g key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    const layerContext = useLayerContext<RawDatum>({\n        data: computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as LayerId] !== undefined) {\n                    return layerById[layer as LayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Marimekko = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    ...otherProps\n}: SvgProps<RawDatum>) => (\n    <Container\n        theme={otherProps.theme}\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n    >\n        <InnerMarimekko<RawDatum>\n            isInteractive={isInteractive}\n            animate={animate}\n            motionConfig={motionConfig}\n            {...otherProps}\n        />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Marimekko } from './Marimekko'\nimport { SvgProps } from './types'\n\nexport const ResponsiveMarimekko = <RawDatum,>(\n    props: Omit<SvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Marimekko<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n"],"names":["x","settingsMapper","mapping","exclude","settings","options","overrides","Object","keys","forEach","key","omit","mapAxis","type","value","upperFirst","enable","mapFormat","format","enabled","undefined","TooltipWrapper","styled","TooltipKey","TooltipValue","CustomTooltip","bar","style","color","datum","id","thickness","valueFormat","axisTop","axisRight","axisBottom","axisLeft","tooltip","values","defs","patternLinesDef","background","rotation","lineWidth","spacing","fill","match","allFlavors","props","group","flavors","help","description","required","control","defaultValue","defaults","choices","label","offsetById","map","min","max","unit","chartDimensions","themeProperty","ordinalColors","defsProperties","chartGrid","xDefault","yDefault","axes","isInteractive","motionProperties","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","data","console","log","JSON","stringify","groups","groupProperties","getRandomValue","generateData","statement","participation","stronglyAgree","agree","disagree","stronglyDisagree","initialProperties","dimensions","layout","defaultProps","offset","outerPadding","innerPadding","orient","tickSize","tickPadding","tickRotation","legendOffset","legendPosition","enableGridX","enableGridY","margin","top","right","bottom","left","colors","scheme","borderWidth","borderColor","from","modifiers","animate","motionConfig","legends","itemTextColor","itemOpacity","symbolShape","effects","on","image","useStaticQuery","childImageSharp","gatsbyImageData","ComponentTemplate","name","meta","icon","currentFlavor","properties","defaultProperties","propertiesMapper","mapper","theme","logAction","layers","expand","stackOffsetExpand","diverging","stackOffsetDiverging","none","stackOffsetNone","silouhette","stackOffsetSilhouette","wiggle","stackOffsetWiggle","useStack","dimensionIds","useMemo","offsetFunction","d3Stack","useMarimekko","rawDimensions","width","height","push","dimension","_get","stack","stacked","allValues","Math","normalizedData","getId","getValue","normalized","datumId","datumValue","thicknessScale","totalValue","reduce","acc","scaleData","all","totalPadding","length","createLinearScale","dimensionsScale","computedData","getColor","useOrdinalColorScale","formatValue","useValueFormatter","position","computedDatum","y","allPositions","totalSize","find","dimensionId","dimensionPoint","dimensionDatum","formattedValue","position0","position1","bars","useTheme","getBorderColor","useInheritedColor","Bar","animatedProps","onMouseEnter","onMouseMove","onMouseLeave","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","createElement","event","handleClick","handleMouseEnter","handleMouseMove","handleMouseLeave","_jsx","animated","rect","to","stroke","strokeWidth","Bars","useMotionConfig","springConfig","config","transition","useTransition","initial","opacity","enter","update","leave","immediate","BarTooltip","BasicTooltip","enableChip","InnerMarimekko","partialMargin","gridXValues","gridYValues","role","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","layerById","grid","boundDefs","bindDefs","includes","xScale","yScale","Grid","xValues","yValues","Axes","legendData","i","BoxLegendSvg","containerWidth","containerHeight","layerContext","SvgWrapper","layer","Fragment","Marimekko","otherProps","Container","ResponsiveMarimekko","ResponsiveWrapper","nativeFloor","floor","nativeRandom","random","module","exports","lower","upper","baseRandom","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","temp","rand"],"sourceRoot":""}