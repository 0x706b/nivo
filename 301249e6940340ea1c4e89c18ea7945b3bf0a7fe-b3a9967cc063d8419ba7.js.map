{"version":3,"file":"301249e6940340ea1c4e89c18ea7945b3bf0a7fe-b3a9967cc063d8419ba7.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-shape/src/area.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack://nivo-website/../src/PointTooltip.js","webpack://nivo-website/../src/SliceTooltip.js","webpack://nivo-website/../src/props.js","webpack://nivo-website/../src/hooks.js","webpack://nivo-website/../src/Areas.js","webpack://nivo-website/../src/LinesItem.js","webpack://nivo-website/../src/Lines.js","webpack://nivo-website/../src/SlicesItem.js","webpack://nivo-website/../src/Slices.js","webpack://nivo-website/../src/Points.js","webpack://nivo-website/../src/Mesh.js","webpack://nivo-website/../src/Line.js","webpack://nivo-website/../src/ResponsiveLine.js","webpack://nivo-website/../src/LineCanvas.js","webpack://nivo-website/../src/ResponsiveLineCanvas.js"],"sourcesContent":["import { path } from \"d3-path\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport line from \"./line.js\";\nimport { x as pointX, y as pointY } from \"./point.js\";\nexport default function () {\n  var x0 = pointX,\n      x1 = null,\n      y0 = constant(0),\n      y1 = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function area(data) {\n    var i,\n        j,\n        k,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer,\n        x0z = new Array(n),\n        y0z = new Array(n);\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) {\n          j = i;\n          output.areaStart();\n          output.lineStart();\n        } else {\n          output.lineEnd();\n          output.lineStart();\n\n          for (k = i - 1; k >= j; --k) {\n            output.point(x0z[k], y0z[k]);\n          }\n\n          output.lineEnd();\n          output.areaEnd();\n        }\n      }\n\n      if (defined0) {\n        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n      }\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  function arealine() {\n    return line().defined(defined).curve(curve).context(context);\n  }\n\n  area.x = function (_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), x1 = null, area) : x0;\n  };\n\n  area.x0 = function (_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), area) : x0;\n  };\n\n  area.x1 = function (_) {\n    return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : x1;\n  };\n\n  area.y = function (_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), y1 = null, area) : y0;\n  };\n\n  area.y0 = function (_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), area) : y0;\n  };\n\n  area.y1 = function (_) {\n    return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : y1;\n  };\n\n  area.lineX0 = area.lineY0 = function () {\n    return arealine().x(x0).y(y0);\n  };\n\n  area.lineY1 = function () {\n    return arealine().x(x0).y(y1);\n  };\n\n  area.lineX1 = function () {\n    return arealine().x(x1).y(y0);\n  };\n\n  area.defined = function (_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), area) : defined;\n  };\n\n  area.curve = function (_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n  };\n\n  area.context = function (_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n  };\n\n  return area;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst LinePointTooltip = ({ point }) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.xFormatted}</strong>, y:{' '}\n                    <strong>{point.data.yFormatted}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serieColor}\n        />\n    )\n}\n\nLinePointTooltip.propTypes = {\n    point: PropTypes.object.isRequired,\n}\n\nexport default memo(LinePointTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@nivo/core'\nimport { Chip, TableTooltip } from '@nivo/tooltip'\n\nconst SliceTooltip = ({ slice, axis }) => {\n    const theme = useTheme()\n    const otherAxis = axis === 'x' ? 'y' : 'x'\n\n    return (\n        <TableTooltip\n            rows={slice.points.map(point => [\n                <Chip key=\"chip\" color={point.serieColor} style={theme.tooltip.chip} />,\n                point.serieId,\n                <span key=\"value\" style={theme.tooltip.tableCellValue}>\n                    {point.data[`${otherAxis}Formatted`]}\n                </span>,\n            ])}\n        />\n    )\n}\n\nSliceTooltip.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n}\n\nexport default memo(SliceTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { lineCurvePropType, blendModePropType, motionPropTypes, defsPropTypes } from '@nivo/core'\nimport { ordinalColorsPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\nimport { LegendPropShape } from '@nivo/legends'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst commonPropTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                    y: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n\n    xScale: PropTypes.object.isRequired,\n    xFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    yScale: PropTypes.object.isRequired,\n    yFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf([\n                'grid',\n                'markers',\n                'axes',\n                'areas',\n                'crosshair',\n                'lines',\n                'slices',\n                'points',\n                'mesh',\n                'legends',\n            ]),\n            PropTypes.func,\n        ])\n    ).isRequired,\n\n    curve: lineCurvePropType.isRequired,\n\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n    gridXValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n    gridYValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n\n    enablePoints: PropTypes.bool.isRequired,\n    pointSymbol: PropTypes.func,\n    pointSize: PropTypes.number.isRequired,\n    pointColor: PropTypes.any.isRequired,\n    pointBorderWidth: PropTypes.number.isRequired,\n    pointBorderColor: PropTypes.any.isRequired,\n    enablePointLabel: PropTypes.bool.isRequired,\n    pointLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n\n    markers: PropTypes.arrayOf(\n        PropTypes.shape({\n            axis: PropTypes.oneOf(['x', 'y']).isRequired,\n            value: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            style: PropTypes.object,\n        })\n    ),\n\n    colors: ordinalColorsPropType.isRequired,\n\n    enableArea: PropTypes.bool.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    areaBaselineValue: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n        PropTypes.instanceOf(Date),\n    ]).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    debugMesh: PropTypes.bool.isRequired,\n\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableSlices: PropTypes.oneOf(['x', 'y', false]).isRequired,\n    debugSlices: PropTypes.bool.isRequired,\n    sliceTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableCrosshair: PropTypes.bool.isRequired,\n    crosshairType: PropTypes.string.isRequired,\n}\n\nexport const LinePropTypes = {\n    ...commonPropTypes,\n    enablePointLabel: PropTypes.bool.isRequired,\n    role: PropTypes.string.isRequired,\n    useMesh: PropTypes.bool.isRequired,\n    ...motionPropTypes,\n    ...defsPropTypes,\n}\n\nexport const LineCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    curve: 'linear',\n\n    xScale: {\n        type: 'point',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n\n    layers: [\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n    ],\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: true,\n    enableGridY: true,\n\n    enablePoints: true,\n    pointSize: 6,\n    pointColor: { from: 'color' },\n    pointBorderWidth: 0,\n    pointBorderColor: { theme: 'background' },\n    enablePointLabel: false,\n    pointLabel: 'yFormatted',\n\n    colors: { scheme: 'nivo' },\n    enableArea: false,\n    areaBaselineValue: 0,\n    areaOpacity: 0.2,\n    areaBlendMode: 'normal',\n    lineWidth: 2,\n\n    legends: [],\n\n    isInteractive: true,\n    tooltip: PointTooltip,\n    enableSlices: false,\n    debugSlices: false,\n    sliceTooltip: SliceTooltip,\n    debugMesh: false,\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n\nexport const LineDefaultProps = {\n    ...commonDefaultProps,\n    enablePointLabel: false,\n    useMesh: false,\n    animate: true,\n    motionConfig: 'gentle',\n    defs: [],\n    fill: [],\n    role: 'img',\n}\n\nexport const LineCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useCallback, useMemo, useState } from 'react'\nimport { area, line } from 'd3-shape'\nimport { curveFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { LineDefaultProps } from './props'\n\nexport const useLineGenerator = ({ curve }) => {\n    return useMemo(\n        () =>\n            line()\n                .defined(d => d.x !== null && d.y !== null)\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n}\n\nexport const useAreaGenerator = ({ curve, yScale, areaBaselineValue }) => {\n    return useMemo(() => {\n        return area()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y1(d => d.y)\n            .curve(curveFromProp(curve))\n            .y0(yScale(areaBaselineValue))\n    }, [curve, yScale, areaBaselineValue])\n}\n\nconst usePoints = ({ series, getPointColor, getPointBorderColor, formatX, formatY }) => {\n    return useMemo(() => {\n        return series.reduce((acc, serie) => {\n            return [\n                ...acc,\n                ...serie.data\n                    .filter(datum => datum.position.x !== null && datum.position.y !== null)\n                    .map((datum, i) => {\n                        const point = {\n                            id: `${serie.id}.${i}`,\n                            index: acc.length + i,\n                            serieId: serie.id,\n                            serieColor: serie.color,\n                            x: datum.position.x,\n                            y: datum.position.y,\n                        }\n                        point.color = getPointColor(serie)\n                        point.borderColor = getPointBorderColor(point)\n                        point.data = {\n                            ...datum.data,\n                            xFormatted: formatX(datum.data.x),\n                            yFormatted: formatY(datum.data.y),\n                        }\n\n                        return point\n                    }),\n            ]\n        }, [])\n    }, [series, getPointColor, getPointBorderColor, formatX, formatY])\n}\n\nexport const useSlices = ({ enableSlices, points, width, height }) => {\n    return useMemo(() => {\n        if (enableSlices === false) return []\n\n        if (enableSlices === 'x') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.x)) map.set(point.x, [point])\n                else map.get(point.x).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([x, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let x0\n                    if (!prevSlice) x0 = x\n                    else x0 = x - (x - prevSlice[0]) / 2\n\n                    let sliceWidth\n                    if (!nextSlice) sliceWidth = width - x0\n                    else sliceWidth = x - x0 + (nextSlice[0] - x) / 2\n\n                    return {\n                        id: x,\n                        x0,\n                        x,\n                        y0: 0,\n                        y: 0,\n                        width: sliceWidth,\n                        height,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        } else if (enableSlices === 'y') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.y)) map.set(point.y, [point])\n                else map.get(point.y).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([y, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let y0\n                    if (!prevSlice) y0 = y\n                    else y0 = y - (y - prevSlice[0]) / 2\n\n                    let sliceHeight\n                    if (!nextSlice) sliceHeight = height - y0\n                    else sliceHeight = y - y0 + (nextSlice[0] - y) / 2\n\n                    return {\n                        id: y,\n                        x0: 0,\n                        x: 0,\n                        y0,\n                        y,\n                        width,\n                        height: sliceHeight,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        }\n    }, [enableSlices, points])\n}\n\nexport const useLine = ({\n    data,\n    xScale: xScaleSpec = LineDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = LineDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    colors = LineDefaultProps.colors,\n    curve = LineDefaultProps.curve,\n    areaBaselineValue = LineDefaultProps.areaBaselineValue,\n    pointColor = LineDefaultProps.pointColor,\n    pointBorderColor = LineDefaultProps.pointBorderColor,\n    enableSlices = LineDefaultProps.enableSlicesTooltip,\n}) => {\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const [hiddenIds, setHiddenIds] = useState([])\n\n    const {\n        xScale,\n        yScale,\n        series: rawSeries,\n    } = useMemo(\n        () =>\n            computeXYScalesForSeries(\n                data.filter(item => hiddenIds.indexOf(item.id) === -1),\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, hiddenIds, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const { legendData, series } = useMemo(() => {\n        const dataWithColor = data.map(line => ({\n            id: line.id,\n            label: line.id,\n            color: getColor(line),\n        }))\n        const series = dataWithColor\n            .map(datum => ({\n                ...rawSeries.find(serie => serie.id === datum.id),\n                color: datum.color,\n            }))\n            .filter(item => Boolean(item.id))\n        const legendData = dataWithColor\n            .map(item => ({ ...item, hidden: !series.find(serie => serie.id === item.id) }))\n            .reverse()\n\n        return { legendData, series }\n    }, [data, rawSeries, getColor])\n\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const points = usePoints({\n        series,\n        getPointColor,\n        getPointBorderColor,\n        formatX,\n        formatY,\n    })\n\n    const slices = useSlices({\n        enableSlices,\n        points,\n        width,\n        height,\n    })\n\n    const lineGenerator = useLineGenerator({ curve })\n    const areaGenerator = useAreaGenerator({\n        curve,\n        yScale,\n        areaBaselineValue,\n    })\n\n    return {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        getColor,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig, blendModePropType } from '@nivo/core'\n\nconst AreaPath = ({ areaBlendMode, areaOpacity, color, fill, path }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={fill ? fill : animatedProps.color}\n            fillOpacity={areaOpacity}\n            strokeWidth={0}\n            style={{\n                mixBlendMode: areaBlendMode,\n            }}\n        />\n    )\n}\n\nAreaPath.propTypes = {\n    areaBlendMode: blendModePropType.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    color: PropTypes.string,\n    fill: PropTypes.string,\n    path: PropTypes.string.isRequired,\n}\n\nconst Areas = ({ areaGenerator, areaOpacity, areaBlendMode, lines }) => {\n    const computedLines = lines.slice(0).reverse()\n\n    return (\n        <g>\n            {computedLines.map(line => (\n                <AreaPath\n                    key={line.id}\n                    path={areaGenerator(line.data.map(d => d.position))}\n                    {...{ areaOpacity, areaBlendMode, ...line }}\n                />\n            ))}\n        </g>\n    )\n}\n\nAreas.propTypes = {\n    areaGenerator: PropTypes.func.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    lines: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default memo(Areas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath } from '@nivo/core'\n\nconst LinesItem = ({ lineGenerator, points, color, thickness }) => {\n    const path = useMemo(() => lineGenerator(points), [lineGenerator, points])\n    const animatedPath = useAnimatedPath(path)\n\n    return <animated.path d={animatedPath} fill=\"none\" strokeWidth={thickness} stroke={color} />\n}\n\nLinesItem.propTypes = {\n    points: PropTypes.arrayOf(\n        PropTypes.shape({\n            x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        })\n    ),\n    lineGenerator: PropTypes.func.isRequired,\n    color: PropTypes.string.isRequired,\n    thickness: PropTypes.number.isRequired,\n}\n\nexport default memo(LinesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport LinesItem from './LinesItem'\n\nconst Lines = ({ lines, lineGenerator, lineWidth }) => {\n    return lines\n        .slice(0)\n        .reverse()\n        .map(({ id, data, color }) => (\n            <LinesItem\n                key={id}\n                id={id}\n                points={data.map(d => d.position)}\n                lineGenerator={lineGenerator}\n                color={color}\n                thickness={lineWidth}\n            />\n        ))\n}\n\nLines.propTypes = {\n    lines: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            color: PropTypes.string.isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    data: PropTypes.shape({\n                        x: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                        y: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                    }).isRequired,\n                    position: PropTypes.shape({\n                        x: PropTypes.number,\n                        y: PropTypes.number,\n                    }).isRequired,\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineGenerator: PropTypes.func.isRequired,\n}\n\nexport default memo(Lines)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst SlicesItem = ({ slice, axis, debug, tooltip, isCurrent, setCurrent }) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n        },\n        [showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n        },\n        [showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setCurrent(null)\n    }, [hideTooltip])\n\n    return (\n        <rect\n            x={slice.x0}\n            y={slice.y0}\n            width={slice.width}\n            height={slice.height}\n            stroke=\"red\"\n            strokeWidth={debug ? 1 : 0}\n            strokeOpacity={0.75}\n            fill=\"red\"\n            fillOpacity={isCurrent && debug ? 0.35 : 0}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n\nSlicesItem.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    isCurrent: PropTypes.bool.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n}\n\nexport default memo(SlicesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport SlicesItem from './SlicesItem'\n\nconst Slices = ({ slices, axis, debug, height, tooltip, current, setCurrent }) => {\n    return slices.map(slice => (\n        <SlicesItem\n            key={slice.id}\n            slice={slice}\n            axis={axis}\n            debug={debug}\n            height={height}\n            tooltip={tooltip}\n            setCurrent={setCurrent}\n            isCurrent={current !== null && current.id === slice.id}\n        />\n    ))\n}\n\nSlices.propTypes = {\n    slices: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired,\n            points: PropTypes.arrayOf(PropTypes.object).isRequired,\n        })\n    ).isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    current: PropTypes.object,\n    setCurrent: PropTypes.func.isRequired,\n}\n\nexport default memo(Slices)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { getLabelGenerator, DotsItem, useTheme } from '@nivo/core'\n\nconst Points = ({ points, symbol, size, borderWidth, enableLabel, label, labelYOffset }) => {\n    const theme = useTheme()\n    const getLabel = getLabelGenerator(label)\n\n    /**\n     * We reverse the `points` array so that points from the lower lines in stacked lines\n     * graph are drawn on top. See https://github.com/plouc/nivo/issues/1051.\n     */\n    const mappedPoints = points.reverse().map(point => {\n        const mappedPoint = {\n            id: point.id,\n            x: point.x,\n            y: point.y,\n            datum: point.data,\n            fill: point.color,\n            stroke: point.borderColor,\n            label: enableLabel ? getLabel(point.data) : null,\n        }\n\n        return mappedPoint\n    })\n\n    return (\n        <g>\n            {mappedPoints.map(point => (\n                <DotsItem\n                    key={point.id}\n                    x={point.x}\n                    y={point.y}\n                    datum={point.datum}\n                    symbol={symbol}\n                    size={size}\n                    color={point.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    theme={theme}\n                />\n            ))}\n        </g>\n    )\n}\n\nPoints.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object),\n    symbol: PropTypes.func,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelYOffset: PropTypes.number,\n}\n\nexport default memo(Points)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\n\nconst Mesh = ({\n    points,\n    width,\n    height,\n    margin,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseEnter, margin]\n    )\n\n    const handleMouseMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseMove && onMouseMove(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point, event) => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (point, event) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n\nMesh.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object).isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    margin: PropTypes.object.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    debug: PropTypes.bool.isRequired,\n}\n\nexport default memo(Mesh)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { Fragment, useState } from 'react'\nimport {\n    bindDefs,\n    withContainer,\n    useDimensions,\n    useTheme,\n    SvgWrapper,\n    CartesianMarkers,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Crosshair } from '@nivo/tooltip'\nimport { useLine } from './hooks'\nimport { LinePropTypes, LineDefaultProps } from './props'\nimport Areas from './Areas'\nimport Lines from './Lines'\nimport Slices from './Slices'\nimport Points from './Points'\nimport Mesh from './Mesh'\n\nconst Line = props => {\n    const {\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        layers,\n        curve,\n        areaBaselineValue,\n\n        colors,\n\n        margin: partialMargin,\n        width,\n        height,\n\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        enableGridX,\n        enableGridY,\n        gridXValues,\n        gridYValues,\n\n        lineWidth,\n        enableArea,\n        areaOpacity,\n        areaBlendMode,\n\n        enablePoints,\n        pointSymbol,\n        pointSize,\n        pointColor,\n        pointBorderWidth,\n        pointBorderColor,\n        enablePointLabel,\n        pointLabel,\n        pointLabelYOffset,\n\n        defs,\n        fill,\n\n        markers,\n\n        legends,\n\n        isInteractive,\n\n        useMesh,\n        debugMesh,\n\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n\n        tooltip,\n\n        enableSlices,\n        debugSlices,\n        sliceTooltip,\n\n        enableCrosshair,\n        crosshairType,\n\n        role,\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n        enableSlices,\n    })\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const [currentPoint, setCurrentPoint] = useState(null)\n    const [currentSlice, setCurrentSlice] = useState(null)\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                theme={theme}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        ),\n        markers: (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n                theme={theme}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                theme={theme}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        areas: null,\n        lines: (\n            <Lines key=\"lines\" lines={series} lineGenerator={lineGenerator} lineWidth={lineWidth} />\n        ),\n        slices: null,\n        points: null,\n        crosshair: null,\n        mesh: null,\n        legends: legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={`legend.${i}`}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legend.data || legendData}\n                theme={theme}\n                toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n            />\n        )),\n    }\n\n    const boundDefs = bindDefs(defs, series, fill)\n\n    if (enableArea) {\n        layerById.areas = (\n            <Areas\n                key=\"areas\"\n                areaGenerator={areaGenerator}\n                areaOpacity={areaOpacity}\n                areaBlendMode={areaBlendMode}\n                lines={series}\n            />\n        )\n    }\n\n    if (isInteractive && enableSlices !== false) {\n        layerById.slices = (\n            <Slices\n                key=\"slices\"\n                slices={slices}\n                axis={enableSlices}\n                debug={debugSlices}\n                height={innerHeight}\n                tooltip={sliceTooltip}\n                current={currentSlice}\n                setCurrent={setCurrentSlice}\n            />\n        )\n    }\n\n    if (enablePoints) {\n        layerById.points = (\n            <Points\n                key=\"points\"\n                points={points}\n                symbol={pointSymbol}\n                size={pointSize}\n                color={getPointColor}\n                borderWidth={pointBorderWidth}\n                borderColor={getPointBorderColor}\n                enableLabel={enablePointLabel}\n                label={pointLabel}\n                labelYOffset={pointLabelYOffset}\n            />\n        )\n    }\n\n    if (isInteractive && enableCrosshair) {\n        if (currentPoint !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentPoint.x}\n                    y={currentPoint.y}\n                    type={crosshairType}\n                />\n            )\n        }\n        if (currentSlice !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentSlice.x}\n                    y={currentSlice.y}\n                    type={enableSlices}\n                />\n            )\n        }\n    }\n\n    if (isInteractive && useMesh && enableSlices === false) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                current={currentPoint}\n                setCurrent={setCurrentPoint}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                series,\n                                slices,\n                                points,\n                                xScale,\n                                yScale,\n                                lineGenerator,\n                                areaGenerator,\n                                currentPoint,\n                                setCurrentPoint,\n                                currentSlice,\n                                setCurrentSlice,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nLine.propTypes = LinePropTypes\nLine.defaultProps = LineDefaultProps\n\nexport default withContainer(Line)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Line from './Line'\n\nconst ResponsiveLine = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Line width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveLine\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, useRef, useEffect, useState, useCallback, forwardRef } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    getRelativeCursor,\n    isCursorInRect,\n} from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { LineCanvasPropTypes, LineCanvasDefaultProps } from './props'\nimport { useLine } from './hooks'\n\nconst LineCanvas = ({\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio,\n\n    data,\n    xScale: xScaleSpec,\n    xFormat,\n    yScale: yScaleSpec,\n    yFormat,\n    curve,\n\n    layers,\n\n    colors,\n    lineWidth,\n\n    enableArea,\n    areaBaselineValue,\n    areaOpacity,\n\n    enablePoints,\n    pointSize,\n    pointColor,\n    pointBorderWidth,\n    pointBorderColor,\n\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n\n    legends,\n\n    isInteractive,\n    debugMesh,\n    //onMouseEnter,\n    //onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n\n    canvasRef,\n}) => {\n    const canvasEl = useRef(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const theme = useTheme()\n    const [currentPoint, setCurrentPoint] = useState(null)\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n    })\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    useEffect(() => {\n        if (canvasRef) {\n            canvasRef.current = canvasEl.current\n        }\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (typeof layer === 'function') {\n                layer({\n                    ctx,\n                    innerWidth,\n                    innerHeight,\n                    series,\n                    points,\n                    xScale,\n                    yScale,\n                    lineWidth,\n                    lineGenerator,\n                    areaGenerator,\n                    currentPoint,\n                    setCurrentPoint,\n                })\n            }\n\n            if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'areas' && enableArea === true) {\n                ctx.save()\n                ctx.globalAlpha = areaOpacity\n\n                areaGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.fillStyle = serie.color\n                    ctx.beginPath()\n                    areaGenerator(serie.data.map(d => d.position))\n                    ctx.fill()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'lines') {\n                lineGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.strokeStyle = serie.color\n                    ctx.lineWidth = lineWidth\n                    ctx.beginPath()\n                    lineGenerator(serie.data.map(d => d.position))\n                    ctx.stroke()\n                })\n            }\n\n            if (layer === 'points' && enablePoints === true && pointSize > 0) {\n                points.forEach(point => {\n                    ctx.fillStyle = point.color\n                    ctx.beginPath()\n                    ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (pointBorderWidth > 0) {\n                        ctx.strokeStyle = point.borderColor\n                        ctx.lineWidth = pointBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh === true) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentPoint) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index)\n                }\n            }\n\n            if (layer === 'legends') {\n                const legendData = series\n                    .map(serie => ({\n                        id: serie.id,\n                        label: serie.id,\n                        color: serie.color,\n                    }))\n                    .reverse()\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legend.data || legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        lineGenerator,\n        series,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        points,\n        enablePoints,\n        pointSize,\n        currentPoint,\n    ])\n\n    const getPointFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const pointIndex = delaunay.find(x - margin.left, y - margin.top)\n            return points[pointIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const point = getPointFromMouseEvent(event)\n            setCurrentPoint(point)\n\n            if (point) {\n                showTooltipFromEvent(createElement(tooltip, { point }), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentPoint(null)\n            currentPoint && onMouseLeave && onMouseLeave(currentPoint, event)\n        },\n        [hideTooltip, setCurrentPoint, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const point = getPointFromMouseEvent(event)\n                point && onClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nLineCanvas.propTypes = LineCanvasPropTypes\nLineCanvas.defaultProps = LineCanvasDefaultProps\n\nconst LineCanvasWithContainer = withContainer(LineCanvas)\n\nexport default forwardRef((props, ref) => <LineCanvasWithContainer {...props} canvasRef={ref} />)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport LineCanvas from './LineCanvas'\n\nconst ResponsiveLineCanvas = (props, ref) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <LineCanvas width={width} height={height} {...props} ref={ref} />}\n    </ResponsiveWrapper>\n)\n\nexport default forwardRef(ResponsiveLineCanvas)\n"],"names":["x0","x1","y0","y1","defined","context","curve","output","area","data","i","j","k","d","buffer","n","length","defined0","x0z","Array","y0z","areaStart","lineStart","lineEnd","point","areaEnd","arealine","x","_","arguments","y","lineX0","lineY0","lineY1","lineX1","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","source","forEach","getOwnPropertyDescriptors","defineProperties","_arrayLikeToArray","arr","len","arr2","_unsupportedIterableToArray","o","minLen","arrayLikeToArray","prototype","toString","call","slice","constructor","name","from","test","_slicedToArray","isArray","arrayWithHoles","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","iterableToArrayLimit","unsupportedIterableToArray","TypeError","nonIterableRest","_toConsumableArray","arrayWithoutHoles","iter","iterableToArray","nonIterableSpread","LinePointTooltip","id","xFormatted","yFormatted","enableChip","color","serieColor","memo","SliceTooltip","axis","theme","useTheme","otherAxis","rows","style","chip","commonPropTypes","PropTypes","isRequired","xScale","xFormat","yScale","yFormat","layers","lineCurvePropType","axisTop","axisRight","axisBottom","axisLeft","enableGridX","enableGridY","gridXValues","gridYValues","enablePoints","pointSymbol","pointSize","pointColor","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","markers","colors","ordinalColorsPropType","enableArea","areaOpacity","areaBlendMode","blendModePropType","areaBaselineValue","lineWidth","legends","isInteractive","debugMesh","tooltip","enableSlices","debugSlices","sliceTooltip","enableCrosshair","crosshairType","commonDefaultProps","role","useMesh","pixelRatio","type","min","max","scheme","LineDefaultProps","animate","motionConfig","defs","fill","LineCanvasDefaultProps","window","useLine","xScaleSpec","yScaleSpec","width","height","enableSlicesTooltip","formatX","useValueFormatter","formatY","getColor","useOrdinalColorScale","getPointColor","useInheritedColor","getPointBorderColor","useState","hiddenIds","setHiddenIds","useMemo","computeXYScalesForSeries","item","rawSeries","dataWithColor","line","label","series","datum","serie","Boolean","legendData","hidden","toggleSerie","useCallback","state","points","index","acc","serieId","usePoints","slices","map","a","b","slicePoints","prevSlice","nextSlice","sliceWidth","sliceHeight","useSlices","lineGenerator","curveFromProp","useLineGenerator","areaGenerator","useAreaGenerator","AreaPath","path","useMotionConfig","springConfig","animatedPath","useAnimatedPath","animatedProps","useSpring","config","immediate","fillOpacity","strokeWidth","mixBlendMode","Areas","computedLines","lines","LinesItem","thickness","stroke","Lines","SlicesItem","debug","isCurrent","setCurrent","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","strokeOpacity","onMouseEnter","onMouseMove","onMouseLeave","Slices","current","Points","symbol","size","borderWidth","enableLabel","labelYOffset","getLabel","getLabelGenerator","mappedPoints","borderColor","Mesh","margin","onClick","showTooltipAt","handleClick","nodes","Line","props","partialMargin","pointLabelYOffset","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","currentPoint","setCurrentPoint","currentSlice","setCurrentSlice","layerById","grid","xValues","yValues","axes","top","right","bottom","left","areas","crosshair","mesh","containerWidth","containerHeight","legend","boundDefs","bindDefs","layer","withContainer","ResponsiveLine","LineCanvas","canvasRef","canvasEl","useRef","useVoronoiMesh","delaunay","voronoi","useEffect","ctx","renderGridLinesToCanvas","scale","values","renderAxesToCanvas","Math","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","getPointFromMouseEvent","getRelativeCursor","isCursorInRect","pointIndex","handleMouseHover","ref","cursor","LineCanvasWithContainer","forwardRef","ResponsiveLineCanvas"],"sourceRoot":""}