{"version":3,"file":"217e85b858a6e81dd8e85681457ed0a663cbfa2e-4e433883a4f8337e36fe.js","mappings":"oPAAO,IAAIA,EAAiB,IACjBC,EAAiB,IACjBC,EAAe,KACfC,EAAc,MACdC,EAAe,Q,mECJ1B,IAAIC,EAAK,IAAIC,KACTC,EAAK,IAAID,KACE,SAASE,EAAYC,EAAQC,EAASC,EAAOC,GAC1D,SAASC,EAASC,GAChB,OAAOL,EAAOK,EAA4B,IAArBC,UAAUC,OAAe,IAAIV,KAAS,IAAIA,MAAMQ,IAAQA,EAsE/E,OAnEAD,EAASI,MAAQ,SAAUH,GACzB,OAAOL,EAAOK,EAAO,IAAIR,MAAMQ,IAAQA,GAGzCD,EAASK,KAAO,SAAUJ,GACxB,OAAOL,EAAOK,EAAO,IAAIR,KAAKQ,EAAO,IAAKJ,EAAQI,EAAM,GAAIL,EAAOK,GAAOA,GAG5ED,EAASM,MAAQ,SAAUL,GACzB,IAAIM,EAAKP,EAASC,GACdO,EAAKR,EAASK,KAAKJ,GACvB,OAAOA,EAAOM,EAAKC,EAAKP,EAAOM,EAAKC,GAGtCR,EAASS,OAAS,SAAUR,EAAMS,GAChC,OAAOb,EAAQI,EAAO,IAAIR,MAAMQ,GAAe,MAARS,EAAe,EAAIC,KAAKP,MAAMM,IAAQT,GAG/ED,EAASY,MAAQ,SAAUC,EAAOC,EAAMJ,GACtC,IACIK,EADAH,EAAQ,GAIZ,GAFAC,EAAQb,EAASK,KAAKQ,GACtBH,EAAe,MAARA,EAAe,EAAIC,KAAKP,MAAMM,KAC/BG,EAAQC,GAAWJ,EAAO,GAAI,OAAOE,EAE3C,GACEA,EAAMI,KAAKD,EAAW,IAAItB,MAAMoB,IAAShB,EAAQgB,EAAOH,GAAOd,EAAOiB,SAC/DE,EAAWF,GAASA,EAAQC,GAErC,OAAOF,GAGTZ,EAASiB,OAAS,SAAUC,GAC1B,OAAOvB,GAAY,SAAUM,GAC3B,GAAIA,GAAQA,EAAM,KAAOL,EAAOK,IAAQiB,EAAKjB,IAC3CA,EAAKkB,QAAQlB,EAAO,MAErB,SAAUA,EAAMS,GACjB,GAAIT,GAAQA,EACV,GAAIS,EAAO,EAAG,OAASA,GAAQ,GAC7B,KAAOb,EAAQI,GAAO,IAAKiB,EAAKjB,UAE3B,OAASS,GAAQ,GACtB,KAAOb,EAAQI,EAAM,IAAMiB,EAAKjB,UAOpCH,IACFE,EAASF,MAAQ,SAAUe,EAAOO,GAGhC,OAFA5B,EAAG2B,SAASN,GAAQnB,EAAGyB,SAASC,GAChCxB,EAAOJ,GAAKI,EAAOF,GACZiB,KAAKP,MAAMN,EAAMN,EAAIE,KAG9BM,EAASqB,MAAQ,SAAUX,GAEzB,OADAA,EAAOC,KAAKP,MAAMM,GACVY,SAASZ,IAAWA,EAAO,EAAcA,EAAO,EAAgBV,EAASiB,OAAOlB,EAAQ,SAAUwB,GACxG,OAAOxB,EAAMwB,GAAKb,GAAS,GACzB,SAAUa,GACZ,OAAOvB,EAASF,MAAM,EAAGyB,GAAKb,GAAS,IAHoBV,EAArB,OAQrCA,I,uECzELwB,GAAQ,E,SAAA,IAAS,SAAUvB,GAC7BA,EAAKwB,QAAQ,GACbxB,EAAKyB,SAAS,EAAG,EAAG,EAAG,MACtB,SAAUzB,EAAMS,GACjBT,EAAK0B,SAAS1B,EAAK2B,WAAalB,MAC/B,SAAUG,EAAOO,GAClB,OAAOA,EAAIQ,WAAaf,EAAMe,WAAyD,IAA3CR,EAAIS,cAAgBhB,EAAMgB,kBACrE,SAAU5B,GACX,OAAOA,EAAK2B,cAEd,MACO,IAAIE,EAASN,EAAMZ,O,qQCT1B,SAASmB,EAAQC,GACf,OAAO,QAAS,SAAU/B,GACxBA,EAAKwB,QAAQxB,EAAKgC,WAAahC,EAAKiC,SAAW,EAAIF,GAAK,GACxD/B,EAAKyB,SAAS,EAAG,EAAG,EAAG,MACtB,SAAUzB,EAAMS,GACjBT,EAAKwB,QAAQxB,EAAKgC,UAAmB,EAAPvB,MAC7B,SAAUG,EAAOO,GAClB,OAAQA,EAAMP,GAASO,EAAIe,oBAAsBtB,EAAMsB,qBAAuB,MAAkB,QAI7F,IAAIC,EAASL,EAAQ,GACjBM,EAASN,EAAQ,GACjBO,EAAUP,EAAQ,GAClBQ,EAAYR,EAAQ,GACpBS,EAAWT,EAAQ,GACnBU,EAASV,EAAQ,GACjBW,EAAWX,EAAQ,GACnBY,EAAUP,EAAOxB,MACPyB,EAAOzB,MACN0B,EAAQ1B,MACN2B,EAAU3B,MACX4B,EAAS5B,MACX6B,EAAO7B,MACL8B,EAAS9B,O,kDC1B5BgC,GAAO,QAAS,SAAU3C,GAC5BA,EAAK0B,SAAS,EAAG,GACjB1B,EAAKyB,SAAS,EAAG,EAAG,EAAG,MACtB,SAAUzB,EAAMS,GACjBT,EAAK4C,YAAY5C,EAAK4B,cAAgBnB,MACrC,SAAUG,EAAOO,GAClB,OAAOA,EAAIS,cAAgBhB,EAAMgB,iBAChC,SAAU5B,GACX,OAAOA,EAAK4B,iBAGde,EAAKvB,MAAQ,SAAUyB,GACrB,OAAQxB,SAASwB,EAAInC,KAAKP,MAAM0C,KAASA,EAAI,GAAY,QAAS,SAAU7C,GAC1EA,EAAK4C,YAAYlC,KAAKP,MAAMH,EAAK4B,cAAgBiB,GAAKA,GACtD7C,EAAK0B,SAAS,EAAG,GACjB1B,EAAKyB,SAAS,EAAG,EAAG,EAAG,MACtB,SAAUzB,EAAMS,GACjBT,EAAK4C,YAAY5C,EAAK4B,cAAgBnB,EAAOoC,MALG,MASpD,MACmBF,EAAKhC,O,iFCnBlBmC,EAAiBC,EAAAA,QAAAA,IAAAA,WAAH,kEAAGA,CAAH,sHAQdC,EAAaD,EAAAA,QAAAA,KAAAA,WAAH,8DAAGA,CAAH,sBAIVE,EAAgB,SAAAC,GAClB,OACI,UAACJ,EAAD,CAAgBK,MAAO,CAAEC,MAAOF,EAAIE,OAApC,WACI,SAACJ,EAAD,mBACA,0BAAOE,EAAIA,OACX,SAACF,EAAD,qBACA,0BAAOE,EAAIG,SACX,SAACL,EAAD,iBACA,0BAAOE,EAAII,KACX,SAACN,EAAD,iBACA,0BAAOE,EAAIK,KACX,SAACP,EAAD,oBACA,0BAAOE,EAAIM,WAKvB,KAAeC,EAAAA,EAAAA,IACX,CACIC,QAAS,SAACL,EAAOM,GACb,GAAKA,EAAO,0BAEZ,OAAOV,IAGf,CACIW,QAAS,CAAC,6B,uGCrCZC,EAAuB,CAAC,MAAO,SAAU,OAEzCC,EAAsB,CACxB,CACIC,IAAK,OACLC,MAAO,OACPC,KAAM,cACNC,YAAY,qWAWZC,KAAM,WACNC,UAAU,EACVC,QAASR,GAEb,CACIE,IAAK,OACLC,MAAO,OACPC,KAAM,aACNE,KAAM,gBACNC,UAAU,EACVC,QAASR,GAEb,CACIE,IAAK,KACLC,MAAO,OACPC,KAAM,WACNE,KAAM,gBACNC,UAAU,EACVC,QAASR,IAlCW,QAoCrBS,EAAAA,EAAAA,IAAgBT,GApCK,CAqCxB,CACIE,IAAK,YACLE,KAAM,qCACNE,KAAM,SACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,UACdH,QAAS,CAAC,MAAO,SAAU,OAC3BL,MAAO,OACPS,QAAS,CACLN,KAAM,QACNO,QAAS,CACL,CAAEC,MAAO,aAActB,MAAO,cAC9B,CAAEsB,MAAO,WAAYtB,MAAO,eAIxC,CACIU,IAAK,QACLE,KAAM,iEACNE,KAAM,SACNC,UAAU,EACVC,QAAS,CAAC,MAAO,SAAU,OAC3BE,aAAcC,EAAAA,GAAAA,MACdR,MAAO,OACPS,QAAS,CACLN,KAAM,cAGd,CACIJ,IAAK,WACLE,KAAM,iBACNC,YAAY,iOAMZE,UAAU,EACVC,QAAS,CAAC,MAAO,SAAU,OAC3BE,aAAcC,EAAAA,GAAAA,SACdL,KAAK,kBACLH,MAAO,OACPS,QAAS,CACLN,KAAM,kBACNS,cAAe,OACfL,aAAc,EACdM,KAAM,IACNC,IAAK,MAGb,CACIf,IAAK,WACLE,KAAM,iBACNC,YAAY,mOAMZE,UAAU,EACVC,QAAS,CAAC,MAAO,SAAU,OAC3BE,aAAcC,EAAAA,GAAAA,SACdL,KAAK,kBACLH,MAAO,OACPS,QAAS,CACLN,KAAM,kBACNS,cAAe,OACfL,aAAc,IACdM,IAAK,EACLC,IAAK,OAGbC,EAAAA,EAAAA,IAAc,CAAC,MAAO,SAAU,QAChC,CACIhB,IAAK,SACLC,MAAO,QACPC,KAAM,eACNC,YAAY,qOAMZC,KAAM,WACNC,UAAU,EACVC,QAAS,CAAC,MAAO,SAAU,OAC3BE,aAAcC,EAAAA,GAAAA,QAElB,CACIT,IAAK,aACLE,KAAM,qDACNE,KAAM,SACNC,UAAU,EACVC,QAAS,CAAC,MAAO,SAAU,OAC3BE,aAAcC,EAAAA,GAAAA,WACdC,QAAS,CAAEN,KAAM,eACjBH,MAAO,SAGX,CACID,IAAK,cACLE,KAAM,0EACNE,KAAM,SACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,YACdH,QAAS,CAAC,MAAO,SAAU,OAC3BL,MAAO,QACPS,QAAS,CACLN,KAAM,QACNa,KAAM,KACNH,IAAK,EACLC,IAAK,IACLrE,KAAM,IAGd,CACIsD,IAAK,aACLC,MAAO,QACPC,KAAK,mEACLE,KAAM,oCACNC,UAAU,EACVC,QAAS,CAAC,MAAO,SAAU,QAE/B,CACIN,IAAK,qBACLE,KAAM,iCACNE,KAAK,qBACLC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,mBACdH,QAAS,CAAC,MAAO,SAAU,OAC3BL,MAAO,QACPS,QAAS,CACLN,KAAM,QACNO,QAAS,CACL,CAAEC,MAAO,SAAUtB,MAAO,UAC1B,CAAEsB,MAAO,QAAStB,MAAO,YAIrC,CACIU,IAAK,mBACLE,KAAM,6CACNE,KAAM,SACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,iBACdH,QAAS,CAAC,MAAO,SAAU,OAC3BL,MAAO,QACPS,QAAS,CACLN,KAAM,QACNa,KAAM,KACNH,IAAK,EACLC,IAAK,KAIb,CACIf,IAAK,eACLE,KAAM,2EACNE,KAAM,SACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,aACdH,QAAS,CAAC,MAAO,SAAU,OAC3BL,MAAO,SACPS,QAAS,CACLN,KAAM,QACNa,KAAM,KACNH,IAAK,EACLC,IAAK,IACLrE,KAAM,IAGd,CACIsD,IAAK,mBACLM,QAAS,CAAC,MAAO,OACjBJ,KAAM,0BACNE,KAAM,SACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,iBACdC,QAAS,CAAEN,KAAM,aACjBH,MAAO,UAEX,CACID,IAAK,mBACLM,QAAS,CAAC,MAAO,OACjBJ,KAAM,kCACNE,KAAM,SACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,iBACdC,QAAS,CAAEN,KAAM,eACjBH,MAAO,UAEX,CACID,IAAK,cACLE,KAAK,2IACLE,KAAM,+DACNC,UAAU,EACVJ,MAAO,SACPK,QAAS,CAAC,MAAO,SAAU,QAE/B,CACIN,IAAK,sBACLE,KAAM,kCACNE,KAAK,qBACLC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,oBACdH,QAAS,CAAC,MAAO,SAAU,OAC3BL,MAAO,SACPS,QAAS,CACLN,KAAM,QACNO,QAAS,CACL,CAAEC,MAAO,SAAUtB,MAAO,UAC1B,CAAEsB,MAAO,QAAStB,MAAO,YAIrC,CACIU,IAAK,oBACLE,KAAM,8CACNE,KAAM,SACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,kBACdH,QAAS,CAAC,MAAO,SAAU,OAC3BL,MAAO,SACPS,QAAS,CACLN,KAAM,QACNa,KAAM,KACNH,IAAK,EACLC,IAAK,KAIb,CACIf,IAAK,aACLE,KAAM,wCACNE,KAAM,SACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,WACdH,QAAS,CAAC,MAAO,SAAU,OAC3BL,MAAO,OACPS,QAAS,CACLN,KAAM,QACNa,KAAM,KACNH,IAAK,EACLC,IAAK,KAGb,CACIf,IAAK,iBACLE,KAAM,wBACNE,KAAM,SACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,eACdH,QAAS,CAAC,MAAO,SAAU,OAC3BI,QAAS,CAAEN,KAAM,aACjBH,MAAO,QAEX,CACID,IAAK,iBACLE,KAAM,gCACNE,KAAM,SACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,eACdH,QAAS,CAAC,MAAO,SAAU,OAC3BI,QAAS,CAAEN,KAAM,eACjBH,MAAO,SAEXiB,EAAAA,EAAAA,IAAc,CACVZ,QAAS,CAAC,MAAO,UACjBE,aAAcC,EAAAA,GAAAA,gBAElB,CACIT,IAAK,UACLM,QAAS,CAAC,MAAO,UACjBL,MAAO,gBACPC,KAAM,iEACNE,KAAM,uBACNC,UAAU,GAEd,CACIL,IAAK,UACLM,QAAS,CAAC,MAAO,UACjBL,MAAO,gBACPG,KAAM,WACNC,UAAU,EACVH,KAAM,4BACNC,YAAY,yiBAkBhB,CACIH,IAAK,yBACLM,QAAS,CAAC,MAAO,UACjBJ,KAAM,2BACNE,KAAM,UACNC,UAAU,EACVK,QAAS,CAAEN,KAAM,UACjBH,MAAO,mBAIFkB,GAASC,EAAAA,EAAAA,IAAgBrB,I,kSC7UH,oNCvBtBsB,EAWT,CACAlF,OAAQ,IACRmF,UAAW,GACXC,UAAW,MACXC,aAAc,QACdC,SAAU,EACVC,YAAa,EACbC,aAAAA,EACAC,WAAY,SAACtC,GAAAA,MAAAA,GAAqBA,GAClCuC,WAAY,QACZC,YAAa,GCTXC,EAAc,CAChBC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,GAGGC,EAAoB,SAAC,GAAD,IAVZC,EAWjBd,EAAAA,EAAAA,UACAe,EAAAA,EAAAA,aACSC,EAAAA,EAATC,QACAC,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,WAAAA,GAGwB,iBAAbJ,IAlBK,iBADCF,EAmB6BE,IAlBjBK,MAAMC,QAAQR,IAAkB,OAATA,GAAAA,MAmB1C,IAAIS,MAAM,gEAGdN,EACkB,iBAAbD,EACD,CACIP,IAAKO,EACLN,MAAOM,EACPL,OAAQK,EACRJ,KAAMI,GAAAA,EAAAA,GAGHR,EACAQ,GAGXQ,EAAoBP,EAAQL,KAAOK,EAAQP,MAC3Ce,EAAkBR,EAAQR,IAAMQ,EAAQN,OAC1Ce,EAAQP,EAAYK,EACpBG,EAASP,EAAaK,EACpBG,GAAWV,EAAY,GAAKH,EAAAA,MAChB,QAAdf,EACA0B,EAAQP,EAAYD,EAAYU,EAAUJ,EACrB,WAAdxB,IACP2B,EAASP,EAAaF,EAAYU,EAAUH,GAGzC,CAAEC,MAAAA,EAAOC,OAAAA,EAAQV,QAAAA,IAGfY,EAA4B,SAAC,GAAD,IACrCC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBACAR,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OAKI3D,EAAI+D,EACJ9D,EAAI+D,EAAAA,OAEAF,GAAAA,IACC,MACD9D,IAAMiE,EAAiBP,GAAS,YAG/B,YACD1D,GAAKiE,EAAiBP,EAAAA,MAAAA,IAGrB,QACD1D,GAAKiE,EAAiBP,EACtBzD,IAAMiE,EAAkBP,GAAU,YAGjC,eACD3D,GAAKiE,EAAiBP,EACtBzD,GAAKiE,EAAkBP,EAAAA,MAAAA,IAGtB,SACD3D,IAAMiE,EAAiBP,GAAS,EAChCzD,GAAKiE,EAAkBP,EAAAA,MAAAA,IAGtB,cACD1D,GAAKiE,EAAkBP,EAAAA,MAAAA,IAGtB,OACD1D,IAAMiE,EAAkBP,GAAU,YAGjC,SACD3D,IAAMiE,EAAiBP,GAAS,EAChCzD,IAAMiE,EAAkBP,GAAU,QAInC,CAAE3D,EAAAA,EAAGC,EAAAA,IAGHkE,EAAoB,SAAC,GAAD,IAWzBC,EACAC,EAEAC,EACAC,EACAC,EACAC,EAhBJzC,EAAAA,EAAAA,UACA0C,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,cACAlB,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OAAAA,OAaQ3B,GAAAA,IACC,gBACDoC,EAAU,EACVC,GAAWV,EAASgB,GAAc,EAElCJ,EAASZ,EAAS,EAClBc,EAAiB,UACbC,GACAJ,EAASZ,EACTc,EAAc,QAEdF,EAASK,EAAaC,EACtBJ,EAAc,mBAIjB,gBACDJ,EAAUV,EAAQiB,EAClBN,GAAWV,EAASgB,GAAc,EAElCJ,EAASZ,EAAS,EAClBc,EAAiB,UACbC,GACAJ,EAAS,EACTE,EAAc,UAEdF,EAASZ,EAAQiB,EAAaC,EAC9BJ,EAAc,iBAIjB,gBACDJ,GAAWV,EAAQiB,GAAc,EACjCN,EAAU,EAEVC,EAASZ,EAAQ,EAEjBc,EAAc,SACVE,GACAH,EAASZ,EACTc,EAAiB,eAEjBF,EAASI,EAAaC,EACtBH,EAAiB,8BAIpB,gBACDL,GAAWV,EAAQiB,GAAc,EACjCN,EAAUV,EAASgB,EAEnBL,EAASZ,EAAQ,EACjBc,EAAc,SACVE,GACAH,EAAS,EACTE,EAAiB,qBAEjBF,EAASZ,EAASgB,EAAaC,EAC/BH,EAAiB,oBAKtB,CACHL,QAAAA,EACAC,QAAAA,EACAC,OAAAA,EACAC,OAAAA,EACAC,YAAAA,EACAC,eAAAA,IAIKI,EAAgC,gBA2BrCxE,EA1BJyE,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,MAAAA,EAAAA,EACAnI,OAAAA,OAAAA,IAAAA,EAASkF,EAA+BlF,OAAAA,EAAAA,EAAAA,EACxCmF,UAAAA,OAAAA,IAAAA,EAAYD,EAA+BC,UAAAA,EAAAA,EAAAA,EAC3CC,UAAAA,OAAAA,IAAAA,EAAYF,EAA+BE,UAAAA,EAAAA,EAAAA,EAC3CC,aAAAA,OAAAA,IAAAA,EAAeH,EAA+BG,aAAAA,EAAAA,EAAAA,EAC9CC,SAAAA,OAAAA,IAAAA,EAAWJ,EAA+BI,SAAAA,EAAAA,EAAAA,EAC1CC,YAAAA,OAAAA,IAAAA,EAAcL,EAA+BK,YAAAA,EAAAA,EAAAA,EAC7CC,YAAAA,OAAAA,IAAAA,EAAcN,EAA+BM,YAAAA,EAAAA,EAAAA,EAC7CC,WAAAA,OAAAA,IAAAA,EAAaP,EAA+BO,WAAAA,EAC5C2C,EAAAA,EAAAA,MAAAA,EAAAA,EACA1C,WAAAA,OAAAA,IAAAA,EAAaR,EAA+BQ,WAAAA,EAAAA,EAAAA,EAC5CC,YAAAA,OAAAA,IAAAA,EAAcT,EAA+BS,YAAAA,EAGvC0C,EAAuB,WAAdjD,EAAyB,UAAI8C,EAAMG,UAAUC,UAAYJ,EAAMG,SAExEE,GAAgBC,EAAAA,EAAAA,KAAcH,OAAOA,GACrB,IAAlBA,EAAOrI,OAEPuI,EAAc9H,MAAM,CAAC,EAAGT,IACC,IAAlBqI,EAAOrI,QAEduI,EAAc9H,MAAM,CAAC,EAAGT,EAAS,EAAGA,IAMpCyD,EAFA,eAAgByE,EAAAA,CAENG,EAAO,WAAOH,EAAMO,aAAAA,CAAcJ,EAAO,KAG1C5B,MAAMC,QAAQyB,GAASA,EAASD,EAAcC,MAAMA,GAAAA,IAmB7DrB,EACAC,EAOA2B,EACAC,EACAC,EACAC,EAQIC,EACAC,EAEAC,EAEAC,EAoDAC,EACAC,EAEAC,EACAC,EAhGFC,GAAaC,EAAAA,EAAAA,IAAsCrB,EAAO,IAE1DsB,GAAcC,EAAAA,EAAAA,IAAkBhE,GAEhCiE,EAUA,GAMFC,EAAa,EACbC,EAAa,EAQC,QAAdxE,GACA0B,EAAQ9G,EACR+G,EAAS5B,EAETyE,EAAa,EASbhB,EAAgB,EAEZF,EADe,UAAfhD,EACS,EACa,WAAfA,EACE1F,EAAS,EAETA,EAGQ,WAAjBqF,GACAyD,GAAMxD,EACNyD,EAAKvD,EAAcL,EAAY,EAE/B6D,GAAS1D,EAAWC,EACpB0D,EAAoB,aAEpBN,EAASxD,EAAYQ,EACrBkD,EAAqB,YAErBC,EAAKtD,EAAc,EAAIL,EAGvB6D,GAFAD,EAAK5D,EAAYG,GAEJC,EACb0D,EAAoB,UAEpBN,GAAUhD,EACVkD,EAAqB,cAGzBpF,EAAOoG,SAAQ,gBACLzG,EAAImF,EAAcpF,GAExBuG,EAAc7I,KAAK,CACfqI,GAAI9F,EACJ0F,GAAAA,EACAK,GAAI/F,EACJ2F,GAAAA,EACAe,KAAMN,EAAYrG,GAClBiG,MAAOhG,EACP4F,MAAAA,EACAK,oBA3CoB,SA4CpBJ,kBAAAA,SAIRnC,EAAQ3B,EACR4B,EAAS/G,EAET2J,EAAa,EASbf,GAAiB,GAEbD,EADe,UAAfjD,EACS1F,EACa,WAAf0F,EACE1F,EAAS,EAET,EAGQ,WAAjBqF,GAEA8D,EAAK3D,EAAcL,EAAY,EAE/BiE,GAHAF,GAAM5D,GAGOC,EACb8D,EAAsB,MAEtBX,EAASvD,EAAYQ,EACrBkD,EAAqB,YAErBK,EAAK1D,EAAc,EAAIL,EAGvBiE,GAFAD,EAAKhE,EAAYG,GAEJC,EACb8D,EAAsB,QAEtBX,GAAU/C,EACVkD,EAAqB,cAGzBpF,EAAOoG,SAAQ,gBACLxG,EAAIkF,EAAcpF,GAExBuG,EAAc7I,KAAK,CACfqI,GAAAA,EACAJ,GAAIzF,EACJ8F,GAAAA,EACAJ,GAAI1F,EACJyG,KAAMN,EAAYrG,GAClBiG,MAAAA,EACAJ,MAAO3F,EACPgG,oBAAAA,EACAJ,kBA3CkB,sBAgDvB,CACHnC,MAAAA,EACAC,OAAAA,EACAgD,WAjIe,EAkIfJ,WAAAA,EACAC,WAAAA,EACAI,WAjIe,EAkIfV,WAAAA,EACAnB,MAAOuB,EACPO,UAAW7B,EACXM,OAAAA,EACAC,OAAAA,EACAC,cAAAA,EACAsB,qBAAsBxE,EACtBmD,mBAAAA,IC9YKsB,EAA4B,gBACrCjC,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,MAAAA,EAAAA,EACAnI,OAAAA,OAAAA,IAAAA,EAASkF,EAA+BlF,OAAAA,EAAAA,EAAAA,EACxCmF,UAAAA,OAAAA,IAAAA,EAAYD,EAA+BC,UAAAA,EAAAA,EAAAA,EAC3CC,UAAAA,OAAAA,IAAAA,EAAYF,EAA+BE,UAAAA,EAAAA,EAAAA,EAC3CC,aAAAA,OAAAA,IAAAA,EAAeH,EAA+BG,aAAAA,EAAAA,EAAAA,EAC9CC,SAAAA,OAAAA,IAAAA,EAAWJ,EAA+BI,SAAAA,EAAAA,EAAAA,EAC1CC,YAAAA,OAAAA,IAAAA,EAAcL,EAA+BK,YAAAA,EAAAA,EAAAA,EAC7CC,YAAAA,OAAAA,IAAAA,EAAcN,EAA+BM,YAAAA,EAAAA,EAAAA,EAC7CC,WAAAA,OAAAA,IAAAA,EAAaP,EAA+BO,WAAAA,EAC5C2C,EAAAA,EAAAA,MAAAA,EAAAA,EACA1C,WAAAA,OAAAA,IAAAA,EAAaR,EAA+BQ,WAAAA,EAAAA,EAAAA,EAC5CC,YAAAA,EAiBIsC,EAA8B,CAC9BC,MAAAA,EACAC,MAAAA,EACAnI,OAAAA,EACAmF,UAAAA,EACAC,UAAAA,EACAC,aAAAA,EACAC,SAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,WAAAA,EACA2C,MAAAA,EACA1C,WAAAA,EACAC,iBAAAA,IAAAA,EA9BUT,EAA+BS,YAAAA,IAGzCmB,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OACAgD,EAAAA,EAAAA,WACAJ,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,WACAI,EAAAA,EAAAA,WACON,EAAAA,EAAPvB,MACAmB,EAAAA,EAAAA,WACAW,EAAAA,EAAAA,UACAvB,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,cACAC,EAAAA,EAAAA,mBACAqB,EAAAA,EAAAA,qBAiBEE,GAAQC,EAAAA,EAAAA,MAERC,EAAAA,qCAA0ClF,EAAAA,IAAakE,EACxDiB,KAAI,mBAAQ5J,EAAKL,UACjBkK,KAAK,YAGNC,EAAAA,EAAAA,MAAAA,IAAAA,CAAAA,SAAAA,EACIC,EAAAA,EAAAA,KAAAA,OAAAA,CAAAA,UACIA,EAAAA,EAAAA,KAAAA,iBAAAA,CACIJ,GAAIA,EACJpB,GAAIa,EACJjB,GAAIa,EACJR,GAAIS,EACJb,GAAIiB,EAAAA,SAEHV,EAAWiB,KAAI,mBACZG,EAAAA,EAAAA,KAAAA,OAAAA,EAAAA,GAAUC,WAIrBV,IACGS,EAAAA,EAAAA,KAAAA,OAAAA,CACIE,UAAAA,aAAwBlC,EAAAA,KAAWC,EAAAA,YAAkBC,EAAAA,IACrDiC,WAAYX,EACZY,iBAAkBjC,EAClB5F,MAAOmH,EAAMW,QAAQ3C,MAAM0B,KAAAA,SAE1BG,KAGTS,EAAAA,EAAAA,KAAAA,OAAAA,CAAM5D,MAAOA,EAAOC,OAAQA,EAAQiE,KAAAA,QAAcV,IACjDZ,EAAca,KAAI,SAACU,EAAMC,GAAAA,OACtBT,EAAAA,EAAAA,MAACU,EAAAA,SAAAA,CAAAA,SAAAA,EACGT,EAAAA,EAAAA,KAAAA,OAAAA,CACIxB,GAAI+B,EAAK/B,GACTJ,GAAImC,EAAKnC,GACTK,GAAI8B,EAAK9B,GACTJ,GAAIkC,EAAKlC,GACT9F,MAAOmH,EAAMW,QAAQ5C,MAAMiD,QAE/BV,EAAAA,EAAAA,KAAAA,OAAAA,CACItH,EAAG6H,EAAK7B,MACR/F,EAAG4H,EAAKjC,MACR6B,WAAYI,EAAK5B,oBACjByB,iBAAkBG,EAAKhC,kBACvBhG,MAAOmH,EAAMW,QAAQ5C,MAAM2B,KAAAA,SAE1BmB,EAAKnB,SAfCoB,UAAAA,EAAAA,CAAAA,iBAAAA,kBAAAA,SAAAA,aAAAA,aAAAA,SAAAA,YAAAA,aChFlBG,EAAoC,SAAC,GAAD,IAWzCvE,EACAC,EAXJM,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBACAJ,EAAAA,EAAAA,OAAAA,EAAAA,EACAC,WAAAA,OAAAA,IAAAA,EAAa,QACbC,WAAAA,OAAAA,IAAAA,EAAa,QACbpH,OAAAA,OAAAA,IAAAA,EAASkF,EAA+BlF,OAAAA,EAAAA,EAAAA,EACxCmF,UAAAA,OAAAA,IAAAA,EAAYD,EAA+BC,UAAAA,EAAAA,EAAAA,EAC3CC,UAAAA,OAAAA,IAAAA,EAAYF,EAA+BE,UAAAA,EACxCkG,EAAAA,SAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAAAA,MAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,OAAAA,KAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,QAAAA,IAAAA,IAAAA,EAAAA,GAAAA,EAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAIe,QAAdlG,GACA0B,EAAQ9G,EACR+G,EAAS5B,IAET2B,EAAQ3B,EACR4B,EAAS/G,GAAAA,IAAAA,EAGIiH,EAA0B,CACvCC,OAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAR,MAAAA,EACAC,OAAAA,IAPI3D,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAAAA,OAWPqH,EAAAA,EAAAA,KAAAA,IAAAA,CAAGE,UAAAA,aAAwBxH,EAAAA,KAAMC,EAAAA,IAAAA,UAC7BqH,EAAAA,EAAAA,KAACP,EAAAA,EAAAA,CACGnK,OAAQA,EACRmF,UAAWA,EACXC,UAAWA,GACPkG,OC1BdC,EAAgB,CAClBC,OCfwB,SAAC,GAAD,IACxBpI,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,KACA0H,EAAAA,EAAAA,KAAAA,EAAAA,EACAS,QAAAA,OAAAA,IAAAA,EAAU,QACVC,YAAAA,OAAAA,IAAAA,EAAc,QACdC,YAAAA,OAGIjB,EAAAA,EAAAA,KAAAA,SAAAA,CACIkB,EAAGtI,EAAO,EACVuI,GAAIzI,EAAIE,EAAO,EACfwI,GAAIzI,EAAIC,EAAO,EACf0H,KAAMA,EACNS,QAASA,EACTM,YAAaL,EACbM,YAAAA,IAAAA,EAVM,gBAWN/I,MAAO,CACHgJ,cAAe,WDH3BC,QEhByB,SAAC,GAAD,IACzB9I,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,KACA0H,EAAAA,EAAAA,KAAAA,EAAAA,EACAS,QAAAA,OAAAA,IAAAA,EAAU,QACVC,YAAAA,OAAAA,IAAAA,EAAc,QACdC,YAAAA,OAGIjB,EAAAA,EAAAA,KAAAA,IAAAA,CAAGE,UAAAA,aAAwBxH,EAAAA,IAAKC,EAAAA,IAAAA,UAC5BqH,EAAAA,EAAAA,KAAAA,OAAAA,CACItJ,EAAAA,0BACOkC,EAAO,8BACA,GAAPA,EAAAA,IAAcA,EAAO,4BACrBA,EAAO,MAAKA,EAAAA,0BACL,GAAPA,EAAAA,IAAcA,EAAO,4BACrBA,EAAO,yBAEd0H,KAAMA,EACNS,QAASA,EACTM,YAAaL,EACbM,YAAAA,IAAAA,EAfE,gBAgBF/I,MAAO,CACHgJ,cAAe,aFP/BE,OGjBwB,SAAC,GAAD,IACxB/I,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,KACA0H,EAAAA,EAAAA,KAAAA,EAAAA,EACAS,QAAAA,OAAAA,IAAAA,EAAU,QACVC,YAAAA,OAAAA,IAAAA,EAAc,QACdC,YAAAA,OAGIjB,EAAAA,EAAAA,KAAAA,OAAAA,CACItH,EAAGA,EACHC,EAAGA,EACH2H,KAAMA,EACNS,QAASA,EACTM,YAAaL,EACbM,YAAAA,IAAAA,EATM,gBAUNlF,MAAOxD,EACPyD,OAAQzD,EACRL,MAAO,CACHgJ,cAAe,WHF3BG,SLlB0B,SAAC,GAAD,IAC1BhJ,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,KACA0H,EAAAA,EAAAA,KAAAA,EAAAA,EACAS,QAAAA,OAAAA,IAAAA,EAAU,QACVC,YAAAA,OAAAA,IAAAA,EAAc,QACdC,YAAAA,OAGIjB,EAAAA,EAAAA,KAAAA,IAAAA,CAAGE,UAAAA,aAAwBxH,EAAAA,IAAKC,EAAAA,IAAAA,UAC5BqH,EAAAA,EAAAA,KAAAA,OAAAA,CACItJ,EAAAA,sBACGkC,EAAO,0BACPA,EAAAA,IAAQA,EAAAA,wBACNA,EAAAA,sBACFA,EAAO,qBAEV0H,KAAMA,EACNS,QAASA,EACTM,YAAaL,EACbM,YAAAA,IAAAA,EAdE,gBAeF/I,MAAO,CACHgJ,cAAe,cKFtBI,EAAgB,sCACzBjJ,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAyD,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OACAuF,EAAAA,EAAAA,KAAAA,EAAAA,EACAlH,UAAAA,OAAAA,IAAAA,EAAY,sBACZ0C,QAAAA,OAAAA,IAAAA,GAAAA,EACAyE,EAAAA,EAAAA,UAAAA,EAAAA,EACAC,WAAAA,OAAAA,IAAAA,EAAa,oBACbf,QAAAA,OAAAA,IAAAA,EAAU,QAEVgB,YAAAA,OAAAA,IAAAA,EAAc,eACd1E,WAAAA,OAAAA,IAAAA,EAAa,SACbC,cAAAA,OAAAA,IAAAA,EAAgB,QAChB0E,kBAAAA,OAAAA,IAAAA,EAAoB,QACpBC,kBAAAA,OAAAA,IAAAA,EAAoB,gBAEpBC,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,YAEAC,EAAAA,EAAAA,QAAAA,GAE0BC,EAAAA,EAAAA,UAAgB,IAAnChK,EAAAA,EAAAA,GAAOiK,EAAAA,EAAAA,GACR9C,GAAQC,EAAAA,EAAAA,MAER8C,GAAmBC,EAAAA,EAAAA,cACrB,SAACC,GAAAA,GACOL,EAAS,CAAC,IAEJ/J,EADe+J,EAAQlM,QAAO,kBAAmB,YAAhBwM,MACZC,QACvB,SAACC,EAAKC,GAAAA,OAAAA,EAAAA,GACCD,EACAC,EAAOxK,SAEd,IAEJiK,EAASjK,GAAAA,MAGb4J,GAAAA,EAAeP,EAAMe,KAEzB,CAACR,EAAcP,EAAMU,IAEnBU,GAAmBN,EAAAA,EAAAA,cACrB,SAACC,GAAAA,GACOL,EAAS,CAAC,IAEJ/J,EADe+J,EAAQlM,QAAO,kBAAmB,YAAhBwM,MACZC,QACvB,SAACC,EAAKC,GAAAA,OAAAA,EAAAA,GACCD,EACAC,EAAOxK,SAEd,IAEJiK,EAASjK,GAAAA,MAGb6J,GAAAA,EAAeR,EAAMe,KAEzB,CAACP,EAAcR,EAAMU,IAAAA,EAGiDzF,EAAkB,CACxFnC,UAAAA,EACA0C,QAAAA,EACAC,WAAAA,OAAAA,EAAY9E,EAAM8E,YAAAA,EAAcA,EAChCC,cAAAA,EACAlB,MAAAA,EACAC,OAAAA,IANIS,GAAAA,EAAAA,QAASC,GAAAA,EAAAA,QAASC,GAAAA,EAAAA,OAAQC,GAAAA,EAAAA,OAAQC,GAAAA,EAAAA,YAAaC,GAAAA,EAAAA,eASjD9C,GAAgB,CAAC6H,EAASC,EAAcC,EAAcC,GAAaY,MACrE,4BAAWC,KAGTC,GAAqC,mBAAhBpB,EAA6BA,EAAclB,EAAckB,GAAAA,OAGhFhC,EAAAA,EAAAA,MAAAA,IAAAA,CACIG,UAAAA,aAAwBxH,EAAAA,IAAKC,EAAAA,IAC7BJ,MAAO,CACHwI,QAAAA,OAAAA,EAASxI,EAAM6K,aAAAA,EAAerC,GAAAA,SAAAA,EAGlCf,EAAAA,EAAAA,KAAAA,OAAAA,CACI5D,MAAOA,EACPC,OAAQA,EACRiE,KAAAA,OAAAA,EAAM/H,EAAM8K,gBAAAA,EAAkBvB,EAC9BvJ,MAAO,CACH+K,OAAQjJ,GAAgB,UAAY,QAExC6H,QAAS,kBACLA,GAAAA,EAAUN,EAAMe,GAAAA,MAChBN,GAAAA,EAAcT,EAAKhC,KAEvBuC,aAAcM,EACdL,aAAcY,IAEjBO,EAAAA,cAAoBJ,GAAAA,EAAAA,CACjBvD,GAAIgC,EAAKhC,GACTlH,EAAGoE,GACHnE,EAAGoE,GACHnE,KAAAA,OAAAA,EAAML,EAAM8E,YAAAA,EAAcA,EAC1BiD,KAAAA,OAAAA,EAAAA,OAAAA,EAAMsB,EAAKtB,MAAAA,EAAQsB,EAAKpJ,OAAAA,EAAS,QACjCwI,YAAAA,OAAAA,EAAazI,EAAMyJ,mBAAAA,EAAqBA,EACxCf,YAAAA,OAAAA,EAAa1I,EAAM0J,mBAAAA,EAAqBA,GACpCL,EAAK4B,OAAS9D,EAAMW,QAAQmD,OAAOC,YAAAA,KAE3CzD,EAAAA,EAAAA,KAAAA,OAAAA,CACIG,WAAYjD,GACZ3E,MAAAA,EAAAA,GACOmH,EAAMW,QAAQjB,KAAAA,CACjBkB,KAAAA,OAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAM/H,EAAMmL,eAAAA,EAAiB7B,GAAAA,EAAanC,EAAMW,QAAQjB,KAAKkB,MAAAA,EAAQ,QACrEF,iBAAkBjD,GAClBoE,cAAe,OACfoC,WAAY,QACR/B,EAAK4B,OAAS9D,EAAMW,QAAQmD,OAAOpE,UAAAA,GAE3C1G,EAAGsE,GACHrE,EAAGsE,GAAAA,SAEF2E,EAAK7H,YI/IT6J,EAAY,gBACrBhC,EAAAA,EAAAA,KAEAlJ,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACA+B,EAAAA,EAAAA,UAAAA,EAAAA,EACAiB,QAASD,OAAAA,IAAAA,EAAW,IACpB0B,EAAAA,EAAAA,QACAkF,EAAAA,EAAAA,QAEAzG,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,WAAAA,EAAAA,EACA+H,cAAAA,OAAAA,IAAAA,EAAgB,sBAChBpI,aAAAA,OAAAA,IAAAA,EAAe,IACfiI,EAAAA,EAAAA,cAAAA,EAAAA,EACAL,eAAAA,OAAAA,IAAAA,EAAiB,oBACjBD,YAAAA,OAAAA,IAAAA,EAAc,IAEdrB,EAAAA,EAAAA,YACA1E,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,cACA0E,EAAAA,EAAAA,kBACAC,EAAAA,EAAAA,kBAEAC,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,YAEQ1G,EAAYJ,EAAkB,CAClCK,UAAWgG,EAAKtM,OAChBuG,UAAAA,EACAC,WAAAA,EACAL,aAAAA,EACAf,UAAAA,EACAiB,QAASD,IANLC,QASFmI,EAAsB,QAAdpJ,EAAsBmB,EAAYJ,EAAe,EACzDsI,EAAsB,WAAdrJ,EAAyBoB,EAAaL,EAAe,SAG/DuE,EAAAA,EAAAA,KAAAA,IAAAA,CAAGE,UAAAA,aAAwBxH,EAAAA,IAAKC,EAAAA,IAAAA,SAC3BiJ,EAAK/B,KAAI,SAAC+B,EAAMzK,GAAAA,OACb6I,EAAAA,EAAAA,KAAC2B,EAAAA,CAEGC,KAAMA,EACNlJ,EAAGvB,EAAI2M,EAAQnI,EAAQL,KACvB3C,EAAGxB,EAAI4M,EAAQpI,EAAQR,IACvBiB,MAAOP,EACPQ,OAAQP,EACRpB,UAAWmJ,EACXzG,QAASA,EACTkF,QAASA,EACTT,UAAW6B,EACX5B,WAAYuB,EACZtC,QAASqC,EACTrB,YAAaA,EACb1E,WAAYA,EACZC,cAAeA,EACf0E,kBAAmBA,EACnBC,kBAAmBA,EACnBC,QAASA,EACTC,aAAcA,EACdC,aAAcA,EACdC,YAAaA,GApBRlL,SC7CZ6M,EAAe,gBACxBpC,EAAAA,EAAAA,KAEAjF,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBAAAA,EAAAA,EACAH,WAAAA,OAAAA,IAAAA,EAAa,QACbC,WAAAA,OAAAA,IAAAA,EAAa,IACbF,EAAAA,EAAAA,OACA9B,EAAAA,EAAAA,UAAAA,EAAAA,EACAiB,QAAAA,OAAAA,IAAAA,EAAU,IACVyB,EAAAA,EAAAA,QAAAA,EAAAA,EAEA3B,aAAAA,OAAAA,IAAAA,EAAe,IACfI,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,WACA+H,EAAAA,EAAAA,cACAH,EAAAA,EAAAA,cACAL,EAAAA,EAAAA,eACAD,EAAAA,EAAAA,YAEArB,EAAAA,EAAAA,YACA1E,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,cACA0E,EAAAA,EAAAA,kBACAC,EAAAA,EAAAA,kBAEAC,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,YAEAC,EAAAA,EAAAA,QAAAA,EAE0B/G,EAAkB,CACxCK,UAAWgG,EAAKtM,OAChBmG,aAAAA,EACAI,UAAAA,EACAC,WAAAA,EACApB,UAAAA,EACAiB,QAAAA,IANIS,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,OAAAA,EASEE,EAA0B,CACvCC,OAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAR,MAAAA,EACAC,OAAAA,IAPI3D,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAAAA,OAWPqH,EAAAA,EAAAA,KAAC4D,EAAAA,CACGhC,KAAMA,EACNlJ,EAAGA,EACHC,EAAGA,EACH+B,UAAWA,EACXiB,QAASA,EACTyB,QAASA,EACTkF,QAASA,EACT7G,aAAcA,EACdI,UAAWA,EACXC,WAAYA,EACZ+H,cAAeA,EACfH,cAAeA,EACfL,eAAgBA,EAChBD,YAAaA,EACbrB,YAAaA,EACb1E,WAAYA,EACZC,cAAeA,EACf0E,kBAAmBA,EACnBC,kBAAmBA,EACnBC,QAASA,EACTC,aAAcA,EACdC,aAAcA,EACdC,YAAoC,kBAAhBA,OAAAA,EAAwCA,KCtElE4B,EAAmB,CACrBjO,MAAO,OACPkO,OAAQ,SACR3N,IAAK,SAGI4N,EAAuB,SAChCC,EAAAA,GAAAA,IAEIxC,EAAAA,EAAAA,KAEAjF,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBAAAA,EAAAA,EACAH,WAAAA,OAAAA,IAAAA,EAAa,QACbC,WAAAA,OAAAA,IAAAA,EAAa,IACbF,EAAAA,EAAAA,OACA9B,EAAAA,EAAAA,UAAAA,EAAAA,EACAiB,QAASD,OAAAA,IAAAA,EAAW,QACpB0B,QAAAA,OAAAA,IAAAA,GAAAA,EAAAA,EAAAA,EAGA3B,aAAAA,OAAAA,IAAAA,EAAe,IACfI,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,WAAAA,EAAAA,EACA+H,cAAAA,OAAAA,IAAAA,EAAgB,kBAChBH,EAAAA,EAAAA,cAAAA,EAAAA,EAGArG,WAAAA,OAAAA,IAAAA,EAAa,SACbC,cAAAA,OAAAA,IAAAA,EAAgB,IAIhBoC,EAAAA,EAAAA,MAAAA,EAG+BnE,EAAkB,CACjDK,UAAWgG,EAAKtM,OAChBuG,UAAAA,EACAC,WAAAA,EACAL,aAAAA,EACAf,UAAAA,EACAiB,QAASD,IANLU,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,OAAQV,EAAAA,EAAAA,QAAAA,EASNY,EAA0B,CACvCC,OAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAR,MAAAA,EACAC,OAAAA,IAPI3D,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAULmL,EAAsB,QAAdpJ,EAAsBmB,EAAYJ,EAAe,EACzDsI,EAAsB,WAAdrJ,EAAyBoB,EAAaL,EAAe,EAEnE2I,EAAIC,OACJD,EAAIE,UAAU5L,EAAGC,GAEjByL,EAAIG,KAAU7E,EAAMW,QAAQjB,KAAKoF,SAAAA,OAAc9E,EAAMW,QAAQjB,KAAKqF,YAAc,cAEhF7C,EAAKzC,SAAQ,SAACzI,EAAGS,GAAAA,IAAAA,EAAAA,EACPuN,EAAQvN,EAAI2M,EAAQnI,EAAQL,KAC5BqJ,EAAQxN,EAAI4M,EAAQpI,EAAQR,IAAAA,EAEwC0B,EACtE,CACInC,UAAWmJ,EACXzG,QAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAlB,MAAOP,EACPQ,OAAQP,IAPRgB,EAAAA,EAAAA,QAASC,EAAAA,EAAAA,QAASC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,YAAaC,EAAAA,EAAAA,eAWvDiH,EAAIQ,UAAAA,OAAAA,EAAYlO,EAAE8B,OAAAA,EAAS,QAC3B4L,EAAIS,SAASH,EAAQ5H,EAAS6H,EAAQ5H,EAASM,EAAYA,GAE3D+G,EAAIU,UAAYb,EAAiB/G,GAEV,YAAnBC,IACAiH,EAAIW,aAAe,UAGvBX,EAAIQ,UAAAA,OAAAA,EAAAA,MAAYlB,EAAAA,EAAiBhE,EAAMW,QAAQjB,KAAKkB,MAAAA,EAAQ,QAC5D8D,EAAIY,SAASC,OAAOvO,EAAEqD,OAAQ2K,EAAQ1H,EAAQ2H,EAAQ1H,MAG1DmH,EAAIc,WAGKC,EAAsC,SAC/Cf,EAAAA,GAAAA,IAEIzH,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBACAJ,EAAAA,EAAAA,OAAAA,EAAAA,EACAC,WAAAA,OAAAA,IAAAA,EAAa,QACbC,WAAAA,OAAAA,IAAAA,EAAa,IACbc,EAAAA,EAAAA,MAAAA,EAAAA,EACAlI,OAAAA,OAAAA,IAAAA,EAASkF,EAA+BlF,OAAAA,EAAAA,EAAAA,EACxCmF,UAAAA,OAAAA,IAAAA,EAAYD,EAA+BC,UAAAA,EAAAA,EAAAA,EAC3CC,UAAAA,OAAAA,IAAAA,EAAYF,EAA+BE,UAAAA,EACpC0K,EAAAA,EAAP3H,MAAAA,EAAAA,EACA9C,aAAAA,OAAAA,IAAAA,EAAeH,EAA+BG,aAAAA,EAAAA,EAAAA,EAC9CC,SAAAA,OAAAA,IAAAA,EAAWJ,EAA+BI,SAAAA,EAAAA,EAAAA,EAC1CC,YAAAA,OAAAA,IAAAA,EAAcL,EAA+BK,YAAAA,EAAAA,EAAAA,EAC7CC,YAAAA,OAAAA,IAAAA,EAAcN,EAA+BM,YAAAA,EAAAA,EAAAA,EAC7CC,WAAAA,OAAAA,IAAAA,EAAaP,EAA+BO,WAAAA,EAC5C2C,EAAAA,EAAAA,MAAAA,EAAAA,EACA1C,WAAAA,OAAAA,IAAAA,EAAaR,EAA+BQ,WAAAA,EAAAA,EAAAA,EAC5CC,YAAAA,OAAAA,IAAAA,EAAcT,EAA+BS,YAAAA,EAC7CyE,EAAAA,EAAAA,MAAAA,EAoBAnC,EAA8B,CAC9BC,MAAAA,EACAC,MAAO2H,EACP9P,OAAAA,EACAmF,UAAAA,EACAC,UAAAA,EACAC,aAAAA,EACAC,SAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,WAAAA,EACA2C,MAAAA,EACA1C,WAAAA,EACAC,YAAAA,IA3BAmB,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OACAgD,EAAAA,EAAAA,WACAJ,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,WACAI,EAAAA,EAAAA,WACAV,EAAAA,EAAAA,WACAnB,EAAAA,EAAAA,MACA8B,EAAAA,EAAAA,UACAvB,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,cACAC,EAAAA,EAAAA,mBACAqB,EAAAA,EAAAA,qBAAAA,EAiBajD,EAA0B,CACvCC,OAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAR,MAAAA,EACAC,OAAAA,IAPI3D,EAAAA,EAAAA,EAAGC,GAAAA,EAAAA,EAUL0M,GAAgB,CAClBd,KAAMH,EAAIG,KACVO,UAAWV,EAAIU,UACfC,aAAcX,EAAIW,cAEtBX,EAAIC,OAEJD,EAAIE,UAAU5L,EAAGC,IAAAA,IAEX2M,GAAWlB,EAAImB,qBACjBlG,EAAajD,EACb6C,EAAa5C,EACb6C,EAAa9C,EACbkD,EAAajD,GAEjBuC,EAAWO,SAAQ,YACfmG,GAASE,aAAavF,EAAUrK,OAAQqK,EAAUwF,cAGtDrB,EAAIQ,UAAYU,GAChBlB,EAAIS,SAAS,EAAG,EAAGzI,EAAOC,GAE1B+H,EAAIG,MACA7E,EAAMW,QAAQ5C,MAAM2B,KAAKsG,WAAgBhG,EAAMW,QAAQ5C,MAAM2B,KAAKsG,WAAAA,IAAgB,IACnFhG,EAAMW,QAAQ5C,MAAM2B,KAAKoF,SAAAA,MAAc9E,EAAMW,QAAQ5C,MAAM2B,KAAKqF,WAEnEhH,EAAM0B,SAAQ,4BACLO,EAAMW,QAAQ5C,MAAMiD,KAAKW,aAAAA,EAAe,GAAK,IAC9C+C,EAAIuB,UAAYC,OAAOlG,EAAMmG,KAAKpI,MAAMiD,KAAKW,aACzC3B,EAAMmG,KAAKpI,MAAMiD,KAAKY,SACtB8C,EAAI0B,YAAcpG,EAAMmG,KAAKpI,MAAMiD,KAAKY,QAE5C8C,EAAI2B,QAAU,SAEd3B,EAAI4B,YACJ5B,EAAI6B,OAAO1F,EAAK/B,GAAI+B,EAAKnC,IACzBgG,EAAI8B,OAAO3F,EAAK9B,GAAI8B,EAAKlC,IACzB+F,EAAI9C,UAGJ5B,EAAMW,QAAQ5C,MAAM2B,KAAKkB,OACzB8D,EAAIQ,UAAYlF,EAAMW,QAAQ5C,MAAM2B,KAAKkB,MAE7C8D,EAAIU,UAAyC,WAA7BvE,EAAK5B,oBAAmC,SAAW4B,EAAK5B,oBACxEyF,EAAIW,aAA0C,YAA3BxE,EAAKhC,kBAAkC,SAAWgC,EAAKhC,kBAE1E6F,EAAIY,SAASzE,EAAKnB,KAAMmB,EAAK7B,MAAO6B,EAAKjC,UAGzCiB,IACA6E,EAAIC,OACJD,EAAIE,UAAUtG,EAAQC,GACtBmG,EAAI+B,QAAOC,EAAAA,EAAAA,IAAiBlI,IAE5BkG,EAAIG,MACA7E,EAAMW,QAAQ3C,MAAM0B,KAAKsG,WAAgBhG,EAAMW,QAAQ3C,MAAM0B,KAAKsG,WAAAA,IAAgB,IACnFhG,EAAMW,QAAQ3C,MAAM0B,KAAKoF,SAAAA,MAAc9E,EAAMW,QAAQ3C,MAAM0B,KAAKqF,WAC/D/E,EAAMW,QAAQ3C,MAAM0B,KAAKkB,OACzB8D,EAAIQ,UAAYlF,EAAMW,QAAQ3C,MAAM0B,KAAKkB,MAE7C8D,EAAIU,UAAqC,WAAzBtF,EAAoC,SAAWA,EAC/D4E,EAAIW,aAAe5G,EAEnBiG,EAAIY,SAASzF,EAAW,EAAG,GAE3B6E,EAAIc,WAGRd,EAAIc,UAEJd,EAAIG,KAAOc,GAAcd,KACzBH,EAAIU,UAAYO,GAAcP,UAC9BV,EAAIW,aAAeM,GAAcN,cC3OxBsB,EAAkC,SAAC,GAAD,IAC3C7I,EAAAA,EAAAA,MACQ8I,EAAAA,EAAR3I,OAAAA,EAAAA,EACAC,QAAAA,OAAAA,IAAAA,GAAAA,EAAAA,EAAAA,EACA2I,YAAAA,OAAAA,IAAAA,EAAc,mBAAKC,GAAAA,EAAAA,EAAAA,EACnBC,UAAAA,OAAAA,IAAAA,EAAY,eAQLC,EAAAA,EAAAA,UAAQ,eAGLC,GAAAA,MAFSL,EAAAA,EAAoB9I,EAAMzH,SAEpB8J,KAAI,SAAC+G,EAAapG,GAAAA,IAAAA,EACdhD,EAAMqJ,aAAaD,GAAjC5Q,EAAAA,EAAAA,GAAOO,EAAAA,EAAAA,GAAAA,MAEP,CACHqJ,GAAIgH,EACJpG,MAAAA,EACAsG,OAAQ,CAAC9Q,EAAOO,GAChBwD,MAAAA,GAAUwM,EAAYvQ,GAASyQ,EAAYF,EAAYhQ,GACvDkC,MAAO+E,EAAMxH,GACbwC,MAAOoO,MAAAA,OAIXhJ,GAAS+I,EAAM/I,UAEZ+I,IACR,CAACL,EAAkB9I,EAAOI,EAAS6I,EAAWF,KCxBxCQ,EAAkB,CAC3BnF,KAAMoF,IAAAA,QAAkBA,IAAAA,QAGxBxK,OAAQwK,IAAAA,MAAgB,CACpB,MACA,YACA,QACA,eACA,SACA,cACA,OACA,WACA,WACDC,WACHxK,WAAYuK,IAAAA,OACZtK,WAAYsK,IAAAA,OACZtM,UAAWsM,IAAAA,MAAgB,CAAC,MAAO,WAAWC,WAG9CxL,aAAcuL,IAAAA,OACdnL,UAAWmL,IAAAA,OAAAA,WACXlL,WAAYkL,IAAAA,OAAAA,WACZnD,cAAemD,IAAAA,MAAgB,CAC3B,gBACA,gBACA,gBACA,kBAEJtD,cAAesD,IAAAA,OACf3D,eAAgB2D,IAAAA,OAChB5D,YAAa4D,IAAAA,OAEbjF,YAAaiF,IAAAA,UAAoB,CAC7BA,IAAAA,MAAgB,CAAC,SAAU,UAAW,SAAU,aAChDA,IAAAA,OAEJ3J,WAAY2J,IAAAA,OACZ1J,cAAe0J,IAAAA,OACfhF,kBAAmBgF,IAAAA,OACnB/E,kBAAmB+E,IAAAA,OAEnB9E,QAAS8E,IAAAA,KACT7E,aAAc6E,IAAAA,KACd5E,aAAc4E,IAAAA,KAEd1E,QAAS0E,IAAAA,QACLA,IAAAA,MAAgB,CACZpE,GAAIoE,IAAAA,UAAoB,CAACA,IAAAA,MAAgB,CAAC,YAAYC,WACtD1O,MAAOyO,IAAAA,MAAgB,CACnBtD,cAAesD,IAAAA,OACf3D,eAAgB2D,IAAAA,OAChB5D,YAAa4D,IAAAA,OACb3J,WAAY2J,IAAAA,OACZhF,kBAAmBgF,IAAAA,OACnB/E,kBAAmB+E,IAAAA,SACpBC,gB,sBCxEf,IAAIC,EAAa,EAAQ,OACrBC,EAAe,EAAQ,OAgB3BC,EAAOC,QAJP,SAAoB5O,GAClB,OAAO0O,EAAa1O,IAVR,iBAUkByO,EAAWzO,K,sBCd3C,IAAI6O,EAAa,EAAQ,OACrBC,EAAY,EAAQ,OACpBC,EAAW,EAAQ,OAGnBC,EAAaD,GAAYA,EAASE,OAmBlCA,EAASD,EAAaF,EAAUE,GAAcH,EAElDF,EAAOC,QAAUK","sources":["webpack://nivo-website/../node_modules/d3-time/src/duration.js","webpack://nivo-website/../node_modules/d3-time/src/interval.js","webpack://nivo-website/../node_modules/d3-time/src/month.js","webpack://nivo-website/../node_modules/d3-time/src/week.js","webpack://nivo-website/../node_modules/d3-time/src/year.js","webpack://nivo-website/./src/data/components/calendar/mapper.tsx","webpack://nivo-website/./src/data/components/calendar/props.ts","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/svg/ContinuousColorsLegendSvg.tsx","webpack://nivo-website/../src/svg/AnchoredContinuousColorsLegendSvg.tsx","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../node_modules/lodash/_baseIsDate.js","webpack://nivo-website/../node_modules/lodash/isDate.js"],"sourcesContent":["export var durationSecond = 1e3;\nexport var durationMinute = 6e4;\nexport var durationHour = 36e5;\nexport var durationDay = 864e5;\nexport var durationWeek = 6048e5;","var t0 = new Date(),\n    t1 = new Date();\nexport default function newInterval(floori, offseti, count, field) {\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;\n  }\n\n  interval.floor = function (date) {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = function (date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function (date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function (date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function (start, stop, step) {\n    var range = [],\n        previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n\n    do {\n      range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    } while (previous < start && start < stop);\n\n    return range;\n  };\n\n  interval.filter = function (test) {\n    return newInterval(function (date) {\n      if (date >= date) while (floori(date), !test(date)) {\n        date.setTime(date - 1);\n      }\n    }, function (date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function (start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function (step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n        return field(d) % step === 0;\n      } : function (d) {\n        return interval.count(0, d) % step === 0;\n      });\n    };\n  }\n\n  return interval;\n}","import interval from \"./interval.js\";\nvar month = interval(function (date) {\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setMonth(date.getMonth() + step);\n}, function (start, end) {\n  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n}, function (date) {\n  return date.getMonth();\n});\nexport default month;\nexport var months = month.range;","import interval from \"./interval.js\";\nimport { durationMinute, durationWeek } from \"./duration.js\";\n\nfunction weekday(i) {\n  return interval(function (date) {\n    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n    date.setHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setDate(date.getDate() + step * 7);\n  }, function (start, end) {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n  });\n}\n\nexport var sunday = weekday(0);\nexport var monday = weekday(1);\nexport var tuesday = weekday(2);\nexport var wednesday = weekday(3);\nexport var thursday = weekday(4);\nexport var friday = weekday(5);\nexport var saturday = weekday(6);\nexport var sundays = sunday.range;\nexport var mondays = monday.range;\nexport var tuesdays = tuesday.range;\nexport var wednesdays = wednesday.range;\nexport var thursdays = thursday.range;\nexport var fridays = friday.range;\nexport var saturdays = saturday.range;","import interval from \"./interval.js\";\nvar year = interval(function (date) {\n  date.setMonth(0, 1);\n  date.setHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setFullYear(date.getFullYear() + step);\n}, function (start, end) {\n  return end.getFullYear() - start.getFullYear();\n}, function (date) {\n  return date.getFullYear();\n}); // An optimized implementation for this simple case.\n\nyear.every = function (k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : interval(function (date) {\n    date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setFullYear(date.getFullYear() + step * k);\n  });\n};\n\nexport default year;\nexport var years = year.range;","import React from 'react'\nimport styled from 'styled-components'\nimport { settingsMapper } from '../../../lib/settings'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    background: #333;\n    padding: 10px;\n    border-radius: 4px;\n    grid-template-columns: 40px 1fr;\n    grid-column-gap: 12px;\n`\nconst TooltipKey = styled.span`\n    font-weight: 600;\n`\n\nconst CustomTooltip = day => {\n    return (\n        <TooltipWrapper style={{ color: day.color }}>\n            <TooltipKey>day</TooltipKey>\n            <span>{day.day}</span>\n            <TooltipKey>value</TooltipKey>\n            <span>{day.value}</span>\n            <TooltipKey>x</TooltipKey>\n            <span>{day.x}</span>\n            <TooltipKey>y</TooltipKey>\n            <span>{day.y}</span>\n            <TooltipKey>size</TooltipKey>\n            <span>{day.size}</span>\n        </TooltipWrapper>\n    )\n}\n\nexport default settingsMapper(\n    {\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return undefined\n\n            return CustomTooltip\n        },\n    },\n    {\n        exclude: ['custom tooltip example'],\n    }\n)\n","import { calendarDefaultProps as defaults } from '@nivo/calendar'\nimport { themeProperty, groupProperties } from '../../../lib/componentProperties'\nimport { chartDimensions, isInteractive } from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg', 'canvas', 'api']\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                day:   string, // format must be YYYY-MM-DD\n                value: number\n            }>\n            \\`\\`\\`\n            You can also add arbitrary data to this structure\n            to be used in tooltips or event handlers.\n        `,\n        type: 'object[]',\n        required: true,\n        flavors: allFlavors,\n    },\n    {\n        key: 'from',\n        group: 'Base',\n        help: 'start date',\n        type: 'string | Date',\n        required: true,\n        flavors: allFlavors,\n    },\n    {\n        key: 'to',\n        group: 'Base',\n        help: 'end date',\n        type: 'string | Date',\n        required: true,\n        flavors: allFlavors,\n    },\n    ...chartDimensions(allFlavors),\n    {\n        key: 'direction',\n        help: 'defines calendar layout direction.',\n        type: 'string',\n        required: false,\n        defaultValue: defaults.direction,\n        flavors: ['svg', 'canvas', 'api'],\n        group: 'Base',\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'horizontal', value: 'horizontal' },\n                { label: 'vertical', value: 'vertical' },\n            ],\n        },\n    },\n    {\n        key: 'align',\n        help: 'defines how calendar should be aligned inside chart container.',\n        type: 'string',\n        required: false,\n        flavors: ['svg', 'canvas', 'api'],\n        defaultValue: defaults.align,\n        group: 'Base',\n        control: {\n            type: 'boxAnchor',\n        },\n    },\n    {\n        key: 'minValue',\n        help: 'Minimum value.',\n        description: `\n            Minimum value. If 'auto', will pick the lowest value\n            in the provided data set.\n            Should be overriden if your data set does not contain\n            desired lower bound value.\n        `,\n        required: false,\n        flavors: ['svg', 'canvas', 'api'],\n        defaultValue: defaults.minValue,\n        type: `number | 'auto'`,\n        group: 'Base',\n        control: {\n            type: 'switchableRange',\n            disabledValue: 'auto',\n            defaultValue: 0,\n            min: -300,\n            max: 300,\n        },\n    },\n    {\n        key: 'maxValue',\n        help: 'Maximum value.',\n        description: `\n            Maximum value. If 'auto', will pick the highest value\n            in the provided data set.\n            Should be overriden if your data set does not contain\n            desired higher bound value.\n        `,\n        required: false,\n        flavors: ['svg', 'canvas', 'api'],\n        defaultValue: defaults.maxValue,\n        type: `number | 'auto'`,\n        group: 'Base',\n        control: {\n            type: 'switchableRange',\n            disabledValue: 'auto',\n            defaultValue: 100,\n            min: 0,\n            max: 600,\n        },\n    },\n    themeProperty(['svg', 'canvas', 'api']),\n    {\n        key: 'colors',\n        group: 'Style',\n        help: 'Cell colors.',\n        description: `\n            An array of colors to be used in conjunction with\n            \\`domain\\` to compute days' color.\n            It applies to days having a value defined, otherwise,\n            \\`emptyColor\\` will be used.\n        `,\n        type: 'string[]',\n        required: false,\n        flavors: ['svg', 'canvas', 'api'],\n        defaultValue: defaults.colors,\n    },\n    {\n        key: 'emptyColor',\n        help: 'color to use to fill days without available value.',\n        type: 'string',\n        required: false,\n        flavors: ['svg', 'canvas', 'api'],\n        defaultValue: defaults.emptyColor,\n        control: { type: 'colorPicker' },\n        group: 'Style',\n    },\n    // Years\n    {\n        key: 'yearSpacing',\n        help: 'define spacing between each year row/column depending on the direction.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.yearSpacing,\n        flavors: ['svg', 'canvas', 'api'],\n        group: 'Years',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 160,\n            step: 5,\n        },\n    },\n    {\n        key: 'yearLegend',\n        group: 'Years',\n        help: `can be used to customize years label, returns 'YYYY' by default.`,\n        type: '(year: number) => string | number',\n        required: false,\n        flavors: ['svg', 'canvas', 'api'],\n    },\n    {\n        key: 'yearLegendPosition',\n        help: 'defines year legends position.',\n        type: `'before' | 'after'`,\n        required: false,\n        defaultValue: defaults.yearLegendPosition,\n        flavors: ['svg', 'canvas', 'api'],\n        group: 'Years',\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'before', value: 'before' },\n                { label: 'after', value: 'after' },\n            ],\n        },\n    },\n    {\n        key: 'yearLegendOffset',\n        help: 'define offset from year edge to its label.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.yearLegendOffset,\n        flavors: ['svg', 'canvas', 'api'],\n        group: 'Years',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 60,\n        },\n    },\n    // Months\n    {\n        key: 'monthSpacing',\n        help: 'define spacing between each month row/column depending on the direction.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.monthSpacing,\n        flavors: ['svg', 'canvas', 'api'],\n        group: 'Months',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 160,\n            step: 5,\n        },\n    },\n    {\n        key: 'monthBorderWidth',\n        flavors: ['svg', 'api'],\n        help: 'width of month borders.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.monthBorderWidth,\n        control: { type: 'lineWidth' },\n        group: 'Months',\n    },\n    {\n        key: 'monthBorderColor',\n        flavors: ['svg', 'api'],\n        help: 'color to use for months border.',\n        type: 'string',\n        required: false,\n        defaultValue: defaults.monthBorderColor,\n        control: { type: 'colorPicker' },\n        group: 'Months',\n    },\n    {\n        key: 'monthLegend',\n        help: `can be used to customize months label, returns abbreviated month name (english) by default. This can be used to use a different language`,\n        type: '(year: number, month: number, date: Date) => string | number',\n        required: false,\n        group: 'Months',\n        flavors: ['svg', 'canvas', 'api'],\n    },\n    {\n        key: 'monthLegendPosition',\n        help: 'defines month legends position.',\n        type: `'before' | 'after'`,\n        required: false,\n        defaultValue: defaults.monthLegendPosition,\n        flavors: ['svg', 'canvas', 'api'],\n        group: 'Months',\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'before', value: 'before' },\n                { label: 'after', value: 'after' },\n            ],\n        },\n    },\n    {\n        key: 'monthLegendOffset',\n        help: 'define offset from month edge to its label.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.monthLegendOffset,\n        flavors: ['svg', 'canvas', 'api'],\n        group: 'Months',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 36,\n        },\n    },\n    // Days\n    {\n        key: 'daySpacing',\n        help: 'define spacing between each day cell.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.daySpacing,\n        flavors: ['svg', 'canvas', 'api'],\n        group: 'Days',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 20,\n        },\n    },\n    {\n        key: 'dayBorderWidth',\n        help: 'width of days border.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.dayBorderWidth,\n        flavors: ['svg', 'canvas', 'api'],\n        control: { type: 'lineWidth' },\n        group: 'Days',\n    },\n    {\n        key: 'dayBorderColor',\n        help: 'color to use for days border.',\n        type: 'string',\n        required: false,\n        defaultValue: defaults.dayBorderColor,\n        flavors: ['svg', 'canvas', 'api'],\n        control: { type: 'colorPicker' },\n        group: 'Days',\n    },\n    isInteractive({\n        flavors: ['svg', 'canvas'],\n        defaultValue: defaults.isInteractive,\n    }),\n    {\n        key: 'onClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onClick handler, it receives clicked day data and mouse event.',\n        type: '(day, event) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom tooltip component.',\n        description: `\n            A function allowing complete tooltip customisation, it must return a valid HTML\n            element and will receive the following data:\n            \\`\\`\\`\n            {\n                day:   string,\n                date:  {Date},\n                value: number,\n                color: string,\n                x:     number,\n                y:     number,\n                size:  number\n            }\n            \\`\\`\\`\n            You can also customize the tooltip style\n            using the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        flavors: ['svg', 'canvas'],\n        help: 'Showcase custom tooltip.',\n        type: 'boolean',\n        required: false,\n        control: { type: 'switch' },\n        group: 'Interactivity',\n    },\n]\n\nexport const groups = groupProperties(props)\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { ContinuousColorsLegendProps } from './types'\n\nexport const continuousColorsLegendDefaults: {\n    length: NonNullable<ContinuousColorsLegendProps['length']>\n    thickness: NonNullable<ContinuousColorsLegendProps['thickness']>\n    direction: NonNullable<ContinuousColorsLegendProps['direction']>\n    tickPosition: NonNullable<ContinuousColorsLegendProps['tickPosition']>\n    tickSize: NonNullable<ContinuousColorsLegendProps['tickSize']>\n    tickSpacing: NonNullable<ContinuousColorsLegendProps['tickSpacing']>\n    tickOverlap: NonNullable<ContinuousColorsLegendProps['tickOverlap']>\n    tickFormat: NonNullable<ContinuousColorsLegendProps['tickFormat']>\n    titleAlign: NonNullable<ContinuousColorsLegendProps['titleAlign']>\n    titleOffset: NonNullable<ContinuousColorsLegendProps['titleOffset']>\n} = {\n    length: 200,\n    thickness: 16,\n    direction: 'row',\n    tickPosition: 'after',\n    tickSize: 4,\n    tickSpacing: 3,\n    tickOverlap: false,\n    tickFormat: (value: number) => `${value}`,\n    titleAlign: 'start',\n    titleOffset: 4,\n}\n","import { scaleLinear } from 'd3-scale'\nimport { getValueFormatter } from '@nivo/core'\nimport { computeContinuousColorScaleColorStops } from '@nivo/colors'\nimport {\n    BoxLegendSvgProps,\n    ContinuousColorsLegendProps,\n    LegendAnchor,\n    LegendItemDirection,\n} from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n\nexport const computeContinuousColorsLegend = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    // left to right for `row`, bottom to top for `column`\n    const domain = direction === 'column' ? [...scale.domain()].reverse() : scale.domain()\n\n    const positionScale = scaleLinear().domain(domain)\n    if (domain.length === 2) {\n        // sequential, quantize\n        positionScale.range([0, length])\n    } else if (domain.length === 3) {\n        // diverging\n        positionScale.range([0, length / 2, length])\n    }\n\n    let values: number[]\n    if ('thresholds' in scale) {\n        // quantize\n        values = [domain[0], ...scale.thresholds(), domain[1]]\n    } else {\n        // sequential, diverging\n        values = Array.isArray(ticks) ? ticks : (scale as any).ticks(ticks)\n    }\n\n    const colorStops = computeContinuousColorScaleColorStops(scale, 32)\n\n    const formatValue = getValueFormatter(tickFormat)\n\n    const computedTicks: {\n        x1: number\n        y1: number\n        x2: number\n        y2: number\n        text: string\n        textX: number\n        textY: number\n        textHorizontalAlign: 'start' | 'middle' | 'end'\n        textVerticalAlign: 'alphabetic' | 'central' | 'hanging'\n    }[] = []\n\n    let width: number\n    let height: number\n\n    const gradientX1 = 0\n    let gradientY1 = 0\n    let gradientX2 = 0\n    const gradientY2 = 0\n\n    let titleX: number\n    let titleY: number\n    let titleRotation: number\n    let titleVerticalAlign: 'alphabetic' | 'hanging'\n\n    if (direction === 'row') {\n        width = length\n        height = thickness\n\n        gradientX2 = 1\n\n        let y1: number\n        let y2: number\n\n        let textY: number\n        const textHorizontalAlign = 'middle'\n        let textVerticalAlign: 'alphabetic' | 'hanging'\n\n        titleRotation = 0\n        if (titleAlign === 'start') {\n            titleX = 0\n        } else if (titleAlign === 'middle') {\n            titleX = length / 2\n        } else {\n            titleX = length\n        }\n\n        if (tickPosition === 'before') {\n            y1 = -tickSize\n            y2 = tickOverlap ? thickness : 0\n\n            textY = -tickSize - tickSpacing\n            textVerticalAlign = 'alphabetic'\n\n            titleY = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            y1 = tickOverlap ? 0 : thickness\n            y2 = thickness + tickSize\n\n            textY = y2 + tickSpacing\n            textVerticalAlign = 'hanging'\n\n            titleY = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const x = positionScale(value)\n\n            computedTicks.push({\n                x1: x,\n                y1,\n                x2: x,\n                y2,\n                text: formatValue(value),\n                textX: x,\n                textY,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    } else {\n        width = thickness\n        height = length\n\n        gradientY1 = 1\n\n        let x1: number\n        let x2: number\n\n        let textX: number\n        let textHorizontalAlign: 'start' | 'end'\n        const textVerticalAlign = 'central'\n\n        titleRotation = -90\n        if (titleAlign === 'start') {\n            titleY = length\n        } else if (titleAlign === 'middle') {\n            titleY = length / 2\n        } else {\n            titleY = 0\n        }\n\n        if (tickPosition === 'before') {\n            x1 = -tickSize\n            x2 = tickOverlap ? thickness : 0\n\n            textX = x1 - tickSpacing\n            textHorizontalAlign = 'end'\n\n            titleX = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            x1 = tickOverlap ? 0 : thickness\n            x2 = thickness + tickSize\n\n            textX = x2 + tickSpacing\n            textHorizontalAlign = 'start'\n\n            titleX = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const y = positionScale(value)\n\n            computedTicks.push({\n                x1,\n                y1: y,\n                x2,\n                y2: y,\n                text: formatValue(value),\n                textX,\n                textY: y,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    }\n\n    return {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks: computedTicks,\n        titleText: title,\n        titleX,\n        titleY,\n        titleRotation,\n        titleHorizontalAlign: titleAlign,\n        titleVerticalAlign,\n    }\n}\n","import { Fragment } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { computeContinuousColorsLegend } from '../compute'\nimport { ContinuousColorsLegendProps } from '../types'\nimport { continuousColorsLegendDefaults } from '../defaults'\n\nexport const ContinuousColorsLegendSvg = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        ticks: computedTicks,\n        colorStops,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const theme = useTheme()\n\n    const id = `ContinuousColorsLegendSvgGradient.${direction}.${colorStops\n        .map(stop => stop.offset)\n        .join('_')}`\n\n    return (\n        <g>\n            <defs>\n                <linearGradient\n                    id={id}\n                    x1={gradientX1}\n                    y1={gradientY1}\n                    x2={gradientX2}\n                    y2={gradientY2}\n                >\n                    {colorStops.map(colorStop => (\n                        <stop {...colorStop} />\n                    ))}\n                </linearGradient>\n            </defs>\n            {titleText && (\n                <text\n                    transform={`translate(${titleX}, ${titleY}) rotate(${titleRotation})`}\n                    textAnchor={titleHorizontalAlign}\n                    dominantBaseline={titleVerticalAlign}\n                    style={theme.legends.title.text}\n                >\n                    {titleText}\n                </text>\n            )}\n            <rect width={width} height={height} fill={`url(#${id}`} />\n            {computedTicks.map((tick, index) => (\n                <Fragment key={index}>\n                    <line\n                        x1={tick.x1}\n                        y1={tick.y1}\n                        x2={tick.x2}\n                        y2={tick.y2}\n                        style={theme.legends.ticks.line}\n                    />\n                    <text\n                        x={tick.textX}\n                        y={tick.textY}\n                        textAnchor={tick.textHorizontalAlign}\n                        dominantBaseline={tick.textVerticalAlign}\n                        style={theme.legends.ticks.text}\n                    >\n                        {tick.text}\n                    </text>\n                </Fragment>\n            ))}\n        </g>\n    )\n}\n","import { AnchoredContinuousColorsLegendProps } from '../types'\nimport { computePositionFromAnchor } from '../compute'\nimport { continuousColorsLegendDefaults } from '../defaults'\nimport { ContinuousColorsLegendSvg } from './ContinuousColorsLegendSvg'\n\nexport const AnchoredContinuousColorsLegendSvg = ({\n    containerWidth,\n    containerHeight,\n    anchor,\n    translateX = 0,\n    translateY = 0,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    ...legendProps\n}: AnchoredContinuousColorsLegendProps) => {\n    let width: number\n    let height: number\n    if (direction === 'row') {\n        width = length\n        height = thickness\n    } else {\n        width = thickness\n        height = length\n    }\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <g transform={`translate(${x}, ${y})`}>\n            <ContinuousColorsLegendSvg\n                length={length}\n                thickness={thickness}\n                direction={direction}\n                {...legendProps}\n            />\n        </g>\n    )\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { CompleteTheme, degreesToRadians } from '@nivo/core'\nimport {\n    computeDimensions,\n    computePositionFromAnchor,\n    computeItemLayout,\n    computeContinuousColorsLegend,\n} from './compute'\nimport { AnchoredContinuousColorsLegendProps, LegendCanvasProps } from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n\nexport const renderContinuousColorLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        containerWidth,\n        containerHeight,\n        anchor,\n        translateX = 0,\n        translateY = 0,\n        scale,\n        length = continuousColorsLegendDefaults.length,\n        thickness = continuousColorsLegendDefaults.thickness,\n        direction = continuousColorsLegendDefaults.direction,\n        ticks: _ticks,\n        tickPosition = continuousColorsLegendDefaults.tickPosition,\n        tickSize = continuousColorsLegendDefaults.tickSize,\n        tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n        tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n        tickFormat = continuousColorsLegendDefaults.tickFormat,\n        title,\n        titleAlign = continuousColorsLegendDefaults.titleAlign,\n        titleOffset = continuousColorsLegendDefaults.titleOffset,\n        theme,\n    }: AnchoredContinuousColorsLegendProps & {\n        theme: CompleteTheme\n    }\n) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks: _ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const initialStyles = {\n        font: ctx.font,\n        textAlign: ctx.textAlign,\n        textBaseline: ctx.textBaseline,\n    }\n    ctx.save()\n\n    ctx.translate(x, y)\n\n    const gradient = ctx.createLinearGradient(\n        gradientX1 * width,\n        gradientY1 * height,\n        gradientX2 * width,\n        gradientY2 * height\n    )\n    colorStops.forEach(colorStop => {\n        gradient.addColorStop(colorStop.offset, colorStop.stopColor)\n    })\n\n    ctx.fillStyle = gradient\n    ctx.fillRect(0, 0, width, height)\n\n    ctx.font = `${\n        theme.legends.ticks.text.fontWeight ? `${theme.legends.ticks.text.fontWeight} ` : ''\n    }${theme.legends.ticks.text.fontSize}px ${theme.legends.ticks.text.fontFamily}`\n\n    ticks.forEach(tick => {\n        if ((theme.legends.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n            ctx.lineCap = 'square'\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x1, tick.y1)\n            ctx.lineTo(tick.x2, tick.y2)\n            ctx.stroke()\n        }\n\n        if (theme.legends.ticks.text.fill) {\n            ctx.fillStyle = theme.legends.ticks.text.fill\n        }\n        ctx.textAlign = tick.textHorizontalAlign === 'middle' ? 'center' : tick.textHorizontalAlign\n        ctx.textBaseline = tick.textVerticalAlign === 'central' ? 'middle' : tick.textVerticalAlign\n\n        ctx.fillText(tick.text, tick.textX, tick.textY)\n    })\n\n    if (titleText) {\n        ctx.save()\n        ctx.translate(titleX, titleY)\n        ctx.rotate(degreesToRadians(titleRotation))\n\n        ctx.font = `${\n            theme.legends.title.text.fontWeight ? `${theme.legends.title.text.fontWeight} ` : ''\n        }${theme.legends.title.text.fontSize}px ${theme.legends.title.text.fontFamily}`\n        if (theme.legends.title.text.fill) {\n            ctx.fillStyle = theme.legends.title.text.fill\n        }\n        ctx.textAlign = titleHorizontalAlign === 'middle' ? 'center' : titleHorizontalAlign\n        ctx.textBaseline = titleVerticalAlign\n\n        ctx.fillText(titleText, 0, 0)\n\n        ctx.restore()\n    }\n\n    ctx.restore()\n\n    ctx.font = initialStyles.font\n    ctx.textAlign = initialStyles.textAlign\n    ctx.textBaseline = initialStyles.textBaseline\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n\n        if (reverse) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse, separator, valueFormat])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar dateTag = '[object Date]';\n\n/**\n * The base implementation of `_.isDate` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n */\nfunction baseIsDate(value) {\n  return isObjectLike(value) && baseGetTag(value) == dateTag;\n}\n\nmodule.exports = baseIsDate;\n","var baseIsDate = require('./_baseIsDate'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsDate = nodeUtil && nodeUtil.isDate;\n\n/**\n * Checks if `value` is classified as a `Date` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n * @example\n *\n * _.isDate(new Date);\n * // => true\n *\n * _.isDate('Mon April 23 2012');\n * // => false\n */\nvar isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\nmodule.exports = isDate;\n"],"names":["durationSecond","durationMinute","durationHour","durationDay","durationWeek","t0","Date","t1","newInterval","floori","offseti","count","field","interval","date","arguments","length","floor","ceil","round","d0","d1","offset","step","Math","range","start","stop","previous","push","filter","test","setTime","end","every","isFinite","d","month","setDate","setHours","setMonth","getMonth","getFullYear","months","weekday","i","getDate","getDay","getTimezoneOffset","sunday","monday","tuesday","wednesday","thursday","friday","saturday","sundays","year","setFullYear","k","TooltipWrapper","styled","TooltipKey","CustomTooltip","day","style","color","value","x","y","size","settingsMapper","tooltip","values","exclude","allFlavors","props","key","group","help","description","type","required","flavors","chartDimensions","defaultValue","defaults","control","choices","label","disabledValue","min","max","themeProperty","unit","isInteractive","groups","groupProperties","continuousColorsLegendDefaults","thickness","direction","tickPosition","tickSize","tickSpacing","tickOverlap","tickFormat","titleAlign","titleOffset","zeroPadding","top","right","bottom","left","computeDimensions","item","itemsSpacing","_padding","padding","itemCount","itemWidth","itemHeight","Array","isArray","Error","horizontalPadding","verticalPadding","width","height","spacing","computePositionFromAnchor","anchor","translateX","translateY","containerWidth","containerHeight","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","justify","symbolSize","symbolSpacing","computeContinuousColorsLegend","scale","ticks","title","domain","reverse","positionScale","scaleLinear","thresholds","titleX","titleY","titleRotation","titleVerticalAlign","y1","y2","textY","textVerticalAlign","x1","x2","textX","textHorizontalAlign","colorStops","computeContinuousColorScaleColorStops","formatValue","getValueFormatter","computedTicks","gradientY1","gradientX2","forEach","text","gradientX1","gradientY2","titleText","titleHorizontalAlign","ContinuousColorsLegendSvg","theme","useTheme","id","map","join","_jsxs","_jsx","colorStop","transform","textAnchor","dominantBaseline","legends","fill","tick","index","Fragment","line","AnchoredContinuousColorsLegendSvg","legendProps","symbolByShape","circle","opacity","borderWidth","borderColor","r","cx","cy","strokeWidth","stroke","pointerEvents","diamond","square","triangle","LegendSvgItem","data","textColor","background","symbolShape","symbolBorderWidth","symbolBorderColor","onClick","onMouseEnter","onMouseLeave","toggleSerie","effects","useState","setStyle","handleMouseEnter","useCallback","event","on","reduce","acc","effect","handleMouseLeave","some","handler","SymbolShape","itemOpacity","itemBackground","cursor","React","hidden","symbol","itemTextColor","userSelect","LegendSvg","itemDirection","xStep","yStep","BoxLegendSvg","textAlignMapping","middle","renderLegendToCanvas","ctx","save","translate","font","fontSize","fontFamily","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","renderContinuousColorLegendToCanvas","_ticks","initialStyles","gradient","createLinearGradient","addColorStop","stopColor","fontWeight","lineWidth","Number","axis","strokeStyle","lineCap","beginPath","moveTo","lineTo","rotate","degreesToRadians","useQuantizeColorScaleLegendData","overriddenDomain","valueFormat","v","separator","useMemo","items","domainValue","invertExtent","extent","LegendPropShape","PropTypes","isRequired","baseGetTag","isObjectLike","module","exports","baseIsDate","baseUnary","nodeUtil","nodeIsDate","isDate"],"sourceRoot":""}