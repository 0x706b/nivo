{"version":3,"file":"1f68b3e64516d3ade5b605ae0c7db3cedc68dc17-d932e60ca46550c51010.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-chord/src/math.js","webpack://nivo-website/../node_modules/d3-chord/src/chord.js","webpack://nivo-website/../node_modules/d3-chord/src/array.js","webpack://nivo-website/../node_modules/d3-chord/src/constant.js","webpack://nivo-website/../node_modules/d3-chord/src/ribbon.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack://nivo-website/../src/ChordArcTooltip.js","webpack://nivo-website/../src/ChordRibbonTooltip.js","webpack://nivo-website/../src/props.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://nivo-website/../src/compute.js","webpack://nivo-website/../src/hooks.js","webpack://nivo-website/../src/ChordRibbon.js","webpack://nivo-website/../src/ChordRibbons.js","webpack://nivo-website/../src/ChordArc.js","webpack://nivo-website/../src/ChordArcs.js","webpack://nivo-website/../src/ChordLabels.js","webpack://nivo-website/../src/Chord.js","webpack://nivo-website/../src/ChordCanvas.js","webpack://nivo-website/../src/ResponsiveChord.js","webpack://nivo-website/../src/ResponsiveChordCanvas.js","webpack://nivo-website/../node_modules/d3-array/src/ascending.js","webpack://nivo-website/../node_modules/d3-array/src/bisector.js","webpack://nivo-website/../node_modules/d3-array/src/bisect.js","webpack://nivo-website/../node_modules/d3-array/src/array.js","webpack://nivo-website/../node_modules/d3-array/src/ticks.js","webpack://nivo-website/../node_modules/d3-array/src/merge.js","webpack://nivo-website/../node_modules/d3-array/src/range.js","webpack://nivo-website/../node_modules/lodash/mapValues.js"],"sourcesContent":["export var cos = Math.cos;\nexport var sin = Math.sin;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var tau = pi * 2;\nexport var max = Math.max;","import { range } from \"d3-array\";\nimport { max, tau } from \"./math\";\n\nfunction compareValue(compare) {\n  return function (a, b) {\n    return compare(a.source.value + a.target.value, b.source.value + b.target.value);\n  };\n}\n\nexport default function () {\n  var padAngle = 0,\n      sortGroups = null,\n      sortSubgroups = null,\n      sortChords = null;\n\n  function chord(matrix) {\n    var n = matrix.length,\n        groupSums = [],\n        groupIndex = range(n),\n        subgroupIndex = [],\n        chords = [],\n        groups = chords.groups = new Array(n),\n        subgroups = new Array(n * n),\n        k,\n        x,\n        x0,\n        dx,\n        i,\n        j; // Compute the sum.\n\n    k = 0, i = -1;\n\n    while (++i < n) {\n      x = 0, j = -1;\n\n      while (++j < n) {\n        x += matrix[i][j];\n      }\n\n      groupSums.push(x);\n      subgroupIndex.push(range(n));\n      k += x;\n    } // Sort groups…\n\n\n    if (sortGroups) groupIndex.sort(function (a, b) {\n      return sortGroups(groupSums[a], groupSums[b]);\n    }); // Sort subgroups…\n\n    if (sortSubgroups) subgroupIndex.forEach(function (d, i) {\n      d.sort(function (a, b) {\n        return sortSubgroups(matrix[i][a], matrix[i][b]);\n      });\n    }); // Convert the sum to scaling factor for [0, 2pi].\n    // TODO Allow start and end angle to be specified?\n    // TODO Allow padding to be specified as percentage?\n\n    k = max(0, tau - padAngle * n) / k;\n    dx = k ? padAngle : tau / n; // Compute the start and end angle for each group and subgroup.\n    // Note: Opera has a bug reordering object literal properties!\n\n    x = 0, i = -1;\n\n    while (++i < n) {\n      x0 = x, j = -1;\n\n      while (++j < n) {\n        var di = groupIndex[i],\n            dj = subgroupIndex[di][j],\n            v = matrix[di][dj],\n            a0 = x,\n            a1 = x += v * k;\n        subgroups[dj * n + di] = {\n          index: di,\n          subindex: dj,\n          startAngle: a0,\n          endAngle: a1,\n          value: v\n        };\n      }\n\n      groups[di] = {\n        index: di,\n        startAngle: x0,\n        endAngle: x,\n        value: groupSums[di]\n      };\n      x += dx;\n    } // Generate chords for each (non-empty) subgroup-subgroup link.\n\n\n    i = -1;\n\n    while (++i < n) {\n      j = i - 1;\n\n      while (++j < n) {\n        var source = subgroups[j * n + i],\n            target = subgroups[i * n + j];\n\n        if (source.value || target.value) {\n          chords.push(source.value < target.value ? {\n            source: target,\n            target: source\n          } : {\n            source: source,\n            target: target\n          });\n        }\n      }\n    }\n\n    return sortChords ? chords.sort(sortChords) : chords;\n  }\n\n  chord.padAngle = function (_) {\n    return arguments.length ? (padAngle = max(0, _), chord) : padAngle;\n  };\n\n  chord.sortGroups = function (_) {\n    return arguments.length ? (sortGroups = _, chord) : sortGroups;\n  };\n\n  chord.sortSubgroups = function (_) {\n    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\n  };\n\n  chord.sortChords = function (_) {\n    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\n  };\n\n  return chord;\n}","export var slice = Array.prototype.slice;","export default function (x) {\n  return function () {\n    return x;\n  };\n}","import { slice } from \"./array\";\nimport constant from \"./constant\";\nimport { cos, halfPi, sin } from \"./math\";\nimport { path } from \"d3-path\";\n\nfunction defaultSource(d) {\n  return d.source;\n}\n\nfunction defaultTarget(d) {\n  return d.target;\n}\n\nfunction defaultRadius(d) {\n  return d.radius;\n}\n\nfunction defaultStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction defaultEndAngle(d) {\n  return d.endAngle;\n}\n\nexport default function () {\n  var source = defaultSource,\n      target = defaultTarget,\n      radius = defaultRadius,\n      startAngle = defaultStartAngle,\n      endAngle = defaultEndAngle,\n      context = null;\n\n  function ribbon() {\n    var buffer,\n        argv = slice.call(arguments),\n        s = source.apply(this, argv),\n        t = target.apply(this, argv),\n        sr = +radius.apply(this, (argv[0] = s, argv)),\n        sa0 = startAngle.apply(this, argv) - halfPi,\n        sa1 = endAngle.apply(this, argv) - halfPi,\n        sx0 = sr * cos(sa0),\n        sy0 = sr * sin(sa0),\n        tr = +radius.apply(this, (argv[0] = t, argv)),\n        ta0 = startAngle.apply(this, argv) - halfPi,\n        ta1 = endAngle.apply(this, argv) - halfPi;\n    if (!context) context = buffer = path();\n    context.moveTo(sx0, sy0);\n    context.arc(0, 0, sr, sa0, sa1);\n\n    if (sa0 !== ta0 || sa1 !== ta1) {\n      // TODO sr !== tr?\n      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));\n      context.arc(0, 0, tr, ta0, ta1);\n    }\n\n    context.quadraticCurveTo(0, 0, sx0, sy0);\n    context.closePath();\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  ribbon.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), ribbon) : radius;\n  };\n\n  ribbon.startAngle = function (_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : startAngle;\n  };\n\n  ribbon.endAngle = function (_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : endAngle;\n  };\n\n  ribbon.source = function (_) {\n    return arguments.length ? (source = _, ribbon) : source;\n  };\n\n  ribbon.target = function (_) {\n    return arguments.length ? (target = _, ribbon) : target;\n  };\n\n  ribbon.context = function (_) {\n    return arguments.length ? (context = _ == null ? null : _, ribbon) : context;\n  };\n\n  return ribbon;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst ChordArcTooltip = memo(({ arc }) => {\n    return (\n        <BasicTooltip\n            id={arc.label}\n            value={arc.formattedValue}\n            color={arc.color}\n            enableChip={true}\n        />\n    )\n})\n\nChordArcTooltip.displayName = 'ChordArcTooltip'\nChordArcTooltip.propTypes = {\n    arc: PropTypes.object.isRequired,\n}\n\nexport default ChordArcTooltip\n","import { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@nivo/core'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\n\nconst ChordRibbonTooltip = memo(({ ribbon }) => {\n    const theme = useTheme()\n\n    return (\n        <TableTooltip\n            theme={theme}\n            rows={[\n                [\n                    <Chip key=\"chip\" color={ribbon.source.color} />,\n                    <strong key=\"id\">{ribbon.source.label}</strong>,\n                    ribbon.source.formattedValue,\n                ],\n                [\n                    <Chip key=\"chip\" color={ribbon.target.color} />,\n                    <strong key=\"id\">{ribbon.target.label}</strong>,\n                    ribbon.target.formattedValue,\n                ],\n            ]}\n        />\n    )\n})\n\nChordRibbonTooltip.displayName = 'ChordRibbonTooltip'\nChordRibbonTooltip.propTypes = {\n    ribbon: PropTypes.object.isRequired,\n}\n\nexport default ChordRibbonTooltip\n","import PropTypes from 'prop-types'\nimport { blendModePropType, motionPropTypes } from '@nivo/core'\nimport { ordinalColorsPropType, inheritedColorPropType } from '@nivo/colors'\nimport { LegendPropShape } from '@nivo/legends'\nimport ChordArcTooltip from './ChordArcTooltip'\nimport ChordRibbonTooltip from './ChordRibbonTooltip'\n\nconst commonPropTypes = {\n    keys: PropTypes.arrayOf(PropTypes.string).isRequired,\n    matrix: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n    valueFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n    padAngle: PropTypes.number.isRequired,\n    innerRadiusRatio: PropTypes.number.isRequired,\n    innerRadiusOffset: PropTypes.number.isRequired,\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf(['ribbons', 'arcs', 'labels', 'legends']),\n            PropTypes.func,\n        ])\n    ).isRequired,\n\n    arcOpacity: PropTypes.number.isRequired,\n    arcHoverOpacity: PropTypes.number.isRequired,\n    arcHoverOthersOpacity: PropTypes.number.isRequired,\n    arcBorderWidth: PropTypes.number.isRequired,\n    arcBorderColor: inheritedColorPropType.isRequired,\n    onArcMouseEnter: PropTypes.func,\n    onArcMouseMove: PropTypes.func,\n    onArcMouseLeave: PropTypes.func,\n    onArcClick: PropTypes.func,\n    arcTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    ribbonOpacity: PropTypes.number.isRequired,\n    ribbonHoverOpacity: PropTypes.number.isRequired,\n    ribbonHoverOthersOpacity: PropTypes.number.isRequired,\n    ribbonBorderWidth: PropTypes.number.isRequired,\n    ribbonBorderColor: inheritedColorPropType.isRequired,\n    ribbonBlendMode: blendModePropType.isRequired,\n    onRibbonMouseEnter: PropTypes.func,\n    onRibbonMouseMove: PropTypes.func,\n    onRibbonMouseLeave: PropTypes.func,\n    onRibbonClick: PropTypes.func,\n    ribbonTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelOffset: PropTypes.number.isRequired,\n    labelRotation: PropTypes.number.isRequired,\n    labelTextColor: inheritedColorPropType.isRequired,\n\n    colors: ordinalColorsPropType.isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n}\n\nexport const ChordPropTypes = {\n    ...commonPropTypes,\n    ...motionPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const ChordCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    padAngle: 0,\n    innerRadiusRatio: 0.9,\n    innerRadiusOffset: 0,\n\n    layers: ['ribbons', 'arcs', 'labels', 'legends'],\n\n    arcOpacity: 1,\n    arcHoverOpacity: 1,\n    arcHoverOthersOpacity: 0.15,\n    arcBorderWidth: 1,\n    arcBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n    arcTooltip: ChordArcTooltip,\n\n    ribbonOpacity: 0.5,\n    ribbonHoverOpacity: 0.85,\n    ribbonHoverOthersOpacity: 0.15,\n    ribbonBorderWidth: 1,\n    ribbonBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n    ribbonBlendMode: 'normal',\n    ribbonTooltip: ChordRibbonTooltip,\n\n    enableLabel: true,\n    label: 'id',\n    labelOffset: 12,\n    labelRotation: 0,\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    colors: { scheme: 'nivo' },\n\n    legends: [],\n\n    isInteractive: true,\n}\n\nexport const ChordDefaultProps = {\n    ...commonDefaultProps,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 15,\n    role: 'img',\n}\n\nexport const ChordCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { arc as d3Arc } from 'd3-shape'\nimport { chord as d3Chord, ribbon as d3Ribbon } from 'd3-chord'\n\nexport const computeChordLayout = ({ padAngle }) => d3Chord().padAngle(padAngle)\n\nexport const computeChordGenerators = ({ width, height, innerRadiusRatio, innerRadiusOffset }) => {\n    const center = [width / 2, height / 2]\n    const radius = Math.min(width, height) / 2\n    const innerRadius = radius * innerRadiusRatio\n    const ribbonRadius = radius * (innerRadiusRatio - innerRadiusOffset)\n\n    const arcGenerator = d3Arc().outerRadius(radius).innerRadius(innerRadius)\n\n    const ribbonGenerator = d3Ribbon().radius(ribbonRadius)\n\n    return { center, radius, innerRadius, arcGenerator, ribbonGenerator }\n}\n\nexport const computeChordArcsAndRibbons = ({\n    chord,\n    getColor,\n    keys,\n    matrix,\n    getLabel,\n    formatValue,\n}) => {\n    const ribbons = chord(matrix)\n\n    const arcs = ribbons.groups.map(arc => {\n        arc.id = keys[arc.index]\n        arc.color = getColor(arc)\n        arc.formattedValue = formatValue(arc.value)\n        arc.label = getLabel(arc)\n\n        return arc\n    })\n\n    ribbons.forEach(ribbon => {\n        ribbon.source.id = keys[ribbon.source.index]\n        ribbon.source.color = getColor(ribbon.source)\n        ribbon.source.formattedValue = formatValue(ribbon.source.value)\n        ribbon.source.label = getLabel(ribbon.source)\n\n        ribbon.target.id = keys[ribbon.target.index]\n        ribbon.target.color = getColor(ribbon.target)\n        ribbon.target.formattedValue = formatValue(ribbon.target.value)\n        ribbon.target.label = getLabel(ribbon.target)\n\n        // ensure id remains the same even if source/target are reversed\n        ribbon.id = [ribbon.source.id, ribbon.target.id].sort().join('.')\n    })\n\n    return { arcs, ribbons }\n}\n","import { useMemo, useState } from 'react'\nimport { useValueFormatter, getLabelGenerator } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { computeChordLayout, computeChordGenerators, computeChordArcsAndRibbons } from './compute'\n\nexport const useChordLayout = ({ padAngle }) =>\n    useMemo(() => computeChordLayout({ padAngle }), [padAngle])\n\nexport const useChordGenerators = ({ width, height, innerRadiusRatio, innerRadiusOffset }) =>\n    useMemo(\n        () =>\n            computeChordGenerators({\n                width,\n                height,\n                innerRadiusRatio,\n                innerRadiusOffset,\n            }),\n        [width, height, innerRadiusRatio, innerRadiusOffset]\n    )\n\nexport const useChordArcsAndRibbons = ({ chord, getColor, keys, matrix, getLabel, formatValue }) =>\n    useMemo(\n        () =>\n            computeChordArcsAndRibbons({\n                chord,\n                getColor,\n                keys,\n                matrix,\n                getLabel,\n                formatValue,\n            }),\n        [chord, getColor, keys, matrix, getLabel, formatValue]\n    )\n\nexport const useChord = ({\n    keys,\n    matrix,\n    label,\n    valueFormat,\n    width,\n    height,\n    innerRadiusRatio,\n    innerRadiusOffset,\n    padAngle,\n    colors,\n}) => {\n    const chord = useChordLayout({ padAngle })\n    const { center, radius, innerRadius, arcGenerator, ribbonGenerator } = useChordGenerators({\n        width,\n        height,\n        innerRadiusRatio,\n        innerRadiusOffset,\n    })\n    const getLabel = useMemo(() => getLabelGenerator(label), [label])\n    const formatValue = useValueFormatter(valueFormat)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const { arcs, ribbons } = useChordArcsAndRibbons({\n        chord,\n        getColor,\n        keys,\n        matrix,\n        getLabel,\n        formatValue,\n    })\n\n    return {\n        center,\n        chord,\n        radius,\n        innerRadius,\n        arcGenerator,\n        ribbonGenerator,\n        getColor,\n        arcs,\n        ribbons,\n    }\n}\n\nexport const useChordSelection = ({\n    arcs,\n    arcOpacity,\n    arcHoverOpacity,\n    arcHoverOthersOpacity,\n    ribbons,\n    ribbonOpacity,\n    ribbonHoverOpacity,\n    ribbonHoverOthersOpacity,\n}) => {\n    const [currentArc, setCurrentArc] = useState(null)\n    const [currentRibbon, setCurrentRibbon] = useState(null)\n\n    const selection = useMemo(() => {\n        const selectedArcIds = []\n        const selectedRibbonIds = []\n\n        if (currentArc) {\n            selectedArcIds.push(currentArc.id)\n            ribbons\n                .filter(\n                    ribbon =>\n                        ribbon.source.id === currentArc.id || ribbon.target.id === currentArc.id\n                )\n                .forEach(ribbon => {\n                    selectedRibbonIds.push(ribbon.id)\n                })\n        }\n\n        if (currentRibbon) {\n            selectedArcIds.push(currentRibbon.source.id)\n            selectedArcIds.push(currentRibbon.target.id)\n            selectedRibbonIds.push(currentRibbon.id)\n        }\n\n        return { selectedArcIds, selectedRibbonIds }\n    }, [currentArc, currentRibbon, arcs, ribbons])\n\n    const hasSelection =\n        selection.selectedArcIds.length > 1 || selection.selectedRibbonIds.length > 0\n\n    const getArcOpacity = useMemo(\n        () => arc => {\n            if (!hasSelection) return arcOpacity\n            return selection.selectedArcIds.includes(arc.id)\n                ? arcHoverOpacity\n                : arcHoverOthersOpacity\n        },\n        [selection.selectedArcIds, arcOpacity, arcHoverOpacity, arcHoverOthersOpacity]\n    )\n    const getRibbonOpacity = useMemo(\n        () => ribbon => {\n            if (!hasSelection) return ribbonOpacity\n            return selection.selectedRibbonIds.includes(ribbon.id)\n                ? ribbonHoverOpacity\n                : ribbonHoverOthersOpacity\n        },\n        [selection.selectedRibbonIds, ribbonOpacity, ribbonHoverOpacity, ribbonHoverOthersOpacity]\n    )\n\n    return {\n        currentArc,\n        setCurrentArc,\n        currentRibbon,\n        setCurrentRibbon,\n        hasSelection,\n        ...selection,\n        getArcOpacity,\n        getRibbonOpacity,\n    }\n}\n\nexport const useChordLayerContext = ({\n    center,\n    radius,\n    arcs,\n    arcGenerator,\n    ribbons,\n    ribbonGenerator,\n}) =>\n    useMemo(\n        () => ({\n            center,\n            radius,\n            arcs,\n            arcGenerator,\n            ribbons,\n            ribbonGenerator,\n        }),\n        [center, radius, arcs, arcGenerator, ribbons, ribbonGenerator]\n    )\n","import { createElement, memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { blendModePropType } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst ChordRibbon = memo(\n    ({\n        ribbon,\n        ribbonGenerator,\n        sourceStartAngle,\n        sourceEndAngle,\n        targetStartAngle,\n        targetEndAngle,\n        color,\n        opacity,\n        borderWidth,\n        getBorderColor,\n        blendMode,\n        isInteractive,\n        setCurrent,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useMemo(() => {\n            if (!isInteractive) return undefined\n            return event => {\n                setCurrent(ribbon)\n                showTooltipFromEvent(createElement(tooltip, { ribbon }), event)\n                onMouseEnter && onMouseEnter(ribbon, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, ribbon, onMouseEnter])\n        const handleMouseMove = useMemo(() => {\n            if (!isInteractive) return undefined\n            return event => {\n                showTooltipFromEvent(createElement(tooltip, { ribbon }), event)\n                onMouseMove && onMouseMove(ribbon, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, ribbon, onMouseMove])\n        const handleMouseLeave = useMemo(() => {\n            if (!isInteractive) return undefined\n            return event => {\n                setCurrent(null)\n                hideTooltip()\n                onMouseLeave && onMouseLeave(ribbon, event)\n            }\n        }, [isInteractive, hideTooltip, ribbon, onMouseLeave])\n        const handleClick = useMemo(() => {\n            if (!isInteractive || !onClick) return undefined\n            return event => onClick(ribbon, event)\n        }, [isInteractive, ribbon, onClick])\n\n        return (\n            <path\n                d={ribbonGenerator({\n                    source: {\n                        startAngle: sourceStartAngle,\n                        endAngle: sourceEndAngle,\n                    },\n                    target: {\n                        startAngle: targetStartAngle,\n                        endAngle: targetEndAngle,\n                    },\n                })}\n                fill={color}\n                fillOpacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={getBorderColor({ ...ribbon, color })}\n                strokeOpacity={opacity}\n                style={{ mixBlendMode: blendMode }}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n\nChordRibbon.displayName = 'ChordRibbon'\nChordRibbon.propTypes = {\n    ribbon: PropTypes.object.isRequired,\n    ribbonGenerator: PropTypes.func.isRequired,\n    sourceStartAngle: PropTypes.number.isRequired,\n    sourceEndAngle: PropTypes.number.isRequired,\n    targetStartAngle: PropTypes.number.isRequired,\n    targetEndAngle: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    blendMode: blendModePropType.isRequired,\n    opacity: PropTypes.number.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    getBorderColor: PropTypes.func.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n}\n\nexport default ChordRibbon\n","import { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport mapValues from 'lodash/mapValues'\nimport { TransitionMotion, spring } from 'react-motion'\nimport { blendModePropType, midAngle, useMotionConfig } from '@nivo/core'\nimport { interpolateColor, getInterpolatedColor } from '@nivo/colors'\nimport ChordRibbon from './ChordRibbon'\n\n/**\n * Used to get ribbon angles, instead of using source and target arcs,\n * we sort arcs by value to have smooth transitions, otherwise,\n * if source|target arc value becomes greater than the other,\n * the ribbon will be reversed.\n *\n * @param {Object}  source\n * @param {Object}  target\n * @param {boolean} useMiddleAngle\n * @param {Object}  [springConfig]\n * @return {Object}\n */\nconst getRibbonAngles = ({ source, target }, useMiddleAngle, springConfig) => {\n    let firstArc\n    let secondArc\n    if (source.startAngle < target.startAngle) {\n        firstArc = source\n        secondArc = target\n    } else {\n        firstArc = target\n        secondArc = source\n    }\n\n    let angles\n    if (useMiddleAngle === true) {\n        const firstMiddleAngle = midAngle(firstArc)\n        const secondMiddleAngle = midAngle(secondArc)\n\n        angles = {\n            sourceStartAngle: firstMiddleAngle,\n            sourceEndAngle: firstMiddleAngle,\n            targetStartAngle: secondMiddleAngle,\n            targetEndAngle: secondMiddleAngle,\n        }\n    } else {\n        angles = {\n            sourceStartAngle: firstArc.startAngle,\n            sourceEndAngle: firstArc.endAngle,\n            targetStartAngle: secondArc.startAngle,\n            targetEndAngle: secondArc.endAngle,\n        }\n    }\n\n    if (!springConfig) return angles\n\n    return mapValues(angles, angle => spring(angle, springConfig))\n}\n\nconst ribbonWillEnter = ({ data: ribbon }) => ({\n    ...getRibbonAngles(ribbon, true),\n    opacity: 0,\n    ...interpolateColor(ribbon.source.color),\n})\n\nconst ribbonWillLeave = springConfig => ({ data: ribbon }) => ({\n    ...getRibbonAngles(ribbon, true, springConfig),\n    opacity: 0,\n    ...interpolateColor(ribbon.source.color, springConfig),\n})\n\nconst ChordRibbons = memo(\n    ({\n        ribbons,\n        ribbonGenerator,\n        borderWidth,\n        getBorderColor,\n        getOpacity,\n        blendMode,\n        isInteractive,\n        setCurrent,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }) => {\n        const { animate, springConfig: _springConfig } = useMotionConfig()\n\n        if (animate !== true) {\n            return (\n                <g>\n                    {ribbons.map(ribbon => {\n                        return (\n                            <ChordRibbon\n                                key={ribbon.id}\n                                ribbon={ribbon}\n                                ribbonGenerator={ribbonGenerator}\n                                sourceStartAngle={ribbon.source.startAngle}\n                                sourceEndAngle={ribbon.source.endAngle}\n                                targetStartAngle={ribbon.target.startAngle}\n                                targetEndAngle={ribbon.target.endAngle}\n                                color={ribbon.source.color}\n                                blendMode={blendMode}\n                                opacity={getOpacity(ribbon)}\n                                borderWidth={borderWidth}\n                                getBorderColor={getBorderColor}\n                                isInteractive={isInteractive}\n                                setCurrent={setCurrent}\n                                onMouseEnter={onMouseEnter}\n                                onMouseMove={onMouseMove}\n                                onMouseLeave={onMouseLeave}\n                                onClick={onClick}\n                                tooltip={tooltip}\n                            />\n                        )\n                    })}\n                </g>\n            )\n        }\n\n        const springConfig = {\n            ..._springConfig,\n            precision: 0.001,\n        }\n\n        return (\n            <TransitionMotion\n                willEnter={ribbonWillEnter}\n                willLeave={ribbonWillLeave(springConfig)}\n                styles={ribbons.map(ribbon => {\n                    return {\n                        key: ribbon.id,\n                        data: ribbon,\n                        style: {\n                            ...getRibbonAngles(ribbon, false, springConfig),\n                            opacity: spring(getOpacity(ribbon), springConfig),\n                            ...interpolateColor(ribbon.source.color, springConfig),\n                        },\n                    }\n                })}\n            >\n                {interpolatedStyles => (\n                    <>\n                        {interpolatedStyles.map(({ key, style, data: ribbon }) => {\n                            const color = getInterpolatedColor(style)\n\n                            return (\n                                <ChordRibbon\n                                    key={key}\n                                    ribbon={ribbon}\n                                    ribbonGenerator={ribbonGenerator}\n                                    sourceStartAngle={style.sourceStartAngle}\n                                    sourceEndAngle={Math.max(\n                                        style.sourceEndAngle,\n                                        style.sourceStartAngle\n                                    )}\n                                    targetStartAngle={style.targetStartAngle}\n                                    targetEndAngle={Math.max(\n                                        style.targetEndAngle,\n                                        style.targetStartAngle\n                                    )}\n                                    color={color}\n                                    blendMode={blendMode}\n                                    opacity={style.opacity}\n                                    borderWidth={borderWidth}\n                                    getBorderColor={getBorderColor}\n                                    isInteractive={isInteractive}\n                                    setCurrent={setCurrent}\n                                    onMouseEnter={onMouseEnter}\n                                    onMouseMove={onMouseMove}\n                                    onMouseLeave={onMouseLeave}\n                                    onClick={onClick}\n                                    tooltip={tooltip}\n                                />\n                            )\n                        })}\n                    </>\n                )}\n            </TransitionMotion>\n        )\n    }\n)\n\nChordRibbons.displayName = 'ChordRibbons'\nChordRibbons.propTypes = {\n    ribbons: PropTypes.array.isRequired,\n    ribbonGenerator: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    getBorderColor: PropTypes.func.isRequired,\n    getOpacity: PropTypes.func.isRequired,\n    blendMode: blendModePropType.isRequired,\n    isInteractive: PropTypes.bool.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default ChordRibbons\n","import { createElement, memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst ChordArc = memo(\n    ({\n        arc,\n        startAngle,\n        endAngle,\n        borderWidth,\n        getBorderColor,\n        opacity,\n        arcGenerator,\n        setCurrent,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useMemo(() => {\n            if (!isInteractive) return undefined\n            return event => {\n                setCurrent(arc)\n                showTooltipFromEvent(createElement(tooltip, { arc }), event)\n                onMouseEnter && onMouseEnter(arc, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, arc, onMouseEnter])\n        const handleMouseMove = useMemo(() => {\n            if (!isInteractive) return undefined\n            return event => {\n                showTooltipFromEvent(createElement(tooltip, { arc }), event)\n                onMouseMove && onMouseMove(arc, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, arc, onMouseMove])\n        const handleMouseLeave = useMemo(() => {\n            if (!isInteractive) return undefined\n            return event => {\n                setCurrent(null)\n                hideTooltip()\n                onMouseLeave && onMouseLeave(arc, event)\n            }\n        }, [isInteractive, hideTooltip, arc, onMouseLeave])\n        const handleClick = useMemo(() => {\n            if (!isInteractive || !onClick) return undefined\n            return event => onClick(arc, event)\n        }, [isInteractive, arc, onClick])\n\n        return (\n            <path\n                d={arcGenerator({ startAngle, endAngle })}\n                fill={arc.color}\n                fillOpacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={getBorderColor(arc)}\n                strokeOpacity={opacity}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n\nChordArc.displayName = 'ChordArc'\nChordArc.propTypes = {\n    arc: PropTypes.object.isRequired,\n    startAngle: PropTypes.number.isRequired,\n    endAngle: PropTypes.number.isRequired,\n    arcGenerator: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    getBorderColor: PropTypes.func.isRequired,\n    opacity: PropTypes.number.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n}\n\nexport default ChordArc\n","import { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { TransitionMotion, spring } from 'react-motion'\nimport { interpolateColor, getInterpolatedColor } from '@nivo/colors'\nimport { useMotionConfig } from '@nivo/core'\nimport ChordArc from './ChordArc'\n\nconst ChordArcs = memo(\n    ({\n        arcs,\n        borderWidth,\n        getBorderColor,\n        getOpacity,\n        arcGenerator,\n        setCurrent,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }) => {\n        const { animate, springConfig: _springConfig } = useMotionConfig()\n\n        if (animate !== true) {\n            return arcs.map(arc => {\n                return (\n                    <ChordArc\n                        key={arc.id}\n                        arc={arc}\n                        arcGenerator={arcGenerator}\n                        startAngle={arc.startAngle}\n                        endAngle={arc.endAngle}\n                        color={arc.color}\n                        opacity={getOpacity(arc)}\n                        borderWidth={borderWidth}\n                        getBorderColor={getBorderColor}\n                        getOpacity={getOpacity}\n                        isInteractive={isInteractive}\n                        setCurrent={setCurrent}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                )\n            })\n        }\n\n        const springConfig = {\n            ..._springConfig,\n            precision: 0.001,\n        }\n\n        return (\n            <TransitionMotion\n                styles={arcs.map(arc => {\n                    return {\n                        key: arc.id,\n                        data: arc,\n                        style: {\n                            startAngle: spring(arc.startAngle, springConfig),\n                            endAngle: spring(arc.endAngle, springConfig),\n                            opacity: spring(getOpacity(arc), springConfig),\n                            ...interpolateColor(arc.color, springConfig),\n                        },\n                    }\n                })}\n            >\n                {interpolatedStyles => (\n                    <>\n                        {interpolatedStyles.map(({ key, style, data: arc }) => {\n                            const color = getInterpolatedColor(style)\n\n                            return (\n                                <ChordArc\n                                    key={key}\n                                    arc={arc}\n                                    arcGenerator={arcGenerator}\n                                    startAngle={style.startAngle}\n                                    endAngle={style.endAngle}\n                                    color={color}\n                                    opacity={style.opacity}\n                                    borderWidth={borderWidth}\n                                    getBorderColor={getBorderColor}\n                                    getOpacity={getOpacity}\n                                    isInteractive={isInteractive}\n                                    setCurrent={setCurrent}\n                                    onMouseEnter={onMouseEnter}\n                                    onMouseMove={onMouseMove}\n                                    onMouseLeave={onMouseLeave}\n                                    onClick={onClick}\n                                    tooltip={tooltip}\n                                />\n                            )\n                        })}\n                    </>\n                )}\n            </TransitionMotion>\n        )\n    }\n)\n\nChordArcs.displayName = 'ChordArcs'\nChordArcs.propTypes = {\n    arcs: PropTypes.array.isRequired,\n    arcGenerator: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    getBorderColor: PropTypes.func.isRequired,\n    getOpacity: PropTypes.func.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n}\n\nexport default ChordArcs\n","import PropTypes from 'prop-types'\nimport { TransitionMotion, spring } from 'react-motion'\nimport { midAngle, getPolarLabelProps, useTheme } from '@nivo/core'\nimport { useMotionConfig } from '@nivo/core'\n\nconst ChordLabels = ({ arcs, radius, rotation, getColor }) => {\n    const theme = useTheme()\n    const { animate, springConfig } = useMotionConfig()\n\n    if (animate !== true) {\n        return (\n            <>\n                {arcs.map(arc => {\n                    const color = getColor(arc, theme)\n                    const angle = midAngle(arc)\n                    const textProps = getPolarLabelProps(radius, angle, rotation)\n\n                    return (\n                        <text\n                            key={arc.id}\n                            transform={`translate(${textProps.x}, ${textProps.y}) rotate(${textProps.rotate})`}\n                            style={{\n                                ...theme.labels.text,\n                                pointerEvents: 'none',\n                                fill: color,\n                            }}\n                            textAnchor={textProps.align}\n                            dominantBaseline={textProps.baseline}\n                        >\n                            {arc.label}\n                        </text>\n                    )\n                })}\n            </>\n        )\n    }\n\n    return (\n        <TransitionMotion\n            styles={arcs.map(arc => {\n                const angle = midAngle(arc)\n\n                return {\n                    key: arc.id,\n                    data: arc,\n                    style: {\n                        angle: spring(angle, springConfig),\n                    },\n                }\n            })}\n        >\n            {interpolatedStyles => (\n                <>\n                    {interpolatedStyles.map(({ key, style, data: arc }) => {\n                        const color = getColor(arc, theme)\n                        const textProps = getPolarLabelProps(radius, style.angle, rotation)\n\n                        return (\n                            <text\n                                key={key}\n                                transform={`translate(${textProps.x}, ${textProps.y}) rotate(${textProps.rotate})`}\n                                style={{\n                                    ...theme.labels.text,\n                                    pointerEvents: 'none',\n                                    fill: color,\n                                }}\n                                textAnchor={textProps.align}\n                                dominantBaseline={textProps.baseline}\n                            >\n                                {arc.label}\n                            </text>\n                        )\n                    })}\n                </>\n            )}\n        </TransitionMotion>\n    )\n}\n\nChordLabels.propTypes = {\n    arcs: PropTypes.array.isRequired,\n    radius: PropTypes.number.isRequired,\n    rotation: PropTypes.number.isRequired,\n    getColor: PropTypes.func.isRequired,\n}\n\nexport default ChordLabels\n","import { Fragment } from 'react'\nimport { withContainer, SvgWrapper, useDimensions, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { ChordPropTypes, ChordDefaultProps } from './props'\nimport { useChord, useChordSelection, useChordLayerContext } from './hooks'\nimport ChordRibbons from './ChordRibbons'\nimport ChordArcs from './ChordArcs'\nimport ChordLabels from './ChordLabels'\n\nconst Chord = ({\n    margin: partialMargin,\n    width,\n    height,\n\n    keys,\n    matrix,\n    label,\n    valueFormat,\n    innerRadiusRatio,\n    innerRadiusOffset,\n    padAngle,\n\n    layers,\n\n    colors,\n\n    arcBorderWidth,\n    arcBorderColor,\n    arcOpacity,\n    arcHoverOpacity,\n    arcHoverOthersOpacity,\n    arcTooltip,\n\n    ribbonBorderWidth,\n    ribbonBorderColor,\n    ribbonBlendMode,\n    ribbonOpacity,\n    ribbonHoverOpacity,\n    ribbonHoverOthersOpacity,\n    ribbonTooltip,\n\n    enableLabel,\n    labelOffset,\n    labelRotation,\n    labelTextColor,\n\n    isInteractive,\n    onArcMouseEnter,\n    onArcMouseMove,\n    onArcMouseLeave,\n    onArcClick,\n    onRibbonMouseEnter,\n    onRibbonMouseMove,\n    onRibbonMouseLeave,\n    onRibbonClick,\n\n    legends,\n    role,\n}) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { center, radius, arcGenerator, ribbonGenerator, arcs, ribbons } = useChord({\n        keys,\n        matrix,\n        label,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        innerRadiusRatio,\n        innerRadiusOffset,\n        padAngle,\n        colors,\n    })\n\n    const { setCurrentArc, setCurrentRibbon, getArcOpacity, getRibbonOpacity } = useChordSelection({\n        arcs,\n        arcOpacity,\n        arcHoverOpacity,\n        arcHoverOthersOpacity,\n        ribbons,\n        ribbonOpacity,\n        ribbonHoverOpacity,\n        ribbonHoverOthersOpacity,\n    })\n\n    const theme = useTheme()\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const getArcBorderColor = useInheritedColor(arcBorderColor, theme)\n    const getRibbonBorderColor = useInheritedColor(ribbonBorderColor, theme)\n\n    const layerContext = useChordLayerContext({\n        center,\n        radius,\n        arcs,\n        arcGenerator,\n        ribbons,\n        ribbonGenerator,\n    })\n\n    if (radius <= 0) return null\n\n    const legendData = arcs.map(arc => ({\n        id: arc.id,\n        label: arc.label,\n        color: arc.color,\n    }))\n\n    const layerById = {\n        ribbons: (\n            <g key=\"ribbons\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordRibbons\n                    ribbons={ribbons}\n                    ribbonGenerator={ribbonGenerator}\n                    borderWidth={ribbonBorderWidth}\n                    getBorderColor={getRibbonBorderColor}\n                    getOpacity={getRibbonOpacity}\n                    blendMode={ribbonBlendMode}\n                    setCurrent={setCurrentRibbon}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onRibbonMouseEnter}\n                    onMouseMove={onRibbonMouseMove}\n                    onMouseLeave={onRibbonMouseLeave}\n                    onClick={onRibbonClick}\n                    tooltip={ribbonTooltip}\n                />\n            </g>\n        ),\n        arcs: (\n            <g key=\"arcs\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordArcs\n                    arcs={arcs}\n                    arcGenerator={arcGenerator}\n                    borderWidth={arcBorderWidth}\n                    getBorderColor={getArcBorderColor}\n                    getOpacity={getArcOpacity}\n                    setCurrent={setCurrentArc}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onArcMouseEnter}\n                    onMouseMove={onArcMouseMove}\n                    onMouseLeave={onArcMouseLeave}\n                    onClick={onArcClick}\n                    tooltip={arcTooltip}\n                />\n            </g>\n        ),\n        labels: null,\n        legends: (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                        theme={theme}\n                    />\n                ))}\n            </Fragment>\n        ),\n    }\n\n    if (enableLabel === true) {\n        layerById.labels = (\n            <g key=\"labels\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordLabels\n                    arcs={arcs}\n                    radius={radius + labelOffset}\n                    rotation={labelRotation}\n                    getColor={getLabelTextColor}\n                />\n            </g>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            theme={theme}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer] !== undefined) {\n                    return layerById[layer]\n                }\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{layer(layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nChord.propTypes = ChordPropTypes\nChord.defaultProps = ChordDefaultProps\n\nexport default withContainer(Chord)\n","import { createElement, memo, useRef, useEffect, useCallback } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    midAngle,\n    getPolarLabelProps,\n    degreesToRadians,\n    getRelativeCursor,\n} from '@nivo/core'\nimport { findArcUnderCursor } from '@nivo/arcs'\nimport { useInheritedColor } from '@nivo/colors'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useChord, useChordSelection, useChordLayerContext } from './hooks'\nimport { ChordCanvasPropTypes, ChordCanvasDefaultProps } from './props'\n\nconst getArcFromMouseEvent = ({ event, canvasEl, center, margin, radius, innerRadius, arcs }) => {\n    const [x, y] = getRelativeCursor(canvasEl, event)\n    const centerX = margin.left + center[0]\n    const centerY = margin.top + center[1]\n\n    return findArcUnderCursor(centerX, centerY, radius, innerRadius, arcs, x, y)\n}\n\nconst ChordCanvas = memo(\n    ({\n        pixelRatio,\n        margin: partialMargin,\n        width,\n        height,\n        keys,\n        matrix,\n        label,\n        valueFormat,\n        innerRadiusRatio,\n        innerRadiusOffset,\n        padAngle,\n        layers,\n        colors,\n        arcBorderWidth,\n        arcBorderColor,\n        arcOpacity,\n        arcHoverOpacity,\n        arcHoverOthersOpacity,\n        arcTooltip,\n        ribbonBorderWidth,\n        ribbonBorderColor,\n        ribbonOpacity,\n        ribbonHoverOpacity,\n        ribbonHoverOthersOpacity,\n        enableLabel,\n        labelOffset,\n        labelRotation,\n        labelTextColor,\n        isInteractive,\n        onArcMouseEnter,\n        onArcMouseMove,\n        onArcMouseLeave,\n        onArcClick,\n        legends,\n    }) => {\n        const canvasEl = useRef(null)\n        const { innerWidth, innerHeight, outerWidth, outerHeight, margin } = useDimensions(\n            width,\n            height,\n            partialMargin\n        )\n\n        const {\n            center,\n            radius,\n            innerRadius,\n            arcGenerator,\n            ribbonGenerator,\n            arcs,\n            ribbons,\n        } = useChord({\n            keys,\n            matrix,\n            label,\n            valueFormat,\n            width: innerWidth,\n            height: innerHeight,\n            innerRadiusRatio,\n            innerRadiusOffset,\n            padAngle,\n            colors,\n        })\n\n        const { currentArc, setCurrentArc, getArcOpacity, getRibbonOpacity } = useChordSelection({\n            arcs,\n            arcOpacity,\n            arcHoverOpacity,\n            arcHoverOthersOpacity,\n            ribbons,\n            ribbonOpacity,\n            ribbonHoverOpacity,\n            ribbonHoverOthersOpacity,\n        })\n\n        const theme = useTheme()\n        const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n        const getArcBorderColor = useInheritedColor(arcBorderColor, theme)\n        const getRibbonBorderColor = useInheritedColor(ribbonBorderColor, theme)\n\n        const layerContext = useChordLayerContext({\n            center,\n            radius,\n            arcs,\n            arcGenerator,\n            ribbons,\n            ribbonGenerator,\n        })\n\n        useEffect(() => {\n            canvasEl.current.width = outerWidth * pixelRatio\n            canvasEl.current.height = outerHeight * pixelRatio\n\n            const ctx = canvasEl.current.getContext('2d')\n\n            ctx.scale(pixelRatio, pixelRatio)\n\n            ctx.fillStyle = theme.background\n            ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n            if (radius <= 0) return\n\n            layers.forEach(layer => {\n                if (layer === 'ribbons') {\n                    ctx.save()\n                    ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                    ribbonGenerator.context(ctx)\n                    ribbons.forEach(ribbon => {\n                        ctx.save()\n\n                        ctx.globalAlpha = getRibbonOpacity(ribbon)\n                        ctx.fillStyle = ribbon.source.color\n                        ctx.beginPath()\n                        ribbonGenerator(ribbon)\n                        ctx.fill()\n\n                        if (ribbonBorderWidth > 0) {\n                            ctx.strokeStyle = getRibbonBorderColor({\n                                ...ribbon,\n                                color: ribbon.source.color,\n                            })\n                            ctx.lineWidth = ribbonBorderWidth\n                            ctx.stroke()\n                        }\n\n                        ctx.restore()\n                    })\n\n                    ctx.restore()\n                }\n\n                if (layer === 'arcs') {\n                    ctx.save()\n                    ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                    arcGenerator.context(ctx)\n                    arcs.forEach(arc => {\n                        ctx.save()\n\n                        ctx.globalAlpha = getArcOpacity(arc)\n                        ctx.fillStyle = arc.color\n                        ctx.beginPath()\n                        arcGenerator(arc)\n                        ctx.fill()\n\n                        if (arcBorderWidth > 0) {\n                            ctx.strokeStyle = getArcBorderColor(arc)\n                            ctx.lineWidth = arcBorderWidth\n                            ctx.stroke()\n                        }\n\n                        ctx.restore()\n                    })\n\n                    ctx.restore()\n                }\n\n                if (layer === 'labels' && enableLabel === true) {\n                    ctx.save()\n                    ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                    ctx.font = `${theme.labels.text.fontSize}px ${\n                        theme.labels.text.fontFamily || 'sans-serif'\n                    }`\n\n                    arcs.forEach(arc => {\n                        const angle = midAngle(arc)\n                        const props = getPolarLabelProps(radius + labelOffset, angle, labelRotation)\n\n                        ctx.save()\n                        ctx.translate(props.x, props.y)\n                        ctx.rotate(degreesToRadians(props.rotate))\n\n                        ctx.textAlign = props.align\n                        ctx.textBaseline = props.baseline\n                        ctx.fillStyle = getLabelTextColor(arc, theme)\n                        ctx.fillText(arc.label, 0, 0)\n\n                        ctx.restore()\n                    })\n\n                    ctx.restore()\n                }\n\n                if (layer === 'legends') {\n                    ctx.save()\n                    ctx.translate(margin.left, margin.top)\n\n                    const legendData = arcs.map(arc => ({\n                        id: arc.id,\n                        label: arc.label,\n                        color: arc.color,\n                    }))\n\n                    legends.forEach(legend => {\n                        renderLegendToCanvas(ctx, {\n                            ...legend,\n                            data: legendData,\n                            containerWidth: innerWidth,\n                            containerHeight: innerHeight,\n                            theme,\n                        })\n                    })\n\n                    ctx.restore()\n                }\n\n                if (typeof layer === 'function') {\n                    layer(ctx, layerContext)\n                }\n            })\n        }, [\n            canvasEl,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            margin,\n            pixelRatio,\n            theme,\n            layers,\n            arcs,\n            arcGenerator,\n            getArcOpacity,\n            arcBorderWidth,\n            getArcBorderColor,\n            ribbons,\n            ribbonGenerator,\n            getRibbonOpacity,\n            ribbonBorderWidth,\n            getRibbonBorderColor,\n            enableLabel,\n            labelOffset,\n            labelRotation,\n            getLabelTextColor,\n            legends,\n            layerContext,\n        ])\n\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseHover = useCallback(\n            event => {\n                const arc = getArcFromMouseEvent({\n                    event,\n                    canvasEl: canvasEl.current,\n                    center,\n                    margin,\n                    radius,\n                    innerRadius,\n                    arcs,\n                })\n\n                if (arc) {\n                    setCurrentArc(arc)\n                    showTooltipFromEvent(createElement(arcTooltip, { arc }), event)\n                    !currentArc && onArcMouseEnter && onArcMouseEnter(arc, event)\n                    onArcMouseMove && onArcMouseMove(arc, event)\n                    currentArc &&\n                        currentArc.id !== arc.id &&\n                        onArcMouseLeave &&\n                        onArcMouseLeave(arc, event)\n                } else {\n                    setCurrentArc(null)\n                    hideTooltip()\n                    currentArc && onArcMouseLeave && onArcMouseLeave(currentArc, event)\n                }\n            },\n            [\n                canvasEl,\n                center,\n                margin,\n                radius,\n                innerRadius,\n                arcs,\n                setCurrentArc,\n                showTooltipFromEvent,\n                hideTooltip,\n                onArcMouseEnter,\n                onArcMouseMove,\n                onArcMouseLeave,\n            ]\n        )\n\n        const handleMouseLeave = useCallback(() => {\n            setCurrentArc(null)\n            hideTooltip()\n        }, [setCurrentArc, hideTooltip])\n\n        const handleClick = useCallback(\n            event => {\n                if (!onArcClick) return\n\n                const arc = getArcFromMouseEvent({\n                    event,\n                    canvasEl: canvasEl.current,\n                    center,\n                    margin,\n                    radius,\n                    innerRadius,\n                    arcs,\n                })\n\n                arc && onArcClick(arc, event)\n            },\n            [canvasEl, center, margin, radius, innerRadius, arcs, onArcClick]\n        )\n\n        return (\n            <canvas\n                ref={canvasEl}\n                width={outerWidth * pixelRatio}\n                height={outerHeight * pixelRatio}\n                style={{\n                    width: outerWidth,\n                    height: outerHeight,\n                    cursor: isInteractive ? 'auto' : 'normal',\n                }}\n                onMouseEnter={isInteractive ? handleMouseHover : undefined}\n                onMouseMove={isInteractive ? handleMouseHover : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n            />\n        )\n    }\n)\n\nChordCanvas.propTypes = ChordCanvasPropTypes\nChordCanvas.defaultProps = ChordCanvasDefaultProps\n\nexport default withContainer(ChordCanvas)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport Chord from './Chord'\n\nconst ResponsiveChord = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Chord width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChord\n","import { ResponsiveWrapper } from '@nivo/core'\nimport ChordCanvas from './ChordCanvas'\n\nconst ResponsiveChordCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ChordCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChordCanvas\n","export default function (a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}","import ascending from \"./ascending\";\nexport default function (compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function left(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      }\n\n      return lo;\n    },\n    right: function right(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;\n      }\n\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function (d, x) {\n    return ascending(f(d), x);\n  };\n}","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;","var array = Array.prototype;\nexport var slice = array.slice;\nexport var map = array.map;","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\nexport default function (start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n\n    while (++i < n) {\n      ticks[i] = (start + i) * step;\n    }\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n\n    while (++i < n) {\n      ticks[i] = (start - i) / step;\n    }\n  }\n\n  if (reverse) ticks.reverse();\n  return ticks;\n}\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}","export default function (arrays) {\n  var n = arrays.length,\n      m,\n      i = -1,\n      j = 0,\n      merged,\n      array;\n\n  while (++i < n) {\n    j += arrays[i].length;\n  }\n\n  merged = new Array(j);\n\n  while (--n >= 0) {\n    array = arrays[n];\n    m = array.length;\n\n    while (--m >= 0) {\n      merged[--j] = array[m];\n    }\n  }\n\n  return merged;\n}","export default function (start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}","var baseAssignValue = require('./_baseAssignValue'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee');\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nmodule.exports = mapValues;\n"],"names":["cos","Math","sin","pi","PI","halfPi","tau","max","compareValue","compare","a","b","source","value","target","slice","Array","prototype","x","defaultSource","d","defaultTarget","defaultRadius","radius","defaultStartAngle","startAngle","defaultEndAngle","endAngle","_defineProperty","obj","key","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","i","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","ChordArcTooltip","memo","arc","id","color","enableChip","ChordRibbonTooltip","ribbon","theme","useTheme","rows","label","commonPropTypes","PropTypes","matrix","valueFormat","padAngle","innerRadiusRatio","innerRadiusOffset","layers","arcOpacity","arcHoverOpacity","arcHoverOthersOpacity","arcBorderWidth","arcBorderColor","inheritedColorPropType","onArcMouseEnter","onArcMouseMove","onArcMouseLeave","onArcClick","arcTooltip","ribbonOpacity","ribbonHoverOpacity","ribbonHoverOthersOpacity","ribbonBorderWidth","ribbonBorderColor","ribbonBlendMode","blendModePropType","onRibbonMouseEnter","onRibbonMouseMove","onRibbonMouseLeave","onRibbonClick","ribbonTooltip","enableLabel","labelOffset","labelRotation","labelTextColor","colors","ordinalColorsPropType","isInteractive","legends","isRequired","commonDefaultProps","role","pixelRatio","from","modifiers","scheme","ChordDefaultProps","animate","motionStiffness","motionDamping","ChordCanvasDefaultProps","window","_arrayLikeToArray","arr","len","arr2","_slicedToArray","isArray","arrayWithHoles","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","iterableToArrayLimit","o","minLen","arrayLikeToArray","n","toString","call","constructor","name","test","unsupportedIterableToArray","TypeError","nonIterableRest","computeChordLayout","sortGroups","sortSubgroups","sortChords","chord","k","x0","dx","j","groupSums","groupIndex","subgroupIndex","chords","groups","subgroups","sort","di","dj","v","a0","a1","index","subindex","_","d3Chord","computeChordGenerators","width","height","center","innerRadius","ribbonRadius","arcGenerator","d3Arc","ribbonGenerator","context","buffer","argv","s","this","t","sr","sa0","sa1","sx0","sy0","tr","ta0","ta1","moveTo","quadraticCurveTo","closePath","constant","d3Ribbon","useChord","useMemo","useChordLayout","useChordGenerators","getLabel","getLabelGenerator","formatValue","useValueFormatter","getColor","useOrdinalColorScale","ribbons","arcs","computeChordArcsAndRibbons","useChordArcsAndRibbons","useChordSelection","useState","currentArc","setCurrentArc","currentRibbon","setCurrentRibbon","selection","selectedArcIds","selectedRibbonIds","hasSelection","getArcOpacity","getRibbonOpacity","useChordLayerContext","ChordRibbon","sourceStartAngle","sourceEndAngle","targetStartAngle","targetEndAngle","opacity","borderWidth","getBorderColor","blendMode","setCurrent","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleClick","fill","fillOpacity","strokeWidth","stroke","strokeOpacity","style","mixBlendMode","getRibbonAngles","firstArc","secondArc","useMiddleAngle","firstMiddleAngle","midAngle","secondMiddleAngle","angles","mapValues","angle","spring","ribbonWillEnter","interpolateColor","ribbonWillLeave","springConfig","ChordRibbons","getOpacity","useMotionConfig","_springConfig","precision","willEnter","willLeave","styles","data","interpolatedStyles","getInterpolatedColor","ChordArc","ChordArcs","ChordLabels","rotation","textProps","getPolarLabelProps","transform","pointerEvents","textAnchor","dominantBaseline","Chord","partialMargin","margin","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","getLabelTextColor","useInheritedColor","getArcBorderColor","getRibbonBorderColor","layerContext","legendData","layerById","labels","containerWidth","containerHeight","layer","withContainer","getArcFromMouseEvent","canvasEl","getRelativeCursor","y","centerX","centerY","findArcUnderCursor","ChordCanvas","useRef","useEffect","ctx","props","degreesToRadians","legend","renderLegendToCanvas","handleMouseHover","useCallback","ref","cursor","ResponsiveChord","ResponsiveChordCanvas","NaN","f","array","map","sqrt","arrays","m","merged","start","stop","step","ceil","range","baseAssignValue","baseForOwn","baseIteratee","module","exports","iteratee","result"],"sourceRoot":""}