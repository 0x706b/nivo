(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{"+VsL":function(e,t,n){"use strict";n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return p}));var o=n("q8Y+"),a=n.n(o),r=n("JCgZ"),i=n.n(r),l=["group A","group B","group C","group D","group E"],s=[0,100],u=[0,120],c=function(e){return l.map((function(t){return{id:t,data:a()(e).map((function(e){return{x:i()(s[0],s[1]),y:i()(u[0],u[1])}}))}}))},d=function(){return c(50)},p=function(){return c(800)}},"4u8/":function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var o=n("Eo5u"),a=n("0Z3v"),r=n("RQLE"),i=[{key:"data",group:"Base",help:"Chart data.",description:"\n            Chart data, which must conform to this structure:\n            ```\n            Array<{\n                id:   string | number\n                data: Array<{\n                    x: number | string | Date\n                    y: number | string | Date\n                }>\n            }>\n            ```\n\n            Please note that you should adjust `xScale`\n            and `yScale` according to `x` and `y` type,\n            for example if you use dates, you should use\n            a `time` scale.\n        ",required:!0},{key:"xScale",type:"object",help:"X scale configuration.",group:"Base",controlType:"object",controlOptions:{props:[{key:"type",help:"Scale type, supports linear, point and time scales.",type:"string",controlType:"choices",controlOptions:{disabled:!0,choices:["linear"].map((function(e){return{label:e,value:e}}))}},{key:"min",help:"Minimum scale value.",required:!1,type:"number | 'auto'",controlType:"switchableRange",controlOptions:{disabledValue:"auto",defaultValue:0,min:-2e3,max:2e3}},{key:"max",help:"Maximum scale value.",required:!1,type:"number | 'auto'",controlType:"switchableRange",controlOptions:{disabledValue:"auto",defaultValue:1200,min:-2e3,max:2e3}}]}},{key:"xFormat",group:"Base",type:"string | Function",help:"Optional formatter for x values.",description:"\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        "},{key:"yScale",group:"Base",type:"object",help:"Y scale configuration.",controlType:"object",controlOptions:{props:[{key:"type",help:"Scale type, supports linear, point and time scales.",type:"string",controlType:"choices",controlOptions:{disabled:!0,choices:["linear"].map((function(e){return{label:e,value:e}}))}},{key:"min",help:"Minimum scale value.",required:!1,type:"number | 'auto'",controlType:"switchableRange",controlOptions:{disabledValue:"auto",defaultValue:0,min:-2e3,max:2e3}},{key:"max",help:"Maximum scale value.",required:!1,type:"number | 'auto'",controlType:"switchableRange",controlOptions:{disabledValue:"auto",defaultValue:1200,min:-2e3,max:2e3}}]}},{key:"yFormat",group:"Base",type:"string | Function",help:"Optional formatter for y values.",description:"\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        "},{key:"nodeSize",group:"Base",defaultValue:a.e.nodeSize,type:"number | object | Function",help:"How to compute node size, static or dynamic.",description:"\n            If you provide a **number**, all nodes will have the same\n            **fixed size**.\n\n            You can also use an object to define a varying size,\n            it must conform to the following interface:\n\n            ```\n            {\n                key:    string\n                values: [min: number, max: number]\n                sizes:  [min: number, max: number]\n            }\n            ```\n\n            Then the size of each node will **depend on the value\n            of `key` and `sizes`**.\n\n            If you use a **custom function**, it will receive the current\n            node and must **return a number**.\n        ",controlType:"range",controlOptions:{unit:"px",min:2,max:24}},{key:"width",enableControlForFlavors:["api"],description:"\n            Not required if using\n            `Responsive*` component.\n            Also note that width exclude left/right axes,\n            please add margin to make sure they're visible.\n        ",help:"Chart width.",type:"number",required:!0,controlType:"range",group:"Base",controlOptions:{unit:"px",min:100,max:1e3,step:5}},{key:"height",enableControlForFlavors:["api"],description:"\n            Not required if using\n            `Responsive*` component.\n            Also note that width exclude top/bottom axes,\n            please add margin to make sure they're visible.\n        ",help:"Chart height.",type:"number",required:!0,controlType:"range",group:"Base",controlOptions:{unit:"px",min:100,max:1e3,step:5}},{key:"pixelRatio",flavors:["canvas"],help:"Adjust pixel ratio, useful for HiDPI screens.",required:!1,defaultValue:"Depends on device",type:"number",controlType:"range",group:"Base",controlOptions:{min:1,max:2}},{key:"margin",help:"Chart margin.",type:"object",required:!1,controlType:"margin",group:"Base"},r.f,{key:"colors",group:"Style",help:"Defines color range.",type:"string | Function | string[]",required:!1,defaultValue:a.e.colors,controlType:"ordinalColors"},{key:"blendMode",group:"Style",flavors:["svg"],help:"Defines CSS mix-blend-mode property.",description:"\n            Defines CSS `mix-blend-mode` property for nodes,\n            see\n            [MDN documentation](https://developer.mozilla.org/fr/docs/Web/CSS/mix-blend-mode).\n        ",type:"string",required:!1,defaultValue:a.e.blendMode,controlType:"blendMode"},{key:"layers",flavors:["svg","canvas"],group:"Customization",help:"Defines the order of layers.",description:"\n            Defines the order of layers, available layers are:\n            `grid`, `axes`, `points`, `markers`,\n            `mesh`, `legends`.\n\n            You can also use this to insert extra layers\n            to the chart.\n            \n            For `ScatterPlot`, the extra layer should be a component\n            and will receive current chart context as props.\n\n            If using `ScatterPlotCanvas`, the extra layer should be\n            a function and will receive canvas context as first argument\n            and current chart context object as second.\n        ",required:!1,defaultValue:a.e.layers},{key:"renderNode",flavors:["svg","canvas"],group:"Customization",help:"Override default node rendering."},{key:"enableGridX",help:"Enable/disable x grid.",type:"boolean",required:!1,defaultValue:a.e.enableGridX,controlType:"switch",group:"Grid & Axes"},{key:"gridXValues",group:"Grid & Axes",help:"Specify values to use for vertical grid lines.",type:"Array<number | string | Date>",required:!1},{key:"enableGridY",group:"Grid & Axes",help:"Enable/disable y grid.",type:"boolean",required:!1,defaultValue:a.e.enableGridY,controlType:"switch"},{key:"gridYValues",group:"Grid & Axes",help:"Specify values to use for horizontal grid lines.",type:"Array<number | string | Date>",required:!1}].concat(Object(o.a)(Object(r.a)()),[{key:"isInteractive",help:"Enable/disable interactivity.",type:"boolean",required:!1,defaultValue:a.e.isInteractive,controlType:"switch",group:"Interactivity"},{key:"useMesh",group:"Interactivity",flavors:["svg"],help:"Use a mesh to detect mouse interactions.",type:"boolean",required:!1,defaultValue:a.e.useMesh,controlType:"switch"},{key:"debugMesh",help:"Display mesh used to detect mouse interactions (voronoi cells).",type:"boolean",required:!1,defaultValue:a.e.debugMesh,controlType:"switch",group:"Interactivity"},{key:"tooltip",flavors:["svg"],group:"Interactivity",type:"Function",required:!1,help:"Custom tooltip component",description:"\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will\n            receive the node as a property.\n            \n            You can also customize the tooltip style\n            using the `theme.tooltip` object.\n        "},{key:"onMouseEnter",group:"Interactivity",help:"onMouseEnter handler, it receives target node data and mouse event.",type:"(node, event) => void",required:!1},{key:"onMouseMove",group:"Interactivity",help:"onMouseMove handler, it receives target node data and mouse event.",type:"(node, event) => void",required:!1},{key:"onMouseLeave",group:"Interactivity",help:"onMouseLeave handler, it receives target node data and mouse event.",type:"(node, event) => void",required:!1},{key:"onClick",group:"Interactivity",help:"onClick handler, it receives target node data and mouse event.",type:"(node, event) => void",required:!1},,{key:"legends",group:"Legends",flavors:["svg","canvas"],type:"object[]",help:"Optional chart's legends.",controlType:"array",controlOptions:{props:Object(r.c)(["svg","canvas"]),shouldCreate:!0,addLabel:"add legend",shouldRemove:!0,getItemTitle:function(e,t){return"legend["+e+"]: "+t.anchor+", "+t.direction},defaults:{anchor:"top-left",direction:"column",justify:!1,translateX:0,translateY:0,itemWidth:100,itemHeight:20,itemsSpacing:0,symbolSize:20,itemDirection:"left-to-right",onClick:function(e){alert(JSON.stringify(e,null,"    "))}}}}],Object(o.a)(Object(r.e)(["svg"],a.e))),l=Object(r.d)(i)},JCgZ:function(e,t,n){var o=n("VPOt"),a=n("/Qyy"),r=n("UzdM"),i=parseFloat,l=Math.min,s=Math.random;e.exports=function(e,t,n){if(n&&"boolean"!=typeof n&&a(e,t,n)&&(t=n=void 0),void 0===n&&("boolean"==typeof t?(n=t,t=void 0):"boolean"==typeof e&&(n=e,e=void 0)),void 0===e&&void 0===t?(e=0,t=1):(e=r(e),void 0===t?(t=e,e=0):t=r(t)),e>t){var u=e;e=t,t=u}if(n||e%1||t%1){var c=s();return l(e+c*(t-e+i("1e-"+((c+"").length-1))),t)}return o(e,t)}},VPOt:function(e,t){var n=Math.floor,o=Math.random;e.exports=function(e,t){return e+n(o()*(t-e+1))}},oMkf:function(e,t,n){"use strict";n.r(t);var o=n("mXGw"),a=n.n(o),r=n("0Z3v"),i=n("ZS2m"),l=n("dReS"),s=n.n(l),u=n("y8up"),c=n("4u8/"),d=n("+VsL"),p={margin:{top:60,right:140,bottom:70,left:90},xScale:{type:"linear",min:0,max:"auto"},xFormat:function(e){return e+" kg"},yScale:{type:"linear",min:0,max:"auto"},yFormat:function(e){return e+" cm"},colors:r.e.colors,blendMode:"multiply",nodeSize:r.e.nodeSize,enableGridX:r.e.enableGridX,enableGridY:r.e.enableGridY,axisTop:{enable:!1,orient:"top",tickSize:5,tickPadding:5,tickRotation:0,legend:"",legendOffset:36},axisRight:{enable:!1,orient:"right",tickSize:5,tickPadding:5,tickRotation:0,legend:"",legendOffset:0},axisBottom:{enable:!0,orient:"bottom",tickSize:5,tickPadding:5,tickRotation:0,legend:"weight",legendPosition:"middle",legendOffset:46,format:function(e){return e+" kg"}},axisLeft:{enable:!0,orient:"left",tickSize:5,tickPadding:5,tickRotation:0,legend:"size",legendPosition:"middle",legendOffset:-60,format:function(e){return e+" cm"}},animate:!0,motionStiffness:90,motionDamping:15,isInteractive:!0,useMesh:!0,debugMesh:!1,legends:[{anchor:"bottom-right",direction:"column",justify:!1,translateX:130,translateY:0,itemWidth:100,itemHeight:12,itemsSpacing:5,itemDirection:"left-to-right",symbolSize:12,symbolShape:"circle",onClick:function(e){alert(JSON.stringify(e,null,"    "))},effects:[{on:"hover",style:{itemOpacity:1}}]}]};t.default=function(){return a.a.createElement(i.a,{name:"ScatterPlot",meta:s.a.ScatterPlot,icon:"scatterplot",flavors:s.a.flavors,currentFlavor:"svg",properties:c.a,initialProperties:p,defaultProperties:r.e,propertiesMapper:u.a,generateData:d.b},(function(e,t,n,o){return a.a.createElement(r.a,Object.assign({data:t},e,{theme:n,onClick:function(e){o({type:"click",label:"[node] serie: "+e.data.serieId+", x: "+e.x+", y: "+e.y,color:e.style.color,data:e})}}))}))}}}]);
//# sourceMappingURL=component---src-pages-scatterplot-index-js-fdf20172347918aed359.js.map