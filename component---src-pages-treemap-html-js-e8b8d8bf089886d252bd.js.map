{"version":3,"sources":["webpack:///./src/data/components/treemap/mapper.js","webpack:///./src/data/components/treemap/generator.js","webpack:///./src/data/components/treemap/props.js","webpack:///../node_modules/lodash/startCase.js","webpack:///./src/pages/treemap/html.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack:///../src/TreeMapNode.js","webpack:///../src/TreeMapHtmlNode.js","webpack:///../src/props.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///../src/TreeMapNodeTooltip.js","webpack:///../src/hooks.js","webpack:///../src/TreeMapNodes.js","webpack:///../src/TreeMap.js","webpack:///../src/ResponsiveTreeMap.js","webpack:///../src/TreeMapHtml.js","webpack:///../src/ResponsiveTreeMapHtml.js","webpack:///../src/TreeMapCanvas.js","webpack:///../src/ResponsiveTreeMapCanvas.js","webpack:///../node_modules/lodash/cloneDeep.js"],"names":["settingsMapper","label","value","node","id","formattedValue","parentLabel","pathComponents","join","valueFormat","mapFormat","generateLightDataSet","root","generateLibTree","generateHeavyDataSet","children","range","map","i","random","nodeCount","defaults","TreeMapDefaultProps","props","key","group","help","type","required","defaultValue","identity","controlType","description","controlOptions","choices","leavesOnly","innerPadding","unit","min","max","outerPadding","enableControlForFlavors","flavors","colors","nodeOpacity","borderWidth","borderColor","defsProperties","enableLabel","prop","orientLabel","enableParentLabel","parentLabelSize","parentLabelPosition","parentLabelPadding","isInteractive","motionProperties","groups","groupProperties","createCompounder","upperFirst","startCase","result","word","index","module","exports","initialProperties","format","enabled","tile","margin","top","right","bottom","left","labelSkipSize","labelTextColor","from","modifiers","parentLabelTextColor","scheme","colorBy","animate","motionConfig","TreeMapHtml","name","meta","icon","currentFlavor","properties","defaultProperties","propertiesMapper","mapper","generateData","data","theme","logAction","onClick","color","_defineProperty","obj","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","memo","animatedProps","useTheme","showLabel","Math","showParentLabel","transform","width","v","height","fill","strokeWidth","stroke","fillOpacity","onMouseEnter","onMouseMove","onMouseLeave","textAnchor","dominantBaseline","style","pointerEvents","labelTransform","parentLabelTransform","boxSizing","position","borderStyle","overflow","opacity","background","display","justifyContent","alignItems","whiteSpace","transformOrigin","commonPropTypes","PropTypes","ordinalColorsPropType","colorPropertyAccessorPropType","treeMapTilePropType","labelFormat","inheritedColorPropType","tooltip","func","commonDefaultProps","nodeComponent","role","isRequired","pixelRatio","defs","TreeMapHtmlDefaultProps","TreeMapHtmlNode","TreeMapCanvasDefaultProps","global","_arrayLikeToArray","arr","len","arr2","Array","_slicedToArray","isArray","arrayWithHoles","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","iterableToArrayLimit","o","minLen","arrayLikeToArray","n","prototype","toString","call","slice","constructor","test","unsupportedIterableToArray","TypeError","nonIterableRest","enableChip","renderContent","useAccessor","accessor","useMemo","d","get","useTreeMap","getIdentity","getValue","formatValue","useValueFormatter","getLabel","getParentLabel","layout","treemap","d3Treemap","treeMapTileFromProp","useTreeMapLayout","hierarchy","useHierarchy","rawNodes","cloneDeep","nodes","rawNode","path","ancestor","computeNodeIdAndPath","omit","x","y","treeDepth","treeHeight","isParent","isLeaf","getColor","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelTextColor","getParentLabelTextColor","enhancedNodes","getAnimatedNodeProps","htmlTransform","labelOpacity","labelHtmlTransform","parentLabelOpacity","parentLabelHtmlTransform","getEndingAnimatedNodeProps","transformPixels","interactiveNodes","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","handleMouseEnter","handleMouseMove","handleMouseLeave","handleClick","event","useInteractiveTreeMapNodes","useMotionConfig","springConfig","useTransition","initial","enter","update","leave","config","immediate","item","WrappedTreeMap","withContainer","partialMargin","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","boundDefs","bindDefs","ResponsiveTreeMap","WrappedTreeMapHtml","ResponsiveTreeMapHtml","findNodeUnderCursor","isCursorInRect","WrappedTreeMapCanvas","canvasEl","useRef","useEffect","ctx","rotate","degreesToRadians","handleMouseHover","getRelativeCursor","ref","ResponsiveTreeMapCanvas","baseClone","CLONE_DEEP_FLAG","CLONE_SYMBOLS_FLAG"],"mappings":"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","file":"component---src-pages-treemap-html-js-e8b8d8bf089886d252bd.js","sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { settingsMapper, mapFormat } from '../../../lib/settings'\n\nexport default settingsMapper({\n    label: value => {\n        if (value === `node => \\`\\${node.id} (\\${node.formattedValue})\\``)\n            return node => `${node.id} (${node.formattedValue})`\n        return value\n    },\n    parentLabel: value => {\n        if (value === `node => node.pathComponents.join(' / ')`)\n            return node => node.pathComponents.join(' / ')\n        return value\n    },\n    valueFormat: mapFormat,\n})\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { generateLibTree } from '@nivo/generators'\nimport range from 'lodash/range'\nimport random from 'lodash/random'\n\nexport const generateLightDataSet = () => ({ root: generateLibTree() })\n\nconst HEAVY_NODE_COUNT = 600\n\nexport const generateHeavyDataSet = () => {\n    const children = range(HEAVY_NODE_COUNT).map(i => ({\n        id: `node.${i}`,\n        value: random(10, 100000),\n    }))\n\n    return {\n        root: {\n            id: 'root',\n            children,\n        },\n        nodeCount: HEAVY_NODE_COUNT,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { TreeMapDefaultProps } from '@nivo/treemap'\nimport { motionProperties, defsProperties, groupProperties } from '../../../lib/componentProperties'\n\nconst defaults = TreeMapDefaultProps\n\nconst props = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'The hierarchical data object.',\n        type: 'object',\n        required: true,\n    },\n    {\n        key: 'identity',\n        group: 'Base',\n        help: 'The key or function to use to retrieve nodes identity.',\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaults.identity,\n    },\n    {\n        key: 'value',\n        group: 'Base',\n        help: 'The key or function to use to retrieve nodes value.',\n        type: 'string | Function',\n        required: false,\n        defaultValue: 'value',\n    },\n    {\n        key: 'valueFormat',\n        help: `\n            Value format supporting d3-format notation, this formatted value\n            will then be used for labels and tooltips.\n        `,\n        type: 'string | Function',\n        required: false,\n        controlType: 'valueFormat',\n        group: 'Base',\n    },\n    {\n        key: 'tile',\n        group: 'Base',\n        help: 'Strategy used to compute nodes.',\n        description: `\n            Strategy used to compute nodes, see\n            [official d3 documentation](https://github.com/mbostock/d3/wiki/Treemap-Layout#mode).\n        `,\n        type: 'string',\n        required: false,\n        defaultValue: 'squarify',\n        controlType: 'choices',\n        controlOptions: {\n            choices: [\n                { label: 'binary', value: 'binary' },\n                { label: 'squarify', value: 'squarify' },\n                { label: 'slice', value: 'slice' },\n                { label: 'dice', value: 'dice' },\n                { label: 'sliceDice', value: 'sliceDice' },\n                {\n                    label: 'resquarify',\n                    value: 'resquarify',\n                },\n            ],\n        },\n    },\n    {\n        key: 'leavesOnly',\n        help: 'Only render leaf nodes (no parent).',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.leavesOnly,\n        controlType: 'switch',\n        group: 'Base',\n    },\n    {\n        key: 'innerPadding',\n        help: 'Padding between parent and child node.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.innerPadding,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 32,\n        },\n    },\n    {\n        key: 'outerPadding',\n        help: 'Padding between parent and child node.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.outerPadding,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 32,\n        },\n    },\n    {\n        key: 'width',\n        group: 'Base',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            not required if using responsive alternative\n            of the component \\`<Responsive*/>\\`.\n        `,\n        type: 'number',\n        required: true,\n    },\n    {\n        key: 'height',\n        group: 'Base',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            not required if using responsive alternative\n            of the component \\`<Responsive*/>\\`.\n        `,\n        type: 'number',\n        required: true,\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        required: false,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    {\n        key: 'colors',\n        help: 'Defines how to compute node color.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: defaults.colors,\n        controlType: 'ordinalColors',\n        group: 'Style',\n    },\n    {\n        key: 'nodeOpacity',\n        help: 'Node opacity (0~1).',\n        required: false,\n        defaultValue: defaults.nodeOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Style',\n    },\n    {\n        key: 'borderWidth',\n        help: 'Control node border width.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.borderWidth,\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute border color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.borderColor,\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'enableLabel',\n        help: 'Enable/disable labels.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableLabel,\n        controlType: 'switch',\n        group: 'Labels',\n    },\n    {\n        key: 'label',\n        help: 'Label accessor.',\n        description:\n            'Defines how to get label text, can be a string (used to access current node property) or a function which will receive the actual node and must return the desired label.',\n        type: 'string | Function',\n        required: false,\n        controlType: 'choices',\n        group: 'Labels',\n        controlOptions: {\n            choices: [\n                'formattedValue',\n                'id',\n                `node => \\`\\${node.id} (\\${node.formattedValue})\\``,\n            ].map(prop => ({\n                label: prop,\n                value: prop,\n            })),\n        },\n    },\n    {\n        key: 'labelSkipSize',\n        help:\n            'Skip label rendering if node minimal side length is lower than given value, 0 to disable.',\n        type: 'number',\n        required: false,\n        controlType: 'range',\n        group: 'Labels',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 100,\n        },\n    },\n    {\n        key: 'orientLabel',\n        help: 'Orient labels according to max node width/height.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.orientLabel,\n        controlType: 'switch',\n        group: 'Labels',\n    },\n    {\n        key: 'labelTextColor',\n        help: 'Method to compute label text color.',\n        type: 'string | object | Function',\n        required: false,\n        controlType: 'inheritedColor',\n        group: 'Labels',\n    },\n    {\n        key: 'enableParentLabel',\n        flavors: ['svg', 'html', 'api'],\n        help: 'Enable/disable labels.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableParentLabel,\n        controlType: 'switch',\n        group: 'Labels',\n    },\n    {\n        key: 'parentLabel',\n        flavors: ['svg', 'html', 'api'],\n        help: 'Parent label accessor.',\n        description:\n            'Defines how to get parent label text, can be a string (used to access current node property) or a function which will receive the actual node and must return the desired label.',\n        type: 'string | Function',\n        required: false,\n        controlType: 'choices',\n        group: 'Labels',\n        controlOptions: {\n            choices: ['id', 'formattedValue', `node => node.pathComponents.join(' / ')`].map(\n                prop => ({\n                    label: prop,\n                    value: prop,\n                })\n            ),\n        },\n    },\n    {\n        key: 'parentLabelSize',\n        flavors: ['svg', 'html', 'api'],\n        help: `Parent label size.`,\n        required: false,\n        defaultValue: defaults.parentLabelSize,\n        type: `number`,\n        controlType: 'range',\n        group: 'Labels',\n        controlOptions: {\n            min: 10,\n            max: 40,\n        },\n    },\n    {\n        key: 'parentLabelPosition',\n        flavors: ['svg', 'html', 'api'],\n        help: 'Parent label position.',\n        type: `'top' | 'right' | 'bottom' | 'left'`,\n        required: false,\n        controlType: 'choices',\n        group: 'Labels',\n        defaultValue: defaults.parentLabelPosition,\n        controlOptions: {\n            choices: ['top', 'right', 'bottom', 'left'].map(prop => ({\n                label: prop,\n                value: prop,\n            })),\n        },\n    },\n    {\n        key: 'parentLabelPadding',\n        flavors: ['svg', 'html', 'api'],\n        help: `Parent label padding.`,\n        required: false,\n        defaultValue: defaults.parentLabelPadding,\n        type: `number`,\n        controlType: 'range',\n        group: 'Labels',\n        controlOptions: {\n            min: 0,\n            max: 20,\n        },\n    },\n    {\n        key: 'parentLabelTextColor',\n        flavors: ['svg', 'html', 'api'],\n        help: 'Method to compute parent label text color.',\n        type: 'string | object | Function',\n        required: false,\n        controlType: 'inheritedColor',\n        group: 'Labels',\n    },\n    {\n        key: 'isInteractive',\n        flavors: ['svg', 'html', 'canvas'],\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.isInteractive,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg', 'html'],\n        group: 'Interactivity',\n        type: '(node, event) => void',\n        help: 'onMouseEnter handler.',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg', 'html', 'canvas'],\n        group: 'Interactivity',\n        type: '(node, event) => void',\n        help: 'onMouseMove handler.',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg', 'html'],\n        group: 'Interactivity',\n        type: '(node, event) => void',\n        help: 'onMouseLeave handler.',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg', 'html', 'canvas'],\n        group: 'Interactivity',\n        type: '(node, event) => void',\n        help: 'onClick handler.',\n        required: false,\n    },\n    ...motionProperties(['svg', 'html', 'canvas'], defaults, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","var createCompounder = require('./_createCompounder'),\n    upperFirst = require('./upperFirst');\n/**\n * Converts `string` to\n * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n *\n * @static\n * @memberOf _\n * @since 3.1.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the start cased string.\n * @example\n *\n * _.startCase('--foo-bar--');\n * // => 'Foo Bar'\n *\n * _.startCase('fooBar');\n * // => 'Foo Bar'\n *\n * _.startCase('__FOO_BAR__');\n * // => 'FOO BAR'\n */\n\n\nvar startCase = createCompounder(function (result, word, index) {\n  return result + (index ? ' ' : '') + upperFirst(word);\n});\nmodule.exports = startCase;","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveTreeMapHtml, TreeMapDefaultProps } from '@nivo/treemap'\nimport ComponentTemplate from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/treemap/meta.yml'\nimport mapper from '../../data/components/treemap/mapper'\nimport { groups } from '../../data/components/treemap/props'\nimport { generateLightDataSet } from '../../data/components/treemap/generator'\n\nconst initialProperties = {\n    identity: 'name',\n    value: 'loc',\n    valueFormat: { format: '.02s', enabled: true },\n    tile: TreeMapDefaultProps.tile,\n    leavesOnly: TreeMapDefaultProps.leavesOnly,\n    innerPadding: TreeMapDefaultProps.innerPadding,\n    outerPadding: TreeMapDefaultProps.outerPadding,\n\n    margin: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10,\n    },\n\n    enableLabel: true,\n    label: TreeMapDefaultProps.label,\n    labelSkipSize: 12,\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 2]],\n    },\n    orientLabel: TreeMapDefaultProps.orientLabel,\n    enableParentLabel: TreeMapDefaultProps.enableParentLabel,\n    parentLabel: TreeMapDefaultProps.parentLabel,\n    parentLabelSize: TreeMapDefaultProps.parentLabelSize,\n    parentLabelPosition: TreeMapDefaultProps.parentLabelPosition,\n    parentLabelPadding: TreeMapDefaultProps.parentLabelPadding,\n    parentLabelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 3]],\n    },\n\n    colors: { scheme: 'yellow_orange_red' },\n    colorBy: TreeMapDefaultProps.colorBy,\n    nodeOpacity: TreeMapDefaultProps.nodeOpacity,\n    borderWidth: TreeMapDefaultProps.borderWidth,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.1]],\n    },\n\n    animate: TreeMapDefaultProps.animate,\n    motionConfig: TreeMapDefaultProps.motionConfig,\n\n    isInteractive: TreeMapDefaultProps.isInteractive,\n}\n\nconst TreeMapHtml = () => {\n    return (\n        <ComponentTemplate\n            name=\"TreeMapHtml\"\n            meta={meta.TreeMapHtml}\n            icon=\"treemap\"\n            flavors={meta.flavors}\n            currentFlavor=\"html\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={TreeMapDefaultProps}\n            propertiesMapper={mapper}\n            generateData={generateLightDataSet}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveTreeMapHtml\n                        data={data.root}\n                        {...properties}\n                        theme={theme}\n                        onClick={node => {\n                            logAction({\n                                type: 'click',\n                                label: `[node] ${node.id}: ${node.formattedValue}`,\n                                color: node.color,\n                                data: node,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default TreeMapHtml\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from 'react-spring'\nimport { useTheme } from '@nivo/core'\n\nconst TreeMapNode = ({\n    node,\n    animatedProps,\n    borderWidth,\n    enableLabel,\n    enableParentLabel,\n    labelSkipSize,\n}) => {\n    const theme = useTheme()\n\n    const showLabel =\n        enableLabel &&\n        node.isLeaf &&\n        (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n    const showParentLabel = enableParentLabel && node.isParent\n\n    return (\n        <animated.g transform={animatedProps.transform}>\n            <animated.rect\n                width={animatedProps.width.interpolate(v => Math.max(v, 0))}\n                height={animatedProps.height.interpolate(v => Math.max(v, 0))}\n                fill={node.fill ? node.fill : animatedProps.color}\n                strokeWidth={borderWidth}\n                stroke={node.borderColor}\n                fillOpacity={node.opacity}\n                onMouseEnter={node.onMouseEnter}\n                onMouseMove={node.onMouseMove}\n                onMouseLeave={node.onMouseLeave}\n                onClick={node.onClick}\n            />\n            {showLabel && (\n                <animated.text\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: node.labelTextColor,\n                        pointerEvents: 'none',\n                    }}\n                    fillOpacity={animatedProps.labelOpacity}\n                    transform={animatedProps.labelTransform}\n                >\n                    {node.label}\n                </animated.text>\n            )}\n            {showParentLabel && (\n                <animated.text\n                    dominantBaseline=\"central\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: node.parentLabelTextColor,\n                        pointerEvents: 'none',\n                    }}\n                    fillOpacity={animatedProps.parentLabelOpacity}\n                    transform={animatedProps.parentLabelTransform}\n                >\n                    {node.parentLabel}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nTreeMapNode.propTypes = {\n    node: PropTypes.object.isRequired,\n    animatedProps: PropTypes.object.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    enableParentLabel: PropTypes.bool.isRequired,\n    labelSkipSize: PropTypes.number.isRequired,\n}\n\nexport default memo(TreeMapNode)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from 'react-spring'\nimport { useTheme } from '@nivo/core'\n\nconst TreeMapHtmlNode = ({\n    node,\n    animatedProps,\n    borderWidth,\n    enableLabel,\n    enableParentLabel,\n    labelSkipSize,\n}) => {\n    const theme = useTheme()\n\n    const showLabel =\n        enableLabel &&\n        node.isLeaf &&\n        (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n    const showParentLabel = enableParentLabel && node.isParent\n\n    return (\n        <animated.div\n            id={node.path.replace(/[^\\w]/gi, '-')}\n            style={{\n                boxSizing: 'border-box',\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                transform: animatedProps.htmlTransform,\n                width: animatedProps.width,\n                height: animatedProps.height,\n                borderWidth,\n                borderStyle: 'solid',\n                borderColor: node.borderColor,\n                overflow: 'hidden',\n            }}\n        >\n            <animated.div\n                style={{\n                    boxSizing: 'border-box',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    opacity: node.opacity,\n                    width: animatedProps.width,\n                    height: animatedProps.height,\n                    background: animatedProps.color,\n                }}\n                onMouseEnter={node.onMouseEnter}\n                onMouseMove={node.onMouseMove}\n                onMouseLeave={node.onMouseLeave}\n                onClick={node.onClick}\n            />\n            {showLabel && (\n                <animated.span\n                    style={{\n                        ...theme.labels.text,\n                        position: 'absolute',\n                        display: 'flex',\n                        top: -5,\n                        left: -5,\n                        width: 10,\n                        height: 10,\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        whiteSpace: 'nowrap',\n                        color: node.labelTextColor,\n                        transformOrigin: 'center center',\n                        transform: animatedProps.labelHtmlTransform,\n                        opacity: animatedProps.labelOpacity,\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {node.label}\n                </animated.span>\n            )}\n            {showParentLabel && (\n                <animated.span\n                    style={{\n                        ...theme.labels.text,\n                        position: 'absolute',\n                        display: 'flex',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                        whiteSpace: 'nowrap',\n                        width: 10,\n                        height: 10,\n                        color: node.parentLabelTextColor,\n                        transformOrigin: 'top left',\n                        transform: animatedProps.parentLabelHtmlTransform,\n                        opacity: animatedProps.parentLabelOpacity,\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {node.parentLabel}\n                </animated.span>\n            )}\n        </animated.div>\n    )\n}\n\nTreeMapHtmlNode.propTypes = {\n    node: PropTypes.object.isRequired,\n    animatedProps: PropTypes.object.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    enableParentLabel: PropTypes.bool.isRequired,\n    labelSkipSize: PropTypes.number.isRequired,\n}\n\nexport default memo(TreeMapHtmlNode)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { treeMapTilePropType, defsPropTypes } from '@nivo/core'\nimport {\n    ordinalColorsPropType,\n    colorPropertyAccessorPropType,\n    inheritedColorPropType,\n} from '@nivo/colors'\nimport TreeMapNode from './TreeMapNode'\nimport TreeMapHtmlNode from './TreeMapHtmlNode'\n\nconst commonPropTypes = {\n    identity: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    valueFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n    colors: ordinalColorsPropType.isRequired,\n    colorBy: colorPropertyAccessorPropType.isRequired,\n    nodeOpacity: PropTypes.number.isRequired,\n\n    leavesOnly: PropTypes.bool.isRequired,\n    tile: treeMapTilePropType.isRequired,\n    innerPadding: PropTypes.number.isRequired,\n    outerPadding: PropTypes.number.isRequired,\n\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelFormat: PropTypes.string,\n    labelSkipSize: PropTypes.number.isRequired,\n    labelTextColor: inheritedColorPropType.isRequired,\n    orientLabel: PropTypes.bool.isRequired,\n\n    enableParentLabel: PropTypes.bool.isRequired,\n    parentLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    parentLabelSize: PropTypes.number.isRequired,\n    parentLabelPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']).isRequired,\n    parentLabelPadding: PropTypes.number.isRequired,\n    parentLabelTextColor: inheritedColorPropType.isRequired,\n\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: inheritedColorPropType.isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.func,\n}\n\nexport const TreeMapPropTypes = {\n    ...commonPropTypes,\n    nodeComponent: PropTypes.elementType.isRequired,\n    role: PropTypes.string.isRequired,\n    ...defsPropTypes,\n}\n\nexport const TreeMapHtmlPropTypes = {\n    ...commonPropTypes,\n    nodeComponent: PropTypes.elementType.isRequired,\n}\n\nexport const TreeMapCanvasPropTypes = {\n    ...commonPropTypes,\n    pixelRatio: PropTypes.number.isRequired,\n}\n\nconst commonDefaultProps = {\n    identity: 'id',\n    value: 'value',\n\n    tile: 'squarify',\n    leavesOnly: false,\n    innerPadding: 0,\n    outerPadding: 0,\n\n    colors: { scheme: 'nivo' },\n    colorBy: 'pathComponents.1',\n    nodeOpacity: 0.33,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipSize: 0,\n    labelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    orientLabel: true,\n\n    enableParentLabel: true,\n    parentLabel: 'id',\n    parentLabelSize: 20,\n    parentLabelPosition: 'top',\n    parentLabelPadding: 6,\n    parentLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    borderWidth: 1,\n    borderColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n\nexport const TreeMapDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: TreeMapNode,\n    role: 'img',\n    defs: [],\n    fill: [],\n}\n\nexport const TreeMapHtmlDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: TreeMapHtmlNode,\n}\n\nexport const TreeMapCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio:\n        global.window && global.window.devicePixelRatio ? global.window.devicePixelRatio : 1,\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst TreeMapNodeTooltip = ({ node, tooltip }) => {\n    return (\n        <BasicTooltip\n            id={node.id}\n            value={node.formattedValue}\n            enableChip={true}\n            color={node.color}\n            renderContent={typeof tooltip === 'function' ? tooltip.bind(null, { node }) : null}\n        />\n    )\n}\n\nTreeMapNodeTooltip.propTypes = {\n    node: PropTypes.shape({\n        id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        formattedValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        color: PropTypes.string.isRequired,\n    }).isRequired,\n    tooltip: PropTypes.elementType,\n}\n\nexport default memo(TreeMapNodeTooltip)\n","import React, { useCallback, useMemo } from 'react'\nimport get from 'lodash/get'\nimport omit from 'lodash/omit'\nimport cloneDeep from 'lodash/cloneDeep'\nimport startCase from 'lodash/startCase'\nimport { treemap as d3Treemap, hierarchy } from 'd3-hierarchy'\nimport { treeMapTileFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { TreeMapDefaultProps } from './props'\nimport TreeMapNodeTooltip from './TreeMapNodeTooltip'\n\nexport const useTreeMapLayout = ({\n    width,\n    height,\n    tile,\n    innerPadding,\n    outerPadding,\n    enableParentLabel,\n    parentLabelSize,\n    parentLabelPosition,\n    leavesOnly,\n}) =>\n    useMemo(() => {\n        const treemap = d3Treemap()\n            .size([width, height])\n            .tile(treeMapTileFromProp(tile))\n            .round(true)\n            .paddingInner(innerPadding)\n            .paddingOuter(outerPadding)\n\n        if (enableParentLabel && !leavesOnly) {\n            const parentLabelPadding = parentLabelSize + outerPadding * 2\n            treemap[`padding${startCase(parentLabelPosition)}`](parentLabelPadding)\n        }\n\n        return treemap\n    }, [\n        width,\n        height,\n        tile,\n        innerPadding,\n        outerPadding,\n        enableParentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        leavesOnly,\n    ])\n\nexport const useHierarchy = ({ root, getValue }) =>\n    useMemo(() => hierarchy(root).sum(getValue), [root, getValue])\n\nexport const useAccessor = accessor =>\n    useMemo(() => {\n        if (typeof accessor === 'function') return accessor\n        return d => get(d, accessor)\n    }, [accessor])\n\nconst computeNodeIdAndPath = (node, getIdentity) => {\n    const path = node\n        .ancestors()\n        .map(ancestor => getIdentity(ancestor.data))\n        .reverse()\n\n    return [path.join('.'), path]\n}\n\nexport const useTreeMap = ({\n    data,\n    identity = TreeMapDefaultProps.identity,\n    value = TreeMapDefaultProps.value,\n    valueFormat,\n    leavesOnly = TreeMapDefaultProps.leavesOnly,\n    width,\n    height,\n    tile = TreeMapDefaultProps.tile,\n    innerPadding = TreeMapDefaultProps.innerPadding,\n    outerPadding = TreeMapDefaultProps.outerPadding,\n    label = TreeMapDefaultProps.label,\n    orientLabel = TreeMapDefaultProps.orientLabel,\n    enableParentLabel = TreeMapDefaultProps.enableParentLabel,\n    parentLabel = TreeMapDefaultProps.parentLabel,\n    parentLabelSize = TreeMapDefaultProps.parentLabelSize,\n    parentLabelPosition = TreeMapDefaultProps.parentLabelPosition,\n    parentLabelPadding = TreeMapDefaultProps.parentLabelPadding,\n    colors = TreeMapDefaultProps.colors,\n    colorBy = TreeMapDefaultProps.colorBy,\n    nodeOpacity = TreeMapDefaultProps.nodeOpacity,\n    borderColor = TreeMapDefaultProps.borderColor,\n    labelTextColor = TreeMapDefaultProps.labelTextColor,\n    parentLabelTextColor = TreeMapDefaultProps.parentLabelTextColor,\n}) => {\n    const getIdentity = useAccessor(identity)\n    const getValue = useAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n    const getLabel = useAccessor(label)\n    const getParentLabel = useAccessor(parentLabel)\n\n    const layout = useTreeMapLayout({\n        width,\n        height,\n        tile,\n        innerPadding,\n        outerPadding,\n        enableParentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        leavesOnly,\n    })\n\n    const hierarchy = useHierarchy({ root: data, getValue })\n\n    const rawNodes = useMemo(() => {\n        // d3 treemap mutates the data, so we need to copy it\n        // to have proper behavior for subsequents useMemo()\n        const root = cloneDeep(hierarchy)\n        layout(root)\n\n        return leavesOnly ? root.leaves() : root.descendants()\n    }, [hierarchy, layout, leavesOnly])\n\n    const nodes = useMemo(\n        () =>\n            rawNodes.map(rawNode => {\n                const [path, pathComponents] = computeNodeIdAndPath(rawNode, getIdentity)\n\n                const node = {\n                    id: getIdentity(rawNode.data),\n                    path,\n                    pathComponents,\n                    data: omit(rawNode.data, 'children'),\n                    x: rawNode.x0,\n                    y: rawNode.y0,\n                    width: rawNode.x1 - rawNode.x0,\n                    height: rawNode.y1 - rawNode.y0,\n                    value: rawNode.value,\n                    formattedValue: formatValue(rawNode.value),\n                    treeDepth: rawNode.depth,\n                    treeHeight: rawNode.height,\n                    isParent: rawNode.height > 0,\n                    isLeaf: rawNode.height === 0,\n                }\n\n                node.label = getLabel(node)\n                node.parentLabel = getParentLabel(node)\n                node.parentLabelRotation = 0\n\n                if (parentLabelPosition === 'top') {\n                    node.parentLabelX = outerPadding + parentLabelPadding\n                    node.parentLabelY = outerPadding + parentLabelSize / 2\n                }\n                if (parentLabelPosition === 'right') {\n                    node.parentLabelX = node.width - outerPadding - parentLabelSize / 2\n                    node.parentLabelY = node.height - outerPadding - parentLabelPadding\n                    node.parentLabelRotation = -90\n                }\n                if (parentLabelPosition === 'bottom') {\n                    node.parentLabelX = outerPadding + parentLabelPadding\n                    node.parentLabelY = node.height - outerPadding - parentLabelSize / 2\n                }\n                if (parentLabelPosition === 'left') {\n                    node.parentLabelX = outerPadding + parentLabelSize / 2\n                    node.parentLabelY = node.height - outerPadding - parentLabelPadding\n                    node.parentLabelRotation = -90\n                }\n\n                return node\n            }),\n        [\n            rawNodes,\n            leavesOnly,\n            getIdentity,\n            formatValue,\n            getLabel,\n            getParentLabel,\n            parentLabelSize,\n            parentLabelPosition,\n            parentLabelPadding,\n            outerPadding,\n        ]\n    )\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const getParentLabelTextColor = useInheritedColor(parentLabelTextColor, theme)\n\n    const enhancedNodes = useMemo(\n        () =>\n            nodes.map(node => {\n                node.opacity = nodeOpacity\n                node.labelRotation = orientLabel && node.height > node.width ? -90 : 0\n                node.color = getColor(node)\n                node.borderColor = getBorderColor(node)\n                node.labelTextColor = getLabelTextColor(node)\n                node.parentLabelTextColor = getParentLabelTextColor(node)\n\n                return node\n            }),\n        [\n            nodes,\n            getColor,\n            nodeOpacity,\n            getBorderColor,\n            getLabelTextColor,\n            getParentLabelTextColor,\n            orientLabel,\n        ]\n    )\n\n    return {\n        hierarchy,\n        nodes: enhancedNodes,\n        layout,\n    }\n}\n\nexport const useInteractiveTreeMapNodes = (\n    nodes,\n    { isInteractive, onMouseEnter, onMouseMove, onMouseLeave, onClick, tooltip }\n) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(\n                <TreeMapNodeTooltip node={node} tooltip={tooltip} />,\n                event,\n                'left'\n            )\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseEnter = useCallback(\n        (node, event) => {\n            showTooltip(node, event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [onMouseEnter, showTooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (node, event) => {\n            showTooltip(node, event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [onMouseMove, showTooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node, event) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [onMouseLeave, hideTooltip]\n    )\n\n    const handleClick = useCallback(\n        (node, event) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n\n    return useMemo(() => {\n        return nodes.map(node => {\n            if (!isInteractive) return node\n\n            return {\n                ...node,\n                onMouseEnter: event => handleMouseEnter(node, event),\n                onMouseMove: event => handleMouseMove(node, event),\n                onMouseLeave: event => handleMouseLeave(node, event),\n                onClick: event => handleClick(node, event),\n            }\n        })\n    }, [nodes, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick])\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTransition } from 'react-spring'\nimport { useMotionConfig } from '@nivo/core'\nimport { useInteractiveTreeMapNodes } from './hooks'\n\nconst getAnimatedNodeProps = node => {\n    return {\n        transform: `translate(${node.x},${node.y})`,\n        htmlTransform: `translate(${node.x}px,${node.y}px)`,\n        labelOpacity: 1,\n        labelTransform: `translate(${node.width / 2},${node.height / 2}) rotate(${\n            node.labelRotation\n        })`,\n        labelHtmlTransform: `translate(${node.width / 2}px,${node.height / 2}px) rotate(${\n            node.labelRotation\n        }deg)`,\n        parentLabelOpacity: 1,\n        parentLabelTransform: `translate(${node.parentLabelX},${node.parentLabelY}) rotate(${node.parentLabelRotation})`,\n        parentLabelHtmlTransform: `translate(${\n            node.parentLabelX - (node.parentLabelRotation === 0 ? 0 : 5)\n        }px,${node.parentLabelY - (node.parentLabelRotation === 0 ? 5 : 0)}px) rotate(${\n            node.parentLabelRotation\n        }deg)`,\n        width: node.width,\n        height: node.height,\n        color: node.color,\n    }\n}\n\nconst getEndingAnimatedNodeProps = node => {\n    const x = node.x + node.width / 2\n    const y = node.y + node.height / 2\n\n    return {\n        transform: `translate(${x},${y})`,\n        transformPixels: `translate(${x}px,${y}px)`,\n        labelOpacity: 0,\n        labelTransform: `translate(0,0) rotate(${node.labelRotation})`,\n        parentLabelOpacity: 0,\n        parentLabelTransform: `translate(0,0) rotate(${node.parentLabelRotation})`,\n        parentLabelHtmlTransform: `translate(0px,0px) rotate(${node.parentLabelRotation}deg)`,\n        width: 0,\n        height: 0,\n        color: node.color,\n    }\n}\n\nconst TreeMapNodes = ({\n    nodes,\n    nodeComponent,\n    borderWidth,\n    enableLabel,\n    labelSkipSize,\n    enableParentLabel,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}) => {\n    const interactiveNodes = useInteractiveTreeMapNodes(nodes, {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transitions = useTransition(interactiveNodes, node => node.path, {\n        initial: node => getAnimatedNodeProps(node),\n        from: node => getEndingAnimatedNodeProps(node),\n        enter: node => getAnimatedNodeProps(node),\n        update: node => getAnimatedNodeProps(node),\n        leave: node => getEndingAnimatedNodeProps(node),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return transitions.map(({ item: node, props: animatedProps, key }) => {\n        return React.createElement(nodeComponent, {\n            key,\n            node,\n            animatedProps,\n            borderWidth,\n            enableLabel,\n            labelSkipSize,\n            enableParentLabel,\n        })\n    })\n}\n\nTreeMapNodes.propTypes = {\n    nodes: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    nodeComponent: PropTypes.elementType.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    labelSkipSize: PropTypes.number.isRequired,\n    enableParentLabel: PropTypes.bool.isRequired,\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.elementType,\n}\n\nexport default memo(TreeMapNodes)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { SvgWrapper, withContainer, useDimensions, bindDefs } from '@nivo/core'\nimport { TreeMapDefaultProps, TreeMapPropTypes } from './props'\nimport { useTreeMap } from './hooks'\nimport TreeMapNodes from './TreeMapNodes'\n\nconst TreeMap = ({\n    data,\n    identity,\n    value,\n    tile,\n    nodeComponent,\n    valueFormat,\n    innerPadding,\n    outerPadding,\n    leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    colors,\n    colorBy,\n    nodeOpacity,\n    borderWidth,\n    borderColor,\n    defs,\n    fill,\n    enableLabel,\n    label,\n    labelTextColor,\n    orientLabel,\n    labelSkipSize,\n    enableParentLabel,\n    parentLabel,\n    parentLabelSize,\n    parentLabelPosition,\n    parentLabelPadding,\n    parentLabelTextColor,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    role,\n}) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel,\n        parentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        parentLabelPadding,\n        parentLabelTextColor,\n    })\n\n    const boundDefs = bindDefs(defs, nodes, fill)\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            <TreeMapNodes\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                borderWidth={borderWidth}\n                enableLabel={enableLabel}\n                labelSkipSize={labelSkipSize}\n                enableParentLabel={enableParentLabel}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n            />\n        </SvgWrapper>\n    )\n}\n\nTreeMap.propTypes = TreeMapPropTypes\n\nconst WrappedTreeMap = withContainer(TreeMap)\nWrappedTreeMap.defaultProps = TreeMapDefaultProps\n\nexport default WrappedTreeMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport TreeMap from './TreeMap'\n\nconst ResponsiveTreeMap = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMap width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveTreeMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { withContainer, useDimensions } from '@nivo/core'\nimport { TreeMapHtmlPropTypes, TreeMapHtmlDefaultProps } from './props'\nimport { useTreeMap } from './hooks'\nimport TreeMapNodes from './TreeMapNodes'\n\nconst TreeMapHtml = ({\n    data,\n    identity,\n    value,\n    tile,\n    nodeComponent,\n    valueFormat,\n    innerPadding,\n    outerPadding,\n    leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    colors,\n    colorBy,\n    nodeOpacity,\n    borderWidth,\n    borderColor,\n    enableLabel,\n    label,\n    labelTextColor,\n    orientLabel,\n    labelSkipSize,\n    enableParentLabel,\n    parentLabel,\n    parentLabelSize,\n    parentLabelPosition,\n    parentLabelPadding,\n    parentLabelTextColor,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel,\n        parentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        parentLabelPadding,\n        parentLabelTextColor,\n    })\n\n    return (\n        <div\n            style={{\n                position: 'relative',\n                width: outerWidth,\n                height: outerHeight,\n            }}\n        >\n            <div style={{ position: 'absolute', top: margin.top, left: margin.left }}>\n                <TreeMapNodes\n                    nodes={nodes}\n                    nodeComponent={nodeComponent}\n                    borderWidth={borderWidth}\n                    enableLabel={enableLabel}\n                    labelSkipSize={labelSkipSize}\n                    enableParentLabel={enableParentLabel}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                    onClick={onClick}\n                    tooltip={tooltip}\n                />\n            </div>\n        </div>\n    )\n}\n\nTreeMapHtml.propTypes = TreeMapHtmlPropTypes\n\nconst WrappedTreeMapHtml = withContainer(TreeMapHtml)\nWrappedTreeMapHtml.defaultProps = TreeMapHtmlDefaultProps\n\nexport default WrappedTreeMapHtml\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport TreeMapHtml from './TreeMapHtml'\n\nconst ResponsiveTreeMapHtml = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMapHtml width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveTreeMapHtml\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { useCallback, useEffect, useRef } from 'react'\nimport {\n    degreesToRadians,\n    getRelativeCursor,\n    isCursorInRect,\n    withContainer,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { TreeMapCanvasPropTypes, TreeMapCanvasDefaultProps } from './props'\nimport { useTreeMap } from './hooks'\nimport TreeMapNodeTooltip from './TreeMapNodeTooltip'\n\nconst findNodeUnderCursor = (nodes, margin, x, y) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst TreeMapCanvas = ({\n    data,\n    identity,\n    value,\n    tile,\n    valueFormat,\n    innerPadding,\n    outerPadding,\n    leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    colors,\n    colorBy,\n    nodeOpacity,\n    borderWidth,\n    borderColor,\n    enableLabel,\n    label,\n    labelTextColor,\n    orientLabel,\n    labelSkipSize,\n    isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip,\n    pixelRatio,\n}) => {\n    const canvasEl = useRef(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel: false,\n    })\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        nodes.forEach(node => {\n            ctx.fillStyle = node.color\n            ctx.fillRect(node.x, node.y, node.width, node.height)\n\n            if (borderWidth > 0) {\n                ctx.strokeStyle = node.borderColor\n                ctx.lineWidth = borderWidth\n                ctx.strokeRect(node.x, node.y, node.width, node.height)\n            }\n        })\n\n        if (enableLabel) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'middle'\n            ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n            nodes.forEach(node => {\n                const showLabel =\n                    node.isLeaf &&\n                    (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n                if (!showLabel) return\n\n                const rotate = orientLabel && node.height > node.width\n\n                ctx.save()\n                ctx.translate(node.x + node.width / 2, node.y + node.height / 2)\n                ctx.rotate(degreesToRadians(rotate ? -90 : 0))\n\n                ctx.fillStyle = node.labelTextColor\n                ctx.fillText(node.label, 0, 0)\n\n                ctx.restore()\n            })\n        }\n    }, [\n        canvasEl,\n        nodes,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        borderWidth,\n        enableLabel,\n        orientLabel,\n        labelSkipSize,\n        theme,\n        pixelRatio,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const node = findNodeUnderCursor(nodes, margin, x, y)\n\n            if (node !== undefined) {\n                showTooltipFromEvent(\n                    <TreeMapNodeTooltip node={node} tooltip={tooltip} />,\n                    event,\n                    'left'\n                )\n                onMouseMove && onMouseMove(node, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [canvasEl, nodes, margin, showTooltipFromEvent, hideTooltip, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const node = findNodeUnderCursor(nodes, margin, x, y)\n\n            if (node === undefined) return\n\n            onClick && onClick(node, event)\n        },\n        [canvasEl, nodes, margin, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nTreeMapCanvas.propTypes = TreeMapCanvasPropTypes\n\nconst WrappedTreeMapCanvas = withContainer(TreeMapCanvas)\nWrappedTreeMapCanvas.defaultProps = TreeMapCanvasDefaultProps\n\nexport default WrappedTreeMapCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport TreeMapCanvas from './TreeMapCanvas'\n\nconst ResponsiveTreeMapCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMapCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveTreeMapCanvas\n","var baseClone = require('./_baseClone');\n/** Used to compose bitmasks for cloning. */\n\n\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\n\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = cloneDeep;"],"sourceRoot":""}