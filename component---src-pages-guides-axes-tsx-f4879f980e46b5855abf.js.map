{"version":3,"file":"component---src-pages-guides-axes-tsx-f4879f980e46b5855abf.js","mappings":"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","sources":["webpack://nivo-website/./src/components/PageContent.ts","webpack://nivo-website/./src/components/styled.ts","webpack://nivo-website/./src/components/guides/axes/scales.js","webpack://nivo-website/./src/components/guides/axes/theme.js","webpack://nivo-website/./src/components/guides/axes/AxesPosition.js","webpack://nivo-website/./src/components/guides/axes/AxesTicks.js","webpack://nivo-website/./src/components/guides/axes/AxesLegend.js","webpack://nivo-website/./src/pages/guides/axes.tsx","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../node_modules/lodash/_baseUniq.js","webpack://nivo-website/../node_modules/lodash/_createSet.js","webpack://nivo-website/../node_modules/lodash/noop.js","webpack://nivo-website/../node_modules/lodash/uniq.js"],"sourcesContent":["import styled from 'styled-components'\nimport media from '../theming/mediaQueries'\n\nexport default styled.div`\n    margin: 0 50px;\n    position: relative;\n\n    ${media.tablet`\n        & {\n            margin: 0 30px;\n        }\n    `}\n\n    ${media.mobile`\n        & {\n            margin: 0 15px;\n        }\n    `}\n`\n","import styled from 'styled-components'\nimport media from '../theming/mediaQueries'\n\nexport const FullWidthBanner = styled.div`\n    background: ${({ theme }) => theme.colors.cardBackground};\n    margin-bottom: 40px;\n    padding: 20px;\n`\n\nexport const DescriptionBlock = styled.div`\n    max-width: 800px;\n    margin: 0 auto 50px;\n\n    ${media.tablet`\n        & {\n            margin: 0 15px 50px;\n        }\n    `}\n\n    ${media.mobile`\n        & {\n            margin: 0 15px 50px;\n        }\n    `}\n`\n\nexport const Card = styled.div`\n    background: ${({ theme }) => theme.colors.cardBackground};\n    box-shadow: ${({ theme }) => theme.cardShadow};\n`\n","import { scaleLinear, scalePoint, scaleTime } from 'd3-scale'\n\nexport const linearXScale = scaleLinear().range([0, 280]).domain([0, 80])\nlinearXScale.type = 'linear'\n\nexport const linearYScale = scaleLinear().range([160, 0]).domain([0, 35])\nlinearYScale.type = 'linear'\n\nexport const pointXScale = scalePoint()\n    .range([0, 280])\n    .domain(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'])\npointXScale.type = 'point'\n\nexport const timeXScale = scaleTime()\n    .range([0, 280])\n    .domain([new Date(2019, 0, 1, 0, 0, 0, 0), new Date(2020, 0, 1, 0, 0, 0, 0)])\ntimeXScale.type = 'time'\n\nexport const timeXScaleHours = scaleTime()\n    .range([0, 280])\n    .domain([\n        new Date(Date.UTC(2020, 0, 1, 9, 0, 0, 0)),\n        new Date(Date.UTC(2020, 0, 1, 10, 0, 0, 0)),\n    ])\ntimeXScaleHours.type = 'time'\n","import { useMemo } from 'react'\nimport { useTheme } from '../../../theming/context'\n\nexport const useAxisTheme = () => {\n    const theme = useTheme()\n    const nivoTheme = useMemo(() => {\n        return {\n            ...theme.nivo,\n            axis: {\n                ...theme.nivo.axis,\n                domain: {\n                    ...theme.nivo.axis.domain,\n                    line: {\n                        ...theme.nivo.axis.domain.line,\n                        strokeWidth: 1,\n                    },\n                },\n                legend: {\n                    ...theme.nivo.axis.legend,\n                    text: {\n                        ...theme.nivo.axis.legend.text,\n                        fill: theme.colors.accent,\n                    },\n                },\n            },\n        }\n    }, [theme])\n\n    return nivoTheme\n}\n","import React from 'react'\nimport { ThemeProvider, MotionConfigProvider } from '@nivo/core'\nimport { Axes } from '@nivo/axes'\nimport { linearXScale, linearYScale } from './scales'\nimport { FullWidthBanner, DescriptionBlock } from '../../styled'\nimport { useAxisTheme } from './theme'\n\nconst AxesPosition = () => {\n    const theme = useAxisTheme()\n\n    return (\n        <>\n            <DescriptionBlock>\n                <h2 id=\"position\">Axis position</h2>\n                <p>\n                    Axis position is determined by the property you use{' '}\n                    <strong>(top|right|bottom|left)Axis</strong>.\n                </p>\n            </DescriptionBlock>\n            <FullWidthBanner>\n                <div className=\"guide__illustrations\">\n                    <svg role=\"img\" width={380} height={260}>\n                        <g transform=\"translate(50,50)\">\n                            <ThemeProvider theme={theme}>\n                                <MotionConfigProvider animate={false}>\n                                    <Axes\n                                        xScale={linearXScale}\n                                        yScale={linearYScale}\n                                        width={280}\n                                        height={160}\n                                        animate={false}\n                                        motionStiffness={0}\n                                        motionDamping={0}\n                                        top={{\n                                            legend: 'axisTop',\n                                            legendPosition: 'middle',\n                                            legendOffset: -32,\n                                        }}\n                                        right={{\n                                            legend: 'axisRight',\n                                            legendPosition: 'middle',\n                                            legendOffset: 42,\n                                        }}\n                                        bottom={{\n                                            legend: 'axisBottom',\n                                            legendPosition: 'middle',\n                                            legendOffset: 38,\n                                        }}\n                                        left={{\n                                            legend: 'axisLeft',\n                                            legendPosition: 'middle',\n                                            legendOffset: -36,\n                                        }}\n                                    />\n                                </MotionConfigProvider>\n                            </ThemeProvider>\n                        </g>\n                    </svg>\n                </div>\n            </FullWidthBanner>\n        </>\n    )\n}\n\nexport default AxesPosition\n","import React from 'react'\nimport { ThemeProvider, MotionConfigProvider } from '@nivo/core'\nimport { Axis } from '@nivo/axes'\nimport { linearXScale, pointXScale, timeXScale, timeXScaleHours } from './scales'\nimport { FullWidthBanner, DescriptionBlock } from '../../styled'\nimport { useAxisTheme } from './theme'\n\nconst AxesTicks = () => {\n    const theme = useAxisTheme()\n\n    return (\n        <>\n            <DescriptionBlock>\n                <h2 id=\"ticks\">Axis ticks</h2>\n                <p>\n                    Axes are composed of <strong>ticks</strong>, you can control the way they are\n                    computed and their aspect. By default, computing which ticks are displayed is\n                    managed by the corresponding{' '}\n                    <a\n                        href=\"https://github.com/d3/d3-scale\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        d3 scale\n                    </a>\n                    .\n                </p>\n                <h3 id=\"ticks-values\">Ticks values</h3>\n                <p>\n                    You can use the <code>tickValues</code> property in order to customize the\n                    displayed ticks, it accepts several forms:\n                </p>\n                <ul>\n                    <li>\n                        an array of values, which should be numbers for a linear scale, values being\n                        part of the dataset for point scales, or dates for time scales.\n                    </li>\n                    <li>\n                        a number which define the number of ticks to display,{' '}\n                        <strong>doesn't work with point scale</strong>, also note that when using\n                        this form{' '}\n                        <strong>\n                            it's not guaranteed that you'll have exactly the number of ticks you\n                            asked for\n                        </strong>{' '}\n                        as d3 will make an educated guess to define them.\n                    </li>\n                    <li>\n                        a time interval, for example <code>every day</code> or{' '}\n                        <code>every 15 minutes</code>,{' '}\n                        <strong>only works when using time scales</strong>.\n                    </li>\n                </ul>\n            </DescriptionBlock>\n            <FullWidthBanner>\n                <ThemeProvider theme={theme}>\n                    <MotionConfigProvider animate={false}>\n                        <div\n                            className=\"guide__illustrations\"\n                            style={{ justifyContent: 'center', alignItems: 'center' }}\n                        >\n                            <svg role=\"img\" width={380} height={191}>\n                                <g transform={`translate(50,50)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={pointXScale}\n                                        tickValues={['A', 'C', 'E', 'G', 'I']}\n                                        length={280}\n                                        theme={theme}\n                                        animate={false}\n                                        legend=\"point scale ['A', 'C', 'E', 'G', 'I']\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                                <g transform={`translate(50,120)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={linearXScale}\n                                        tickValues={[0, 20, 40, 60, 80]}\n                                        length={280}\n                                        theme={theme}\n                                        animate={false}\n                                        legend=\"linear scale [0, 20, 40, 60, 80]\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                                <g transform={`translate(50,190)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={timeXScale}\n                                        tickValues={[\n                                            new Date(2019, 0, 1, 0, 0, 0, 0),\n                                            new Date(2019, 6, 1, 0, 0, 0, 0),\n                                            new Date(2020, 0, 1, 0, 0, 0, 0),\n                                        ]}\n                                        length={280}\n                                        theme={theme}\n                                        format=\"%Y/%m\"\n                                        animate={false}\n                                        legend=\"time scale with three dates\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                            </svg>\n                            <svg role=\"img\" width={380} height={191}>\n                                <g transform={`translate(50,50)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={timeXScaleHours}\n                                        tickValues=\"every 15 minutes\"\n                                        format=\"%H:%M\"\n                                        length={280}\n                                        theme={theme}\n                                        animate={false}\n                                        legend=\"time scale, every 15 minutes\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                                <g transform={`translate(50,120)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={linearXScale}\n                                        tickValues={5}\n                                        length={280}\n                                        theme={theme}\n                                        animate={false}\n                                        legend=\"linear scale, tickValues: 5\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                                <g transform={`translate(50,190)`}>\n                                    <Axis\n                                        axis=\"x\"\n                                        scale={timeXScale}\n                                        tickValues={5}\n                                        length={280}\n                                        theme={theme}\n                                        format=\"%Y/%m\"\n                                        animate={false}\n                                        legend=\"time scale, tickValues: 5\"\n                                        legendPosition=\"start\"\n                                        legendOffset={-38}\n                                        ticksPosition=\"before\"\n                                    />\n                                </g>\n                            </svg>\n                        </div>\n                    </MotionConfigProvider>\n                </ThemeProvider>\n            </FullWidthBanner>\n        </>\n    )\n}\n\nexport default AxesTicks\n","import React from 'react'\nimport { ThemeProvider, MotionConfigProvider } from '@nivo/core'\nimport { Axis } from '@nivo/axes'\nimport { linearXScale, linearYScale } from './scales'\nimport { FullWidthBanner, DescriptionBlock } from '../../styled'\nimport { useAxisTheme } from './theme'\n\nconst axisPositions = ['start', 'middle', 'end']\n\nconst AxesLegend = () => {\n    const theme = useAxisTheme()\n\n    return (\n        <>\n            <DescriptionBlock>\n                <h2 id=\"legend\">Axis legend</h2>\n                <p>\n                    You can optionally add a legend to an axis by setting the value of the{' '}\n                    <code>legend</code> property.\n                </p>\n                <h3 id=\"legend-position\">Legend position</h3>\n                <p>\n                    Legend position is controlled by two properties, <code>legendPosition</code> and{' '}\n                    <code>legendOffset</code>.<code>legendPosition</code> must be one of:{' '}\n                    <code>start</code>, <code>middle</code> or <code>end</code>,{' '}\n                    <code>legendOffset</code> will affect y position for <strong>top</strong> and{' '}\n                    <strong>bottom</strong> axes and x position for <strong>left</strong> and{' '}\n                    <strong>right</strong> axes.\n                </p>\n            </DescriptionBlock>\n            <FullWidthBanner>\n                <ThemeProvider theme={theme}>\n                    <MotionConfigProvider animate={false}>\n                        <div\n                            className=\"guide__illustrations\"\n                            style={{ justifyContent: 'center', alignItems: 'center' }}\n                        >\n                            <svg role=\"img\" width={380} height={180}>\n                                {axisPositions.map((position, i) => (\n                                    <g key={position} transform={`translate(50,${i * 70 + 40})`}>\n                                        <Axis\n                                            axis=\"x\"\n                                            scale={linearXScale}\n                                            length={280}\n                                            animate={false}\n                                            motionStiffness={0}\n                                            motionDamping={0}\n                                            legend={position}\n                                            legendPosition={position}\n                                            legendOffset={-32}\n                                            ticksPosition=\"before\"\n                                        />\n                                    </g>\n                                ))}\n                            </svg>\n                            <svg role=\"img\" width={260} height={260}>\n                                {axisPositions.map((position, i) => (\n                                    <g key={position} transform={`translate(${i * 90 + 50},50)`}>\n                                        <Axis\n                                            axis=\"y\"\n                                            scale={linearYScale}\n                                            length={160}\n                                            animate={false}\n                                            motionStiffness={0}\n                                            motionDamping={0}\n                                            legend={position}\n                                            legendPosition={position}\n                                            legendOffset={-32}\n                                            ticksPosition=\"before\"\n                                        />\n                                    </g>\n                                ))}\n                            </svg>\n                        </div>\n                    </MotionConfigProvider>\n                </ThemeProvider>\n            </FullWidthBanner>\n        </>\n    )\n}\n\nexport default AxesLegend\n","import React, { Component } from 'react'\nimport { Link } from 'gatsby'\nimport Layout from '../../components/Layout'\nimport { Seo } from '../../components/Seo'\nimport PageContent from '../../components/PageContent'\nimport AxesPosition from '../../components/guides/axes/AxesPosition'\nimport AxesTicks from '../../components/guides/axes/AxesTicks'\nimport AxesLegend from '../../components/guides/axes/AxesLegend'\nimport { DescriptionBlock } from '../../components/styled'\n\nexport default class Axes extends Component {\n    render() {\n        return (\n            <Layout>\n                <Seo title=\"Axes Guide\" />\n                <PageContent>\n                    <div className=\"guide__header\">\n                        <h1>Axes</h1>\n                    </div>\n                </PageContent>\n                <DescriptionBlock>\n                    <h2>Using axes in nivo components</h2>\n                    <p>\n                        Axes are built on top of{' '}\n                        <a\n                            href=\"https://github.com/d3/d3-scale\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            d3 scales\n                        </a>\n                        . A lot of nivo components make use of it (<Link to=\"/bar\">Bar</Link>,{' '}\n                        <Link to=\"/line\">Line</Link>, <Link to=\"/scatterplot\">ScatterPlot</Link>\n                        …).\n                    </p>\n                </DescriptionBlock>\n                <AxesPosition />\n                <AxesTicks />\n                <AxesLegend />\n            </Layout>\n        )\n    }\n}\n","import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProp, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProp<X> | null\n        right?: CanvasAxisProp<Y> | null\n        bottom?: CanvasAxisProp<X> | null\n        left?: CanvasAxisProp<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProp<X> | undefined\n            : CanvasAxisProp<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n","var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    cacheHas = require('./_cacheHas'),\n    createSet = require('./_createSet'),\n    setToArray = require('./_setToArray');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseUniq;\n","var Set = require('./_Set'),\n    noop = require('./noop'),\n    setToArray = require('./_setToArray');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\nmodule.exports = createSet;\n","/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = noop;\n","var baseUniq = require('./_baseUniq');\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nmodule.exports = uniq;\n"],"names":["styled","media","FullWidthBanner","theme","colors","cardBackground","DescriptionBlock","Card","cardShadow","linearXScale","scaleLinear","range","domain","type","linearYScale","pointXScale","scalePoint","timeXScale","scaleTime","Date","timeXScaleHours","UTC","useAxisTheme","useTheme","useMemo","nivo","axis","line","strokeWidth","legend","text","fill","accent","id","className","role","width","height","transform","animate","xScale","yScale","motionStiffness","motionDamping","top","legendPosition","legendOffset","right","bottom","left","href","target","rel","style","justifyContent","alignItems","scale","tickValues","length","ticksPosition","format","axisPositions","map","position","i","Axes","render","Layout","Seo","title","PageContent","Link","to","Component","computeCartesianTicks","translate","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","centerScale","lineX","lineY","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","x","d","y","ticks","v","key","value","getFormatter","formatter","timeFormat","d3Format","computeGridLines","_values","Array","isArray","lines","x1","x2","y1","y2","memoizedAxisTick","memo","_value","onClick","textAnchor","animatedProps","props","opacity","cursor","event","_jsxs","animated","g","_jsx","dominantBaseline","textTransform","memoizedAxis","renderTick","AxisTick","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","springConfig","config","useSpring","lineX2","lineY2","immediate","transition","useTransition","keys","t","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","rotate","axisPropTypes","PropTypes","axisPropType","positions","axes","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","_format","save","font","fontWeight","fontSize","fontFamily","lineWidth","Number","lineCap","stroke","strokeStyle","beginPath","moveTo","lineTo","forEach","degreesToRadians","fillStyle","fillText","String","restore","renderAxesToCanvas","renderGridLinesToCanvas","SetCache","arrayIncludes","arrayIncludesWith","cacheHas","createSet","setToArray","module","exports","array","iteratee","comparator","index","includes","isCommon","result","seen","set","outer","computed","seenIndex","push","Set","noop","baseUniq"],"sourceRoot":""}