{"version":3,"sources":["webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack:///../src/PieLegends.tsx","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack:///../src/PieTooltip.tsx","webpack:///../src/props.ts","webpack:///../src/hooks.ts","webpack:///../src/Arcs.tsx","webpack:///../src/Pie.tsx","webpack:///../src/ResponsivePie.tsx","webpack:///../src/PieCanvas.tsx","webpack:///../src/ResponsivePieCanvas.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","PieLegends","width","height","legends","dataWithArc","containerWidth","containerHeight","data","_arrayLikeToArray","arr","len","arr2","Array","_slicedToArray","isArray","arrayWithHoles","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","iterableToArrayLimit","o","minLen","arrayLikeToArray","n","toString","slice","constructor","name","from","test","unsupportedIterableToArray","TypeError","nonIterableRest","_defineProperty","obj","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","symbols","filter","sym","getOwnPropertyDescriptor","apply","_objectSpread2","arguments","forEach","getOwnPropertyDescriptors","defineProperties","defaultProps","id","sortByValue","innerRadius","padAngle","cornerRadius","layers","startAngle","endAngle","fit","activeInnerRadiusOffset","activeOuterRadiusOffset","borderWidth","borderColor","modifiers","enableArcLabels","arcLabel","arcLabelsSkipAngle","arcLabelsRadiusOffset","arcLabelsTextColor","theme","enableArcLinkLabels","arcLinkLabel","arcLinkLabelsSkipAngle","arcLinkLabelsOffset","arcLinkLabelsDiagonalLength","arcLinkLabelsStraightLength","arcLinkLabelsThickness","arcLinkLabelsTextOffset","arcLinkLabelsTextColor","arcLinkLabelsColor","colors","scheme","defs","fill","isInteractive","animate","motionConfig","transitionMode","tooltip","datum","enableChip","color","role","pixelRatio","window","useNormalizedData","valueFormat","getId","usePropertyAccessor","getValue","formatValue","useValueFormatter","getColor","useOrdinalColorScale","useMemo","datumId","datumValue","normalizedDatum","label","formattedValue","usePieArcs","outerRadius","activeId","pie","innerPie","d","degreesToRadians","angle","Math","arc","index","thickness","angleDeg","radiansToDegrees","usePieFromBox","innerRadiusRatio","useState","setActiveId","computedProps","radius","centerX","centerY","computeArcBoundingBox","points","box","ratio","adjustedBox","boundingBox","debug","arcGenerator","useArcGenerator","Arcs","center","onClick","onMouseEnter","onMouseMove","onMouseLeave","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","InnerPie","partialMargin","margin","arcLabelsComponent","arcLinkLabelComponent","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","normalizedData","boundDefs","bindDefs","layerById","arcLinkLabels","arcs","arcLabels","skipAngle","offset","diagonalLength","straightLength","strokeWidth","textOffset","textColor","linkColor","component","radiusOffset","layerContext","usePieLayerContext","layer","Pie","otherProps","ResponsivePie","InnerPieCanvas","canvasEl","useRef","useTheme","getBorderColor","useInheritedColor","useArcLabels","useArcLinkLabels","useEffect","ctx","drawCanvasArcLinkLabels","drawCanvasArcLabels","legend","renderLegendToCanvas","getArcFromMouse","event","getRelativeCursor","x","y","hoveredArc","findArcUnderCursor","handleMouseHover","ref","style","cursor","PieCanvas","ResponsivePieCanvas"],"mappings":"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","file":"4244ab35c9d6bba1b11f9cf1e604aac120f082de-02d3e4a4484b2d57969b.js","sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { CompletePieSvgProps, ComputedDatum } from './types'\n\ninterface PieLegendsProps<RawDatum> {\n    width: number\n    height: number\n    legends: CompletePieSvgProps<RawDatum>['legends']\n    dataWithArc: ComputedDatum<RawDatum>[]\n}\n\nconst PieLegends = <RawDatum,>({\n    width,\n    height,\n    legends,\n    dataWithArc,\n}: PieLegendsProps<RawDatum>) => {\n    return (\n        <>\n            {legends.map((legend, i) => (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={dataWithArc}\n                />\n            ))}\n        </>\n    )\n}\n\nexport default PieLegends\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import React from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const PieTooltip = <RawDatum,>({ datum }: { datum: ComputedDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={datum.id}\n        value={datum.formattedValue}\n        enableChip={true}\n        color={datum.color}\n    />\n)\n\nexport default PieTooltip\n","import { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ArcTransitionMode } from '@nivo/arcs'\nimport { PieTooltip } from './PieTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    sortByValue: false,\n    innerRadius: 0,\n    padAngle: 0,\n    cornerRadius: 0,\n\n    layers: ['arcLinkLabels', 'arcs', 'arcLabels', 'legends'],\n\n    // layout\n    startAngle: 0,\n    endAngle: 360,\n    fit: true,\n    activeInnerRadiusOffset: 0,\n    activeOuterRadiusOffset: 0,\n\n    // border\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    // arc labels\n    enableArcLabels: true,\n    arcLabel: 'formattedValue',\n    arcLabelsSkipAngle: 0,\n    arcLabelsRadiusOffset: 0.5,\n    arcLabelsTextColor: { theme: 'labels.text.fill' },\n\n    // arc link labels\n    enableArcLinkLabels: true,\n    arcLinkLabel: 'id',\n    arcLinkLabelsSkipAngle: 0,\n    arcLinkLabelsOffset: 0,\n    arcLinkLabelsDiagonalLength: 16,\n    arcLinkLabelsStraightLength: 24,\n    arcLinkLabelsThickness: 1,\n    arcLinkLabelsTextOffset: 6,\n    arcLinkLabelsTextColor: { theme: 'labels.text.fill' },\n    arcLinkLabelsColor: { theme: 'axis.ticks.line.stroke' },\n\n    colors: ({ scheme: 'nivo' } as unknown) as OrdinalColorScaleConfig,\n    defs: [],\n    fill: [],\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n    transitionMode: 'innerRadius' as ArcTransitionMode,\n\n    tooltip: PieTooltip,\n\n    legends: [],\n\n    role: 'img',\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { useMemo, useState } from 'react'\nimport { pie as d3Pie } from 'd3-shape'\nimport { ArcGenerator, useArcGenerator, computeArcBoundingBox } from '@nivo/arcs'\nimport {\n    degreesToRadians,\n    radiansToDegrees,\n    useValueFormatter,\n    usePropertyAccessor,\n} from '@nivo/core'\nimport { OrdinalColorScaleConfig, useOrdinalColorScale } from '@nivo/colors'\nimport { defaultProps } from './props'\nimport { CompletePieSvgProps, ComputedDatum, DatumId, PieArc, PieCustomLayerProps } from './types'\n\ninterface MayHaveLabel {\n    label?: string | number\n}\n\n/**\n * Format data so that we get a consistent data structure.\n * It will also add the `formattedValue` and `color` property.\n */\nexport const useNormalizedData = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>\n    >,\n}: Pick<CompletePieSvgProps<RawDatum>, 'id' | 'value' | 'valueFormat' | 'colors'> & {\n    data: RawDatum[]\n}): Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[] => {\n    const getId = usePropertyAccessor<RawDatum, DatumId>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>>(\n        colors,\n        'id'\n    )\n\n    return useMemo(\n        () =>\n            data.map(datum => {\n                const datumId = getId(datum)\n                const datumValue = getValue(datum)\n\n                const normalizedDatum: Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'> = {\n                    id: datumId,\n                    label: datum.label ?? datumId,\n                    value: datumValue,\n                    formattedValue: formatValue(datumValue),\n                    data: datum,\n                }\n\n                return {\n                    ...normalizedDatum,\n                    color: getColor(normalizedDatum),\n                }\n            }),\n        [data, getId, getValue, formatValue, getColor]\n    )\n}\n\n/**\n * Compute arcs, which don't depend yet on radius.\n */\nexport const usePieArcs = <RawDatum>({\n    data,\n    startAngle,\n    endAngle,\n    innerRadius,\n    outerRadius,\n    padAngle,\n    sortByValue,\n    activeId,\n    activeInnerRadiusOffset,\n    activeOuterRadiusOffset,\n}: {\n    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n    // in degrees\n    startAngle: number\n    // in degrees\n    endAngle: number\n    // in pixels\n    innerRadius: number\n    // in pixels\n    outerRadius: number\n    padAngle: number\n    sortByValue: boolean\n    activeId: null | DatumId\n    activeInnerRadiusOffset: number\n    activeOuterRadiusOffset: number\n}): Omit<ComputedDatum<RawDatum>, 'fill'>[] => {\n    const pie = useMemo(() => {\n        const innerPie = d3Pie<Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>>()\n            .value(d => d.value)\n            .startAngle(degreesToRadians(startAngle))\n            .endAngle(degreesToRadians(endAngle))\n            .padAngle(degreesToRadians(padAngle))\n\n        if (!sortByValue) {\n            innerPie.sortValues(null)\n        }\n\n        return innerPie\n    }, [startAngle, endAngle, padAngle, sortByValue])\n\n    return useMemo(\n        () =>\n            pie(data).map(\n                (\n                    arc: Omit<\n                        PieArc,\n                        'angle' | 'angleDeg' | 'innerRadius' | 'outerRadius' | 'thickness'\n                    > & {\n                        data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>\n                    }\n                ) => {\n                    const angle = Math.abs(arc.endAngle - arc.startAngle)\n\n                    return {\n                        ...arc.data,\n                        arc: {\n                            index: arc.index,\n                            startAngle: arc.startAngle,\n                            endAngle: arc.endAngle,\n                            innerRadius:\n                                activeId === arc.data.id\n                                    ? innerRadius - activeInnerRadiusOffset\n                                    : innerRadius,\n                            outerRadius:\n                                activeId === arc.data.id\n                                    ? outerRadius + activeOuterRadiusOffset\n                                    : outerRadius,\n                            thickness: outerRadius - innerRadius,\n                            padAngle: arc.padAngle,\n                            angle,\n                            angleDeg: radiansToDegrees(angle),\n                        },\n                    }\n                }\n            ),\n\n        [\n            pie,\n            data,\n            innerRadius,\n            outerRadius,\n            activeId,\n            activeInnerRadiusOffset,\n            activeInnerRadiusOffset,\n        ]\n    )\n}\n\n/**\n * Compute pie layout using explicit radius/innerRadius,\n * expressed in pixels.\n */\nexport const usePie = <RawDatum>({\n    data,\n    radius,\n    innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n}: Pick<\n    CompletePieSvgProps<RawDatum>,\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    radius: number\n    innerRadius: number\n}) => {\n    const [activeId, setActiveId] = useState<DatumId | null>(null)\n    const dataWithArc = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius: radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n    })\n\n    const arcGenerator = useArcGenerator({ cornerRadius, padAngle: degreesToRadians(padAngle) })\n\n    return { dataWithArc, arcGenerator, setActiveId }\n}\n\n/**\n * Compute pie layout using a box to find radius/innerRadius,\n * expressed in ratio (0~1), can optionally use the `fit`\n * attribute to find the most space efficient layout.\n *\n * It also returns `centerX`/`centerY` as those can be altered\n * if `fit` is `true`.\n */\nexport const usePieFromBox = <RawDatum>({\n    data,\n    width,\n    height,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    fit = defaultProps.fit,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n}: Pick<\n    CompletePieSvgProps<RawDatum>,\n    | 'width'\n    | 'height'\n    | 'innerRadius'\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'fit'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n}) => {\n    const [activeId, setActiveId] = useState<string | number | null>(null)\n    const computedProps = useMemo(() => {\n        let radius = Math.min(width, height) / 2\n        let innerRadius = radius * Math.min(innerRadiusRatio, 1)\n\n        let centerX = width / 2\n        let centerY = height / 2\n\n        let boundingBox\n        if (fit) {\n            const { points, ...box } = computeArcBoundingBox(\n                centerX,\n                centerY,\n                radius,\n                startAngle - 90,\n                endAngle - 90\n            )\n            const ratio = Math.min(width / box.width, height / box.height)\n\n            const adjustedBox: {\n                width: number\n                height: number\n                x?: number\n                y?: number\n            } = {\n                width: box.width * ratio,\n                height: box.height * ratio,\n            }\n            adjustedBox.x = (width - adjustedBox.width) / 2\n            adjustedBox.y = (height - adjustedBox.height) / 2\n\n            centerX = ((centerX - box.x) / box.width) * box.width * ratio + adjustedBox.x\n            centerY = ((centerY - box.y) / box.height) * box.height * ratio + adjustedBox.y\n\n            boundingBox = { box, ratio, points }\n\n            radius = radius * ratio\n            innerRadius = innerRadius * ratio\n        }\n\n        return {\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n            debug: boundingBox,\n        }\n    }, [width, height, innerRadiusRatio, startAngle, endAngle, fit, cornerRadius])\n\n    const dataWithArc = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius: computedProps.innerRadius,\n        outerRadius: computedProps.radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n    })\n\n    const arcGenerator = useArcGenerator({\n        cornerRadius,\n        padAngle: degreesToRadians(padAngle),\n    })\n\n    return {\n        dataWithArc,\n        arcGenerator,\n        setActiveId,\n        ...computedProps,\n    }\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const usePieLayerContext = <RawDatum>({\n    dataWithArc,\n    arcGenerator,\n    centerX,\n    centerY,\n    radius,\n    innerRadius,\n}: {\n    dataWithArc: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    centerX: number\n    centerY: number\n    radius: number\n    innerRadius: number\n}): PieCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            dataWithArc,\n            arcGenerator,\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n        }),\n        [dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius]\n    )\n","import React, { createElement, useMemo } from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CompletePieSvgProps } from './types'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: CompletePieSvgProps<RawDatum>['borderWidth']\n    borderColor: CompletePieSvgProps<RawDatum>['borderColor']\n    isInteractive: CompletePieSvgProps<RawDatum>['isInteractive']\n    onClick?: CompletePieSvgProps<RawDatum>['onClick']\n    onMouseEnter?: CompletePieSvgProps<RawDatum>['onMouseEnter']\n    onMouseMove?: CompletePieSvgProps<RawDatum>['onMouseMove']\n    onMouseLeave?: CompletePieSvgProps<RawDatum>['onMouseLeave']\n    setActiveId: (id: null | string | number) => void\n    tooltip: CompletePieSvgProps<RawDatum>['tooltip']\n    transitionMode: CompletePieSvgProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    setActiveId,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            setActiveId(datum.id)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, setActiveId, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveId(null)\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveId, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n","import React, { ReactNode, Fragment, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { ArcLabelsLayer, ArcLinkLabelsLayer } from '@nivo/arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport PieLegends from './PieLegends'\nimport { useNormalizedData, usePieFromBox, usePieLayerContext } from './hooks'\nimport { ComputedDatum, PieLayer, PieSvgProps, PieLayerId } from './types'\nimport { defaultProps } from './props'\nimport { Arcs } from './Arcs'\n\nconst InnerPie = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    layers = defaultProps.layers as PieLayer<RawDatum>[],\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsComponent,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n    arcLinkLabelComponent,\n\n    // styling\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip = defaultProps.tooltip,\n\n    transitionMode = defaultProps.transitionMode,\n\n    legends = defaultProps.legends,\n    role = defaultProps.role,\n}: PieSvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const {\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n        setActiveId,\n    } = usePieFromBox<RawDatum>({\n        data: normalizedData,\n        width: innerWidth,\n        height: innerHeight,\n        fit,\n        innerRadius: innerRadiusRatio,\n        startAngle,\n        endAngle,\n        padAngle,\n        sortByValue,\n        cornerRadius,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n    })\n\n    const boundDefs = bindDefs(defs, dataWithArc, fill)\n\n    const layerById: Record<PieLayerId, ReactNode> = {\n        arcLinkLabels: null,\n        arcs: null,\n        arcLabels: null,\n        legends: null,\n    }\n\n    if (enableArcLinkLabels && layers.includes('arcLinkLabels')) {\n        layerById.arcLinkLabels = (\n            <ArcLinkLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLinkLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLinkLabel}\n                skipAngle={arcLinkLabelsSkipAngle}\n                offset={arcLinkLabelsOffset}\n                diagonalLength={arcLinkLabelsDiagonalLength}\n                straightLength={arcLinkLabelsStraightLength}\n                strokeWidth={arcLinkLabelsThickness}\n                textOffset={arcLinkLabelsTextOffset}\n                textColor={arcLinkLabelsTextColor}\n                linkColor={arcLinkLabelsColor}\n                component={arcLinkLabelComponent}\n            />\n        )\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                setActiveId={setActiveId}\n                tooltip={tooltip}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    if (legends.length > 0 && layers.includes('legends')) {\n        layerById.legends = (\n            <PieLegends<RawDatum>\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                dataWithArc={dataWithArc}\n                legends={legends}\n            />\n        )\n    }\n\n    const layerContext = usePieLayerContext<RawDatum>({\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as PieLayerId] !== undefined) {\n                    return layerById[layer as PieLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Pie = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    ...otherProps\n}: PieSvgProps<RawDatum>) => (\n    <Container\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n        theme={theme}\n    >\n        <InnerPie<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport { Pie } from './Pie'\nimport { PieSvgProps } from './types'\n\nexport const ResponsivePie = <RawDatum,>(\n    props: Omit<PieSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Pie<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import React, { createElement, useEffect, useMemo, useRef } from 'react'\nimport {\n    // @ts-ignore\n    getRelativeCursor,\n    useDimensions,\n    useTheme,\n    Container,\n} from '@nivo/core'\n// @ts-ignore\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    Arc,\n    findArcUnderCursor,\n    useArcLabels,\n    drawCanvasArcLabels,\n    useArcLinkLabels,\n    drawCanvasArcLinkLabels,\n} from '@nivo/arcs'\nimport { useNormalizedData, usePieFromBox } from './hooks'\nimport { ComputedDatum, PieCanvasProps } from './types'\nimport { defaultProps } from './props'\n\nconst InnerPieCanvas = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = 1,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n\n    legends = defaultProps.legends,\n}: PieCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const {\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n        setActiveId,\n    } = usePieFromBox<RawDatum>({\n        data: normalizedData,\n        width: innerWidth,\n        height: innerHeight,\n        fit,\n        innerRadius: innerRadiusRatio,\n        startAngle,\n        endAngle,\n        padAngle,\n        sortByValue,\n        cornerRadius,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n    })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const arcLabels = useArcLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        label: arcLabel,\n        skipAngle: arcLabelsSkipAngle,\n        offset: arcLabelsRadiusOffset,\n        textColor: arcLabelsTextColor,\n    })\n\n    const arcLinkLabels = useArcLinkLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        skipAngle: arcLinkLabelsSkipAngle,\n        offset: arcLinkLabelsOffset,\n        diagonalLength: arcLinkLabelsDiagonalLength,\n        straightLength: arcLinkLabelsStraightLength,\n        label: arcLinkLabel,\n        linkColor: arcLinkLabelsColor,\n        textOffset: arcLinkLabelsTextOffset,\n        textColor: arcLinkLabelsTextColor,\n    })\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n        arcGenerator.context(ctx)\n\n        ctx.save()\n        ctx.translate(centerX, centerY)\n\n        dataWithArc.forEach(arc => {\n            ctx.beginPath()\n            ctx.fillStyle = arc.color\n\n            ctx.strokeStyle = getBorderColor(arc)\n            ctx.lineWidth = borderWidth\n\n            arcGenerator(arc.arc)\n\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableArcLinkLabels === true) {\n            drawCanvasArcLinkLabels<ComputedDatum<RawDatum>>(\n                ctx,\n                arcLinkLabels,\n                theme,\n                arcLinkLabelsThickness\n            )\n        }\n\n        if (enableArcLabels === true) {\n            drawCanvasArcLabels<ComputedDatum<RawDatum>>(ctx, arcLabels, theme)\n        }\n\n        // legends assume a box rather than a center,\n        // that's why we restore previously saved position here.\n        ctx.restore()\n        legends.forEach(legend => {\n            renderLegendToCanvas(ctx, {\n                ...legend,\n                data: dataWithArc,\n                containerWidth: innerWidth,\n                containerHeight: innerHeight,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        centerX,\n        centerY,\n        arcGenerator,\n        dataWithArc,\n        getBorderColor,\n        enableArcLabels,\n        arcLabels,\n        enableArcLinkLabels,\n        arcLinkLabels,\n        arcLinkLabelsThickness,\n        legends,\n        theme,\n    ])\n\n    const arcs = useMemo(\n        () =>\n            dataWithArc.map(datum => ({\n                id: datum.id,\n                ...datum.arc,\n            })),\n        [dataWithArc]\n    )\n\n    const getArcFromMouse = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n        const hoveredArc = findArcUnderCursor<Arc & { id: string | number }>(\n            margin.left + centerX,\n            margin.top + centerY,\n            radius,\n            innerRadius,\n            arcs,\n            x,\n            y\n        )\n\n        if (!hoveredArc) return null\n\n        return dataWithArc.find(datum => datum.id === hoveredArc.id)\n    }\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        const datum = getArcFromMouse(event)\n        if (datum) {\n            onMouseMove?.(datum, event)\n            setActiveId(datum.id)\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n        } else {\n            setActiveId(null)\n            hideTooltip()\n        }\n    }\n\n    const handleMouseLeave = () => {\n        hideTooltip()\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!onClick) return\n\n        const arc = getArcFromMouse(event)\n        if (arc) {\n            onClick(arc, event)\n        }\n    }\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const PieCanvas = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    theme,\n    ...otherProps\n}: PieCanvasProps<RawDatum>) => (\n    <Container isInteractive={isInteractive} theme={theme}>\n        <InnerPieCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport { PieCanvas } from './PieCanvas'\nimport { PieCanvasProps } from './types'\n\nexport const ResponsivePieCanvas = <RawDatum,>(\n    props: Omit<PieCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <PieCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"sourceRoot":""}