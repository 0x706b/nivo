{"version":3,"file":"24fb77aba17c0d57817f1a7761eec2d99017acf3-58846cada50906edd04b.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-time/src/duration.js","webpack://nivo-website/../node_modules/d3-time/src/interval.js","webpack://nivo-website/./src/data/components/network/props.ts","webpack://nivo-website/../src/color.ts","webpack://nivo-website/../src/sets/countryCodes.ts","webpack://nivo-website/../src/sets/names.ts","webpack://nivo-website/../src/sets/programmingLanguages.ts","webpack://nivo-website/../src/bullet.ts","webpack://nivo-website/../src/chord.ts","webpack://nivo-website/../src/network.ts","webpack://nivo-website/../src/parallelCoordinates.ts","webpack://nivo-website/../src/sankey.ts","webpack://nivo-website/../src/swarmplot.ts","webpack://nivo-website/../src/index.ts","webpack://nivo-website/../node_modules/d3-force/src/link.js","webpack://nivo-website/../node_modules/d3-force/src/manyBody.js","webpack://nivo-website/../node_modules/d3-force/src/center.js","webpack://nivo-website/../src/props.js","webpack://nivo-website/../src/hooks.js","webpack://nivo-website/../src/Node.js","webpack://nivo-website/../src/AnimatedNodes.js","webpack://nivo-website/../src/StaticNodes.js","webpack://nivo-website/../src/Link.js","webpack://nivo-website/../src/AnimatedLinks.js","webpack://nivo-website/../src/StaticLinks.js","webpack://nivo-website/../src/NetworkNodeTooltip.js","webpack://nivo-website/../src/Network.js","webpack://nivo-website/../src/ResponsiveNetwork.js","webpack://nivo-website/../src/NetworkCanvas.js","webpack://nivo-website/../src/ResponsiveNetworkCanvas.js","webpack://nivo-website/../node_modules/lodash/_arrayShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/_baseShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseValues.js","webpack://nivo-website/../node_modules/lodash/_shuffleSelf.js","webpack://nivo-website/../node_modules/lodash/random.js","webpack://nivo-website/../node_modules/lodash/shuffle.js","webpack://nivo-website/../node_modules/lodash/values.js"],"sourcesContent":["export var durationSecond = 1e3;\nexport var durationMinute = 6e4;\nexport var durationHour = 36e5;\nexport var durationDay = 864e5;\nexport var durationWeek = 6048e5;","var t0 = new Date(),\n    t1 = new Date();\nexport default function newInterval(floori, offseti, count, field) {\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;\n  }\n\n  interval.floor = function (date) {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = function (date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function (date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function (date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function (start, stop, step) {\n    var range = [],\n        previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n\n    do {\n      range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    } while (previous < start && start < stop);\n\n    return range;\n  };\n\n  interval.filter = function (test) {\n    return newInterval(function (date) {\n      if (date >= date) while (floori(date), !test(date)) {\n        date.setTime(date - 1);\n      }\n    }, function (date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function (start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function (step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n        return field(d) % step === 0;\n      } : function (d) {\n        return interval.count(0, d) % step === 0;\n      });\n    };\n  }\n\n  return interval;\n}","import { NetworkDefaultProps } from '@nivo/network'\nimport { motionProperties, groupProperties } from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'width',\n        group: 'Base',\n        help: 'Chart width.',\n        description: `\n            Not required if using responsive component.\n        `,\n        type: 'number',\n        required: true,\n        flavors: ['svg', 'canvas'],\n        enableControlForFlavors: ['api'],\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        group: 'Base',\n        help: 'Chart height.',\n        description: `\n            Not required if using responsive component.\n        `,\n        type: 'number',\n        required: true,\n        flavors: ['svg', 'canvas'],\n        enableControlForFlavors: ['api'],\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        required: false,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'margin',\n        group: 'Base',\n        type: 'object',\n        required: false,\n        help: 'Chart margin.',\n        flavors: ['svg', 'canvas'],\n        controlType: 'margin',\n    },\n    {\n        key: 'linkDistance',\n        group: 'Simulation',\n        type: 'number | string | (link: Link) => number',\n        required: false,\n        help: `Control links' distance.`,\n        flavors: ['svg', 'canvas'],\n        description: `\n            If you set a **number**, this value will be used for all links.\n\n            If you use a **string**, this will be used to pick the distance\n            from the corresponding link property, thus, this property\n            should exist on each link.\n\n            If you use a **function**, it will receive a link and must return\n            the desired distance.\n        `,\n    },\n    {\n        key: 'repulsivity',\n        group: 'Simulation',\n        type: 'number',\n        required: false,\n        help: 'Control how nodes repel each other.',\n        description: `\n            This value will also affect the strength\n            of \\`distanceMin\\` and \\`distanceMax\\`.\n        `,\n        flavors: ['svg', 'canvas'],\n        controlType: 'range',\n        controlOptions: {\n            min: 1,\n            max: 100,\n        },\n        defaultValue: NetworkDefaultProps.repulsivity,\n    },\n    {\n        key: 'distanceMin',\n        group: 'Simulation',\n        type: 'number',\n        required: false,\n        help: 'Sets the minimum distance between nodes for the many-body force.',\n        flavors: ['svg', 'canvas'],\n        defaultValue: NetworkDefaultProps.distanceMin,\n    },\n    {\n        key: 'distanceMax',\n        group: 'Simulation',\n        type: 'number',\n        required: false,\n        help: 'Sets the maximum disteance between nodes for the many-body force.',\n        flavors: ['svg', 'canvas'],\n        defaultValue: NetworkDefaultProps.distanceMax,\n    },\n    {\n        key: 'iterations',\n        group: 'Simulation',\n        help: 'Adjust the simulation quality.',\n        description: `\n            Increasing this number will result in a **more accurate simulation**,\n            however it will also involve more computing.\n        `,\n        type: 'number',\n        required: false,\n        defaultValue: NetworkDefaultProps.iterations,\n        flavors: ['svg', 'canvas'],\n        controlType: 'range',\n        controlOptions: {\n            min: 60,\n            max: 260,\n        },\n    },\n    {\n        key: 'nodeColor',\n        group: 'Nodes',\n        type: 'string | (node: Node) => string',\n        required: false,\n        help: `Control nodes' color.`,\n        flavors: ['svg', 'canvas'],\n    },\n    {\n        key: 'nodeBorderWidth',\n        group: 'Nodes',\n        type: 'number | (node: Node) => number',\n        required: false,\n        help: `Control nodes' border width.`,\n        defaultValue: NetworkDefaultProps.nodeBorderWidth,\n        flavors: ['svg', 'canvas'],\n        controlType: 'lineWidth',\n    },\n    {\n        key: 'nodeBorderColor',\n        group: 'Nodes',\n        type: 'string | object | (link: Link) => string',\n        required: false,\n        help: `Control nodes' border color.`,\n        defaultValue: NetworkDefaultProps.nodeBorderColor,\n        flavors: ['svg', 'canvas'],\n        controlType: 'inheritedColor',\n    },\n    {\n        key: 'linkThickness',\n        enableControlForFlavors: ['canvas'],\n        group: 'Links',\n        type: 'number | (link: Link) => number',\n        required: false,\n        help: `Control links' thickness.`,\n        flavors: ['svg', 'canvas'],\n        defaultValue: NetworkDefaultProps.linkThickness,\n        controlType: 'lineWidth',\n    },\n    {\n        key: 'linkColor',\n        group: 'Links',\n        type: 'string | (link: Link) => string',\n        required: false,\n        help: `Control links' color.`,\n        defaultValue: NetworkDefaultProps.linkColor,\n        flavors: ['svg', 'canvas'],\n        controlType: 'inheritedColor',\n        controlOptions: {\n            inheritableProperties: ['source.color', 'target.color'],\n        },\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom tooltip component.',\n        flavors: ['svg', 'canvas'],\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML\n            element and will receive the node's data.\n        `,\n    },\n    {\n        key: 'onClick',\n        group: 'Interactivity',\n        help: 'onClick handler.',\n        type: '(node, event) => void',\n        required: false,\n        flavors: ['svg', 'canvas'],\n    },\n    {\n        key: 'layers',\n        type: `('links' | 'nodes')[] | FunctionComponent<LayerProps>`,\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        required: false,\n        defaultValue: NetworkDefaultProps.layers,\n        flavors: ['svg', 'canvas'],\n    },\n    ...motionProperties(['svg'], NetworkDefaultProps),\n]\n\nexport const groups = groupProperties(props)\n","export const randColor = () => `hsl(${Math.round(Math.random() * 360)}, 70%, 50%)`\n","export const countryCodes = [\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AS',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CC',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CU',\n    'CV',\n    'CW',\n    'CX',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FM',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HM',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IR',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KP',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MH',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MP',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NF',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PW',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SY',\n    'SZ',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'UM',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VI',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n]\n","export const names = [\n    'John',\n    'Raoul',\n    'Jane',\n    'Marcel',\n    'Ibrahim',\n    'Junko',\n    'Lyu',\n    'André',\n    'Maki',\n    'Véronique',\n    'Thibeau',\n    'Josiane',\n    'Raphaël',\n    'Mathéo',\n    'Margot',\n    'Hugo',\n    'Christian',\n    'Louis',\n    'Ella',\n    'Alton',\n    'Jimmy',\n    'Guillaume',\n    'Sébastien',\n    'Alfred',\n    'Bon',\n    'Solange',\n    'Kendrick',\n    'Jared',\n    'Satoko',\n    'Tomoko',\n    'Line',\n    'Delphine',\n    'Leonard',\n    'Alphonse',\n    'Lisa',\n    'Bart',\n    'Benjamin',\n    'Homer',\n    'Jack',\n]\n","export const programmingLanguages = [\n    'php',\n    'make',\n    'javascript',\n    'go',\n    'erlang',\n    'elixir',\n    'lisp',\n    'haskell',\n    'python',\n    'ruby',\n    'hack',\n    'scala',\n    'java',\n    'rust',\n    'c',\n    'css',\n    'sass',\n    'stylus',\n]\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\ntype Options = Partial<{\n    float: boolean\n    markerCount: number\n    measureCount: number\n    rangeCount: number\n    subtitle: string\n    title: string\n}>\n\nexport const generateBulletData = (\n    id: string,\n    max: number,\n    {\n        title,\n        subtitle,\n        rangeCount = 5,\n        measureCount = 1,\n        markerCount = 1,\n        float = false,\n    }: Options = {}\n) => {\n    const ranges = range(rangeCount - 1).reduce(\n        acc => {\n            const remaining = max - acc[0]\n            return [random(remaining, float), ...acc]\n        },\n        [max]\n    )\n\n    const measures = range(measureCount).reduce<number[]>(acc => {\n        if (acc.length === 0) return [random(max, float)]\n        return [random(acc[0], float), ...acc]\n    }, [])\n\n    const markers = range(markerCount).map(() => max * 0.6 + random(max * 0.4))\n\n    return {\n        id,\n        title,\n        subtitle,\n        ranges,\n        measures,\n        markers,\n    }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport { names } from './sets'\n\nexport const generateChordData = ({\n    keys = names,\n    size = 7,\n    minValue = 0,\n    maxValue = 2000,\n} = {}) => {\n    const maxSize = Math.min(keys.length, size)\n    const selectedKeys = keys.slice(0, maxSize)\n\n    const matrix = range(maxSize).map(() =>\n        range(maxSize).map(() => {\n            if (Math.random() < 0.66) return random(minValue, maxValue / 4)\n            return random(minValue, maxValue)\n        })\n    )\n\n    return { matrix, keys: selectedKeys }\n}\n","import random from 'lodash/random'\n\ntype Link = {\n    distance: number\n    source: string\n    target: string\n}\n\ntype ExtraNode = {\n    color: string\n    depth: number\n    id: string\n    radius: number\n}\n\nexport const generateNetworkData = ({\n    rootNodeRadius = 12,\n    minMidNodes = 6,\n    maxMidNodes = 16,\n    midNodeRadius = 8,\n    minLeaves = 4,\n    maxLeaves = 16,\n    leafRadius = 4,\n} = {}) => {\n    const rootNode = {\n        id: '0',\n        radius: rootNodeRadius,\n        depth: 0,\n        color: 'rgb(244, 117, 96)',\n    }\n    let nodes = Array.from({ length: random(minMidNodes, maxMidNodes) }, (_, k) => ({\n        id: `${k + 1}`,\n        radius: midNodeRadius,\n        depth: 1,\n        color: 'rgb(97, 205, 187)',\n    }))\n\n    const links: Link[] = []\n    const extraNodes: ExtraNode[] = []\n    nodes.forEach(source => {\n        links.push({\n            source: '0',\n            target: source.id,\n            distance: 50,\n        })\n        nodes.forEach(target => {\n            if (Math.random() < 0.04) {\n                links.push({\n                    source: source.id,\n                    target: target.id,\n                    distance: 70,\n                })\n            }\n        })\n        Array.from({ length: random(minLeaves, maxLeaves) }, (_, k) => {\n            extraNodes.push({\n                id: `${source.id}.${k}`,\n                radius: leafRadius,\n                depth: 2,\n                color: 'rgb(232, 193, 160)',\n            })\n            links.push({\n                source: source.id,\n                target: `${source.id}.${k}`,\n                distance: 30,\n            })\n\n            return null\n        })\n    })\n\n    nodes.push(rootNode)\n    nodes = nodes.concat(extraNodes)\n\n    return { nodes, links }\n}\n","import random from 'lodash/random'\nimport range from 'lodash/range'\nimport shuffle from 'lodash/shuffle'\n\ntype Options = Partial<{\n    size: number\n    keys: Array<{\n        key: string\n        random?: [number, number]\n        shuffle?: string[]\n    }>\n}>\n\nexport const generateParallelCoordinatesData = ({\n    size = 26,\n    keys = [\n        { key: 'temp', random: [-10, 40] },\n        { key: 'cost', random: [200, 400000] },\n        { key: 'color', shuffle: ['red', 'yellow', 'green'] },\n        { key: 'target', shuffle: ['A', 'B', 'C', 'D', 'E'] },\n        { key: 'volume', random: [0.2, 7.6] },\n    ],\n}: Options = {}) => {\n    const datumGenerator = () =>\n        keys.reduce((acc, key) => {\n            let value\n            if (key.random !== undefined) {\n                value = random(...key.random)\n            } else if (key.shuffle !== undefined) {\n                value = shuffle(key.shuffle)[0]\n            }\n\n            return { ...acc, [key.key]: value }\n        }, {})\n\n    return range(size).map(datumGenerator)\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { randColor } from './color'\nimport { names } from './sets'\n\ntype Link = {\n    source: string\n    target: string\n    value: number\n}\n\nconst availableNodes = names.map(name => ({ id: name }))\n\nconst getNodeTargets = (id: string, links: Link[], currentPath?: string[]): string[] => {\n    const targets = links\n        .filter(({ source }) => source === id)\n        .map(({ target }) => {\n            if (target === id) {\n                throw new Error(\n                    `[sankey] a node cannot be linked on itself:\\n  link: ${id} —> ${id}`\n                )\n            }\n            if (currentPath?.includes(target)) {\n                throw new Error(\n                    `[sankey] found cyclic dependency:\\n  link: ${currentPath.join(\n                        ' —> '\n                    )} —> ${target}`\n                )\n            }\n            return target\n        })\n\n    return targets.reduce(\n        (acc, targetId) =>\n            acc.concat(\n                getNodeTargets(\n                    targetId,\n                    links,\n                    currentPath ? [...currentPath, targetId] : [id, targetId]\n                )\n            ),\n        targets\n    )\n}\n\nconst getNodesTargets = (links: Link[]) =>\n    links.reduce<Record<string, string[]>>((targetsById, link) => {\n        if (!targetsById[link.source]) {\n            targetsById[link.source] = getNodeTargets(link.source, links)\n        }\n\n        return targetsById\n    }, {})\n\nexport const generateSankeyData = ({\n    nodeCount,\n    maxIterations = 3,\n}: {\n    nodeCount?: number\n    maxIterations?: number\n} = {}) => {\n    const nodes = availableNodes.slice(0, nodeCount).map(node =>\n        Object.assign({}, node, {\n            nodeColor: randColor(),\n        })\n    )\n\n    const links: Link[] = []\n    shuffle(nodes).forEach(({ id }) => {\n        range(random(1, maxIterations)).forEach(() => {\n            const targetsById = getNodesTargets(links)\n            const randId = shuffle(nodes.filter(n => n.id !== id).map(n => n.id))[0]\n            if (\n                (!targetsById[randId] || !targetsById[randId].includes(id)) &&\n                (!targetsById[id] || !targetsById[id].includes(randId))\n            ) {\n                links.push({\n                    source: id,\n                    target: randId,\n                    value: random(5, 200),\n                })\n            }\n        })\n    })\n\n    return { nodes, links }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\n\ntype SwarmPlotDatum = {\n    id: string\n    categories?: number[]\n    group: string\n    price: number\n    volume: number\n}\n\nconst randomPrice = () => random(0, 500)\nconst randomVolume = () => random(4, 20)\nconst randomCategory = () => random(3, 17)\n\nexport const generateSwarmPlotData = (\n    groups: string[],\n    { min = 60, max = 100, categoryCount = 0 }\n) => ({\n    groups,\n    data: groups.reduce<SwarmPlotDatum[]>(\n        (acc, group, groupIndex) => [\n            ...acc,\n            ...range(random(min, max))\n                .map(() => randomPrice())\n                .map((price, index) => {\n                    const datum: SwarmPlotDatum = {\n                        id: `${groupIndex}.${index}`,\n                        group,\n                        price,\n                        volume: randomVolume(),\n                    }\n\n                    if (categoryCount > 0) {\n                        datum.categories = range(categoryCount).map(randomCategory)\n                    }\n\n                    return datum\n                }),\n        ],\n        []\n    ),\n})\n\nexport const randomizeSwarmPlotData = (previousData: ReturnType<typeof generateSwarmPlotData>) => ({\n    groups: previousData.groups,\n    data: previousData.data.map(d => {\n        const datum = {\n            ...d,\n            group: shuffle(previousData.groups)[0],\n            price: randomPrice(),\n            volume: randomVolume(),\n        }\n\n        if (d.categories !== undefined) {\n            datum.categories = range(3).map(randomCategory)\n        }\n\n        return datum\n    }),\n})\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { timeDays } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport * as color from './color'\nimport * as sets from './sets'\n\nexport { sets }\nexport const randColor = color.randColor\n\nexport const generateProgrammingLanguageStats = (shouldShuffle = true, limit = -1) => {\n    let langs = sets.programmingLanguages\n    if (shouldShuffle) {\n        langs = shuffle(langs)\n    }\n    if (limit < 1) {\n        limit = 1 + Math.round(Math.random() * (sets.programmingLanguages.length - 1))\n    }\n\n    return langs.slice(0, limit).map(language => ({\n        label: language,\n        value: Math.round(Math.random() * 600),\n        color: randColor(),\n    }))\n}\n\nexport const uniqRand = <T>(generator: (...args: unknown[]) => T) => {\n    const used: T[] = []\n\n    return (...args: unknown[]) => {\n        let value\n        do {\n            value = generator(...args)\n        } while (used.includes(value))\n\n        used.push(value)\n\n        return value\n    }\n}\n\nexport const randCountryCode = () => shuffle(sets.countryCodes)[0]\n\ntype DrinkDatum = {\n    id: string\n    color: string\n    data: Array<{\n        color: string\n        x: string\n        y: number\n    }>\n}\n\nexport const generateDrinkStats = (xSize = 16) => {\n    const rand = () => random(0, 60)\n    const types = ['whisky', 'rhum', 'gin', 'vodka', 'cognac']\n    const country = uniqRand(randCountryCode)\n\n    const data: DrinkDatum[] = types.map(id => ({\n        id,\n        color: randColor(),\n        data: [],\n    }))\n\n    range(xSize).forEach(() => {\n        const x = country()\n        types.forEach(id => {\n            data.find(d => d.id === id)?.data.push({\n                color: randColor(),\n                x,\n                y: rand(),\n            })\n        })\n    })\n\n    return data\n}\n\nexport const generateSerie = (xSize = 20) => {\n    const max = 100 + Math.random() * (Math.random() * 600)\n\n    return range(xSize).map(() => Math.round(Math.random() * max))\n}\n\nexport const generateSeries = (ids: string[], xKeys: string[]) =>\n    ids.map(id => ({\n        id,\n        color: randColor(),\n        data: xKeys.map(x => ({ x, y: Math.round(Math.random() * 300) })),\n    }))\n\nexport const generateStackData = (size = 3) => {\n    const length = 16\n    return range(size).map(() => generateSerie(length).map((v, i) => ({ x: i, y: v })))\n}\n\nexport const generateCountriesPopulation = (size: number) => {\n    const countryCode = uniqRand(randCountryCode)\n\n    return range(size).map(() => ({\n        country: countryCode(),\n        population: 200 + Math.round(Math.random() * Math.random() * 1000000),\n    }))\n}\n\nexport const generateOrderedDayCounts = (from: Date, to: Date) => {\n    const days = timeDays(from, to)\n    const dayFormat = timeFormat('%Y-%m-%d')\n\n    return days.map(day => {\n        return {\n            value: Math.round(Math.random() * 400),\n            day: dayFormat(day),\n        }\n    })\n}\n\nexport const generateDayCounts = (from: Date, to: Date, maxSize = 0.9) => {\n    const days = generateOrderedDayCounts(from, to)\n\n    const size =\n        Math.round(days.length * (maxSize * 0.4)) +\n        Math.round(Math.random() * (days.length * (maxSize * 0.6)))\n\n    return shuffle(days).slice(0, size)\n}\n\nexport const generateCountriesData = (\n    keys: string[],\n    { size = 12, min = 0, max = 200, withColors = true } = {}\n) =>\n    sets.countryCodes.slice(0, size).map(country => {\n        const d: Record<string, unknown> = {\n            country,\n        }\n        keys.forEach(key => {\n            d[key] = random(min, max)\n            if (withColors === true) {\n                d[`${key}Color`] = randColor()\n            }\n        })\n\n        return d\n    })\n\nconst libTreeItems = [\n    [\n        'viz',\n        [\n            ['stack', [['cchart'], ['xAxis'], ['yAxis'], ['layers']]],\n            [\n                'ppie',\n                [\n                    ['chart', [['pie', [['outline'], ['slices'], ['bbox']]], ['donut'], ['gauge']]],\n                    ['legends'],\n                ],\n            ],\n        ],\n    ],\n    ['colors', [['rgb'], ['hsl']]],\n    [\n        'utils',\n        [['randomize'], ['resetClock'], ['noop'], ['tick'], ['forceGC'], ['stackTrace'], ['dbg']],\n    ],\n    ['generators', [['address'], ['city'], ['animal'], ['movie'], ['user']]],\n    [\n        'set',\n        [\n            ['clone'],\n            ['intersect'],\n            ['merge'],\n            ['reverse'],\n            ['toArray'],\n            ['toObject'],\n            ['fromCSV'],\n            ['slice'],\n            ['append'],\n            ['prepend'],\n            ['shuffle'],\n            ['pick'],\n            ['plouc'],\n        ],\n    ],\n    [\n        'text',\n        [\n            ['trim'],\n            ['slugify'],\n            ['snakeCase'],\n            ['camelCase'],\n            ['repeat'],\n            ['padLeft'],\n            ['padRight'],\n            ['sanitize'],\n            ['ploucify'],\n        ],\n    ],\n    [\n        'misc',\n        [\n            ['greetings', [['hey'], ['HOWDY'], ['aloha'], ['AHOY']]],\n            ['other'],\n            [\n                'path',\n                [\n                    ['pathA'],\n                    ['pathB', [['pathB1'], ['pathB2'], ['pathB3'], ['pathB4']]],\n                    [\n                        'pathC',\n                        [\n                            ['pathC1'],\n                            ['pathC2'],\n                            ['pathC3'],\n                            ['pathC4'],\n                            ['pathC5'],\n                            ['pathC6'],\n                            ['pathC7'],\n                            ['pathC8'],\n                            ['pathC9'],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n]\n\nexport const generateLibTree = (name = 'nivo', limit?: number | null, children = libTreeItems) => {\n    limit = limit || children.length\n    if (limit > children.length) {\n        limit = children.length\n    }\n\n    const tree: Record<string, unknown> = {\n        name,\n        color: randColor(),\n    }\n    if (children?.length > 0) {\n        tree.children = range(limit).map((_, i) => {\n            const leaf = children[i]\n\n            // full path `${name}.${leaf[0]}`\n            return generateLibTree(leaf[0] as string, null, (leaf[1] ?? []) as any)\n        })\n    } else {\n        tree.loc = Math.round(Math.random() * 200000)\n    }\n\n    return tree\n}\n\nconst wines = ['chardonay', 'carmenere', 'syrah']\nconst wineTastes = ['fruity', 'bitter', 'heavy', 'strong', 'sunny']\n\nexport const generateWinesTastes = ({ randMin = 20, randMax = 120 } = {}) => {\n    const data = wineTastes.map(taste => {\n        const d: Record<string, unknown> = { taste }\n        wines.forEach(wine => {\n            d[wine] = random(randMin, randMax)\n        })\n\n        return d\n    })\n\n    return { data, keys: wines }\n}\n\nexport * from './bullet'\nexport * from './chord'\nexport * from './network'\nexport * from './parallelCoordinates'\nexport * from './sankey'\nexport * from './swarmplot'\n","import constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"node not found: \" + nodeId);\n  return node;\n}\n\nexport default function (links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      count,\n      bias,\n      random,\n      iterations = 1;\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle(random);\n        y = target.y + target.vy - source.y - source.vy || jiggle(random);\n        l = Math.sqrt(x * x + y * y);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l;\n        target.vx -= x * (b = bias[i]);\n        target.vy -= y * b;\n        source.vx += x * (b = 1 - b);\n        source.vy += y * b;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = new Map(nodes.map(function (d, i) {\n      return [id(d, i, nodes), d];\n    })),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function (_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.links = function (_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function (_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function (_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function (_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}","import { quadtree } from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\nimport { x, y } from \"./simulation.js\";\nexport default function () {\n  var nodes,\n      node,\n      random,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i,\n        n = nodes.length,\n        tree = quadtree(nodes, x, y).visitAfter(accumulate);\n\n    for (alpha = _, i = 0; i < n; ++i) {\n      node = nodes[i], tree.visit(apply);\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        node;\n    strengths = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n    }\n  }\n\n  function accumulate(quad) {\n    var strength = 0,\n        q,\n        c,\n        weight = 0,\n        x,\n        y,\n        i; // For internal nodes, accumulate forces from child quadrants.\n\n    if (quad.length) {\n      for (x = y = i = 0; i < 4; ++i) {\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n        }\n      }\n\n      quad.x = x / weight;\n      quad.y = y / weight;\n    } // For leaf nodes, accumulate forces from coincident quadrants.\n    else {\n      q = quad;\n      q.x = q.data.x;\n      q.y = q.data.y;\n\n      do {\n        strength += strengths[q.data.index];\n      } while (q = q.next);\n    }\n\n    quad.value = strength;\n  }\n\n  function apply(quad, x1, _, x2) {\n    if (!quad.value) return true;\n    var x = quad.x - node.x,\n        y = quad.y - node.y,\n        w = x2 - x1,\n        l = x * x + y * y; // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(random), l += x * x;\n        if (y === 0) y = jiggle(random), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * quad.value * alpha / l;\n        node.vy += y * quad.value * alpha / l;\n      }\n\n      return true;\n    } // Otherwise, process points directly.\n    else if (quad.length || l >= distanceMax2) return; // Limit forces for very close nodes; randomize direction if coincident.\n\n\n    if (quad.data !== node || quad.next) {\n      if (x === 0) x = jiggle(random), l += x * x;\n      if (y === 0) y = jiggle(random), l += y * y;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do {\n      if (quad.data !== node) {\n        w = strengths[quad.data.index] * alpha / l;\n        node.vx += x * w;\n        node.vy += y * w;\n      }\n    } while (quad = quad.next);\n  }\n\n  force.initialize = function (_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function (_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function (_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function (_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}","export default function (x, y) {\n  var nodes,\n      strength = 1;\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n\n  function force() {\n    var i,\n        n = nodes.length,\n        node,\n        sx = 0,\n        sy = 0;\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], sx += node.x, sy += node.y;\n    }\n\n    for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i) {\n      node = nodes[i], node.x -= sx, node.y -= sy;\n    }\n  }\n\n  force.initialize = function (_) {\n    nodes = _;\n  };\n\n  force.x = function (_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function (_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  return force;\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { motionPropTypes } from '@nivo/core'\nimport { inheritedColorPropType } from '@nivo/colors'\n\nconst commonPropTypes = {\n    nodes: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n        })\n    ).isRequired,\n    links: PropTypes.arrayOf(\n        PropTypes.shape({\n            source: PropTypes.string.isRequired,\n            target: PropTypes.string.isRequired,\n        })\n    ).isRequired,\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.oneOf(['links', 'nodes']), PropTypes.func])\n    ).isRequired,\n\n    linkDistance: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.number])\n        .isRequired,\n    repulsivity: PropTypes.number.isRequired,\n    distanceMin: PropTypes.number.isRequired,\n    distanceMax: PropTypes.number.isRequired,\n    iterations: PropTypes.number.isRequired,\n\n    nodeColor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    nodeBorderWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    nodeBorderColor: inheritedColorPropType.isRequired,\n\n    linkThickness: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    linkColor: inheritedColorPropType.isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    onClick: PropTypes.func,\n}\n\nexport const NetworkPropTypes = {\n    ...commonPropTypes,\n    role: PropTypes.string.isRequired,\n    ...motionPropTypes,\n}\n\nexport const NetworkCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    layers: ['links', 'nodes'],\n\n    linkDistance: 30,\n    repulsivity: 10,\n    distanceMin: 1,\n    distanceMax: Infinity,\n    iterations: 90,\n\n    nodeBorderWidth: 0,\n    nodeBorderColor: { from: 'color' },\n\n    linkThickness: 1,\n    linkColor: { from: 'source.color' },\n\n    isInteractive: true,\n}\n\nexport const NetworkDefaultProps = {\n    ...commonDefaultProps,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 15,\n    role: 'img',\n}\n\nexport const NetworkCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useState, useEffect, useMemo } from 'react'\nimport get from 'lodash/get'\nimport isString from 'lodash/isString'\nimport isNumber from 'lodash/isNumber'\nimport { forceSimulation, forceManyBody, forceCenter, forceLink } from 'd3-force'\n\nconst computeForces = ({ linkDistance, repulsivity, distanceMin, distanceMax, center }) => {\n    let computedLinkDistance\n    if (typeof linkDistance === 'function') {\n        computedLinkDistance = linkDistance\n    } else if (isNumber(linkDistance)) {\n        computedLinkDistance = linkDistance\n    } else if (isString(linkDistance)) {\n        computedLinkDistance = link => get(link, linkDistance)\n    }\n\n    const linkForce = forceLink()\n        .id(d => d.id)\n        .distance(computedLinkDistance)\n\n    const chargeForce = forceManyBody()\n        .strength(-repulsivity)\n        .distanceMin(distanceMin)\n        .distanceMax(distanceMax)\n\n    const centerForce = forceCenter(center[0], center[1])\n\n    return { link: linkForce, charge: chargeForce, center: centerForce }\n}\n\nexport const useNetwork = ({\n    nodes,\n    links,\n    linkDistance,\n    repulsivity,\n    distanceMin,\n    distanceMax,\n    center,\n    iterations,\n}) => {\n    const [currentNodes, setCurrentNodes] = useState([])\n    const [currentLinks, setCurrentLinks] = useState([])\n\n    useEffect(() => {\n        const forces = computeForces({\n            linkDistance,\n            repulsivity,\n            distanceMin,\n            distanceMax,\n            center,\n        })\n\n        const nodesCopy = nodes.map(node => ({ ...node }))\n        const linksCopy = links.map(link => ({\n            id: `${link.source}.${link.target}`,\n            ...link,\n        }))\n\n        const simulation = forceSimulation(nodesCopy)\n            .force('link', forces.link.links(linksCopy))\n            .force('charge', forces.charge)\n            .force('center', forces.center)\n            .stop()\n\n        simulation.tick(iterations)\n\n        setCurrentNodes(nodesCopy)\n        setCurrentLinks(\n            linksCopy.map(link => {\n                link.previousSource = currentNodes.find(n => n.id === link.source.id)\n                link.previousTarget = currentNodes.find(n => n.id === link.target.id)\n\n                return link\n            })\n        )\n\n        return () => {\n            simulation.stop()\n        }\n    }, [\n        nodes,\n        links,\n        linkDistance,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        center[0],\n        center[1],\n    ])\n\n    return [currentNodes, currentLinks]\n}\n\nexport const useNodeColor = color =>\n    useMemo(() => {\n        if (typeof color === 'function') return color\n        return () => color\n    }, [color])\n\nexport const useLinkThickness = thickness =>\n    useMemo(() => {\n        if (typeof thickness === 'function') return thickness\n        return () => thickness\n    }, [thickness])\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Node = ({\n    node,\n    x,\n    y,\n    radius,\n    color,\n    borderWidth,\n    borderColor,\n    scale = 1,\n    handleNodeClick,\n    handleNodeHover,\n    handleNodeLeave,\n}) => {\n    return (\n        <circle\n            transform={`translate(${x},${y}) scale(${scale})`}\n            r={radius}\n            fill={color}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            onClick={event => handleNodeClick(node, event)}\n            onMouseEnter={event => handleNodeHover(node, event)}\n            onMouseMove={event => handleNodeHover(node, event)}\n            onMouseLeave={handleNodeLeave}\n        />\n    )\n}\n\nNode.propTypes = {\n    node: PropTypes.object.isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    radius: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n    scale: PropTypes.number,\n    handleNodeHover: PropTypes.func.isRequired,\n    handleNodeLeave: PropTypes.func.isRequired,\n}\n\nexport default memo(Node)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { TransitionMotion, spring } from 'react-motion'\nimport { useMotionConfig } from '@nivo/core'\nimport Node from './Node'\n\nconst willEnter = ({ style }) => ({\n    x: style.x.val,\n    y: style.y.val,\n    radius: style.radius.val,\n    scale: 0,\n})\n\nconst willLeave =\n    springConfig =>\n    ({ style }) => ({\n        x: style.x,\n        y: style.y,\n        radius: style.radius,\n        scale: spring(0, springConfig),\n    })\n\nconst AnimatedNodes = ({ nodes, color, borderColor, ...props }) => {\n    const { springConfig } = useMotionConfig()\n\n    return (\n        <TransitionMotion\n            willEnter={willEnter}\n            willLeave={willLeave(springConfig)}\n            styles={nodes.map(node => ({\n                key: node.id,\n                data: node,\n                style: {\n                    x: spring(node.x, springConfig),\n                    y: spring(node.y, springConfig),\n                    radius: spring(node.radius, springConfig),\n                    scale: spring(1, springConfig),\n                },\n            }))}\n        >\n            {interpolatedStyles => (\n                <>\n                    {interpolatedStyles.map(({ key, style, data: node }) => {\n                        return (\n                            <Node\n                                key={key}\n                                node={node}\n                                x={style.x}\n                                y={style.y}\n                                radius={Math.max(style.radius, 0)}\n                                color={color(node)}\n                                borderColor={borderColor(node)}\n                                scale={Math.max(style.scale, 0)}\n                                {...props}\n                            />\n                        )\n                    })}\n                </>\n            )}\n        </TransitionMotion>\n    )\n}\n\nAnimatedNodes.propTypes = {\n    nodes: PropTypes.array.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n    handleNodeHover: PropTypes.func.isRequired,\n    handleNodeLeave: PropTypes.func.isRequired,\n}\n\nexport default memo(AnimatedNodes)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport Node from './Node'\n\nconst StaticNodes = ({ nodes, color, borderColor, ...props }) => {\n    return nodes.map(node => {\n        return (\n            <Node\n                key={node.id}\n                node={node}\n                x={node.x}\n                y={node.y}\n                radius={node.radius}\n                color={color(node)}\n                borderColor={borderColor(node)}\n                {...props}\n            />\n        )\n    })\n}\n\nStaticNodes.propTypes = {\n    nodes: PropTypes.array.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n    handleNodeHover: PropTypes.func.isRequired,\n    handleNodeLeave: PropTypes.func.isRequired,\n}\n\nexport default memo(StaticNodes)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Link = ({ sourceX, sourceY, targetX, targetY, thickness, color }) => {\n    return (\n        <line\n            stroke={color}\n            strokeWidth={thickness}\n            strokeLinecap=\"round\"\n            x1={sourceX}\n            y1={sourceY}\n            x2={targetX}\n            y2={targetY}\n        />\n    )\n}\n\nLink.propTypes = {\n    link: PropTypes.object.isRequired,\n    sourceX: PropTypes.number.isRequired,\n    sourceY: PropTypes.number.isRequired,\n    targetX: PropTypes.number.isRequired,\n    targetY: PropTypes.number.isRequired,\n    thickness: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n}\n\nexport default memo(Link)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { TransitionMotion, spring } from 'react-motion'\nimport { useMotionConfig } from '@nivo/core'\nimport Link from './Link'\n\nconst willEnter = ({ style, data }) => {\n    const sourceX = data.previousSource ? data.previousSource.x : style.sourceX.val\n    const sourceY = data.previousSource ? data.previousSource.y : style.sourceY.val\n\n    return {\n        sourceX,\n        sourceY,\n        targetX: sourceX,\n        targetY: sourceY,\n    }\n}\n\nconst AnimatedLinks = ({ links, linkThickness, linkColor }) => {\n    const { springConfig } = useMotionConfig()\n\n    return (\n        <TransitionMotion\n            willEnter={willEnter}\n            styles={links.map(link => ({\n                key: link.id,\n                data: link,\n                style: {\n                    sourceX: spring(link.source.x, springConfig),\n                    sourceY: spring(link.source.y, springConfig),\n                    targetX: spring(link.target.x, springConfig),\n                    targetY: spring(link.target.y, springConfig),\n                },\n            }))}\n        >\n            {interpolatedStyles => (\n                <>\n                    {interpolatedStyles.map(({ key, style, data: link }) => {\n                        return (\n                            <Link\n                                key={key}\n                                link={link}\n                                color={linkColor(link)}\n                                thickness={linkThickness(link)}\n                                sourceX={style.sourceX}\n                                sourceY={style.sourceY}\n                                targetX={style.targetX}\n                                targetY={style.targetY}\n                            />\n                        )\n                    })}\n                </>\n            )}\n        </TransitionMotion>\n    )\n}\n\nAnimatedLinks.propTypes = {\n    links: PropTypes.array.isRequired,\n    linkThickness: PropTypes.func.isRequired,\n    linkColor: PropTypes.func.isRequired,\n}\n\nexport default memo(AnimatedLinks)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport Link from './Link'\n\nconst StaticLinks = ({ links, linkThickness, linkColor }) => {\n    return links.map(link => {\n        return (\n            <Link\n                key={link.id}\n                link={link}\n                color={linkColor(link)}\n                thickness={linkThickness(link)}\n                sourceX={link.source.x}\n                sourceY={link.source.y}\n                targetX={link.target.x}\n                targetY={link.target.y}\n            />\n        )\n    })\n}\n\nStaticLinks.propTypes = {\n    links: PropTypes.array.isRequired,\n    linkThickness: PropTypes.func.isRequired,\n    linkColor: PropTypes.func.isRequired,\n}\n\nexport default memo(StaticLinks)\n","import { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst NetworkNodeTooltip = ({ node, format, tooltip }) => (\n    <BasicTooltip\n        id={node.id}\n        enableChip={true}\n        color={node.color}\n        format={format}\n        renderContent={typeof tooltip === 'function' ? tooltip.bind(null, { ...node }) : null}\n    />\n)\n\nNetworkNodeTooltip.propTypes = {\n    node: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        color: PropTypes.string.isRequired,\n    }).isRequired,\n    format: PropTypes.func,\n    tooltip: PropTypes.func,\n}\n\nexport default memo(NetworkNodeTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, Fragment, useCallback } from 'react'\nimport { withContainer, useDimensions, SvgWrapper, useTheme, useMotionConfig } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { NetworkPropTypes, NetworkDefaultProps } from './props'\nimport { useNetwork, useNodeColor, useLinkThickness } from './hooks'\nimport AnimatedNodes from './AnimatedNodes'\nimport StaticNodes from './StaticNodes'\nimport AnimatedLinks from './AnimatedLinks'\nimport StaticLinks from './StaticLinks'\nimport NetworkNodeTooltip from './NetworkNodeTooltip'\n\nconst Network = props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n\n        nodes: rawNodes,\n        links: rawLinks,\n\n        linkDistance,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n\n        layers,\n\n        nodeColor,\n        nodeBorderWidth,\n        nodeBorderColor,\n\n        linkThickness,\n        linkColor,\n\n        tooltip,\n        isInteractive,\n        onClick,\n\n        role,\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { animate } = useMotionConfig()\n    const theme = useTheme()\n    const getColor = useNodeColor(nodeColor)\n    const getBorderColor = useInheritedColor(nodeBorderColor, theme)\n    const getLinkThickness = useLinkThickness(linkThickness)\n    const getLinkColor = useInheritedColor(linkColor, theme)\n\n    const [nodes, links] = useNetwork({\n        nodes: rawNodes,\n        links: rawLinks,\n        linkDistance,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        center: [innerWidth / 2, innerHeight / 2],\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleNodeHover = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(<NetworkNodeTooltip node={node} tooltip={tooltip} />, event)\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleNodeLeave = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    const layerById = {\n        links: createElement(animate === true ? AnimatedLinks : StaticLinks, {\n            key: 'links',\n            links,\n            linkThickness: getLinkThickness,\n            linkColor: getLinkColor,\n        }),\n        nodes: createElement(animate === true ? AnimatedNodes : StaticNodes, {\n            key: 'nodes',\n            nodes,\n            color: getColor,\n            borderWidth: nodeBorderWidth,\n            borderColor: getBorderColor,\n            handleNodeClick: isInteractive ? onClick : undefined,\n            handleNodeHover: isInteractive ? handleNodeHover : undefined,\n            handleNodeLeave: isInteractive ? handleNodeLeave : undefined,\n        }),\n    }\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                nodes,\n                                links,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nNetwork.propTypes = NetworkPropTypes\nNetwork.defaultProps = NetworkDefaultProps\n\nexport default withContainer(Network)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Network from './Network'\n\nconst ResponsiveNetwork = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Network width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveNetwork\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useCallback, useRef, useEffect } from 'react'\n\nimport * as React from 'react'\nimport { getDistance, getRelativeCursor, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { NetworkCanvasPropTypes, NetworkCanvasDefaultProps } from './props'\nimport { useNetwork, useNodeColor, useLinkThickness } from './hooks'\nimport NetworkNodeTooltip from './NetworkNodeTooltip'\n\nconst NetworkCanvas = props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio,\n\n        nodes: rawNodes,\n        links: rawLinks,\n\n        linkDistance,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n\n        layers,\n\n        nodeColor,\n        nodeBorderWidth,\n        nodeBorderColor,\n\n        linkThickness,\n        linkColor,\n\n        isInteractive,\n        tooltip,\n        onClick,\n    } = props\n\n    const canvasEl = useRef(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const [nodes, links] = useNetwork({\n        nodes: rawNodes,\n        links: rawLinks,\n        linkDistance,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        center: [innerWidth / 2, innerHeight / 2],\n    })\n\n    const theme = useTheme()\n    const getNodeColor = useNodeColor(nodeColor)\n    const getBorderColor = useInheritedColor(nodeBorderColor, theme)\n    const getLinkThickness = useLinkThickness(linkThickness)\n    const getLinkColor = useInheritedColor(linkColor, theme)\n\n    useEffect(() => {\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'links') {\n                links.forEach(link => {\n                    ctx.strokeStyle = getLinkColor(link)\n                    ctx.lineWidth = getLinkThickness(link)\n                    ctx.beginPath()\n                    ctx.moveTo(link.source.x, link.source.y)\n                    ctx.lineTo(link.target.x, link.target.y)\n                    ctx.stroke()\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    ctx.fillStyle = getNodeColor(node)\n                    ctx.beginPath()\n                    ctx.arc(node.x, node.y, node.radius, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (nodeBorderWidth > 0) {\n                        ctx.strokeStyle = getBorderColor(node)\n                        ctx.lineWidth = nodeBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, {\n                    ...props,\n                    nodes,\n                    links,\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        nodes,\n        links,\n        getNodeColor,\n        nodeBorderWidth,\n        getBorderColor,\n        getLinkThickness,\n        getLinkColor,\n    ])\n\n    const getNodeFromMouseEvent = useCallback(\n        (event) => {\n            if (!canvasEl.current) return null\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n            return nodes.find(node => {\n                const distanceFromNode = getDistance(\n                    node.x,\n                    node.y,\n                    x - margin.left,\n                    y - margin.top\n                )\n                return distanceFromNode <= node.radius\n            })\n        },\n        [canvasEl, margin, nodes]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event) => {\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                showTooltipFromEvent(<NetworkNodeTooltip node={node} tooltip={tooltip} />, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getNodeFromMouseEvent, showTooltipFromEvent, tooltip, hideTooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    const handleClick = useCallback(\n        (event) => {\n            if (!onClick) return\n\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n        />\n    )\n}\n\nNetworkCanvas.propTypes = NetworkCanvasPropTypes\nNetworkCanvas.defaultProps = NetworkCanvasDefaultProps\n\nexport default withContainer(NetworkCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport NetworkCanvas from './NetworkCanvas'\n\nconst ResponsiveNetworkCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <NetworkCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveNetworkCanvas\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n"],"names":["durationSecond","durationMinute","durationHour","durationDay","durationWeek","t0","Date","t1","newInterval","floori","offseti","count","field","interval","date","arguments","length","floor","ceil","round","d0","d1","offset","step","Math","range","start","stop","previous","push","filter","test","setTime","end","every","isFinite","d","props","key","group","help","description","type","required","flavors","enableControlForFlavors","controlType","controlOptions","unit","min","max","defaultValue","NetworkDefaultProps","inheritableProperties","motionProperties","groups","groupProperties","randColor","random","countryCodes","names","programmingLanguages","generateBulletData","id","title","subtitle","rangeCount","measureCount","markerCount","float","ranges","reduce","remaining","acc","measures","markers","map","generateChordData","keys","size","minValue","maxValue","maxSize","selectedKeys","slice","matrix","generateNetworkData","rootNodeRadius","minMidNodes","maxMidNodes","midNodeRadius","minLeaves","maxLeaves","leafRadius","rootNode","radius","depth","color","nodes","Array","from","_","k","links","extraNodes","forEach","source","target","distance","concat","generateParallelCoordinatesData","shuffle","value","availableNodes","n","name","getNodeTargets","currentPath","targets","Error","includes","join","targetId","getNodesTargets","targetsById","link","generateSankeyData","nodeCount","maxIterations","Object","assign","node","nodeColor","randId","randomPrice","randomVolume","randomCategory","generateSwarmPlotData","categoryCount","data","groupIndex","price","index","datum","volume","categories","randomizeSwarmPlotData","previousData","generateProgrammingLanguageStats","shouldShuffle","limit","langs","sets","label","language","uniqRand","generator","used","randCountryCode","generateDrinkStats","xSize","types","country","x","find","y","generateSeries","ids","xKeys","generateDayCounts","to","days","timeDays","dayFormat","timeFormat","day","generateOrderedDayCounts","generateCountriesData","withColors","libTreeItems","generateLibTree","children","tree","i","leaf","loc","wines","wineTastes","generateWinesTastes","randMin","randMax","taste","wine","nodeById","nodeId","get","strengths","distances","bias","strength","constant","iterations","force","alpha","l","b","vx","jiggle","vy","sqrt","initialize","m","Map","initializeStrength","initializeDistance","_nodes","_random","distanceMin2","distanceMax2","Infinity","theta2","quadtree","visitAfter","accumulate","visit","apply","quad","q","c","weight","abs","next","x1","x2","w","distanceMin","distanceMax","theta","sx","sy","commonPropTypes","PropTypes","isRequired","layers","linkDistance","repulsivity","nodeBorderWidth","nodeBorderColor","inheritedColorPropType","linkThickness","linkColor","isInteractive","onClick","NetworkPropTypes","role","motionPropTypes","NetworkCanvasPropTypes","pixelRatio","commonDefaultProps","animate","motionStiffness","motionDamping","NetworkCanvasDefaultProps","window","devicePixelRatio","useNetwork","center","useState","currentNodes","setCurrentNodes","currentLinks","setCurrentLinks","useEffect","forces","computedLinkDistance","isNumber","isString","forceLink","charge","forceManyBody","forceCenter","nodesCopy","linksCopy","simulation","forceSimulation","tick","previousSource","previousTarget","useNodeColor","useMemo","useLinkThickness","thickness","Node","borderWidth","borderColor","scale","handleNodeClick","handleNodeHover","handleNodeLeave","_jsx","transform","r","fill","strokeWidth","stroke","e","event","onMouseEnter","onMouseMove","onMouseLeave","propTypes","memo","willEnter","style","val","willLeave","spring","springConfig","AnimatedNodes","useMotionConfig","TransitionMotion","styles","interpolatedStyles","StaticNodes","Link","sourceX","sourceY","targetX","targetY","strokeLinecap","y1","y2","AnimatedLinks","StaticLinks","NetworkNodeTooltip","format","tooltip","BasicTooltip","enableChip","renderContent","bind","Network","width","height","partialMargin","margin","rawNodes","rawLinks","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","theme","useTheme","getColor","getBorderColor","useInheritedColor","getLinkThickness","getLinkColor","useTooltip","showTooltipFromEvent","hideTooltip","useCallback","layerById","createElement","undefined","SvgWrapper","layer","Fragment","defaultProps","withContainer","ResponsiveNetwork","ResponsiveWrapper","NetworkCanvas","canvasEl","useRef","getNodeColor","current","ctx","getContext","fillStyle","background","fillRect","translate","left","top","strokeStyle","lineWidth","beginPath","moveTo","lineTo","arc","PI","getNodeFromMouseEvent","getRelativeCursor","getDistance","handleMouseHover","handleMouseLeave","handleClick","ref","cursor","ResponsiveNetworkCanvas","copyArray","shuffleSelf","module","exports","array","nativeFloor","nativeRandom","lower","upper","values","collection","arrayMap","object","baseRandom","lastIndex","rand","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","temp","arrayShuffle","baseShuffle","isArray","baseValues"],"sourceRoot":""}