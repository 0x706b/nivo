{"version":3,"file":"be5e23c0be5a470b6ecd7884ba244422590d0b45-7a00d739f2376bee7b1f.js","mappings":"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","sources":["webpack://nivo-website/./src/data/components/scatterplot/generator.ts","webpack://nivo-website/./src/data/components/scatterplot/mapper.ts","webpack://nivo-website/./src/data/components/scatterplot/props.ts","webpack://nivo-website/./src/lib/settings.ts","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/utils.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/AnnotationNote.tsx","webpack://nivo-website/../src/AnnotationLink.tsx","webpack://nivo-website/../src/CircleAnnotationOutline.tsx","webpack://nivo-website/../src/DotAnnotationOutline.tsx","webpack://nivo-website/../src/RectAnnotationOutline.tsx","webpack://nivo-website/../src/Annotation.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/Node.tsx","webpack://nivo-website/../src/props.tsx","webpack://nivo-website/../src/Tooltip.tsx","webpack://nivo-website/../src/ScatterPlotAnnotations.tsx","webpack://nivo-website/../src/Nodes.tsx","webpack://nivo-website/../src/Mesh.tsx","webpack://nivo-website/../src/ScatterPlot.tsx","webpack://nivo-website/../src/ResponsiveScatterPlot.tsx","webpack://nivo-website/../src/ScatterPlotCanvas.tsx","webpack://nivo-website/../src/ResponsiveScatterPlotCanvas.tsx","webpack://nivo-website/../node_modules/lodash/_baseFilter.js","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/filter.js","webpack://nivo-website/../node_modules/lodash/random.js"],"sourcesContent":["import range from 'lodash/range'\nimport random from 'lodash/random'\n\nconst keys = ['group A', 'group B', 'group C', 'group D', 'group E']\nconst ageRange = [0, 100]\nconst weightRange = [0, 120]\n\nconst generateData = size =>\n    keys.map(key => ({\n        id: key,\n        data: range(size).map(i => ({\n            x: random(ageRange[0], ageRange[1]),\n            y: random(weightRange[0], weightRange[1]),\n        })),\n    }))\n\nexport const generateLightDataSet = () => generateData(50)\n\nexport const generateHeavyDataSet = () => generateData(800)\n","import { settingsMapper, mapAxis, mapFormat } from '../../../lib/settings'\n\nexport default settingsMapper(\n    {\n        xFormat: mapFormat,\n        yFormat: mapFormat,\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n    },\n    {\n        exclude: ['enable axisTop', 'enable axisRight', 'enable axisBottom', 'enable axisLeft'],\n    }\n)\n","import { commonDefaultProps, svgDefaultProps } from '@nivo/scatterplot'\nimport {\n    themeProperty,\n    motionProperties,\n    getLegendsProps,\n    groupProperties,\n} from '../../../lib/componentProperties'\nimport {\n    chartDimensions,\n    ordinalColors,\n    blendMode,\n    chartGrid,\n    axes,\n    isInteractive,\n} from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg', 'canvas']\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        flavors: allFlavors,\n        type: 'Object[]',\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                id:   string | number\n                data: Array<{\n                    x: number | string | Date\n                    y: number | string | Date\n                }>\n            }>\n            \\`\\`\\`\n\n            Please note that you should adjust \\`xScale\\`\n            and \\`yScale\\` according to \\`x\\` and \\`y\\` type,\n            for example if you use dates, you should use\n            a \\`time\\` scale.\n        `,\n        required: true,\n    },\n    {\n        key: 'xScale',\n        type: 'object',\n        help: `X scale configuration.`,\n        flavors: allFlavors,\n        group: 'Base',\n        required: false,\n        control: {\n            type: 'object',\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type, supports linear, point and time scales.`,\n                    type: 'string',\n                    flavors: allFlavors,\n                    required: true,\n                    control: {\n                        type: 'choices',\n                        disabled: true,\n                        choices: ['linear'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n                {\n                    key: 'min',\n                    help: 'Minimum scale value.',\n                    flavors: allFlavors,\n                    required: false,\n                    type: `number | 'auto'`,\n                    control: {\n                        type: 'switchableRange',\n                        disabledValue: 'auto',\n                        defaultValue: 0,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n                {\n                    key: 'max',\n                    help: 'Maximum scale value.',\n                    flavors: allFlavors,\n                    required: false,\n                    type: `number | 'auto'`,\n                    control: {\n                        type: 'switchableRange',\n                        disabledValue: 'auto',\n                        defaultValue: 1200,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'xFormat',\n        group: 'Base',\n        flavors: allFlavors,\n        required: false,\n        type: 'string | Function',\n        help: 'Optional formatter for x values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        control: { type: 'valueFormat' },\n    },\n    {\n        key: 'yScale',\n        group: 'Base',\n        flavors: allFlavors,\n        type: 'object',\n        help: `Y scale configuration.`,\n        required: false,\n        control: {\n            type: 'object',\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type, supports linear, point and time scales.`,\n                    type: 'string',\n                    flavors: allFlavors,\n                    required: true,\n                    control: {\n                        type: 'choices',\n                        disabled: true,\n                        choices: ['linear'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n                {\n                    key: 'min',\n                    help: 'Minimum scale value.',\n                    flavors: allFlavors,\n                    required: false,\n                    type: `number | 'auto'`,\n                    control: {\n                        type: 'switchableRange',\n                        disabledValue: 'auto',\n                        defaultValue: 0,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n                {\n                    key: 'max',\n                    help: 'Maximum scale value.',\n                    required: false,\n                    flavors: allFlavors,\n                    type: `number | 'auto'`,\n                    control: {\n                        type: 'switchableRange',\n                        disabledValue: 'auto',\n                        defaultValue: 1200,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'yFormat',\n        group: 'Base',\n        flavors: allFlavors,\n        required: false,\n        type: 'string | Function',\n        help: 'Optional formatter for y values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        control: { type: 'valueFormat' },\n    },\n    {\n        key: 'nodeId',\n        group: 'Base',\n        flavors: allFlavors,\n        required: false,\n        defaultValue: '(d) => `${d.serieId}.${d.index}`',\n        type: 'string | (datum) => string',\n        help: `ID accessor for the node.`,\n        description: `\n            Define how to determine the id of each node on the plot. This value\n            will impact animation. Nodes will transition from a previous state\n            at the same index, thus, it can be  useful to specify this property\n            if we want to establish some continuity between nodes at different\n            index.\n\n            By default nivo will join together the serie.id and datum index.\n        `,\n    },\n    {\n        key: 'nodeSize',\n        group: 'Base',\n        flavors: allFlavors,\n        defaultValue: commonDefaultProps.nodeSize,\n        type: 'number | object | Function',\n        required: false,\n        help: `How to compute node size, static or dynamic.`,\n        description: `\n            If you provide a **number**, all nodes will have the same\n            **fixed size**.\n\n            You can also use an object to define a varying size,\n            it must conform to the following interface:\n\n            \\`\\`\\`\n            {\n                key:    string\n                values: [min: number, max: number]\n                sizes:  [min: number, max: number]\n            }\n            \\`\\`\\`\n\n            Then the size of each node will **depend on the value\n            of \\`key\\` and \\`sizes\\`**.\n\n            If you use a **custom function**, it will receive the current\n            node and must **return a number**.\n        `,\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 2,\n            max: 24,\n        },\n    },\n    ...chartDimensions(allFlavors),\n    themeProperty(['svg', 'canvas']),\n    ordinalColors({\n        flavors: allFlavors,\n        defaultValue: commonDefaultProps.colors,\n    }),\n    blendMode({\n        flavors: ['svg'],\n        target: 'nodes',\n        defaultValue: 'normal', // commonDefaultProps.blendMode,\n    }),\n    {\n        key: 'layers',\n        flavors: ['svg', 'canvas'],\n        group: 'Customization',\n        help: 'Defines the order of layers.',\n        type: '(string | Component)[]',\n        description: `\n            Defines the order of layers, available layers are:\n            \\`grid\\`, \\`axes\\`, \\`points\\`, \\`markers\\`,\n            \\`mesh\\`, \\`legends\\`.\n\n            You can also use this to insert extra layers\n            to the chart.\n\n            For \\`ScatterPlot\\`, the extra layer should be a component\n            and will receive current chart context as props.\n\n            If using \\`ScatterPlotCanvas\\`, the extra layer should be\n            a function and will receive canvas context as first argument\n            and current chart context object as second.\n        `,\n        required: false,\n        defaultValue: svgDefaultProps.layers,\n    },\n    {\n        key: 'nodeComponent',\n        flavors: ['svg'],\n        group: 'Customization',\n        help: 'Override default node rendering for SVG implementation.',\n        type: 'FunctionComponent<ScatterPlotNodeProps<RawDatum>>',\n        description: `\n            When you override the default node component, you should use\n            an \\`animated\\` element if you wish to preserve transitions,\n            for example:\n            \n            \\`\\`\\`\n            import { animated } from '@react-spring/web'\n            \n            export const MyCustomNode = (props) => (\n                <animated.circle\n                    cx={props.style.x}\n                    cy={props.style.y}\n                    r={props.style.size.to(size => size / 2)}\n                    fill={style.color}\n                    style={{ mixBlendMode: props.blendMode }}\n                />\n            )\n            \\`\\`\\`\n            \n            The \\`style\\` property contains \\`react-spring\\` values, suitable\n            for \\`animated.*\\` elements.\n            \n            You can have a look at the [default node implementation](https://github.com/plouc/nivo/blob/master/packages/scatterplot/src/Node.tsx)\n            to see how props are used by default.\n        `,\n        required: false,\n    },\n    {\n        key: 'renderNode',\n        flavors: ['canvas'],\n        group: 'Customization',\n        help: 'Override default node rendering for canvas implementation.',\n        type: '(ctx: CanvasRenderingContext2D, props: ScatterPlotLayerProps<RawDatum>) => void',\n        description: `\n            This is how the default rendering is done:\n            \n            \\`\\`\\`\n            const renderNode = (ctx, node) => {\n                ctx.beginPath()\n                ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n                ctx.fillStyle = node.color\n                ctx.fill()\n            }\n            \\`\\`\\`\n        `,\n        required: false,\n    },\n    ...chartGrid({\n        flavors: allFlavors,\n        values: true,\n        xDefault: commonDefaultProps.enableGridX,\n        yDefault: commonDefaultProps.enableGridY,\n    }),\n    ...axes({ flavors: allFlavors }),\n    isInteractive({\n        flavors: ['svg', 'canvas'],\n        defaultValue: commonDefaultProps.isInteractive,\n    }),\n    {\n        key: 'useMesh',\n        group: 'Interactivity',\n        flavors: ['svg'],\n        help: 'Use a mesh to detect mouse interactions.',\n        type: 'boolean',\n        required: false,\n        defaultValue: true, // commonDefaultProps.useMesh,\n        control: { type: 'switch' },\n    },\n    {\n        key: 'debugMesh',\n        help: 'Display mesh used to detect mouse interactions (voronoi cells).',\n        flavors: allFlavors,\n        type: 'boolean',\n        required: false,\n        defaultValue: commonDefaultProps.debugMesh,\n        control: { type: 'switch' },\n        group: 'Interactivity',\n    },\n    {\n        key: 'tooltip',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom tooltip component',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will\n            receive the node as a property.\n\n            You can also customize the tooltip style\n            using the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'onMouseEnter',\n        group: 'Interactivity',\n        flavors: allFlavors,\n        help: 'onMouseEnter handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        group: 'Interactivity',\n        flavors: allFlavors,\n        help: 'onMouseMove handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        group: 'Interactivity',\n        flavors: allFlavors,\n        help: 'onMouseLeave handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        group: 'Interactivity',\n        flavors: allFlavors,\n        help: 'onClick handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'legends',\n        group: 'Legends',\n        flavors: ['svg', 'canvas'],\n        type: 'object[]',\n        help: `Optional chart's legends.`,\n        required: false,\n        control: {\n            type: 'array',\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend: any) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: (data: any) => {\n                    console.log(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n    {\n        key: 'annotations',\n        group: 'Annotations',\n        flavors: allFlavors,\n        help: 'Extra annotations.',\n        type: 'object[]',\n        required: false,\n    },\n    {\n        key: 'markers',\n        group: 'Annotations',\n        help: 'Extra markers.',\n        type: 'object[]',\n        flavors: ['svg'],\n        required: false,\n    },\n    ...motionProperties(['svg'], svgDefaultProps, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","import omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\n\nexport const settingsMapper =\n    (mapping: any, { exclude = [] }: { exclude?: string[] } = {}) =>\n    (settings: any, options: any = {}) => {\n        const overrides: any = {}\n\n        Object.keys(settings).forEach(key => {\n            if (mapping[key]) {\n                overrides[key] = mapping[key](settings[key], settings, options)\n            }\n        })\n\n        return {\n            ...omit(settings, exclude),\n            ...overrides,\n        }\n    }\n\nexport const mapAxis = (type: string) => (value: any, settings: any) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }: { format: any; enabled: boolean }) =>\n    enabled ? format : undefined\n","export const defaultProps = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 13,\n}\n","import {\n    AnnotationSpec,\n    CircleAnnotationSpec,\n    DotAnnotationSpec,\n    Note,\n    NoteCanvas,\n    NoteSvg,\n    RectAnnotationSpec,\n} from './types'\nimport { isValidElement } from 'react'\n\nexport const isSvgNote = <Datum>(note: Note<Datum>): note is NoteSvg<Datum> => {\n    const noteType = typeof note\n\n    return (\n        isValidElement(note) ||\n        noteType === 'string' ||\n        noteType === 'function' ||\n        noteType === 'object'\n    )\n}\n\nexport const isCanvasNote = <Datum>(note: Note<Datum>): note is NoteCanvas<Datum> => {\n    const noteType = typeof note\n\n    return noteType === 'string' || noteType === 'function'\n}\n\nexport const isCircleAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is CircleAnnotationSpec<Datum> => annotationSpec.type === 'circle'\n\nexport const isDotAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is DotAnnotationSpec<Datum> => annotationSpec.type === 'dot'\n\nexport const isRectAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is RectAnnotationSpec<Datum> => annotationSpec.type === 'rect'\n","import { filter, isNumber, omit } from 'lodash'\nimport {\n    radiansToDegrees,\n    absoluteAngleDegrees,\n    degreesToRadians,\n    positionFromAngle,\n} from '@nivo/core'\nimport { defaultProps } from './props'\nimport {\n    AnnotationPositionGetter,\n    AnnotationDimensionsGetter,\n    BoundAnnotation,\n    AnnotationMatcher,\n    AnnotationInstructions,\n} from './types'\nimport { isCircleAnnotation, isRectAnnotation } from './utils'\n\nexport const bindAnnotations = <\n    Datum = {\n        x: number\n        y: number\n    }\n>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}): BoundAnnotation<Datum>[] =>\n    annotations.reduce((acc: BoundAnnotation<Datum>[], annotation) => {\n        const offset = annotation.offset || 0\n\n        return [\n            ...acc,\n            ...filter<Datum>(data, annotation.match).map(datum => {\n                const position = getPosition(datum)\n                const dimensions = getDimensions(datum)\n\n                if (isCircleAnnotation(annotation) || isRectAnnotation(annotation)) {\n                    dimensions.size = dimensions.size + offset * 2\n                    dimensions.width = dimensions.width + offset * 2\n                    dimensions.height = dimensions.height + offset * 2\n                }\n\n                // acc.push({\n                //     ...omit(annotation, ['match', 'offset']),\n                //     ...position,\n                //     ...dimensions,\n                //     size: annotation.size || dimensions.size,\n                //     datum,\n                // } as any)\n                // return [\n                //     ...acc,\n                //     {\n                //         ...omit(annotation, ['match', 'offset']),\n                //         ...position,\n                //         ...dimensions,\n                //         size: annotation.size || dimensions.size,\n                //         datum,\n                //     },\n                // ]\n                return {\n                    ...omit(annotation, ['match', 'offset']),\n                    ...position,\n                    ...dimensions,\n                    size: annotation.size || dimensions.size,\n                    datum,\n                } as Required<BoundAnnotation<Datum>>\n            }),\n        ]\n\n        // return acc\n    }, [])\n\nexport const getLinkAngle = (\n    sourceX: number,\n    sourceY: number,\n    targetX: number,\n    targetY: number\n) => {\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX)\n\n    return absoluteAngleDegrees(radiansToDegrees(angle))\n}\n\nexport const computeAnnotation = <Datum>(\n    annotation: BoundAnnotation<Datum>\n): AnnotationInstructions => {\n    const {\n        x,\n        y,\n        noteX,\n        noteY,\n        noteWidth = defaultProps.noteWidth,\n        noteTextOffset = defaultProps.noteTextOffset,\n    } = annotation\n\n    let computedNoteX: number\n    let computedNoteY: number\n\n    if (isNumber(noteX)) {\n        computedNoteX = x + noteX\n    } else if (noteX.abs !== undefined) {\n        computedNoteX = noteX.abs\n    } else {\n        throw new Error(`noteX should be either a number or an object containing an 'abs' property`)\n    }\n\n    if (isNumber(noteY)) {\n        computedNoteY = y + noteY\n    } else if (noteY.abs !== undefined) {\n        computedNoteY = noteY.abs\n    } else {\n        throw new Error(`noteY should be either a number or an object containing an 'abs' property`)\n    }\n\n    let computedX = x\n    let computedY = y\n\n    const angle = getLinkAngle(x, y, computedNoteX, computedNoteY)\n\n    if (isCircleAnnotation<Datum>(annotation)) {\n        const position = positionFromAngle(degreesToRadians(angle), annotation.size / 2)\n        computedX += position.x\n        computedY += position.y\n    }\n\n    if (isRectAnnotation<Datum>(annotation)) {\n        const eighth = Math.round((angle + 90) / 45) % 8\n        if (eighth === 0) {\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 1) {\n            computedX += annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 2) {\n            computedX += annotation.width / 2\n        }\n        if (eighth === 3) {\n            computedX += annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 4) {\n            computedY += annotation.height / 2\n        }\n        if (eighth === 5) {\n            computedX -= annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 6) {\n            computedX -= annotation.width / 2\n        }\n        if (eighth === 7) {\n            computedX -= annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n    }\n\n    let textX = computedNoteX\n    const textY = computedNoteY - noteTextOffset\n\n    let noteLineX = computedNoteX\n    const noteLineY = computedNoteY\n\n    if ((angle + 90) % 360 > 180) {\n        textX -= noteWidth\n        noteLineX -= noteWidth\n    } else {\n        noteLineX += noteWidth\n    }\n\n    return {\n        points: [\n            [computedX, computedY],\n            [computedNoteX, computedNoteY],\n            [noteLineX, noteLineY],\n        ] as [number, number][],\n        text: [textX, textY],\n        angle: angle + 90,\n    }\n}\n","import { useMemo } from 'react'\nimport { bindAnnotations, computeAnnotation } from './compute'\nimport {\n    AnnotationDimensionsGetter,\n    AnnotationMatcher,\n    AnnotationPositionGetter,\n    BoundAnnotation,\n} from './types'\n\n/**\n * Bind annotations to a dataset.\n */\nexport const useAnnotations = <Datum>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}) =>\n    useMemo(\n        () =>\n            bindAnnotations<Datum>({\n                data,\n                annotations,\n                getPosition,\n                getDimensions,\n            }),\n        [data, annotations, getPosition, getDimensions]\n    )\n\nexport const useComputedAnnotations = <Datum>({\n    annotations,\n}: {\n    annotations: BoundAnnotation<Datum>[]\n}) =>\n    useMemo(\n        () =>\n            annotations.map(annotation => ({\n                ...annotation,\n                computed: computeAnnotation<Datum>({\n                    ...annotation,\n                }),\n            })),\n        [annotations]\n    )\n\nexport const useComputedAnnotation = <Datum>(annotation: BoundAnnotation<Datum>) =>\n    useMemo(() => computeAnnotation<Datum>(annotation), [annotation])\n","import { createElement } from 'react'\nimport omit from 'lodash/omit'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { NoteSvg } from './types'\n\nexport const AnnotationNote = <Datum,>({\n    datum,\n    x,\n    y,\n    note,\n}: {\n    datum: Datum\n    x: number\n    y: number\n    note: NoteSvg<Datum>\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    if (typeof note === 'function') {\n        return createElement(note, { x, y, datum })\n    }\n\n    return (\n        <>\n            {theme.annotations.text.outlineWidth > 0 && (\n                <animated.text\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    style={{\n                        ...theme.annotations.text,\n                        strokeLinejoin: 'round',\n                        strokeWidth: theme.annotations.text.outlineWidth * 2,\n                        stroke: theme.annotations.text.outlineColor,\n                    }}\n                >\n                    {note}\n                </animated.text>\n            )}\n            <animated.text\n                x={animatedProps.x}\n                y={animatedProps.y}\n                style={omit(theme.annotations.text, ['outlineWidth', 'outlineColor'])}\n            >\n                {note}\n            </animated.text>\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath, useTheme } from '@nivo/core'\n\nexport const AnnotationLink = ({\n    points,\n    isOutline = false,\n}: {\n    points: [number, number][]\n    isOutline?: boolean\n}) => {\n    const theme = useTheme()\n\n    const path = useMemo(() => {\n        const [firstPoint, ...otherPoints] = points\n\n        return otherPoints.reduce(\n            (acc, [x, y]) => `${acc} L${x},${y}`,\n            `M${firstPoint[0]},${firstPoint[1]}`\n        )\n    }, [points])\n\n    const animatedPath = useAnimatedPath(path)\n\n    if (isOutline && theme.annotations.link.outlineWidth <= 0) {\n        return null\n    }\n\n    const style = { ...theme.annotations.link }\n    if (isOutline) {\n        style.strokeLinecap = 'square'\n        style.strokeWidth =\n            theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n        style.stroke = theme.annotations.link.outlineColor\n        style.opacity = theme.annotations.link.outlineOpacity\n    }\n\n    return <animated.path fill=\"none\" d={animatedPath} style={style} />\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const CircleAnnotationOutline = ({ x, y, size }: { x: number; y: number; size: number }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { defaultProps } from './props'\n\nexport const DotAnnotationOutline = ({\n    x,\n    y,\n    size = defaultProps.dotSize,\n}: {\n    x: number\n    y: number\n    size?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth: theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.symbol}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const RectAnnotationOutline = ({\n    x,\n    y,\n    width,\n    height,\n    borderRadius = 6,\n}: {\n    x: number\n    y: number\n    width: number\n    height: number\n    borderRadius?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x: x - width / 2,\n        y: y - height / 2,\n        width,\n        height,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.rect\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    rx={borderRadius}\n                    ry={borderRadius}\n                    width={animatedProps.width}\n                    height={animatedProps.height}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.rect\n                x={animatedProps.x}\n                y={animatedProps.y}\n                rx={borderRadius}\n                ry={borderRadius}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useComputedAnnotation } from './hooks'\nimport { AnnotationNote } from './AnnotationNote'\nimport { AnnotationLink } from './AnnotationLink'\nimport { CircleAnnotationOutline } from './CircleAnnotationOutline'\nimport { DotAnnotationOutline } from './DotAnnotationOutline'\nimport { RectAnnotationOutline } from './RectAnnotationOutline'\nimport { BoundAnnotation } from './types'\nimport { isCircleAnnotation, isDotAnnotation, isRectAnnotation, isSvgNote } from './utils'\n\nexport const Annotation = <Datum,>(annotation: BoundAnnotation<Datum>) => {\n    const { datum, x, y, note } = annotation\n    const computed = useComputedAnnotation(annotation)\n\n    if (!isSvgNote(note)) {\n        throw new Error('note should be a valid react element')\n    }\n\n    return (\n        <>\n            <AnnotationLink points={computed.points} isOutline={true} />\n            {isCircleAnnotation(annotation) && (\n                <CircleAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isDotAnnotation(annotation) && (\n                <DotAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isRectAnnotation(annotation) && (\n                <RectAnnotationOutline\n                    x={x}\n                    y={y}\n                    width={annotation.width}\n                    height={annotation.height}\n                    borderRadius={annotation.borderRadius}\n                />\n            )}\n            <AnnotationLink points={computed.points} />\n            <AnnotationNote datum={datum} x={computed.text[0]} y={computed.text[1]} note={note} />\n        </>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { ComputedAnnotation } from './types'\nimport { isCanvasNote, isCircleAnnotation, isDotAnnotation, isRectAnnotation } from './utils'\n\nconst drawPoints = (ctx: CanvasRenderingContext2D, points: [number, number][]) => {\n    points.forEach(([x, y], index) => {\n        if (index === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    })\n}\n\nexport const renderAnnotationsToCanvas = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        annotations,\n        theme,\n    }: {\n        annotations: ComputedAnnotation<Datum>[]\n        theme: CompleteTheme\n    }\n) => {\n    if (annotations.length === 0) return\n\n    ctx.save()\n    annotations.forEach(annotation => {\n        if (!isCanvasNote(annotation.note)) {\n            throw new Error('note is invalid for canvas implementation')\n        }\n\n        if (theme.annotations.link.outlineWidth > 0) {\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.annotations.link.outlineColor\n            ctx.lineWidth =\n                theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n            ctx.beginPath()\n            drawPoints(ctx, annotation.computed.points)\n            ctx.stroke()\n            ctx.lineCap = 'butt'\n        }\n\n        if (isCircleAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation) && theme.annotations.symbol.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.symbol.outlineColor\n            ctx.lineWidth = theme.annotations.symbol.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isRectAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        ctx.strokeStyle = theme.annotations.link.stroke\n        ctx.lineWidth = theme.annotations.link.strokeWidth\n        ctx.beginPath()\n        drawPoints(ctx, annotation.computed.points)\n        ctx.stroke()\n\n        if (isCircleAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation)) {\n            ctx.fillStyle = theme.annotations.symbol.fill\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.fill()\n        }\n\n        if (isRectAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        if (typeof annotation.note === 'function') {\n            annotation.note(ctx, {\n                datum: annotation.datum,\n                x: annotation.computed.text[0],\n                y: annotation.computed.text[1],\n                theme,\n            })\n        } else {\n            ctx.font = `${theme.annotations.text.fontSize}px ${theme.annotations.text.fontFamily}`\n            ctx.fillStyle = theme.annotations.text.fill\n            ctx.strokeStyle = theme.annotations.text.outlineColor\n            ctx.lineWidth = theme.annotations.text.outlineWidth * 2\n            if (theme.annotations.text.outlineWidth > 0) {\n                ctx.lineJoin = 'round'\n                ctx.strokeText(\n                    annotation.note,\n                    annotation.computed.text[0],\n                    annotation.computed.text[1]\n                )\n                ctx.lineJoin = 'miter'\n            }\n            ctx.fillText(annotation.note, annotation.computed.text[0], annotation.computed.text[1])\n        }\n    })\n    ctx.restore()\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { animated } from '@react-spring/web'\nimport { ScatterPlotDatum, ScatterPlotNodeProps } from './types'\nimport { useCallback } from 'react'\n\nconst interpolateRadius = (size: number) => size / 2\n\nexport const Node = <RawDatum extends ScatterPlotDatum>({\n    node,\n    style,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: ScatterPlotNodeProps<RawDatum>) => {\n    const handleMouseEnter = useCallback(event => onMouseEnter?.(node, event), [node, onMouseEnter])\n    const handleMouseMove = useCallback(event => onMouseMove?.(node, event), [node, onMouseMove])\n    const handleMouseLeave = useCallback(event => onMouseLeave?.(node, event), [node, onMouseLeave])\n    const handleClick = useCallback(event => onClick?.(node, event), [node, onClick])\n\n    return (\n        <animated.circle\n            cx={style.x}\n            cy={style.y}\n            r={style.size.to(interpolateRadius)}\n            fill={style.color}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n","import { CssMixBlendMode } from '@nivo/core'\nimport { Node } from './Node'\nimport { Tooltip } from './Tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotLayerId,\n    ScatterPlotNodeData,\n} from './types'\n\nexport const commonDefaultProps = {\n    xScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['xScale'],\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['yScale'],\n\n    enableGridX: true,\n    enableGridY: true,\n    axisBottom: {},\n    axisLeft: {},\n\n    nodeId: (({ serieId, index }) =>\n        `${serieId}.${index}`) as ScatterPlotCommonProps<ScatterPlotDatum>['nodeId'],\n    nodeSize: 9,\n    nodeComponent: Node,\n\n    colors: { scheme: 'nivo' } as ScatterPlotCommonProps<ScatterPlotDatum>['colors'],\n\n    isInteractive: true,\n    debugMesh: false,\n\n    tooltip: Tooltip,\n\n    markers: [],\n\n    legends: [],\n\n    annotations: [],\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    blendMode: 'normal' as CssMixBlendMode,\n    layers: [\n        'grid',\n        'axes',\n        'nodes',\n        'markers',\n        'mesh',\n        'legends',\n        'annotations',\n    ] as ScatterPlotLayerId[],\n    role: 'img',\n    useMesh: true,\n    animate: true,\n    motionConfig: 'default',\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'nodes', 'mesh', 'legends', 'annotations'] as ScatterPlotLayerId[],\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n    renderNode: (ctx: CanvasRenderingContext2D, node: ScatterPlotNodeData<ScatterPlotDatum>) => {\n        ctx.beginPath()\n        ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n        ctx.fillStyle = node.color\n        ctx.fill()\n    },\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ScatterPlotTooltipProps, ScatterPlotDatum } from './types'\n\nexport const Tooltip = <RawDatum extends ScatterPlotDatum>({\n    node,\n}: ScatterPlotTooltipProps<RawDatum>) => (\n    <BasicTooltip\n        id={node.serieId}\n        value={`x: ${node.formattedX}, y: ${node.formattedY}`}\n        enableChip={true}\n        color={node.color}\n    />\n)\n","import { Annotation } from '@nivo/annotations'\nimport { useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface ScatterPlotAnnotationsProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n}\n\nexport const ScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    annotations,\n}: ScatterPlotAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { CssMixBlendMode, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNode,\n    ScatterPlotNodeData,\n} from './types'\nimport { createElement, useCallback } from 'react'\n\ninterface NodesProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    nodeComponent: ScatterPlotNode<RawDatum>\n    isInteractive: boolean\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    blendMode: CssMixBlendMode\n}\n\nconst getNodeKey = <RawDatum extends ScatterPlotDatum>(node: ScatterPlotNodeData<RawDatum>) =>\n    node.id\nconst regularTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: node.size,\n    color: node.color,\n})\nconst leaveTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: 0,\n    color: node.color,\n})\n\nexport const Nodes = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    nodeComponent,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    blendMode,\n}: NodesProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        ScatterPlotNodeData<RawDatum>,\n        {\n            x: number\n            y: number\n            size: number\n            color: string\n        }\n    >(nodes, {\n        keys: getNodeKey,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseEnter = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (node, event) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n    const handleClick = useCallback((node, event) => onClick?.(node, event), [onClick])\n\n    return (\n        <>\n            {transition((style, node) =>\n                createElement(nodeComponent, {\n                    node,\n                    style,\n                    blendMode,\n                    isInteractive,\n                    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n                    onMouseMove: isInteractive ? handleMouseMove : undefined,\n                    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n                    onClick: isInteractive ? handleClick : undefined,\n                })\n            )}\n        </>\n    )\n}\n","import { createElement, useCallback } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface MeshProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    width: number\n    height: number\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    debug: boolean\n}\n\nexport const Mesh = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    width,\n    height,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}: MeshProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={nodes}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n","import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport { SvgWrapper, Container, useDimensions, CartesianMarkers } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useScatterPlot } from './hooks'\nimport { svgDefaultProps } from './props'\nimport { ScatterPlotAnnotations } from './ScatterPlotAnnotations'\nimport { Nodes } from './Nodes'\nimport { Mesh } from './Mesh'\nimport { ScatterPlotDatum, ScatterPlotLayerId, ScatterPlotSvgProps } from './types'\n\ntype InnerScatterPlotProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = svgDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = svgDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    colors = svgDefaultProps.colors,\n    blendMode = svgDefaultProps.blendMode,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = svgDefaultProps.nodeSize,\n    nodeComponent = svgDefaultProps.nodeComponent,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    annotations = svgDefaultProps.annotations,\n    isInteractive = svgDefaultProps.isInteractive,\n    useMesh = svgDefaultProps.useMesh,\n    debugMesh = svgDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip,\n    markers = svgDefaultProps.markers,\n    legends = svgDefaultProps.legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerScatterPlotProps<RawDatum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    const layerById: Record<ScatterPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        nodes: null,\n        markers: null,\n        mesh: null,\n        annotations: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as any) : null}\n                yScale={enableGridY ? (yScale as any) : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <Nodes<RawDatum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                blendMode={blendMode}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<RawDatum['x'], RawDatum['y']>\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (value: RawDatum['x']) => number}\n                yScale={yScale as (value: RawDatum['y']) => number}\n            />\n        )\n    }\n\n    if (layers.includes('mesh') && isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh<RawDatum>\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <ScatterPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legendData}\n            />\n        ))\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'string' && layerById[layer] !== undefined) {\n                    return layerById[layer]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                throw new Error(`Unknown layer (${layer})`)\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const ScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: ScatterPlotSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerScatterPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlot } from './ScatterPlot'\nimport { ScatterPlotDatum, ScatterPlotSvgProps } from './types'\n\nexport const ResponsiveScatterPlot = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ScatterPlot<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { createElement, useRef, useState, useEffect, useCallback, useMemo } from 'react'\nimport { Container, useDimensions, useTheme, getRelativeCursor, isCursorInRect } from '@nivo/core'\nimport { renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { CanvasAxisProp, renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { canvasDefaultProps, svgDefaultProps } from './props'\nimport { useScatterPlot, useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ntype InnerScatterPlotCanvasProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = canvasDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = canvasDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = canvasDefaultProps.nodeSize,\n    renderNode = canvasDefaultProps.renderNode,\n    enableGridX = canvasDefaultProps.enableGridX,\n    gridXValues,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    annotations = canvasDefaultProps.annotations,\n    isInteractive = canvasDefaultProps.isInteractive,\n    debugMesh = canvasDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip,\n    legends = canvasDefaultProps.legends,\n}: InnerScatterPlotCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ScatterPlotNodeData<RawDatum> | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas<RawDatum['x']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale as any,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas<RawDatum['y']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale as any,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas<ScatterPlotNodeData<RawDatum>>(ctx, {\n                    annotations: boundAnnotations as any,\n                    theme,\n                })\n            } else if (layer === 'axes') {\n                renderAxesToCanvas<RawDatum['x'], RawDatum['y']>(ctx, {\n                    xScale: xScale as any,\n                    yScale: yScale as any,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop as CanvasAxisProp<RawDatum['x']>,\n                    right: axisRight as CanvasAxisProp<RawDatum['y']>,\n                    bottom: axisBottom as CanvasAxisProp<RawDatum['x']>,\n                    left: axisLeft as CanvasAxisProp<RawDatum['y']>,\n                    theme,\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    renderNode(ctx, node)\n                })\n            } else if (layer === 'mesh') {\n                if (debugMesh === true) {\n                    renderVoronoiToCanvas(ctx, voronoi!)\n                    if (currentNode) {\n                        renderVoronoiCellToCanvas(ctx, voronoi!, currentNode.index)\n                    }\n                }\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            } else {\n                throw new Error(`Invalid layer: ${layer}`)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        renderNode,\n        layers,\n        customLayerProps,\n        theme,\n        xScale,\n        yScale,\n        nodes,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        legendData,\n        debugMesh,\n        voronoi,\n        currentNode,\n        boundAnnotations,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const getNodeFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current!, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const handleMouseHover = useCallback(\n        event => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event)\n                if (currentNode && currentNode.id !== node.id) {\n                    onMouseLeave && onMouseLeave(currentNode, event)\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                if (!currentNode) {\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                onMouseMove && onMouseMove(node, event)\n            } else {\n                hideTooltip()\n                currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n            }\n        },\n        [\n            getNodeFromMouseEvent,\n            currentNode,\n            setCurrentNode,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentNode(null)\n            currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n        },\n        [hideTooltip, currentNode, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const node = getNodeFromMouseEvent(event)\n                node && onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const ScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: ScatterPlotCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n        <InnerScatterPlotCanvas<RawDatum> {...props} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlotCanvas } from './ScatterPlotCanvas'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum } from './types'\n\nexport const ResponsiveScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <ScatterPlotCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n"],"names":["keys","ageRange","weightRange","generateData","size","map","key","id","data","range","i","x","random","y","generateLightDataSet","generateHeavyDataSet","settingsMapper","xFormat","mapFormat","yFormat","axisTop","mapAxis","axisRight","axisBottom","axisLeft","exclude","allFlavors","props","group","help","flavors","type","description","required","control","disabled","choices","v","label","value","disabledValue","defaultValue","min","max","commonDefaultProps","unit","chartDimensions","themeProperty","ordinalColors","blendMode","target","svgDefaultProps","chartGrid","values","xDefault","yDefault","axes","isInteractive","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","defaults","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","console","log","JSON","stringify","motionProperties","groups","groupProperties","mapping","settings","options","overrides","Object","forEach","omit","upperFirst","enable","format","enabled","undefined","defaultProps","isCircleAnnotation","annotationSpec","isDotAnnotation","isRectAnnotation","computeAnnotation","annotation","computedNoteX","computedNoteY","noteX","noteY","noteWidth","noteTextOffset","_isNumber","abs","Error","computedX","computedY","angle","sourceX","sourceY","targetX","targetY","Math","atan2","absoluteAngleDegrees","radiansToDegrees","getLinkAngle","position","positionFromAngle","degreesToRadians","eighth","round","height","width","textX","noteLineX","points","text","useAnnotations","annotations","getPosition","getDimensions","useMemo","reduce","acc","offset","_filter","match","datum","dimensions","_omit","bindAnnotations","useComputedAnnotations","computed","AnnotationNote","note","theme","useTheme","useMotionConfig","animate","springConfig","config","animatedProps","useSpring","immediate","createElement","_jsxs","outlineWidth","_jsx","animated","style","strokeLinejoin","strokeWidth","stroke","outlineColor","AnnotationLink","isOutline","path","firstPoint","animatedPath","useAnimatedPath","link","strokeLinecap","opacity","outlineOpacity","fill","d","CircleAnnotationOutline","radius","outline","circle","cx","cy","r","DotAnnotationOutline","dotSize","symbol","RectAnnotationOutline","borderRadius","rect","rx","ry","Annotation","useComputedAnnotation","noteType","isValidElement","isSvgNote","drawPoints","ctx","moveTo","lineTo","renderAnnotationsToCanvas","length","save","isCanvasNote","lineCap","strokeStyle","lineWidth","beginPath","arc","PI","fillStyle","font","fontSize","fontFamily","lineJoin","strokeText","fillText","restore","computeCartesianTicks","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","getScaleTicks","textProps","textPropsByEngine","centerScale","line","lineX","lineY","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","top","bottom","left","right","ticks","getFormatter","formatter","timeFormat","Date","d3Format","computeGridLines","_values","Array","isArray","lines","x1","x2","y1","y2","memoizedAxisTick","memo","_value","textAnchor","cursor","event","g","transform","dominantBaseline","textTransform","memoizedAxis","renderTick","AxisTick","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","lineX2","lineY2","transition","useTransition","t","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","rotate","domain","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","_format","fontWeight","Number","String","renderAxesToCanvas","renderGridLinesToCanvas","zeroPadding","computeDimensions","item","_padding","padding","itemCount","horizontalPadding","verticalPadding","spacing","computePositionFromAnchor","containerWidth","containerHeight","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","symbolSpacing","symbolByShape","borderWidth","borderColor","pointerEvents","diamond","square","triangle","LegendSvgItem","textColor","background","symbolShape","symbolBorderWidth","symbolBorderColor","onMouseEnter","onMouseLeave","toggleSerie","effects","useState","setStyle","handleMouseEnter","useCallback","filter","on","effect","handleMouseLeave","some","handler","SymbolShape","itemOpacity","itemBackground","e","color","hidden","legends","itemTextColor","userSelect","LegendSvg","xStep","yStep","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","itemX","itemY","fillRect","useQuantizeColorScaleLegendData","overriddenDomain","reverse","valueFormat","separator","items","domainValue","invertExtent","extent","LegendPropShape","isRequired","useScatterPlot","xScaleSpec","yScaleSpec","nodeId","nodeSize","colors","computeXYScalesForSeries","series","formatX","useValueFormatter","formatY","getNodeId","usePropertyAccessor","rawNodes","serie","serieIndex","point","serieId","xValue","formattedX","yValue","formattedY","push","getNodeSize","isNumber","isPlainObject","isString","sizes","sizeScale","scaleLinear","get","getNodeSizeGenerator","getColor","useOrdinalColorScale","nodes","rawNode","legendData","useScatterPlotAnnotations","node","interpolateRadius","enableGridX","enableGridY","nodeComponent","onMouseMove","handleMouseMove","handleClick","to","mixBlendMode","scheme","debugMesh","tooltip","BasicTooltip","enableChip","markers","layers","role","useMesh","motionConfig","canvasDefaultProps","pixelRatio","window","devicePixelRatio","renderNode","ScatterPlotAnnotations","boundAnnotations","getNodeKey","regularTransition","leaveTransition","Nodes","useTooltip","showTooltipFromEvent","hideTooltip","Mesh","debug","BaseMesh","InnerScatterPlot","partialMargin","margin","gridXValues","gridYValues","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","customLayerProps","layerById","mesh","includes","CartesianMarkers","SvgWrapper","layer","Fragment","ScatterPlot","renderWrapper","otherProps","Container","ResponsiveScatterPlot","ResponsiveWrapper","InnerScatterPlotCanvas","canvasEl","useRef","currentNode","setCurrentNode","useVoronoiMesh","delaunay","voronoi","useEffect","current","getContext","n","renderVoronoiToCanvas","renderVoronoiCellToCanvas","getNodeFromMouseEvent","getRelativeCursor","isCursorInRect","nodeIndex","find","handleMouseHover","ref","ScatterPlotCanvas","ResponsiveScatterPlotCanvas","baseEach","module","exports","collection","predicate","result","nativeFloor","floor","nativeRandom","lower","upper","arrayFilter","baseFilter","baseIteratee","baseRandom","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","temp","rand"],"sourceRoot":""}