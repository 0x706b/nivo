{"version":3,"file":"component---src-pages-marimekko-index-js-19753441a34271e689f0.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-shape/src/array.js","webpack://nivo-website/../node_modules/d3-shape/src/constant.js","webpack://nivo-website/../node_modules/d3-shape/src/stack.js","webpack://nivo-website/./src/lib/settings.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/types.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/Bar.tsx","webpack://nivo-website/../src/Bars.tsx","webpack://nivo-website/../src/BarTooltip.tsx","webpack://nivo-website/../src/Marimekko.tsx","webpack://nivo-website/../src/ResponsiveMarimekko.tsx","webpack://nivo-website/./src/data/components/marimekko/mapper.js","webpack://nivo-website/./src/data/components/marimekko/props.ts","webpack://nivo-website/./src/pages/marimekko/index.js","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/random.js"],"sourcesContent":["export var slice = Array.prototype.slice;","export default function (x) {\n  return function constant() {\n    return x;\n  };\n}","import { slice } from \"./array.js\";\nimport constant from \"./constant.js\";\nimport offsetNone from \"./offset/none.js\";\nimport orderNone from \"./order/none.js\";\n\nfunction stackValue(d, key) {\n  return d[key];\n}\n\nexport default function () {\n  var keys = constant([]),\n      order = orderNone,\n      offset = offsetNone,\n      value = stackValue;\n\n  function stack(data) {\n    var kz = keys.apply(this, arguments),\n        i,\n        m = data.length,\n        n = kz.length,\n        sz = new Array(n),\n        oz;\n\n    for (i = 0; i < n; ++i) {\n      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\n        si[j] = sij = [0, +value(data[j], ki, j, data)];\n        sij.data = data[j];\n      }\n\n      si.key = ki;\n    }\n\n    for (i = 0, oz = order(sz); i < n; ++i) {\n      sz[oz[i]].index = i;\n    }\n\n    offset(sz, oz);\n    return sz;\n  }\n\n  stack.keys = function (_) {\n    return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : keys;\n  };\n\n  stack.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), stack) : value;\n  };\n\n  stack.order = function (_) {\n    return arguments.length ? (order = _ == null ? orderNone : typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : order;\n  };\n\n  stack.offset = function (_) {\n    return arguments.length ? (offset = _ == null ? offsetNone : _, stack) : offset;\n  };\n\n  return stack;\n}","import omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\n\nexport const settingsMapper =\n    (mapping: any, { exclude = [] } = {}) =>\n    (settings: any, options: any = {}) => {\n        const overrides: any = {}\n\n        Object.keys(settings).forEach(key => {\n            if (mapping[key]) {\n                overrides[key] = mapping[key](settings[key], settings, options)\n            }\n        })\n\n        return {\n            ...omit(settings, exclude),\n            ...overrides,\n        }\n    }\n\nexport const mapAxis = (type: string) => (value: any, settings: any) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }: { format: any; enabled: boolean }) =>\n    enabled ? format : undefined\n","import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProp, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProp<X> | null\n        right?: CanvasAxisProp<Y> | null\n        bottom?: CanvasAxisProp<X> | null\n        left?: CanvasAxisProp<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProp<X> | undefined\n            : CanvasAxisProp<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n","import * as React from 'react'\nimport {\n    stackOffsetDiverging,\n    stackOffsetExpand,\n    stackOffsetNone,\n    stackOffsetSilhouette,\n    stackOffsetWiggle,\n} from 'd3-shape'\nimport { ScaleLinear } from 'd3-scale'\nimport { Box, Dimensions, Theme, SvgDefsAndFill, ModernMotionProps, ValueFormat } from '@nivo/core'\nimport { AxisProps } from '@nivo/axes'\nimport { OrdinalColorScaleConfig, InheritedColorConfig } from '@nivo/colors'\nimport { LegendProps } from '@nivo/legends'\n\nexport type DatumId = string | number\nexport type DatumValue = number\nexport type DatumFormattedValue = string | number\n\nexport type DatumPropertyAccessor<RawDatum, T> = (datum: RawDatum) => T\n\nexport interface DataProps<RawDatum> {\n    data: RawDatum[]\n    id: string | number | DatumPropertyAccessor<RawDatum, DatumId>\n    value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    dimensions: {\n        id: string\n        value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    }[]\n    valueFormat?: ValueFormat<number>\n}\n\nexport interface NormalizedDatum<RawDatum> {\n    index: number\n    id: DatumId\n    value: DatumValue\n    data: RawDatum\n}\n\nexport interface DimensionDatum<RawDatum> {\n    id: string\n    value: number\n    formattedValue: string | number\n    color: string\n    x: number\n    y: number\n    width: number\n    height: number\n    datum: ComputedDatum<RawDatum>\n}\n\nexport interface ComputedDatum<RawDatum> extends NormalizedDatum<RawDatum> {\n    x: number\n    y: number\n    width: number\n    height: number\n    dimensions: DimensionDatum<RawDatum>[]\n}\n\nexport interface BarDatum<RawDatum> extends DimensionDatum<RawDatum> {\n    key: string\n    fill?: string\n    borderColor: string\n    borderWidth: number\n}\n\nexport type LabelAccessorFunction<RawDatum> = (datum: ComputedDatum<RawDatum>) => string | number\n\nexport type LayerId = 'grid' | 'axes' | 'bars' | 'legends'\n\nexport interface CustomLayerProps<RawDatum> {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n}\n\nexport type CustomLayer<RawDatum> = React.FC<CustomLayerProps<RawDatum>>\n\nexport type Layer<RawDatum> = LayerId | CustomLayer<RawDatum>\n\nexport interface TooltipProps<RawDatum> {\n    bar: BarDatum<RawDatum>\n}\n\nexport type BarTooltipType<RawDatum> = (props: TooltipProps<RawDatum>) => JSX.Element\n\nexport type Layout = 'horizontal' | 'vertical'\n\nexport const offsetById = {\n    // Applies a zero baseline and normalizes the values\n    // for each point such that the topline is always one.\n    expand: stackOffsetExpand,\n    // Positive values are stacked above zero, negative values\n    // are stacked below zero, and zero values are stacked at zero.\n    diverging: stackOffsetDiverging,\n    // Applies a zero baseline.\n    none: stackOffsetNone,\n    // Shifts the baseline down such that the center of the streamgraph\n    // is always at zero.\n    silouhette: stackOffsetSilhouette,\n    // Shifts the baseline so as to minimize the weighted wiggle of layers.\n    // This offset is recommended for streamgraphs in conjunction with the inside-out order.\n    // See Stacked Graphs—Geometry & Aesthetics by Bryon & Wattenberg for more information.\n    wiggle: stackOffsetWiggle,\n}\n\nexport type OffsetId = keyof typeof offsetById\n\nexport type CommonProps<RawDatum> = {\n    margin: Box\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n\n    // axes and grid\n    axisTop?: AxisProps | null\n    axisRight?: AxisProps | null\n    axisBottom?: AxisProps | null\n    axisLeft?: AxisProps | null\n    enableGridX: boolean\n    gridXValues?: number[]\n    enableGridY: boolean\n    gridYValues?: number[]\n\n    // colors, theme and border\n    colors: OrdinalColorScaleConfig<Omit<DimensionDatum<RawDatum>, 'color' | 'fill'>>\n    theme: Theme\n    borderWidth: number\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // labels\n    enableLabels: boolean\n    label: string | LabelAccessorFunction<RawDatum>\n    labelSkipWidth: number\n    labelSkipHeight: number\n    labelTextColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // interactivity\n    isInteractive: boolean\n    tooltip: BarTooltipType<RawDatum>\n\n    legends: LegendProps[]\n\n    role: string\n}\n\nexport type MouseEventHandler<RawDatum, ElementType> = (\n    datum: BarDatum<RawDatum>,\n    event: React.MouseEvent<ElementType>\n) => void\n\nexport type MouseEventHandlers<RawDatum, ElementType> = Partial<{\n    onClick: MouseEventHandler<RawDatum, ElementType>\n    onMouseEnter: MouseEventHandler<RawDatum, ElementType>\n    onMouseMove: MouseEventHandler<RawDatum, ElementType>\n    onMouseLeave: MouseEventHandler<RawDatum, ElementType>\n}>\n\nexport type SvgProps<RawDatum> = DataProps<RawDatum> &\n    Dimensions &\n    Partial<CommonProps<RawDatum>> &\n    ModernMotionProps &\n    SvgDefsAndFill<BarDatum<RawDatum>> &\n    MouseEventHandlers<RawDatum, SVGRectElement> & {\n        layers?: Layer<RawDatum>[]\n    }\n","import { useMemo } from 'react'\nimport { get } from 'lodash'\nimport { stack as d3Stack, Stack, Series } from 'd3-shape'\nimport { ScaleLinear, scaleLinear } from 'd3-scale'\nimport { useValueFormatter, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport {\n    NormalizedDatum,\n    ComputedDatum,\n    DataProps,\n    DatumPropertyAccessor,\n    Layout,\n    DimensionDatum,\n    CommonProps,\n    CustomLayerProps,\n    BarDatum,\n    OffsetId,\n    offsetById,\n} from './types'\n\n// d3 stack does not support defining `.keys()` using\n// a mix of keys and custom value accessors, so we're\n// building a map of accessors in any case, we're gonna\n// use it later for `stack.value()`.\nexport const useDataDimensions = <RawDatum>(rawDimensions: DataProps<RawDatum>['dimensions']) =>\n    useMemo(() => {\n        const dimensions: Record<string, (datum: RawDatum) => number> = {}\n        const dimensionIds: string[] = []\n        rawDimensions.forEach(dimension => {\n            dimensionIds.push(dimension.id)\n            dimensions[dimension.id] =\n                typeof dimension.value === 'function'\n                    ? dimension.value\n                    : (datum: RawDatum) => get(datum, dimension.value as string, 0)\n        })\n\n        return { dimensionIds, dimensions }\n    }, [rawDimensions])\n\nexport const useStack = <RawDatum>(\n    dimensionIds: string[],\n    dimensions: Record<string, (datum: RawDatum) => number>,\n    offset: OffsetId\n) =>\n    useMemo(() => {\n        const offsetFunction = offsetById[offset]\n\n        return d3Stack<RawDatum>()\n            .keys(dimensionIds)\n            .value((datum, key) => dimensions[key](datum))\n            .offset(offsetFunction)\n    }, [dimensionIds, dimensions, offset])\n\nexport const useStackedData = <RawDatum>(\n    stack: Stack<any, RawDatum, string>,\n    data: DataProps<RawDatum>['data']\n) =>\n    useMemo(() => {\n        const stacked = stack(data)\n\n        const allValues: number[] = []\n        stacked.forEach(dimension => {\n            dimension.forEach(datum => {\n                allValues.push(datum[0])\n                allValues.push(datum[1])\n            })\n        })\n\n        const min = Math.min(...allValues)\n        const max = Math.max(...allValues)\n\n        return {\n            stacked,\n            min,\n            max,\n        }\n    }, [stack, data])\n\nexport const useDimensionsScale = (\n    min: number,\n    max: number,\n    width: number,\n    height: number,\n    layout: Layout\n) =>\n    useMemo(() => {\n        if (layout === 'vertical') {\n            return scaleLinear().domain([max, min]).range([0, height])\n        }\n\n        return scaleLinear().domain([min, max]).range([0, width])\n    }, [min, max, width, height, layout])\n\nexport const useNormalizedData = <RawDatum>(\n    data: DataProps<RawDatum>['data'],\n    id: DataProps<RawDatum>['id'],\n    value: DataProps<RawDatum>['value']\n) => {\n    const getId: DatumPropertyAccessor<RawDatum, string | number> =\n        typeof id === 'function' ? id : (datum: RawDatum) => get(datum, id)\n    const getValue: DatumPropertyAccessor<RawDatum, number> =\n        typeof value === 'function' ? value : (datum: RawDatum) => get(datum, value, 0)\n\n    return useMemo(() => {\n        const normalized: NormalizedDatum<RawDatum>[] = []\n        data.forEach((datum, index) => {\n            const datumId = getId(datum)\n            const datumValue = getValue(datum)\n\n            normalized.push({\n                index,\n                id: datumId,\n                value: datumValue,\n                data: datum,\n            })\n        })\n\n        return normalized\n    }, [data, getId, getValue])\n}\n\nexport const useThicknessScale = <RawDatum>({\n    data,\n    width,\n    height,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    width: number\n    height: number\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) =>\n    useMemo(() => {\n        const totalValue = data.reduce((acc, datum) => acc + datum.value, 0)\n\n        const thicknessScale = scaleLinear().domain([0, totalValue])\n\n        const totalPadding = 2 * outerPadding + (data.length - 1) * innerPadding\n\n        if (layout === 'vertical') {\n            thicknessScale.range([0, width - totalPadding])\n        } else {\n            thicknessScale.range([0, height - totalPadding])\n        }\n\n        return thicknessScale\n    }, [data, width, height, layout])\n\nexport const useComputedData = <RawDatum>({\n    data,\n    stacked,\n    dimensionIds,\n    valueFormat,\n    thicknessScale,\n    dimensionsScale,\n    colors,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    stacked: Series<RawDatum, string>[]\n    dimensionIds: string[]\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n    colors: CommonProps<RawDatum>['colors']\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) => {\n    const getColor = useOrdinalColorScale<Omit<DimensionDatum<RawDatum>, 'color'>>(colors, 'id')\n\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    return useMemo(() => {\n        const computedData: ComputedDatum<RawDatum>[] = []\n\n        let position = outerPadding\n\n        data.forEach(datum => {\n            const thickness = thicknessScale(datum.value)\n\n            const computedDatum: ComputedDatum<RawDatum> = {\n                ...datum,\n                x: layout === 'vertical' ? position : 0,\n                y: layout === 'vertical' ? 0 : position,\n                width: layout === 'vertical' ? thickness : 0,\n                height: layout === 'vertical' ? 0 : thickness,\n                dimensions: [],\n            }\n\n            const allPositions: number[] = []\n            let totalSize = 0\n\n            position += thickness + innerPadding\n\n            dimensionIds.forEach(dimensionId => {\n                const dimension = stacked.find(stack => stack.key === dimensionId)\n                if (dimension) {\n                    const dimensionPoint = dimension[datum.index]\n                    const dimensionDatum: DimensionDatum<RawDatum> = {\n                        id: dimensionId,\n                        datum: computedDatum,\n                        value: dimensionPoint[1] - dimensionPoint[0],\n                        formattedValue: formatValue(dimensionPoint[1] - dimensionPoint[0]),\n                        color: 'rgba(0, 0, 0, 0)',\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    }\n\n                    const position0 = dimensionsScale(dimensionPoint[0])\n                    const position1 = dimensionsScale(dimensionPoint[1])\n\n                    if (layout === 'vertical') {\n                        dimensionDatum.x = computedDatum.x\n                        dimensionDatum.y = Math.min(position0, position1)\n                        dimensionDatum.width = computedDatum.width\n                        dimensionDatum.height = Math.max(position0, position1) - dimensionDatum.y\n\n                        allPositions.push(dimensionDatum.y)\n                        totalSize += dimensionDatum.height\n                    } else {\n                        dimensionDatum.x = Math.min(position0, position1)\n                        dimensionDatum.y = computedDatum.y\n                        dimensionDatum.width = Math.max(position0, position1) - dimensionDatum.x\n                        dimensionDatum.height = computedDatum.height\n\n                        allPositions.push(dimensionDatum.x)\n                        totalSize += dimensionDatum.width\n                    }\n\n                    dimensionDatum.color = getColor(dimensionDatum)\n\n                    computedDatum.dimensions.push(dimensionDatum)\n                }\n\n                if (layout === 'vertical') {\n                    computedDatum.y = Math.min(...allPositions)\n                    computedDatum.height = totalSize\n                } else {\n                    computedDatum.x = Math.min(...allPositions)\n                    computedDatum.width = totalSize\n                }\n            })\n\n            computedData.push(computedDatum)\n        })\n\n        return computedData\n    }, [\n        data,\n        stacked,\n        dimensionIds,\n        thicknessScale,\n        dimensionsScale,\n        layout,\n        outerPadding,\n        innerPadding,\n        getColor,\n        formatValue,\n    ])\n}\n\nexport const useBars = <RawDatum>(\n    data: ComputedDatum<RawDatum>[],\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>,\n    borderWidth: number\n) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<DimensionDatum<RawDatum>>(borderColor, theme)\n\n    return useMemo(() => {\n        const all: BarDatum<RawDatum>[] = []\n        data.forEach(datum => {\n            datum.dimensions.forEach(dimension => {\n                all.push({\n                    key: `${datum.id}-${dimension.id}`,\n                    ...dimension,\n                    borderColor: getBorderColor(dimension),\n                    borderWidth,\n                })\n            })\n        })\n\n        return all\n    }, [data, borderWidth, getBorderColor])\n}\n\nexport const useMarimekko = <RawDatum>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions: rawDimensions,\n    layout,\n    offset,\n    outerPadding,\n    innerPadding,\n    colors,\n    borderColor,\n    borderWidth,\n    width,\n    height,\n}: {\n    data: DataProps<RawDatum>['data']\n    id: DataProps<RawDatum>['id']\n    value: DataProps<RawDatum>['value']\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    dimensions: DataProps<RawDatum>['dimensions']\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n    colors: CommonProps<RawDatum>['colors']\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n    borderWidth: number\n    width: number\n    height: number\n}) => {\n    const { dimensionIds, dimensions } = useDataDimensions<RawDatum>(rawDimensions)\n    const stack = useStack<RawDatum>(dimensionIds, dimensions, offset)\n    const { stacked, min, max } = useStackedData<RawDatum>(stack, data)\n    const normalizedData = useNormalizedData<RawDatum>(data, id, value)\n    const thicknessScale = useThicknessScale({\n        data: normalizedData,\n        width,\n        height,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const dimensionsScale = useDimensionsScale(min, max, width, height, layout)\n    const computedData = useComputedData<RawDatum>({\n        data: normalizedData,\n        stacked,\n        dimensionIds,\n        valueFormat,\n        thicknessScale,\n        dimensionsScale,\n        colors,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const bars = useBars<RawDatum>(computedData, borderColor, borderWidth)\n\n    return {\n        computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n        dimensionIds,\n    }\n}\n\nexport const useLayerContext = <RawDatum>({\n    data,\n    bars,\n    thicknessScale,\n    dimensionsScale,\n}: {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n}): CustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            data,\n            bars,\n            thicknessScale,\n            dimensionsScale,\n        }),\n        [data, bars, thicknessScale, dimensionsScale]\n    )\n\nexport const useLegendData = <RawDatum>(dimensionIds: string[], bars: BarDatum<RawDatum>[]) => {\n    const legendData: {\n        id: string\n        label: string\n        color: string\n        fill?: string\n    }[] = []\n\n    dimensionIds.forEach(dimensionId => {\n        const bar = bars.find(bar => bar.id === dimensionId)\n        if (bar) {\n            legendData.push({\n                id: dimensionId,\n                label: dimensionId,\n                color: bar.color,\n                fill: bar.fill,\n            })\n        }\n    })\n\n    return legendData\n}\n","import { createElement, MouseEvent, useCallback } from 'react'\nimport { animated, SpringValues, to } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\n\ninterface BarProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    bar: BarDatum<RawDatum>\n    animatedProps: SpringValues<{\n        x: number\n        y: number\n        width: number\n        height: number\n        opacity: number\n        color: string\n        borderColor: string\n    }>\n    isInteractive: boolean\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bar = <RawDatum,>({\n    bar,\n    animatedProps,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        event => showTooltipFromEvent(createElement(tooltip, { bar }), event),\n        [showTooltipFromEvent, tooltip, bar]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.(bar, event)\n        },\n        [onClick, bar]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseMove?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(bar, event)\n            hideTooltip()\n        },\n        [onMouseLeave, bar, hideTooltip]\n    )\n\n    return (\n        <animated.rect\n            x={animatedProps.x}\n            y={animatedProps.y}\n            width={to(animatedProps.width, value => Math.max(value, 0))}\n            height={to(animatedProps.height, value => Math.max(value, 0))}\n            fill={bar.fill ?? animatedProps.color}\n            stroke={animatedProps.borderColor}\n            strokeWidth={bar.borderWidth}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\nimport { Bar } from './Bar'\n\ninterface BarsProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    isInteractive: boolean\n    bars: BarDatum<RawDatum>[]\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bars = <RawDatum,>({\n    bars,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarsProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<\n        BarDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            width: number\n            height: number\n            color: string\n            opacity: number\n            borderColor: string\n        }\n    >(bars, {\n        keys: bar => bar.key,\n        initial: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        from: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 0,\n            borderColor: bar.borderColor,\n        }),\n        enter: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        update: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        leave: bar => ({\n            opacity: 0,\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, bar) => (\n                <Bar<RawDatum>\n                    key={bar.key}\n                    bar={bar}\n                    animatedProps={style}\n                    isInteractive={isInteractive}\n                    tooltip={tooltip}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                />\n            ))}\n        </>\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BarDatum } from './types'\n\nexport const BarTooltip = <RawDatum,>({ bar }: { bar: BarDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={`${bar.datum.id} - ${bar.id}`}\n        value={bar.formattedValue}\n        enableChip={true}\n        color={bar.color}\n    />\n)\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { SvgProps, LayerId, DimensionDatum } from './types'\nimport { defaultProps } from './props'\nimport { useMarimekko, useLayerContext, useLegendData } from './hooks'\nimport { Bars } from './Bars'\nimport { BarTooltip } from './BarTooltip'\n\nconst InnerMarimekko = <RawDatum,>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions,\n    width,\n    height,\n    margin: partialMargin,\n    layout = defaultProps.layout,\n    offset = defaultProps.offset,\n    outerPadding = defaultProps.outerPadding,\n    innerPadding = defaultProps.innerPadding,\n    layers = defaultProps.layers,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<DimensionDatum<RawDatum>, 'color'>\n    >,\n    defs = [],\n    fill = [],\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<DimensionDatum<RawDatum>>,\n    isInteractive = defaultProps.isInteractive,\n    tooltip = BarTooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    legends = [],\n    role,\n}: SvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { computedData, bars, thicknessScale, dimensionsScale, dimensionIds } =\n        useMarimekko<RawDatum>({\n            data,\n            id,\n            value,\n            dimensions,\n            valueFormat,\n            layout,\n            offset,\n            outerPadding,\n            innerPadding,\n            colors,\n            borderColor,\n            borderWidth,\n            width: innerWidth,\n            height: innerHeight,\n        })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        bars: null,\n        legends: null,\n    }\n\n    const boundDefs = bindDefs(defs, bars, fill)\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Bars<RawDatum>\n                key=\"bars\"\n                bars={bars}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n            />\n        )\n    }\n\n    const xScale = layout === 'vertical' ? thicknessScale : dimensionsScale\n    const yScale = layout === 'vertical' ? dimensionsScale : thicknessScale\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                xScale={enableGridX ? (xScale as any) : undefined}\n                yScale={enableGridY ? (yScale as any) : undefined}\n                width={innerWidth}\n                height={innerHeight}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    const legendData = useLegendData<RawDatum>(dimensionIds, bars)\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <g key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    const layerContext = useLayerContext<RawDatum>({\n        data: computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as LayerId] !== undefined) {\n                    return layerById[layer as LayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Marimekko = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    ...otherProps\n}: SvgProps<RawDatum>) => (\n    <Container\n        theme={otherProps.theme}\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n    >\n        <InnerMarimekko<RawDatum>\n            isInteractive={isInteractive}\n            animate={animate}\n            motionConfig={motionConfig}\n            {...otherProps}\n        />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Marimekko } from './Marimekko'\nimport { SvgProps } from './types'\n\nexport const ResponsiveMarimekko = <RawDatum,>(\n    props: Omit<SvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Marimekko<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { patternDotsDef, patternLinesDef } from '@nivo/core'\nimport { mapAxis, mapFormat, settingsMapper } from '../../../lib/settings'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n    background: #333;\n    padding: 12px 16px;\n    font-size: 12px;\n    border-radius: 2px;\n`\nconst TooltipKey = styled.span``\nconst TooltipValue = styled.span`\n    font-weight: 600;\n`\n\nconst CustomTooltip = ({ bar }) => (\n    <TooltipWrapper style={{ color: bar.color }}>\n        <TooltipKey>datum.id</TooltipKey>\n        <TooltipValue>{bar.datum.id}</TooltipValue>\n        <TooltipKey>id</TooltipKey>\n        <TooltipValue>{bar.id}</TooltipValue>\n        <TooltipKey>value</TooltipKey>\n        <TooltipValue>{bar.value}</TooltipValue>\n        <TooltipKey>color</TooltipKey>\n        <TooltipValue>{bar.color}</TooltipValue>\n        <TooltipKey>thickness</TooltipKey>\n        <TooltipValue>{bar.datum.thickness}</TooltipValue>\n    </TooltipWrapper>\n)\n\nexport default settingsMapper(\n    {\n        valueFormat: mapFormat,\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return undefined\n\n            return CustomTooltip\n        },\n        defs: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                patternLinesDef('lines', {\n                    background: 'rgba(0, 0, 0, 0)',\n                    color: 'inherit',\n                    rotation: -45,\n                    lineWidth: 4,\n                    spacing: 8,\n                }),\n            ]\n        },\n        fill: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                { match: { id: 'agree strongly' }, id: 'lines' },\n                { match: { id: 'disagree strongly' }, id: 'lines' },\n            ]\n        },\n    },\n    {\n        exclude: ['custom tooltip example', 'showcase pattern usage'],\n    }\n)\n","import { defaultProps as defaults, offsetById } from '@nivo/marimekko'\nimport {\n    themeProperty,\n    defsProperties,\n    groupProperties,\n    getLegendsProps,\n    motionProperties,\n    axesProperties,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data, which should be immutable.',\n        description: `\n            The data doesn't have to conform to a specific schema,\n            it's gonna depend on how you configure \\`id\\`, \\`value\\`\n            and \\`dimensions\\`.\n        `,\n        type: 'RawDatum[]',\n        required: true,\n    },\n    {\n        key: 'id',\n        group: 'Base',\n        help: 'ID accessor.',\n        description: `\n            Define how to access the ID of each datum,\n            by default, nivo will look for the \\`id\\` property.\n        `,\n        type: 'string | (datum: RawDatum): string | number',\n        required: true,\n    },\n    {\n        key: 'value',\n        group: 'Base',\n        help: 'Value accessor.',\n        description: `\n            Define how to access the value of each datum,\n            which will dictate the thickness of the bars,\n            by default, nivo will look for the \\`value\\` property.\n        `,\n        type: 'string | (datum: RawDatum): number',\n        required: true,\n    },\n    {\n        key: 'dimensions',\n        group: 'Base',\n        help: 'Data dimensions configuration.',\n        type: '{ id: string, value: string | (datum: RawDatum) => number }',\n        required: true,\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'string | (value: number) => string | number',\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'layout',\n        help: `How to display bars.`,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.layout,\n        controlType: 'radio',\n        group: 'Base',\n        controlOptions: {\n            choices: [\n                { label: 'horizontal', value: 'horizontal' },\n                { label: 'vertical', value: 'vertical' },\n            ],\n        },\n    },\n    {\n        key: 'offset',\n        help: 'Offset type.',\n        type: 'OffsetId',\n        required: false,\n        controlType: 'choices',\n        group: 'Base',\n        defaultValue: defaults.offset,\n        controlOptions: {\n            choices: Object.keys(offsetById).map(key => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'outerPadding',\n        help: 'Space before the first bar and after the last one.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.outerPadding,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 20,\n            unit: 'px',\n        },\n    },\n    {\n        key: 'innerPadding',\n        help: 'Space between bars.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.innerPadding,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 20,\n            unit: 'px',\n        },\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            not required if using\n            \\`<ResponsiveMarimekko />\\`.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            not required if using\n            \\`<ResponsiveMarimekko />\\`.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'margin',\n        group: 'Base',\n        type: 'object',\n        required: false,\n        help: 'Chart margin.',\n        flavors: ['svg', 'api'],\n        controlType: 'margin',\n    },\n    themeProperty(['svg', 'api']),\n    {\n        key: 'colors',\n        group: 'Style',\n        type: 'string | Function | string[]',\n        required: false,\n        help: 'Defines color range.',\n        defaultValue: defaults.colors,\n        flavors: ['svg', 'api'],\n        controlType: 'ordinalColors',\n    },\n    ...defsProperties('Style', ['svg', 'api']),\n    {\n        key: 'showcase pattern usage',\n        flavors: ['svg'],\n        help: 'Patterns.',\n        description: `\n            You can use \\`defs\\` and \\`fill\\` properties\n            to use patterns, see\n            [dedicated guide](self:/guides/patterns)\n            for further information.\n        `,\n        type: 'boolean',\n        controlType: 'switch',\n        group: 'Style',\n    },\n    {\n        key: 'borderWidth',\n        help: 'Slices border width.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.borderWidth,\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute border color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.borderColor,\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    ...axesProperties(),\n    {\n        key: 'enableGridX',\n        help: 'Enable/disable x grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableGridX,\n        controlType: 'switch',\n        group: 'Grid & Axes',\n    },\n    {\n        key: 'gridXValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for vertical grid lines.',\n        type: 'number[]',\n        required: false,\n    },\n    {\n        key: 'enableGridY',\n        help: 'Enable/disable y grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableGridY,\n        controlType: 'switch',\n        group: 'Grid & Axes',\n    },\n    {\n        key: 'gridYValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for horizontal grid lines.',\n        type: 'number[]',\n        required: false,\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer must be a component.\n            \n            The layer component which will receive the chart's\n            context & computed data and must return a valid SVG element\n            for the \\`Marimekko\\` component.\n            \n            The props passed to layers have the following structure:\n            \n            \\`\\`\\`\n            {\n                data: ComputedDatum<RawDatum>[]\n                bars: BarDatum<RawDatum>[]\n                thicknessScale: ScaleLinear<number, number>\n                dimensionsScale: ScaleLinear<number, number>\n            }\n            \\`\\`\\`\n        `,\n        required: false,\n        type: 'Array<string | Function>',\n        defaultValue: defaults.layers,\n    },\n    {\n        key: 'isInteractive',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.isInteractive,\n        controlType: 'switch',\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onClick handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseEnter handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseMove handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseLeave handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: 'Component',\n        required: false,\n        help: 'Custom tooltip component',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will receive\n            the following props:\n            \n            \\`\\`\\`\n            {\n                bar: BarDatum<RawDatum>\n            }\n            \\`\\`\\`\n            \n            You can also customize the style of the tooltip using\n            the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        help: 'Showcase custom tooltip.',\n        type: 'boolean',\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    ...motionProperties(['svg'], defaults, 'react-spring'),\n    {\n        key: 'legends',\n        flavors: ['svg'],\n        type: 'Legend[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n]\n\nexport const groups = groupProperties(props)\n","import React from 'react'\nimport { ResponsiveMarimekko, defaultProps } from '@nivo/marimekko'\nimport { random, omit } from 'lodash'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/marimekko/meta.yml'\nimport mapper from '../../data/components/marimekko/mapper'\nimport { groups } from '../../data/components/marimekko/props'\n\nconst getRandomValue = () => random(0, 32)\n\nconst generateData = () =>\n    [`it's good`, `it's sweet`, `it's spicy`, 'worth eating', 'worth buying'].map(statement => ({\n        statement,\n        participation: getRandomValue(),\n        stronglyAgree: getRandomValue(),\n        agree: getRandomValue(),\n        disagree: getRandomValue(),\n        stronglyDisagree: getRandomValue(),\n    }))\n\nconst initialProperties = {\n    id: 'statement',\n    value: 'participation',\n    dimensions: [\n        {\n            id: 'disagree strongly',\n            value: 'stronglyDisagree',\n        },\n        {\n            id: 'disagree',\n            value: 'disagree',\n        },\n        {\n            id: 'agree',\n            value: 'agree',\n        },\n        {\n            id: 'agree strongly',\n            value: 'stronglyAgree',\n        },\n    ],\n    layout: defaultProps.layout,\n    offset: defaultProps.offset,\n    outerPadding: defaultProps.outerPadding,\n    innerPadding: 9,\n\n    axisTop: {\n        enable: false,\n        orient: 'top',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 36,\n    },\n    axisRight: {\n        enable: true,\n        orient: 'right',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 0,\n    },\n    axisBottom: {\n        enable: true,\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'participation',\n        legendOffset: 36,\n        legendPosition: 'middle',\n    },\n    axisLeft: {\n        enable: true,\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'opinions',\n        legendOffset: -40,\n        legendPosition: 'middle',\n    },\n    enableGridX: defaultProps.enableGridX,\n    enableGridY: defaultProps.enableGridY,\n\n    margin: {\n        top: 40,\n        right: 80,\n        bottom: 100,\n        left: 80,\n    },\n\n    valueFormat: { format: '', enabled: false },\n\n    colors: { scheme: 'spectral' },\n\n    borderWidth: 1,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.2]],\n    },\n\n    isInteractive: true,\n    'custom tooltip example': false,\n    tooltip: null,\n    'showcase pattern usage': true,\n\n    defs: [],\n    fill: [],\n\n    animate: defaultProps.animate,\n    motionConfig: defaultProps.motionConfig,\n\n    legends: [\n        {\n            anchor: 'bottom',\n            direction: 'row',\n            justify: false,\n            translateX: 0,\n            translateY: 80,\n            itemsSpacing: 0,\n            itemWidth: 140,\n            itemHeight: 18,\n            itemTextColor: '#999',\n            itemDirection: 'right-to-left',\n            itemOpacity: 1,\n            symbolSize: 18,\n            symbolShape: 'square',\n            effects: [\n                {\n                    on: 'hover',\n                    style: {\n                        itemTextColor: '#000',\n                    },\n                },\n            ],\n        },\n    ],\n}\n\nconst Marimekko = () => {\n    return (\n        <ComponentTemplate\n            name=\"Marimekko\"\n            meta={meta.Marimekko}\n            icon=\"marimekko\"\n            flavors={meta.flavors}\n            currentFlavor=\"svg\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={defaultProps}\n            propertiesMapper={mapper}\n            generateData={generateData}\n        >\n            {(properties, data, theme, logAction) => {\n                const handleClick = bar => {\n                    logAction({\n                        type: 'click',\n                        label: `[bar] ${bar.datum.id} - ${bar.id}: ${bar.value}`,\n                        color: bar.color,\n                        // prevent cyclic dependency\n                        data: {\n                            ...omit(bar, ['datum']),\n                            datum: omit(bar.datum, ['dimensions']),\n                        },\n                    })\n                }\n\n                return (\n                    <ResponsiveMarimekko\n                        data={data}\n                        {...properties}\n                        theme={theme}\n                        onClick={handleClick}\n                        legends={properties.legends.map(legend => ({\n                            ...legend,\n                        }))}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default Marimekko\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n"],"names":["slice","Array","prototype","x","stackValue","d","key","keys","order","offset","value","stack","data","i","oz","kz","apply","this","arguments","m","length","n","sz","sij","ki","si","j","index","_","settingsMapper","mapping","exclude","settings","options","overrides","Object","forEach","omit","mapAxis","type","upperFirst","enable","mapFormat","format","enabled","undefined","computeCartesianTicks","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","position","centerScale","line","lineX","lineY","text","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","y","top","bottom","left","right","ticks","map","getFormatter","formatter","timeFormat","Date","d3Format","computeGridLines","width","height","_values","isArray","lines","x1","x2","y1","y2","memoizedAxisTick","memo","_value","onClick","textAnchor","animatedProps","theme","useTheme","props","useMemo","style","opacity","cursor","event","React","animated","g","transform","dominantBaseline","textTransform","memoizedAxis","renderTick","AxisTick","legend","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","config","useSpring","lineX2","lineY2","immediate","transition","useTransition","t","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","rotate","domain","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","axes","isXAxis","Axis","GridLine","grid","GridLines","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","_format","save","font","fontWeight","fontSize","fontFamily","strokeWidth","lineWidth","Number","lineCap","stroke","strokeStyle","beginPath","moveTo","lineTo","degreesToRadians","fill","fillStyle","fillText","String","restore","renderAxesToCanvas","renderGridLinesToCanvas","defaultProps","layout","outerPadding","innerPadding","layers","enableGridX","enableGridY","colors","scheme","borderWidth","borderColor","modifiers","isInteractive","motionConfig","offsetById","expand","stackOffsetExpand","diverging","stackOffsetDiverging","none","stackOffsetNone","silouhette","stackOffsetSilhouette","wiggle","stackOffsetWiggle","useStack","dimensionIds","dimensions","offsetFunction","d3Stack","datum","useMarimekko","id","valueFormat","rawDimensions","push","dimension","_get","stacked","allValues","min","Math","max","normalizedData","getId","getValue","normalized","datumId","datumValue","thicknessScale","totalValue","reduce","acc","scaleLinear","totalPadding","range","dimensionsScale","computedData","getColor","useOrdinalColorScale","useValueFormatter","thickness","computedDatum","allPositions","totalSize","find","dimensionId","dimensionPoint","dimensionDatum","formattedValue","color","position0","position1","bars","getBorderColor","useInheritedColor","all","Bar","bar","tooltip","onMouseEnter","onMouseMove","onMouseLeave","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","e","createElement","handleClick","handleMouseEnter","handleMouseMove","handleMouseLeave","rect","to","Bars","BarTooltip","BasicTooltip","enableChip","InnerMarimekko","partialMargin","margin","axisTop","axisRight","axisBottom","axisLeft","gridXValues","gridYValues","defs","legends","role","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","layerById","boundDefs","bindDefs","includes","legendData","label","BoxLegendSvg","containerWidth","containerHeight","layerContext","SvgWrapper","layer","Fragment","Marimekko","otherProps","Container","ResponsiveMarimekko","ResponsiveWrapper","TooltipWrapper","styled","TooltipKey","TooltipValue","CustomTooltip","patternLinesDef","background","rotation","spacing","match","group","help","description","required","controlType","defaultValue","defaults","controlOptions","choices","unit","enableControlForFlavors","step","flavors","themeProperty","defsProperties","axesProperties","motionProperties","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","alert","JSON","stringify","groups","groupProperties","getRandomValue","generateData","statement","participation","stronglyAgree","agree","disagree","stronglyDisagree","initialProperties","orient","itemTextColor","itemOpacity","symbolShape","effects","on","ComponentTemplate","name","meta","icon","currentFlavor","properties","defaultProperties","propertiesMapper","mapper","logAction","nativeFloor","floor","nativeRandom","random","module","exports","lower","upper","baseRandom","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","temp","rand"],"sourceRoot":""}