{"version":3,"file":"c46004bf0c87c9b2cb2e65443efe604c9ed83710-54a1b0e1372a5834d1b6.js","mappings":"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","sources":["webpack://nivo-website/./src/data/components/waffle/CustomTooltip.tsx","webpack://nivo-website/./src/data/components/waffle/mapper.tsx","webpack://nivo-website/./src/data/components/waffle/props.ts","webpack://nivo-website/./src/lib/settings.ts","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/svg/ContinuousColorsLegendSvg.tsx","webpack://nivo-website/../src/svg/AnchoredContinuousColorsLegendSvg.tsx","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/props.ts"],"sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n`\nconst TooltipKey = styled.span`\n    font-weight: 600;\n`\nconst TooltipValue = styled.span``\n\nconst CustomTooltip = node => (\n    <TooltipWrapper style={{ color: node.color }}>\n        <TooltipKey>label</TooltipKey>\n        <TooltipValue>{node.label}</TooltipValue>\n        <TooltipKey>id</TooltipKey>\n        <TooltipValue>{node.id}</TooltipValue>\n        <TooltipKey>value</TooltipKey>\n        <TooltipValue>{node.value}</TooltipValue>\n        <TooltipKey>position</TooltipKey>\n        <TooltipValue>{node.position}</TooltipValue>\n        <TooltipKey>groupIndex</TooltipKey>\n        <TooltipValue>{node.groupIndex}</TooltipValue>\n        <TooltipKey>row</TooltipKey>\n        <TooltipValue>{node.row}</TooltipValue>\n        <TooltipKey>column</TooltipKey>\n        <TooltipValue>{node.column}</TooltipValue>\n        <TooltipKey>color</TooltipKey>\n        <TooltipValue>{node.color}</TooltipValue>\n    </TooltipWrapper>\n)\n\nexport default CustomTooltip\n","import React from 'react'\nimport { settingsMapper } from '../../../lib/settings'\nimport CustomTooltip from './CustomTooltip'\n\nconst CustomSvgCell = ({\n    position,\n    size,\n    x,\n    y,\n    color,\n    fill,\n    opacity,\n    borderWidth,\n    borderColor,\n    data,\n    onHover,\n    onLeave,\n    onClick,\n}) => (\n    <circle\n        r={size / 2}\n        cx={x + size / 2}\n        cy={y + size / 2}\n        fill={fill || color}\n        strokeWidth={borderWidth}\n        stroke={borderColor}\n        opacity={opacity}\n        onMouseEnter={onHover}\n        onMouseMove={onHover}\n        onMouseLeave={onLeave}\n        onClick={event => {\n            onClick({ position, color, x, y, data }, event)\n        }}\n    />\n)\n\nconst CustomHtmlCell = ({\n    position,\n    size,\n    x,\n    y,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    data,\n    onHover,\n    onLeave,\n    onClick,\n}) => (\n    <div\n        style={{\n            borderRadius: `${size / 2}px 0 ${size / 2}px 0`,\n            position: 'absolute',\n            top: y,\n            left: x,\n            width: size,\n            height: size,\n            background: color,\n            opacity,\n            boxSizing: 'content-box',\n            borderStyle: 'solid',\n            borderWidth: `${borderWidth}px`,\n            borderColor,\n        }}\n        onMouseEnter={onHover}\n        onMouseMove={onHover}\n        onMouseLeave={onLeave}\n        onClick={event => {\n            onClick({ position, color, x, y, data }, event)\n        }}\n    />\n)\n\nexport default settingsMapper(\n    {\n        cellComponent: (value, values, options) => {\n            if (value === `Custom(props) => (…)`) {\n                if (options.component === 'Waffle') return CustomSvgCell\n                return CustomHtmlCell\n            }\n            return undefined\n        },\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return null\n\n            return CustomTooltip\n        },\n    },\n    {\n        exclude: ['custom tooltip example'],\n    }\n)\n","// @ts-ignore\nimport { WaffleDefaultProps } from '@nivo/waffle'\nimport {\n    themeProperty,\n    motionProperties,\n    defsProperties,\n    getLegendsProps,\n    groupProperties,\n} from '../../../lib/componentProperties'\nimport { chartDimensions, ordinalColors, isInteractive } from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg', 'html', 'canvas']\n\nconst defaults = WaffleDefaultProps\n\nconst props: ChartProperty[] = [\n    {\n        key: 'total',\n        group: 'Base',\n        type: 'number',\n        required: true,\n        help: 'Max value.',\n        description: 'Max value, ratio will be computed against this value for each datum.',\n        flavors: allFlavors,\n    },\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                id:    string | number\n                value: number\n                label: string | number\n            }>\n            \\`\\`\\`\n        `,\n        type: 'object[]',\n        required: true,\n        flavors: allFlavors,\n    },\n    // {\n    //     key: 'hiddenIds',\n    //     type: 'Array<string | number>',\n    //     help: 'Hide parts of the data by id',\n    //     description: `\n    //         Hide parts of the data by id, this can be used\n    //         to implement toggle. Note that the datum will\n    //         still be visible in legends, if you want\n    //         to completely remove a datum from the data set,\n    //         you'll have to filter the data before passing\n    //         it to the component.\n    //     `,\n    //     required: false,\n    //     defaultValue: defaults.hiddenIds,\n    // },\n    {\n        key: 'rows',\n        group: 'Base',\n        type: 'number',\n        help: 'Number of rows.',\n        required: true,\n        flavors: allFlavors,\n        control: {\n            type: 'range',\n            min: 1,\n            max: 100,\n        },\n    },\n    {\n        key: 'columns',\n        group: 'Base',\n        type: 'number',\n        help: 'Number of columns.',\n        required: true,\n        flavors: allFlavors,\n        control: {\n            type: 'range',\n            min: 1,\n            max: 100,\n        },\n    },\n    {\n        key: 'fillDirection',\n        group: 'Base',\n        type: 'string',\n        required: false,\n        help: `How to fill the waffle.`,\n        flavors: allFlavors,\n        defaultValue: defaults.fillDirection,\n        control: {\n            type: 'choices',\n            choices: [\n                { label: 'top', value: 'top' },\n                { label: 'right', value: 'right' },\n                { label: 'bottom', value: 'bottom' },\n                { label: 'left', value: 'left' },\n            ],\n        },\n    },\n    {\n        key: 'padding',\n        group: 'Base',\n        type: 'number',\n        help: 'Padding between each cell.',\n        required: true,\n        flavors: allFlavors,\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 10,\n        },\n    },\n    ...chartDimensions(allFlavors),\n    themeProperty(['svg', 'html', 'canvas']),\n    {\n        key: 'cellComponent',\n        flavors: ['svg', 'html'],\n        help: 'Override default cell component.',\n        type: 'Function',\n        required: false,\n        group: 'Style',\n        control: {\n            type: 'choices',\n            choices: ['default', 'Custom(props) => (…)'].map(key => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    ordinalColors({\n        flavors: allFlavors,\n        defaultValue: defaults.colors,\n    }),\n    {\n        key: 'emptyColor',\n        group: 'Style',\n        help: 'Defines empty cells color.',\n        type: 'string',\n        required: false,\n        defaultValue: defaults.emptyColor,\n        flavors: allFlavors,\n        control: { type: 'colorPicker' },\n    },\n    {\n        key: 'emptyOpacity',\n        group: 'Style',\n        help: 'Empty cells opacity.',\n        required: false,\n        defaultValue: defaults.emptyOpacity,\n        type: 'number',\n        flavors: allFlavors,\n        control: { type: 'opacity' },\n    },\n    {\n        key: 'borderWidth',\n        group: 'Style',\n        type: 'number',\n        required: false,\n        help: 'Control cell border width.',\n        defaultValue: defaults.borderWidth,\n        flavors: allFlavors,\n        control: { type: 'lineWidth' },\n    },\n    {\n        key: 'borderColor',\n        group: 'Style',\n        type: 'string | object | Function',\n        required: false,\n        help: 'Method to compute cell border color.',\n        defaultValue: defaults.borderColor,\n        flavors: ['svg', 'html', 'canvas'],\n        control: { type: 'inheritedColor' },\n    },\n    ...defsProperties('Style', ['svg']),\n    isInteractive({\n        flavors: ['svg', 'html', 'canvas'],\n        defaultValue: defaults.isInteractive,\n    }),\n    {\n        key: 'onClick',\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'onClick handler, it receives clicked node data and style plus mouse event.',\n        flavors: ['svg', 'html', 'canvas'],\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom tooltip component',\n        flavors: allFlavors,\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will\n            receive the following data:\n            \\`\\`\\`\n            {\n                id:         {string|number},\n                value:      number,\n                label:      {string|number},\n                color:      string,\n                position:   number,\n                row:        number,\n                column:     number,\n                groupIndex: number,\n                startAt:    number,\n                endAt:      number,\n            }\n            \\`\\`\\`\n            You can customize the tooltip style\n            using the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        group: 'Interactivity',\n        type: 'boolean',\n        required: false,\n        control: { type: 'switch' },\n        help: 'Showcase custom tooltip.',\n        flavors: allFlavors,\n    },\n    {\n        key: 'legends',\n        group: 'Legends',\n        type: 'object[]',\n        required: false,\n        help: `Optional chart's legends.`,\n        flavors: ['svg', 'canvas'],\n        control: {\n            type: 'array',\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            defaults: {\n                anchor: 'left',\n                direction: 'column',\n                justify: false,\n                translateX: -100,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 4,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                itemTextColor: '#777',\n                onClick: (data: any) => {\n                    console.log(JSON.stringify(data, null, '    '))\n                },\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemTextColor: '#000',\n                            itemBackground: '#f7fafb',\n                        },\n                    },\n                ],\n            },\n        },\n    },\n    ...motionProperties(['svg', 'html'], defaults),\n]\n\nexport const groups = groupProperties(props)\n","import omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\nimport { AxisProps, CanvasAxisProps } from '@nivo/axes'\n\nexport const settingsMapper =\n    (mapping: any, { exclude = [] }: { exclude?: string[] } = {}) =>\n    (settings: any, options: any = {}) => {\n        const overrides: any = {}\n\n        Object.keys(settings).forEach(key => {\n            if (mapping[key]) {\n                overrides[key] = mapping[key](settings[key], settings, options)\n            }\n        })\n\n        return {\n            ...omit(settings, exclude),\n            ...overrides,\n        }\n    }\n\nexport type AxisWithToggle<Axis extends AxisProps | CanvasAxisProps> = NonNullable<Axis> & {\n    enable: boolean\n}\n\nexport const mapAxis = (type: 'top' | 'right' | 'bottom' | 'left') => (value: any, settings: any) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }: { format: string; enabled: boolean }) =>\n    enabled ? format : undefined\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { ContinuousColorsLegendProps } from './types'\n\nexport const continuousColorsLegendDefaults: {\n    length: NonNullable<ContinuousColorsLegendProps['length']>\n    thickness: NonNullable<ContinuousColorsLegendProps['thickness']>\n    direction: NonNullable<ContinuousColorsLegendProps['direction']>\n    tickPosition: NonNullable<ContinuousColorsLegendProps['tickPosition']>\n    tickSize: NonNullable<ContinuousColorsLegendProps['tickSize']>\n    tickSpacing: NonNullable<ContinuousColorsLegendProps['tickSpacing']>\n    tickOverlap: NonNullable<ContinuousColorsLegendProps['tickOverlap']>\n    tickFormat: NonNullable<ContinuousColorsLegendProps['tickFormat']>\n    titleAlign: NonNullable<ContinuousColorsLegendProps['titleAlign']>\n    titleOffset: NonNullable<ContinuousColorsLegendProps['titleOffset']>\n} = {\n    length: 200,\n    thickness: 16,\n    direction: 'row',\n    tickPosition: 'after',\n    tickSize: 4,\n    tickSpacing: 3,\n    tickOverlap: false,\n    tickFormat: (value: number) => `${value}`,\n    titleAlign: 'start',\n    titleOffset: 4,\n}\n","import { scaleLinear } from 'd3-scale'\nimport { getValueFormatter } from '@nivo/core'\nimport { computeContinuousColorScaleColorStops } from '@nivo/colors'\nimport {\n    BoxLegendSvgProps,\n    ContinuousColorsLegendProps,\n    LegendAnchor,\n    LegendItemDirection,\n} from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n\nexport const computeContinuousColorsLegend = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    // left to right for `row`, bottom to top for `column`\n    const domain = direction === 'column' ? [...scale.domain()].reverse() : scale.domain()\n\n    const positionScale = scaleLinear().domain(domain)\n    if (domain.length === 2) {\n        // sequential, quantize\n        positionScale.range([0, length])\n    } else if (domain.length === 3) {\n        // diverging\n        positionScale.range([0, length / 2, length])\n    }\n\n    let values: number[]\n    if ('thresholds' in scale) {\n        // quantize\n        values = [domain[0], ...scale.thresholds(), domain[1]]\n    } else {\n        // sequential, diverging\n        values = Array.isArray(ticks) ? ticks : (scale as any).ticks(ticks)\n    }\n\n    const colorStops = computeContinuousColorScaleColorStops(scale, 32)\n\n    const formatValue = getValueFormatter(tickFormat)\n\n    const computedTicks: {\n        x1: number\n        y1: number\n        x2: number\n        y2: number\n        text: string\n        textX: number\n        textY: number\n        textHorizontalAlign: 'start' | 'middle' | 'end'\n        textVerticalAlign: 'alphabetic' | 'central' | 'hanging'\n    }[] = []\n\n    let width: number\n    let height: number\n\n    const gradientX1 = 0\n    let gradientY1 = 0\n    let gradientX2 = 0\n    const gradientY2 = 0\n\n    let titleX: number\n    let titleY: number\n    let titleRotation: number\n    let titleVerticalAlign: 'alphabetic' | 'hanging'\n\n    if (direction === 'row') {\n        width = length\n        height = thickness\n\n        gradientX2 = 1\n\n        let y1: number\n        let y2: number\n\n        let textY: number\n        const textHorizontalAlign = 'middle'\n        let textVerticalAlign: 'alphabetic' | 'hanging'\n\n        titleRotation = 0\n        if (titleAlign === 'start') {\n            titleX = 0\n        } else if (titleAlign === 'middle') {\n            titleX = length / 2\n        } else {\n            titleX = length\n        }\n\n        if (tickPosition === 'before') {\n            y1 = -tickSize\n            y2 = tickOverlap ? thickness : 0\n\n            textY = -tickSize - tickSpacing\n            textVerticalAlign = 'alphabetic'\n\n            titleY = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            y1 = tickOverlap ? 0 : thickness\n            y2 = thickness + tickSize\n\n            textY = y2 + tickSpacing\n            textVerticalAlign = 'hanging'\n\n            titleY = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const x = positionScale(value)\n\n            computedTicks.push({\n                x1: x,\n                y1,\n                x2: x,\n                y2,\n                text: formatValue(value),\n                textX: x,\n                textY,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    } else {\n        width = thickness\n        height = length\n\n        gradientY1 = 1\n\n        let x1: number\n        let x2: number\n\n        let textX: number\n        let textHorizontalAlign: 'start' | 'end'\n        const textVerticalAlign = 'central'\n\n        titleRotation = -90\n        if (titleAlign === 'start') {\n            titleY = length\n        } else if (titleAlign === 'middle') {\n            titleY = length / 2\n        } else {\n            titleY = 0\n        }\n\n        if (tickPosition === 'before') {\n            x1 = -tickSize\n            x2 = tickOverlap ? thickness : 0\n\n            textX = x1 - tickSpacing\n            textHorizontalAlign = 'end'\n\n            titleX = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            x1 = tickOverlap ? 0 : thickness\n            x2 = thickness + tickSize\n\n            textX = x2 + tickSpacing\n            textHorizontalAlign = 'start'\n\n            titleX = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const y = positionScale(value)\n\n            computedTicks.push({\n                x1,\n                y1: y,\n                x2,\n                y2: y,\n                text: formatValue(value),\n                textX,\n                textY: y,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    }\n\n    return {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks: computedTicks,\n        titleText: title,\n        titleX,\n        titleY,\n        titleRotation,\n        titleHorizontalAlign: titleAlign,\n        titleVerticalAlign,\n    }\n}\n","import { Fragment } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { computeContinuousColorsLegend } from '../compute'\nimport { ContinuousColorsLegendProps } from '../types'\nimport { continuousColorsLegendDefaults } from '../defaults'\n\nexport const ContinuousColorsLegendSvg = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        ticks: computedTicks,\n        colorStops,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const theme = useTheme()\n\n    const id = `ContinuousColorsLegendSvgGradient.${direction}.${colorStops\n        .map(stop => stop.offset)\n        .join('_')}`\n\n    return (\n        <g>\n            <defs>\n                <linearGradient\n                    id={id}\n                    x1={gradientX1}\n                    y1={gradientY1}\n                    x2={gradientX2}\n                    y2={gradientY2}\n                >\n                    {colorStops.map(colorStop => (\n                        <stop {...colorStop} />\n                    ))}\n                </linearGradient>\n            </defs>\n            {titleText && (\n                <text\n                    transform={`translate(${titleX}, ${titleY}) rotate(${titleRotation})`}\n                    textAnchor={titleHorizontalAlign}\n                    dominantBaseline={titleVerticalAlign}\n                    style={theme.legends.title.text}\n                >\n                    {titleText}\n                </text>\n            )}\n            <rect width={width} height={height} fill={`url(#${id}`} />\n            {computedTicks.map((tick, index) => (\n                <Fragment key={index}>\n                    <line\n                        x1={tick.x1}\n                        y1={tick.y1}\n                        x2={tick.x2}\n                        y2={tick.y2}\n                        style={theme.legends.ticks.line}\n                    />\n                    <text\n                        x={tick.textX}\n                        y={tick.textY}\n                        textAnchor={tick.textHorizontalAlign}\n                        dominantBaseline={tick.textVerticalAlign}\n                        style={theme.legends.ticks.text}\n                    >\n                        {tick.text}\n                    </text>\n                </Fragment>\n            ))}\n        </g>\n    )\n}\n","import { AnchoredContinuousColorsLegendProps } from '../types'\nimport { computePositionFromAnchor } from '../compute'\nimport { continuousColorsLegendDefaults } from '../defaults'\nimport { ContinuousColorsLegendSvg } from './ContinuousColorsLegendSvg'\n\nexport const AnchoredContinuousColorsLegendSvg = ({\n    containerWidth,\n    containerHeight,\n    anchor,\n    translateX = 0,\n    translateY = 0,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    ...legendProps\n}: AnchoredContinuousColorsLegendProps) => {\n    let width: number\n    let height: number\n    if (direction === 'row') {\n        width = length\n        height = thickness\n    } else {\n        width = thickness\n        height = length\n    }\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <g transform={`translate(${x}, ${y})`}>\n            <ContinuousColorsLegendSvg\n                length={length}\n                thickness={thickness}\n                direction={direction}\n                {...legendProps}\n            />\n        </g>\n    )\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { CompleteTheme, degreesToRadians } from '@nivo/core'\nimport {\n    computeDimensions,\n    computePositionFromAnchor,\n    computeItemLayout,\n    computeContinuousColorsLegend,\n} from './compute'\nimport { AnchoredContinuousColorsLegendProps, LegendCanvasProps } from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n\nexport const renderContinuousColorLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        containerWidth,\n        containerHeight,\n        anchor,\n        translateX = 0,\n        translateY = 0,\n        scale,\n        length = continuousColorsLegendDefaults.length,\n        thickness = continuousColorsLegendDefaults.thickness,\n        direction = continuousColorsLegendDefaults.direction,\n        ticks: _ticks,\n        tickPosition = continuousColorsLegendDefaults.tickPosition,\n        tickSize = continuousColorsLegendDefaults.tickSize,\n        tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n        tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n        tickFormat = continuousColorsLegendDefaults.tickFormat,\n        title,\n        titleAlign = continuousColorsLegendDefaults.titleAlign,\n        titleOffset = continuousColorsLegendDefaults.titleOffset,\n        theme,\n    }: AnchoredContinuousColorsLegendProps & {\n        theme: CompleteTheme\n    }\n) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks: _ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const initialStyles = {\n        font: ctx.font,\n        textAlign: ctx.textAlign,\n        textBaseline: ctx.textBaseline,\n    }\n    ctx.save()\n\n    ctx.translate(x, y)\n\n    const gradient = ctx.createLinearGradient(\n        gradientX1 * width,\n        gradientY1 * height,\n        gradientX2 * width,\n        gradientY2 * height\n    )\n    colorStops.forEach(colorStop => {\n        gradient.addColorStop(colorStop.offset, colorStop.stopColor)\n    })\n\n    ctx.fillStyle = gradient\n    ctx.fillRect(0, 0, width, height)\n\n    ctx.font = `${\n        theme.legends.ticks.text.fontWeight ? `${theme.legends.ticks.text.fontWeight} ` : ''\n    }${theme.legends.ticks.text.fontSize}px ${theme.legends.ticks.text.fontFamily}`\n\n    ticks.forEach(tick => {\n        if ((theme.legends.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n            ctx.lineCap = 'square'\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x1, tick.y1)\n            ctx.lineTo(tick.x2, tick.y2)\n            ctx.stroke()\n        }\n\n        if (theme.legends.ticks.text.fill) {\n            ctx.fillStyle = theme.legends.ticks.text.fill\n        }\n        ctx.textAlign = tick.textHorizontalAlign === 'middle' ? 'center' : tick.textHorizontalAlign\n        ctx.textBaseline = tick.textVerticalAlign === 'central' ? 'middle' : tick.textVerticalAlign\n\n        ctx.fillText(tick.text, tick.textX, tick.textY)\n    })\n\n    if (titleText) {\n        ctx.save()\n        ctx.translate(titleX, titleY)\n        ctx.rotate(degreesToRadians(titleRotation))\n\n        ctx.font = `${\n            theme.legends.title.text.fontWeight ? `${theme.legends.title.text.fontWeight} ` : ''\n        }${theme.legends.title.text.fontSize}px ${theme.legends.title.text.fontFamily}`\n        if (theme.legends.title.text.fill) {\n            ctx.fillStyle = theme.legends.title.text.fill\n        }\n        ctx.textAlign = titleHorizontalAlign === 'middle' ? 'center' : titleHorizontalAlign\n        ctx.textBaseline = titleVerticalAlign\n\n        ctx.fillText(titleText, 0, 0)\n\n        ctx.restore()\n    }\n\n    ctx.restore()\n\n    ctx.font = initialStyles.font\n    ctx.textAlign = initialStyles.textAlign\n    ctx.textBaseline = initialStyles.textBaseline\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n\n        if (reverse) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse, separator, valueFormat])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n"],"names":["TooltipWrapper","styled","TooltipKey","TooltipValue","node","style","color","label","id","value","position","groupIndex","row","column","CustomSvgCell","size","x","y","fill","opacity","borderWidth","borderColor","data","onHover","onLeave","onClick","r","cx","cy","strokeWidth","stroke","onMouseEnter","onMouseMove","onMouseLeave","event","CustomHtmlCell","borderRadius","top","left","width","height","background","boxSizing","borderStyle","settingsMapper","cellComponent","values","options","component","tooltip","CustomTooltip","exclude","allFlavors","defaults","WaffleDefaultProps","props","key","group","type","required","help","description","flavors","control","min","max","defaultValue","fillDirection","choices","unit","chartDimensions","themeProperty","map","ordinalColors","colors","emptyColor","emptyOpacity","defsProperties","isInteractive","getLegendsProps","shouldCreate","addLabel","shouldRemove","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","itemTextColor","console","log","JSON","stringify","effects","on","itemBackground","motionProperties","groups","groupProperties","mapping","settings","overrides","Object","keys","forEach","omit","mapAxis","upperFirst","enable","mapFormat","format","enabled","undefined","continuousColorsLegendDefaults","length","thickness","tickPosition","tickSize","tickSpacing","tickOverlap","tickFormat","titleAlign","titleOffset","zeroPadding","right","bottom","computeDimensions","item","_padding","padding","itemCount","Array","isArray","Error","horizontalPadding","verticalPadding","spacing","computePositionFromAnchor","containerWidth","containerHeight","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","symbolSpacing","computeContinuousColorsLegend","scale","ticks","title","domain","reverse","positionScale","scaleLinear","range","thresholds","titleX","titleY","titleRotation","titleVerticalAlign","y1","y2","textY","textVerticalAlign","x1","x2","textX","textHorizontalAlign","colorStops","computeContinuousColorScaleColorStops","formatValue","getValueFormatter","computedTicks","gradientY1","gradientX2","push","text","gradientX1","gradientY2","titleText","titleHorizontalAlign","ContinuousColorsLegendSvg","theme","useTheme","stop","offset","join","_jsxDEV","colorStop","transform","textAnchor","dominantBaseline","legends","tick","index","Fragment","line","AnchoredContinuousColorsLegendSvg","legendProps","symbolByShape","circle","pointerEvents","diamond","d","square","triangle","LegendSvgItem","textColor","symbolShape","symbolBorderWidth","symbolBorderColor","toggleSerie","useState","setStyle","handleMouseEnter","useCallback","filter","reduce","acc","effect","handleMouseLeave","some","handler","SymbolShape","itemOpacity","cursor","e","React","hidden","symbol","userSelect","LegendSvg","xStep","yStep","i","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","ctx","save","translate","font","fontSize","fontFamily","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","renderContinuousColorLegendToCanvas","_ticks","initialStyles","gradient","createLinearGradient","addColorStop","stopColor","fontWeight","t","lineWidth","Number","axis","strokeStyle","lineCap","beginPath","moveTo","lineTo","rotate","degreesToRadians","useQuantizeColorScaleLegendData","overriddenDomain","valueFormat","v","separator","useMemo","items","domainValue","invertExtent","extent","LegendPropShape","PropTypes","isRequired"],"sourceRoot":""}