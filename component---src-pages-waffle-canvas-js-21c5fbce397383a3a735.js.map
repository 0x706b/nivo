{"version":3,"sources":["webpack:///./src/pages/waffle/canvas.js"],"names":["generateData","id","label","value","Math","random","color","initialProperties","pixelRatio","defaultProps","valueFormat","format","enabled","total","rows","columns","fillDirection","padding","margin","top","right","bottom","left","emptyColor","emptyOpacity","colors","scheme","borderWidth","borderColor","from","modifiers","isInteractive","tooltip","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","itemTextColor","symbolSize","onClick","data","alert","JSON","stringify","effects","on","style","itemBackground","WaffleCanvas","name","meta","icon","flavors","currentFlavor","properties","groups","propertiesMapper","mapper","defaultProperties","codePropertiesMapper","cellComponent","undefined","theme","logAction","node","formattedValue","position","type"],"mappings":"6FAAA,qGAOMA,EAAe,iBAAM,CACvB,CACIC,GAAI,MACJC,MAAO,MACPC,MAAuB,GAAhBC,KAAKC,SACZC,MAAO,WAEX,CACIL,GAAI,OACJC,MAAO,OACPC,MAAuB,GAAhBC,KAAKC,SACZC,MAAO,WAEX,CACIL,GAAI,UACJC,MAAO,UACPC,MAAuB,GAAhBC,KAAKC,SACZC,MAAO,WAEX,CACIL,GAAI,UACJC,MAAO,UACPC,MAAuB,GAAhBC,KAAKC,SACZC,MAAO,WAEX,CACIL,GAAI,YACJC,MAAO,YACPC,MAAuB,GAAhBC,KAAKC,SACZC,MAAO,WAEX,CACIL,GAAI,OACJC,MAAO,OACPC,MAAuB,GAAhBC,KAAKC,SACZC,MAAO,WAEX,CACIL,GAAI,QACJC,MAAO,QACPC,MAAuB,GAAhBC,KAAKC,SACZC,MAAO,aAITC,EAAoB,CACtBC,WAAYC,IAAaD,WAEzBE,YAAa,CAAEC,OAAQ,UAAWC,SAAS,GAE3CC,MAAO,IAEPC,KAAM,GACNC,QAAS,GACTC,cAAe,SACfC,QAAS,GAETC,OAAQ,CACJC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,KAGVC,WAAY,UACZC,aAAc,EACdC,OAAQ,CAAEC,OAAQ,cAClBC,YAAa,EACbC,YAAa,CACTC,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU,MAG3BC,eAAe,EACf,0BAA0B,EAC1BC,QAAS,KAETC,QAAS,CACL,CACIC,OAAQ,WACRC,UAAW,SACXC,SAAS,EACTC,YAAa,IACbC,WAAY,EACZC,aAAc,EACdC,UAAW,IACXC,WAAY,GACZC,cAAe,gBACfC,YAAa,EACbC,cAAe,OACfC,WAAY,GACZC,QAAS,SAAAC,GACLC,MAAMC,KAAKC,UAAUH,EAAM,KAAM,UAErCI,QAAS,CACL,CACIC,GAAI,QACJC,MAAO,CACHT,cAAe,OACfU,eAAgB,gBAsDzBC,UA9CM,WACjB,OACI,kBAAC,IAAD,CACIC,KAAK,eACLC,KAAMA,IAAKF,aACXG,KAAK,SACLC,QAASF,IAAKE,QACdC,cAAc,SACdC,WAAYC,IACZC,iBAAkBC,IAClBzD,kBAAmBA,EACnB0D,kBAAmBxD,IACnByD,qBAAsB,SAAAL,GAAU,wBACzBA,EADyB,CAE5BM,cAAeN,EAAWM,cAAgB,gCAA6BC,EACvEpC,QAAS6B,EAAW7B,QAAU,mCAAgCoC,KAElEpE,aAAcA,IAEb,SAAC6D,EAAYd,EAAMsB,EAAOC,GACvB,OACI,kBAAC,IAAD,eACIvB,KAAMA,GACFc,EAFR,CAGIQ,MAAOA,EACPvB,QAAS,SAAAyB,GACL,IAAIrE,EAEAA,OADckE,IAAdG,EAAKxB,KACMwB,EAAKxB,KAAK7C,MAAhB,KAA0BqE,EAAKxB,KAAKyB,eAApC,eAAiED,EAAKE,SAAtE,IAEA,sBAAyBF,EAAKE,SAEvCH,EAAU,CACNI,KAAM,QACNxE,MAAM,UAAWA,EACjBI,MAAOiE,EAAKjE,MACZyC,KAAMwB","file":"component---src-pages-waffle-canvas-js-21c5fbce397383a3a735.js","sourcesContent":["import React from 'react'\nimport { ResponsiveWaffleCanvas, defaultProps } from '@nivo/waffle'\nimport ComponentTemplate from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/waffle/meta.yml'\nimport { groups } from '../../data/components/waffle/props'\nimport mapper from '../../data/components/waffle/mapper'\n\nconst generateData = () => [\n    {\n        id: 'car',\n        label: 'car',\n        value: Math.random() * 20,\n        color: '#eaafaf',\n    },\n    {\n        id: 'walk',\n        label: 'walk',\n        value: Math.random() * 20,\n        color: '#a2738c',\n    },\n    {\n        id: 'scooter',\n        label: 'scooter',\n        value: Math.random() * 20,\n        color: '#645c84',\n    },\n    {\n        id: 'bicycle',\n        label: 'bicycle',\n        value: Math.random() * 20,\n        color: '#427996',\n    },\n    {\n        id: 'e-bicycle',\n        label: 'e-bicycle',\n        value: Math.random() * 20,\n        color: '#42291c',\n    },\n    {\n        id: 'moto',\n        label: 'moto',\n        value: Math.random() * 20,\n        color: '#3f5468',\n    },\n    {\n        id: 'other',\n        label: 'other',\n        value: Math.random() * 20,\n        color: '#b8e4c9',\n    },\n]\n\nconst initialProperties = {\n    pixelRatio: defaultProps.pixelRatio,\n\n    valueFormat: { format: ' >-,.3f', enabled: true },\n\n    total: 140,\n\n    rows: 40,\n    columns: 40,\n    fillDirection: 'bottom',\n    padding: 0.5,\n\n    margin: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 120,\n    },\n\n    emptyColor: '#cccccc',\n    emptyOpacity: 1,\n    colors: { scheme: 'category10' },\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.3]],\n    },\n\n    isInteractive: true,\n    'custom tooltip example': false,\n    tooltip: null,\n\n    legends: [\n        {\n            anchor: 'top-left',\n            direction: 'column',\n            justify: false,\n            translateX: -100,\n            translateY: 0,\n            itemsSpacing: 4,\n            itemWidth: 100,\n            itemHeight: 20,\n            itemDirection: 'left-to-right',\n            itemOpacity: 1,\n            itemTextColor: '#777',\n            symbolSize: 20,\n            onClick: data => {\n                alert(JSON.stringify(data, null, '    '))\n            },\n            effects: [\n                {\n                    on: 'hover',\n                    style: {\n                        itemTextColor: '#000',\n                        itemBackground: '#f7fafb',\n                    },\n                },\n            ],\n        },\n    ],\n}\n\nconst WaffleCanvas = () => {\n    return (\n        <ComponentTemplate\n            name=\"WaffleCanvas\"\n            meta={meta.WaffleCanvas}\n            icon=\"waffle\"\n            flavors={meta.flavors}\n            currentFlavor=\"canvas\"\n            properties={groups}\n            propertiesMapper={mapper}\n            initialProperties={initialProperties}\n            defaultProperties={defaultProps}\n            codePropertiesMapper={properties => ({\n                ...properties,\n                cellComponent: properties.cellComponent ? 'CustomCell(props) => (…)' : undefined,\n                tooltip: properties.tooltip ? 'CustomTooltip(props) => (…)' : undefined,\n            })}\n            generateData={generateData}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveWaffleCanvas\n                        data={data}\n                        {...properties}\n                        theme={theme}\n                        onClick={node => {\n                            let label\n                            if (node.data !== undefined) {\n                                label = `${node.data.label}: ${node.data.formattedValue} (position: ${node.position})`\n                            } else {\n                                label = `empty at position: ${node.position}`\n                            }\n                            logAction({\n                                type: 'click',\n                                label: `[cell] ${label}`,\n                                color: node.color,\n                                data: node,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default WaffleCanvas\n"],"sourceRoot":""}