{"version":3,"file":"component---src-pages-bar-api-js-713256138834ca5fdcd6.js","mappings":"kHAAe,SAAS,EAACA,GACvB,OAAO,WACL,OAAOA,G,0HCSLC,EAAsB,CACxB,CACIC,IAAK,OACLC,KAAM,cACNC,KAAM,WACNC,UAAU,EACVC,MAAO,QAEX,CACIJ,IAAK,UACLC,KAAM,gCACNI,YAAY,4OAOZH,KAAM,8CACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,QACdH,MAAO,QAEX,CACIJ,IAAK,OACLC,KAAM,uCACNC,KAAM,WACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,KACdH,MAAO,QAEX,CACIJ,IAAK,YACLC,KAAK,qBACLC,KAAM,oBACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,UACdC,YAAa,QACbJ,MAAO,OACPK,eAAgB,CACZC,QAAS,CACL,CAAEC,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,UAAWC,MAAO,cAIvC,CACIZ,IAAK,SACLC,KAAK,uBACLC,KAAM,wBACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,OACdC,YAAa,QACbJ,MAAO,OACPK,eAAgB,CACZC,QAAS,CACL,CAAEC,MAAO,aAAcC,MAAO,cAC9B,CAAED,MAAO,WAAYC,MAAO,eAIxC,CACIZ,IAAK,aACLE,KAAM,SACNE,MAAO,OACPH,KAAK,6BACLK,aAAcC,EAAAA,GAAAA,WACdC,YAAa,SACbC,eAAgB,CACZV,MAAO,CACH,CACIC,IAAK,OACLC,KAAK,cACLC,KAAM,SACNM,YAAa,UACbC,eAAgB,CACZI,UAAU,EACVH,QAAS,CAAC,SAAU,UAAUI,KAAI,SAAAC,GAAC,MAAK,CACpCJ,MAAOI,EACPH,MAAOG,WAO/B,CACIf,IAAK,aACLE,KAAM,SACNE,MAAO,OACPH,KAAK,6BACLK,aAAcC,EAAAA,GAAAA,WACdC,YAAa,SACbC,eAAgB,CACZV,MAAO,CACH,CACIC,IAAK,OACLC,KAAK,cACLC,KAAM,SACNM,YAAa,UACbC,eAAgB,CACZI,UAAU,EACVH,QAAS,CAAC,QAAQI,KAAI,SAAAC,GAAC,MAAK,CACxBJ,MAAOI,EACPH,MAAOG,QAInB,CACIf,IAAK,QACLC,KAAM,+CACNC,KAAM,UACNM,YAAa,aAK7B,CACIR,IAAK,UACLC,KAAM,kHACNC,KAAM,UACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,QACdC,YAAa,SACbJ,MAAO,QAEX,CACIJ,IAAK,WACLC,KAAM,iBACNI,YAAY,4GAIZF,UAAU,EACVG,aAAcC,EAAAA,GAAAA,SACdL,KAAK,kBACLM,YAAa,kBACbJ,MAAO,OACPK,eAAgB,CACZO,cAAe,OACfV,cAAe,IACfW,KAAM,IACNC,IAAK,IAGb,CACIlB,IAAK,WACLC,KAAM,iBACNI,YAAY,4GAIZF,UAAU,EACVG,aAAcC,EAAAA,GAAAA,SACdL,KAAK,kBACLM,YAAa,kBACbJ,MAAO,OACPK,eAAgB,CACZO,cAAe,OACfV,aAAc,IACdW,IAAK,EACLC,IAAK,MAGb,CACIlB,IAAK,cACLI,MAAO,OACPH,KAAM,iCACNI,YAAY,0VAOZF,UAAU,EACVD,KAAM,8CACNM,YAAa,eAEjB,CACIR,IAAK,UACLC,KAAM,oCACNC,KAAM,SACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,QACdC,YAAa,QACbJ,MAAO,OACPK,eAAgB,CACZQ,IAAK,EACLC,IAAK,GACLC,KAAM,MAGd,CACInB,IAAK,eACLC,KAAM,wCACNC,KAAM,SACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,aACdC,YAAa,QACbJ,MAAO,OACPK,eAAgB,CACZW,KAAM,KACNH,IAAK,EACLC,IAAK,KAGb,CACIlB,IAAK,QACLqB,wBAAyB,CAAC,OAC1BpB,KAAM,eACNI,YAAY,yLAKZH,KAAM,SACNC,UAAU,EACVK,YAAa,QACbJ,MAAO,OACPK,eAAgB,CACZW,KAAM,KACNH,IAAK,IACLC,IAAK,IACLC,KAAM,IAGd,CACInB,IAAK,SACLqB,wBAAyB,CAAC,OAC1BpB,KAAM,gBACNI,YAAY,yLAKZH,KAAM,SACNC,UAAU,EACVK,YAAa,QACbJ,MAAO,OACPK,eAAgB,CACZW,KAAM,KACNH,IAAK,IACLC,IAAK,IACLC,KAAM,IAGd,CACInB,IAAK,aACLsB,QAAS,CAAC,UACVrB,KAAK,gDACLE,UAAU,EACVG,aAAc,oBACdJ,KAAK,SACLM,YAAa,QACbJ,MAAO,OACPK,eAAgB,CACZQ,IAAK,EACLC,IAAK,IAGb,CACIlB,IAAK,SACLC,KAAM,gBACNC,KAAM,SACNC,UAAU,EACVK,YAAa,SACbJ,MAAO,SAEXmB,EAAAA,EAAAA,IAAc,CAAC,MAAO,SAAU,QAChC,CACIvB,IAAK,SACLC,KAAM,uBACNC,KAAM,+BACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,OACdC,YAAa,gBACbJ,MAAO,SAEX,CACIJ,IAAK,UACLE,KAAK,sBACLD,KAAM,yCACNI,YAAY,mEAGZF,UAAU,EACVG,aAAcC,EAAAA,GAAAA,QACdC,YAAa,UACbJ,MAAO,QACPK,eAAgB,CACZC,QAAS,CACL,CACIC,MAAO,KACPC,MAAO,MAEX,CACID,MAAO,aACPC,MAAO,iBAKvB,CACIZ,IAAK,eACLC,KAAM,2BACNC,KAAM,SACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,aACdC,YAAa,QACbJ,MAAO,QACPK,eAAgB,CACZW,KAAM,KACNH,IAAK,EACLC,IAAK,KAGb,CACIlB,IAAK,cACLC,KAAM,uBACNC,KAAM,SACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,YACdC,YAAa,YACbJ,MAAO,SAEX,CACIJ,IAAK,cACLC,KAAM,kCACNI,YAAY,wHAIZH,KAAM,6BACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,YACdC,YAAa,iBACbJ,MAAO,UAjVa,gBAmVrBoB,EAAAA,EAAAA,IAAe,QAAS,CAAC,SAnVJ,CAoVxB,CACIxB,IAAK,SACLsB,QAAS,CAAC,MAAO,UACjBrB,KAAM,+BACNI,YAAY,idAWZH,KAAM,2BACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,OACdH,MAAO,iBAEX,CACIJ,IAAK,cACLC,KAAM,yBACNC,KAAM,UACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,YACdC,YAAa,SACbJ,MAAO,UAEX,CACIJ,IAAK,QACLI,MAAO,SACPH,KAAM,sCACNI,YAAY,qyBAoBZH,KAAM,oBACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,OAElB,CACIP,IAAK,iBACLC,KAAM,sEACNC,KAAM,SACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,eACdC,YAAa,QACbJ,MAAO,SACPK,eAAgB,CACZW,KAAM,KACNH,IAAK,EACLC,IAAK,KAGb,CACIlB,IAAK,kBACLC,KAAM,uEACNC,KAAM,SACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,gBACdC,YAAa,QACbJ,MAAO,SACPK,eAAgB,CACZW,KAAM,KACNH,IAAK,EACLC,IAAK,KAGb,CACIlB,IAAK,iBACLC,KAAM,2CACNC,KAAM,6BACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,eACdC,YAAa,iBACbJ,MAAO,UAEX,CACIJ,IAAK,cACLI,MAAO,cACPH,KAAM,yBACNC,KAAM,UACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,YACdC,YAAa,UAEjB,CACIR,IAAK,cACLI,MAAO,cACPH,KAAM,iDACNC,KAAM,yBACNC,UAAU,GAEd,CACIH,IAAK,cACLI,MAAO,cACPH,KAAM,yBACNC,KAAM,UACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,YACdC,YAAa,UAEjB,CACIR,IAAK,cACLI,MAAO,cACPH,KAAM,mDACNC,KAAM,yBACNC,UAAU,KAhdU,QAkdrBsB,EAAAA,EAAAA,OAldqB,CAmdxB,CACIzB,IAAK,gBACLsB,QAAS,CAAC,MAAO,UACjBrB,KAAM,gCACNC,KAAM,UACNC,UAAU,EACVG,aAAcC,EAAAA,GAAAA,cACdC,YAAa,SACbJ,MAAO,iBAEX,CACIJ,IAAK,UACLsB,QAAS,CAAC,MAAO,UACjBlB,MAAO,gBACPF,KAAM,WACNC,UAAU,EACVF,KAAM,2BACNI,YAAY,izBAuBhB,CACIL,IAAK,yBACLsB,QAAS,CAAC,MAAO,UACjBlB,MAAO,gBACPH,KAAM,qCACNC,KAAM,UACNM,YAAa,UAEjB,CACIR,IAAK,UACLsB,QAAS,CAAC,MAAO,UACjBlB,MAAO,gBACPF,KAAM,WACNC,UAAU,EACVF,KAAM,kBACNI,YAAY,ulBAkBhB,CACIL,IAAK,UACLsB,QAAS,CAAC,MAAO,UACjBpB,KAAM,WACND,KAAK,4BACLG,MAAO,UACPI,YAAa,QACbC,eAAgB,CACZV,OAAO2B,EAAAA,EAAAA,IAAgB,CAAC,QACxBC,cAAc,EACdC,SAAU,aACVC,cAAc,EACdC,aAAc,SAACC,EAAOC,GAAR,gBACAD,EADA,MACWC,EAAOC,OADlB,KAC6BD,EAAOE,WAClD3B,gBAAiB,CACb4B,SAAU,OACVF,OAAQ,WACRC,UAAW,SACXE,SAAS,EACTC,WAAY,EACZC,WAAY,EACZC,UAAW,IACXC,WAAY,GACZC,aAAc,EACdC,WAAY,GACZC,cAAe,gBACfC,QAAS,SAAAC,GACLC,MAAMC,KAAKC,UAAUH,EAAM,KAAM,eAvjBzB,QA4jBrBI,EAAAA,EAAAA,IAAiB,CAAC,OAAQ1C,EAAAA,GAAiB,iBA5jBtB,CA6jBxB,CACIP,IAAK,cACLsB,QAAS,CAAC,OACVlB,MAAO,gBACPH,KAAM,kFACNI,YAAY,qTAOZH,KAAM,UACNM,YAAa,UAEjB,CACIR,IAAK,YACLsB,QAAS,CAAC,OACVlB,MAAO,gBACPH,KAAM,yEACNC,KAAM,UAEV,CACIF,IAAK,iBACLsB,QAAS,CAAC,OACVlB,MAAO,gBACPH,KAAM,mFACNC,KAAM,UAEV,CACIF,IAAK,kBACLsB,QAAS,CAAC,OACVlB,MAAO,gBACPH,KAAM,qFACNC,KAAM,UAEV,CACIF,IAAK,eACLsB,QAAS,CAAC,OACVlB,MAAO,gBACPH,KAAM,0EACNC,KAAM,oBAEV,CACIF,IAAK,oBACLsB,QAAS,CAAC,OACVlB,MAAO,gBACPH,KAAM,oFACNC,KAAM,oBAEV,CACIF,IAAK,qBACLsB,QAAS,CAAC,OACVlB,MAAO,gBACPH,KAAM,sFACNC,KAAM,sBAIDgD,GAASC,EAAAA,EAAAA,IAAgBpD,I,4FCjoBhCqD,EAAS,CACX,UACA,SACA,WACA,QACA,QACA,QACA,OACA,QACA,QACA,QACA,OACA,QACA,WACA,WACA,QACA,YACA,WACA,QACA,aACA,WACA,OACA,UACA,QACA,QACA,YACA,UACA,QACA,WACA,MACA,SACA,QACA,UACA,SACA,YACA,aACA,aACA,YACA,gBACA,QACA,UACA,WACA,cACA,WACA,QACA,UACA,YACA,WA/CW,gBAiDX,cACA,UACA,gBACA,WACA,YACA,SACA,UACA,YAGSC,EAAuB,iBAAO,CACvCR,MAAMS,EAAAA,EAAAA,IAAsBF,EAAOG,MAAM,EAAG,GAAI,CAAEC,KAAM,EAAGtC,IAAK,MAChEuC,KAAML,EAAOG,MAAM,EAAG,KAGbG,EAAuB,iBAAO,CACvCb,MAAMS,EAAAA,EAAAA,IAAsBF,EAAQ,CAAEI,KAAM,GAAItC,IAAK,MACrDuC,KAAML,K,kFChEJO,EAAiBC,EAAAA,QAAAA,IAAAA,WAAH,iEAAGA,CAAH,yIASdC,EAAaD,EAAAA,QAAAA,KAAAA,WAAH,6DAAGA,CAAH,sBAGVE,EAAeF,EAAAA,QAAAA,KAAAA,WAAH,+DAAGA,CAAH,MAEZG,EAAgB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAUC,GAAU,YACzC,OACI,gBAACN,EAAD,CAAgBO,MAAO,CAAEF,MAAOA,IAC5B,gBAACH,EAAD,WACA,gBAACC,EAAD,KAAeG,EAAIE,IACnB,gBAACN,EAAD,cACA,gBAACC,EAAD,KAAeG,EAAIrD,OACnB,gBAACiD,EAAD,uBACA,gBAACC,EAAD,KAAeG,EAAIG,gBACnB,gBAACP,EAAD,cACA,gBAACC,EAAD,KAAeG,EAAIlC,OACnB,gBAAC8B,EAAD,mBACA,gBAACC,EAAD,KAAeG,EAAII,YACnB,gBAACR,EAAD,cACA,gBAACC,EAAD,KAAeE,KAK3B,KAAeM,EAAAA,EAAAA,IACX,CACIC,YAAaC,EAAAA,GACbC,SAASC,EAAAA,EAAAA,IAAQ,OACjBC,WAAWD,EAAAA,EAAAA,IAAQ,SACnBE,YAAYF,EAAAA,EAAAA,IAAQ,UACpBG,UAAUH,EAAAA,EAAAA,IAAQ,QAClBI,QAAS,SAAClE,EAAOmE,GACb,GAAKA,EAAO,0BAEZ,OAAOhB,IAGf,CACIiB,QAAS,CACL,iBACA,mBACA,oBACA,kBACA,6B,2GChDZ,GAAuB3B,E,SAAAA,KAAfR,EAAR,EAAQA,KAAMY,EAAd,EAAcA,KAoGd,UAlGe,WACX,OACI,gCACI,gBAAC,IAAD,CAAKwB,MAAM,eAAeC,SAAQ,kBAAMC,EAAAA,GAAAA,MAAN,CAAqB,eACvD,gBAAC,IAAD,CACIC,cAAc,MACdC,WAAW,MACXC,QAAQ,cACRhE,QAAS6D,EAAAA,GACTI,aAAa,OACbC,cAAetC,EAAAA,EACfuC,YAAaC,EAAAA,EACbC,aAAc,CACVC,MAAO,KACPC,OAAQ,IACRC,OAAQ,CACJC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,IAEVrD,KAAME,KAAKC,UAAUH,EAAM,KAAM,MACjCY,KAAMA,EACN0C,QAAS,UAETC,OAAQ,CAAEC,OAAQ,QAClBC,QAAS,KACTC,aAAc,EACdC,YAAa,EACbC,YAAa,CACTC,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU,OAG3BC,QAAS,GACTC,aAAc,EACdC,SAAU,OACVC,SAAU,OAEVC,UAAW,UACXC,OAAQ,WACRC,SAAS,EAETC,WAAY,CAAEjH,KAAM,UACpBkH,WAAY,CAAElH,KAAM,OAAQmH,OAAO,GACnC9C,YAAa,CAAE+C,OAAQ,GAAIC,SAAS,GAEpC9C,QAAS,CACL+C,QAAQ,EACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACd3F,OAAQ,GACR4F,aAAc,IAElBjD,UAAW,CACP6C,QAAQ,EACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACd3F,OAAQ,GACR4F,aAAc,GAElBhD,WAAY,CACR4C,QAAQ,EACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACd3F,OAAQ,UACR6F,eAAgB,SAChBD,aAAc,IAElB/C,SAAU,CACN2C,QAAQ,EACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACd3F,OAAQ,OACR6F,eAAgB,SAChBD,cAAe,IAGnBE,aAAa,EACbC,aAAa,EAEbC,aAAa,EACbC,eAAgB,GAChBC,gBAAiB,GACjBC,eAAgB,CACZzB,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU","sources":["webpack://nivo-website/../node_modules/d3-shape/src/constant.js","webpack://nivo-website/./src/data/components/bar/props.ts","webpack://nivo-website/./src/data/components/bar/generator.js","webpack://nivo-website/./src/data/components/bar/mapper.js","webpack://nivo-website/./src/pages/bar/api.js"],"sourcesContent":["export default function (x) {\n  return function constant() {\n    return x;\n  };\n}","import { svgDefaultProps } from '@nivo/bar'\nimport {\n    themeProperty,\n    axesProperties,\n    motionProperties,\n    defsProperties,\n    getLegendsProps,\n    groupProperties,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        help: 'Chart data.',\n        type: 'object[]',\n        required: true,\n        group: 'Base',\n    },\n    {\n        key: 'indexBy',\n        help: 'Key to use to index the data.',\n        description: `\n            Key to use to index the data,\n            this key must exist in each data item.\n\n            You can also provide a function which will\n            receive the data item and must return the desired index.\n        `,\n        type: 'string | (datum: RawDatum): string | number',\n        required: false,\n        defaultValue: svgDefaultProps.indexBy,\n        group: 'Base',\n    },\n    {\n        key: 'keys',\n        help: 'Keys to use to determine each serie.',\n        type: 'string[]',\n        required: false,\n        defaultValue: svgDefaultProps.keys,\n        group: 'Base',\n    },\n    {\n        key: 'groupMode',\n        help: `How to group bars.`,\n        type: 'grouped | stacked',\n        required: false,\n        defaultValue: svgDefaultProps.groupMode,\n        controlType: 'radio',\n        group: 'Base',\n        controlOptions: {\n            choices: [\n                { label: 'stacked', value: 'stacked' },\n                { label: 'grouped', value: 'grouped' },\n            ],\n        },\n    },\n    {\n        key: 'layout',\n        help: `How to display bars.`,\n        type: 'horizontal | vertical',\n        required: false,\n        defaultValue: svgDefaultProps.layout,\n        controlType: 'radio',\n        group: 'Base',\n        controlOptions: {\n            choices: [\n                { label: 'horizontal', value: 'horizontal' },\n                { label: 'vertical', value: 'vertical' },\n            ],\n        },\n    },\n    {\n        key: 'valueScale',\n        type: 'object',\n        group: 'Base',\n        help: `value scale configuration.`,\n        defaultValue: svgDefaultProps.valueScale,\n        controlType: 'object',\n        controlOptions: {\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type.`,\n                    type: 'string',\n                    controlType: 'choices',\n                    controlOptions: {\n                        disabled: true,\n                        choices: ['linear', 'symlog'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'indexScale',\n        type: 'object',\n        group: 'Base',\n        help: `index scale configuration.`,\n        defaultValue: svgDefaultProps.indexScale,\n        controlType: 'object',\n        controlOptions: {\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type.`,\n                    type: 'string',\n                    controlType: 'choices',\n                    controlOptions: {\n                        disabled: true,\n                        choices: ['band'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n                {\n                    key: 'round',\n                    help: 'Toggle index scale (for bar width) rounding.',\n                    type: 'boolean',\n                    controlType: 'switch',\n                },\n            ],\n        },\n    },\n    {\n        key: 'reverse',\n        help: 'Reverse bars, starts on top instead of bottom for vertical layout and right instead of left for horizontal one.',\n        type: 'boolean',\n        required: false,\n        defaultValue: svgDefaultProps.reverse,\n        controlType: 'switch',\n        group: 'Base',\n    },\n    {\n        key: 'minValue',\n        help: 'Minimum value.',\n        description: `\n            Minimum value, if 'auto',\n            will use min value from the provided data.\n        `,\n        required: false,\n        defaultValue: svgDefaultProps.minValue,\n        type: `number | 'auto'`,\n        controlType: 'switchableRange',\n        group: 'Base',\n        controlOptions: {\n            disabledValue: 'auto',\n            defaultValue: -1000,\n            min: -1000,\n            max: 0,\n        },\n    },\n    {\n        key: 'maxValue',\n        help: 'Maximum value.',\n        description: `\n            Maximum value, if 'auto',\n            will use max value from the provided data.\n        `,\n        required: false,\n        defaultValue: svgDefaultProps.maxValue,\n        type: `number | 'auto'`,\n        controlType: 'switchableRange',\n        group: 'Base',\n        controlOptions: {\n            disabledValue: 'auto',\n            defaultValue: 1000,\n            min: 0,\n            max: 1000,\n        },\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'string | (value: number) => string | number',\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'padding',\n        help: 'Padding between each bar (ratio).',\n        type: 'number',\n        required: false,\n        defaultValue: svgDefaultProps.padding,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 0.9,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'innerPadding',\n        help: 'Padding between grouped/stacked bars.',\n        type: 'number',\n        required: false,\n        defaultValue: svgDefaultProps.innerPadding,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 10,\n        },\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            not required if using \\`ResponsiveBar\\`.\n            Also note that width exclude left/right axes,\n            please add margin to make sure they're visible.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            not required if using \\`ResponsiveBar\\`.\n            Also note that width exclude left/right axes,\n            please add margin to make sure they're visible.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        required: false,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    themeProperty(['svg', 'canvas', 'api']),\n    {\n        key: 'colors',\n        help: 'Defines color range.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: svgDefaultProps.colors,\n        controlType: 'ordinalColors',\n        group: 'Style',\n    },\n    {\n        key: 'colorBy',\n        type: `'id' | 'indexValue'`,\n        help: 'Property used to determine node color.',\n        description: `\n            Property to use to determine node color.\n        `,\n        required: false,\n        defaultValue: svgDefaultProps.colorBy,\n        controlType: 'choices',\n        group: 'Style',\n        controlOptions: {\n            choices: [\n                {\n                    label: 'id',\n                    value: 'id',\n                },\n                {\n                    label: 'indexValue',\n                    value: 'indexValue',\n                },\n            ],\n        },\n    },\n    {\n        key: 'borderRadius',\n        help: 'Rectangle border radius.',\n        type: 'number',\n        required: false,\n        defaultValue: svgDefaultProps.borderRadius,\n        controlType: 'range',\n        group: 'Style',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 36,\n        },\n    },\n    {\n        key: 'borderWidth',\n        help: 'Width of bar border.',\n        type: 'number',\n        required: false,\n        defaultValue: svgDefaultProps.borderWidth,\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute border color.',\n        description: `\n            how to compute border color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: svgDefaultProps.borderColor,\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'layers',\n        flavors: ['svg', 'canvas'],\n        help: 'Defines the order of layers.',\n        description: `\n            Defines the order of layers, available layers are:\n            \\`grid\\`, \\`axes\\`, \\`bars\\`, \\`markers\\`, \\`legends\\`,\n            \\`annotations\\`. The \\`markers\\` layer is not available\n            in the canvas flavor.\n\n            You can also use this to insert extra layers to the chart,\n            this extra layer must be a function which will receive\n            the chart computed data and must return a valid SVG\n            element.\n        `,\n        type: 'Array<string | Function>',\n        required: false,\n        defaultValue: svgDefaultProps.layers,\n        group: 'Customization',\n    },\n    {\n        key: 'enableLabel',\n        help: 'Enable/disable labels.',\n        type: 'boolean',\n        required: false,\n        defaultValue: svgDefaultProps.enableLabel,\n        controlType: 'switch',\n        group: 'Labels',\n    },\n    {\n        key: 'label',\n        group: 'Labels',\n        help: 'Define how bar labels are computed.',\n        description: `\n            Define how bar labels are computed.\n\n            By default it will use the bar's value.\n            It accepts a string which will be used to access\n            a specific bar data property, such as\n            \\`'value'\\` or \\`'id'\\`.\n\n            You can also use a funtion if you want to\n            add more logic, this function will receive\n            the current bar's data and must return\n            the computed label which, depending on the context,\n            should return a string or an svg element (Bar) or\n            a string (BarCanvas). For example let's say you want\n            to use a label with both the id and the value,\n            you can achieve this with:\n            \\`\\`\\`\n            label={d => \\`\\${d.id}: \\${d.value}\\`}\n            \\`\\`\\`\n        `,\n        type: 'string | Function',\n        required: false,\n        defaultValue: svgDefaultProps.label,\n    },\n    {\n        key: 'labelSkipWidth',\n        help: 'Skip label if bar width is lower than provided value, ignored if 0.',\n        type: 'number',\n        required: false,\n        defaultValue: svgDefaultProps.labelSkipWidth,\n        controlType: 'range',\n        group: 'Labels',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 36,\n        },\n    },\n    {\n        key: 'labelSkipHeight',\n        help: 'Skip label if bar height is lower than provided value, ignored if 0.',\n        type: 'number',\n        required: false,\n        defaultValue: svgDefaultProps.labelSkipHeight,\n        controlType: 'range',\n        group: 'Labels',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 36,\n        },\n    },\n    {\n        key: 'labelTextColor',\n        help: 'Defines how to compute label text color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: svgDefaultProps.labelTextColor,\n        controlType: 'inheritedColor',\n        group: 'Labels',\n    },\n    {\n        key: 'enableGridX',\n        group: 'Grid & Axes',\n        help: 'Enable/disable x grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: svgDefaultProps.enableGridX,\n        controlType: 'switch',\n    },\n    {\n        key: 'gridXValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for vertical grid lines.',\n        type: 'Array<number | string>',\n        required: false,\n    },\n    {\n        key: 'enableGridY',\n        group: 'Grid & Axes',\n        help: 'Enable/disable y grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: svgDefaultProps.enableGridY,\n        controlType: 'switch',\n    },\n    {\n        key: 'gridYValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for horizontal grid lines.',\n        type: 'Array<number | string>',\n        required: false,\n    },\n    ...axesProperties(),\n    {\n        key: 'isInteractive',\n        flavors: ['svg', 'canvas'],\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: svgDefaultProps.isInteractive,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'tooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Tooltip custom component',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will receive\n            the following data:\n            \\`\\`\\`\n            {\n                bar: {\n                    id:             string | number,\n                    value:          number,\n                    formattedValue: string,\n                    index:          number,\n                    indexValue:     string | number,\n                    // datum associated to the current index (raw data)\n                    data:           object\n                },\n                color: string,\n                label: string\n            }\n            \\`\\`\\`\n            You can also customize the style of the tooltip\n            using the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'Showcase custom tooltip component.',\n        type: 'boolean',\n        controlType: 'switch',\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'onClick handler',\n        description: `\n            onClick handler, will receive node data as first argument\n            & event as second one. The node data has the following shape:\n\n            \\`\\`\\`\n            {\n                id:             string | number,\n                value:          number,\n                formattedValue: string,\n                index:          number,\n                indexValue:     string | number,\n                color:          string,\n                // datum associated to the current index (raw data)\n                data:           object\n            }\n            \\`\\`\\`\n        `,\n    },\n    {\n        key: 'legends',\n        flavors: ['svg', 'canvas'],\n        type: 'object[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            svgDefaultProps: {\n                dataFrom: 'keys',\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n    ...motionProperties(['svg'], svgDefaultProps, 'react-spring'),\n    {\n        key: 'isFocusable',\n        flavors: ['svg'],\n        group: 'Accessibility',\n        help: 'Make the root SVG element and each bar item focusable, for keyboard navigation.',\n        description: `\n            If enabled, focusing will also reveal the tooltip if \\`isInteractive\\` is \\`true\\`,\n            when a bar gains focus and hide it on blur.\n            \n            Also note that if this option is enabled, focusing a bar will reposition the tooltip\n            at a fixed location.\n        `,\n        type: 'boolean',\n        controlType: 'switch',\n    },\n    {\n        key: 'ariaLabel',\n        flavors: ['svg'],\n        group: 'Accessibility',\n        help: 'Main element [aria-label](https://www.w3.org/TR/wai-aria/#aria-label).',\n        type: 'string',\n    },\n    {\n        key: 'ariaLabelledBy',\n        flavors: ['svg'],\n        group: 'Accessibility',\n        help: 'Main element [aria-labelledby](https://www.w3.org/TR/wai-aria/#aria-labelledby).',\n        type: 'string',\n    },\n    {\n        key: 'ariaDescribedBy',\n        flavors: ['svg'],\n        group: 'Accessibility',\n        help: 'Main element [aria-describedby](https://www.w3.org/TR/wai-aria/#aria-describedby).',\n        type: 'string',\n    },\n    {\n        key: 'barAriaLabel',\n        flavors: ['svg'],\n        group: 'Accessibility',\n        help: '[aria-label](https://www.w3.org/TR/wai-aria/#aria-label) for bar items.',\n        type: '(data) => string',\n    },\n    {\n        key: 'barAriaLabelledBy',\n        flavors: ['svg'],\n        group: 'Accessibility',\n        help: '[aria-labelledby](https://www.w3.org/TR/wai-aria/#aria-labelledby) for bar items.',\n        type: '(data) => string',\n    },\n    {\n        key: 'barAriaDescribedBy',\n        flavors: ['svg'],\n        group: 'Accessibility',\n        help: '[aria-describedby](https://www.w3.org/TR/wai-aria/#aria-describedby) for bar items.',\n        type: '(data) => string',\n    },\n]\n\nexport const groups = groupProperties(props)\n","import { generateCountriesData } from '@nivo/generators'\n\nconst dishes = [\n    'hot dog',\n    'burger',\n    'sandwich',\n    'kebab',\n    'fries',\n    'donut',\n    'junk',\n    'sushi',\n    'ramen',\n    'curry',\n    'udon',\n    'bagel',\n    'yakitori',\n    'takoyaki',\n    'tacos',\n    'miso soup',\n    'tortilla',\n    'tapas',\n    'chipirones',\n    'gazpacho',\n    'soba',\n    'bavette',\n    'steak',\n    'pizza',\n    'spaghetti',\n    'ravioli',\n    'salad',\n    'pad thai',\n    'bun',\n    'waffle',\n    'crepe',\n    'churros',\n    'paella',\n    'empanadas',\n    'bruschetta',\n    'onion soup',\n    'cassoulet',\n    'bouillabaisse',\n    'unagi',\n    'tempura',\n    'tonkatsu',\n    'shabu-shabu',\n    'twinkies',\n    'jerky',\n    'fajitas',\n    'jambalaya',\n    'meatloaf',\n    `mac n' cheese`,\n    'baked beans',\n    'popcorn',\n    'buffalo wings',\n    'BBQ ribs',\n    'apple pie',\n    'nachos',\n    'risotto',\n    'tiramisu',\n]\n\nexport const generateLightDataSet = () => ({\n    data: generateCountriesData(dishes.slice(0, 6), { size: 7, max: 200 }),\n    keys: dishes.slice(0, 6),\n})\n\nexport const generateHeavyDataSet = () => ({\n    data: generateCountriesData(dishes, { size: 21, max: 200 }),\n    keys: dishes,\n})\n","import React from 'react'\nimport styled from 'styled-components'\nimport { settingsMapper, mapAxis, mapFormat } from '../../../lib/settings'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n    background: #333;\n    padding: 12px 16px;\n    font-size: 12px;\n    border-radius: 2px;\n`\nconst TooltipKey = styled.span`\n    font-weight: 600;\n`\nconst TooltipValue = styled.span``\n\nconst CustomTooltip = ({ color, ...bar }) => {\n    return (\n        <TooltipWrapper style={{ color: color }}>\n            <TooltipKey>id</TooltipKey>\n            <TooltipValue>{bar.id}</TooltipValue>\n            <TooltipKey>value</TooltipKey>\n            <TooltipValue>{bar.value}</TooltipValue>\n            <TooltipKey>formattedValue</TooltipKey>\n            <TooltipValue>{bar.formattedValue}</TooltipValue>\n            <TooltipKey>index</TooltipKey>\n            <TooltipValue>{bar.index}</TooltipValue>\n            <TooltipKey>indexValue</TooltipKey>\n            <TooltipValue>{bar.indexValue}</TooltipValue>\n            <TooltipKey>color</TooltipKey>\n            <TooltipValue>{color}</TooltipValue>\n        </TooltipWrapper>\n    )\n}\n\nexport default settingsMapper(\n    {\n        valueFormat: mapFormat,\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return undefined\n\n            return CustomTooltip\n        },\n    },\n    {\n        exclude: [\n            'enable axisTop',\n            'enable axisRight',\n            'enable axisBottom',\n            'enable axisLeft',\n            'custom tooltip example',\n        ],\n    }\n)\n","import React from 'react'\nimport { Seo } from '../../components/Seo'\nimport ApiClient from '../../components/components/api-client/ApiClient'\nimport { groups } from '../../data/components/bar/props'\nimport meta from '../../data/components/bar/meta.yml'\nimport mapper from '../../data/components/bar/mapper'\nimport { generateLightDataSet } from '../../data/components/bar/generator'\n\nconst { data, keys } = generateLightDataSet()\n\nconst BarApi = () => {\n    return (\n        <>\n            <Seo title=\"Bar HTTP API\" keywords={[...meta.Bar.tags, 'HTTP API']} />\n            <ApiClient\n                componentName=\"Bar\"\n                chartClass=\"bar\"\n                apiPath=\"/charts/bar\"\n                flavors={meta.flavors}\n                dataProperty=\"data\"\n                controlGroups={groups}\n                propsMapper={mapper}\n                defaultProps={{\n                    width: 1200,\n                    height: 500,\n                    margin: {\n                        top: 40,\n                        right: 50,\n                        bottom: 40,\n                        left: 50,\n                    },\n                    data: JSON.stringify(data, null, '  '),\n                    keys: keys,\n                    indexBy: 'country',\n\n                    colors: { scheme: 'nivo' },\n                    colorBy: 'id',\n                    borderRadius: 0,\n                    borderWidth: 0,\n                    borderColor: {\n                        from: 'color',\n                        modifiers: [['darker', 1.6]],\n                    },\n\n                    padding: 0.2,\n                    innerPadding: 0,\n                    minValue: 'auto',\n                    maxValue: 'auto',\n\n                    groupMode: 'stacked',\n                    layout: 'vertical',\n                    reverse: false,\n\n                    valueScale: { type: 'linear' },\n                    indexScale: { type: 'band', round: true },\n                    valueFormat: { format: '', enabled: false },\n\n                    axisTop: {\n                        enable: false,\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: '',\n                        legendOffset: 36,\n                    },\n                    axisRight: {\n                        enable: false,\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: '',\n                        legendOffset: 0,\n                    },\n                    axisBottom: {\n                        enable: true,\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'country',\n                        legendPosition: 'middle',\n                        legendOffset: 36,\n                    },\n                    axisLeft: {\n                        enable: true,\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'food',\n                        legendPosition: 'middle',\n                        legendOffset: -40,\n                    },\n\n                    enableGridX: false,\n                    enableGridY: true,\n\n                    enableLabel: true,\n                    labelSkipWidth: 12,\n                    labelSkipHeight: 12,\n                    labelTextColor: {\n                        from: 'color',\n                        modifiers: [['darker', 1.6]],\n                    },\n                }}\n            />\n        </>\n    )\n}\n\nexport default BarApi\n"],"names":["x","props","key","help","type","required","group","description","defaultValue","svgDefaultProps","controlType","controlOptions","choices","label","value","disabled","map","v","disabledValue","min","max","step","unit","enableControlForFlavors","flavors","themeProperty","defsProperties","axesProperties","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","dataFrom","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","data","alert","JSON","stringify","motionProperties","groups","groupProperties","dishes","generateLightDataSet","generateCountriesData","slice","size","keys","generateHeavyDataSet","TooltipWrapper","styled","TooltipKey","TooltipValue","CustomTooltip","color","bar","style","id","formattedValue","indexValue","settingsMapper","valueFormat","mapFormat","axisTop","mapAxis","axisRight","axisBottom","axisLeft","tooltip","values","exclude","title","keywords","meta","componentName","chartClass","apiPath","dataProperty","controlGroups","propsMapper","mapper","defaultProps","width","height","margin","top","right","bottom","left","indexBy","colors","scheme","colorBy","borderRadius","borderWidth","borderColor","from","modifiers","padding","innerPadding","minValue","maxValue","groupMode","layout","reverse","valueScale","indexScale","round","format","enabled","enable","tickSize","tickPadding","tickRotation","legendOffset","legendPosition","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor"],"sourceRoot":""}