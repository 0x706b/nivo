{"version":3,"file":"be5e23c0be5a470b6ecd7884ba244422590d0b45-64fccdf63210423eed12.js","mappings":"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","sources":["webpack://nivo-website/./src/data/components/scatterplot/props.ts","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/utils.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/AnnotationNote.tsx","webpack://nivo-website/../src/AnnotationLink.tsx","webpack://nivo-website/../src/CircleAnnotationOutline.tsx","webpack://nivo-website/../src/DotAnnotationOutline.tsx","webpack://nivo-website/../src/RectAnnotationOutline.tsx","webpack://nivo-website/../src/Annotation.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/Node.tsx","webpack://nivo-website/../src/props.tsx","webpack://nivo-website/../src/Tooltip.tsx","webpack://nivo-website/../src/ScatterPlotAnnotations.tsx","webpack://nivo-website/../src/Nodes.tsx","webpack://nivo-website/../src/Mesh.tsx","webpack://nivo-website/../src/ScatterPlot.tsx","webpack://nivo-website/../src/ResponsiveScatterPlot.tsx","webpack://nivo-website/../src/ScatterPlotCanvas.tsx","webpack://nivo-website/../src/ResponsiveScatterPlotCanvas.tsx","webpack://nivo-website/./src/data/components/scatterplot/generator.js","webpack://nivo-website/./src/data/components/scatterplot/mapper.js","webpack://nivo-website/../node_modules/lodash/_baseFilter.js","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/filter.js","webpack://nivo-website/../node_modules/lodash/random.js"],"sourcesContent":["import { commonDefaultProps, svgDefaultProps } from '@nivo/scatterplot'\nimport {\n    themeProperty,\n    axesProperties,\n    motionProperties,\n    getLegendsProps,\n    groupProperties,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                id:   string | number\n                data: Array<{\n                    x: number | string | Date\n                    y: number | string | Date\n                }>\n            }>\n            \\`\\`\\`\n\n            Please note that you should adjust \\`xScale\\`\n            and \\`yScale\\` according to \\`x\\` and \\`y\\` type,\n            for example if you use dates, you should use\n            a \\`time\\` scale.\n        `,\n        required: true,\n    },\n    {\n        key: 'xScale',\n        type: 'object',\n        help: `X scale configuration.`,\n        group: 'Base',\n        controlType: 'object',\n        controlOptions: {\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type, supports linear, point and time scales.`,\n                    type: 'string',\n                    controlType: 'choices',\n                    controlOptions: {\n                        disabled: true,\n                        choices: ['linear'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n                {\n                    key: 'min',\n                    help: 'Minimum scale value.',\n                    required: false,\n                    type: `number | 'auto'`,\n                    controlType: 'switchableRange',\n                    controlOptions: {\n                        disabledValue: 'auto',\n                        defaultValue: 0,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n                {\n                    key: 'max',\n                    help: 'Maximum scale value.',\n                    required: false,\n                    type: `number | 'auto'`,\n                    controlType: 'switchableRange',\n                    controlOptions: {\n                        disabledValue: 'auto',\n                        defaultValue: 1200,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'xFormat',\n        group: 'Base',\n        type: 'string | Function',\n        help: 'Optional formatter for x values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'yScale',\n        group: 'Base',\n        type: 'object',\n        help: `Y scale configuration.`,\n        controlType: 'object',\n        controlOptions: {\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type, supports linear, point and time scales.`,\n                    type: 'string',\n                    controlType: 'choices',\n                    controlOptions: {\n                        disabled: true,\n                        choices: ['linear'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n                {\n                    key: 'min',\n                    help: 'Minimum scale value.',\n                    required: false,\n                    type: `number | 'auto'`,\n                    controlType: 'switchableRange',\n                    controlOptions: {\n                        disabledValue: 'auto',\n                        defaultValue: 0,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n                {\n                    key: 'max',\n                    help: 'Maximum scale value.',\n                    required: false,\n                    type: `number | 'auto'`,\n                    controlType: 'switchableRange',\n                    controlOptions: {\n                        disabledValue: 'auto',\n                        defaultValue: 1200,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'yFormat',\n        group: 'Base',\n        type: 'string | Function',\n        help: 'Optional formatter for y values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'nodeId',\n        group: 'Base',\n        defaultValue: '(d) => `${d.serieId}.${d.index}`',\n        type: 'string | (datum) => string',\n        help: `ID accessor for the node.`,\n        description: `\n            Define how to determine the id of each node on the plot. This value\n            will impact animation. Nodes will transition from a previous state\n            at the same index, thus, it can be  useful to specify this property\n            if we want to establish some continuity between nodes at different\n            index.\n\n            By default nivo will join together the serie.id and datum index.\n        `,\n    },\n    {\n        key: 'nodeSize',\n        group: 'Base',\n        defaultValue: commonDefaultProps.nodeSize,\n        type: 'number | object | Function',\n        help: `How to compute node size, static or dynamic.`,\n        description: `\n            If you provide a **number**, all nodes will have the same\n            **fixed size**.\n\n            You can also use an object to define a varying size,\n            it must conform to the following interface:\n\n            \\`\\`\\`\n            {\n                key:    string\n                values: [min: number, max: number]\n                sizes:  [min: number, max: number]\n            }\n            \\`\\`\\`\n\n            Then the size of each node will **depend on the value\n            of \\`key\\` and \\`sizes\\`**.\n\n            If you use a **custom function**, it will receive the current\n            node and must **return a number**.\n        `,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 2,\n            max: 24,\n        },\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        description: `\n            Not required if using\n            \\`Responsive*\\` component.\n            Also note that width exclude left/right axes,\n            please add margin to make sure they're visible.\n        `,\n        help: 'Chart width.',\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        description: `\n            Not required if using\n            \\`Responsive*\\` component.\n            Also note that width exclude top/bottom axes,\n            please add margin to make sure they're visible.\n        `,\n        help: 'Chart height.',\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        required: false,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    themeProperty(['svg', 'canvas']),\n    {\n        key: 'colors',\n        group: 'Style',\n        help: 'Defines color range.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: commonDefaultProps.colors,\n        controlType: 'ordinalColors',\n    },\n    {\n        key: 'blendMode',\n        group: 'Style',\n        flavors: ['svg'],\n        help: 'Defines CSS mix-blend-mode property.',\n        description: `\n            Defines CSS \\`mix-blend-mode\\` property for nodes,\n            see\n            [MDN documentation](https://developer.mozilla.org/fr/docs/Web/CSS/mix-blend-mode).\n        `,\n        type: 'string',\n        required: false,\n        defaultValue: commonDefaultProps.blendMode,\n        controlType: 'blendMode',\n    },\n    {\n        key: 'layers',\n        flavors: ['svg', 'canvas'],\n        group: 'Customization',\n        help: 'Defines the order of layers.',\n        description: `\n            Defines the order of layers, available layers are:\n            \\`grid\\`, \\`axes\\`, \\`points\\`, \\`markers\\`,\n            \\`mesh\\`, \\`legends\\`.\n\n            You can also use this to insert extra layers\n            to the chart.\n\n            For \\`ScatterPlot\\`, the extra layer should be a component\n            and will receive current chart context as props.\n\n            If using \\`ScatterPlotCanvas\\`, the extra layer should be\n            a function and will receive canvas context as first argument\n            and current chart context object as second.\n        `,\n        required: false,\n        defaultValue: svgDefaultProps.layers,\n    },\n    {\n        key: 'nodeComponent',\n        flavors: ['svg'],\n        group: 'Customization',\n        help: 'Override default node rendering for SVG implementation.',\n        type: 'FunctionComponent<ScatterPlotNodeProps<RawDatum>>',\n        description: `\n            When you override the default node component, you should use\n            an \\`animated\\` element if you wish to preserve transitions,\n            for example:\n            \n            \\`\\`\\`\n            import { animated } from '@react-spring/web'\n            \n            export const MyCustomNode = (props) => (\n                <animated.circle\n                    cx={props.style.x}\n                    cy={props.style.y}\n                    r={props.style.size.to(size => size / 2)}\n                    fill={style.color}\n                    style={{ mixBlendMode: props.blendMode }}\n                />\n            )\n            \\`\\`\\`\n            \n            The \\`style\\` property contains \\`react-spring\\` values, suitable\n            for \\`animated.*\\` elements.\n            \n            You can have a look at the [default node implementation](https://github.com/plouc/nivo/blob/master/packages/scatterplot/src/Node.tsx)\n            to see how props are used by default.\n        `,\n        required: false,\n    },\n    {\n        key: 'renderNode',\n        flavors: ['canvas'],\n        group: 'Customization',\n        help: 'Override default node rendering for canvas implementation.',\n        type: '(ctx: CanvasRenderingContext2D, props: ScatterPlotLayerProps<RawDatum>) => void',\n        description: `\n            This is how the default rendering is done:\n            \n            \\`\\`\\`\n            const renderNode = (ctx, node) => {\n                ctx.beginPath()\n                ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n                ctx.fillStyle = node.color\n                ctx.fill()\n            }\n            \\`\\`\\`\n        `,\n        required: false,\n    },\n    {\n        key: 'enableGridX',\n        help: 'Enable/disable x grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: commonDefaultProps.enableGridX,\n        controlType: 'switch',\n        group: 'Grid & Axes',\n    },\n    {\n        key: 'gridXValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for vertical grid lines.',\n        type: 'Array<number | string | Date>',\n        required: false,\n    },\n    {\n        key: 'enableGridY',\n        group: 'Grid & Axes',\n        help: 'Enable/disable y grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: commonDefaultProps.enableGridY,\n        controlType: 'switch',\n    },\n    {\n        key: 'gridYValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for horizontal grid lines.',\n        type: 'Array<number | string | Date>',\n        required: false,\n    },\n    ...axesProperties(),\n    {\n        key: 'isInteractive',\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: commonDefaultProps.isInteractive,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'useMesh',\n        group: 'Interactivity',\n        flavors: ['svg'],\n        help: 'Use a mesh to detect mouse interactions.',\n        type: 'boolean',\n        required: false,\n        defaultValue: commonDefaultProps.useMesh,\n        controlType: 'switch',\n    },\n    {\n        key: 'debugMesh',\n        help: 'Display mesh used to detect mouse interactions (voronoi cells).',\n        type: 'boolean',\n        required: false,\n        defaultValue: commonDefaultProps.debugMesh,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'tooltip',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom tooltip component',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will\n            receive the node as a property.\n\n            You can also customize the tooltip style\n            using the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'onMouseEnter',\n        group: 'Interactivity',\n        help: 'onMouseEnter handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        group: 'Interactivity',\n        help: 'onMouseMove handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        group: 'Interactivity',\n        help: 'onMouseLeave handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        group: 'Interactivity',\n        help: 'onClick handler, it receives target node data and mouse event.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'legends',\n        group: 'Legends',\n        flavors: ['svg', 'canvas'],\n        type: 'object[]',\n        help: `Optional chart's legends.`,\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n    {\n        key: 'annotations',\n        group: 'Annotations',\n        help: 'Extra annotations.',\n        type: 'object[]',\n        required: false,\n    },\n    {\n        key: 'markers',\n        group: 'Annotations',\n        help: 'Extra markers.',\n        type: 'object[]',\n        flavors: ['svg'],\n        required: false,\n    },\n    ...motionProperties(['svg'], svgDefaultProps, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","export const defaultProps = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 13,\n}\n","import {\n    AnnotationSpec,\n    CircleAnnotationSpec,\n    DotAnnotationSpec,\n    Note,\n    NoteCanvas,\n    NoteSvg,\n    RectAnnotationSpec,\n} from './types'\nimport { isValidElement } from 'react'\n\nexport const isSvgNote = <Datum>(note: Note<Datum>): note is NoteSvg<Datum> => {\n    const noteType = typeof note\n\n    return (\n        isValidElement(note) ||\n        noteType === 'string' ||\n        noteType === 'function' ||\n        noteType === 'object'\n    )\n}\n\nexport const isCanvasNote = <Datum>(note: Note<Datum>): note is NoteCanvas<Datum> => {\n    const noteType = typeof note\n\n    return noteType === 'string' || noteType === 'function'\n}\n\nexport const isCircleAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is CircleAnnotationSpec<Datum> => annotationSpec.type === 'circle'\n\nexport const isDotAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is DotAnnotationSpec<Datum> => annotationSpec.type === 'dot'\n\nexport const isRectAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is RectAnnotationSpec<Datum> => annotationSpec.type === 'rect'\n","import { filter, isNumber, omit } from 'lodash'\nimport {\n    radiansToDegrees,\n    absoluteAngleDegrees,\n    degreesToRadians,\n    positionFromAngle,\n} from '@nivo/core'\nimport { defaultProps } from './props'\nimport {\n    AnnotationSpec,\n    AnnotationPositionGetter,\n    AnnotationDimensionsGetter,\n    BoundAnnotation,\n    AnnotationMatcher,\n    AnnotationInstructions,\n} from './types'\nimport { isCircleAnnotation, isRectAnnotation } from './utils'\n\nexport const bindAnnotations = <\n    Datum = {\n        x: number\n        y: number\n    }\n>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}): BoundAnnotation<Datum>[] =>\n    annotations.reduce((acc: BoundAnnotation<Datum>[], annotation) => {\n        const offset = annotation.offset || 0\n\n        return [\n            ...acc,\n            ...filter<Datum>(data, annotation.match).map(datum => {\n                const position = getPosition(datum)\n                const dimensions = getDimensions(datum)\n\n                if (isCircleAnnotation(annotation) || isRectAnnotation(annotation)) {\n                    dimensions.size = dimensions.size + offset * 2\n                    dimensions.width = dimensions.width + offset * 2\n                    dimensions.height = dimensions.height + offset * 2\n                }\n\n                // acc.push({\n                //     ...omit(annotation, ['match', 'offset']),\n                //     ...position,\n                //     ...dimensions,\n                //     size: annotation.size || dimensions.size,\n                //     datum,\n                // } as any)\n                // return [\n                //     ...acc,\n                //     {\n                //         ...omit(annotation, ['match', 'offset']),\n                //         ...position,\n                //         ...dimensions,\n                //         size: annotation.size || dimensions.size,\n                //         datum,\n                //     },\n                // ]\n                return {\n                    ...omit(annotation, ['match', 'offset']),\n                    ...position,\n                    ...dimensions,\n                    size: annotation.size || dimensions.size,\n                    datum,\n                } as Required<BoundAnnotation<Datum>>\n            }),\n        ]\n\n        // return acc\n    }, [])\n\nexport const getLinkAngle = (\n    sourceX: number,\n    sourceY: number,\n    targetX: number,\n    targetY: number\n) => {\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX)\n\n    return absoluteAngleDegrees(radiansToDegrees(angle))\n}\n\nexport const computeAnnotation = <Datum>(\n    annotation: Required<AnnotationSpec<Datum>>\n): AnnotationInstructions => {\n    const {\n        x,\n        y,\n        noteX,\n        noteY,\n        noteWidth = defaultProps.noteWidth,\n        noteTextOffset = defaultProps.noteTextOffset,\n    } = annotation\n\n    let computedNoteX: number\n    let computedNoteY: number\n\n    if (isNumber(noteX)) {\n        computedNoteX = x + noteX\n    } else if (noteX.abs !== undefined) {\n        computedNoteX = noteX.abs\n    } else {\n        throw new Error(`noteX should be either a number or an object containing an 'abs' property`)\n    }\n\n    if (isNumber(noteY)) {\n        computedNoteY = y + noteY\n    } else if (noteY.abs !== undefined) {\n        computedNoteY = noteY.abs\n    } else {\n        throw new Error(`noteY should be either a number or an object containing an 'abs' property`)\n    }\n\n    let computedX = x\n    let computedY = y\n\n    const angle = getLinkAngle(x, y, computedNoteX, computedNoteY)\n\n    if (isCircleAnnotation<Datum>(annotation)) {\n        const position = positionFromAngle(degreesToRadians(angle), annotation.size / 2)\n        computedX += position.x\n        computedY += position.y\n    }\n\n    if (isRectAnnotation<Datum>(annotation)) {\n        const eighth = Math.round((angle + 90) / 45) % 8\n        if (eighth === 0) {\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 1) {\n            computedX += annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 2) {\n            computedX += annotation.width / 2\n        }\n        if (eighth === 3) {\n            computedX += annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 4) {\n            computedY += annotation.height / 2\n        }\n        if (eighth === 5) {\n            computedX -= annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 6) {\n            computedX -= annotation.width / 2\n        }\n        if (eighth === 7) {\n            computedX -= annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n    }\n\n    let textX = computedNoteX\n    const textY = computedNoteY - noteTextOffset\n\n    let noteLineX = computedNoteX\n    const noteLineY = computedNoteY\n\n    if ((angle + 90) % 360 > 180) {\n        textX -= noteWidth\n        noteLineX -= noteWidth\n    } else {\n        noteLineX += noteWidth\n    }\n\n    return {\n        points: [\n            [computedX, computedY],\n            [computedNoteX, computedNoteY],\n            [noteLineX, noteLineY],\n        ] as [number, number][],\n        text: [textX, textY],\n        angle: angle + 90,\n    }\n}\n","import { useMemo } from 'react'\nimport { bindAnnotations, computeAnnotation } from './compute'\nimport {\n    AnnotationDimensionsGetter,\n    AnnotationMatcher,\n    AnnotationPositionGetter,\n    AnnotationSpec,\n} from './types'\n\n/**\n * Bind annotations to a dataset.\n */\nexport const useAnnotations = <Datum>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}) =>\n    useMemo(\n        () =>\n            bindAnnotations<Datum>({\n                data,\n                annotations,\n                getPosition,\n                getDimensions,\n            }),\n        [data, annotations, getPosition, getDimensions]\n    )\n\nexport const useComputedAnnotations = <Datum>({\n    annotations,\n}: {\n    annotations: Required<AnnotationSpec<Datum>>[]\n}) =>\n    useMemo(\n        () =>\n            annotations.map(annotation => ({\n                ...annotation,\n                computed: computeAnnotation<Datum>({\n                    ...annotation,\n                }),\n            })),\n        [annotations]\n    )\n\nexport const useComputedAnnotation = <Datum>(annotation: Required<AnnotationSpec<Datum>>) =>\n    useMemo(() => computeAnnotation<Datum>(annotation), [annotation])\n","import { createElement } from 'react'\nimport omit from 'lodash/omit'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { NoteSvg } from './types'\n\nexport const AnnotationNote = <Datum,>({\n    datum,\n    x,\n    y,\n    note,\n}: {\n    datum: Datum\n    x: number\n    y: number\n    note: NoteSvg<Datum>\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    if (typeof note === 'function') {\n        return createElement(note, { x, y, datum })\n    }\n\n    return (\n        <>\n            {theme.annotations.text.outlineWidth > 0 && (\n                <animated.text\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    style={{\n                        ...theme.annotations.text,\n                        strokeLinejoin: 'round',\n                        strokeWidth: theme.annotations.text.outlineWidth * 2,\n                        stroke: theme.annotations.text.outlineColor,\n                    }}\n                >\n                    {note}\n                </animated.text>\n            )}\n            <animated.text\n                x={animatedProps.x}\n                y={animatedProps.y}\n                style={omit(theme.annotations.text, ['outlineWidth', 'outlineColor'])}\n            >\n                {note}\n            </animated.text>\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath, useTheme } from '@nivo/core'\n\nexport const AnnotationLink = ({\n    points,\n    isOutline = false,\n}: {\n    points: [number, number][]\n    isOutline?: boolean\n}) => {\n    const theme = useTheme()\n\n    const path = useMemo(() => {\n        const [firstPoint, ...otherPoints] = points\n\n        return otherPoints.reduce(\n            (acc, [x, y]) => `${acc} L${x},${y}`,\n            `M${firstPoint[0]},${firstPoint[1]}`\n        )\n    }, [points])\n\n    const animatedPath = useAnimatedPath(path)\n\n    if (isOutline && theme.annotations.link.outlineWidth <= 0) {\n        return null\n    }\n\n    const style = { ...theme.annotations.link }\n    if (isOutline) {\n        style.strokeLinecap = 'square'\n        style.strokeWidth =\n            theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n        style.stroke = theme.annotations.link.outlineColor\n    }\n\n    return <animated.path fill=\"none\" d={animatedPath} style={style} />\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const CircleAnnotationOutline = ({ x, y, size }: { x: number; y: number; size: number }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { defaultProps } from './props'\n\nexport const DotAnnotationOutline = ({\n    x,\n    y,\n    size = defaultProps.dotSize,\n}: {\n    x: number\n    y: number\n    size?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth: theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.symbol}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const RectAnnotationOutline = ({\n    x,\n    y,\n    width,\n    height,\n}: {\n    x: number\n    y: number\n    width: number\n    height: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x: x - width / 2,\n        y: y - height / 2,\n        width,\n        height,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.rect\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    width={animatedProps.width}\n                    height={animatedProps.height}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.rect\n                x={animatedProps.x}\n                y={animatedProps.y}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useComputedAnnotation } from './hooks'\nimport { AnnotationNote } from './AnnotationNote'\nimport { AnnotationLink } from './AnnotationLink'\nimport { CircleAnnotationOutline } from './CircleAnnotationOutline'\nimport { DotAnnotationOutline } from './DotAnnotationOutline'\nimport { RectAnnotationOutline } from './RectAnnotationOutline'\nimport { BoundAnnotation } from './types'\nimport { isCircleAnnotation, isDotAnnotation, isRectAnnotation, isSvgNote } from './utils'\n\nexport const Annotation = <Datum,>(annotation: BoundAnnotation<Datum>) => {\n    const { datum, x, y, note } = annotation\n    const computed = useComputedAnnotation(annotation)\n\n    if (!isSvgNote(note)) {\n        throw new Error('note should be a valid react element')\n    }\n\n    return (\n        <>\n            <AnnotationLink points={computed.points} isOutline={true} />\n            {isCircleAnnotation(annotation) && (\n                <CircleAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isDotAnnotation(annotation) && (\n                <DotAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isRectAnnotation(annotation) && (\n                <RectAnnotationOutline\n                    x={x}\n                    y={y}\n                    width={annotation.width}\n                    height={annotation.height}\n                />\n            )}\n            <AnnotationLink points={computed.points} />\n            <AnnotationNote datum={datum} x={computed.text[0]} y={computed.text[1]} note={note} />\n        </>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { ComputedAnnotation } from './types'\nimport { isCanvasNote, isCircleAnnotation, isDotAnnotation, isRectAnnotation } from './utils'\n\nconst drawPoints = (ctx: CanvasRenderingContext2D, points: [number, number][]) => {\n    points.forEach(([x, y], index) => {\n        if (index === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    })\n}\n\nexport const renderAnnotationsToCanvas = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        annotations,\n        theme,\n    }: {\n        annotations: ComputedAnnotation<Datum>[]\n        theme: CompleteTheme\n    }\n) => {\n    if (annotations.length === 0) return\n\n    ctx.save()\n    annotations.forEach(annotation => {\n        if (!isCanvasNote(annotation.note)) {\n            throw new Error('note is invalid for canvas implementation')\n        }\n\n        if (theme.annotations.link.outlineWidth > 0) {\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.annotations.link.outlineColor\n            ctx.lineWidth =\n                theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n            ctx.beginPath()\n            drawPoints(ctx, annotation.computed.points)\n            ctx.stroke()\n            ctx.lineCap = 'butt'\n        }\n\n        if (isCircleAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation) && theme.annotations.symbol.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.symbol.outlineColor\n            ctx.lineWidth = theme.annotations.symbol.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isRectAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        ctx.strokeStyle = theme.annotations.link.stroke\n        ctx.lineWidth = theme.annotations.link.strokeWidth\n        ctx.beginPath()\n        drawPoints(ctx, annotation.computed.points)\n        ctx.stroke()\n\n        if (isCircleAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation)) {\n            ctx.fillStyle = theme.annotations.symbol.fill\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.fill()\n        }\n\n        if (isRectAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        if (typeof annotation.note === 'function') {\n            annotation.note(ctx, {\n                datum: annotation.datum,\n                x: annotation.computed.text[0],\n                y: annotation.computed.text[1],\n                theme,\n            })\n        } else {\n            ctx.font = `${theme.annotations.text.fontSize}px ${theme.annotations.text.fontFamily}`\n            ctx.fillStyle = theme.annotations.text.fill\n            ctx.strokeStyle = theme.annotations.text.outlineColor\n            ctx.lineWidth = theme.annotations.text.outlineWidth * 2\n            if (theme.annotations.text.outlineWidth > 0) {\n                ctx.lineJoin = 'round'\n                ctx.strokeText(\n                    annotation.note,\n                    annotation.computed.text[0],\n                    annotation.computed.text[1]\n                )\n                ctx.lineJoin = 'miter'\n            }\n            ctx.fillText(annotation.note, annotation.computed.text[0], annotation.computed.text[1])\n        }\n    })\n    ctx.restore()\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { animated } from '@react-spring/web'\nimport { ScatterPlotDatum, ScatterPlotNodeProps } from './types'\nimport { useCallback } from 'react'\n\nconst interpolateRadius = (size: number) => size / 2\n\nexport const Node = <RawDatum extends ScatterPlotDatum>({\n    node,\n    style,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: ScatterPlotNodeProps<RawDatum>) => {\n    const handleMouseEnter = useCallback(event => onMouseEnter?.(node, event), [node, onMouseEnter])\n    const handleMouseMove = useCallback(event => onMouseMove?.(node, event), [node, onMouseMove])\n    const handleMouseLeave = useCallback(event => onMouseLeave?.(node, event), [node, onMouseLeave])\n    const handleClick = useCallback(event => onClick?.(node, event), [node, onClick])\n\n    return (\n        <animated.circle\n            cx={style.x}\n            cy={style.y}\n            r={style.size.to(interpolateRadius)}\n            fill={style.color}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n","import { CssMixBlendMode } from '@nivo/core'\nimport { Node } from './Node'\nimport { Tooltip } from './Tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotLayerId,\n    ScatterPlotNodeData,\n} from './types'\n\nexport const commonDefaultProps = {\n    xScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['xScale'],\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['yScale'],\n\n    enableGridX: true,\n    enableGridY: true,\n    axisBottom: {},\n    axisLeft: {},\n\n    nodeId: (({ serieId, index }) =>\n        `${serieId}.${index}`) as ScatterPlotCommonProps<ScatterPlotDatum>['nodeId'],\n    nodeSize: 9,\n    nodeComponent: Node,\n\n    colors: { scheme: 'nivo' } as ScatterPlotCommonProps<ScatterPlotDatum>['colors'],\n\n    isInteractive: true,\n    debugMesh: false,\n\n    tooltip: Tooltip,\n\n    markers: [],\n\n    legends: [],\n\n    annotations: [],\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    blendMode: 'normal' as CssMixBlendMode,\n    layers: [\n        'grid',\n        'axes',\n        'nodes',\n        'markers',\n        'mesh',\n        'legends',\n        'annotations',\n    ] as ScatterPlotLayerId[],\n    role: 'img',\n    useMesh: true,\n    animate: true,\n    motionConfig: 'default',\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'nodes', 'mesh', 'legends', 'annotations'] as ScatterPlotLayerId[],\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n    renderNode: (ctx: CanvasRenderingContext2D, node: ScatterPlotNodeData<ScatterPlotDatum>) => {\n        ctx.beginPath()\n        ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n        ctx.fillStyle = node.color\n        ctx.fill()\n    },\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ScatterPlotTooltipProps, ScatterPlotDatum } from './types'\n\nexport const Tooltip = <RawDatum extends ScatterPlotDatum>({\n    node,\n}: ScatterPlotTooltipProps<RawDatum>) => (\n    <BasicTooltip\n        id={node.serieId}\n        value={`x: ${node.formattedX}, y: ${node.formattedY}`}\n        enableChip={true}\n        color={node.color}\n    />\n)\n","import { Annotation } from '@nivo/annotations'\nimport { useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface ScatterPlotAnnotationsProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n}\n\nexport const ScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    annotations,\n}: ScatterPlotAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { CssMixBlendMode, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNode,\n    ScatterPlotNodeData,\n} from './types'\nimport { createElement, useCallback } from 'react'\n\ninterface NodesProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    nodeComponent: ScatterPlotNode<RawDatum>\n    isInteractive: boolean\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    blendMode: CssMixBlendMode\n}\n\nconst getNodeKey = <RawDatum extends ScatterPlotDatum>(node: ScatterPlotNodeData<RawDatum>) =>\n    node.id\nconst regularTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: node.size,\n    color: node.color,\n})\nconst leaveTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: 0,\n    color: node.color,\n})\n\nexport const Nodes = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    nodeComponent,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    blendMode,\n}: NodesProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        ScatterPlotNodeData<RawDatum>,\n        {\n            x: number\n            y: number\n            size: number\n            color: string\n        }\n    >(nodes, {\n        keys: getNodeKey,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseEnter = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (node, event) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n    const handleClick = useCallback((node, event) => onClick?.(node, event), [onClick])\n\n    return (\n        <>\n            {transition((style, node) =>\n                createElement(nodeComponent, {\n                    node,\n                    style,\n                    blendMode,\n                    isInteractive,\n                    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n                    onMouseMove: isInteractive ? handleMouseMove : undefined,\n                    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n                    onClick: isInteractive ? handleClick : undefined,\n                })\n            )}\n        </>\n    )\n}\n","import { createElement, useCallback } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface MeshProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    width: number\n    height: number\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    debug: boolean\n}\n\nexport const Mesh = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    width,\n    height,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}: MeshProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={nodes}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n","import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport { SvgWrapper, Container, useDimensions, CartesianMarkers } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useScatterPlot } from './hooks'\nimport { svgDefaultProps } from './props'\nimport { ScatterPlotAnnotations } from './ScatterPlotAnnotations'\nimport { Nodes } from './Nodes'\nimport { Mesh } from './Mesh'\nimport { ScatterPlotDatum, ScatterPlotLayerId, ScatterPlotSvgProps } from './types'\n\ntype InnerScatterPlotProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = svgDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = svgDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    colors = svgDefaultProps.colors,\n    blendMode = svgDefaultProps.blendMode,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = svgDefaultProps.nodeSize,\n    nodeComponent = svgDefaultProps.nodeComponent,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    annotations = svgDefaultProps.annotations,\n    isInteractive = svgDefaultProps.isInteractive,\n    useMesh = svgDefaultProps.useMesh,\n    debugMesh = svgDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip,\n    markers = svgDefaultProps.markers,\n    legends = svgDefaultProps.legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerScatterPlotProps<RawDatum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    const layerById: Record<ScatterPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        nodes: null,\n        markers: null,\n        mesh: null,\n        annotations: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as any) : null}\n                yScale={enableGridY ? (yScale as any) : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <Nodes<RawDatum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                blendMode={blendMode}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<RawDatum['x'], RawDatum['y']>\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (value: RawDatum['x']) => number}\n                yScale={yScale as (value: RawDatum['y']) => number}\n            />\n        )\n    }\n\n    if (layers.includes('mesh') && isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh<RawDatum>\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <ScatterPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legendData}\n            />\n        ))\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'string' && layerById[layer] !== undefined) {\n                    return layerById[layer]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                throw new Error(`Unknown layer (${layer})`)\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const ScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: ScatterPlotSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerScatterPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlot } from './ScatterPlot'\nimport { ScatterPlotDatum, ScatterPlotSvgProps } from './types'\n\nexport const ResponsiveScatterPlot = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ScatterPlot<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { createElement, useRef, useState, useEffect, useCallback, useMemo } from 'react'\nimport { Container, useDimensions, useTheme, getRelativeCursor, isCursorInRect } from '@nivo/core'\nimport { renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { CanvasAxisProp, renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { canvasDefaultProps, svgDefaultProps } from './props'\nimport { useScatterPlot, useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ntype InnerScatterPlotCanvasProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = canvasDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = canvasDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = canvasDefaultProps.nodeSize,\n    renderNode = canvasDefaultProps.renderNode,\n    enableGridX = canvasDefaultProps.enableGridX,\n    gridXValues,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    annotations = canvasDefaultProps.annotations,\n    isInteractive = canvasDefaultProps.isInteractive,\n    debugMesh = canvasDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip,\n    legends = canvasDefaultProps.legends,\n}: InnerScatterPlotCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ScatterPlotNodeData<RawDatum> | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas<RawDatum['x']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale as any,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas<RawDatum['y']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale as any,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas<ScatterPlotNodeData<RawDatum>>(ctx, {\n                    annotations: boundAnnotations as any,\n                    theme,\n                })\n            } else if (layer === 'axes') {\n                renderAxesToCanvas<RawDatum['x'], RawDatum['y']>(ctx, {\n                    xScale: xScale as any,\n                    yScale: yScale as any,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop as CanvasAxisProp<RawDatum['x']>,\n                    right: axisRight as CanvasAxisProp<RawDatum['y']>,\n                    bottom: axisBottom as CanvasAxisProp<RawDatum['x']>,\n                    left: axisLeft as CanvasAxisProp<RawDatum['y']>,\n                    theme,\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    renderNode(ctx, node)\n                })\n            } else if (layer === 'mesh') {\n                if (debugMesh === true) {\n                    renderVoronoiToCanvas(ctx, voronoi!)\n                    if (currentNode) {\n                        renderVoronoiCellToCanvas(ctx, voronoi!, currentNode.index)\n                    }\n                }\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            } else {\n                throw new Error(`Invalid layer: ${layer}`)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        renderNode,\n        layers,\n        customLayerProps,\n        theme,\n        xScale,\n        yScale,\n        nodes,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        legendData,\n        debugMesh,\n        voronoi,\n        currentNode,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const getNodeFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current!, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const handleMouseHover = useCallback(\n        event => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event)\n                if (currentNode && currentNode.id !== node.id) {\n                    onMouseLeave && onMouseLeave(currentNode, event)\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                if (!currentNode) {\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                onMouseMove && onMouseMove(node, event)\n            } else {\n                hideTooltip()\n                currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n            }\n        },\n        [\n            getNodeFromMouseEvent,\n            currentNode,\n            setCurrentNode,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentNode(null)\n            currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n        },\n        [hideTooltip, currentNode, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const node = getNodeFromMouseEvent(event)\n                node && onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const ScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: ScatterPlotCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n        <InnerScatterPlotCanvas<RawDatum> {...props} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlotCanvas } from './ScatterPlotCanvas'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum } from './types'\n\nexport const ResponsiveScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <ScatterPlotCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\nconst keys = ['group A', 'group B', 'group C', 'group D', 'group E']\nconst ageRange = [0, 100]\nconst weightRange = [0, 120]\n\nconst generateData = size =>\n    keys.map(key => ({\n        id: key,\n        data: range(size).map(i => ({\n            x: random(ageRange[0], ageRange[1]),\n            y: random(weightRange[0], weightRange[1]),\n        })),\n    }))\n\nexport const generateLightDataSet = () => generateData(50)\n\nexport const generateHeavyDataSet = () => generateData(800)\n","import React from 'react'\nimport { settingsMapper, mapAxis, mapFormat } from '../../../lib/settings'\n\nexport default settingsMapper(\n    {\n        xFormat: mapFormat,\n        yFormat: mapFormat,\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n    },\n    {\n        exclude: ['enable axisTop', 'enable axisRight', 'enable axisBottom', 'enable axisLeft'],\n    }\n)\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n"],"names":["props","key","group","help","description","required","type","controlType","controlOptions","disabled","choices","map","v","label","value","disabledValue","defaultValue","min","max","commonDefaultProps","unit","enableControlForFlavors","step","flavors","themeProperty","svgDefaultProps","axesProperties","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","defaults","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","data","alert","JSON","stringify","motionProperties","groups","groupProperties","defaultProps","isCircleAnnotation","annotationSpec","isDotAnnotation","isRectAnnotation","computeAnnotation","annotation","computedNoteX","computedNoteY","x","y","noteX","noteY","noteWidth","noteTextOffset","_isNumber","abs","Error","computedX","computedY","angle","sourceX","sourceY","targetX","targetY","Math","atan2","absoluteAngleDegrees","radiansToDegrees","getLinkAngle","position","positionFromAngle","degreesToRadians","size","eighth","round","height","width","textX","noteLineX","points","text","useAnnotations","annotations","getPosition","getDimensions","useMemo","reduce","acc","offset","_filter","match","datum","dimensions","_omit","bindAnnotations","useComputedAnnotations","computed","AnnotationNote","note","theme","useTheme","useMotionConfig","animate","springConfig","config","animatedProps","useSpring","immediate","createElement","_jsxs","outlineWidth","_jsx","animated","style","strokeLinejoin","strokeWidth","stroke","outlineColor","omit","AnnotationLink","isOutline","path","firstPoint","animatedPath","useAnimatedPath","link","strokeLinecap","fill","d","CircleAnnotationOutline","radius","outline","circle","cx","cy","r","DotAnnotationOutline","dotSize","symbol","RectAnnotationOutline","rect","Annotation","useComputedAnnotation","noteType","isValidElement","isSvgNote","drawPoints","ctx","forEach","moveTo","lineTo","renderAnnotationsToCanvas","length","save","isCanvasNote","lineCap","strokeStyle","lineWidth","beginPath","arc","PI","fillStyle","font","fontSize","fontFamily","lineJoin","strokeText","fillText","restore","computeCartesianTicks","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","centerScale","line","lineX","lineY","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","top","bottom","left","right","ticks","getFormatter","format","formatter","timeFormat","Date","d3Format","computeGridLines","_values","Array","isArray","lines","x1","x2","y1","y2","memoizedAxisTick","memo","_value","textAnchor","opacity","cursor","event","g","transform","dominantBaseline","textTransform","memoizedAxis","renderTick","AxisTick","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","lineX2","lineY2","transition","useTransition","keys","t","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","rotate","domain","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","axes","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","_format","fontWeight","Number","String","renderAxesToCanvas","renderGridLinesToCanvas","zeroPadding","computeDimensions","item","_padding","padding","itemCount","horizontalPadding","verticalPadding","spacing","computePositionFromAnchor","containerWidth","containerHeight","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","symbolSpacing","symbolByShape","borderWidth","borderColor","pointerEvents","diamond","square","triangle","LegendSvgItem","textColor","background","symbolShape","symbolBorderWidth","symbolBorderColor","onMouseEnter","onMouseLeave","toggleSerie","effects","useState","setStyle","handleMouseEnter","useCallback","filter","on","effect","handleMouseLeave","isInteractive","some","handler","SymbolShape","itemOpacity","itemBackground","e","id","color","hidden","legends","itemTextColor","userSelect","LegendSvg","xStep","yStep","i","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","itemX","itemY","fillRect","useQuantizeColorScaleLegendData","overriddenDomain","reverse","valueFormat","separator","items","range","domainValue","invertExtent","extent","LegendPropShape","isRequired","useScatterPlot","xScaleSpec","xFormat","yScaleSpec","yFormat","nodeId","nodeSize","colors","computeXYScalesForSeries","series","formatX","useValueFormatter","formatY","getNodeId","usePropertyAccessor","rawNodes","serie","serieIndex","point","serieId","xValue","formattedX","yValue","formattedY","push","getNodeSize","isNumber","isPlainObject","isString","sizes","sizeScale","scaleLinear","get","getNodeSizeGenerator","getColor","useOrdinalColorScale","nodes","rawNode","legendData","useScatterPlotAnnotations","node","interpolateRadius","enableGridX","enableGridY","axisBottom","axisLeft","nodeComponent","blendMode","onMouseMove","handleMouseMove","handleClick","to","mixBlendMode","scheme","debugMesh","tooltip","BasicTooltip","enableChip","markers","layers","role","useMesh","motionConfig","canvasDefaultProps","pixelRatio","window","devicePixelRatio","renderNode","ScatterPlotAnnotations","boundAnnotations","getNodeKey","regularTransition","leaveTransition","Nodes","useTooltip","showTooltipFromEvent","hideTooltip","Mesh","debug","BaseMesh","InnerScatterPlot","partialMargin","margin","gridXValues","gridYValues","axisTop","axisRight","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","customLayerProps","layerById","mesh","includes","CartesianMarkers","SvgWrapper","layer","Fragment","ScatterPlot","renderWrapper","otherProps","Container","ResponsiveScatterPlot","ResponsiveWrapper","InnerScatterPlotCanvas","canvasEl","useRef","currentNode","setCurrentNode","useVoronoiMesh","delaunay","voronoi","useEffect","current","getContext","n","renderVoronoiToCanvas","renderVoronoiCellToCanvas","getNodeFromMouseEvent","getRelativeCursor","isCursorInRect","nodeIndex","find","handleMouseHover","ref","ScatterPlotCanvas","ResponsiveScatterPlotCanvas","ageRange","weightRange","generateData","random","generateLightDataSet","generateHeavyDataSet","settingsMapper","mapFormat","mapAxis","exclude","baseEach","module","exports","collection","predicate","result","nativeFloor","floor","nativeRandom","lower","upper","arrayFilter","baseFilter","baseIteratee","baseRandom","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","undefined","temp","rand"],"sourceRoot":""}