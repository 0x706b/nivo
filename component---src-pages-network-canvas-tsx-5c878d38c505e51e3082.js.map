{"version":3,"file":"component---src-pages-network-canvas-tsx-5c878d38c505e51e3082.js","mappings":"+aASA,IAAMA,EAAoBC,OAAOC,OAAO,CACpCC,WACsB,oBAAXC,QAA0BA,OAAOC,iBAAmBD,OAAOC,iBAAmB,EAEzFC,OAAQ,CACJC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,GAGVC,aAAc,WACdC,YAAa,EACbC,WAAY,GAEZC,SAAUC,EAAAA,GAAAA,SACVC,eAAgBD,EAAAA,GAAAA,eAChBE,iBAAkBF,EAAAA,GAAAA,iBAClBG,UAAW,SAACC,GAAD,OAAeA,EAAKC,OAC/BC,gBAAiB,EACjBC,gBAAiB,CAAEC,MAAO,cAE1BC,UAAWT,EAAAA,GAAAA,UACXU,cAAeV,EAAAA,GAAAA,cAEfW,YAAaX,EAAAA,GAAAA,YAEbY,eAAe,IA+DnB,UA1DsB,WAClB,IAE4CC,GAExCC,EAAAA,EAAAA,gBAAe,cAHfD,MACIE,gBAAmBC,gBAY3B,OACI,SAAC,IAAD,CACIC,KAAK,gBACLC,KAAMA,EAAAA,GACNC,KAAK,UACLC,QAASF,EAAAA,GACTG,cAAc,SACdC,WAAYC,EAAAA,EACZtC,kBAAmBA,EACnBuC,kBAAmBxB,EAAAA,GACnByB,iBAAkBC,EAAAA,GAClBC,aAAc,kBA5BCC,EAAAA,EAAAA,OAoCfC,YAAa,SAAAC,GAAI,OAAIA,EAAKC,MAAMC,QAChCnB,MAAOA,EAnBX,SAqBK,SAACS,EAAYQ,EAAMtB,EAAOyB,GACvB,OACI,SAAC,KAAD,GACIH,KAAMA,GACFR,EAFR,CAGId,MAAOA,EACP0B,QAAS,SAAA9B,GACL6B,EAAU,CACNE,KAAM,QACNC,MAAM,cAAehC,EAAKiC,GAArB,YAAmCjC,EAAKkC,MAC7CjC,MAAOD,EAAKC,MACZyB,KAAM1B","sources":["webpack://nivo-website/./src/pages/network/canvas.tsx"],"sourcesContent":["import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport { ResponsiveNetworkCanvas, canvasDefaultProps as defaults } from '@nivo/network'\nimport { generateNetworkData } from '@nivo/generators'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/network/meta.yml'\nimport mapper from '../../data/components/network/mapper'\nimport { groups } from '../../data/components/network/props'\n\nconst initialProperties = Object.freeze({\n    pixelRatio:\n        typeof window !== 'undefined' && window.devicePixelRatio ? window.devicePixelRatio : 1,\n\n    margin: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    },\n\n    linkDistance: 'distance',\n    repulsivity: 4,\n    iterations: 60,\n\n    nodeSize: defaults.nodeSize,\n    activeNodeSize: defaults.activeNodeSize,\n    inactiveNodeSize: defaults.inactiveNodeSize,\n    nodeColor: (node: any) => node.color,\n    nodeBorderWidth: 1,\n    nodeBorderColor: { theme: 'background' },\n\n    linkColor: defaults.linkColor,\n    linkThickness: defaults.linkThickness,\n\n    annotations: defaults.annotations,\n\n    isInteractive: true,\n})\n\nconst generateData = () => generateNetworkData()\n\nconst NetworkCanvas = () => {\n    const {\n        image: {\n            childImageSharp: { gatsbyImageData: image },\n        },\n    } = useStaticQuery(graphql`\n        query {\n            image: file(absolutePath: { glob: \"**/src/assets/captures/network-canvas.png\" }) {\n                childImageSharp {\n                    gatsbyImageData(layout: FIXED, width: 700, quality: 100)\n                }\n            }\n        }\n    `)\n\n    return (\n        <ComponentTemplate\n            name=\"NetworkCanvas\"\n            meta={meta.NetworkCanvas}\n            icon=\"network\"\n            flavors={meta.flavors}\n            currentFlavor=\"canvas\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={defaults}\n            propertiesMapper={mapper}\n            generateData={() =>\n                generateData({\n                    rootNodeRadius: 10,\n                    maxMidNodes: 32,\n                    midNodeRadius: 6,\n                    leafRadius: 3,\n                })\n            }\n            getDataSize={data => data.nodes.length}\n            image={image}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveNetworkCanvas\n                        data={data}\n                        {...properties}\n                        theme={theme}\n                        onClick={node => {\n                            logAction({\n                                type: 'click',\n                                label: `[node] id: ${node.id}, index: ${node.index}`,\n                                color: node.color,\n                                data: node,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default NetworkCanvas\n"],"names":["initialProperties","Object","freeze","pixelRatio","window","devicePixelRatio","margin","top","right","bottom","left","linkDistance","repulsivity","iterations","nodeSize","defaults","activeNodeSize","inactiveNodeSize","nodeColor","node","color","nodeBorderWidth","nodeBorderColor","theme","linkColor","linkThickness","annotations","isInteractive","image","useStaticQuery","childImageSharp","gatsbyImageData","name","meta","icon","flavors","currentFlavor","properties","groups","defaultProperties","propertiesMapper","mapper","generateData","generateNetworkData","getDataSize","data","nodes","length","logAction","onClick","type","label","id","index"],"sourceRoot":""}