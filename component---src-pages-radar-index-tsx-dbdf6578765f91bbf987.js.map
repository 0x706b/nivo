{"version":3,"file":"component---src-pages-radar-index-tsx-dbdf6578765f91bbf987.js","mappings":"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","sources":["webpack://nivo-website/./src/data/components/radar/mapper.ts","webpack://nivo-website/./src/data/components/radar/props.ts","webpack://nivo-website/./src/lib/settings.ts","webpack://nivo-website/./src/pages/radar/index.tsx"],"sourcesContent":["import { settingsMapper, mapFormat } from '../../../lib/settings'\n\nexport default settingsMapper({\n    valueFormat: mapFormat,\n    dotLabel: (value: string) => {\n        if (value === `p => \\`\\${p.key}: \\${p.value}\\``) return (p: any) => `${p.key}: ${p.value}`\n        if (value === `p => \\`\\${p.index}: \\${p.value}\\``)\n            return (p: any) => `${p.index}: ${p.value}`\n        return value\n    },\n})\n","import { closedCurvePropKeys } from '@nivo/core'\nimport { svgDefaultProps } from '@nivo/radar'\nimport {\n    themeProperty,\n    motionProperties,\n    groupProperties,\n    defsProperties,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        type: 'Datum[]',\n        required: true,\n        help: 'Chart data.',\n        description: `\n            For example, given this config:\n            \\`\\`\\`\n            [\n                { language: 'javascript', john: 12, sarah: 32, bob: 27 },\n                { language: 'golang', john: 25, sarah: 15, bob: 3 },\n                { language: 'python', john: 5, sarah: 22, bob: 31 },\n                { language: 'java', john: 19, sarah: 17, bob: 9 }\n            ]\n            keys: ['john', 'sarah', 'bob']\n            indexBy: 'language'\n            \\`\\`\\`\n            We'll have a radar chart representing programing\n            skills for each user by language\n            (3 layers and 4 dimensions).\n        `,\n        flavors: ['svg', 'api'],\n    },\n    {\n        key: 'indexBy',\n        group: 'Base',\n        type: 'string',\n        required: true,\n        help: 'Key to use to index the data.',\n        description: `\n            Key to use to index the data, this key\n            must exist in each data item.\n        `,\n        flavors: ['svg', 'api'],\n    },\n    {\n        key: 'keys',\n        group: 'Base',\n        type: 'string[]',\n        required: true,\n        help: 'Keys to use to determine each serie.',\n        description: `\n            Keys to use to determine each serie.\n            Those keys should exist in each data item.\n        `,\n        flavors: ['svg', 'api'],\n    },\n    {\n        key: 'maxValue',\n        group: 'Base',\n        type: `number | 'auto'`,\n        required: false,\n        help: 'Maximum value.',\n        description: `\n            Maximum value, if 'auto',\n            will use max value from\n            the provided data.\n        `,\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.maxValue,\n        controlType: 'switchableRange',\n        controlOptions: {\n            disabledValue: 'auto',\n            defaultValue: 200,\n            min: 0,\n            max: 1000,\n        },\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        type: 'string | (value: number) => string',\n        required: false,\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        flavors: ['svg', 'api'],\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'curve',\n        group: 'Base',\n        type: 'string',\n        required: false,\n        help: 'Curve interpolation.',\n        description: `\n            Defines the curve factory to use\n            for the line generator.\n        `,\n        defaultValue: svgDefaultProps.curve,\n        flavors: ['svg', 'api'],\n        controlType: 'choices',\n        controlOptions: {\n            choices: closedCurvePropKeys.map((key: string) => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'width',\n        group: 'Base',\n        type: 'number',\n        required: true,\n        help: 'Chart width.',\n        description: `\n            not required if using\n            \\`<ResponsiveRadar/>\\`.\n        `,\n        flavors: ['svg', 'api'],\n        enableControlForFlavors: ['api'],\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        group: 'Base',\n        type: 'number',\n        required: true,\n        help: 'Chart height.',\n        description: `\n            not required if using\n            \\`<ResponsiveRadar/>\\`.\n        `,\n        flavors: ['svg', 'api'],\n        enableControlForFlavors: ['api'],\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'margin',\n        group: 'Base',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        flavors: ['svg', 'api'],\n        controlType: 'margin',\n    },\n    themeProperty(['svg', 'api']),\n    {\n        key: 'colors',\n        group: 'Style',\n        type: 'string | Function | string[]',\n        required: false,\n        help: 'Defines how to compute colors.',\n        defaultValue: svgDefaultProps.colors,\n        flavors: ['svg', 'api'],\n        controlType: 'ordinalColors',\n    },\n    {\n        key: 'fillOpacity',\n        group: 'Style',\n        type: 'number',\n        required: false,\n        help: 'Shape fill opacity.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.fillOpacity,\n        controlType: 'opacity',\n    },\n    {\n        key: 'blendMode',\n        group: 'Style',\n        type: 'string',\n        required: false,\n        help:\n            'Defines CSS [mix-blend-mode](https://developer.mozilla.org/fr/docs/Web/CSS/mix-blend-mode) for shapes.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.blendMode,\n        controlType: 'blendMode',\n    },\n    {\n        key: 'borderWidth',\n        group: 'Style',\n        type: 'number',\n        required: false,\n        help: 'Shape border width.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.borderWidth,\n        controlType: 'lineWidth',\n    },\n    {\n        key: 'borderColor',\n        group: 'Style',\n        type: 'string | object | Function',\n        required: false,\n        help: 'Method to compute border color.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.borderColor,\n        controlType: 'inheritedColor',\n    },\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'gridLevels',\n        group: 'Grid',\n        type: 'number',\n        required: false,\n        help: 'Number of levels to display for grid',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.gridLevels,\n        controlType: 'range',\n        controlOptions: {\n            min: 1,\n            max: 12,\n        },\n    },\n    {\n        key: 'gridShape',\n        group: 'Grid',\n        type: 'string',\n        required: false,\n        help: 'Determine shape of the grid.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.gridShape,\n        controlType: 'choices',\n        controlOptions: {\n            choices: [\n                { label: 'circular', value: 'circular' },\n                { label: 'linear', value: 'linear' },\n            ],\n        },\n    },\n    {\n        key: 'gridLabel',\n        group: 'Grid',\n        type: 'Function',\n        required: false,\n        help: 'Grid label.',\n        description: `\n            An optional function to override label rendering.\n            It must return a **valid SVG element** and will\n            receive the following props:\n            \\`\\`\\`\n            {\n                id:     string\n                # this can be used to determine the label layout,\n                # if the element should be centered, left/right aligned\n                anchor: 'start' | 'middle' | 'end'\n                # angle in degrees\n                angle:  number\n            }\n            \\`\\`\\`\n            The component will be wrapped inside\n            a \\`g\\` element **already positioned**\n            where the default label would have been placed.\n        `,\n        flavors: ['svg'],\n    },\n    {\n        key: 'gridLabelOffset',\n        group: 'Grid',\n        type: 'number',\n        required: false,\n        help: 'Label offset from outer radius.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.gridLabelOffset,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 60,\n        },\n    },\n    {\n        key: 'enableDots',\n        group: 'Dots',\n        type: 'boolean',\n        required: false,\n        help: 'Enable/disable dots.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.enableDots,\n        controlType: 'switch',\n    },\n    {\n        key: 'dotSymbol',\n        group: 'Dots',\n        type: 'Function',\n        required: false,\n        help: 'Overrides default dot circle.',\n        description: `\n            Overrides default dot circle.\n            The function will receive \\`size\\`,\n            \\`color\\`, \\`borderWidth\\` and \\`borderColor\\`\n            props and must return a valid SVG element.\n        `,\n        flavors: ['svg'],\n    },\n    {\n        key: 'dotSize',\n        group: 'Dots',\n        type: 'number',\n        required: false,\n        help: 'Size of the dots.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.dotSize,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 2,\n            max: 64,\n        },\n    },\n    {\n        key: 'dotColor',\n        type: 'string | object | Function',\n        required: false,\n        help: 'Method to compute dots color.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.dotColor,\n        controlType: 'inheritedColor',\n        group: 'Dots',\n    },\n    {\n        key: 'dotBorderWidth',\n        group: 'Dots',\n        type: 'number',\n        required: false,\n        help: 'Width of the dots border.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.dotBorderWidth,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 10,\n        },\n    },\n    {\n        key: 'dotBorderColor',\n        group: 'Dots',\n        type: 'string | object | Function',\n        required: false,\n        help: 'Method to compute dots border color.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.dotBorderColor,\n        controlType: 'inheritedColor',\n    },\n    {\n        key: 'enableDotLabel',\n        group: 'Dots',\n        help: 'Enable/disable dots label.',\n        type: 'boolean',\n        required: false,\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.enableDotLabel,\n        controlType: 'switch',\n    },\n    {\n        key: 'dotLabel',\n        group: 'Dots',\n        type: 'string | ((point: PointData) => string | number)',\n        required: false,\n        help: 'Dot label.',\n        description:\n            'Property to use to determine dot label. If a function is provided, it will receive current value and serie and must return a label.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.dotLabel,\n        controlType: 'choices',\n        controlOptions: {\n            choices: [\n                'value',\n                'formattedValue',\n                'index',\n                'key',\n                `p => \\`\\${p.key}: \\${p.value}\\``,\n                `p => \\`\\${p.index}: \\${p.value}\\``,\n            ].map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n    {\n        key: 'dotLabelYOffset',\n        group: 'Dots',\n        type: 'number',\n        required: false,\n        help: 'Label Y offset from dot shape.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.dotLabelYOffset,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: -24,\n            max: 24,\n        },\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer should be a component.\n            \n            The layer function which will receive the chart's\n            context & computed data and must return a valid SVG element.\n        `,\n        required: false,\n        type: '(RadarLayerId | FunctionComponent<RadarCustomLayerProps>)[]',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.layers,\n    },\n    {\n        key: 'isInteractive',\n        group: 'Interactivity',\n        type: 'boolean',\n        required: false,\n        help: 'Enable/disable interactivity.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.isInteractive,\n        controlType: 'switch',\n    },\n    {\n        key: 'sliceTooltip',\n        group: 'Interactivity',\n        type: 'FunctionComponent<RadarSliceTooltipProps>',\n        required: false,\n        help: 'Override default slice tooltip.',\n        flavors: ['svg'],\n    },\n    ...motionProperties(['svg'], svgDefaultProps, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","import omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\n\nexport const settingsMapper = (mapping: any, { exclude = [] } = {}) => (\n    settings: any,\n    options: any = {}\n) => {\n    const overrides: any = {}\n\n    Object.keys(settings).forEach(key => {\n        if (mapping[key]) {\n            overrides[key] = mapping[key](settings[key], settings, options)\n        }\n    })\n\n    return {\n        ...omit(settings, exclude),\n        ...overrides,\n    }\n}\n\nexport const mapAxis = (type: string) => (value: any, settings: any) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }: { format: any; enabled: boolean }) =>\n    enabled ? format : undefined\n","import React from 'react'\nimport { generateWinesTastes } from '@nivo/generators'\nimport { ResponsiveRadar, RadarSvgProps, svgDefaultProps } from '@nivo/radar'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/radar/meta.yml'\nimport mapper from '../../data/components/radar/mapper'\nimport { groups } from '../../data/components/radar/props'\n\ntype MappedRadarProps = Omit<RadarSvgProps<any>, 'data' | 'keys' | 'width' | 'height'>\ntype UnmappedRadarProps = Omit<MappedRadarProps, 'valueFormat'> & {\n    valueFormat: {\n        format: string\n        enabled: boolean\n    }\n}\n\nconst initialProperties: UnmappedRadarProps = {\n    indexBy: 'taste',\n    maxValue: 'auto',\n    valueFormat: { format: '>-.2f', enabled: true },\n\n    margin: {\n        top: 70,\n        right: 80,\n        bottom: 40,\n        left: 80,\n    },\n\n    curve: 'linearClosed',\n\n    borderWidth: 2,\n    borderColor: { from: 'color' },\n\n    gridLevels: 5,\n    gridShape: 'circular',\n    gridLabelOffset: 36,\n\n    enableDots: svgDefaultProps.enableDots,\n    dotSize: 10,\n    dotColor: { theme: 'background' },\n    dotBorderWidth: 2,\n    dotBorderColor: svgDefaultProps.dotBorderColor,\n    enableDotLabel: svgDefaultProps.enableDotLabel,\n    dotLabel: svgDefaultProps.dotLabel,\n    dotLabelYOffset: svgDefaultProps.dotLabelYOffset,\n\n    colors: { scheme: 'nivo' },\n    fillOpacity: 0.25,\n    blendMode: 'multiply',\n\n    animate: true,\n    motionConfig: 'wobbly',\n\n    isInteractive: true,\n\n    legends: [\n        {\n            anchor: 'top-left',\n            direction: 'column',\n            translateX: -50,\n            translateY: -40,\n            itemWidth: 80,\n            itemHeight: 20,\n            itemTextColor: '#999',\n            symbolSize: 12,\n            symbolShape: 'circle',\n            onClick: d => {\n                alert(JSON.stringify(d, null, '    '))\n            },\n            effects: [\n                {\n                    on: 'hover',\n                    style: {\n                        itemTextColor: '#000',\n                    },\n                },\n            ],\n        },\n    ],\n}\n\nconst Radar = () => (\n    <ComponentTemplate<UnmappedRadarProps, MappedRadarProps, any>\n        name=\"Radar\"\n        meta={meta.Radar}\n        icon=\"radar\"\n        flavors={meta.flavors}\n        currentFlavor=\"svg\"\n        properties={groups}\n        initialProperties={initialProperties}\n        defaultProperties={svgDefaultProps}\n        propertiesMapper={mapper}\n        codePropertiesMapper={(properties: any, data: any) => ({\n            keys: data.keys,\n            ...properties,\n        })}\n        generateData={generateWinesTastes}\n        getTabData={data => data.data}\n    >\n        {(properties, data, theme) => {\n            return (\n                <ResponsiveRadar data={data.data} keys={data.keys} {...properties} theme={theme} />\n            )\n        }}\n    </ComponentTemplate>\n)\n\nexport default Radar\n"],"names":["settingsMapper","valueFormat","mapFormat","dotLabel","value","p","key","index","props","group","type","required","help","description","flavors","defaultValue","svgDefaultProps","controlType","controlOptions","disabledValue","min","max","choices","closedCurvePropKeys","label","enableControlForFlavors","unit","step","themeProperty","defsProperties","map","choice","motionProperties","groups","groupProperties","mapping","exclude","settings","options","overrides","Object","keys","forEach","omit","mapAxis","upperFirst","enable","format","enabled","undefined","initialProperties","indexBy","maxValue","margin","top","right","bottom","left","curve","borderWidth","borderColor","from","gridLevels","gridShape","gridLabelOffset","enableDots","dotSize","dotColor","theme","dotBorderWidth","dotBorderColor","enableDotLabel","dotLabelYOffset","colors","scheme","fillOpacity","blendMode","animate","motionConfig","isInteractive","legends","anchor","direction","translateX","translateY","itemWidth","itemHeight","itemTextColor","symbolSize","symbolShape","onClick","d","alert","JSON","stringify","effects","on","style","name","meta","icon","currentFlavor","properties","defaultProperties","propertiesMapper","mapper","codePropertiesMapper","data","generateData","generateWinesTastes","getTabData"],"sourceRoot":""}