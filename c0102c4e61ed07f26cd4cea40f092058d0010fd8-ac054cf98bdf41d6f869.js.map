{"version":3,"file":"c0102c4e61ed07f26cd4cea40f092058d0010fd8-ac054cf98bdf41d6f869.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-shape/src/array.js","webpack://nivo-website/../node_modules/d3-shape/src/stack.js","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/utils.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/AnnotationNote.tsx","webpack://nivo-website/../src/AnnotationLink.tsx","webpack://nivo-website/../src/CircleAnnotationOutline.tsx","webpack://nivo-website/../src/DotAnnotationOutline.tsx","webpack://nivo-website/../src/RectAnnotationOutline.tsx","webpack://nivo-website/../src/Annotation.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/BarAnnotations.tsx","webpack://nivo-website/../src/BarLegends.tsx","webpack://nivo-website/../src/BarItem.tsx","webpack://nivo-website/../src/BarTooltip.tsx","webpack://nivo-website/../src/compute/common.ts","webpack://nivo-website/../src/compute/grouped.ts","webpack://nivo-website/../src/compute/stacked.ts","webpack://nivo-website/../src/compute/legends.ts","webpack://nivo-website/../src/Bar.tsx","webpack://nivo-website/../src/BarCanvas.tsx","webpack://nivo-website/../src/ResponsiveBar.tsx","webpack://nivo-website/../src/ResponsiveBarCanvas.tsx","webpack://nivo-website/../node_modules/lodash/_baseFilter.js","webpack://nivo-website/../node_modules/lodash/filter.js"],"sourcesContent":["export var slice = Array.prototype.slice;","import { slice } from \"./array.js\";\nimport constant from \"./constant.js\";\nimport offsetNone from \"./offset/none.js\";\nimport orderNone from \"./order/none.js\";\n\nfunction stackValue(d, key) {\n  return d[key];\n}\n\nexport default function () {\n  var keys = constant([]),\n      order = orderNone,\n      offset = offsetNone,\n      value = stackValue;\n\n  function stack(data) {\n    var kz = keys.apply(this, arguments),\n        i,\n        m = data.length,\n        n = kz.length,\n        sz = new Array(n),\n        oz;\n\n    for (i = 0; i < n; ++i) {\n      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\n        si[j] = sij = [0, +value(data[j], ki, j, data)];\n        sij.data = data[j];\n      }\n\n      si.key = ki;\n    }\n\n    for (i = 0, oz = order(sz); i < n; ++i) {\n      sz[oz[i]].index = i;\n    }\n\n    offset(sz, oz);\n    return sz;\n  }\n\n  stack.keys = function (_) {\n    return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : keys;\n  };\n\n  stack.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), stack) : value;\n  };\n\n  stack.order = function (_) {\n    return arguments.length ? (order = _ == null ? orderNone : typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : order;\n  };\n\n  stack.offset = function (_) {\n    return arguments.length ? (offset = _ == null ? offsetNone : _, stack) : offset;\n  };\n\n  return stack;\n}","export const defaultProps = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 13,\n}\n","import {\n    AnnotationSpec,\n    CircleAnnotationSpec,\n    DotAnnotationSpec,\n    Note,\n    NoteCanvas,\n    NoteSvg,\n    RectAnnotationSpec,\n} from './types'\nimport { isValidElement } from 'react'\n\nexport const isSvgNote = <Datum>(note: Note<Datum>): note is NoteSvg<Datum> => {\n    const noteType = typeof note\n\n    return (\n        isValidElement(note) ||\n        noteType === 'string' ||\n        noteType === 'function' ||\n        noteType === 'object'\n    )\n}\n\nexport const isCanvasNote = <Datum>(note: Note<Datum>): note is NoteCanvas<Datum> => {\n    const noteType = typeof note\n\n    return noteType === 'string' || noteType === 'function'\n}\n\nexport const isCircleAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is CircleAnnotationSpec<Datum> => annotationSpec.type === 'circle'\n\nexport const isDotAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is DotAnnotationSpec<Datum> => annotationSpec.type === 'dot'\n\nexport const isRectAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is RectAnnotationSpec<Datum> => annotationSpec.type === 'rect'\n","import { filter, isNumber, omit } from 'lodash'\nimport {\n    radiansToDegrees,\n    absoluteAngleDegrees,\n    degreesToRadians,\n    positionFromAngle,\n} from '@nivo/core'\nimport { defaultProps } from './props'\nimport {\n    AnnotationSpec,\n    AnnotationPositionGetter,\n    AnnotationDimensionsGetter,\n    BoundAnnotation,\n    AnnotationMatcher,\n    AnnotationInstructions,\n} from './types'\nimport { isCircleAnnotation, isRectAnnotation } from './utils'\n\nexport const bindAnnotations = <\n    Datum = {\n        x: number\n        y: number\n    }\n>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}): BoundAnnotation<Datum>[] =>\n    annotations.reduce((acc: BoundAnnotation<Datum>[], annotation) => {\n        const offset = annotation.offset || 0\n\n        return [\n            ...acc,\n            ...filter<Datum>(data, annotation.match).map(datum => {\n                const position = getPosition(datum)\n                const dimensions = getDimensions(datum)\n\n                if (isCircleAnnotation(annotation) || isRectAnnotation(annotation)) {\n                    dimensions.size = dimensions.size + offset * 2\n                    dimensions.width = dimensions.width + offset * 2\n                    dimensions.height = dimensions.height + offset * 2\n                }\n\n                // acc.push({\n                //     ...omit(annotation, ['match', 'offset']),\n                //     ...position,\n                //     ...dimensions,\n                //     size: annotation.size || dimensions.size,\n                //     datum,\n                // } as any)\n                // return [\n                //     ...acc,\n                //     {\n                //         ...omit(annotation, ['match', 'offset']),\n                //         ...position,\n                //         ...dimensions,\n                //         size: annotation.size || dimensions.size,\n                //         datum,\n                //     },\n                // ]\n                return {\n                    ...omit(annotation, ['match', 'offset']),\n                    ...position,\n                    ...dimensions,\n                    size: annotation.size || dimensions.size,\n                    datum,\n                } as Required<BoundAnnotation<Datum>>\n            }),\n        ]\n\n        // return acc\n    }, [])\n\nexport const getLinkAngle = (\n    sourceX: number,\n    sourceY: number,\n    targetX: number,\n    targetY: number\n) => {\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX)\n\n    return absoluteAngleDegrees(radiansToDegrees(angle))\n}\n\nexport const computeAnnotation = <Datum>(\n    annotation: Required<AnnotationSpec<Datum>>\n): AnnotationInstructions => {\n    const {\n        x,\n        y,\n        noteX,\n        noteY,\n        noteWidth = defaultProps.noteWidth,\n        noteTextOffset = defaultProps.noteTextOffset,\n    } = annotation\n\n    let computedNoteX: number\n    let computedNoteY: number\n\n    if (isNumber(noteX)) {\n        computedNoteX = x + noteX\n    } else if (noteX.abs !== undefined) {\n        computedNoteX = noteX.abs\n    } else {\n        throw new Error(`noteX should be either a number or an object containing an 'abs' property`)\n    }\n\n    if (isNumber(noteY)) {\n        computedNoteY = y + noteY\n    } else if (noteY.abs !== undefined) {\n        computedNoteY = noteY.abs\n    } else {\n        throw new Error(`noteY should be either a number or an object containing an 'abs' property`)\n    }\n\n    let computedX = x\n    let computedY = y\n\n    const angle = getLinkAngle(x, y, computedNoteX, computedNoteY)\n\n    if (isCircleAnnotation<Datum>(annotation)) {\n        const position = positionFromAngle(degreesToRadians(angle), annotation.size / 2)\n        computedX += position.x\n        computedY += position.y\n    }\n\n    if (isRectAnnotation<Datum>(annotation)) {\n        const eighth = Math.round((angle + 90) / 45) % 8\n        if (eighth === 0) {\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 1) {\n            computedX += annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 2) {\n            computedX += annotation.width / 2\n        }\n        if (eighth === 3) {\n            computedX += annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 4) {\n            computedY += annotation.height / 2\n        }\n        if (eighth === 5) {\n            computedX -= annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 6) {\n            computedX -= annotation.width / 2\n        }\n        if (eighth === 7) {\n            computedX -= annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n    }\n\n    let textX = computedNoteX\n    const textY = computedNoteY - noteTextOffset\n\n    let noteLineX = computedNoteX\n    const noteLineY = computedNoteY\n\n    if ((angle + 90) % 360 > 180) {\n        textX -= noteWidth\n        noteLineX -= noteWidth\n    } else {\n        noteLineX += noteWidth\n    }\n\n    return {\n        points: [\n            [computedX, computedY],\n            [computedNoteX, computedNoteY],\n            [noteLineX, noteLineY],\n        ] as [number, number][],\n        text: [textX, textY],\n        angle: angle + 90,\n    }\n}\n","import { useMemo } from 'react'\nimport { bindAnnotations, computeAnnotation } from './compute'\nimport {\n    AnnotationDimensionsGetter,\n    AnnotationMatcher,\n    AnnotationPositionGetter,\n    AnnotationSpec,\n} from './types'\n\n/**\n * Bind annotations to a dataset.\n */\nexport const useAnnotations = <Datum>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}) =>\n    useMemo(\n        () =>\n            bindAnnotations<Datum>({\n                data,\n                annotations,\n                getPosition,\n                getDimensions,\n            }),\n        [data, annotations, getPosition, getDimensions]\n    )\n\nexport const useComputedAnnotations = <Datum>({\n    annotations,\n}: {\n    annotations: Required<AnnotationSpec<Datum>>[]\n}) =>\n    useMemo(\n        () =>\n            annotations.map(annotation => ({\n                ...annotation,\n                computed: computeAnnotation<Datum>({\n                    ...annotation,\n                }),\n            })),\n        [annotations]\n    )\n\nexport const useComputedAnnotation = <Datum>(annotation: Required<AnnotationSpec<Datum>>) =>\n    useMemo(() => computeAnnotation<Datum>(annotation), [annotation])\n","import { createElement } from 'react'\nimport omit from 'lodash/omit'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { NoteSvg } from './types'\n\nexport const AnnotationNote = <Datum,>({\n    datum,\n    x,\n    y,\n    note,\n}: {\n    datum: Datum\n    x: number\n    y: number\n    note: NoteSvg<Datum>\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    if (typeof note === 'function') {\n        return createElement(note, { x, y, datum })\n    }\n\n    return (\n        <>\n            {theme.annotations.text.outlineWidth > 0 && (\n                <animated.text\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    style={{\n                        ...theme.annotations.text,\n                        strokeLinejoin: 'round',\n                        strokeWidth: theme.annotations.text.outlineWidth * 2,\n                        stroke: theme.annotations.text.outlineColor,\n                    }}\n                >\n                    {note}\n                </animated.text>\n            )}\n            <animated.text\n                x={animatedProps.x}\n                y={animatedProps.y}\n                style={omit(theme.annotations.text, ['outlineWidth', 'outlineColor'])}\n            >\n                {note}\n            </animated.text>\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath, useTheme } from '@nivo/core'\n\nexport const AnnotationLink = ({\n    points,\n    isOutline = false,\n}: {\n    points: [number, number][]\n    isOutline?: boolean\n}) => {\n    const theme = useTheme()\n\n    const path = useMemo(() => {\n        const [firstPoint, ...otherPoints] = points\n\n        return otherPoints.reduce(\n            (acc, [x, y]) => `${acc} L${x},${y}`,\n            `M${firstPoint[0]},${firstPoint[1]}`\n        )\n    }, [points])\n\n    const animatedPath = useAnimatedPath(path)\n\n    if (isOutline && theme.annotations.link.outlineWidth <= 0) {\n        return null\n    }\n\n    const style = { ...theme.annotations.link }\n    if (isOutline) {\n        style.strokeLinecap = 'square'\n        style.strokeWidth =\n            theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n        style.stroke = theme.annotations.link.outlineColor\n    }\n\n    return <animated.path fill=\"none\" d={animatedPath} style={style} />\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const CircleAnnotationOutline = ({ x, y, size }: { x: number; y: number; size: number }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { defaultProps } from './props'\n\nexport const DotAnnotationOutline = ({\n    x,\n    y,\n    size = defaultProps.dotSize,\n}: {\n    x: number\n    y: number\n    size?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth: theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.symbol}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const RectAnnotationOutline = ({\n    x,\n    y,\n    width,\n    height,\n}: {\n    x: number\n    y: number\n    width: number\n    height: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x: x - width / 2,\n        y: y - height / 2,\n        width,\n        height,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.rect\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    width={animatedProps.width}\n                    height={animatedProps.height}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.rect\n                x={animatedProps.x}\n                y={animatedProps.y}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useComputedAnnotation } from './hooks'\nimport { AnnotationNote } from './AnnotationNote'\nimport { AnnotationLink } from './AnnotationLink'\nimport { CircleAnnotationOutline } from './CircleAnnotationOutline'\nimport { DotAnnotationOutline } from './DotAnnotationOutline'\nimport { RectAnnotationOutline } from './RectAnnotationOutline'\nimport { BoundAnnotation } from './types'\nimport { isCircleAnnotation, isDotAnnotation, isRectAnnotation, isSvgNote } from './utils'\n\nexport const Annotation = <Datum,>(annotation: BoundAnnotation<Datum>) => {\n    const { datum, x, y, note } = annotation\n    const computed = useComputedAnnotation(annotation)\n\n    if (!isSvgNote(note)) {\n        throw new Error('note should be a valid react element')\n    }\n\n    return (\n        <>\n            <AnnotationLink points={computed.points} isOutline={true} />\n            {isCircleAnnotation(annotation) && (\n                <CircleAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isDotAnnotation(annotation) && (\n                <DotAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isRectAnnotation(annotation) && (\n                <RectAnnotationOutline\n                    x={x}\n                    y={y}\n                    width={annotation.width}\n                    height={annotation.height}\n                />\n            )}\n            <AnnotationLink points={computed.points} />\n            <AnnotationNote datum={datum} x={computed.text[0]} y={computed.text[1]} note={note} />\n        </>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { ComputedAnnotation } from './types'\nimport { isCanvasNote, isCircleAnnotation, isDotAnnotation, isRectAnnotation } from './utils'\n\nconst drawPoints = (ctx: CanvasRenderingContext2D, points: [number, number][]) => {\n    points.forEach(([x, y], index) => {\n        if (index === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    })\n}\n\nexport const renderAnnotationsToCanvas = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        annotations,\n        theme,\n    }: {\n        annotations: ComputedAnnotation<Datum>[]\n        theme: CompleteTheme\n    }\n) => {\n    if (annotations.length === 0) return\n\n    ctx.save()\n    annotations.forEach(annotation => {\n        if (!isCanvasNote(annotation.note)) {\n            throw new Error('note is invalid for canvas implementation')\n        }\n\n        if (theme.annotations.link.outlineWidth > 0) {\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.annotations.link.outlineColor\n            ctx.lineWidth =\n                theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n            ctx.beginPath()\n            drawPoints(ctx, annotation.computed.points)\n            ctx.stroke()\n            ctx.lineCap = 'butt'\n        }\n\n        if (isCircleAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation) && theme.annotations.symbol.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.symbol.outlineColor\n            ctx.lineWidth = theme.annotations.symbol.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isRectAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        ctx.strokeStyle = theme.annotations.link.stroke\n        ctx.lineWidth = theme.annotations.link.strokeWidth\n        ctx.beginPath()\n        drawPoints(ctx, annotation.computed.points)\n        ctx.stroke()\n\n        if (isCircleAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation)) {\n            ctx.fillStyle = theme.annotations.symbol.fill\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.fill()\n        }\n\n        if (isRectAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        if (typeof annotation.note === 'function') {\n            annotation.note(ctx, {\n                datum: annotation.datum,\n                x: annotation.computed.text[0],\n                y: annotation.computed.text[1],\n                theme,\n            })\n        } else {\n            ctx.font = `${theme.annotations.text.fontSize}px ${theme.annotations.text.fontFamily}`\n            ctx.fillStyle = theme.annotations.text.fill\n            ctx.strokeStyle = theme.annotations.text.outlineColor\n            ctx.lineWidth = theme.annotations.text.outlineWidth * 2\n            if (theme.annotations.text.outlineWidth > 0) {\n                ctx.lineJoin = 'round'\n                ctx.strokeText(\n                    annotation.note,\n                    annotation.computed.text[0],\n                    annotation.computed.text[1]\n                )\n                ctx.lineJoin = 'miter'\n            }\n            ctx.fillText(annotation.note, annotation.computed.text[0], annotation.computed.text[1])\n        }\n    })\n    ctx.restore()\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: RawDatum[], keys: string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport { uniqBy } from 'lodash'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarDatum, BarLayer, BarLayerId, BarSvgProps, ComputedBarDatumWithValue } from './types'\nimport { BarLegends } from './BarLegends'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { svgDefaultProps } from './props'\nimport { useTransition } from '@react-spring/web'\nimport { useBar } from './hooks'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel,\n    label,\n    labelSkipWidth,\n    labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as any) : null}\n                yScale={enableGridY ? (yScale as any) : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: any = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            innerWidth,\n            innerHeight,\n            width,\n            height,\n            bars,\n            xScale,\n            yScale,\n        }),\n        [commonProps, margin, innerWidth, innerHeight, width, height, bars, xScale, yScale]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { BarCanvasLayer, BarCanvasProps, BarDatum, ComputedBarDatum } from './types'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\n\ndeclare module 'react' {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    function forwardRef<T, P = {}>(\n        render: (props: P, ref: React.Ref<T>) => React.ReactElement | null\n    ): (props: P & React.RefAttributes<T>) => React.ReactElement | null\n}\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel,\n    label,\n    labelSkipWidth,\n    labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: any = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            margin,\n            innerWidth,\n            innerHeight,\n            width,\n            height,\n            bars,\n            xScale,\n            yScale,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            height,\n            innerHeight,\n            innerWidth,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            margin,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            bars,\n            xScale,\n            yScale,\n            tooltip,\n            width,\n        ]\n    )\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: xScale as any,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: yScale as any,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale as any,\n                    yScale: yScale as any,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: Omit<BarSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: Omit<BarCanvasProps<RawDatum>, 'height' | 'width'>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas width={width} height={height} {...props} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n"],"names":["slice","Array","prototype","stackValue","d","key","keys","order","offset","value","stack","data","i","oz","kz","apply","this","arguments","m","length","n","sz","sij","ki","si","j","index","_","defaultProps","isCircleAnnotation","annotationSpec","type","isDotAnnotation","isRectAnnotation","computeAnnotation","annotation","computedNoteX","computedNoteY","x","y","noteX","noteY","noteWidth","noteTextOffset","_isNumber","abs","Error","computedX","computedY","angle","sourceX","sourceY","targetX","targetY","Math","atan2","absoluteAngleDegrees","radiansToDegrees","getLinkAngle","position","positionFromAngle","degreesToRadians","size","eighth","round","height","width","textX","noteLineX","points","text","useAnnotations","annotations","getPosition","getDimensions","useMemo","reduce","acc","_filter","match","map","datum","dimensions","_omit","bindAnnotations","useComputedAnnotations","computed","AnnotationNote","note","theme","useTheme","useMotionConfig","animate","springConfig","config","animatedProps","useSpring","immediate","createElement","React","outlineWidth","animated","style","strokeLinejoin","strokeWidth","stroke","outlineColor","omit","AnnotationLink","isOutline","path","firstPoint","animatedPath","useAnimatedPath","link","strokeLinecap","fill","CircleAnnotationOutline","radius","outline","circle","cx","cy","r","DotAnnotationOutline","dotSize","symbol","RectAnnotationOutline","rect","Annotation","useComputedAnnotation","noteType","isValidElement","isSvgNote","drawPoints","ctx","forEach","moveTo","lineTo","renderAnnotationsToCanvas","save","isCanvasNote","lineCap","strokeStyle","lineWidth","beginPath","arc","PI","fillStyle","font","fontSize","fontFamily","lineJoin","strokeText","fillText","restore","computeCartesianTicks","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","centerScale","line","lineX","lineY","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","top","bottom","left","right","ticks","getFormatter","format","formatter","timeFormat","Date","d3Format","computeGridLines","_values","isArray","lines","x1","x2","y1","y2","memoizedAxisTick","memo","_value","onClick","textAnchor","props","opacity","cursor","event","g","transform","dominantBaseline","textTransform","memoizedAxis","renderTick","AxisTick","legend","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","lineX2","lineY2","transition","useTransition","t","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","rotate","domain","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","axes","isXAxis","Axis","GridLine","grid","GridLines","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","_format","fontWeight","Number","String","renderAxesToCanvas","renderGridLinesToCanvas","BarAnnotations","bars","boundAnnotations","bar","max","BarLegends","legends","toggleSerie","BoxLegendSvg","containerWidth","containerHeight","dataFrom","undefined","label","indexBy","groupMode","layout","reverse","minValue","maxValue","valueScale","indexScale","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","colorBy","colors","scheme","borderRadius","borderWidth","borderColor","isInteractive","tooltip","color","BasicTooltip","id","formattedValue","enableChip","tooltipLabel","indexValue","initialHiddenIds","markers","svgDefaultProps","layers","barComponent","labelColor","labelOpacity","labelX","labelY","shouldRenderLabel","onMouseEnter","onMouseLeave","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","handleClick","useCallback","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","to","rx","ry","focusable","tabIndex","onMouseMove","onFocus","onBlur","fillOpacity","labels","pointerEvents","defs","motionConfig","role","canvasDefaultProps","pixelRatio","window","devicePixelRatio","getIndexScale","getIndex","computeScale","all","min","normalizeData","item","filterNullValues","Object","coerceValue","gt","other","lt","range","start","end","repeat","clampToZero","generateVerticalGroupedBars","barWidth","yRef","getColor","getTooltipLabel","margin","compare","cleanedData","rawValue","barHeight","barData","hidden","push","generateHorizontalGroupedBars","xRef","generateGroupedBars","indexScaleConfig","hiddenIds","filter","includes","otherAxis","scaleSpec","clampMin","entry","k","Boolean","isFinite","bandwidth","params","flattenDeep","arr","some","concat","generateVerticalStackedBars","stackedData","stackedDataItem","generateHorizontalStackedBars","generateStackedBars","array","num","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","_uniqBy","useBar","valueFormat","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","InnerBar","partialMargin","axisTop","axisRight","gridXValues","gridYValues","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","Fragment","CartesianMarkers","layerContext","SvgWrapper","layer","Bar","renderWrapper","otherProps","Container","findBarUnderCursor","nodes","isCursorInRect","node","InnerBarCanvas","renderBar","quadraticCurveTo","closePath","canvasRef","canvasEl","useRef","useEffect","current","getContext","background","fillRect","renderLegendToCanvas","handleMouseHover","getRelativeCursor","ref","canvas","BarCanvas","forwardRef","ResponsiveBar","ResponsiveWrapper","ResponsiveBarCanvas","baseEach","module","exports","collection","predicate","result","arrayFilter","baseFilter","baseIteratee"],"sourceRoot":""}