{"version":3,"file":"8a08e82b418a1d26bd365445dd4625425eed4154-73d40fb05b3abf157577.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-path/src/path.js","webpack://nivo-website/../node_modules/d3-shape/src/constant.js","webpack://nivo-website/../node_modules/d3-shape/src/line.js","webpack://nivo-website/../node_modules/d3-shape/src/point.js","webpack://nivo-website/../node_modules/d3-time/src/day.js","webpack://nivo-website/./src/data/components/parallel-coordinates/mapper.ts","webpack://nivo-website/./src/data/components/parallel-coordinates/props.ts","webpack://nivo-website/./src/data/components/parallel-coordinates/variables.ts","webpack://nivo-website/./src/lib/settings.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/color.ts","webpack://nivo-website/../src/sets/countryCodes.ts","webpack://nivo-website/../src/sets/names.ts","webpack://nivo-website/../src/sets/programmingLanguages.ts","webpack://nivo-website/../src/bullet.ts","webpack://nivo-website/../src/chord.ts","webpack://nivo-website/../src/network.ts","webpack://nivo-website/../src/parallelCoordinates.ts","webpack://nivo-website/../src/sankey.ts","webpack://nivo-website/../src/swarmplot.ts","webpack://nivo-website/../src/xySeries.ts","webpack://nivo-website/../src/index.ts","webpack://nivo-website/../src/props.js","webpack://nivo-website/../src/hooks.js","webpack://nivo-website/../src/ParallelCoordinatesLineTooltip.js","webpack://nivo-website/../src/ParallelCoordinatesLine.js","webpack://nivo-website/../src/ParallelCoordinates.js","webpack://nivo-website/../src/ResponsiveParallelCoordinates.js","webpack://nivo-website/../src/ParallelCoordinatesCanvas.js","webpack://nivo-website/../src/ResponsiveParallelCoordinatesCanvas.js","webpack://nivo-website/../node_modules/lodash/_arrayShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/_baseShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseValues.js","webpack://nivo-website/../node_modules/lodash/_shuffleSelf.js","webpack://nivo-website/../node_modules/lodash/random.js","webpack://nivo-website/../node_modules/lodash/shuffle.js","webpack://nivo-website/../node_modules/lodash/values.js"],"sourcesContent":["var pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path();\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function moveTo(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function lineTo(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function quadraticCurveTo(x1, y1, x, y) {\n    this._ += \"Q\" + +x1 + \",\" + +y1 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + +x1 + \",\" + +y1 + \",\" + +x2 + \",\" + +y2 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function arcTo(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.\n\n    if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x1,y1).\n\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    } // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.\n\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + +(y01 * x20 > x01 * y20) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function arc(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.\n\n    if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x0,y0).\n\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    } // Is this arc empty? We’re done.\n\n\n    if (!r) return; // Does the angle go the wrong way? Flip the direction.\n\n    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.\n\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    } // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + +(da >= pi) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function rect(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + +w + \"v\" + +h + \"h\" + -w + \"Z\";\n  },\n  toString: function toString() {\n    return this._;\n  }\n};\nexport default path;","export default function (x) {\n  return function constant() {\n    return x;\n  };\n}","import { path } from \"d3-path\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport { x as pointX, y as pointY } from \"./point.js\";\nexport default function () {\n  var x = pointX,\n      y = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function line(data) {\n    var i,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer;\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();else output.lineEnd();\n      }\n\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  line.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), line) : x;\n  };\n\n  line.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), line) : y;\n  };\n\n  line.defined = function (_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n  };\n\n  line.curve = function (_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function (_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}","export function x(p) {\n  return p[0];\n}\nexport function y(p) {\n  return p[1];\n}","import interval from \"./interval.js\";\nimport { durationDay, durationMinute } from \"./duration.js\";\nvar day = interval(function (date) {\n  date.setHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setDate(date.getDate() + step);\n}, function (start, end) {\n  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n}, function (date) {\n  return date.getDate() - 1;\n});\nexport default day;\nexport var days = day.range;","import { settingsMapper } from '../../../lib/settings'\n\nexport default settingsMapper({})\n","// @ts-ignore\nimport { lineCurvePropKeys } from '@nivo/core'\n// @ts-ignore\nimport { commonDefaultProps as defaults } from '@nivo/parallel-coordinates'\nimport { themeProperty, motionProperties, groupProperties } from '../../../lib/componentProperties'\nimport { chartDimensions, ordinalColors } from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg', 'canvas']\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Chart data.',\n        type: 'Array<object | Array>',\n        required: true,\n    },\n    {\n        key: 'variables',\n        type: 'object[]',\n        flavors: allFlavors,\n        help: 'Variables configuration.',\n        description: `\n            Variables configuration, define accessor (\\`key\\`)\n            and variable type. Type must be one of\n            \\`linear\\` or \\`point\\`, \\`linear\\`\n            variables are suitable for continuous numerical\n            data such as age or cost while\n            \\`point\\` variables are suitable for\n            discrete values such as gender.\n        `,\n        group: 'Variables',\n        required: true,\n        control: {\n            type: 'array',\n            shouldCreate: false,\n            shouldRemove: false,\n            getItemTitle: (_index: number, values: any) => `${values.key} (${values.type})`,\n            props: [\n                {\n                    key: 'key',\n                    help: 'Variable key, used to access to corresponding datum value.',\n                    flavors: allFlavors,\n                    type: 'string',\n                    required: true,\n                    control: {\n                        type: 'text',\n                        disabled: true,\n                    },\n                },\n                {\n                    key: 'type',\n                    help: `Variable type, must be one of: 'linear', 'point'.`,\n                    flavors: allFlavors,\n                    type: `'linear' | 'point'`,\n                    required: true,\n                    control: {\n                        type: 'text',\n                        disabled: true,\n                    },\n                },\n                {\n                    key: 'min',\n                    help: 'Min value of linear scale.',\n                    flavors: allFlavors,\n                    type: `number | 'auto'`,\n                    required: false,\n                    when: ({ type }) => type === 'linear',\n                    control: {\n                        type: 'switchableRange',\n                        disabledValue: 'auto',\n                        defaultValue: 0,\n                        min: -100,\n                        max: 100,\n                    },\n                },\n                {\n                    key: 'max',\n                    help: 'Max value of linear scale.',\n                    flavors: allFlavors,\n                    type: `number | 'auto'`,\n                    required: false,\n                    when: ({ type }) => type === 'linear',\n                    control: {\n                        type: 'switchableRange',\n                        disabledValue: 'auto',\n                        defaultValue: 1000,\n                        min: -100,\n                        max: 100,\n                    },\n                },\n                // {\n                //     key: 'padding',\n                //     help: 'Outer padding (0~1).',\n                //     type: `number`,\n                //     controlType: 'range',\n                //     controlOptions: {\n                //         when: ({ type }) => type === 'point',\n                //         min: 0,\n                //         max: 1,\n                //         step: 0.01,\n                //     },\n                // },\n            ],\n        },\n    },\n    {\n        key: 'layout',\n        help: `Chart layout.`,\n        flavors: allFlavors,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.layout,\n        group: 'Base',\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'horizontal', value: 'horizontal' },\n                { label: 'vertical', value: 'vertical' },\n            ],\n        },\n    },\n    {\n        key: 'curve',\n        help: 'Curve interpolation.',\n        flavors: allFlavors,\n        description: `\n            Defines the curve factory to use for the line generator.\n        `,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.curve,\n        group: 'Base',\n        control: {\n            type: 'choices',\n            choices: lineCurvePropKeys.map((key: string) => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'axesPlan',\n        help: `Axes plan.`,\n        flavors: allFlavors,\n        type: `string`,\n        required: false,\n        defaultValue: defaults.axesPlan,\n        group: 'Base',\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'foreground', value: 'foreground' },\n                { label: 'background', value: 'background' },\n            ],\n        },\n    },\n    {\n        key: 'axesTicksPosition',\n        help: `Axes ticks position.`,\n        flavors: allFlavors,\n        type: `string`,\n        required: false,\n        defaultValue: defaults.axesTicksPosition,\n        group: 'Base',\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'before', value: 'before' },\n                { label: 'after', value: 'after' },\n            ],\n        },\n    },\n    ...chartDimensions(allFlavors),\n    themeProperty(['svg', 'canvas']),\n    ordinalColors({\n        flavors: allFlavors,\n        defaultValue: defaults.colors,\n    }),\n    {\n        key: 'strokeWidth',\n        help: 'Lines stroke width.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.strokeWidth,\n        control: { type: 'lineWidth' },\n        group: 'Style',\n    },\n    {\n        key: 'lineOpacity',\n        help: 'Lines opacity.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.lineOpacity,\n        control: { type: 'opacity' },\n        group: 'Style',\n    },\n    ...motionProperties(['svg'], defaults, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","export default [\n    {\n        key: 'temp',\n        type: 'linear',\n        min: 'auto',\n        max: 'auto',\n        ticksPosition: 'before',\n        legend: 'temperature',\n        legendPosition: 'start',\n        legendOffset: 20,\n    },\n    {\n        key: 'cost',\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n        ticksPosition: 'before',\n        legend: 'cost',\n        legendPosition: 'start',\n        legendOffset: 20,\n    },\n    {\n        key: 'color',\n        type: 'point',\n        padding: 1,\n        values: ['red', 'yellow', 'green'],\n        legend: 'color',\n        legendPosition: 'start',\n        legendOffset: -20,\n    },\n    {\n        key: 'target',\n        type: 'point',\n        padding: 0,\n        values: ['A', 'B', 'C', 'D', 'E'],\n        legend: 'target',\n        legendPosition: 'start',\n        legendOffset: -20,\n    },\n    {\n        key: 'volume',\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n        legend: 'volume',\n        legendPosition: 'start',\n        legendOffset: -20,\n    },\n]\n","import omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\nimport { AxisProps, CanvasAxisProps } from '@nivo/axes'\n\nexport const settingsMapper =\n    (mapping: any, { exclude = [] }: { exclude?: string[] } = {}) =>\n    (settings: any, options: any = {}) => {\n        const overrides: any = {}\n\n        Object.keys(settings).forEach(key => {\n            if (mapping[key]) {\n                overrides[key] = mapping[key](settings[key], settings, options)\n            }\n        })\n\n        return {\n            ...omit(settings, exclude),\n            ...overrides,\n        }\n    }\n\nexport type AxisWithToggle<Axis extends AxisProps | CanvasAxisProps> = NonNullable<Axis> & {\n    enable: boolean\n}\n\nexport const mapAxis = (type: 'top' | 'right' | 'bottom' | 'left') => (value: any, settings: any) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }: { format: string; enabled: boolean }) =>\n    enabled ? format : undefined\n","import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProps, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProps<X> | null\n        right?: CanvasAxisProps<Y> | null\n        bottom?: CanvasAxisProps<X> | null\n        left?: CanvasAxisProps<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProps<X> | undefined\n            : CanvasAxisProps<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n","export const randColor = () => `hsl(${Math.round(Math.random() * 360)}, 70%, 50%)`\n","export const countryCodes = [\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AS',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CC',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CU',\n    'CV',\n    'CW',\n    'CX',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FM',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HM',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IR',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KP',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MH',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MP',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NF',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PW',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SY',\n    'SZ',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'UM',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VI',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n]\n","export const names = [\n    'John',\n    'Raoul',\n    'Jane',\n    'Marcel',\n    'Ibrahim',\n    'Junko',\n    'Lyu',\n    'André',\n    'Maki',\n    'Véronique',\n    'Thibeau',\n    'Josiane',\n    'Raphaël',\n    'Mathéo',\n    'Margot',\n    'Hugo',\n    'Christian',\n    'Louis',\n    'Ella',\n    'Alton',\n    'Jimmy',\n    'Guillaume',\n    'Sébastien',\n    'Alfred',\n    'Bon',\n    'Solange',\n    'Kendrick',\n    'Jared',\n    'Satoko',\n    'Tomoko',\n    'Line',\n    'Delphine',\n    'Leonard',\n    'Alphonse',\n    'Lisa',\n    'Bart',\n    'Benjamin',\n    'Homer',\n    'Jack',\n]\n","export const programmingLanguages = [\n    'php',\n    'make',\n    'javascript',\n    'go',\n    'erlang',\n    'elixir',\n    'lisp',\n    'haskell',\n    'python',\n    'ruby',\n    'hack',\n    'scala',\n    'java',\n    'rust',\n    'c',\n    'css',\n    'sass',\n    'stylus',\n]\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\ntype Options = Partial<{\n    float: boolean\n    markerCount: number\n    measureCount: number\n    rangeCount: number\n    subtitle: string\n    title: string\n}>\n\nexport const generateBulletData = (\n    id: string,\n    max: number,\n    {\n        title,\n        subtitle,\n        rangeCount = 5,\n        measureCount = 1,\n        markerCount = 1,\n        float = false,\n    }: Options = {}\n) => {\n    const ranges = range(rangeCount - 1).reduce(\n        acc => {\n            const remaining = max - acc[0]\n            return [random(remaining, float), ...acc]\n        },\n        [max]\n    )\n\n    const measures = range(measureCount).reduce<number[]>(acc => {\n        if (acc.length === 0) return [random(max, float)]\n        return [random(acc[0], float), ...acc]\n    }, [])\n\n    const markers = range(markerCount).map(() => max * 0.6 + random(max * 0.4))\n\n    return {\n        id,\n        title,\n        subtitle,\n        ranges,\n        measures,\n        markers,\n    }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport { names } from './sets'\n\nexport const generateChordData = ({\n    keys = names,\n    size = 7,\n    minValue = 0,\n    maxValue = 2000,\n} = {}) => {\n    const maxSize = Math.min(keys.length, size)\n    const selectedKeys = keys.slice(0, maxSize)\n\n    const matrix = range(maxSize).map(() =>\n        range(maxSize).map(() => {\n            if (Math.random() < 0.66) return random(minValue, maxValue / 4)\n            return random(minValue, maxValue)\n        })\n    )\n\n    return { matrix, keys: selectedKeys }\n}\n","import random from 'lodash/random'\n\ntype Link = {\n    source: string\n    target: string\n    distance: number\n}\n\ntype ExtraNode = {\n    id: string\n    height: number\n    color: string\n    size: number\n}\n\nexport const generateNetworkData = ({\n    rootSize = 32,\n    midSize = 24,\n    leafSize = 12,\n    minMidNodes = 5,\n    maxMidNodes = 11,\n    minLeaves = 3,\n    maxLeaves = 9,\n}: {\n    rootSize?: number\n    midSize?: number\n    leafSize?: number\n    minMidNodes?: number\n    maxMidNodes?: number\n    minLeaves?: number\n    maxLeaves?: number\n} = {}) => {\n    const rootNode = {\n        id: 'Node 0',\n        height: 2,\n        size: rootSize,\n        color: 'rgb(244, 117, 96)',\n    }\n    let nodes = Array.from({ length: random(minMidNodes, maxMidNodes) }, (_, k) => ({\n        id: `Node ${k + 1}`,\n        height: 1,\n        size: midSize,\n        color: 'rgb(97, 205, 187)',\n    }))\n\n    const links: Link[] = []\n    const extraNodes: ExtraNode[] = []\n    nodes.forEach(source => {\n        links.push({\n            source: 'Node 0',\n            target: source.id,\n            distance: 80,\n        })\n        nodes.forEach(target => {\n            if (Math.random() < 0.04) {\n                links.push({\n                    source: source.id,\n                    target: target.id,\n                    distance: 80,\n                })\n            }\n        })\n        Array.from({ length: random(minLeaves, maxLeaves) }, (_, k) => {\n            extraNodes.push({\n                id: `${source.id}.${k}`,\n                height: 0,\n                size: leafSize,\n                color: 'rgb(232, 193, 160)',\n            })\n            links.push({\n                source: source.id,\n                target: `${source.id}.${k}`,\n                distance: 50,\n            })\n\n            return null\n        })\n    })\n\n    nodes.push(rootNode)\n    nodes = nodes.concat(extraNodes)\n\n    return { nodes, links }\n}\n","import random from 'lodash/random'\nimport range from 'lodash/range'\nimport shuffle from 'lodash/shuffle'\n\ntype Options = Partial<{\n    size: number\n    keys: Array<{\n        key: string\n        random?: [number, number]\n        shuffle?: string[]\n    }>\n}>\n\nexport const generateParallelCoordinatesData = ({\n    size = 26,\n    keys = [\n        { key: 'temp', random: [-10, 40] },\n        { key: 'cost', random: [200, 400000] },\n        { key: 'color', shuffle: ['red', 'yellow', 'green'] },\n        { key: 'target', shuffle: ['A', 'B', 'C', 'D', 'E'] },\n        { key: 'volume', random: [0.2, 7.6] },\n    ],\n}: Options = {}) => {\n    const datumGenerator = () =>\n        keys.reduce((acc, key) => {\n            let value\n            if (key.random !== undefined) {\n                value = random(...key.random)\n            } else if (key.shuffle !== undefined) {\n                value = shuffle(key.shuffle)[0]\n            }\n\n            return { ...acc, [key.key]: value }\n        }, {})\n\n    return range(size).map(datumGenerator)\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { randColor } from './color'\nimport { names } from './sets'\n\ntype Link = {\n    source: string\n    target: string\n    value: number\n}\n\nconst availableNodes = names.map(name => ({ id: name }))\n\nconst getNodeTargets = (id: string, links: Link[], currentPath?: string[]): string[] => {\n    const targets = links\n        .filter(({ source }) => source === id)\n        .map(({ target }) => {\n            if (target === id) {\n                throw new Error(\n                    `[sankey] a node cannot be linked on itself:\\n  link: ${id} —> ${id}`\n                )\n            }\n            if (currentPath?.includes(target)) {\n                throw new Error(\n                    `[sankey] found cyclic dependency:\\n  link: ${currentPath.join(\n                        ' —> '\n                    )} —> ${target}`\n                )\n            }\n            return target\n        })\n\n    return targets.reduce(\n        (acc, targetId) =>\n            acc.concat(\n                getNodeTargets(\n                    targetId,\n                    links,\n                    currentPath ? [...currentPath, targetId] : [id, targetId]\n                )\n            ),\n        targets\n    )\n}\n\nconst getNodesTargets = (links: Link[]) =>\n    links.reduce<Record<string, string[]>>((targetsById, link) => {\n        if (!targetsById[link.source]) {\n            targetsById[link.source] = getNodeTargets(link.source, links)\n        }\n\n        return targetsById\n    }, {})\n\nexport const generateSankeyData = ({\n    nodeCount,\n    maxIterations = 3,\n}: {\n    nodeCount?: number\n    maxIterations?: number\n} = {}) => {\n    const nodes = availableNodes.slice(0, nodeCount).map(node =>\n        Object.assign({}, node, {\n            nodeColor: randColor(),\n        })\n    )\n\n    const links: Link[] = []\n    shuffle(nodes).forEach(({ id }) => {\n        range(random(1, maxIterations)).forEach(() => {\n            const targetsById = getNodesTargets(links)\n            const randId = shuffle(nodes.filter(n => n.id !== id).map(n => n.id))[0]\n            if (\n                (!targetsById[randId] || !targetsById[randId].includes(id)) &&\n                (!targetsById[id] || !targetsById[id].includes(randId))\n            ) {\n                links.push({\n                    source: id,\n                    target: randId,\n                    value: random(5, 200),\n                })\n            }\n        })\n    })\n\n    return { nodes, links }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\n\ntype SwarmPlotDatum = {\n    id: string\n    categories?: number[]\n    group: string\n    price: number\n    volume: number\n}\n\nconst randomPrice = () => random(0, 500)\nconst randomVolume = () => random(4, 20)\nconst randomCategory = () => random(3, 17)\n\nexport const generateSwarmPlotData = (\n    groups: string[],\n    { min = 60, max = 100, categoryCount = 0 }\n) => ({\n    groups,\n    data: groups.reduce<SwarmPlotDatum[]>(\n        (acc, group, groupIndex) => [\n            ...acc,\n            ...range(random(min, max))\n                .map(() => randomPrice())\n                .map((price, index) => {\n                    const datum: SwarmPlotDatum = {\n                        id: `${groupIndex}.${index}`,\n                        group,\n                        price,\n                        volume: randomVolume(),\n                    }\n\n                    if (categoryCount > 0) {\n                        datum.categories = range(categoryCount).map(randomCategory)\n                    }\n\n                    return datum\n                }),\n        ],\n        []\n    ),\n})\n\nexport const randomizeSwarmPlotData = (previousData: ReturnType<typeof generateSwarmPlotData>) => ({\n    groups: previousData.groups,\n    data: previousData.data.map(d => {\n        const datum = {\n            ...d,\n            group: shuffle(previousData.groups)[0],\n            price: randomPrice(),\n            volume: randomVolume(),\n        }\n\n        if (d.categories !== undefined) {\n            datum.categories = range(3).map(randomCategory)\n        }\n\n        return datum\n    }),\n})\n","interface XYRangeStaticValues {\n    values: string[] | number[]\n}\n\ninterface XYRandomNumericValues {\n    length: number\n    min: number\n    max: number\n    round?: boolean\n}\n\ntype XYRangeValues = XYRangeStaticValues | XYRandomNumericValues\n\nconst getValueGenerator = (config: XYRangeValues) => {\n    let generator: (index: number) => string | number\n\n    if ('values' in config) {\n        generator = (index: number) => config.values[index]\n    } else {\n        generator = () => {\n            let value = config.min + Math.random() * (config.max - config.min)\n            if (config.round) {\n                value = Math.round(value)\n            }\n\n            return value\n        }\n    }\n\n    return generator\n}\n\nexport const generateXYSeries = ({\n    serieIds,\n    x,\n    y,\n}: {\n    serieIds: string[]\n    x: XYRangeValues\n    y: XYRangeValues\n}) => {\n    const xLength = 'length' in x ? x.length : x.values.length\n\n    const getX = getValueGenerator(x)\n    const getY = getValueGenerator(y)\n\n    return serieIds.map(serieId => {\n        return {\n            id: serieId,\n            data: Array.from({ length: xLength }).map((_, index) => {\n                return {\n                    x: getX(index),\n                    y: getY(index),\n                }\n            }),\n        }\n    })\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { timeDays } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport * as color from './color'\nimport * as sets from './sets'\n\nexport { sets }\nexport const randColor = color.randColor\n\nexport const generateProgrammingLanguageStats = (shouldShuffle = true, limit = -1) => {\n    let langs = sets.programmingLanguages\n    if (shouldShuffle) {\n        langs = shuffle(langs)\n    }\n    if (limit < 1) {\n        limit = 1 + Math.round(Math.random() * (sets.programmingLanguages.length - 1))\n    }\n\n    return langs.slice(0, limit).map(language => ({\n        label: language,\n        value: Math.round(Math.random() * 600),\n        color: randColor(),\n    }))\n}\n\nexport const uniqRand = <T>(generator: (...args: unknown[]) => T) => {\n    const used: T[] = []\n\n    return (...args: unknown[]) => {\n        let value\n        do {\n            value = generator(...args)\n        } while (used.includes(value))\n\n        used.push(value)\n\n        return value\n    }\n}\n\nexport const randCountryCode = () => shuffle(sets.countryCodes)[0]\n\ntype DrinkDatum = {\n    id: string\n    color: string\n    data: Array<{\n        color: string\n        x: string\n        y: number\n    }>\n}\n\nexport const generateDrinkStats = (xSize = 16) => {\n    const rand = () => random(0, 60)\n    const types = ['whisky', 'rhum', 'gin', 'vodka', 'cognac']\n    const country = uniqRand(randCountryCode)\n\n    const data: DrinkDatum[] = types.map(id => ({\n        id,\n        color: randColor(),\n        data: [],\n    }))\n\n    range(xSize).forEach(() => {\n        const x = country()\n        types.forEach(id => {\n            data.find(d => d.id === id)?.data.push({\n                color: randColor(),\n                x,\n                y: rand(),\n            })\n        })\n    })\n\n    return data\n}\n\nexport const generateSerie = (xSize = 20) => {\n    const max = 100 + Math.random() * (Math.random() * 600)\n\n    return range(xSize).map(() => Math.round(Math.random() * max))\n}\n\nexport const generateSeries = (ids: string[], xKeys: string[]) =>\n    ids.map(id => ({\n        id,\n        color: randColor(),\n        data: xKeys.map(x => ({ x, y: Math.round(Math.random() * 300) })),\n    }))\n\nexport const generateStackData = (size = 3) => {\n    const length = 16\n    return range(size).map(() => generateSerie(length).map((v, i) => ({ x: i, y: v })))\n}\n\nexport const generateCountriesPopulation = (size: number) => {\n    const countryCode = uniqRand(randCountryCode)\n\n    return range(size).map(() => ({\n        country: countryCode(),\n        population: 200 + Math.round(Math.random() * Math.random() * 1000000),\n    }))\n}\n\nexport const generateOrderedDayCounts = (from: Date, to: Date) => {\n    const days = timeDays(from, to)\n    const dayFormat = timeFormat('%Y-%m-%d')\n\n    return days.map(day => {\n        return {\n            value: Math.round(Math.random() * 400),\n            day: dayFormat(day),\n        }\n    })\n}\n\nexport const generateDayCounts = (from: Date, to: Date, maxSize = 0.9) => {\n    const days = generateOrderedDayCounts(from, to)\n\n    const size =\n        Math.round(days.length * (maxSize * 0.4)) +\n        Math.round(Math.random() * (days.length * (maxSize * 0.6)))\n\n    return shuffle(days).slice(0, size)\n}\n\nexport const generateCountriesData = (\n    keys: string[],\n    { size = 12, min = 0, max = 200, withColors = true } = {}\n) =>\n    sets.countryCodes.slice(0, size).map(country => {\n        const d: Record<string, unknown> = {\n            country,\n        }\n        keys.forEach(key => {\n            d[key] = random(min, max)\n            if (withColors === true) {\n                d[`${key}Color`] = randColor()\n            }\n        })\n\n        return d\n    })\n\nconst libTreeItems = [\n    [\n        'viz',\n        [\n            ['stack', [['cchart'], ['xAxis'], ['yAxis'], ['layers']]],\n            [\n                'ppie',\n                [\n                    ['chart', [['pie', [['outline'], ['slices'], ['bbox']]], ['donut'], ['gauge']]],\n                    ['legends'],\n                ],\n            ],\n        ],\n    ],\n    ['colors', [['rgb'], ['hsl']]],\n    [\n        'utils',\n        [['randomize'], ['resetClock'], ['noop'], ['tick'], ['forceGC'], ['stackTrace'], ['dbg']],\n    ],\n    ['generators', [['address'], ['city'], ['animal'], ['movie'], ['user']]],\n    [\n        'set',\n        [\n            ['clone'],\n            ['intersect'],\n            ['merge'],\n            ['reverse'],\n            ['toArray'],\n            ['toObject'],\n            ['fromCSV'],\n            ['slice'],\n            ['append'],\n            ['prepend'],\n            ['shuffle'],\n            ['pick'],\n            ['plouc'],\n        ],\n    ],\n    [\n        'text',\n        [\n            ['trim'],\n            ['slugify'],\n            ['snakeCase'],\n            ['camelCase'],\n            ['repeat'],\n            ['padLeft'],\n            ['padRight'],\n            ['sanitize'],\n            ['ploucify'],\n        ],\n    ],\n    [\n        'misc',\n        [\n            ['greetings', [['hey'], ['HOWDY'], ['aloha'], ['AHOY']]],\n            ['other'],\n            [\n                'path',\n                [\n                    ['pathA'],\n                    ['pathB', [['pathB1'], ['pathB2'], ['pathB3'], ['pathB4']]],\n                    [\n                        'pathC',\n                        [\n                            ['pathC1'],\n                            ['pathC2'],\n                            ['pathC3'],\n                            ['pathC4'],\n                            ['pathC5'],\n                            ['pathC6'],\n                            ['pathC7'],\n                            ['pathC8'],\n                            ['pathC9'],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n]\n\ninterface LibTreeDatum {\n    name: string\n    loc?: number\n    color: string\n    children?: LibTreeDatum[]\n}\n\nexport const generateLibTree = (\n    name = 'nivo',\n    limit?: number | null,\n    children = libTreeItems\n): LibTreeDatum => {\n    limit = limit || children.length\n    if (limit > children.length) {\n        limit = children.length\n    }\n\n    const tree: LibTreeDatum = {\n        name,\n        color: randColor(),\n    }\n    if (children?.length > 0) {\n        tree.children = range(limit).map((_, i) => {\n            const leaf = children[i]\n\n            // full path `${name}.${leaf[0]}`\n            return generateLibTree(leaf[0] as string, null, (leaf[1] ?? []) as any)\n        })\n    } else {\n        tree.loc = Math.round(Math.random() * 200000)\n    }\n\n    return tree\n}\n\nconst wines = ['chardonay', 'carmenere', 'syrah']\nconst wineTastes = ['fruity', 'bitter', 'heavy', 'strong', 'sunny']\n\nexport const generateWinesTastes = ({ randMin = 20, randMax = 120 } = {}) => {\n    const data = wineTastes.map(taste => {\n        const d: Record<string, unknown> = { taste }\n        wines.forEach(wine => {\n            d[wine] = random(randMin, randMax)\n        })\n\n        return d\n    })\n\n    return { data, keys: wines }\n}\n\nexport * from './bullet'\nexport * from './chord'\nexport * from './network'\nexport * from './parallelCoordinates'\nexport * from './sankey'\nexport * from './swarmplot'\nexport * from './xySeries'\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { lineCurvePropType } from '@nivo/core'\nimport { ordinalColorsPropType } from '@nivo/colors'\n\nconst commonVariablePropTypes = {\n    key: PropTypes.string.isRequired,\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n}\n\nexport const commonPropTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    variables: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.shape({\n                ...commonVariablePropTypes,\n                key: PropTypes.string.isRequired,\n                type: PropTypes.oneOf(['point']).isRequired,\n                padding: PropTypes.number,\n                values: PropTypes.arrayOf(\n                    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n                ),\n                tickValues: PropTypes.arrayOf(\n                    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n                ),\n            }),\n            PropTypes.shape({\n                ...commonVariablePropTypes,\n                type: PropTypes.oneOf(['linear']).isRequired,\n                min: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['auto'])]),\n                max: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['auto'])]),\n                tickValues: PropTypes.oneOfType([\n                    PropTypes.number,\n                    PropTypes.arrayOf(PropTypes.number),\n                ]),\n            }),\n        ])\n    ).isRequired,\n    layout: PropTypes.oneOf(['horizontal', 'vertical']).isRequired,\n    curve: lineCurvePropType.isRequired,\n    strokeWidth: PropTypes.number.isRequired,\n    lineOpacity: PropTypes.number.isRequired,\n    axesPlan: PropTypes.oneOf(['foreground', 'background']).isRequired,\n    axesTicksPosition: PropTypes.oneOf(['before', 'after']).isRequired,\n    colors: ordinalColorsPropType.isRequired,\n}\n\nexport const svgPropTypes = {\n    ...commonPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const commonDefaultProps = {\n    layout: 'horizontal',\n    curve: 'linear',\n    colors: { scheme: 'yellow_orange_red' },\n    strokeWidth: 2,\n    lineOpacity: 0.35,\n    axesPlan: 'foreground',\n    axesTicksPosition: 'after',\n    animate: true,\n    motionConfig: 'gentle',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    role: 'img',\n}\n","import { useMemo } from 'react'\nimport { line } from 'd3-shape'\nimport { scaleLinear, scalePoint } from 'd3-scale'\nimport { curveFromProp } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\n\nexport const computeParallelCoordinatesLayout = ({ width, height, data, variables, layout }) => {\n    const variablesScale = scalePoint()\n        .range(layout === 'horizontal' ? [0, width] : [height, 0])\n        .domain(variables.map(({ key }) => key))\n\n    const range = layout === 'horizontal' ? [height, 0] : [0, width]\n    const variablesWithScale = variables.map(variable => {\n        const allValues = new Set()\n        data.forEach(d => allValues.add(d[variable.key]))\n\n        let scale\n        if (variable.type === 'linear') {\n            const min =\n                variable.min !== undefined && variable.min !== 'auto'\n                    ? variable.min\n                    : Math.min(...Array.from(allValues))\n            const max =\n                variable.max !== undefined && variable.max !== 'auto'\n                    ? variable.max\n                    : Math.max(...Array.from(allValues))\n\n            scale = scaleLinear().rangeRound(range).domain([min, max])\n        }\n\n        if (variable.type === 'point') {\n            scale = scalePoint()\n                .range(range)\n                .domain(variable.values || allValues)\n\n            if (variable.padding !== undefined) {\n                scale.padding(variable.padding)\n            }\n        }\n\n        return {\n            ...variable,\n            scale,\n            values: Array.from(allValues),\n        }\n    })\n\n    const dataWithPoints = data.map((datum, index) => {\n        const points = variablesWithScale.map(variable => ({\n            x:\n                layout === 'horizontal'\n                    ? variablesScale(variable.key)\n                    : variable.scale(datum[variable.key]),\n            y:\n                layout === 'horizontal'\n                    ? variable.scale(datum[variable.key])\n                    : variablesScale(variable.key),\n        }))\n\n        return { index, ...datum, points }\n    })\n\n    return {\n        variablesScale,\n        variablesWithScale,\n        dataWithPoints,\n    }\n}\n\nexport const computeAxisDensity = (variable, data) => {\n    let kernels\n    if (variable.type === 'point') {\n        kernels = data.reduce((acc, datum) => {\n            const value = datum[variable.key]\n            let kernel = acc.find(k => k.id === value)\n            if (kernel === undefined) {\n                kernel = { id: value, count: 0 }\n                acc.push(kernel)\n            }\n            kernel.count++\n\n            return acc\n        }, [])\n        kernels = variable.scale\n            .domain()\n            .map(d => kernels.find(k => k.id === d))\n            .filter(k => k !== undefined)\n    } else if (variable.type === 'linear') {\n        kernels = variable.scale.ticks(5).map((id, index, ticks) => {\n            if (index === 0) {\n                return {\n                    id,\n                    count: variable.values.filter(v => v <= id).length,\n                }\n            }\n\n            return {\n                id,\n                count: variable.values.filter(v => v > ticks[index - 1] && v <= id).length,\n            }\n        })\n    }\n\n    if (kernels !== undefined) {\n        const scale = scaleLinear()\n            .rangeRound([0, 60])\n            .domain([0, Math.max(...kernels.map(k => k.count))])\n\n        return kernels.map(k => ({\n            id: k.id,\n            position: variable.scale(k.id),\n            size: scale(k.count),\n        }))\n    }\n\n    return []\n}\n\nexport const useParallelCoordinates = ({\n    width,\n    height,\n    data,\n    variables,\n    layout,\n    colors,\n    curve,\n}) => {\n    const getLineColor = useOrdinalColorScale(colors, 'index')\n\n    const lineGenerator = useMemo(\n        () =>\n            line()\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n\n    const { variablesScale, variablesWithScale, dataWithPoints } = useMemo(\n        () =>\n            computeParallelCoordinatesLayout({\n                width,\n                height,\n                data,\n                variables,\n                layout,\n            }),\n        [width, height, data, variables, layout]\n    )\n\n    return {\n        variablesScale,\n        variablesWithScale,\n        dataWithPoints,\n        getLineColor,\n        lineGenerator,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { TableTooltip } from '@nivo/tooltip'\n\nconst ParallelCoordinatesLineTooltip = ({ data, variables }) => {\n    return (\n        <TableTooltip\n            rows={variables.map(variable => [\n                variable.key,\n                <strong>{data[variable.key]}</strong>, // eslint-disable-line react/jsx-key\n            ])}\n        />\n    )\n}\n\nParallelCoordinatesLineTooltip.propTypes = {\n    data: PropTypes.object.isRequired,\n    variables: PropTypes.arrayOf(\n        PropTypes.shape({\n            key: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        })\n    ).isRequired,\n}\n\nexport default memo(ParallelCoordinatesLineTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport ParallelCoordinatesLineTooltip from './ParallelCoordinatesLineTooltip'\n\nconst ParallelCoordinatesLine = ({\n    data,\n    variables,\n    lineGenerator,\n    points,\n    strokeWidth,\n    color,\n    opacity,\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseHover = useCallback(\n        event => {\n            showTooltipFromEvent(\n                <ParallelCoordinatesLineTooltip data={data} variables={variables} />,\n                event\n            )\n        },\n        [data, variables]\n    )\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(lineGenerator(points))\n    const animatedProps = useSpring({\n        color,\n        opacity,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            stroke={animatedProps.color}\n            strokeWidth={strokeWidth}\n            strokeLinecap=\"round\"\n            opacity={animatedProps.opacity}\n            fill=\"none\"\n            onMouseEnter={handleMouseHover}\n            onMouseMove={handleMouseHover}\n            onMouseLeave={hideTooltip}\n        />\n    )\n}\n\nParallelCoordinatesLine.propTypes = {\n    data: PropTypes.object.isRequired,\n    variables: PropTypes.arrayOf(\n        PropTypes.shape({\n            key: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        })\n    ).isRequired,\n    lineGenerator: PropTypes.func.isRequired,\n    points: PropTypes.arrayOf(\n        PropTypes.shape({\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired,\n        })\n    ).isRequired,\n    strokeWidth: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    opacity: PropTypes.number.isRequired,\n}\n\nexport default memo(ParallelCoordinatesLine)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { SvgWrapper, useDimensions, withContainer } from '@nivo/core'\nimport { Axis } from '@nivo/axes'\nimport { svgPropTypes, svgDefaultProps } from './props'\nimport { useParallelCoordinates } from './hooks'\nimport ParallelCoordinatesLine from './ParallelCoordinatesLine'\n\nconst ParallelCoordinates = ({\n    data,\n    variables,\n    layout,\n    width,\n    height,\n    margin: partialMargin,\n    axesPlan,\n    axesTicksPosition,\n    strokeWidth,\n    lineOpacity,\n    curve,\n    colors,\n    role,\n}) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { variablesScale, variablesWithScale, dataWithPoints, lineGenerator, getLineColor } =\n        useParallelCoordinates({\n            width: innerWidth,\n            height: innerHeight,\n            data,\n            variables,\n            layout,\n            colors,\n            curve,\n        })\n\n    const axes = variablesWithScale.map(variable => (\n        <Axis\n            key={variable.key}\n            axis={layout === 'horizontal' ? 'y' : 'x'}\n            length={layout === 'horizontal' ? innerHeight : innerWidth}\n            x={layout === 'horizontal' ? variablesScale(variable.key) : 0}\n            y={layout === 'horizontal' ? 0 : variablesScale(variable.key)}\n            scale={variable.scale}\n            ticksPosition={variable.ticksPosition || axesTicksPosition}\n            tickValues={variable.tickValues}\n            tickSize={variable.tickSize}\n            tickPadding={variable.tickPadding}\n            tickRotation={variable.tickRotation}\n            format={variable.tickFormat}\n            legend={variable.legend}\n            legendPosition={variable.legendPosition}\n            legendOffset={variable.legendOffset}\n        />\n    ))\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {axesPlan === 'background' && axes}\n            {dataWithPoints.map(datum => (\n                <ParallelCoordinatesLine\n                    key={datum.index}\n                    data={datum}\n                    variables={variables}\n                    lineGenerator={lineGenerator}\n                    points={datum.points}\n                    strokeWidth={strokeWidth}\n                    opacity={lineOpacity}\n                    color={getLineColor(datum)}\n                />\n            ))}\n            {axesPlan === 'foreground' && axes}\n        </SvgWrapper>\n    )\n}\n\nParallelCoordinates.propTypes = svgPropTypes\n\nconst WrappedParallelCoordinates = withContainer(ParallelCoordinates)\nWrappedParallelCoordinates.defaultProps = svgDefaultProps\n\nexport default WrappedParallelCoordinates\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport ParallelCoordinates from './ParallelCoordinates'\n\nconst ResponsiveParallelCoordinates = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ParallelCoordinates width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveParallelCoordinates\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { useDimensions, useTheme, withContainer } from '@nivo/core'\nimport { renderAxisToCanvas } from '@nivo/axes'\nimport { commonPropTypes, commonDefaultProps } from './props'\nimport { useParallelCoordinates } from './hooks'\n\nconst ParallelCoordinatesCanvas = ({\n    data,\n    layout,\n    variables,\n    width,\n    height,\n    margin: partialMargin,\n    curve,\n    colors,\n    lineOpacity,\n    strokeWidth,\n    axesTicksPosition,\n    pixelRatio,\n}) => {\n    const canvasEl = useRef(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { variablesScale, variablesWithScale, dataWithPoints, lineGenerator, getLineColor } =\n        useParallelCoordinates({\n            width: innerWidth,\n            height: innerHeight,\n            data,\n            variables,\n            layout,\n            colors,\n            curve,\n        })\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        lineGenerator.context(ctx)\n        dataWithPoints.forEach(datum => {\n            ctx.save()\n            ctx.globalAlpha = lineOpacity\n\n            ctx.beginPath()\n            lineGenerator(datum.points)\n            ctx.strokeStyle = getLineColor(datum)\n            ctx.lineWidth = strokeWidth\n            ctx.stroke()\n\n            ctx.restore()\n        })\n\n        variablesWithScale.map(variable => {\n            renderAxisToCanvas(ctx, {\n                axis: layout === 'horizontal' ? 'y' : 'x',\n                scale: variable.scale,\n                x: layout === 'horizontal' ? variablesScale(variable.key) : 0,\n                y: layout === 'horizontal' ? 0 : variablesScale(variable.key),\n                length: layout === 'horizontal' ? innerHeight : innerWidth,\n                ticksPosition: axesTicksPosition,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        lineGenerator,\n        getLineColor,\n        lineOpacity,\n        strokeWidth,\n        dataWithPoints,\n        variablesWithScale,\n        layout,\n        axesTicksPosition,\n        theme,\n        pixelRatio,\n    ])\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n        />\n    )\n}\n\nParallelCoordinatesCanvas.propTypes = {\n    ...commonPropTypes,\n    pixelRatio: PropTypes.number.isRequired,\n}\n\nconst WrappedParallelCoordinatesCanvas = withContainer(ParallelCoordinatesCanvas)\nWrappedParallelCoordinatesCanvas.defaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n\nexport default WrappedParallelCoordinatesCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport ParallelCoordinatesCanvas from './ParallelCoordinatesCanvas'\n\nconst ResponsiveParallelCoordinatesCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <ParallelCoordinatesCanvas width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveParallelCoordinatesCanvas\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n"],"names":["pi","Math","PI","tau","epsilon","tauEpsilon","Path","this","_x0","_y0","_x1","_y1","_","path","prototype","constructor","moveTo","x","y","closePath","lineTo","quadraticCurveTo","x1","y1","bezierCurveTo","x2","y2","arcTo","r","x0","y0","x21","y21","x01","y01","l01_2","Error","abs","x20","y20","l21_2","l20_2","l21","sqrt","l01","l","tan","acos","t01","t21","arc","a0","a1","ccw","dx","cos","dy","sin","cw","da","rect","w","h","toString","defined","context","curve","output","line","data","i","d","buffer","n","length","defined0","lineStart","lineEnd","point","arguments","p","day","date","setHours","step","setDate","getDate","start","end","getTimezoneOffset","days","range","settingsMapper","allFlavors","props","key","group","flavors","help","type","required","description","control","shouldCreate","shouldRemove","getItemTitle","_index","values","disabled","when","disabledValue","defaultValue","min","max","defaults","choices","label","value","lineCurvePropKeys","chartDimensions","themeProperty","ordinalColors","motionProperties","groups","groupProperties","ticksPosition","legend","legendPosition","legendOffset","padding","mapping","exclude","settings","options","overrides","Object","keys","forEach","omit","mapAxis","upperFirst","enable","mapFormat","format","enabled","undefined","computeCartesianTicks","translate","axis","scale","tickValues","tickSize","tickPadding","tickRotation","engine","getScaleTicks","textProps","textPropsByEngine","position","centerScale","lineX","lineY","text","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","top","bottom","left","right","ticks","map","v","getFormatter","formatter","timeFormat","Date","d3Format","computeGridLines","width","height","_values","Array","isArray","lines","memoizedAxisTick","memo","_value","onClick","textAnchor","animatedProps","theme","useTheme","useMemo","style","opacity","cursor","event","_jsxs","animated","g","transform","_jsx","dominantBaseline","textTransform","memoizedAxis","renderTick","AxisTick","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","config","useSpring","lineX2","lineY2","immediate","transition","useTransition","t","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","rotate","domain","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","axes","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","_format","save","font","fontWeight","fontSize","fontFamily","strokeWidth","lineWidth","Number","lineCap","stroke","strokeStyle","beginPath","degreesToRadians","fill","fillStyle","fillText","String","restore","renderAxesToCanvas","renderGridLinesToCanvas","randColor","round","random","countryCodes","names","programmingLanguages","generateBulletData","id","title","subtitle","rangeCount","measureCount","markerCount","float","ranges","reduce","remaining","acc","measures","markers","generateChordData","size","minValue","maxValue","maxSize","selectedKeys","slice","matrix","generateNetworkData","rootSize","midSize","leafSize","minMidNodes","maxMidNodes","minLeaves","maxLeaves","rootNode","color","nodes","k","links","extraNodes","push","source","target","distance","concat","generateParallelCoordinatesData","shuffle","availableNodes","name","getNodeTargets","currentPath","targets","filter","includes","join","targetId","getNodesTargets","targetsById","link","generateSankeyData","nodeCount","maxIterations","assign","node","nodeColor","randId","randomPrice","randomVolume","randomCategory","generateSwarmPlotData","categoryCount","groupIndex","price","index","datum","volume","categories","randomizeSwarmPlotData","previousData","getValueGenerator","generator","generateXYSeries","serieIds","xLength","getX","getY","serieId","generateProgrammingLanguageStats","shouldShuffle","limit","langs","sets","language","uniqRand","used","randCountryCode","generateDrinkStats","xSize","types","country","find","generateSeries","ids","xKeys","generateDayCounts","to","timeDays","dayFormat","generateOrderedDayCounts","generateCountriesData","withColors","libTreeItems","generateLibTree","children","tree","leaf","loc","wines","wineTastes","generateWinesTastes","randMin","randMax","taste","wine","commonVariablePropTypes","commonPropTypes","isRequired","variables","shape","layout","lineCurvePropType","lineOpacity","axesPlan","axesTicksPosition","colors","ordinalColorsPropType","svgPropTypes","role","commonDefaultProps","scheme","motionConfig","svgDefaultProps","useParallelCoordinates","getLineColor","useOrdinalColorScale","lineGenerator","curveFromProp","variablesScale","scalePoint","variablesWithScale","allValues","Set","add","variable","scaleLinear","rangeRound","dataWithPoints","points","ParallelCoordinatesLineTooltip","TableTooltip","rows","propTypes","ParallelCoordinatesLine","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseHover","useCallback","e","animatedPath","useAnimatedPath","strokeLinecap","onMouseEnter","onMouseMove","onMouseLeave","ParallelCoordinates","partialMargin","margin","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","tickFormat","SvgWrapper","WrappedParallelCoordinates","withContainer","defaultProps","ResponsiveParallelCoordinates","ResponsiveWrapper","ParallelCoordinatesCanvas","pixelRatio","canvasEl","useRef","useEffect","current","getContext","background","fillRect","globalAlpha","ref","WrappedParallelCoordinatesCanvas","window","devicePixelRatio","ResponsiveParallelCoordinatesCanvas","copyArray","shuffleSelf","module","exports","array","nativeFloor","floor","nativeRandom","lower","upper","collection","arrayMap","object","baseRandom","lastIndex","rand","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","temp","arrayShuffle","baseShuffle","baseValues"],"sourceRoot":""}