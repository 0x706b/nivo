{"version":3,"file":"c1e6c2eaf947f32f90ccc50962888bf8467b71dd-47ae4f81428eda09fbd2.js","mappings":"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","sources":["webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://nivo-website/../src/CalendarYearLegends.tsx","webpack://nivo-website/../src/CalendarTooltip.tsx","webpack://nivo-website/../src/CalendarMonthPath.tsx","webpack://nivo-website/../src/CalendarMonthLegends.tsx","webpack://nivo-website/../src/CalendarDay.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack://nivo-website/../src/compute/calendar.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/Calendar.tsx","webpack://nivo-website/../src/compute/timeRange.ts","webpack://nivo-website/../src/TimeRangeDay.tsx","webpack://nivo-website/../src/TimeRange.tsx","webpack://nivo-website/../src/ResponsiveTimeRange.tsx","webpack://nivo-website/../src/ResponsiveCalendar.tsx","webpack://nivo-website/../src/CalendarCanvas.tsx","webpack://nivo-website/../src/ResponsiveCalendarCanvas.tsx"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { CalendarYearLegendsProps } from './types'\nimport { memo } from 'react'\n\nexport const CalendarYearLegends = memo(({ years, legend, theme }: CalendarYearLegendsProps) => {\n    return (\n        <>\n            {years.map(year => {\n                return (\n                    <text\n                        key={year.year}\n                        transform={`translate(${year.x},${year.y}) rotate(${year.rotation})`}\n                        textAnchor=\"middle\"\n                        style={theme.labels.text}\n                    >\n                        {legend(year.year)}\n                    </text>\n                )\n            })}\n        </>\n    )\n})\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { CalendarTooltipProps } from './types'\nimport { memo } from 'react'\n\nexport const CalendarTooltip = memo(({ value, day, color }: CalendarTooltipProps) => {\n    if (value === undefined || isNaN(Number(value))) return null\n    return <BasicTooltip id={day} value={value} color={color} enableChip={true} />\n})\n","import { CalendarMonthPathProps } from './types'\nimport { memo } from 'react'\n\nexport const CalendarMonthPath = memo(\n    ({ path, borderWidth, borderColor }: CalendarMonthPathProps) => {\n        return (\n            <path\n                d={path}\n                style={{\n                    fill: 'none',\n                    strokeWidth: borderWidth,\n                    stroke: borderColor,\n                    pointerEvents: 'none',\n                }}\n            />\n        )\n    }\n)\n","import { CalendarMonthLegendsProps } from './types'\nimport { memo } from 'react'\n\nexport const CalendarMonthLegends = memo(({ months, legend, theme }: CalendarMonthLegendsProps) => {\n    return (\n        <>\n            {months.map(month => {\n                return (\n                    <text\n                        key={`${month.date.toString()}.legend`}\n                        transform={`translate(${month.x},${month.y}) rotate(${month.rotation})`}\n                        textAnchor=\"middle\"\n                        style={theme.labels.text}\n                    >\n                        {legend(month.year, month.month, month.date)}\n                    </text>\n                )\n            })}\n        </>\n    )\n})\n","import { CalendarDayProps } from './types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { memo, useCallback } from 'react'\nimport * as React from 'react'\n\nexport const CalendarDay = memo(\n    ({\n        data,\n        x,\n        y,\n        size,\n        color,\n        borderWidth,\n        borderColor,\n        isInteractive,\n        tooltip,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        formatValue,\n    }: CalendarDayProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useCallback(\n            (event: React.MouseEvent<SVGRectElement>) => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                const formatedData = {\n                    ...data,\n                    value: formatValue(data.value),\n                    data: { ...data.data },\n                }\n                showTooltipFromEvent(React.createElement(tooltip, { ...formatedData }), event)\n                onMouseEnter?.(data, event)\n            },\n            [showTooltipFromEvent, tooltip, data, onMouseEnter, formatValue]\n        )\n        const handleMouseMove = useCallback(\n            (event: React.MouseEvent<SVGRectElement>) => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                const formatedData = {\n                    ...data,\n                    value: formatValue(data.value),\n                    data: { ...data.data },\n                }\n                showTooltipFromEvent(React.createElement(tooltip, { ...formatedData }), event)\n                onMouseMove && onMouseMove(data, event)\n            },\n            [showTooltipFromEvent, tooltip, data, onMouseMove, formatValue]\n        )\n        const handleMouseLeave = useCallback(\n            (event: React.MouseEvent<SVGRectElement>) => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                hideTooltip()\n                onMouseLeave?.(data, event)\n            },\n            [hideTooltip, data, onMouseLeave]\n        )\n        const handleClick = useCallback(\n            (event: React.MouseEvent<SVGRectElement>) => onClick?.(data, event),\n            [data, onClick]\n        )\n\n        return (\n            <rect\n                x={x}\n                y={y}\n                width={size}\n                height={size}\n                style={{\n                    fill: color,\n                    strokeWidth: borderWidth,\n                    stroke: borderColor,\n                }}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleMouseMove : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n            />\n        )\n    }\n)\n","import { timeFormat } from 'd3-time-format'\nimport { CalendarLegendProps } from './types'\nimport { CalendarTooltip } from './CalendarTooltip'\n\nconst monthLabelFormat = timeFormat('%b')\n\nconst commonDefaultProps = {\n    colors: ['#61cdbb', '#97e3d5', '#e8c1a0', '#f47560'] as string[],\n\n    align: 'center',\n    direction: 'horizontal',\n    emptyColor: '#fff',\n\n    minValue: 0,\n    maxValue: 'auto',\n\n    yearSpacing: 30,\n    yearLegend: (year: number) => year,\n    yearLegendPosition: 'before',\n    yearLegendOffset: 10,\n\n    monthBorderWidth: 2,\n    monthBorderColor: '#000',\n    monthSpacing: 0,\n    monthLegend: (_year: number, _month: number, date: Date) => monthLabelFormat(date),\n    monthLegendPosition: 'before',\n    monthLegendOffset: 10,\n\n    daySpacing: 0,\n    dayBorderWidth: 1,\n    dayBorderColor: '#000',\n\n    isInteractive: true,\n\n    legends: [] as CalendarLegendProps[],\n    tooltip: CalendarTooltip,\n} as const\n\nexport const calendarDefaultProps = {\n    ...commonDefaultProps,\n    role: 'img',\n} as const\n\nexport const calendarCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n} as const\n\nexport const timeRangeDefaultProps = {\n    ...calendarDefaultProps,\n    dayBorderColor: '#fff',\n    dayRadius: 0,\n    square: true,\n    weekdayLegendOffset: 75,\n} as const\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { isDate, memoize, range } from 'lodash'\nimport { alignBox } from '@nivo/core'\nimport { timeFormat } from 'd3-time-format'\nimport { timeDays, timeWeek, timeWeeks, timeMonths, timeYear } from 'd3-time'\nimport { ScaleQuantize } from 'd3-scale'\nimport { BBox, CalendarSvgProps, ColorScale, Datum, Year } from '../types'\n\n/**\n * Compute min/max values.\n */\nexport const computeDomain = (\n    data: CalendarSvgProps['data'],\n    minSpec: NonNullable<CalendarSvgProps['minValue']>,\n    maxSpec: NonNullable<CalendarSvgProps['maxValue']>\n) => {\n    const allValues = data.map(d => d.value)\n    const minValue = minSpec === 'auto' ? Math.min(...allValues) : minSpec\n    const maxValue = maxSpec === 'auto' ? Math.max(...allValues) : maxSpec\n\n    return [minValue, maxValue] as const\n}\n\n/**\n * Compute day cell size according to current context.\n */\nconst computeCellSize = ({\n    width,\n    height,\n    direction,\n    yearRange,\n    yearSpacing,\n    monthSpacing,\n    daySpacing,\n    maxWeeks,\n}: Pick<\n    Required<CalendarSvgProps>,\n    'direction' | 'width' | 'height' | 'yearSpacing' | 'monthSpacing' | 'daySpacing'\n> & {\n    maxWeeks: number\n    yearRange: number[]\n}) => {\n    let hCellSize\n    let vCellSize\n\n    if (direction === 'horizontal') {\n        hCellSize = (width - monthSpacing * 12 - daySpacing * maxWeeks) / maxWeeks\n        vCellSize =\n            (height - (yearRange.length - 1) * yearSpacing - yearRange.length * (8 * daySpacing)) /\n            (yearRange.length * 7)\n    } else {\n        hCellSize =\n            (width - (yearRange.length - 1) * yearSpacing - yearRange.length * (8 * daySpacing)) /\n            (yearRange.length * 7)\n        vCellSize = (height - monthSpacing * 12 - daySpacing * maxWeeks) / maxWeeks\n    }\n\n    return Math.min(hCellSize, vCellSize)\n}\n\n/**\n * Computes month path and bounding box.\n */\nconst monthPathAndBBox = ({\n    date,\n    cellSize,\n    yearIndex,\n    yearSpacing,\n    monthSpacing,\n    daySpacing,\n    direction,\n    originX,\n    originY,\n}: Record<'cellSize' | 'originX' | 'originY' | 'yearIndex', number> &\n    Pick<\n        Required<CalendarSvgProps>,\n        'direction' | 'yearSpacing' | 'monthSpacing' | 'daySpacing'\n    > & {\n        date: Date\n    }) => {\n    // first day of next month\n    const t1 = new Date(date.getFullYear(), date.getMonth() + 1, 0)\n\n    // ranges\n    const firstWeek = timeWeek.count(timeYear(date), date)\n    const lastWeek = timeWeek.count(timeYear(t1), t1)\n    const firstDay = date.getDay()\n    const lastDay = t1.getDay()\n\n    // offset according to year index and month\n    let xO = originX\n    let yO = originY\n    const yearOffset = yearIndex * (7 * (cellSize + daySpacing) + yearSpacing)\n    const monthOffset = date.getMonth() * monthSpacing\n    if (direction === 'horizontal') {\n        yO += yearOffset\n        xO += monthOffset\n    } else {\n        yO += monthOffset\n        xO += yearOffset\n    }\n\n    let path\n    const bbox = { x: xO, y: yO, width: 0, height: 0 }\n    if (direction === 'horizontal') {\n        path = [\n            `M${xO + (firstWeek + 1) * (cellSize + daySpacing)},${\n                yO + firstDay * (cellSize + daySpacing)\n            }`,\n            `H${xO + firstWeek * (cellSize + daySpacing)}V${yO + 7 * (cellSize + daySpacing)}`,\n            `H${xO + lastWeek * (cellSize + daySpacing)}V${\n                yO + (lastDay + 1) * (cellSize + daySpacing)\n            }`,\n            `H${xO + (lastWeek + 1) * (cellSize + daySpacing)}V${yO}`,\n            `H${xO + (firstWeek + 1) * (cellSize + daySpacing)}Z`,\n        ].join('')\n\n        bbox.x = xO + firstWeek * (cellSize + daySpacing)\n        bbox.width = xO + (lastWeek + 1) * (cellSize + daySpacing) - bbox.x\n        bbox.height = 7 * (cellSize + daySpacing)\n    } else {\n        path = [\n            `M${xO + firstDay * (cellSize + daySpacing)},${\n                yO + (firstWeek + 1) * (cellSize + daySpacing)\n            }`,\n            `H${xO}V${yO + (lastWeek + 1) * (cellSize + daySpacing)}`,\n            `H${xO + (lastDay + 1) * (cellSize + daySpacing)}V${\n                yO + lastWeek * (cellSize + daySpacing)\n            }`,\n            `H${xO + 7 * (cellSize + daySpacing)}V${yO + firstWeek * (cellSize + daySpacing)}`,\n            `H${xO + firstDay * (cellSize + daySpacing)}Z`,\n        ].join('')\n\n        bbox.y = yO + firstWeek * (cellSize + daySpacing)\n        bbox.width = 7 * (cellSize + daySpacing)\n        bbox.height = yO + (lastWeek + 1) * (cellSize + daySpacing) - bbox.y\n    }\n\n    return { path, bbox }\n}\n\n/**\n * Creates a memoized version of monthPathAndBBox function.\n */\nconst memoMonthPathAndBBox = memoize(\n    monthPathAndBBox,\n    ({\n        date,\n        cellSize,\n        yearIndex,\n        yearSpacing,\n        monthSpacing,\n        daySpacing,\n        direction,\n        originX,\n        originY,\n    }) => {\n        return `${date.toString()}.${cellSize}.${yearIndex}.${yearSpacing}.${monthSpacing}.${daySpacing}.${direction}.${originX}.${originY}`\n    }\n)\n\n/**\n * Returns a function to Compute day cell position for horizontal layout.\n */\nconst cellPositionHorizontal = (\n    cellSize: number,\n    yearSpacing: number,\n    monthSpacing: number,\n    daySpacing: number\n) => {\n    return (originX: number, originY: number, d: Date, yearIndex: number) => {\n        const weekOfYear = timeWeek.count(timeYear(d), d)\n\n        return {\n            x:\n                originX +\n                weekOfYear * (cellSize + daySpacing) +\n                daySpacing / 2 +\n                d.getMonth() * monthSpacing,\n            y:\n                originY +\n                d.getDay() * (cellSize + daySpacing) +\n                daySpacing / 2 +\n                yearIndex * (yearSpacing + 7 * (cellSize + daySpacing)),\n        }\n    }\n}\n\n/**\n * Returns a function to Compute day cell position for vertical layout.\n */\nconst cellPositionVertical = (\n    cellSize: number,\n    yearSpacing: number,\n    monthSpacing: number,\n    daySpacing: number\n) => {\n    return (originX: number, originY: number, d: Date, yearIndex: number) => {\n        const weekOfYear = timeWeek.count(timeYear(d), d)\n\n        return {\n            x:\n                originX +\n                d.getDay() * (cellSize + daySpacing) +\n                daySpacing / 2 +\n                yearIndex * (yearSpacing + 7 * (cellSize + daySpacing)),\n            y:\n                originY +\n                weekOfYear * (cellSize + daySpacing) +\n                daySpacing / 2 +\n                d.getMonth() * monthSpacing,\n        }\n    }\n}\n\n// used for days range and data matching\nconst dayFormat = timeFormat('%Y-%m-%d')\n\n/**\n * Compute base layout, without caring about the current data.\n */\nexport const computeLayout = ({\n    width,\n    height,\n    from,\n    to,\n    direction,\n    yearSpacing,\n    monthSpacing,\n    daySpacing,\n    align,\n}: Pick<\n    Required<CalendarSvgProps>,\n    | 'align'\n    | 'direction'\n    | 'from'\n    | 'to'\n    | 'width'\n    | 'height'\n    | 'yearSpacing'\n    | 'monthSpacing'\n    | 'daySpacing'\n>) => {\n    const fromDate = isDate(from) ? from : new Date(from)\n    const toDate = isDate(to) ? to : new Date(to)\n\n    const yearRange = range(fromDate.getFullYear(), toDate.getFullYear() + 1)\n    const maxWeeks =\n        Math.max(\n            ...yearRange.map(\n                year => timeWeeks(new Date(year, 0, 1), new Date(year + 1, 0, 1)).length\n            )\n        ) + 1\n\n    const cellSize = computeCellSize({\n        width,\n        height,\n        direction,\n        yearRange,\n        yearSpacing,\n        monthSpacing,\n        daySpacing,\n        maxWeeks,\n    })\n\n    const monthsSize = cellSize * maxWeeks + daySpacing * maxWeeks + monthSpacing * 12\n    const yearsSize =\n        (cellSize + daySpacing) * 7 * yearRange.length + yearSpacing * (yearRange.length - 1)\n\n    const calendarWidth = direction === 'horizontal' ? monthsSize : yearsSize\n    const calendarHeight = direction === 'horizontal' ? yearsSize : monthsSize\n    const [originX, originY] = alignBox(\n        {\n            x: 0,\n            y: 0,\n            width: calendarWidth,\n            height: calendarHeight,\n        },\n        {\n            x: 0,\n            y: 0,\n            width,\n            height,\n        },\n        align\n    )\n\n    let cellPosition: ReturnType<typeof cellPositionHorizontal>\n    if (direction === 'horizontal') {\n        cellPosition = cellPositionHorizontal(cellSize, yearSpacing, monthSpacing, daySpacing)\n    } else {\n        cellPosition = cellPositionVertical(cellSize, yearSpacing, monthSpacing, daySpacing)\n    }\n\n    const years: Array<{\n        year: number\n        bbox: BBox\n    }> = []\n\n    let months: Array<{\n        path: string\n        bbox: {\n            x: number\n            y: number\n            width: number\n            height: number\n        }\n        date: Date\n        year: number\n        month: number\n    }> = []\n\n    let days: Array<Omit<Datum, 'color' | 'data' | 'value'>> = []\n\n    yearRange.forEach((year, i) => {\n        const yearStart = new Date(year, 0, 1)\n        const yearEnd = new Date(year + 1, 0, 1)\n\n        days = days.concat(\n            timeDays(yearStart, yearEnd).map(dayDate => {\n                return {\n                    date: dayDate,\n                    day: dayFormat(dayDate),\n                    size: cellSize,\n                    ...cellPosition(originX, originY, dayDate, i),\n                }\n            })\n        )\n\n        const yearMonths = timeMonths(yearStart, yearEnd).map(monthDate => ({\n            date: monthDate,\n            year: monthDate.getFullYear(),\n            month: monthDate.getMonth(),\n            ...memoMonthPathAndBBox({\n                originX,\n                originY,\n                date: monthDate,\n                direction,\n                yearIndex: i,\n                yearSpacing,\n                monthSpacing,\n                daySpacing,\n                cellSize,\n            }),\n        }))\n\n        months = months.concat(yearMonths)\n\n        years.push({\n            year,\n            bbox: {\n                x: yearMonths[0].bbox.x,\n                y: yearMonths[0].bbox.y,\n                width: yearMonths[11].bbox.x - yearMonths[0].bbox.x + yearMonths[11].bbox.width,\n                height: yearMonths[11].bbox.y - yearMonths[0].bbox.y + yearMonths[11].bbox.height,\n            },\n        })\n    })\n\n    return { years, months, days, cellSize, calendarWidth, calendarHeight, originX, originY }\n}\n\n/**\n * Bind current data to computed day cells.\n */\nexport const bindDaysData = ({\n    days,\n    data,\n    colorScale,\n    emptyColor,\n}: Pick<Required<CalendarSvgProps>, 'data' | 'emptyColor'> & {\n    colorScale: ScaleQuantize<string> | ColorScale\n    days: Array<Omit<Datum, 'color' | 'data' | 'value'>>\n}) => {\n    return days.map(day => {\n        const dayData = data.find(item => item.day === day.day)\n\n        if (!dayData) {\n            return { ...day, color: emptyColor }\n        }\n\n        return {\n            ...day,\n            color: colorScale(dayData.value),\n            data: dayData,\n            value: dayData.value,\n        }\n    })\n}\n\nexport const computeYearLegendPositions = ({\n    years,\n    direction,\n    position,\n    offset,\n}: Pick<Required<CalendarSvgProps>, 'direction'> & {\n    offset: number\n    position: 'before' | 'after'\n    years: Year[]\n}) => {\n    return years.map(year => {\n        let x = 0\n        let y = 0\n        let rotation = 0\n        if (direction === 'horizontal' && position === 'before') {\n            x = year.bbox.x - offset\n            y = year.bbox.y + year.bbox.height / 2\n            rotation = -90\n        } else if (direction === 'horizontal' && position === 'after') {\n            x = year.bbox.x + year.bbox.width + offset\n            y = year.bbox.y + year.bbox.height / 2\n            rotation = -90\n        } else if (direction === 'vertical' && position === 'before') {\n            x = year.bbox.x + year.bbox.width / 2\n            y = year.bbox.y - offset\n        } else {\n            x = year.bbox.x + year.bbox.width / 2\n            y = year.bbox.y + year.bbox.height + offset\n        }\n\n        return {\n            ...year,\n            x,\n            y,\n            rotation,\n        }\n    })\n}\n\nexport const computeMonthLegendPositions = <Month extends { bbox: BBox }>({\n    months,\n    direction,\n    position,\n    offset,\n}: Pick<Required<CalendarSvgProps>, 'direction'> & {\n    offset: number\n    position: 'before' | 'after'\n    months: Month[]\n}) => {\n    return months.map(month => {\n        let x = 0\n        let y = 0\n        let rotation = 0\n        if (direction === 'horizontal' && position === 'before') {\n            x = month.bbox.x + month.bbox.width / 2\n            y = month.bbox.y - offset\n        } else if (direction === 'horizontal' && position === 'after') {\n            x = month.bbox.x + month.bbox.width / 2\n            y = month.bbox.y + month.bbox.height + offset\n        } else if (direction === 'vertical' && position === 'before') {\n            x = month.bbox.x - offset\n            y = month.bbox.y + month.bbox.height / 2\n            rotation = -90\n        } else {\n            x = month.bbox.x + month.bbox.width + offset\n            y = month.bbox.y + month.bbox.height / 2\n            rotation = -90\n        }\n\n        return {\n            ...month,\n            x,\n            y,\n            rotation,\n        }\n    })\n}\n","import { useMemo } from 'react'\nimport { ScaleQuantize, scaleQuantize } from 'd3-scale'\nimport {\n    computeDomain,\n    computeYearLegendPositions,\n    computeMonthLegendPositions,\n    bindDaysData,\n    computeLayout,\n} from './compute/calendar'\nimport { BBox, CalendarSvgProps, ColorScale, Year } from './types'\n\nexport const useCalendarLayout = ({\n    width,\n    height,\n    from,\n    to,\n    direction,\n    yearSpacing,\n    monthSpacing,\n    daySpacing,\n    align,\n}: Pick<\n    Required<CalendarSvgProps>,\n    | 'width'\n    | 'height'\n    | 'from'\n    | 'to'\n    | 'direction'\n    | 'yearSpacing'\n    | 'monthSpacing'\n    | 'daySpacing'\n    | 'align'\n>) =>\n    useMemo(\n        () =>\n            computeLayout({\n                width,\n                height,\n                from,\n                to,\n                direction,\n                yearSpacing,\n                monthSpacing,\n                daySpacing,\n                align,\n            }),\n        [width, height, from, to, direction, yearSpacing, monthSpacing, daySpacing, align]\n    )\n\nexport const useColorScale = ({\n    data,\n    minValue,\n    maxValue,\n    colors,\n    colorScale,\n}: Pick<Required<CalendarSvgProps>, 'data' | 'minValue' | 'maxValue' | 'colors'> &\n    Pick<CalendarSvgProps, 'colorScale'>) =>\n    useMemo(() => {\n        if (colorScale) return colorScale\n        const domain = computeDomain(data, minValue, maxValue)\n        const defaultColorScale = scaleQuantize<string>().domain(domain).range(colors)\n        return defaultColorScale\n    }, [data, minValue, maxValue, colors, colorScale])\n\nexport const useYearLegends = ({\n    years,\n    direction,\n    yearLegendPosition,\n    yearLegendOffset,\n}: {\n    years: Year[]\n    direction: 'horizontal' | 'vertical'\n    yearLegendPosition: 'before' | 'after'\n    yearLegendOffset: number\n}) =>\n    useMemo(\n        () =>\n            computeYearLegendPositions({\n                years,\n                direction,\n                position: yearLegendPosition,\n                offset: yearLegendOffset,\n            }),\n        [years, direction, yearLegendPosition, yearLegendOffset]\n    )\n\nexport const useMonthLegends = <Month extends { bbox: BBox }>({\n    months,\n    direction,\n    monthLegendPosition,\n    monthLegendOffset,\n}: {\n    months: Month[]\n    direction: 'horizontal' | 'vertical'\n    monthLegendPosition: 'before' | 'after'\n    monthLegendOffset: number\n}) =>\n    useMemo(\n        () =>\n            computeMonthLegendPositions({\n                months,\n                direction,\n                position: monthLegendPosition,\n                offset: monthLegendOffset,\n            }),\n        [months, direction, monthLegendPosition, monthLegendOffset]\n    )\n\nexport const useDays = ({\n    days,\n    data,\n    colorScale,\n    emptyColor,\n}: Pick<Required<CalendarSvgProps>, 'data' | 'emptyColor'> &\n    Pick<Parameters<typeof bindDaysData>[0], 'days'> & {\n        colorScale: ScaleQuantize<string> | ColorScale\n    }) =>\n    useMemo(\n        () =>\n            bindDaysData({\n                days,\n                data,\n                colorScale,\n                emptyColor,\n            }),\n        [days, data, colorScale, emptyColor]\n    )\n","import { CalendarSvgProps } from './types'\nimport { Container, SvgWrapper, useTheme, useDimensions, useValueFormatter } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { CalendarYearLegends } from './CalendarYearLegends'\nimport { CalendarMonthPath } from './CalendarMonthPath'\nimport { CalendarMonthLegends } from './CalendarMonthLegends'\nimport { CalendarDay } from './CalendarDay'\nimport { calendarDefaultProps } from './props'\nimport { useMonthLegends, useYearLegends, useCalendarLayout, useDays, useColorScale } from './hooks'\n\nconst InnerCalendar = ({\n    margin: partialMargin,\n    width,\n    height,\n\n    align = calendarDefaultProps.align,\n    colors = calendarDefaultProps.colors,\n    colorScale,\n    data,\n    direction = calendarDefaultProps.direction,\n    emptyColor = calendarDefaultProps.emptyColor,\n    from,\n    to,\n    minValue = calendarDefaultProps.minValue,\n    maxValue = calendarDefaultProps.maxValue,\n    valueFormat,\n    legendFormat,\n\n    yearLegend = calendarDefaultProps.yearLegend,\n    yearLegendOffset = calendarDefaultProps.yearLegendOffset,\n    yearLegendPosition = calendarDefaultProps.yearLegendPosition,\n    yearSpacing = calendarDefaultProps.yearSpacing,\n\n    monthBorderColor = calendarDefaultProps.monthBorderColor,\n    monthBorderWidth = calendarDefaultProps.monthBorderWidth,\n    monthLegend = calendarDefaultProps.monthLegend,\n    monthLegendOffset = calendarDefaultProps.monthLegendOffset,\n    monthLegendPosition = calendarDefaultProps.monthLegendPosition,\n    monthSpacing = calendarDefaultProps.monthSpacing,\n\n    dayBorderColor = calendarDefaultProps.dayBorderColor,\n    dayBorderWidth = calendarDefaultProps.dayBorderWidth,\n    daySpacing = calendarDefaultProps.daySpacing,\n\n    isInteractive = calendarDefaultProps.isInteractive,\n    tooltip = calendarDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n\n    legends = calendarDefaultProps.legends,\n    role = calendarDefaultProps.role,\n}: CalendarSvgProps) => {\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const { months, years, ...rest } = useCalendarLayout({\n        width: innerWidth,\n        height: innerHeight,\n        from,\n        to,\n        direction,\n        yearSpacing,\n        monthSpacing,\n        daySpacing,\n        align,\n    })\n    const colorScaleFn = useColorScale({ data, minValue, maxValue, colors, colorScale })\n    const monthLegends = useMonthLegends({\n        months,\n        direction,\n        monthLegendPosition,\n        monthLegendOffset,\n    })\n    const yearLegends = useYearLegends({ years, direction, yearLegendPosition, yearLegendOffset })\n    const days = useDays({ days: rest.days, data, colorScale: colorScaleFn, emptyColor })\n    const formatLegend = useValueFormatter(legendFormat)\n    const formatValue = useValueFormatter(valueFormat)\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {days.map(d => (\n                <CalendarDay\n                    key={d.date.toString()}\n                    data={d}\n                    x={d.x}\n                    y={d.y}\n                    size={d.size}\n                    color={d.color}\n                    borderWidth={dayBorderWidth}\n                    borderColor={dayBorderColor}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    onMouseMove={onMouseMove}\n                    isInteractive={isInteractive}\n                    tooltip={tooltip}\n                    onClick={onClick}\n                    formatValue={formatValue}\n                />\n            ))}\n            {months.map(m => (\n                <CalendarMonthPath\n                    key={m.date.toString()}\n                    path={m.path}\n                    borderWidth={monthBorderWidth}\n                    borderColor={monthBorderColor}\n                />\n            ))}\n            <CalendarMonthLegends months={monthLegends} legend={monthLegend} theme={theme} />\n            <CalendarYearLegends years={yearLegends} legend={yearLegend} theme={theme} />\n            {legends.map((legend, i) => {\n                const legendData = colorScaleFn.ticks(legend.itemCount).map(value => ({\n                    id: value,\n                    label: formatLegend(value),\n                    color: colorScaleFn(value),\n                }))\n\n                return (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={width}\n                        containerHeight={height}\n                        data={legendData}\n                    />\n                )\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Calendar = ({\n    isInteractive = calendarDefaultProps.isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: CalendarSvgProps) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerCalendar isInteractive={isInteractive} {...props} />\n    </Container>\n)\n","import { timeWeek, timeDays, timeDay } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport { DateOrString } from '../types'\nimport { isDate } from 'lodash'\n\n// Interfaces\ninterface ComputeBaseProps {\n    direction: 'horizontal' | 'vertical'\n}\n\ninterface ComputeBaseSpaceProps {\n    daySpacing: number\n    offset: number\n}\n\ninterface ComputeBaseDimensionProps {\n    cellWidth: number\n    cellHeight: number\n}\n\ninterface ComputeCellSize extends ComputeBaseProps, ComputeBaseSpaceProps {\n    totalDays: number\n    width: number\n    height: number\n    square: boolean\n}\n\ninterface ComputeCellPositions\n    extends ComputeBaseProps,\n        ComputeBaseSpaceProps,\n        ComputeBaseDimensionProps {\n    from?: DateOrString\n    to?: DateOrString\n    data: {\n        date: Date\n        day: string\n        value: number\n    }[]\n    colorScale: (value: number) => string\n    emptyColor: string\n}\n\ninterface ComputeWeekdays\n    extends Omit<ComputeBaseProps, 'daysInRange'>,\n        Omit<ComputeBaseSpaceProps, 'offset'>,\n        ComputeBaseDimensionProps {\n    ticks?: number[]\n    arrayOfWeekdays?: string[]\n}\n\ninterface Day {\n    coordinates: {\n        x: number\n        y: number\n    }\n    firstWeek: number\n    month: number\n    year: number\n    date: Date\n    color: string\n    day: string\n    value?: number\n}\n\ninterface Month {\n    date: Date\n    bbox: {\n        x: number\n        y: number\n        width: number\n        height: number\n    }\n    firstWeek: number\n    month: number\n    year: number\n}\n\ninterface ComputeMonths\n    extends ComputeBaseProps,\n        Omit<ComputeBaseSpaceProps, 'offset'>,\n        ComputeBaseDimensionProps {\n    days: Day[]\n}\n\ninterface ComputeTotalDays {\n    from?: DateOrString\n    to?: DateOrString\n    data: {\n        date: Date\n        day: string\n        value: number\n    }[]\n}\n\n// used for days range and data matching\nconst dayFormat = timeFormat('%Y-%m-%d')\n\n/**\n * Compute day cell size according to\n * current context.\n */\nexport const computeCellSize = ({\n    direction,\n    daySpacing,\n    offset,\n    square,\n    totalDays,\n    width,\n    height,\n}: ComputeCellSize) => {\n    const daysInRange = 7\n    let rows\n    let columns\n    let widthRest = width\n    let heightRest = height\n    if (direction === 'horizontal') {\n        widthRest -= offset\n        rows = daysInRange\n        columns = Math.ceil(totalDays / daysInRange)\n    } else {\n        heightRest -= offset\n        columns = daysInRange\n        rows = Math.ceil(totalDays / daysInRange)\n    }\n    // + 1 since we have to apply spacing to the rigth and left\n    const cellHeight = (heightRest - daySpacing * (rows + 1)) / rows\n    const cellWidth = (widthRest - daySpacing * (columns + 1)) / columns\n    // do we want square?\n    const size = Math.min(cellHeight, cellWidth)\n    return {\n        columns,\n        rows,\n        cellHeight: square ? size : cellHeight,\n        cellWidth: square ? size : cellWidth,\n    }\n}\n\nfunction computeGrid({\n    startDate,\n    date,\n    direction,\n}: {\n    startDate: Date\n    date: Date\n    direction: 'horizontal' | 'vertical'\n}) {\n    const firstWeek = timeWeek.count(startDate, date)\n    const month = date.getMonth()\n    const year = date.getFullYear()\n\n    let currentColumn = 0\n    let currentRow = 0\n    if (direction === 'horizontal') {\n        currentColumn = firstWeek\n        currentRow = date.getDay()\n    } else {\n        currentColumn = date.getDay()\n        currentRow = firstWeek\n    }\n\n    return { currentColumn, year, currentRow, firstWeek, month, date }\n}\n\nexport const computeCellPositions = ({\n    direction,\n    colorScale,\n    emptyColor,\n    from,\n    to,\n    data,\n    cellWidth,\n    cellHeight,\n    daySpacing,\n    offset,\n}: ComputeCellPositions) => {\n    let x = daySpacing\n    let y = daySpacing\n\n    if (direction === 'horizontal') {\n        x += offset\n    } else {\n        y += offset\n    }\n\n    // we need to determine whether we need to add days to move to correct position\n    const start = from ? from : data[0].date\n    const end = to ? to : data[data.length - 1].date\n    const startDate = isDate(start) ? start : new Date(start)\n    const endDate = isDate(end) ? end : new Date(end)\n    const dateRange = timeDays(startDate, endDate).map(dayDate => {\n        return {\n            date: dayDate,\n            day: dayFormat(dayDate),\n        }\n    })\n\n    const dataWithCellPosition = dateRange.map(day => {\n        const dayData = data.find(item => item.day === day.day)\n\n        const { currentColumn, currentRow, firstWeek, year, month, date } = computeGrid({\n            startDate,\n            date: day.date,\n            direction,\n        })\n\n        const coordinates = {\n            x: x + daySpacing * currentColumn + cellWidth * currentColumn,\n            y: y + daySpacing * currentRow + cellHeight * currentRow,\n        }\n\n        if (!dayData) {\n            return {\n                ...day,\n                coordinates,\n                firstWeek,\n                month,\n                year,\n                date,\n                color: emptyColor,\n                width: cellWidth,\n                height: cellHeight,\n            }\n        }\n\n        return {\n            ...dayData,\n            coordinates,\n            firstWeek,\n            month,\n            year,\n            date,\n            color: colorScale(dayData.value),\n            width: cellWidth,\n            height: cellHeight,\n        }\n    })\n\n    return dataWithCellPosition\n}\n\nexport const computeWeekdays = ({\n    cellHeight,\n    cellWidth,\n    direction,\n    daySpacing,\n    ticks = [1, 3, 5],\n    arrayOfWeekdays = [\n        'Sunday',\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday',\n    ],\n}: ComputeWeekdays) => {\n    const sizes = {\n        width: cellWidth + daySpacing,\n        height: cellHeight + daySpacing,\n    }\n    return ticks.map(day => ({\n        value: arrayOfWeekdays[day],\n        rotation: direction === 'horizontal' ? 0 : -90,\n        y: direction === 'horizontal' ? sizes.height * (day + 1) - sizes.height / 3 : 0,\n        x: direction === 'horizontal' ? 0 : sizes.width * (day + 1) - sizes.width / 3,\n    }))\n}\n\nexport const computeMonthLegends = ({\n    direction,\n    daySpacing,\n    days,\n    cellHeight,\n    cellWidth,\n}: ComputeMonths) => {\n    const accumulator: {\n        months: { [key: string]: Month }\n        weeks: Day[]\n    } = {\n        months: {},\n        weeks: [],\n    }\n\n    return days.reduce((acc, day) => {\n        if (acc.weeks.length === day.firstWeek) {\n            acc.weeks.push(day)\n\n            const key = `${day.year}-${day.month}`\n\n            if (!Object.keys(acc.months).includes(key)) {\n                const bbox = { x: 0, y: 0, width: 0, height: 0 }\n\n                if (direction === 'horizontal') {\n                    bbox.x = day.coordinates.x - daySpacing\n                    bbox.height = cellHeight + daySpacing\n                    bbox.width = cellWidth + daySpacing * 2\n                } else {\n                    bbox.y = day.coordinates.y - daySpacing\n                    bbox.height = cellHeight + daySpacing * 2\n                    bbox.width = cellWidth + daySpacing * 2\n                }\n\n                acc.months[key] = {\n                    date: day.date,\n                    bbox,\n                    firstWeek: day.firstWeek,\n                    month: 0,\n                    year: 0,\n                }\n            } else {\n                // enhance width/height\n                if (direction === 'horizontal') {\n                    acc.months[key].bbox.width =\n                        (day.firstWeek - acc.months[key].firstWeek) * (cellWidth + daySpacing)\n                } else {\n                    acc.months[key].bbox.height =\n                        (day.firstWeek - acc.months[key].firstWeek) * (cellHeight + daySpacing)\n                }\n            }\n        }\n        return acc\n    }, accumulator)\n}\n\nexport const computeTotalDays = ({ from, to, data }: ComputeTotalDays) => {\n    let startDate\n    let endDate\n    if (from) {\n        startDate = isDate(from) ? from : new Date(from)\n    } else {\n        startDate = data[0].date\n    }\n\n    if (from && to) {\n        endDate = isDate(to) ? to : new Date(to)\n    } else {\n        endDate = data[data.length - 1].date\n    }\n\n    return startDate.getDay() + timeDay.count(startDate, endDate)\n}\n","import { createElement, memo, useCallback } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { TimeRangeDayProps } from './types'\n\nexport const TimeRangeDay = memo(\n    ({\n        data,\n        x,\n        ry = 5,\n        rx = 5,\n        y,\n        width,\n        height,\n        color,\n        borderWidth,\n        borderColor,\n        isInteractive,\n        tooltip,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        formatValue,\n    }: TimeRangeDayProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useCallback(\n            event => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                const formatedData = {\n                    ...data,\n                    value: formatValue(data.value),\n                }\n                showTooltipFromEvent(createElement(tooltip, { ...formatedData }), event)\n                onMouseEnter?.(data, event)\n            },\n            [showTooltipFromEvent, tooltip, data, onMouseEnter, formatValue]\n        )\n        const handleMouseMove = useCallback(\n            event => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                const formatedData = {\n                    ...data,\n                    value: formatValue(data.value),\n                }\n                showTooltipFromEvent(createElement(tooltip, { ...formatedData }), event)\n                onMouseMove?.(data, event)\n            },\n            [showTooltipFromEvent, tooltip, data, onMouseMove, formatValue]\n        )\n        const handleMouseLeave = useCallback(\n            event => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                hideTooltip()\n                onMouseLeave?.(data, event)\n            },\n            [hideTooltip, data, onMouseLeave]\n        )\n        const handleClick = useCallback(event => onClick?.(data, event), [data, onClick])\n\n        return (\n            <rect\n                x={x}\n                y={y}\n                rx={rx}\n                ry={ry}\n                width={width}\n                height={height}\n                style={{\n                    fill: color,\n                    strokeWidth: borderWidth,\n                    stroke: borderColor,\n                }}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleMouseMove : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n            />\n        )\n    }\n)\n","import { useMemo } from 'react'\nimport { Container, SvgWrapper, useValueFormatter, useTheme, useDimensions } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport {\n    computeWeekdays,\n    computeCellSize,\n    computeCellPositions,\n    computeMonthLegends,\n    computeTotalDays,\n} from './compute/timeRange'\nimport { useMonthLegends, useColorScale } from './hooks'\nimport { TimeRangeDay } from './TimeRangeDay'\nimport { CalendarMonthLegends } from './CalendarMonthLegends'\nimport { TimeRangeSvgProps } from './types'\nimport { timeRangeDefaultProps } from './props'\n\nconst InnerTimeRange = ({\n    margin: partialMargin,\n    width,\n    height,\n\n    square = timeRangeDefaultProps.square,\n    colors = timeRangeDefaultProps.colors,\n    colorScale,\n    emptyColor = timeRangeDefaultProps.emptyColor,\n    from,\n    to,\n    data: _data,\n    direction = timeRangeDefaultProps.direction,\n    minValue = timeRangeDefaultProps.minValue,\n    maxValue = timeRangeDefaultProps.maxValue,\n    valueFormat,\n    legendFormat,\n\n    monthLegend = timeRangeDefaultProps.monthLegend,\n    monthLegendOffset = timeRangeDefaultProps.monthLegendOffset,\n    monthLegendPosition = timeRangeDefaultProps.monthLegendPosition,\n\n    weekdayLegendOffset = timeRangeDefaultProps.weekdayLegendOffset,\n    weekdayTicks,\n\n    dayBorderColor = timeRangeDefaultProps.dayBorderColor,\n    dayBorderWidth = timeRangeDefaultProps.dayBorderWidth,\n    daySpacing = timeRangeDefaultProps.daySpacing,\n    dayRadius = timeRangeDefaultProps.dayRadius,\n\n    isInteractive = timeRangeDefaultProps.isInteractive,\n    tooltip = timeRangeDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n\n    legends = timeRangeDefaultProps.legends,\n    role = timeRangeDefaultProps.role,\n}: TimeRangeSvgProps) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const data = useMemo(\n        () =>\n            _data\n                .map(data => ({ ...data, date: new Date(`${data.day}T00:00:00`) }))\n                .sort((left, right) => left.day.localeCompare(right.day)),\n        [_data]\n    )\n\n    const theme = useTheme()\n    const colorScaleFn = useColorScale({ data, minValue, maxValue, colors, colorScale })\n\n    const totalDays = computeTotalDays({\n        from,\n        to,\n        data,\n    })\n\n    const { cellHeight, cellWidth } = computeCellSize({\n        square,\n        offset: weekdayLegendOffset,\n        totalDays: totalDays,\n        width: innerWidth,\n        height: innerHeight,\n        daySpacing,\n        direction,\n    })\n\n    const days = computeCellPositions({\n        offset: weekdayLegendOffset,\n        colorScale: colorScaleFn,\n        emptyColor,\n        cellHeight,\n        cellWidth,\n        from,\n        to,\n        data,\n        direction,\n        daySpacing,\n    })\n\n    // map the days and reduce the month\n    const months = Object.values(\n        computeMonthLegends({\n            daySpacing,\n            direction,\n            cellHeight,\n            cellWidth,\n            days,\n        }).months\n    )\n\n    const weekdayLegends = computeWeekdays({\n        direction,\n        cellHeight,\n        cellWidth,\n        daySpacing,\n        ticks: weekdayTicks,\n    })\n\n    const monthLegends = useMonthLegends({\n        months,\n        direction,\n        monthLegendPosition,\n        monthLegendOffset,\n    })\n\n    const formatValue = useValueFormatter(valueFormat)\n    const formatLegend = useValueFormatter(legendFormat)\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {weekdayLegends.map(legend => (\n                <text\n                    key={legend.value}\n                    transform={`translate(${legend.x},${legend.y}) rotate(${legend.rotation})`}\n                    textAnchor=\"left\"\n                    style={theme.labels.text}\n                >\n                    {legend.value}\n                </text>\n            ))}\n            {days.map(d => {\n                return (\n                    <TimeRangeDay\n                        key={d.date.toString()}\n                        data={d}\n                        x={d.coordinates.x}\n                        rx={dayRadius}\n                        y={d.coordinates.y}\n                        ry={dayRadius}\n                        width={cellWidth}\n                        height={cellHeight}\n                        color={d.color}\n                        borderWidth={dayBorderWidth}\n                        borderColor={dayBorderColor}\n                        onMouseEnter={onMouseEnter}\n                        onMouseLeave={onMouseLeave}\n                        onMouseMove={onMouseMove}\n                        isInteractive={isInteractive}\n                        tooltip={tooltip}\n                        onClick={onClick}\n                        formatValue={formatValue}\n                    />\n                )\n            })}\n            <CalendarMonthLegends months={monthLegends} legend={monthLegend} theme={theme} />\n\n            {legends.map((legend, i) => {\n                const legendData = colorScaleFn.ticks(legend.itemCount).map(value => ({\n                    id: value,\n                    label: formatLegend(value),\n                    color: colorScaleFn(value),\n                }))\n\n                return (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={width}\n                        containerHeight={height}\n                        data={legendData}\n                    />\n                )\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const TimeRange = ({\n    isInteractive = timeRangeDefaultProps.isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: TimeRangeSvgProps) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerTimeRange isInteractive={isInteractive} {...props} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { TimeRange } from './TimeRange'\nimport { TimeRangeSvgProps } from './types'\n\nexport const ResponsiveTimeRange = (props: Omit<TimeRangeSvgProps, 'height' | 'width'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TimeRange width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { Calendar } from './Calendar'\nimport { CalendarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveCalendar = (props: Omit<CalendarSvgProps, 'height' | 'width'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Calendar width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { memo, useRef, useState, useEffect, useCallback } from 'react'\nimport * as React from 'react'\nimport {\n    Box,\n    Container,\n    isCursorInRect,\n    getRelativeCursor,\n    degreesToRadians,\n    useDimensions,\n    useTheme,\n    useValueFormatter,\n} from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { calendarCanvasDefaultProps } from './props'\nimport { useCalendarLayout, useColorScale, useMonthLegends, useYearLegends, useDays } from './hooks'\nimport { useTooltip } from '@nivo/tooltip'\nimport { CalendarCanvasProps } from './types'\n\nconst findDayUnderCursor = (\n    event: React.MouseEvent,\n    canvasEl: HTMLCanvasElement,\n    days: ReturnType<typeof useDays>,\n    size: number,\n    dayBorderWidth: number,\n    margin: Required<Box>\n) => {\n    const [x, y] = getRelativeCursor(canvasEl, event)\n    return days.find(day => {\n        return (\n            'value' in day &&\n            isCursorInRect(\n                day.x + margin.left - dayBorderWidth / 2,\n                day.y + margin.top - dayBorderWidth / 2,\n                size + dayBorderWidth,\n                size + dayBorderWidth,\n                x,\n                y\n            )\n        )\n    })\n}\n\nconst InnerCalendarCanvas = memo(\n    ({\n        margin: partialMargin,\n        width,\n        height,\n        pixelRatio = calendarCanvasDefaultProps.pixelRatio,\n\n        align = calendarCanvasDefaultProps.align,\n        colors = calendarCanvasDefaultProps.colors,\n        colorScale,\n        data,\n        direction = calendarCanvasDefaultProps.direction,\n        emptyColor = calendarCanvasDefaultProps.emptyColor,\n        from,\n        to,\n        minValue = calendarCanvasDefaultProps.minValue,\n        maxValue = calendarCanvasDefaultProps.maxValue,\n        valueFormat,\n        legendFormat,\n\n        yearLegend = calendarCanvasDefaultProps.yearLegend,\n        yearLegendOffset = calendarCanvasDefaultProps.yearLegendOffset,\n        yearLegendPosition = calendarCanvasDefaultProps.yearLegendPosition,\n        yearSpacing = calendarCanvasDefaultProps.yearSpacing,\n\n        monthLegend = calendarCanvasDefaultProps.monthLegend,\n        monthLegendOffset = calendarCanvasDefaultProps.monthLegendOffset,\n        monthLegendPosition = calendarCanvasDefaultProps.monthLegendPosition,\n        monthSpacing = calendarCanvasDefaultProps.monthSpacing,\n\n        dayBorderColor = calendarCanvasDefaultProps.dayBorderColor,\n        dayBorderWidth = calendarCanvasDefaultProps.dayBorderWidth,\n        daySpacing = calendarCanvasDefaultProps.daySpacing,\n\n        isInteractive = calendarCanvasDefaultProps.isInteractive,\n        tooltip = calendarCanvasDefaultProps.tooltip,\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        onMouseMove,\n\n        legends = calendarCanvasDefaultProps.legends,\n    }: CalendarCanvasProps) => {\n        const canvasEl = useRef<HTMLCanvasElement | null>(null)\n        const { innerWidth, innerHeight, outerWidth, outerHeight, margin } = useDimensions(\n            width,\n            height,\n            partialMargin\n        )\n        const { months, years, ...rest } = useCalendarLayout({\n            width: innerWidth,\n            height: innerHeight,\n            from,\n            to,\n            direction,\n            yearSpacing,\n            monthSpacing,\n            daySpacing,\n            align,\n        })\n        const colorScaleFn = useColorScale({ data, minValue, maxValue, colors, colorScale })\n        const monthLegends = useMonthLegends({\n            months,\n            direction,\n            monthLegendPosition,\n            monthLegendOffset,\n        })\n        const yearLegends = useYearLegends({\n            years,\n            direction,\n            yearLegendPosition,\n            yearLegendOffset,\n        })\n        const days = useDays({ days: rest.days, data, colorScale: colorScaleFn, emptyColor })\n        const [currentDay, setCurrentDay] = useState<ReturnType<typeof useDays>[number] | null>(\n            null\n        )\n        const theme = useTheme()\n        const formatValue = useValueFormatter(valueFormat)\n        const formatLegend = useValueFormatter(legendFormat)\n\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        useEffect(() => {\n            if (!canvasEl.current) return\n\n            canvasEl.current.width = outerWidth * pixelRatio\n            canvasEl.current.height = outerHeight * pixelRatio\n\n            const ctx = canvasEl.current.getContext('2d')\n\n            if (!ctx) return\n\n            ctx.scale(pixelRatio, pixelRatio)\n\n            ctx.fillStyle = theme.background\n            ctx.fillRect(0, 0, outerWidth, outerHeight)\n            ctx.translate(margin.left, margin.top)\n\n            days.forEach(day => {\n                ctx.fillStyle = day.color\n                if (dayBorderWidth > 0) {\n                    ctx.strokeStyle = dayBorderColor\n                    ctx.lineWidth = dayBorderWidth\n                }\n\n                ctx.beginPath()\n                ctx.rect(day.x, day.y, day.size, day.size)\n                ctx.fill()\n\n                if (dayBorderWidth > 0) {\n                    ctx.stroke()\n                }\n            })\n\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'middle'\n            ctx.fillStyle = theme.labels.text.fill ?? ''\n            ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n            monthLegends.forEach(month => {\n                ctx.save()\n                ctx.translate(month.x, month.y)\n                ctx.rotate(degreesToRadians(month.rotation))\n                ctx.fillText(String(monthLegend(month.year, month.month, month.date)), 0, 0)\n                ctx.restore()\n            })\n\n            yearLegends.forEach(year => {\n                ctx.save()\n                ctx.translate(year.x, year.y)\n                ctx.rotate(degreesToRadians(year.rotation))\n                ctx.fillText(String(yearLegend(year.year)), 0, 0)\n                ctx.restore()\n            })\n\n            legends.forEach(legend => {\n                const legendData = colorScaleFn.ticks(legend.itemCount).map(value => ({\n                    id: value,\n                    label: formatLegend(value),\n                    color: colorScaleFn(value),\n                }))\n\n                renderLegendToCanvas(ctx, {\n                    ...legend,\n                    data: legendData,\n                    containerWidth: innerWidth,\n                    containerHeight: innerHeight,\n                    theme,\n                })\n            })\n        }, [\n            canvasEl,\n            innerHeight,\n            innerWidth,\n            outerWidth,\n            outerHeight,\n            pixelRatio,\n            margin,\n            days,\n            dayBorderColor,\n            dayBorderWidth,\n            colorScale,\n            yearLegend,\n            yearLegends,\n            monthLegend,\n            monthLegends,\n            legends,\n            theme,\n            formatLegend,\n            colorScaleFn,\n        ])\n\n        const handleMouseHover = useCallback(\n            event => {\n                if (!canvasEl.current) return\n\n                const data = findDayUnderCursor(\n                    event,\n                    canvasEl.current,\n                    days,\n                    days[0].size,\n                    dayBorderWidth,\n                    margin\n                )\n\n                if (data) {\n                    setCurrentDay(data)\n\n                    if (!('value' in data)) {\n                        return\n                    }\n\n                    const formatedData = {\n                        ...data,\n                        value: formatValue(data.value),\n                        data: { ...data.data },\n                    }\n                    showTooltipFromEvent(React.createElement(tooltip, { ...formatedData }), event)\n                    !currentDay && onMouseEnter?.(data, event)\n                    onMouseMove?.(data, event)\n                    currentDay && onMouseLeave?.(data, event)\n                } else {\n                    hideTooltip()\n                    data && onMouseLeave?.(data, event)\n                }\n            },\n            [\n                canvasEl,\n                currentDay,\n                margin,\n                days,\n                setCurrentDay,\n                formatValue,\n                dayBorderWidth,\n                showTooltipFromEvent,\n                hideTooltip,\n                onMouseEnter,\n                onMouseMove,\n                onMouseLeave,\n                tooltip,\n            ]\n        )\n\n        const handleMouseLeave = useCallback(() => {\n            setCurrentDay(null)\n            hideTooltip()\n        }, [setCurrentDay, hideTooltip])\n\n        const handleClick = useCallback(\n            event => {\n                if (!onClick || !canvasEl.current) return\n\n                const data = findDayUnderCursor(\n                    event,\n                    canvasEl.current,\n                    days,\n                    days[0].size,\n                    daySpacing,\n                    margin\n                )\n\n                data && onClick(data, event)\n            },\n            [canvasEl, daySpacing, margin, days, onClick]\n        )\n\n        return (\n            <canvas\n                ref={canvasEl}\n                width={outerWidth * pixelRatio}\n                height={outerHeight * pixelRatio}\n                style={{\n                    width: outerWidth,\n                    height: outerHeight,\n                }}\n                onMouseEnter={isInteractive ? handleMouseHover : undefined}\n                onMouseMove={isInteractive ? handleMouseHover : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n            />\n        )\n    }\n)\n\nexport const CalendarCanvas = ({\n    isInteractive = calendarCanvasDefaultProps.isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: CalendarCanvasProps) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerCalendarCanvas isInteractive={isInteractive} {...props} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { CalendarCanvas } from './CalendarCanvas'\nimport { CalendarCanvasProps } from './types'\n\nexport const ResponsiveCalendarCanvas = (props: Omit<CalendarCanvasProps, 'width' | 'height'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <CalendarCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_objectWithoutProperties","excluded","sourceKeys","indexOf","objectWithoutPropertiesLoose","sourceSymbolKeys","prototype","propertyIsEnumerable","call","CalendarYearLegends","memo","years","legend","theme","year","transform","textAnchor","style","CalendarMonthPath","path","borderWidth","borderColor","d","fill","strokeWidth","stroke","pointerEvents","CalendarMonthLegends","months","month","CalendarDay","data","x","y","size","color","isInteractive","tooltip","onMouseEnter","onMouseMove","onMouseLeave","onClick","formatValue","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","useCallback","formatedData","React","handleMouseMove","handleMouseLeave","handleClick","width","height","undefined","CalendarTooltip","day","isNaN","Number","id","enableChip","monthLabelFormat","timeFormat","commonDefaultProps","colors","align","direction","emptyColor","minValue","maxValue","yearSpacing","yearLegend","yearLegendPosition","yearLegendOffset","monthBorderWidth","monthBorderColor","monthSpacing","monthLegend","monthLegendPosition","monthLegendOffset","daySpacing","dayBorderWidth","dayBorderColor","legends","calendarDefaultProps","role","calendarCanvasDefaultProps","pixelRatio","window","timeRangeDefaultProps","dayRadius","square","weekdayLegendOffset","_arrayLikeToArray","arr","len","arr2","Array","_unsupportedIterableToArray","o","minLen","arrayLikeToArray","n","toString","slice","constructor","name","from","test","_slicedToArray","isArray","arrayWithHoles","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","err","iterableToArrayLimit","unsupportedIterableToArray","TypeError","nonIterableRest","_toConsumableArray","arrayWithoutHoles","iter","iterableToArray","nonIterableSpread","memoMonthPathAndBBox","date","cellSize","yearIndex","originX","originY","t1","Date","firstWeek","timeWeek","timeYear","lastWeek","firstDay","lastDay","xO","yO","yearOffset","monthOffset","bbox","dayFormat","computeLayout","to","fromDate","toDate","yearRange","maxWeeks","Math","timeWeeks","hCellSize","vCellSize","computeCellSize","monthsSize","yearsSize","calendarWidth","calendarHeight","alignBox","cellPosition","cellPositionHorizontal","weekOfYear","cellPositionVertical","days","yearStart","yearEnd","dayDate","yearMonths","monthDate","useCalendarLayout","useMemo","useColorScale","colorScale","domain","allValues","minSpec","maxSpec","computeDomain","scaleQuantize","useYearLegends","position","offset","rotation","computeYearLegendPositions","useMonthLegends","computeMonthLegendPositions","useDays","dayData","item","bindDaysData","InnerCalendar","partialMargin","margin","valueFormat","legendFormat","useTheme","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","rest","colorScaleFn","monthLegends","yearLegends","formatLegend","useValueFormatter","m","legendData","label","containerWidth","containerHeight","Calendar","renderWrapper","props","computeCellPositions","cellWidth","cellHeight","start","end","startDate","endDate","dataWithCellPosition","currentColumn","currentRow","computeGrid","coordinates","TimeRangeDay","ry","rx","event","createElement","InnerTimeRange","_data","weekdayTicks","left","right","totalDays","timeDay","computeTotalDays","widthRest","heightRest","rows","columns","acc","weeks","computeMonthLegends","weekdayLegends","ticks","arrayOfWeekdays","sizes","computeWeekdays","TimeRange","ResponsiveTimeRange","ResponsiveCalendar","findDayUnderCursor","getRelativeCursor","canvasEl","isCursorInRect","InnerCalendarCanvas","useRef","useState","currentDay","setCurrentDay","useEffect","ctx","degreesToRadians","String","renderLegendToCanvas","handleMouseHover","ref","CalendarCanvas","ResponsiveCalendarCanvas"],"sourceRoot":""}