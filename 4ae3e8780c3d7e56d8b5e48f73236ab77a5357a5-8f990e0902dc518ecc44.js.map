{"version":3,"file":"4ae3e8780c3d7e56d8b5e48f73236ab77a5357a5-8f990e0902dc518ecc44.js","mappings":"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","sources":["webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack://nivo-website/../src/SankeyNodeTooltip.tsx","webpack://nivo-website/../src/SankeyLinkTooltip.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/SankeyNodesItem.tsx","webpack://nivo-website/../src/SankeyNodes.tsx","webpack://nivo-website/../src/SankeyLinkGradient.tsx","webpack://nivo-website/../src/SankeyLinksItem.tsx","webpack://nivo-website/../src/SankeyLinks.tsx","webpack://nivo-website/../src/links.ts","webpack://nivo-website/../src/SankeyLabels.tsx","webpack://nivo-website/../src/Sankey.tsx","webpack://nivo-website/../src/ResponsiveSankey.tsx"],"sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import { BasicTooltip } from '@nivo/tooltip'\nimport { DefaultLink, DefaultNode, SankeyNodeDatum } from './types'\n\nexport interface SankeyNodeTooltipProps<N extends DefaultNode, L extends DefaultLink> {\n    node: SankeyNodeDatum<N, L>\n}\n\nexport const SankeyNodeTooltip = <N extends DefaultNode, L extends DefaultLink>({\n    node,\n}: SankeyNodeTooltipProps<N, L>) => (\n    <BasicTooltip id={node.label} enableChip={true} color={node.color} />\n)\n","import { BasicTooltip, Chip } from '@nivo/tooltip'\nimport { DefaultLink, DefaultNode, SankeyLinkDatum } from './types'\n\nconst tooltipStyles = {\n    container: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    sourceChip: {\n        marginRight: 7,\n    },\n    targetChip: {\n        marginLeft: 7,\n        marginRight: 7,\n    },\n}\n\nexport interface SankeyLinkTooltipProps<N extends DefaultNode, L extends DefaultLink> {\n    link: SankeyLinkDatum<N, L>\n}\n\nexport const SankeyLinkTooltip = <N extends DefaultNode, L extends DefaultLink>({\n    link,\n}: SankeyLinkTooltipProps<N, L>) => (\n    <BasicTooltip\n        id={\n            <span style={tooltipStyles.container}>\n                <Chip color={link.source.color} style={tooltipStyles.sourceChip} />\n                <strong>{link.source.label}</strong>\n                {' > '}\n                <strong>{link.target.label}</strong>\n                <Chip color={link.target.color} style={tooltipStyles.targetChip} />\n                <strong>{link.formattedValue}</strong>\n            </span>\n        }\n    />\n)\n","import { sankeyCenter, sankeyJustify, sankeyLeft, sankeyRight } from 'd3-sankey'\nimport { SankeyLayerId, SankeyNodeDatum, SankeyAlignType } from './types'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { SankeyNodeTooltip } from './SankeyNodeTooltip'\nimport { SankeyLinkTooltip } from './SankeyLinkTooltip'\n\nexport const sankeyAlignmentPropMapping = {\n    center: sankeyCenter,\n    justify: sankeyJustify,\n    start: sankeyLeft,\n    end: sankeyRight,\n}\n\nexport const sankeyAlignmentPropKeys = Object.keys(sankeyAlignmentPropMapping) as SankeyAlignType[]\n\nexport const sankeyAlignmentFromProp = (prop: SankeyAlignType) => sankeyAlignmentPropMapping[prop]\n\nexport const svgDefaultProps = {\n    layout: 'horizontal' as const,\n    align: 'center' as const,\n    sort: 'auto' as const,\n\n    colors: { scheme: 'nivo' as const },\n\n    nodeOpacity: 0.75,\n    nodeHoverOpacity: 1,\n    nodeHoverOthersOpacity: 0.15,\n    nodeThickness: 12,\n    nodeSpacing: 12,\n    nodeInnerPadding: 0,\n    nodeBorderWidth: 1,\n    nodeBorderColor: { from: 'color', modifiers: [['darker', 0.5]] } as InheritedColorConfig<\n        SankeyNodeDatum<any, any>\n    >,\n    nodeBorderRadius: 0,\n\n    linkOpacity: 0.25,\n    linkHoverOpacity: 0.6,\n    linkHoverOthersOpacity: 0.15,\n    linkContract: 0,\n    linkBlendMode: 'multiply' as const,\n    enableLinkGradient: false,\n\n    enableLabels: true,\n    label: 'id',\n    labelPosition: 'inside' as const,\n    labelPadding: 9,\n    labelOrientation: 'horizontal' as const,\n    labelTextColor: { from: 'color', modifiers: [['darker', 0.8]] } as InheritedColorConfig<\n        SankeyNodeDatum<any, any>\n    >,\n\n    isInteractive: true,\n    nodeTooltip: SankeyNodeTooltip,\n    linkTooltip: SankeyLinkTooltip,\n\n    legends: [],\n\n    layers: ['links', 'nodes', 'labels', 'legends'] as SankeyLayerId[],\n\n    role: 'img',\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { useState, useMemo } from 'react'\nimport { cloneDeep } from 'lodash'\nimport { sankey as d3Sankey } from 'd3-sankey'\nimport { useTheme, usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { sankeyAlignmentFromProp } from './props'\nimport {\n    DefaultLink,\n    DefaultNode,\n    SankeyAlignFunction,\n    SankeyCommonProps,\n    SankeyDataProps,\n    SankeyLinkDatum,\n    SankeyNodeDatum,\n    SankeySortFunction,\n} from './types'\n\nconst getId = <N extends DefaultNode>(node: N) => node.id\n\nexport const computeNodeAndLinks = <N extends DefaultNode, L extends DefaultLink>({\n    data: _data,\n    formatValue,\n    layout,\n    alignFunction,\n    sortFunction,\n    linkSortMode,\n    nodeThickness,\n    nodeSpacing,\n    nodeInnerPadding,\n    width,\n    height,\n    getColor,\n    getLabel,\n}: {\n    data: SankeyDataProps<N, L>['data']\n    formatValue: (value: number) => string\n    layout: SankeyCommonProps<N, L>['layout']\n    alignFunction: SankeyAlignFunction\n    sortFunction: null | undefined | SankeySortFunction<N, L>\n    linkSortMode: null | undefined\n    nodeThickness: SankeyCommonProps<N, L>['nodeThickness']\n    nodeSpacing: SankeyCommonProps<N, L>['nodeSpacing']\n    nodeInnerPadding: SankeyCommonProps<N, L>['nodeInnerPadding']\n    width: number\n    height: number\n    getColor: (node: Omit<SankeyNodeDatum<N, L>, 'color' | 'label'>) => string\n    getLabel: (node: Omit<SankeyNodeDatum<N, L>, 'color' | 'label'>) => string\n}) => {\n    const sankey = d3Sankey()\n        .nodeAlign(alignFunction)\n        // @ts-ignore: this method signature is incorrect in current @types/d3-sankey\n        .nodeSort(sortFunction)\n        // @ts-ignore: this method is not available in current @types/d3-sankey\n        .linkSort(linkSortMode)\n        .nodeWidth(nodeThickness)\n        .nodePadding(nodeSpacing)\n        .size(layout === 'horizontal' ? [width, height] : [height, width])\n        .nodeId(getId)\n\n    // deep clone is required as the sankey diagram mutates data\n    // we need a different identity for correct updates\n    const data = (cloneDeep(_data) as unknown) as {\n        nodes: SankeyNodeDatum<N, L>[]\n        links: SankeyLinkDatum<N, L>[]\n    }\n    sankey(data)\n\n    data.nodes.forEach(node => {\n        node.color = getColor(node)\n        node.label = getLabel(node)\n        node.formattedValue = formatValue(node.value)\n\n        if (layout === 'horizontal') {\n            node.x = node.x0 + nodeInnerPadding\n            node.y = node.y0\n            node.width = Math.max(node.x1 - node.x0 - nodeInnerPadding * 2, 0)\n            node.height = Math.max(node.y1 - node.y0, 0)\n        } else {\n            node.x = node.y0\n            node.y = node.x0 + nodeInnerPadding\n            node.width = Math.max(node.y1 - node.y0, 0)\n            node.height = Math.max(node.x1 - node.x0 - nodeInnerPadding * 2, 0)\n\n            const oldX0 = node.x0\n            const oldX1 = node.x1\n\n            node.x0 = node.y0\n            node.x1 = node.y1\n            node.y0 = oldX0\n            node.y1 = oldX1\n        }\n    })\n\n    data.links.forEach(link => {\n        link.formattedValue = formatValue(link.value)\n        link.color = link.source.color\n        // @ts-ignore\n        link.pos0 = link.y0\n        // @ts-ignore\n        link.pos1 = link.y1\n        // @ts-ignore\n        link.thickness = link.width\n        // @ts-ignore\n        delete link.y0\n        // @ts-ignore\n        delete link.y1\n        // @ts-ignore\n        delete link.width\n    })\n\n    return data\n}\n\nexport const useSankey = <N extends DefaultNode, L extends DefaultLink>({\n    data,\n    valueFormat,\n    layout,\n    width,\n    height,\n    sort,\n    align,\n    colors,\n    nodeThickness,\n    nodeSpacing,\n    nodeInnerPadding,\n    nodeBorderColor,\n    label,\n    labelTextColor,\n}: {\n    data: SankeyDataProps<N, L>['data']\n    valueFormat?: SankeyCommonProps<N, L>['valueFormat']\n    layout: SankeyCommonProps<N, L>['layout']\n    width: number\n    height: number\n    sort: SankeyCommonProps<N, L>['sort']\n    align: SankeyCommonProps<N, L>['align']\n    colors: SankeyCommonProps<N, L>['colors']\n    nodeThickness: SankeyCommonProps<N, L>['nodeThickness']\n    nodeSpacing: SankeyCommonProps<N, L>['nodeSpacing']\n    nodeInnerPadding: SankeyCommonProps<N, L>['nodeInnerPadding']\n    nodeBorderColor: SankeyCommonProps<N, L>['nodeBorderColor']\n    label: SankeyCommonProps<N, L>['label']\n    labelTextColor: SankeyCommonProps<N, L>['labelTextColor']\n}) => {\n    const [currentNode, setCurrentNode] = useState<SankeyNodeDatum<N, L> | null>(null)\n    const [currentLink, setCurrentLink] = useState<SankeyLinkDatum<N, L> | null>(null)\n\n    const sortFunction = useMemo(() => {\n        if (sort === 'auto') return undefined\n        if (sort === 'input') return null\n        if (sort === 'ascending') {\n            return (a: SankeyNodeDatum<N, L>, b: SankeyNodeDatum<N, L>) => a.value - b.value\n        }\n        if (sort === 'descending') {\n            return (a: SankeyNodeDatum<N, L>, b: SankeyNodeDatum<N, L>) => b.value - a.value\n        }\n\n        return sort\n    }, [sort])\n\n    // If \"input\" sorting is used, apply this setting to links, too.\n    // (In d3, `null` means input sorting and `undefined` is the default)\n    const linkSortMode = sort === 'input' ? null : undefined\n\n    const alignFunction = useMemo(() => {\n        if (typeof align === 'function') return align\n        return sankeyAlignmentFromProp(align)\n    }, [align])\n\n    const theme = useTheme()\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getNodeBorderColor = useInheritedColor(nodeBorderColor, theme)\n\n    const getLabel = usePropertyAccessor<Omit<SankeyNodeDatum<N, L>, 'color' | 'label'>, string>(\n        label\n    )\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const { nodes, links } = useMemo(\n        () =>\n            computeNodeAndLinks<N, L>({\n                data,\n                formatValue,\n                layout,\n                alignFunction,\n                sortFunction,\n                linkSortMode,\n                nodeThickness,\n                nodeSpacing,\n                nodeInnerPadding,\n                width,\n                height,\n                getColor,\n                getLabel,\n            }),\n        [\n            data,\n            formatValue,\n            layout,\n            alignFunction,\n            sortFunction,\n            linkSortMode,\n            nodeThickness,\n            nodeSpacing,\n            nodeInnerPadding,\n            width,\n            height,\n            getColor,\n            getLabel,\n        ]\n    )\n\n    const legendData = useMemo(\n        () =>\n            nodes.map(node => ({\n                id: node.id,\n                label: node.label,\n                color: node.color,\n            })),\n        [nodes]\n    )\n\n    return {\n        nodes,\n        links,\n        legendData,\n        getNodeBorderColor,\n        currentNode,\n        setCurrentNode,\n        currentLink,\n        setCurrentLink,\n        getLabelTextColor,\n    }\n}\n","import { createElement, useCallback } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { DefaultLink, DefaultNode, SankeyCommonProps, SankeyNodeDatum } from './types'\n\ninterface SankeyNodesItemProps<N extends DefaultNode, L extends DefaultLink> {\n    node: SankeyNodeDatum<N, L>\n    x: number\n    y: number\n    width: number\n    height: number\n    color: string\n    opacity: number\n    borderWidth: SankeyCommonProps<N, L>['nodeBorderWidth']\n    borderColor: string\n    borderRadius: SankeyCommonProps<N, L>['nodeBorderRadius']\n    setCurrent: (node: SankeyNodeDatum<N, L> | null) => void\n    isInteractive: SankeyCommonProps<N, L>['isInteractive']\n    onClick?: SankeyCommonProps<N, L>['onClick']\n    tooltip: SankeyCommonProps<N, L>['nodeTooltip']\n}\n\nexport const SankeyNodesItem = <N extends DefaultNode, L extends DefaultLink>({\n    node,\n    x,\n    y,\n    width,\n    height,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    borderRadius,\n    setCurrent,\n    isInteractive,\n    onClick,\n    tooltip,\n}: SankeyNodesItemProps<N, L>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedProps = useSpring({\n        x,\n        y,\n        width,\n        height,\n        opacity,\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            setCurrent(node)\n            showTooltipFromEvent(createElement(tooltip, { node }), event, 'left')\n        },\n        [setCurrent, node, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event, 'left')\n        },\n        [showTooltipFromEvent, node, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setCurrent(null)\n        hideTooltip()\n    }, [setCurrent, hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            onClick?.(node, event)\n        },\n        [onClick, node]\n    )\n\n    return (\n        <animated.rect\n            x={animatedProps.x}\n            y={animatedProps.y}\n            rx={borderRadius}\n            ry={borderRadius}\n            width={animatedProps.width.to(v => Math.max(v, 0))}\n            height={animatedProps.height.to(v => Math.max(v, 0))}\n            fill={animatedProps.color}\n            fillOpacity={animatedProps.opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            strokeOpacity={opacity}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n","import {\n    DefaultLink,\n    DefaultNode,\n    SankeyCommonProps,\n    SankeyLinkDatum,\n    SankeyNodeDatum,\n} from './types'\nimport { SankeyNodesItem } from './SankeyNodesItem'\n\ninterface SankeyNodesProps<N extends DefaultNode, L extends DefaultLink> {\n    nodes: SankeyNodeDatum<N, L>[]\n    nodeOpacity: SankeyCommonProps<N, L>['nodeOpacity']\n    nodeHoverOpacity: SankeyCommonProps<N, L>['nodeHoverOpacity']\n    nodeHoverOthersOpacity: SankeyCommonProps<N, L>['nodeHoverOthersOpacity']\n    borderWidth: SankeyCommonProps<N, L>['nodeBorderWidth']\n    getBorderColor: (node: SankeyNodeDatum<N, L>) => string\n    borderRadius: SankeyCommonProps<N, L>['nodeBorderRadius']\n    setCurrentNode: (node: SankeyNodeDatum<N, L> | null) => void\n    currentNode: SankeyNodeDatum<N, L> | null\n    currentLink: SankeyLinkDatum<N, L> | null\n    isCurrentNode: (node: SankeyNodeDatum<N, L>) => boolean\n    isInteractive: SankeyCommonProps<N, L>['isInteractive']\n    onClick?: SankeyCommonProps<N, L>['onClick']\n    tooltip: SankeyCommonProps<N, L>['nodeTooltip']\n}\n\nexport const SankeyNodes = <N extends DefaultNode, L extends DefaultLink>({\n    nodes,\n    nodeOpacity,\n    nodeHoverOpacity,\n    nodeHoverOthersOpacity,\n    borderWidth,\n    getBorderColor,\n    borderRadius,\n    setCurrentNode,\n    currentNode,\n    currentLink,\n    isCurrentNode,\n    isInteractive,\n    onClick,\n    tooltip,\n}: SankeyNodesProps<N, L>) => {\n    const getOpacity = (node: SankeyNodeDatum<N, L>) => {\n        if (!currentNode && !currentLink) return nodeOpacity\n        if (isCurrentNode(node)) return nodeHoverOpacity\n        return nodeHoverOthersOpacity\n    }\n\n    return (\n        <>\n            {nodes.map(node => (\n                <SankeyNodesItem<N, L>\n                    key={node.id}\n                    node={node}\n                    x={node.x}\n                    y={node.y}\n                    width={node.width}\n                    height={node.height}\n                    color={node.color}\n                    opacity={getOpacity(node)}\n                    borderWidth={borderWidth}\n                    borderColor={getBorderColor(node)}\n                    borderRadius={borderRadius}\n                    setCurrent={setCurrentNode}\n                    isInteractive={isInteractive}\n                    onClick={onClick}\n                    tooltip={tooltip}\n                />\n            ))}\n        </>\n    )\n}\n","import { SankeyCommonProps } from './types'\n\ninterface SankeyLinkGradientProps {\n    id: string\n    layout: SankeyCommonProps<any, any>['layout']\n    startColor: string\n    endColor: string\n}\n\nexport const SankeyLinkGradient = ({\n    id,\n    layout,\n    startColor,\n    endColor,\n}: SankeyLinkGradientProps) => {\n    let gradientProps: {\n        x1: string\n        x2: string\n        y1: string\n        y2: string\n    }\n    if (layout === 'horizontal') {\n        gradientProps = {\n            x1: '0%',\n            x2: '100%',\n            y1: '0%',\n            y2: '0%',\n        }\n    } else {\n        gradientProps = {\n            x1: '0%',\n            x2: '0%',\n            y1: '0%',\n            y2: '100%',\n        }\n    }\n\n    return (\n        <linearGradient id={id} spreadMethod=\"pad\" {...gradientProps}>\n            <stop offset=\"0%\" stopColor={startColor} />\n            <stop offset=\"100%\" stopColor={endColor} />\n        </linearGradient>\n    )\n}\n","import { createElement, useCallback } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { SankeyLinkGradient } from './SankeyLinkGradient'\nimport { DefaultLink, DefaultNode, SankeyCommonProps, SankeyLinkDatum } from './types'\n\ninterface SankeyLinksItemProps<N extends DefaultNode, L extends DefaultLink> {\n    link: SankeyLinkDatum<N, L>\n    layout: SankeyCommonProps<N, L>['layout']\n    path: string\n    color: string\n    opacity: number\n    blendMode: SankeyCommonProps<N, L>['linkBlendMode']\n    enableGradient: SankeyCommonProps<N, L>['enableLinkGradient']\n    setCurrent: (link: SankeyLinkDatum<N, L> | null) => void\n    isInteractive: SankeyCommonProps<N, L>['isInteractive']\n    onClick?: SankeyCommonProps<N, L>['onClick']\n    tooltip: SankeyCommonProps<N, L>['linkTooltip']\n}\n\nexport const SankeyLinksItem = <N extends DefaultNode, L extends DefaultLink>({\n    link,\n    layout,\n    path,\n    color,\n    opacity,\n    blendMode,\n    enableGradient,\n    setCurrent,\n    tooltip,\n    isInteractive,\n    onClick,\n}: SankeyLinksItemProps<N, L>) => {\n    const linkId = `${link.source.id}.${link.target.id}`\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        opacity,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            setCurrent(link)\n            showTooltipFromEvent(createElement(tooltip, { link }), event, 'left')\n        },\n        [setCurrent, link, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { link }), event, 'left')\n        },\n        [showTooltipFromEvent, link, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setCurrent(null)\n        hideTooltip()\n    }, [setCurrent, hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            onClick?.(link, event)\n        },\n        [onClick, link]\n    )\n\n    return (\n        <>\n            {enableGradient && (\n                <SankeyLinkGradient\n                    id={linkId}\n                    layout={layout}\n                    startColor={link.startColor || link.source.color}\n                    endColor={link.endColor || link.target.color}\n                />\n            )}\n            <animated.path\n                fill={enableGradient ? `url(\"#${encodeURI(linkId)}\")` : animatedProps.color}\n                d={animatedPath}\n                fillOpacity={animatedProps.opacity}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleMouseMove : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                style={{ mixBlendMode: blendMode }}\n            />\n        </>\n    )\n}\n","import { sankeyLinkHorizontal, sankeyLinkVertical } from './links'\nimport {\n    DefaultLink,\n    DefaultNode,\n    SankeyCommonProps,\n    SankeyLinkDatum,\n    SankeyNodeDatum,\n} from './types'\nimport { SankeyLinksItem } from './SankeyLinksItem'\nimport { useMemo } from 'react'\n\ninterface SankeyLinksProps<N extends DefaultNode, L extends DefaultLink> {\n    layout: SankeyCommonProps<N, L>['layout']\n    links: SankeyLinkDatum<N, L>[]\n    linkOpacity: SankeyCommonProps<N, L>['linkOpacity']\n    linkHoverOpacity: SankeyCommonProps<N, L>['linkHoverOpacity']\n    linkHoverOthersOpacity: SankeyCommonProps<N, L>['linkHoverOthersOpacity']\n    linkContract: SankeyCommonProps<N, L>['linkContract']\n    linkBlendMode: SankeyCommonProps<N, L>['linkBlendMode']\n    enableLinkGradient: SankeyCommonProps<N, L>['enableLinkGradient']\n    tooltip: SankeyCommonProps<N, L>['linkTooltip']\n    setCurrentLink: (link: SankeyLinkDatum<N, L> | null) => void\n    currentLink: SankeyLinkDatum<N, L> | null\n    currentNode: SankeyNodeDatum<N, L> | null\n    isCurrentLink: (link: SankeyLinkDatum<N, L>) => boolean\n    isInteractive: SankeyCommonProps<N, L>['isInteractive']\n    onClick?: SankeyCommonProps<N, L>['onClick']\n}\n\nexport const SankeyLinks = <N extends DefaultNode, L extends DefaultLink>({\n    links,\n    layout,\n    linkOpacity,\n    linkHoverOpacity,\n    linkHoverOthersOpacity,\n    linkContract,\n    linkBlendMode,\n    enableLinkGradient,\n    setCurrentLink,\n    currentLink,\n    currentNode,\n    isCurrentLink,\n    isInteractive,\n    onClick,\n    tooltip,\n}: SankeyLinksProps<N, L>) => {\n    const getOpacity = (link: SankeyLinkDatum<N, L>) => {\n        if (!currentNode && !currentLink) return linkOpacity\n        if (isCurrentLink(link)) return linkHoverOpacity\n        return linkHoverOthersOpacity\n    }\n\n    const getLinkPath = useMemo(\n        () => (layout === 'horizontal' ? sankeyLinkHorizontal() : sankeyLinkVertical()),\n        [layout]\n    )\n\n    return (\n        <>\n            {links.map(link => (\n                <SankeyLinksItem<N, L>\n                    key={`${link.source.id}.${link.target.id}`}\n                    link={link}\n                    layout={layout}\n                    path={getLinkPath(link, linkContract)}\n                    color={link.color}\n                    opacity={getOpacity(link)}\n                    blendMode={linkBlendMode}\n                    enableGradient={enableLinkGradient}\n                    setCurrent={setCurrentLink}\n                    isInteractive={isInteractive}\n                    onClick={onClick}\n                    tooltip={tooltip}\n                />\n            ))}\n        </>\n    )\n}\n","import { line, curveMonotoneX, curveMonotoneY } from 'd3-shape'\nimport { DefaultLink, DefaultNode, SankeyLinkDatum } from './types'\n\nexport const sankeyLinkHorizontal = <N extends DefaultNode, L extends DefaultLink>() => {\n    const lineGenerator = line().curve(curveMonotoneX)\n\n    return (link: SankeyLinkDatum<N, L>, contract: number) => {\n        const thickness = Math.max(1, link.thickness - contract * 2)\n        const halfThickness = thickness / 2\n        const linkLength = link.target.x0 - link.source.x1\n        const padLength = linkLength * 0.12\n\n        const dots: [number, number][] = [\n            [link.source.x1, link.pos0 - halfThickness],\n            [link.source.x1 + padLength, link.pos0 - halfThickness],\n            [link.target.x0 - padLength, link.pos1 - halfThickness],\n            [link.target.x0, link.pos1 - halfThickness],\n            [link.target.x0, link.pos1 + halfThickness],\n            [link.target.x0 - padLength, link.pos1 + halfThickness],\n            [link.source.x1 + padLength, link.pos0 + halfThickness],\n            [link.source.x1, link.pos0 + halfThickness],\n            [link.source.x1, link.pos0 - halfThickness],\n        ]\n\n        return lineGenerator(dots) + 'Z'\n    }\n}\n\nexport const sankeyLinkVertical = <N extends DefaultNode, L extends DefaultLink>() => {\n    const lineGenerator = line().curve(curveMonotoneY)\n\n    return (link: SankeyLinkDatum<N, L>, contract: number) => {\n        const thickness = Math.max(1, link.thickness - contract * 2)\n        const halfThickness = thickness / 2\n        const linkLength = link.target.y0 - link.source.y1\n        const padLength = linkLength * 0.12\n\n        const dots: [number, number][] = [\n            [link.pos0 + halfThickness, link.source.y1],\n            [link.pos0 + halfThickness, link.source.y1 + padLength],\n            [link.pos1 + halfThickness, link.target.y0 - padLength],\n            [link.pos1 + halfThickness, link.target.y0],\n            [link.pos1 - halfThickness, link.target.y0],\n            [link.pos1 - halfThickness, link.target.y0 - padLength],\n            [link.pos0 - halfThickness, link.source.y1 + padLength],\n            [link.pos0 - halfThickness, link.source.y1],\n            [link.pos0 + halfThickness, link.source.y1],\n        ]\n\n        return lineGenerator(dots) + 'Z'\n    }\n}\n","import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { DefaultLink, DefaultNode, SankeyCommonProps, SankeyNodeDatum } from './types'\n\ninterface SankeyLabelsProps<N extends DefaultNode, L extends DefaultLink> {\n    nodes: SankeyNodeDatum<N, L>[]\n    layout: SankeyCommonProps<N, L>['layout']\n    width: number\n    height: number\n    labelPosition: SankeyCommonProps<N, L>['labelPosition']\n    labelPadding: SankeyCommonProps<N, L>['labelPadding']\n    labelOrientation: SankeyCommonProps<N, L>['labelOrientation']\n    getLabelTextColor: (node: SankeyNodeDatum<N, L>) => string\n}\n\nexport const SankeyLabels = <N extends DefaultNode, L extends DefaultLink>({\n    nodes,\n    layout,\n    width,\n    height,\n    labelPosition,\n    labelPadding,\n    labelOrientation,\n    getLabelTextColor,\n}: SankeyLabelsProps<N, L>) => {\n    const theme = useTheme()\n\n    const labelRotation = labelOrientation === 'vertical' ? -90 : 0\n    const labels = nodes.map(node => {\n        let x\n        let y\n        let textAnchor\n        if (layout === 'horizontal') {\n            y = node.y + node.height / 2\n            if (node.x < width / 2) {\n                if (labelPosition === 'inside') {\n                    x = node.x1 + labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'middle' : 'start'\n                } else {\n                    x = node.x - labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'middle' : 'end'\n                }\n            } else {\n                if (labelPosition === 'inside') {\n                    x = node.x - labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'middle' : 'end'\n                } else {\n                    x = node.x1 + labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'middle' : 'start'\n                }\n            }\n        } else if (layout === 'vertical') {\n            x = node.x + node.width / 2\n            if (node.y < height / 2) {\n                if (labelPosition === 'inside') {\n                    y = node.y1 + labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'end' : 'middle'\n                } else {\n                    y = node.y - labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'start' : 'middle'\n                }\n            } else {\n                if (labelPosition === 'inside') {\n                    y = node.y - labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'start' : 'middle'\n                } else {\n                    y = node.y1 + labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'end' : 'middle'\n                }\n            }\n        }\n\n        return {\n            id: node.id,\n            label: node.label,\n            x,\n            y,\n            textAnchor,\n            color: getLabelTextColor(node),\n        }\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const springs = useSprings(\n        labels.length,\n        labels.map(label => ({\n            transform: `translate(${label.x}, ${label.y}) rotate(${labelRotation})`,\n            color: label.color,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        key={label.id}\n                        dominantBaseline=\"central\"\n                        textAnchor={label.textAnchor}\n                        transform={animatedProps.transform}\n                        style={{\n                            ...theme.labels.text,\n                            fill: animatedProps.color,\n                            pointerEvents: 'none',\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { uniq } from 'lodash'\nimport { SvgWrapper, useDimensions, Container } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { svgDefaultProps } from './props'\nimport { useSankey } from './hooks'\nimport { SankeyNodes } from './SankeyNodes'\nimport { SankeyLinks } from './SankeyLinks'\nimport { SankeyLabels } from './SankeyLabels'\nimport {\n    DefaultLink,\n    DefaultNode,\n    SankeyLayerId,\n    SankeyLinkDatum,\n    SankeyNodeDatum,\n    SankeySvgProps,\n} from './types'\n\ntype InnerSankeyProps<N extends DefaultNode, L extends DefaultLink> = Omit<\n    SankeySvgProps<N, L>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerSankey = <N extends DefaultNode, L extends DefaultLink>({\n    data,\n    valueFormat,\n    layout = svgDefaultProps.layout,\n    sort = svgDefaultProps.sort,\n    align = svgDefaultProps.align,\n    width,\n    height,\n    margin: partialMargin,\n    colors = svgDefaultProps.colors,\n    nodeThickness = svgDefaultProps.nodeThickness,\n    nodeSpacing = svgDefaultProps.nodeThickness,\n    nodeInnerPadding = svgDefaultProps.nodeInnerPadding,\n    nodeBorderColor = svgDefaultProps.nodeBorderColor,\n    nodeOpacity = svgDefaultProps.nodeOpacity,\n    nodeHoverOpacity = svgDefaultProps.nodeHoverOpacity,\n    nodeHoverOthersOpacity = svgDefaultProps.nodeHoverOthersOpacity,\n    nodeBorderWidth = svgDefaultProps.nodeBorderWidth,\n    nodeBorderRadius = svgDefaultProps.nodeBorderRadius,\n    linkOpacity = svgDefaultProps.linkOpacity,\n    linkHoverOpacity = svgDefaultProps.linkHoverOpacity,\n    linkHoverOthersOpacity = svgDefaultProps.linkHoverOthersOpacity,\n    linkContract = svgDefaultProps.linkContract,\n    linkBlendMode = svgDefaultProps.linkBlendMode,\n    enableLinkGradient = svgDefaultProps.enableLinkGradient,\n    enableLabels = svgDefaultProps.enableLabels,\n    labelPosition = svgDefaultProps.labelPosition,\n    labelPadding = svgDefaultProps.labelPadding,\n    labelOrientation = svgDefaultProps.labelOrientation,\n    label = svgDefaultProps.label,\n    labelTextColor = svgDefaultProps.labelTextColor,\n    nodeTooltip = svgDefaultProps.nodeTooltip,\n    linkTooltip = svgDefaultProps.linkTooltip,\n    isInteractive = svgDefaultProps.isInteractive,\n    onClick,\n    legends = svgDefaultProps.legends,\n    layers = svgDefaultProps.layers,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerSankeyProps<N, L>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        nodes,\n        links,\n        legendData,\n        getNodeBorderColor,\n        currentNode,\n        setCurrentNode,\n        currentLink,\n        setCurrentLink,\n        getLabelTextColor,\n    } = useSankey<N, L>({\n        data,\n        valueFormat,\n        layout,\n        width: innerWidth,\n        height: innerHeight,\n        sort,\n        align,\n        colors,\n        nodeThickness,\n        nodeSpacing,\n        nodeInnerPadding,\n        nodeBorderColor,\n        label,\n        labelTextColor,\n    })\n\n    let isCurrentNode: (node: SankeyNodeDatum<N, L>) => boolean = () => false\n    let isCurrentLink: (link: SankeyLinkDatum<N, L>) => boolean = () => false\n\n    if (currentLink) {\n        isCurrentNode = ({ id }: SankeyNodeDatum<N, L>) =>\n            id === currentLink.source.id || id === currentLink.target.id\n        isCurrentLink = ({ source, target }: SankeyLinkDatum<N, L>) =>\n            source.id === currentLink.source.id && target.id === currentLink.target.id\n    }\n\n    if (currentNode) {\n        let currentNodeIds = [currentNode.id]\n        links\n            .filter(\n                ({ source, target }) => source.id === currentNode.id || target.id === currentNode.id\n            )\n            .forEach(({ source, target }) => {\n                currentNodeIds.push(source.id)\n                currentNodeIds.push(target.id)\n            })\n\n        currentNodeIds = uniq(currentNodeIds)\n        isCurrentNode = ({ id }) => currentNodeIds.includes(id)\n        isCurrentLink = ({ source, target }) =>\n            source.id === currentNode.id || target.id === currentNode.id\n    }\n\n    const layerProps = {\n        links,\n        nodes,\n        margin,\n        width,\n        height,\n        outerWidth,\n        outerHeight,\n    }\n\n    const layerById: Record<SankeyLayerId, ReactNode> = {\n        links: null,\n        nodes: null,\n        labels: null,\n        legends: null,\n    }\n\n    if (layers.includes('links')) {\n        layerById.links = (\n            <SankeyLinks<N, L>\n                key=\"links\"\n                links={links}\n                layout={layout}\n                linkContract={linkContract}\n                linkOpacity={linkOpacity}\n                linkHoverOpacity={linkHoverOpacity}\n                linkHoverOthersOpacity={linkHoverOthersOpacity}\n                linkBlendMode={linkBlendMode}\n                enableLinkGradient={enableLinkGradient}\n                setCurrentLink={setCurrentLink}\n                currentNode={currentNode}\n                currentLink={currentLink}\n                isCurrentLink={isCurrentLink}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                tooltip={linkTooltip}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <SankeyNodes<N, L>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeOpacity={nodeOpacity}\n                nodeHoverOpacity={nodeHoverOpacity}\n                nodeHoverOthersOpacity={nodeHoverOthersOpacity}\n                borderWidth={nodeBorderWidth}\n                borderRadius={nodeBorderRadius}\n                getBorderColor={getNodeBorderColor}\n                setCurrentNode={setCurrentNode}\n                currentNode={currentNode}\n                currentLink={currentLink}\n                isCurrentNode={isCurrentNode}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                tooltip={nodeTooltip}\n            />\n        )\n    }\n\n    if (layers.includes('labels') && enableLabels) {\n        layerById.labels = (\n            <SankeyLabels<N, L>\n                key=\"labels\"\n                nodes={nodes}\n                layout={layout}\n                width={innerWidth}\n                height={innerHeight}\n                labelPosition={labelPosition}\n                labelPadding={labelPadding}\n                labelOrientation={labelOrientation}\n                getLabelTextColor={getLabelTextColor}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={`legend${i}`}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Sankey = <N extends DefaultNode = DefaultNode, L extends DefaultLink = DefaultLink>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: SankeySvgProps<N, L>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerSankey<N, L> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultLink, DefaultNode, SankeySvgProps } from './types'\nimport { Sankey } from './Sankey'\n\nexport const ResponsiveSankey = <\n    N extends DefaultNode = DefaultNode,\n    L extends DefaultLink = DefaultLink\n>(\n    props: Omit<SankeySvgProps<N, L>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Sankey<N, L> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","forEach","getOwnPropertyDescriptors","defineProperties","tooltipStyles","container","display","alignItems","sourceChip","marginRight","targetChip","marginLeft","sankeyAlignmentPropMapping","center","justify","start","end","sankeyRight","sankeyAlignmentPropKeys","svgDefaultProps","layout","align","sort","colors","scheme","nodeOpacity","nodeHoverOpacity","nodeHoverOthersOpacity","nodeThickness","nodeSpacing","nodeInnerPadding","nodeBorderWidth","nodeBorderColor","from","modifiers","nodeBorderRadius","linkOpacity","linkHoverOpacity","linkHoverOthersOpacity","linkContract","linkBlendMode","enableLinkGradient","enableLabels","label","labelPosition","labelPadding","labelOrientation","labelTextColor","isInteractive","nodeTooltip","node","id","enableChip","color","linkTooltip","link","style","formattedValue","legends","layers","role","animate","motionConfig","_arrayLikeToArray","arr","len","arr2","Array","_slicedToArray","isArray","arrayWithHoles","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","iterableToArrayLimit","o","minLen","arrayLikeToArray","n","toString","slice","constructor","name","test","unsupportedIterableToArray","TypeError","nonIterableRest","getId","useSankey","data","valueFormat","width","height","useState","currentNode","setCurrentNode","currentLink","setCurrentLink","sortFunction","useMemo","a","b","linkSortMode","alignFunction","theme","useTheme","getColor","useOrdinalColorScale","getNodeBorderColor","useInheritedColor","getLabel","usePropertyAccessor","getLabelTextColor","formatValue","useValueFormatter","_data","sankey","d3Sankey","Math","oldX0","oldX1","computeNodeAndLinks","nodes","links","legendData","SankeyNodesItem","x","y","opacity","borderWidth","borderColor","borderRadius","setCurrent","onClick","tooltip","useMotionConfig","springConfig","animatedProps","useSpring","config","immediate","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","useCallback","event","createElement","handleMouseMove","handleMouseLeave","handleClick","rx","ry","v","fill","fillOpacity","strokeWidth","stroke","strokeOpacity","onMouseEnter","onMouseMove","onMouseLeave","SankeyNodes","getBorderColor","isCurrentNode","getOpacity","SankeyLinkGradient","startColor","endColor","gradientProps","x1","x2","y1","y2","spreadMethod","offset","stopColor","SankeyLinksItem","path","blendMode","enableGradient","linkId","animatedPath","useAnimatedPath","encodeURI","d","mixBlendMode","SankeyLinks","isCurrentLink","getLinkPath","lineGenerator","line","halfThickness","contract","padLength","dots","sankeyLinkVertical","SankeyLabels","labelRotation","labels","textAnchor","springs","useSprings","transform","dominantBaseline","pointerEvents","InnerSankey","partialMargin","margin","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","currentNodeIds","layerProps","layerById","containerWidth","containerHeight","layer","Sankey","renderWrapper","otherProps","ResponsiveSankey"],"sourceRoot":""}