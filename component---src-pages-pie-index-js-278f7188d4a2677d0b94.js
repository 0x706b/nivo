(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{"+wQ0":function(e,t,a){"use strict";a.r(t);var n=a("mXGw"),o=a.n(n),r=a("9CL0"),i=a("6zZa"),l=a("ZS2m"),s=a("3Dq0"),u=a.n(s),d=a("xwJ7"),c=a("JiZB"),p=function(){return Object(i.i)(!0,5).map((function(e){return Object.assign({id:e.label},e)}))},m={margin:{top:40,right:80,bottom:80,left:80},valueFormat:{format:"",enabled:!1},startAngle:0,endAngle:360,sortByValue:!1,innerRadius:.5,padAngle:.7,cornerRadius:3,fit:!0,colors:{scheme:"nivo"},borderWidth:1,borderColor:{from:"color",modifiers:[["darker",.2]]},enableRadialLabels:!0,radialLabel:"id",radialLabelsSkipAngle:10,radialLabelsTextXOffset:6,radialLabelsTextColor:"#333333",radialLabelsLinkOffset:0,radialLabelsLinkDiagonalLength:16,radialLabelsLinkHorizontalLength:24,radialLabelsLinkStrokeWidth:1,radialLabelsLinkColor:{from:"color"},enableSliceLabels:!0,sliceLabel:"formattedValue",sliceLabelsRadiusOffset:.5,sliceLabelsSkipAngle:10,sliceLabelsTextColor:"#333333",isInteractive:!0,"custom tooltip example":!1,tooltip:null,"showcase pattern usage":!0,defs:[],fill:[],legends:[{anchor:"bottom",direction:"row",justify:!1,translateX:0,translateY:56,itemsSpacing:0,itemWidth:100,itemHeight:18,itemTextColor:"#999",itemDirection:"left-to-right",itemOpacity:1,symbolSize:18,symbolShape:"circle",effects:[{on:"hover",style:{itemTextColor:"#000"}}]}]};t.default=function(){return o.a.createElement(l.a,{name:"Pie",meta:u.a.Pie,icon:"pie",flavors:u.a.flavors,currentFlavor:"svg",properties:c.a,initialProperties:m,defaultProperties:r.d,propertiesMapper:d.a,generateData:p},(function(e,t,a,n){var i=function(e){n({type:"click",label:"[legend] "+e.label+": "+e.formattedValue,color:e.color,data:e})};return o.a.createElement(r.b,Object.assign({data:t},e,{theme:a,onClick:function(e){n({type:"click",label:"[arc] "+e.id+": "+e.formattedValue,color:e.color,data:e})},legends:e.legends.map((function(e){return Object.assign({},e,{onClick:i})}))}))}))}},JiZB:function(e,t,a){"use strict";a.d(t,"a",(function(){return l}));var n=a("Eo5u"),o=a("9CL0"),r=a("RQLE"),i=[{key:"data",group:"Base",help:"Chart data, which should be immutable.",description:"\n            Chart data, which must conform to this structure\n            if using the default `id` and `value` accessors:\n            \n            ```\n            Array<{\n                id:    string | number,\n                value: number\n            }>\n            ```\n            \n            If using a different data structure, you must make sure\n            to adjust both `id` and `value`. Meaning you can provide\n            a completely different data structure as long as `id` and `value`\n            return the appropriate values.\n            \n            Immutability of the data is important as re-computations\n            depends on it.\n        ",type:"object[]",required:!0},{key:"id",group:"Base",help:"ID accessor.",description:"\n            Define how to access the ID of each datum,\n            by default, nivo will look for the `id` property.\n        ",type:"string | (datum: RawDatum): string | number",required:!1,defaultValue:o.d.id},{key:"value",group:"Base",help:"Value accessor.",description:"\n            Define how to access the value of each datum,\n            by default, nivo will look for the `value` property.\n        ",type:"string | (datum: RawDatum): number",required:!1,defaultValue:o.d.id},{key:"valueFormat",group:"Base",help:"Optional formatter for values.",description:"\n            The formatted value can then be used for labels & tooltips.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        ",required:!1,type:"string | (value: number) => string | number",controlType:"valueFormat"},{key:"width",enableControlForFlavors:["api"],help:"Chart width.",description:"\n            not required if using\n            `<ResponsivePie/>`.\n        ",type:"number",required:!0,controlType:"range",group:"Base",controlOptions:{unit:"px",min:100,max:1e3,step:5}},{key:"height",enableControlForFlavors:["api"],help:"Chart height.",description:"\n            not required if using\n            `<ResponsivePie/>`.\n        ",type:"number",required:!0,controlType:"range",group:"Base",controlOptions:{unit:"px",min:100,max:1e3,step:5}},{key:"pixelRatio",flavors:["canvas"],help:"Adjust pixel ratio, useful for HiDPI screens.",required:!1,defaultValue:"Depends on device",type:"number",controlType:"range",group:"Base",controlOptions:{min:1,max:2}},{key:"startAngle",help:"Start angle (in degrees), useful to make gauges for example.",type:"number",required:!1,defaultValue:o.d.startAngle,controlType:"angle",group:"Base",controlOptions:{unit:"째",min:-180,max:360,step:5}},{key:"endAngle",help:"End angle (in degrees), useful to make gauges for example.",type:"number",required:!1,defaultValue:o.d.endAngle,controlType:"angle",group:"Base",controlOptions:{unit:"째",min:-360,max:360,step:5}},{key:"fit",help:"If 'true', pie will be omptimized to occupy more space when using partial pie.",type:"boolean",required:!1,defaultValue:o.d.fit,controlType:"switch",group:"Base"},{key:"innerRadius",help:"Donut chart if greater than 0. Value should be between 0~1 as it's a ratio from original radius.",type:"number",required:!1,defaultValue:o.d.innerRadius,controlType:"range",group:"Base",controlOptions:{min:0,max:.95,step:.05}},{key:"padAngle",help:"Padding between each pie slice.",type:"number",required:!1,defaultValue:o.d.padAngle,controlType:"range",group:"Base",controlOptions:{unit:"째",min:0,max:45,step:1}},{key:"cornerRadius",help:"Rounded slices.",type:"number",required:!1,defaultValue:o.d.cornerRadius,controlType:"range",group:"Base",controlOptions:{unit:"px",min:0,max:45,step:1}},{key:"sortByValue",help:"If 'true', arcs will be ordered according to their associated value.",type:"boolean",required:!1,defaultValue:o.d.sortByValue,controlType:"switch",group:"Base"},{key:"margin",help:"Chart margin.",type:"object",required:!1,controlType:"margin",group:"Base"},r.f,{key:"colors",help:"Defines color range.",type:"string | Function | string[]",required:!1,defaultValue:o.d.colors,controlType:"ordinalColors",group:"Style"}].concat(Object(n.a)(Object(r.b)("Style",["svg","api"])),[{key:"showcase pattern usage",flavors:["svg"],help:"Patterns.",description:"\n            You can use `defs` and `fill` properties\n            to use patterns, see\n            [dedicated guide](self:/guides/patterns)\n            for further information.\n        ",type:"boolean",controlType:"switch",group:"Style"},{key:"borderWidth",help:"Slices border width.",type:"number",required:!1,defaultValue:o.d.borderWidth,controlType:"lineWidth",group:"Style"},{key:"borderColor",help:"Method to compute border color.",type:"string | object | Function",required:!1,defaultValue:o.d.borderColor,controlType:"inheritedColor",group:"Style"},{key:"enableRadialLabels",help:"Enable/disable radial labels.",type:"boolean",required:!1,defaultValue:o.d.enableRadialLabels,controlType:"switch",group:"Radial labels"},{key:"radialLabel",help:"Radial label",description:"\n            Defines how to get label text,\n            can be a string (used to access current node data property)\n            or a function which will receive the actual node data.\n        ",type:"string | Function",required:!1,defaultValue:o.d.radialLabel,controlType:"choices",group:"Radial labels",controlOptions:{choices:["id","value","d => `${d.id} (${d.value})`"].map((function(e){return{label:e,value:e}}))}},{key:"radialLabelsSkipAngle",help:"Skip label if corresponding slice's angle is lower than provided value.",type:"number",required:!1,defaultValue:o.d.radialLabelsSkipAngle,controlType:"range",group:"Radial labels",controlOptions:{unit:"째",min:0,max:45,step:1}},{key:"radialLabelsLinkOffset",help:"Link offset from pie outer radius, useful to have links overlapping pie slices.",type:"number",required:!1,defaultValue:o.d.radialLabelsLinkOffset,controlType:"range",group:"Radial labels",controlOptions:{unit:"px",min:-24,max:24,step:1}},{key:"radialLabelsLinkDiagonalLength",help:"Link diagonal length.",type:"number",required:!1,defaultValue:o.d.radialLabelsLinkDiagonalLength,controlType:"range",group:"Radial labels",controlOptions:{unit:"px",min:0,max:36,step:1}},{key:"radialLabelsLinkHorizontalLength",help:"Links horizontal length.",type:"number",required:!1,defaultValue:o.d.radialLabelsLinkHorizontalLength,controlType:"range",group:"Radial labels",controlOptions:{unit:"px",min:0,max:36,step:1}},{key:"radialLabelsTextXOffset",help:"X offset from links' end.",type:"number",required:!1,defaultValue:o.d.radialLabelsTextXOffset,controlType:"range",group:"Radial labels",controlOptions:{unit:"px",min:0,max:36,step:1}},{key:"radialLabelsLinkStrokeWidth",help:"Links stroke width.",type:"number",required:!1,defaultValue:o.d.radialLabelsLinkStrokeWidth,controlType:"lineWidth",group:"Radial labels"},{key:"radialLabelsTextColor",help:"Defines how to compute radial label text color.",type:"string | object | Function",required:!1,defaultValue:o.d.radialLabelsTextColor,controlType:"inheritedColor",group:"Radial labels"},{key:"radialLabelsLinkColor",help:"Defines how to compute radial label link color.",type:"string | object | Function",required:!1,defaultValue:o.d.radialLabelsLinkColor,controlType:"inheritedColor",group:"Radial labels"},{key:"enableSliceLabels",help:"Enable/disable slices labels.",type:"boolean",required:!1,defaultValue:o.d.enableSliceLabels,controlType:"switch",group:"Slice labels"},{key:"sliceLabel",help:"Defines how to get label text, can be a string (used to access current node data property) or a function which will receive the actual node data.",type:"string | Function",required:!1,defaultValue:o.d.sliceLabel,controlType:"choices",group:"Slice labels",controlOptions:{choices:["id","value","formattedValue","d => `${d.id} (${d.value})`"].map((function(e){return{label:e,value:e}}))}},{key:"sliceLabelsRadiusOffset",help:"\n            Define the radius to use to determine the label position, starting from inner radius,\n            this is expressed as a ratio.\n        ",type:"number",required:!1,defaultValue:o.d.sliceLabelsRadiusOffset,controlType:"range",group:"Slice labels",controlOptions:{min:0,max:2,step:.05}},{key:"sliceLabelsSkipAngle",help:"Skip label if corresponding slice's angle is lower than provided value.",type:"number",required:!1,defaultValue:o.d.sliceLabelsSkipAngle,controlType:"range",group:"Slice labels",controlOptions:{unit:"째",min:0,max:45,step:1}},{key:"sliceLabelsTextColor",help:"Defines how to compute slice label text color.",type:"string | object | Function",required:!1,defaultValue:o.d.sliceLabelsTextColor,controlType:"inheritedColor",group:"Slice labels"},{key:"layers",group:"Customization",help:"Defines the order of layers and add custom layers.",description:"\n            You can also use this to insert extra layers\n            to the chart, the extra layer must be a function.\n            \n            The layer component which will receive the chart's\n            context & computed data and must return a valid SVG element\n            for the `Pie` component.\n\n            When using the canvas implementation, the function\n            will receive the canvas 2d context as first argument\n            and the chart's context and computed data as second.\n\n            Please make sure to use `context.save()` and\n            `context.restore()` if you make some global\n            modifications to the 2d context inside this function\n            to avoid side effects.\n            \n            The context passed to layers has the following structure:\n            \n            ```\n            {\n                dataWithArc:  DatumWithArc[],\n                arcGenerator: Function\n                centerX:      number\n                centerY:      number\n                radius:       number\n                innerRadius:  number\n            }\n            ```\n        ",required:!1,type:"Array<string | Function>",defaultValue:o.d.layers},{key:"isInteractive",flavors:["svg","canvas"],group:"Interactivity",help:"Enable/disable interactivity.",type:"boolean",required:!1,defaultValue:o.d.isInteractive,controlType:"switch"},{key:"onMouseEnter",flavors:["svg"],group:"Interactivity",help:"onMouseEnter handler, it receives target node data and mouse event.",type:"(node, event) => void",required:!1},{key:"onMouseMove",flavors:["svg","canvas"],group:"Interactivity",help:"onMouseMove handler, it receives target node data and mouse event.",type:"(node, event) => void",required:!1},{key:"onMouseLeave",flavors:["svg"],group:"Interactivity",help:"onMouseLeave handler, it receives target node data and mouse event.",type:"(node, event) => void",required:!1},{key:"onClick",flavors:["svg","canvas"],group:"Interactivity",help:"onClick handler, it receives target node data and mouse event.",type:"(node, event) => void",required:!1},{key:"tooltip",flavors:["svg","canvas"],group:"Interactivity",type:"Component",required:!1,help:"Custom tooltip component",description:"\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will receive\n            the following props:\n            \n            ```\n            {\n                datum: PieComputedDatum\n            }\n            ```\n            \n            You can also customize the style of the tooltip using\n            the `theme.tooltip` object.\n        "},{key:"custom tooltip example",flavors:["svg","canvas"],help:"Showcase custom tooltip.",type:"boolean",controlType:"switch",group:"Interactivity"},{key:"legends",flavors:["svg","canvas"],type:"Legend[]",help:"Optional chart's legends.",group:"Legends",controlType:"array",controlOptions:{props:Object(r.c)(["svg","canvas"]),shouldCreate:!0,addLabel:"add legend",shouldRemove:!0,getItemTitle:function(e,t){return"legend["+e+"]: "+t.anchor+", "+t.direction},defaults:{anchor:"top-left",direction:"column",justify:!1,translateX:0,translateY:0,itemWidth:100,itemHeight:20,itemsSpacing:0,symbolSize:20,itemDirection:"left-to-right",onClick:function(e){alert(JSON.stringify(e,null,"    "))}}}}]),l=Object(r.d)(i)},nLLr:function(e,t,a){"use strict";a.d(t,"c",(function(){return l})),a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return u}));var n=a("PWxN"),o=a.n(n),r=a("KXzt"),i=a.n(r),l=function(e,t){var a=(void 0===t?{}:t).exclude,n=void 0===a?[]:a;return function(t,a){void 0===a&&(a={});var r={};return Object.keys(t).forEach((function(n){e[n]&&(r[n]=e[n](t[n],t,a))})),Object.assign({},o()(t,n),r)}},s=function(e){return function(t,a){return a["axis"+i()(e)].enable?o()(t,["enable"]):null}},u=function(e){var t=e.format;return!0===e.enabled?t:void 0}},xwJ7:function(e,t,a){"use strict";var n=a("mXGw"),o=a.n(n),r=a("UutA"),i=a("5QYd"),l=a("nLLr"),s=r.d.div.withConfig({displayName:"mapper__TooltipWrapper",componentId:"sc-1dztcs-0"})(["display:grid;grid-template-columns:1fr 1fr;grid-column-gap:12px;background:#333;padding:12px 16px;font-size:12px;border-radius:2px;"]),u=r.d.span.withConfig({displayName:"mapper__TooltipKey",componentId:"sc-1dztcs-1"})([""]),d=r.d.span.withConfig({displayName:"mapper__TooltipValue",componentId:"sc-1dztcs-2"})(["font-weight:600;"]),c=function(e){var t=e.datum;return o.a.createElement(s,{style:{color:t.color}},o.a.createElement(u,null,"id"),o.a.createElement(d,null,t.id),o.a.createElement(u,null,"value"),o.a.createElement(d,null,t.value),o.a.createElement(u,null,"formattedValue"),o.a.createElement(d,null,t.formattedValue),o.a.createElement(u,null,"color"),o.a.createElement(d,null,t.color))};t.a=Object(l.c)({valueFormat:l.b,radialLabel:function(e){return"d => `${d.id} (${d.value})`"===e?function(e){return e.id+" ("+e.value+")"}:e},sliceLabel:function(e){return"d => `${d.id} (${d.value})`"===e?function(e){return e.id+" ("+e.value+")"}:e},tooltip:function(e,t){if(t["custom tooltip example"])return c},theme:function(e,t){return t["custom tooltip example"]?Object.assign({},t.theme,{tooltip:{container:Object.assign({},t.theme.tooltip.container,{background:"#333"})}}):e},defs:function(e,t){if(t["showcase pattern usage"])return[Object(i.W)("dots",{background:"inherit",color:"rgba(255, 255, 255, 0.3)",size:4,padding:1,stagger:!0}),Object(i.X)("lines",{background:"inherit",color:"rgba(255, 255, 255, 0.3)",rotation:-45,lineWidth:6,spacing:10})]},fill:function(e,t){if(t["showcase pattern usage"])return[{match:{id:"ruby"},id:"dots"},{match:{id:"c"},id:"dots"},{match:{id:"go"},id:"dots"},{match:{id:"python"},id:"dots"},{match:{id:"scala"},id:"lines"},{match:{id:"lisp"},id:"lines"},{match:{id:"elixir"},id:"lines"},{match:{id:"javascript"},id:"lines"}]}},{exclude:["custom tooltip example","showcase pattern usage"]})}}]);
//# sourceMappingURL=component---src-pages-pie-index-js-278f7188d4a2677d0b94.js.map