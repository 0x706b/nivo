{"version":3,"file":"58fec6eea35c4f7b5b0602005897d248764f54ad-9b2dee8b7d0d32210861.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-path/src/path.js","webpack://nivo-website/../node_modules/d3-shape/src/constant.js","webpack://nivo-website/../node_modules/d3-shape/src/line.js","webpack://nivo-website/../node_modules/d3-shape/src/point.js","webpack://nivo-website/./src/data/components/line/props.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/./src/data/components/line/defaults.js","webpack://nivo-website/./src/data/components/line/generator.js","webpack://nivo-website/./src/data/components/line/mapper.js"],"sourcesContent":["var pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path();\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function moveTo(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function lineTo(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function quadraticCurveTo(x1, y1, x, y) {\n    this._ += \"Q\" + +x1 + \",\" + +y1 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + +x1 + \",\" + +y1 + \",\" + +x2 + \",\" + +y2 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function arcTo(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.\n\n    if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x1,y1).\n\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    } // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.\n\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + +(y01 * x20 > x01 * y20) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function arc(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.\n\n    if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x0,y0).\n\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    } // Is this arc empty? We’re done.\n\n\n    if (!r) return; // Does the angle go the wrong way? Flip the direction.\n\n    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.\n\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    } // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + +(da >= pi) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function rect(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + +w + \"v\" + +h + \"h\" + -w + \"Z\";\n  },\n  toString: function toString() {\n    return this._;\n  }\n};\nexport default path;","export default function (x) {\n  return function constant() {\n    return x;\n  };\n}","import { path } from \"d3-path\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport { x as pointX, y as pointY } from \"./point.js\";\nexport default function () {\n  var x = pointX,\n      y = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function line(data) {\n    var i,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer;\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();else output.lineEnd();\n      }\n\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  line.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), line) : x;\n  };\n\n  line.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), line) : y;\n  };\n\n  line.defined = function (_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n  };\n\n  line.curve = function (_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function (_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}","export function x(p) {\n  return p[0];\n}\nexport function y(p) {\n  return p[1];\n}","// @ts-ignore\nimport { lineCurvePropKeys } from '@nivo/core'\n// @ts-ignore\nimport { LineDefaultProps as defaults } from '@nivo/line'\nimport {\n    themeProperty,\n    motionProperties,\n    getLegendsProps,\n    groupProperties,\n    defsProperties,\n} from '../../../lib/componentProperties'\nimport {\n    chartDimensions,\n    ordinalColors,\n    blendMode,\n    chartGrid,\n    axes,\n    isInteractive,\n} from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg', 'canvas', 'api']\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Chart data.',\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                id:   string | number\n                data: Array<{\n                    x: number | string | Date\n                    y: number | string | Date\n                }>\n            }>\n            \\`\\`\\`\n        `,\n        required: true,\n        type: 'object[]',\n    },\n    {\n        key: 'xScale',\n        type: 'object',\n        flavors: allFlavors,\n        group: 'Base',\n        help: `X scale configuration.`,\n        required: false,\n        control: {\n            type: 'object',\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type.`,\n                    type: 'string',\n                    required: true,\n                    flavors: allFlavors,\n                    control: {\n                        type: 'choices',\n                        disabled: true,\n                        choices: ['linear', 'point'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'xFormat',\n        group: 'Base',\n        help: 'Optional formatter for x values.',\n        flavors: allFlavors,\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'Function | string',\n        control: { type: 'valueFormat' },\n    },\n    {\n        key: 'yScale',\n        type: 'object',\n        help: `Y scale configuration.`,\n        flavors: allFlavors,\n        group: 'Base',\n        required: false,\n        control: {\n            type: 'object',\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type.`,\n                    type: 'string',\n                    flavors: allFlavors,\n                    required: true,\n                    control: {\n                        type: 'choices',\n                        disabled: true,\n                        choices: ['linear', 'point'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n                {\n                    key: 'stacked',\n                    help: 'Enable/disable stacked mode.',\n                    flavors: allFlavors,\n                    type: 'boolean',\n                    required: false,\n                    control: { type: 'switch' },\n                },\n                {\n                    key: 'min',\n                    help: 'Minimum scale value.',\n                    flavors: allFlavors,\n                    required: false,\n                    type: `number | 'auto'`,\n                    control: {\n                        type: 'switchableRange',\n                        disabledValue: 'auto',\n                        defaultValue: 0,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n                {\n                    key: 'max',\n                    help: 'Maximum scale value.',\n                    flavors: allFlavors,\n                    required: false,\n                    type: `number | 'auto'`,\n                    control: {\n                        type: 'switchableRange',\n                        disabledValue: 'auto',\n                        defaultValue: 1200,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'yFormat',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Optional formatter for y values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'Function | string',\n        control: { type: 'valueFormat' },\n    },\n    ...chartDimensions(allFlavors),\n    {\n        key: 'curve',\n        help: 'Curve interpolation.',\n        flavors: allFlavors,\n        description: `\n            Defines the curve factory to use for the line generator.\n        `,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.curve,\n        group: 'Style',\n        control: {\n            type: 'choices',\n            choices: lineCurvePropKeys.map((key: string) => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    themeProperty(['svg', 'canvas', 'api']),\n    ordinalColors({\n        flavors: allFlavors,\n        defaultValue: defaults.colors,\n    }),\n    {\n        key: 'lineWidth',\n        help: 'Line width.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.lineWidth,\n        control: { type: 'lineWidth' },\n        group: 'Style',\n    },\n    {\n        key: 'enableArea',\n        help: 'Enable/disable area below each line.',\n        flavors: allFlavors,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableArea,\n        control: { type: 'switch' },\n        group: 'Style',\n    },\n    {\n        key: 'areaBaselineValue',\n        help: 'Define the value to be used for area baseline.',\n        flavors: allFlavors,\n        description: `\n            Define the value to be used for area baseline.\n            Please note that this value isn't the\n            position of the baseline but the value used\n            to compute it.\n        `,\n        type: 'number | string | Date',\n        required: false,\n        defaultValue: defaults.areaBaselineValue,\n        group: 'Style',\n        control: {\n            type: 'range',\n            min: 0,\n            max: 200,\n            step: 10,\n        },\n    },\n    {\n        key: 'areaOpacity',\n        help: 'Area opacity (0~1), depends on enableArea.',\n        flavors: allFlavors,\n        required: false,\n        defaultValue: defaults.areaOpacity,\n        type: 'number',\n        control: { type: 'opacity' },\n        group: 'Style',\n    },\n    blendMode({\n        key: 'areaBlendMode',\n        target: 'areas',\n        flavors: ['svg'],\n        defaultValue: defaults.areaBlendMode,\n    }),\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'layers',\n        group: 'Customization',\n        type: '(string | Component)[]',\n        flavors: allFlavors,\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this property to insert extra layers\n            to the chart, this extra layer must be\n            a function which will receive the chart\n            computed data and must return a valid SVG element.\n        `,\n        required: false,\n        defaultValue: defaults.layers,\n    },\n    {\n        key: 'enablePoints',\n        help: 'Enable/disable points.',\n        flavors: allFlavors,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enablePoints,\n        control: { type: 'switch' },\n        group: 'Points',\n    },\n    {\n        key: 'pointSymbol',\n        flavors: ['svg'],\n        help: 'Overrides default point circle. The function will receive `size`, `color`, `borderWidth` and `borderColor` props and must return a valid SVG element.',\n        type: 'Function',\n        required: false,\n        group: 'Points',\n    },\n    {\n        key: 'pointSize',\n        help: 'Size of the points.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.pointSize,\n        group: 'Points',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 2,\n            max: 20,\n        },\n    },\n    {\n        key: 'pointColor',\n        help: 'Method to compute points color.',\n        type: 'string | object | Function',\n        flavors: allFlavors,\n        required: false,\n        defaultValue: defaults.pointColor,\n        group: 'Points',\n        control: { type: 'inheritedColor' },\n    },\n    {\n        key: 'pointBorderWidth',\n        help: 'Width of the points border.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.pointBorderWidth,\n        group: 'Points',\n        control: { type: 'lineWidth' },\n    },\n    {\n        key: 'pointBorderColor',\n        help: 'Method to compute points border color.',\n        flavors: allFlavors,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.pointBorderColor,\n        group: 'Points',\n        control: { type: 'inheritedColor' },\n    },\n    {\n        key: 'enablePointLabel',\n        flavors: ['svg', 'api'],\n        group: 'Points',\n        help: 'Enable/disable points label.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enablePointLabel,\n        control: { type: 'switch' },\n    },\n    {\n        key: 'pointLabel',\n        flavors: ['svg', 'api'],\n        group: 'Points',\n        help: 'Property to use to determine point label. If a function is provided, it will receive current point data and should return the desired label.',\n        type: 'string',\n        required: false,\n        control: {\n            type: 'choices',\n            choices: ['y', 'yFormatted', 'x', 'xFormatted', `d => \\`\\${d.x}: \\${d.y}\\``].map(\n                choice => ({\n                    label: choice,\n                    value: choice,\n                })\n            ),\n        },\n    },\n    {\n        key: 'pointLabelYOffset',\n        flavors: ['svg', 'api'],\n        group: 'Points',\n        help: 'Label Y offset from point shape.',\n        type: 'number',\n        required: false,\n        defaultValue: -12,\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: -24,\n            max: 24,\n        },\n    },\n    ...chartGrid({\n        flavors: allFlavors,\n        values: true,\n        xDefault: defaults.enableGridX,\n        yDefault: defaults.enableGridY,\n    }),\n    ...axes({ flavors: allFlavors }),\n    isInteractive({\n        flavors: ['svg', 'canvas'],\n        defaultValue: defaults.isInteractive,\n    }),\n    {\n        key: 'useMesh',\n        flavors: ['svg'],\n        help: 'Use a voronoi mesh to detect mouse interactions, enableSlices must be disabled',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.useMesh,\n        control: { type: 'switch' },\n        group: 'Interactivity',\n    },\n    {\n        key: 'debugMesh',\n        flavors: ['svg', 'canvas'],\n        help: 'Display mesh used to detect mouse interactions (voronoi cells).',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.debugMesh,\n        control: { type: 'switch' },\n        group: 'Interactivity',\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: `onMouseEnter handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: `onMouseMove handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `onMouseLeave handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `onClick handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `Custom point tooltip`,\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'enableSlices',\n        group: 'Interactivity',\n        flavors: ['svg'],\n        help: `Enable/disable slices tooltip for x or y axis, automatically disable mesh.`,\n        type: `'x' | 'y' | false`,\n        required: false,\n        defaultValue: defaults.enableSlicesTooltip,\n        control: {\n            type: 'choices',\n            choices: [\n                {\n                    label: 'false',\n                    value: false,\n                },\n                {\n                    label: 'x',\n                    value: 'x',\n                },\n                {\n                    label: 'y',\n                    value: 'y',\n                },\n            ],\n        },\n    },\n    {\n        key: 'debugSlices',\n        flavors: ['svg'],\n        help: 'Display area used to detect mouse interactions for slices.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.debugSlices,\n        control: { type: 'switch' },\n        group: 'Interactivity',\n    },\n    {\n        key: 'sliceTooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `Custom slice tooltip`,\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'enableCrosshair',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'Enable/disable crosshair.',\n        type: 'boolean',\n        required: false,\n        control: { type: 'switch' },\n        defaultValue: defaults.enableCrosshair,\n    },\n    {\n        key: 'crosshairType',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        required: false,\n        defaultValue: defaults.crosshairType,\n        help: `Crosshair type, forced to slices axis if enabled.`,\n        type: 'string',\n        control: {\n            type: 'choices',\n            disabled: true,\n            choices: [\n                'x',\n                'y',\n                'top-left',\n                'top',\n                'top-right',\n                'right',\n                'bottom-right',\n                'bottom',\n                'bottom-left',\n                'left',\n                'cross',\n            ].map(v => ({\n                label: v,\n                value: v,\n            })),\n        },\n    },\n    {\n        key: 'legends',\n        flavors: ['svg', 'canvas'],\n        type: 'object[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        required: false,\n        control: {\n            type: 'array',\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend: any) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 4,\n                symbolSize: 20,\n                symbolShape: 'circle',\n                itemDirection: 'left-to-right',\n                itemTextColor: '#777',\n                onClick: (data: any) => {\n                    console.log(JSON.stringify(data, null, '    '))\n                },\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1,\n                        },\n                    },\n                ],\n            },\n        },\n    },\n    ...motionProperties(['svg'], defaults, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProp, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProp<X> | null\n        right?: CanvasAxisProp<Y> | null\n        bottom?: CanvasAxisProp<X> | null\n        left?: CanvasAxisProp<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProp<X> | undefined\n            : CanvasAxisProp<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n        if (reverse === true) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse])\n}\n","import { LineDefaultProps } from '@nivo/line'\n\nexport default {\n    width: 600,\n    height: 400,\n\n    margin: {\n        top: 50,\n        right: 110,\n        bottom: 50,\n        left: 60,\n    },\n\n    xScale: {\n        type: 'point',\n    },\n    xFormat: { format: '', enabled: false },\n    yScale: {\n        type: 'linear',\n        min: 'auto',\n        max: 'auto',\n        stacked: true,\n        reverse: false,\n    },\n    yFormat: { format: ' >-.2f', enabled: true },\n\n    curve: LineDefaultProps.curve,\n\n    axisTop: {\n        enable: false,\n        orient: 'top',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 36,\n    },\n    axisRight: {\n        enable: false,\n        orient: 'right',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 0,\n    },\n    axisBottom: {\n        enable: true,\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'transportation',\n        legendOffset: 36,\n        legendPosition: 'middle',\n    },\n    axisLeft: {\n        enable: true,\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'count',\n        legendOffset: -40,\n        legendPosition: 'middle',\n    },\n\n    enableGridX: LineDefaultProps.enableGridX,\n    enableGridY: LineDefaultProps.enableGridY,\n\n    colors: LineDefaultProps.colors,\n    lineWidth: 2,\n\n    enablePoints: true,\n    pointSize: 10,\n    pointColor: { theme: 'background' },\n    pointBorderWidth: 2,\n    pointBorderColor: { from: 'serieColor' },\n    enablePointLabel: LineDefaultProps.enablePointLabel,\n    pointLabel: LineDefaultProps.pointLabel,\n    pointLabelYOffset: -12,\n\n    enableArea: LineDefaultProps.enableArea,\n    areaBlendMode: LineDefaultProps.areaBlendMode,\n    areaBaselineValue: LineDefaultProps.areaBaselineValue,\n    areaOpacity: LineDefaultProps.areaOpacity,\n\n    isInteractive: LineDefaultProps.isInteractive,\n    enableSlices: false,\n    debugSlices: false,\n\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n","import range from 'lodash/range'\nimport { generateSeries } from '@nivo/generators'\n\nexport const generateLightDataSet = () => {\n    return generateSeries(\n        ['japan', 'france', 'us', 'germany', 'norway'],\n        [\n            'plane',\n            'helicopter',\n            'boat',\n            'train',\n            'subway',\n            'bus',\n            'car',\n            'moto',\n            'bicycle',\n            'horse',\n            'skateboard',\n            'others',\n        ]\n    )\n}\n\nexport const generateHeavyDataSet = () => {\n    return generateSeries(\n        [\n            'japan',\n            'brazil',\n            'france',\n            'us',\n            'germany',\n            'norway',\n            'china',\n            'algeria',\n            'mexico',\n            'finland',\n            'australia',\n        ],\n        range(121)\n    )\n}\n","import { settingsMapper, mapAxis, mapFormat } from '../../../lib/settings'\n\nexport default settingsMapper(\n    {\n        pointLabel: value => {\n            if (value === `d => \\`\\${d.x}: \\${d.y}\\``) return d => `${d.x}: ${d.y}`\n            return value\n        },\n        xFormat: mapFormat,\n        yFormat: mapFormat,\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n    },\n    {\n        exclude: ['enable axisTop', 'enable axisRight', 'enable axisBottom', 'enable axisLeft'],\n    }\n)\n"],"names":["pi","Math","PI","tau","epsilon","tauEpsilon","Path","this","_x0","_y0","_x1","_y1","_","path","prototype","constructor","moveTo","x","y","closePath","lineTo","quadraticCurveTo","x1","y1","bezierCurveTo","x2","y2","arcTo","r","x0","y0","x21","y21","x01","y01","l01_2","Error","abs","x20","y20","l21_2","l20_2","l21","sqrt","l01","l","tan","acos","t01","t21","arc","a0","a1","ccw","dx","cos","dy","sin","cw","da","rect","w","h","toString","defined","context","curve","output","line","data","i","d","buffer","n","length","defined0","lineStart","lineEnd","point","arguments","p","allFlavors","props","key","group","flavors","help","description","required","type","control","disabled","choices","map","v","label","value","disabledValue","defaultValue","min","max","chartDimensions","defaults","lineCurvePropKeys","themeProperty","ordinalColors","step","blendMode","target","defsProperties","unit","choice","chartGrid","values","xDefault","yDefault","axes","isInteractive","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","symbolShape","itemDirection","itemTextColor","onClick","console","log","JSON","stringify","effects","on","style","itemBackground","itemOpacity","motionProperties","groups","groupProperties","computeCartesianTicks","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","getScaleTicks","textProps","textPropsByEngine","position","centerScale","lineX","lineY","text","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","top","bottom","left","right","ticks","getFormatter","format","formatter","timeFormat","Date","d3Format","computeGridLines","width","height","_values","Array","isArray","lines","memoizedAxisTick","memo","_value","textAnchor","animatedProps","theme","useTheme","useMemo","opacity","cursor","event","_jsxs","animated","g","transform","_jsx","dominantBaseline","textTransform","memoizedAxis","renderTick","AxisTick","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","config","useSpring","lineX2","lineY2","immediate","transition","useTransition","keys","t","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","rotate","domain","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","_format","save","font","fontWeight","fontSize","fontFamily","strokeWidth","lineWidth","Number","lineCap","stroke","strokeStyle","beginPath","forEach","degreesToRadians","fill","fillStyle","fillText","String","restore","renderAxesToCanvas","renderGridLinesToCanvas","zeroPadding","computeDimensions","item","_padding","padding","itemCount","horizontalPadding","verticalPadding","spacing","computePositionFromAnchor","containerWidth","containerHeight","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","symbolSpacing","symbolByShape","circle","size","borderWidth","borderColor","cx","cy","pointerEvents","diamond","square","triangle","LegendSvgItem","textColor","background","symbolBorderWidth","symbolBorderColor","onMouseEnter","onMouseLeave","toggleSerie","useState","setStyle","handleMouseEnter","useCallback","filter","reduce","acc","effect","handleMouseLeave","some","handler","SymbolShape","e","id","color","hidden","legends","symbol","userSelect","LegendSvg","xStep","yStep","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","itemX","itemY","fillRect","useQuantizeColorScaleLegendData","overriddenDomain","reverse","valueFormat","separator","items","range","domainValue","invertExtent","extent","LegendPropShape","isRequired","margin","xFormat","enabled","stacked","yFormat","LineDefaultProps","axisTop","enable","orient","axisRight","axisBottom","axisLeft","enableGridX","enableGridY","colors","enablePoints","pointSize","pointColor","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","pointLabelYOffset","enableArea","areaBlendMode","areaBaselineValue","areaOpacity","enableSlices","debugSlices","enableCrosshair","crosshairType","generateLightDataSet","generateSeries","generateHeavyDataSet","settingsMapper","mapFormat","mapAxis","exclude"],"sourceRoot":""}