{"version":3,"sources":["webpack:///./src/data/components/geo/generator.js","webpack:///./src/data/components/choropleth/props.js","webpack:///./src/pages/choropleth/index.js"],"names":["exclude","generateChoroplethData","countries","features","filter","feature","includes","id","map","value","Math","round","random","props","geoProps","key","group","type","required","help","description","defaultValue","ChoroplethDefaultProps","label","controlType","GeoMapDefaultProps","layers","excludeFromDoc","controlOptions","getLegendsProps","shouldCreate","addLabel","shouldRemove","defaults","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","itemTextColor","onClick","data","alert","JSON","stringify","effects","on","style","itemBackground","groups","groupProperties","Tooltip","initialProperties","margin","top","right","bottom","left","colors","domain","unknownColor","valueFormat","projectionType","projectionScale","projectionTranslation","projectionRotation","enableGraticule","graticuleLineWidth","graticuleLineColor","borderWidth","borderColor","isInteractive","tooltip","legends","itemOpacity","Choropleth","name","meta","icon","flavors","currentFlavor","properties","defaultProperties","propertiesMapper","mapper","codePropertiesMapper","undefined","generateData","theme","logAction","formattedValue","color","omit"],"mappings":"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","file":"component---src-pages-choropleth-index-js-a8955c5094668a9c4a5d.js","sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport countries from './world_countries'\n\nconst exclude = ['BRA', 'AUS', 'SWE', 'GRL', 'COD']\n\nexport const generateChoroplethData = () =>\n    countries.features\n        .filter(feature => !exclude.includes(feature.id))\n        .map(feature => ({\n            id: feature.id,\n            value: Math.round(Math.random() * 1000000),\n        }))\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { GeoMapDefaultProps, ChoroplethDefaultProps } from '@nivo/geo'\nimport { themeProperty, getLegendsProps, groupProperties } from '../../../lib/componentProperties'\nimport { props as geoProps } from '../geo/props'\n\nconst props = [\n    ...geoProps,\n    {\n        key: 'label',\n        group: 'Base',\n        type: 'string | Function',\n        required: false,\n        help: 'Label accessor.',\n        description: `\n            Accessor to label, if a string is provided,\n            the value will be retrieved using it as\n            a key, if it's a function, it's its responsibility\n            to return the label.\n        `,\n        defaultValue: ChoroplethDefaultProps.label,\n    },\n    {\n        key: 'value',\n        group: 'Base',\n        type: 'string | Function',\n        required: false,\n        help: 'Value accessor.',\n        description: `\n            Accessor to data value, if a string is provided,\n            the value will be retrieved using\n            it as a key, if it's a function, it's its responsibility\n            to return the value.\n        `,\n        defaultValue: ChoroplethDefaultProps.value,\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        type: 'string | Function',\n        required: false,\n        help: 'Value formatter.',\n        description: `\n            Optional formatting of values, if provided, it will\n            be used for labels/tooltips. You can either pass\n            a function which will receive the node's data\n            and must return the formatted value, or a string\n            which will be used as a directive for\n            [d3-format](https://github.com/d3/d3-format).\n        `,\n        defaultValue: ChoroplethDefaultProps.value,\n    },\n    {\n        key: 'domain',\n        help: 'Defines uppper and lower bounds of color shading',\n        description: `\n            The Domain prop is a required two element array that\n            defines the minimum and maximum values for the color shading\n            of the Choropleth. The minimum and maximum provided should\n            roughly match, or be slightly outside of the minimum and\n            maximum values in your data.\n        `,\n        type: 'number[]',\n        required: true,\n        group: 'Base',\n    },\n    {\n        key: 'colors',\n        help: 'Defines color range.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: 'nivo',\n        controlType: 'quantizeColors',\n        group: 'Style',\n    },\n    {\n        key: 'unknownColor',\n        help: 'Defines the color to use for features without value.',\n        type: 'string',\n        required: false,\n        defaultValue: 'nivo',\n        controlType: 'colorPicker',\n        group: 'Style',\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        type: `Array<'graticule' | 'features' | Function>`,\n        required: false,\n        help: 'Defines the order of layers.',\n        description: `\n            Defines the order of layers, available layers are:\n            \\`graticule\\`, \\`features\\`.\n\n            You can also use this to insert extra layers\n            to the chart, this extra layer must be\n            a function which will receive the chart\n            computed data and must return a valid SVG\n            element for the SVG implementation or receive\n            a Canvas 2d context for the canvas\n            one. Custom layers will also receive the\n            computed data/projection.\n        `,\n        defaultValue: GeoMapDefaultProps.layers,\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom tooltip component.',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML\n            element and will receive the node's data.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        excludeFromDoc: true,\n        help: 'Showcase custom tooltip.',\n        type: 'boolean',\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'legends',\n        type: '{Array<object>}',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            defaults: {\n                anchor: 'center',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 4,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                itemTextColor: '#777',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemTextColor: '#000',\n                            itemBackground: '#f7fafb',\n                        },\n                    },\n                ],\n            },\n        },\n    },\n]\n\nexport const groups = groupProperties(props)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport omit from 'lodash/omit'\nimport { ResponsiveChoropleth, ChoroplethDefaultProps } from '@nivo/geo'\nimport ComponentTemplate from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/choropleth/meta.yml'\nimport mapper from '../../data/components/geo/mapper'\nimport { groups } from '../../data/components/choropleth/props'\nimport { generateChoroplethData } from '../../data/components/geo/generator'\nimport countries from '../../data/components/geo/world_countries'\n\nconst Tooltip = data => {\n    /* return custom tooltip */\n}\n\nconst initialProperties = {\n    margin: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    },\n\n    colors: 'nivo',\n    domain: [0, 1000000],\n    unknownColor: '#666666',\n\n    label: 'properties.name',\n    value: 'value',\n    valueFormat: '.2s',\n\n    projectionType: 'mercator',\n    projectionScale: 100,\n    projectionTranslation: [0.5, 0.5],\n    projectionRotation: [0, 0, 0],\n\n    enableGraticule: true,\n    graticuleLineWidth: 0.5,\n    graticuleLineColor: '#dddddd',\n\n    borderWidth: 0.5,\n    borderColor: '#152538',\n\n    isInteractive: true,\n    'custom tooltip example': false,\n    tooltip: null,\n\n    legends: [\n        {\n            anchor: 'bottom-left',\n            direction: 'column',\n            justify: true,\n            translateX: 20,\n            translateY: -100,\n            itemsSpacing: 0,\n            itemWidth: 94,\n            itemHeight: 18,\n            itemDirection: 'left-to-right',\n            itemTextColor: '#444444',\n            itemOpacity: 0.85,\n            symbolSize: 18,\n            onClick: data => {\n                alert(JSON.stringify(data, null, '    '))\n            },\n            effects: [\n                {\n                    on: 'hover',\n                    style: {\n                        itemTextColor: '#000000',\n                        itemOpacity: 1,\n                    },\n                },\n            ],\n        },\n    ],\n}\n\nconst Choropleth = () => {\n    return (\n        <ComponentTemplate\n            name=\"Choropleth\"\n            meta={meta.Choropleth}\n            icon=\"choropleth\"\n            flavors={meta.flavors}\n            currentFlavor=\"svg\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={ChoroplethDefaultProps}\n            propertiesMapper={mapper}\n            codePropertiesMapper={properties => ({\n                features: '/* please have a look at the description for usage */',\n                ...properties,\n                tooltip: properties.tooltip ? Tooltip : undefined,\n            })}\n            generateData={generateChoroplethData}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveChoropleth\n                        features={countries.features}\n                        data={data}\n                        {...properties}\n                        theme={theme}\n                        onClick={feature => {\n                            logAction({\n                                type: 'click',\n                                label: `${feature.label}: ${feature.formattedValue} (${feature.id})`,\n                                color: feature.color,\n                                data: omit(feature, 'geometry'),\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default Choropleth\n"],"sourceRoot":""}