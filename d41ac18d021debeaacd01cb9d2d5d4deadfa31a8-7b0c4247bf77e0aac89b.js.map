{"version":3,"file":"d41ac18d021debeaacd01cb9d2d5d4deadfa31a8-7b0c4247bf77e0aac89b.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-shape/src/array.js","webpack://nivo-website/../node_modules/d3-shape/src/stack.js","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../src/svg/ContinuousColorsLegendSvg.tsx","webpack://nivo-website/../src/svg/AnchoredContinuousColorsLegendSvg.tsx","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/hooks.ts"],"sourcesContent":["export var slice = Array.prototype.slice;","import { slice } from \"./array.js\";\nimport constant from \"./constant.js\";\nimport offsetNone from \"./offset/none.js\";\nimport orderNone from \"./order/none.js\";\n\nfunction stackValue(d, key) {\n  return d[key];\n}\n\nexport default function () {\n  var keys = constant([]),\n      order = orderNone,\n      offset = offsetNone,\n      value = stackValue;\n\n  function stack(data) {\n    var kz = keys.apply(this, arguments),\n        i,\n        m = data.length,\n        n = kz.length,\n        sz = new Array(n),\n        oz;\n\n    for (i = 0; i < n; ++i) {\n      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\n        si[j] = sij = [0, +value(data[j], ki, j, data)];\n        sij.data = data[j];\n      }\n\n      si.key = ki;\n    }\n\n    for (i = 0, oz = order(sz); i < n; ++i) {\n      sz[oz[i]].index = i;\n    }\n\n    offset(sz, oz);\n    return sz;\n  }\n\n  stack.keys = function (_) {\n    return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : keys;\n  };\n\n  stack.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), stack) : value;\n  };\n\n  stack.order = function (_) {\n    return arguments.length ? (order = _ == null ? orderNone : typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : order;\n  };\n\n  stack.offset = function (_) {\n    return arguments.length ? (offset = _ == null ? offsetNone : _, stack) : offset;\n  };\n\n  return stack;\n}","import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProp, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProp<X> | null\n        right?: CanvasAxisProp<Y> | null\n        bottom?: CanvasAxisProp<X> | null\n        left?: CanvasAxisProp<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProp<X> | undefined\n            : CanvasAxisProp<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { ContinuousColorsLegendProps } from './types'\n\nexport const continuousColorsLegendDefaults: {\n    length: NonNullable<ContinuousColorsLegendProps['length']>\n    thickness: NonNullable<ContinuousColorsLegendProps['thickness']>\n    direction: NonNullable<ContinuousColorsLegendProps['direction']>\n    tickPosition: NonNullable<ContinuousColorsLegendProps['tickPosition']>\n    tickSize: NonNullable<ContinuousColorsLegendProps['tickSize']>\n    tickSpacing: NonNullable<ContinuousColorsLegendProps['tickSpacing']>\n    tickOverlap: NonNullable<ContinuousColorsLegendProps['tickOverlap']>\n    tickFormat: NonNullable<ContinuousColorsLegendProps['tickFormat']>\n    titleAlign: NonNullable<ContinuousColorsLegendProps['titleAlign']>\n    titleOffset: NonNullable<ContinuousColorsLegendProps['titleOffset']>\n} = {\n    length: 200,\n    thickness: 16,\n    direction: 'row',\n    tickPosition: 'after',\n    tickSize: 4,\n    tickSpacing: 3,\n    tickOverlap: false,\n    tickFormat: (value: number) => `${value}`,\n    titleAlign: 'start',\n    titleOffset: 4,\n}\n","import { Fragment } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { computeContinuousColorsLegend } from '../compute'\nimport { ContinuousColorsLegendProps } from '../types'\nimport { continuousColorsLegendDefaults } from '../defaults'\n\nexport const ContinuousColorsLegendSvg = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        ticks: computedTicks,\n        colorStops,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const theme = useTheme()\n\n    const id = `ContinuousColorsLegendSvgGradient.${direction}.${colorStops\n        .map(stop => stop.offset)\n        .join('_')}`\n\n    return (\n        <g>\n            <defs>\n                <linearGradient\n                    id={id}\n                    x1={gradientX1}\n                    y1={gradientY1}\n                    x2={gradientX2}\n                    y2={gradientY2}\n                >\n                    {colorStops.map(colorStop => (\n                        <stop {...colorStop} />\n                    ))}\n                </linearGradient>\n            </defs>\n            {titleText && (\n                <text\n                    transform={`translate(${titleX}, ${titleY}) rotate(${titleRotation})`}\n                    textAnchor={titleHorizontalAlign}\n                    dominantBaseline={titleVerticalAlign}\n                    style={theme.legends.title.text}\n                >\n                    {titleText}\n                </text>\n            )}\n            <rect width={width} height={height} fill={`url(#${id}`} />\n            {computedTicks.map((tick, index) => (\n                <Fragment key={index}>\n                    <line\n                        x1={tick.x1}\n                        y1={tick.y1}\n                        x2={tick.x2}\n                        y2={tick.y2}\n                        style={theme.legends.ticks.line}\n                    />\n                    <text\n                        x={tick.textX}\n                        y={tick.textY}\n                        textAnchor={tick.textHorizontalAlign}\n                        dominantBaseline={tick.textVerticalAlign}\n                        style={theme.legends.ticks.text}\n                    >\n                        {tick.text}\n                    </text>\n                </Fragment>\n            ))}\n        </g>\n    )\n}\n","import { AnchoredContinuousColorsLegendProps } from '../types'\nimport { computePositionFromAnchor } from '../compute'\nimport { continuousColorsLegendDefaults } from '../defaults'\nimport { ContinuousColorsLegendSvg } from './ContinuousColorsLegendSvg'\n\nexport const AnchoredContinuousColorsLegendSvg = ({\n    containerWidth,\n    containerHeight,\n    anchor,\n    translateX = 0,\n    translateY = 0,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    ...legendProps\n}: AnchoredContinuousColorsLegendProps) => {\n    let width: number\n    let height: number\n    if (direction === 'row') {\n        width = length\n        height = thickness\n    } else {\n        width = thickness\n        height = length\n    }\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <g transform={`translate(${x}, ${y})`}>\n            <ContinuousColorsLegendSvg\n                length={length}\n                thickness={thickness}\n                direction={direction}\n                {...legendProps}\n            />\n        </g>\n    )\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n\n        if (reverse) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse, separator, valueFormat])\n}\n"],"names":["slice","Array","prototype","stackValue","d","key","keys","order","offset","value","stack","data","i","oz","kz","apply","this","arguments","m","length","n","sz","sij","ki","si","j","index","_","computeCartesianTicks","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","position","centerScale","line","lineX","lineY","text","textX","textY","isRTL","document","textAlign","textBaseline","translate","x","y","ticks","getFormatter","formatter","timeFormat","Date","d3Format","computeGridLines","width","height","_values","isArray","lines","x1","x2","y1","y2","AxisTick","_value","format","onClick","textAnchor","animatedProps","theme","useTheme","props","useMemo","style","opacity","cursor","event","transform","dominantBaseline","memoizedAxisTick","memo","Axis","renderTick","legend","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","useSpring","lineX2","lineY2","config","immediate","transition","useTransition","tick","initial","textTransform","from","enter","update","leave","tickIndex","rotate","transitionProps","memoizedAxis","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","axes","top","right","bottom","left","isXAxis","GridLine","_jsx","GridLines","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","_format","ctx","Number","degreesToRadians","String","renderAxesToCanvas","renderGridLinesToCanvas","continuousColorsLegendDefaults","thickness","direction","tickPosition","tickSpacing","tickOverlap","tickFormat","titleAlign","titleOffset","zeroPadding","computeDimensions","item","itemsSpacing","_padding","padding","itemCount","itemWidth","itemHeight","Error","horizontalPadding","verticalPadding","spacing","computePositionFromAnchor","anchor","translateX","translateY","containerWidth","containerHeight","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","justify","symbolSize","symbolSpacing","computeContinuousColorsLegend","title","domain","reverse","positionScale","scaleLinear","range","thresholds","titleX","titleY","titleRotation","titleVerticalAlign","textVerticalAlign","textHorizontalAlign","colorStops","computeContinuousColorScaleColorStops","getValueFormatter","computedTicks","gradientY1","gradientX2","forEach","push","gradientX1","gradientY2","titleText","titleHorizontalAlign","ContinuousColorsLegendSvg","id","map","stop","join","_jsxDEV","colorStop","legends","fill","Fragment","AnchoredContinuousColorsLegendSvg","legendProps","symbolByShape","circle","size","borderWidth","borderColor","r","cx","cy","strokeWidth","stroke","pointerEvents","diamond","square","triangle","LegendSvgItem","textColor","background","symbolShape","symbolBorderWidth","symbolBorderColor","onMouseEnter","onMouseLeave","toggleSerie","effects","useState","setStyle","handleMouseEnter","useCallback","filter","on","reduce","acc","effect","handleMouseLeave","isInteractive","some","handler","SymbolShape","itemOpacity","itemBackground","e","React","color","hidden","symbol","itemTextColor","userSelect","label","LegendSvg","itemDirection","xStep","yStep","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","save","font","fontSize","fontFamily","itemX","itemY","fillStyle","fillRect","fillText","restore","renderContinuousColorLegendToCanvas","_ticks","initialStyles","gradient","createLinearGradient","addColorStop","stopColor","fontWeight","lineWidth","strokeStyle","lineCap","beginPath","moveTo","lineTo","useQuantizeColorScaleLegendData","overriddenDomain","valueFormat","v","separator","items","domainValue","invertExtent","extent","LegendPropShape","isRequired"],"sourceRoot":""}