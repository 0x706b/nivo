{"version":3,"file":"5b31324804331cc0c880e940c838164d78e9ad4a-7621966a9061da08d59a.js","mappings":"4hBAAaA,EACA,EADAA,EAEE,IAFFA,EAGO,ECyBPC,EAAqB,SAC9BC,GAAAA,MACwE,WAAxBA,EAAeC,MAEtDC,EAAkB,SAC3BF,GAAAA,MACqE,QAAxBA,EAAeC,MAEnDE,EAAmB,SAC5BH,GAAAA,MACsE,SAAxBA,EAAeC,MCmDpDG,EAAoB,SAC7BC,GAAAA,IAWIC,EACAC,EATAC,EAMAH,EANAG,EACAC,EAKAJ,EALAI,EACAC,EAIAL,EAJAK,MACAC,EAGAN,EAHAM,MAAAA,EAGAN,EAFAO,UAAAA,OAAAA,IAAAA,EAAYd,EAAac,EAAAA,EAEzBP,EADAQ,eAAAA,OAAAA,IAAAA,EAAiBf,EAAae,EAAAA,GAM9BC,GAAAA,CAASJ,GACTJ,EAAgBE,EAAIE,MACjB,aAAIA,EAAMK,IAAAA,MAGP,IAAIC,MAAAA,6EAFVV,EAAgBI,EAAMK,IAAAA,GAKtBD,GAAAA,CAASH,GACTJ,EAAgBE,EAAIE,MACjB,aAAIA,EAAMI,IAAAA,MAGP,IAAIC,MAAAA,6EAFVT,EAAgBI,EAAMI,IAAAA,IAKtBE,EAAYT,EACZU,EAAYT,EAEVU,EA7CkB,SACxBC,EACAC,EACAC,EACAC,GAAAA,IAEMJ,EAAQK,KAAKC,MAAMF,EAAUF,EAASC,EAAUF,GAAAA,OAE/CM,EAAAA,EAAAA,KAAqBC,EAAAA,EAAAA,IAAiBR,IAqC/BS,CAAapB,EAAGC,EAAGH,EAAeC,GAAAA,GAE5CR,EAA0BM,GAAa,CAAC,IAClCwB,GAAWC,EAAAA,EAAAA,KAAkBC,EAAAA,EAAAA,IAAiBZ,GAAQd,EAAW2B,KAAO,GAC9Ef,GAAaY,EAASrB,EACtBU,GAAaW,EAASpB,EAAAA,GAGtBN,EAAwBE,GAAa,CAAC,IAChC4B,EAAST,KAAKU,OAAOf,EAAQ,IAAM,IAAM,EAChC,IAAXc,IACAf,GAAab,EAAW8B,OAAS,GAEtB,IAAXF,IACAhB,GAAaZ,EAAW+B,MAAQ,EAChClB,GAAab,EAAW8B,OAAS,GAEtB,IAAXF,IACAhB,GAAaZ,EAAW+B,MAAQ,GAErB,IAAXH,IACAhB,GAAaZ,EAAW+B,MAAQ,EAChClB,GAAab,EAAW8B,OAAS,GAEtB,IAAXF,IACAf,GAAab,EAAW8B,OAAS,GAEtB,IAAXF,IACAhB,GAAaZ,EAAW+B,MAAQ,EAChClB,GAAab,EAAW8B,OAAS,GAEtB,IAAXF,IACAhB,GAAaZ,EAAW+B,MAAQ,GAErB,IAAXH,IACAhB,GAAaZ,EAAW+B,MAAQ,EAChClB,GAAab,EAAW8B,OAAS,OAIrCE,EAAQ/B,EAGRgC,EAAYhC,EAAAA,OAGXa,EAAQ,IAAM,IAAM,KACrBkB,GAASzB,EACT0B,GAAa1B,GAEb0B,GAAa1B,EAGV,CACH2B,OAAQ,CACJ,CAACtB,EAAWC,GACZ,CAACZ,EAAeC,GAChB,CAAC+B,EAbS/B,IAediC,KAAM,CAACH,EAlBG9B,EAAgBM,GAmB1BM,MAAOA,EAAQ,KC3KVsB,EAAiB,gBAC1BC,EAAAA,EAAAA,KACAC,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,cAAAA,OAOAC,EAAAA,EAAAA,UACI,kBDPuB,gBAM3BJ,EAAAA,EAAAA,KACAC,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,cAAAA,OAOAF,EAAYI,QAAO,SAACC,EAA+B3C,GAAAA,IACzC4C,EAAS5C,EAAW4C,QAAU,kBAG7BD,EACAE,GAAAA,CAAcR,EAAMrC,EAAW8C,OAAOC,KAAI,gBACnCvB,EAAWe,EAAYS,GACvBC,EAAaT,EAAcQ,GAAAA,OAE7BtD,EAAmBM,IAAeF,EAAiBE,MACnDiD,EAAWtB,KAAOsB,EAAWtB,KAAgB,EAATiB,EACpCK,EAAWlB,MAAQkB,EAAWlB,MAAiB,EAATa,EACtCK,EAAWnB,OAASmB,EAAWnB,OAAkB,EAATc,GAAAA,EAAAA,GAqBrCM,GAAAA,CAAKlD,EAAY,CAAC,QAAS,WAC3BwB,EACAyB,EAAAA,CACHtB,KAAM3B,EAAW2B,MAAQsB,EAAWtB,KACpCqB,MAAAA,UAMb,ICnDKG,CAAuB,CACnBd,KAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,cAAAA,MAER,CAACH,EAAMC,EAAaC,EAAaC,KAG5BY,EAAyB,gBAClCd,EAAAA,EAAAA,YAAAA,OAIAG,EAAAA,EAAAA,UACI,kBACIH,EAAYS,KAAI,wBACT/C,EAAAA,CACHqD,SAAUtD,EAAAA,EAAAA,GACHC,WAGf,CAACsC,KAIgDtC,EAAAA,8EC7C5CsD,EAAiB,gBAC1BN,EAAAA,EAAAA,MACA7C,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAmD,EAAAA,EAAAA,KAOMC,GAAQC,EAAAA,EAAAA,MAAAA,GAC4BC,EAAAA,EAAAA,MAAlCC,EAAAA,EAAAA,QAAiBC,EAAAA,EAARC,OAEXC,GAAgBC,EAAAA,EAAAA,WAAU,CAC5B5D,EAAAA,EACAC,EAAAA,EACAyD,OAAQD,EACRI,WAAYL,IAAAA,MAGI,mBAATJ,GACAU,EAAAA,EAAAA,eAAcV,EAAM,CAAEpD,EAAAA,EAAGC,EAAAA,EAAG4C,MAAAA,KAInCkB,EAAAA,EAAAA,QAAAA,EAAAA,SAAAA,CAAAA,SAAAA,CACKV,EAAMlB,YAAYH,KAAKgC,aAAe,IACnCD,EAAAA,EAAAA,QAACE,EAAAA,EAAAA,KAASjC,CACNhC,EAAG2D,EAAc3D,EACjBC,EAAG0D,EAAc1D,EACjBiE,MAAAA,EAAAA,GACOb,EAAMlB,YAAYH,KAAAA,CACrBmC,eAAgB,QAChBC,YAAmD,EAAtCf,EAAMlB,YAAYH,KAAKgC,aACpCK,OAAQhB,EAAMlB,YAAYH,KAAKsC,eAAAA,SAGlClB,QAAAA,GAAAA,EAAAA,CAAAA,SAAAA,EAAAA,WAAAA,GAAAA,aAAAA,SAAAA,IAGTW,EAAAA,EAAAA,QAACE,EAAAA,EAAAA,KAASjC,CACNhC,EAAG2D,EAAc3D,EACjBC,EAAG0D,EAAc1D,EACjBiE,MAAOK,GAAAA,CAAKlB,EAAMlB,YAAYH,KAAM,CAAC,eAAgB,0BAEpDoB,QAAAA,GAAAA,EAAAA,CAAAA,SAAAA,EAAAA,WAAAA,GAAAA,aAAAA,SAAAA,UAAAA,GAAAA,IChDJoB,EAAiB,SAAC,GAAD,IAC1BzC,EAAAA,EAAAA,OAAAA,EAAAA,EACA0C,UAAAA,OAAAA,IAAAA,GAAAA,EAKMpB,GAAQC,EAAAA,EAAAA,MAERoB,GAAOpC,EAAAA,EAAAA,UAAQ,eACVqC,EAA8B5C,EAAAA,GAAAA,OAAAA,EAAAA,MAAAA,GAElBQ,QACf,SAACC,EAAAA,GAAAA,OAAmBA,EAAAA,KAAAA,EAAAA,GAAAA,IAAAA,EAAAA,KAAAA,IAChBmC,EAAW,OAAMA,EAAW,MAErC,CAAC5C,IAEE6C,GAAeC,EAAAA,EAAAA,IAAgBH,GAAAA,GAEjCD,GAAapB,EAAMlB,YAAY2C,KAAKd,cAAgB,SAC7C,SAGLE,EAAAA,EAAAA,GAAab,EAAMlB,YAAY2C,MAAAA,OACjCL,IACAP,EAAMa,cAAgB,SACtBb,EAAME,YACFf,EAAMlB,YAAY2C,KAAKV,YAAoD,EAAtCf,EAAMlB,YAAY2C,KAAKd,aAChEE,EAAMG,OAAShB,EAAMlB,YAAY2C,KAAKR,aACtCJ,EAAMc,QAAU3B,EAAMlB,YAAY2C,KAAKG,iBAGpClB,EAAAA,EAAAA,QAACE,EAAAA,EAAAA,KAASS,CAAKQ,KAAK,OAAOC,EAAGP,EAAcV,MAAOA,QAAAA,GAAAA,EAAAA,CAAAA,SAAAA,8EAAAA,WAAAA,GAAAA,aAAAA,SAAAA,IAAAA,EAAAA,uFClCjDkB,EAA0B,SAAC,GAAD,IAAGpF,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAAGuB,EAAAA,EAAAA,KACtC6B,GAAQC,EAAAA,EAAAA,MAAAA,GAC4BC,EAAAA,EAAAA,MAAlCC,EAAAA,EAAAA,QAAiBC,EAAAA,EAARC,OAEXC,GAAgBC,EAAAA,EAAAA,WAAU,CAC5B5D,EAAAA,EACAC,EAAAA,EACAoF,OAAQ7D,EAAO,EACfkC,OAAQD,EACRI,WAAYL,IAAAA,OAIZO,EAAAA,EAAAA,QAAAA,EAAAA,SAAAA,CAAAA,SAAAA,CACKV,EAAMlB,YAAYmD,QAAQtB,aAAe,IACtCD,EAAAA,EAAAA,QAACE,EAAAA,EAAAA,OAASsB,CACNC,GAAI7B,EAAc3D,EAClByF,GAAI9B,EAAc1D,EAClByF,EAAG/B,EAAc0B,OACjBnB,MAAAA,EAAAA,GACOb,EAAMlB,YAAYmD,QAAAA,CACrBJ,KAAM,OACNd,YACIf,EAAMlB,YAAYmD,QAAQlB,YACe,EAAzCf,EAAMlB,YAAYmD,QAAQtB,aAC9BK,OAAQhB,EAAMlB,YAAYmD,QAAQhB,aAClCU,QAAS3B,EAAMlB,YAAYmD,QAAQL,uBAAAA,GAAAA,EAAAA,CAAAA,SAAAA,EAAAA,WAAAA,GAAAA,aAAAA,SAAAA,IAI/ClB,EAAAA,EAAAA,QAACE,EAAAA,EAAAA,OAASsB,CACNC,GAAI7B,EAAc3D,EAClByF,GAAI9B,EAAc1D,EAClByF,EAAG/B,EAAc0B,OACjBnB,MAAOb,EAAMlB,YAAYmD,cAAAA,GAAAA,EAAAA,CAAAA,SAAAA,EAAAA,WAAAA,GAAAA,aAAAA,SAAAA,UAAAA,GAAAA,IAAAA,EAAAA,oFCjC5BK,EAAuB,SAAC,GAAD,IAChC3F,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EAAAA,EAAAA,EACAuB,KAAAA,OAAAA,IAAAA,EAAOlC,EAAasG,EAMdvC,GAAQC,EAAAA,EAAAA,MAAAA,GAC4BC,EAAAA,EAAAA,MAAlCC,EAAAA,EAAAA,QAAiBC,EAAAA,EAARC,OAEXC,GAAgBC,EAAAA,EAAAA,WAAU,CAC5B5D,EAAAA,EACAC,EAAAA,EACAoF,OAAQ7D,EAAO,EACfkC,OAAQD,EACRI,WAAYL,IAAAA,OAIZO,EAAAA,EAAAA,QAAAA,EAAAA,SAAAA,CAAAA,SAAAA,CACKV,EAAMlB,YAAYmD,QAAQtB,aAAe,IACtCD,EAAAA,EAAAA,QAACE,EAAAA,EAAAA,OAASsB,CACNC,GAAI7B,EAAc3D,EAClByF,GAAI9B,EAAc1D,EAClByF,EAAG/B,EAAc0B,OACjBnB,MAAAA,EAAAA,GACOb,EAAMlB,YAAYmD,QAAAA,CACrBJ,KAAM,OACNd,YAAsD,EAAzCf,EAAMlB,YAAYmD,QAAQtB,aACvCK,OAAQhB,EAAMlB,YAAYmD,QAAQhB,aAClCU,QAAS3B,EAAMlB,YAAYmD,QAAQL,uBAAAA,GAAAA,EAAAA,CAAAA,SAAAA,EAAAA,WAAAA,GAAAA,aAAAA,SAAAA,IAI/ClB,EAAAA,EAAAA,QAACE,EAAAA,EAAAA,OAASsB,CACNC,GAAI7B,EAAc3D,EAClByF,GAAI9B,EAAc1D,EAClByF,EAAG/B,EAAc0B,OACjBnB,MAAOb,EAAMlB,YAAY0D,aAAAA,GAAAA,EAAAA,CAAAA,SAAAA,EAAAA,WAAAA,GAAAA,aAAAA,SAAAA,UAAAA,GAAAA,IAAAA,EAAAA,qFCzC5BC,EAAwB,SAAC,GAAD,IACjC9F,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACA2B,EAAAA,EAAAA,MACAD,EAAAA,EAAAA,OAAAA,EAAAA,EACAoE,aAAAA,OAAAA,IAAAA,EAAe,IAQT1C,GAAQC,EAAAA,EAAAA,MAAAA,GAC4BC,EAAAA,EAAAA,MAAlCC,EAAAA,EAAAA,QAAiBC,EAAAA,EAARC,OAEXC,GAAgBC,EAAAA,EAAAA,WAAU,CAC5B5D,EAAGA,EAAI4B,EAAQ,EACf3B,EAAGA,EAAI0B,EAAS,EAChBC,MAAAA,EACAD,OAAAA,EACA+B,OAAQD,EACRI,WAAYL,IAAAA,OAIZO,EAAAA,EAAAA,QAAAA,EAAAA,SAAAA,CAAAA,SAAAA,CACKV,EAAMlB,YAAYmD,QAAQtB,aAAe,IACtCD,EAAAA,EAAAA,QAACE,EAAAA,EAAAA,KAAS+B,CACNhG,EAAG2D,EAAc3D,EACjBC,EAAG0D,EAAc1D,EACjBgG,GAAIF,EACJG,GAAIH,EACJnE,MAAO+B,EAAc/B,MACrBD,OAAQgC,EAAchC,OACtBuC,MAAAA,EAAAA,GACOb,EAAMlB,YAAYmD,QAAAA,CACrBJ,KAAM,OACNd,YACIf,EAAMlB,YAAYmD,QAAQlB,YACe,EAAzCf,EAAMlB,YAAYmD,QAAQtB,aAC9BK,OAAQhB,EAAMlB,YAAYmD,QAAQhB,aAClCU,QAAS3B,EAAMlB,YAAYmD,QAAQL,uBAAAA,GAAAA,EAAAA,CAAAA,SAAAA,EAAAA,WAAAA,GAAAA,aAAAA,SAAAA,IAI/ClB,EAAAA,EAAAA,QAACE,EAAAA,EAAAA,KAAS+B,CACNhG,EAAG2D,EAAc3D,EACjBC,EAAG0D,EAAc1D,EACjBgG,GAAIF,EACJG,GAAIH,EACJnE,MAAO+B,EAAc/B,MACrBD,OAAQgC,EAAchC,OACtBuC,MAAOb,EAAMlB,YAAYmD,cAAAA,GAAAA,EAAAA,CAAAA,SAAAA,EAAAA,WAAAA,GAAAA,aAAAA,SAAAA,UAAAA,GAAAA,IAAAA,EAAAA,0EC/C5Ba,EAAa,SAAStG,GAAAA,IACvBgD,EAAsBhD,EAAtBgD,MAAO7C,EAAeH,EAAfG,EAAGC,EAAYJ,EAAZI,EAAGmD,EAASvD,EAATuD,KACfF,ENuC2B,SAAQrD,GAAAA,OACzCyC,EAAAA,EAAAA,UAAQ,kBAAM1C,EAAyBC,KAAa,CAACA,IMxCpCuG,CAAsBvG,GAAAA,IRAlB,SAAQuD,GAAAA,IACvBiD,SAAkBjD,EAAAA,OAGpBkD,EAAAA,EAAAA,gBAAelD,IACF,WAAbiD,GACa,aAAbA,GACa,WAAbA,EQLCE,CAAUnD,GAAAA,MACL,IAAI5C,MAAM,+CAIhBuD,EAAAA,EAAAA,QAAAA,EAAAA,SAAAA,CAAAA,SAAAA,EACIA,EAAAA,EAAAA,QAACS,EAAAA,CAAezC,OAAQmB,EAASnB,OAAQ0C,WAAAA,QAAW,wDACnDlF,EAAmBM,KAChBkE,EAAAA,EAAAA,QAACqB,EAAAA,CAAwBpF,EAAGA,EAAGC,EAAGA,EAAGuB,KAAM3B,EAAW2B,WAAAA,GAAAA,EAAAA,CAAAA,SAAAA,EAAAA,WAAAA,GAAAA,aAAAA,SAAAA,GAEzD9B,EAAgBG,KACbkE,EAAAA,EAAAA,QAAC4B,EAAAA,CAAqB3F,EAAGA,EAAGC,EAAGA,EAAGuB,KAAM3B,EAAW2B,WAAAA,GAAAA,EAAAA,CAAAA,SAAAA,EAAAA,WAAAA,GAAAA,aAAAA,SAAAA,GAEtD7B,EAAiBE,KACdkE,EAAAA,EAAAA,QAAC+B,EAAAA,CACG9F,EAAGA,EACHC,EAAGA,EACH2B,MAAO/B,EAAW+B,MAClBD,OAAQ9B,EAAW8B,OACnBoE,aAAclG,EAAWkG,mBAAAA,GAAAA,EAAAA,CAAAA,SAAAA,EAAAA,WAAAA,GAAAA,aAAAA,SAAAA,IAGjChC,EAAAA,EAAAA,QAACS,EAAAA,CAAezC,OAAQmB,EAASnB,aAAAA,GAAAA,EAAAA,CAAAA,SAAAA,EAAAA,WAAAA,GAAAA,aAAAA,SAAAA,IACjCgC,EAAAA,EAAAA,QAACZ,EAAAA,CAAeN,MAAOA,EAAO7C,EAAGkD,EAASlB,KAAK,GAAI/B,EAAGiD,EAASlB,KAAK,GAAIoB,KAAMA,QAAAA,GAAAA,EAAAA,CAAAA,SAAAA,EAAAA,WAAAA,GAAAA,aAAAA,SAAAA,UAAAA,GAAAA,IChCpFoD,EAAa,SAACC,EAA+B1E,GAC/CA,EAAO2E,SAAQ,WAASC,GAAAA,IAAP3G,EAAAA,EAAAA,GAAGC,EAAAA,EAAAA,GACF,IAAV0G,EACAF,EAAIG,OAAO5G,EAAGC,GAEdwG,EAAII,OAAO7G,EAAGC,OAKb6G,EAA4B,SACrCL,EAAAA,GAAAA,IAEItE,EAAAA,EAAAA,YACAkB,EAAAA,EAAAA,MAMuB,IAAvBlB,EAAY4E,SAEhBN,EAAIO,OACJ7E,EAAYuE,SAAQ,gBTLI,SAAQtD,GAAAA,IAC1BiD,SAAkBjD,EAAAA,MAEJ,WAAbiD,GAAsC,aAAbA,ESGvBY,CAAapH,EAAWuD,MAAAA,MACnB,IAAI5C,MAAM,6CAGhB6C,EAAMlB,YAAY2C,KAAKd,aAAe,IACtCyC,EAAIS,QAAU,SACdT,EAAIU,YAAc9D,EAAMlB,YAAY2C,KAAKR,aACzCmC,EAAIW,UACA/D,EAAMlB,YAAY2C,KAAKV,YAAoD,EAAtCf,EAAMlB,YAAY2C,KAAKd,aAChEyC,EAAIY,YACJb,EAAWC,EAAK5G,EAAWqD,SAASnB,QACpC0E,EAAIpC,SACJoC,EAAIS,QAAU,QAGd3H,EAAmBM,IAAewD,EAAMlB,YAAYmD,QAAQtB,aAAe,IAC3EyC,EAAIU,YAAc9D,EAAMlB,YAAYmD,QAAQhB,aAC5CmC,EAAIW,UACA/D,EAAMlB,YAAYmD,QAAQlB,YAAuD,EAAzCf,EAAMlB,YAAYmD,QAAQtB,aACtEyC,EAAIY,YACJZ,EAAIa,IAAIzH,EAAWG,EAAGH,EAAWI,EAAGJ,EAAW2B,KAAO,EAAG,EAAG,EAAIR,KAAKuG,IACrEd,EAAIpC,UAGJ3E,EAAgBG,IAAewD,EAAMlB,YAAY0D,OAAO7B,aAAe,IACvEyC,EAAIU,YAAc9D,EAAMlB,YAAY0D,OAAOvB,aAC3CmC,EAAIW,UAAoD,EAAxC/D,EAAMlB,YAAY0D,OAAO7B,aACzCyC,EAAIY,YACJZ,EAAIa,IAAIzH,EAAWG,EAAGH,EAAWI,EAAGJ,EAAW2B,KAAO,EAAG,EAAG,EAAIR,KAAKuG,IACrEd,EAAIpC,UAGJ1E,EAAiBE,IAAewD,EAAMlB,YAAYmD,QAAQtB,aAAe,IACzEyC,EAAIU,YAAc9D,EAAMlB,YAAYmD,QAAQhB,aAC5CmC,EAAIW,UACA/D,EAAMlB,YAAYmD,QAAQlB,YAAuD,EAAzCf,EAAMlB,YAAYmD,QAAQtB,aACtEyC,EAAIY,YACJZ,EAAIT,KACAnG,EAAWG,EAAIH,EAAW+B,MAAQ,EAClC/B,EAAWI,EAAIJ,EAAW8B,OAAS,EACnC9B,EAAW+B,MACX/B,EAAW8B,QAEf8E,EAAIpC,UAGRoC,EAAIU,YAAc9D,EAAMlB,YAAY2C,KAAKT,OACzCoC,EAAIW,UAAY/D,EAAMlB,YAAY2C,KAAKV,YACvCqC,EAAIY,YACJb,EAAWC,EAAK5G,EAAWqD,SAASnB,QACpC0E,EAAIpC,SAEA9E,EAAmBM,KACnB4G,EAAIU,YAAc9D,EAAMlB,YAAYmD,QAAQjB,OAC5CoC,EAAIW,UAAY/D,EAAMlB,YAAYmD,QAAQlB,YAC1CqC,EAAIY,YACJZ,EAAIa,IAAIzH,EAAWG,EAAGH,EAAWI,EAAGJ,EAAW2B,KAAO,EAAG,EAAG,EAAIR,KAAKuG,IACrEd,EAAIpC,UAGJ3E,EAAgBG,KAChB4G,EAAIe,UAAYnE,EAAMlB,YAAY0D,OAAOX,KACzCuB,EAAIY,YACJZ,EAAIa,IAAIzH,EAAWG,EAAGH,EAAWI,EAAGJ,EAAW2B,KAAO,EAAG,EAAG,EAAIR,KAAKuG,IACrEd,EAAIvB,QAGJvF,EAAiBE,KACjB4G,EAAIU,YAAc9D,EAAMlB,YAAYmD,QAAQjB,OAC5CoC,EAAIW,UAAY/D,EAAMlB,YAAYmD,QAAQlB,YAC1CqC,EAAIY,YACJZ,EAAIT,KACAnG,EAAWG,EAAIH,EAAW+B,MAAQ,EAClC/B,EAAWI,EAAIJ,EAAW8B,OAAS,EACnC9B,EAAW+B,MACX/B,EAAW8B,QAEf8E,EAAIpC,UAGuB,mBAApBxE,EAAWuD,KAClBvD,EAAWuD,KAAKqD,EAAK,CACjB5D,MAAOhD,EAAWgD,MAClB7C,EAAGH,EAAWqD,SAASlB,KAAK,GAC5B/B,EAAGJ,EAAWqD,SAASlB,KAAK,GAC5BqB,MAAAA,KAGJoD,EAAIgB,KAAUpE,EAAMlB,YAAYH,KAAK0F,SAAAA,MAAcrE,EAAMlB,YAAYH,KAAK2F,WAC1ElB,EAAImB,UAAY,OAChBnB,EAAIoB,aAAe,aAEnBpB,EAAIe,UAAYnE,EAAMlB,YAAYH,KAAKkD,KACvCuB,EAAIU,YAAc9D,EAAMlB,YAAYH,KAAKsC,aACzCmC,EAAIW,UAAkD,EAAtC/D,EAAMlB,YAAYH,KAAKgC,aAEnCX,EAAMlB,YAAYH,KAAKgC,aAAe,IACtCyC,EAAIqB,SAAW,QACfrB,EAAIsB,WACAlI,EAAWuD,KACXvD,EAAWqD,SAASlB,KAAK,GACzBnC,EAAWqD,SAASlB,KAAK,IAE7ByE,EAAIqB,SAAW,SAEnBrB,EAAIuB,SAASnI,EAAWuD,KAAMvD,EAAWqD,SAASlB,KAAK,GAAInC,EAAWqD,SAASlB,KAAK,QAG5FyE,EAAIwB,a,6nBCrID,ICAA,EDAMC,EAAiB,YAAsE,IAAxDC,EAAuD,EAAvDA,KAAMhG,EAAiD,EAAjDA,YACxCiG,GAAmBnG,EAAAA,EAAAA,IAAe,CACpCC,KADoC,EAEpCC,YAFoC,EAGpCC,YAAa,SAAAiG,GAAG,MAAK,CACjBrI,EAAGqI,EAAAA,EAAQA,EAAAA,MADM,EAEjBpI,EAAGoI,EAAAA,EAAQA,EAAAA,OAAa,IAE5BhG,cAAe,gBAAGV,EAAH,SAAWC,EAAX,cAAwB,CACnCA,MADmC,EAEnCD,OAFmC,EAGnCH,KAAMR,KAAAA,IAAAA,EAAAA,OAId,OACI,8BACKoH,EAAA,KAAqB,qBAClBE,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAAA,GAAAA,GADkB,SEVrBC,EAAa,SAAC,GAAD,IAAG3G,EAAH,QAAUD,EAAV,SAAkB6G,EAAlB,UAA2BC,EAA3B,qBACtB,8BACKD,EAAA,KAAY,oBAAEE,EAAF,KAAUxG,EAAV,YACT,sBAGIyG,eAHJ,EAIIC,gBAJJ,EAKI1G,KAAI,SAAEwG,EAAF,QALR,EAMID,YACIC,EAAAA,aAAAA,SAAsBA,EAAAA,SAAtBA,OAAiEG,IARhE,SAFd,WC8GN,oBdlHYvJ,EAAe,CACxBwJ,QADwB,KAExBC,KAAM,CAFkB,SAIxBC,UAJwB,UAKxBC,OALwB,WAMxBC,SANwB,EAQxBC,SARwB,OASxBC,SATwB,OAWxBC,WAAY,CAAE5J,KAAM,UACpB6J,WAAY,CAAE7J,KAAF,OAAgBiC,OAAO,GAEnC6H,QAdwB,GAexBC,aAfwB,EAiBxBC,WAjBwB,GAkBxBC,SAlBwB,GAmBxBC,aAnBwB,EAoBxBC,aApBwB,EAsBxBC,aAtBwB,EAuBxBC,MAvBwB,iBAwBxBC,eAxBwB,EAyBxBC,gBAzBwB,EA0BxBC,eAAgB,CAAEC,KAAF,QAAiB7G,MAAO,oBAExC8G,QA5BwB,KA6BxBC,OAAQ,CAAEC,OAAQ,QAElBtE,aA/BwB,EAgCxBuE,YAhCwB,EAiCxBC,YAAa,CAAEL,KAAM,SAErBM,eAnCwB,EAoCxBC,QYvCsB,YAAsE,IAAxDC,EAAuD,EAAvDA,MAAOZ,EAAgD,EAAhDA,MAAU5H,EAAsC,OAC3F,OAAO,eAAcyI,GAAd,EAAyBC,MAAO1I,EAAhC,eAAqD2I,YAArD,EAAuEH,MAAOA,KZuCrFI,aAAc,mBAAiDjI,EAAjD,SAA+DA,EAA/D,YAEd2F,QAvCwB,GAwCxBuC,iBAxCwB,GAyCxB5I,YAzCwB,GA0CxB6I,QAAS,IAGAC,EAAe,QAExBC,OAAQ,0CAFgB,eAGxBC,achDmB,YAgCQ,IAAD,MA/B1B9C,IAAOnG,EA+BmB,EA/BnBA,KAASmG,EA+BU,WA7B1BnE,MACIqG,EA4BsB,EA5BtBA,YACAG,EA2BsB,EA3BtBA,MACA/I,EA0BsB,EA1BtBA,OACAyJ,EAyBsB,EAzBtBA,WACAC,EAwBsB,EAxBtBA,aACAC,EAuBsB,EAvBtBA,OACAC,EAsBsB,EAtBtBA,OACAC,EAqBsB,EArBtBA,UACA5J,EAoBsB,EApBtBA,MAGJmE,EAiB0B,EAjB1BA,aACAuE,EAgB0B,EAhB1BA,YAEAR,EAc0B,EAd1BA,MACA2B,EAa0B,EAb1BA,kBAEAjB,EAW0B,EAX1BA,cACAkB,EAU0B,EAV1BA,QACAC,EAS0B,EAT1BA,aACAC,EAQ0B,EAR1BA,aAEAnB,EAM0B,EAN1BA,QAEAoB,EAI0B,EAJ1BA,YACAC,EAG0B,EAH1BA,UACAC,EAE0B,EAF1BA,eACAC,EAC0B,EAD1BA,gBAEM3I,GAAQC,EAAAA,EAAAA,MACd,GAA6D2I,EAAAA,EAAAA,MAArDC,EAAR,uBAA8BC,EAA9B,gBAA6CC,EAA7C,cAEMC,GAAgB/J,EAAAA,EAAAA,UAClB,kBAAM,kBAAMwB,EAAAA,EAAAA,eAAc2G,EAAQ,EAAT,KAAnB,OACN,CAACA,EAAQ,EAFb,IAKM6B,GAAcC,EAAAA,EAAAA,cAChB,YACIb,MAAAA,GAAAA,EAAO,GAAKhB,MAAOrC,EAAIqC,OAAhB,GAAPgB,KAEJ,CAACrD,EAAI,EAJT,IAMMmE,GAAgBD,EAAAA,EAAAA,cAClB,mBAAuCL,EAAqBG,IAA5D,KACA,CAACH,EAFL,IAIMO,GAAmBF,EAAAA,EAAAA,cACrB,YACIZ,MAAAA,GAAAA,EAAY,EAAZA,GACAO,EAAqBG,IAArBH,KAEJ,CAAChK,EAAK,EAAN,EALJ,IAOMwK,GAAmBH,EAAAA,EAAAA,cACrB,YACIX,MAAAA,GAAAA,EAAY,EAAZA,GACAQ,MAEJ,CAAClK,EAAK,EALV,IASMyK,GAAcJ,EAAAA,EAAAA,cAAY,WAC5BJ,EAAcE,IAAiB,CAAChE,EAAAA,KAAWA,EAAAA,MAAZ,EAA2BA,EAA1D8D,SACD,CAACA,EAAc,EAFlB,IAGMS,GAAaL,EAAAA,EAAAA,cAAY,WAC3BH,MACD,CAFH,IAIA,OACI,UAAC,MAAD,CAAYZ,UAAZ,aACI,SAAC,SAAD,CACI5J,OAAOiL,EAAAA,EAAAA,IAAGjL,GAAO,SAAAgJ,GAAK,OAAI5J,KAAAA,IAAAA,EAAJ,MACtBW,QAAQkL,EAAAA,EAAAA,IAAGlL,GAAQ,SAAAiJ,GAAK,OAAI5J,KAAAA,IAAAA,EAAJ,MACxBiF,GAHJ,EAIIC,GAJJ,EAKIhB,KAAI,SAAEhD,EAAF,QALR,EAMIkC,YANJ,EAOIC,OAPJ,EAQIyI,UARJ,EASIC,SAAUlB,EAAW,OATzB,EAUI,aAAYC,EAAYA,EAAH,QAVzB,EAWI,kBAAiBC,EAAiBA,EAAH,QAXnC,EAYI,mBAAkBC,EAAkBA,EAAH,QAZrC,EAaIL,aAAcnB,EAAa,OAb/B,EAcIwC,YAAaxC,EAAa,OAd9B,EAeIoB,aAAcpB,EAAa,OAf/B,EAgBIkB,QAASlB,EAAa,OAhB1B,EAiBIyC,QAASzC,GAAAA,EAAAA,OAjBb,EAkBI0C,OAAQ1C,GAAAA,EAAAA,OAA4C3B,IAEvD4C,IACG,SAAC,SAAD,CACIzL,EADJ,EAEIC,EAFJ,EAGIkN,WAHJ,SAIIC,iBAJJ,UAKIC,YALJ,EAMInJ,MAAK,KACEb,EAAAA,OADF,MAEDiK,cAFC,OAGDpI,KAAMkG,IATd,SAYKtB,Qd3DjByD,KALwB,GAMxBrI,KANwB,GAQxB1B,SARwB,EASxBgK,aATwB,UAWxBC,KAXwB,MAYxB5B,aAAa,IAGJ6B,EAAkB,QAE3BxC,OAAQ,gCAFmB,eAI3ByC,WAAY,qCAAgCC,OAAhC,oBAA+D,IejElEC,EAAgB,sBAQzB,OACIC,EAAAA,EAAAA,IAAa,EAET,CAAEC,IAAK7L,EAAAA,IAAP,GAA2B8L,IAA3B,EAAmCC,IAAK,GAFhC,EADT,WAAP,IAaSC,EAAgB,qBACzBhM,EAAA,KACI,SAAAiM,GAAI,YAEOpF,EAAA,QAAqC,cAEpC,OADAvG,EAAAA,GAAAA,KACOA,IAJf,WAUC4L,EAAmB,mBAC5BC,OAAA,gBAAkD,cAI9C,OAHInM,EAAJ,KACIM,EAAAA,GAAWN,EAAXM,IAEGA,IALiB,KAQnB8L,EAAc,kBAAiB,CAAC1D,EAAO2D,OAAzB,KAApB,6HC3BDC,EAAK,SAAC5D,EAAD,UAAkCA,EAAlC,GACL6D,EAAK,SAAC7D,EAAD,UAAkCA,EAAlC,GAEL8D,EAAQ,SAACC,EAAD,UACVC,MAAA,KAAW,IAAIC,OAAOC,EAAtB,IAAoC,qBAAcH,EAAd,MAElCI,EAAc,SAACnE,GAAD,OAAoB4D,EAAG5D,EAAH4D,GAAAA,EAApB,GAMdQ,EAA8B,kBAgBA,IAd5B9M,EAc2B,EAd3BA,KACA+M,EAa2B,EAb3BA,YACAC,EAY2B,EAZ3BA,SACAC,EAW2B,EAX3BA,SACAC,EAU2B,EAV3BA,gBAU2B,IAT3B5F,aAAAA,OAS2B,MATZ,EASY,EAR3BT,EAQ2B,EAR3BA,KACAsG,EAO2B,EAP3BA,OACAC,EAM2B,EAN3BA,OACAC,EAK2B,EAL3BA,OAMEC,EAAUtG,EAAO,EAAvB,EAGMuG,EAAcvN,EAAAA,IAApB,GAEMiG,EAAN,GAkCA,OAjCAY,EAAAA,SAAa,qBACT2F,EAAM,EAAGW,EAAAA,SAAT,iBAAyC,SAAA1I,GAAU,IAAD,EANxCxB,EAAD,EAOL,EAA0BmJ,EAAYpM,EAAAA,GAAtC,IAAOwN,EAAP,KAAiB9E,EAAjB,KACM+E,EAAaR,EAASjN,EAA5B,IACMlC,GAAI,SAACqP,EAAD,SAA4BO,EAA5B,EAA2CpG,EAArD,EACMvJ,EAVeuP,EAAfrK,EAUN,EAVqBqK,GAAAA,OAAAA,EAAgBF,EAAhBE,IAAAA,EAAAA,EAAhB,EAWCK,EAVI,SAAC1K,EAAD,gBAA2BqK,EAAQrK,EAARqK,GAAgBM,EAAhBN,GAA2B,SAACF,EAAD,SAAtD,EAUQS,CAAUnF,EAA5B,GACMoF,EAAmC,CACrCrF,GADqC,EAErCC,MAAO8E,OAAAA,EAAAA,EAF8B,EAGrCO,eAAgBhB,EAHqB,GAIrCiB,QAJqC,EAKrCvJ,MALqC,EAMrCgJ,WANqC,EAOrCzN,KAAMuN,EAAY9I,IAGtBwB,EAAAA,KAAU,CACNgI,IAAQA,EAAL,IAAYH,EADT,WAENrJ,MAAOwB,EAFD,OAGNjG,KAHM,EAINlC,EAJM,EAKNC,EALM,EAMNmQ,KAAMb,EAAAA,KANA,EAONc,KAAMd,EAAAA,IAPA,EAQN3N,MARM,EASND,OATM,EAUN+I,MAAOwE,EAVD,GAWNpF,MAAOsF,EAAgBY,WAK5B7H,GAMLmI,EAAgC,kBAgBF,IAd5BpO,EAc2B,EAd3BA,KACA+M,EAa2B,EAb3BA,YACAE,EAY2B,EAZ3BA,SACAD,EAW2B,EAX3BA,SACAE,EAU2B,EAV3BA,gBACArG,EAS2B,EAT3BA,KAS2B,IAR3BS,aAAAA,OAQ2B,MARZ,EAQY,EAP3B6F,EAO2B,EAP3BA,OACAC,EAM2B,EAN3BA,OACAC,EAK2B,EAL3BA,OAMEC,EAAUtG,EAAO,EAAvB,EAGMuG,EAAcvN,EAAAA,IAApB,GAEMiG,EAAN,GAkCA,OAjCAY,EAAAA,SAAa,qBACT2F,EAAM,EAAGY,EAAAA,SAAT,iBAAyC,SAAA3I,GAAU,IAAD,EANxCxB,EAAD,EAOL,EAA0BmJ,EAAYpM,EAAAA,GAAtC,IAAOwN,EAAP,KAAiB9E,EAAjB,KACM+E,EAAaR,EAASjN,EAA5B,IACMlC,EATewP,EAAfrK,EASN,EATqBqK,GAAAA,EAAAA,OAAAA,EAAuBH,EAAvBG,IAAAA,EAAhB,EAUCvP,GAAI,SAACqP,EAAD,SAA4BO,EAA5B,EAA4CrG,EAAtD,EACMoG,EAVG,SAACzK,EAAD,gBAA2BqK,EAAQrK,EAARqK,IAAgB,SAACH,EAAD,SAAhBG,EAA0Ce,EAArE,EAUQC,CAAS5F,EAA1B,GACMoF,EAAmC,CACrCrF,GADqC,EAErCC,MAAO8E,OAAAA,EAAAA,EAF8B,EAGrCO,eAAgBhB,EAHqB,GAIrCiB,QAJqC,EAKrCvJ,MALqC,EAMrCgJ,WANqC,EAOrCzN,KAAMuN,EAAY9I,IAGtBwB,EAAAA,KAAU,CACNgI,IAAQA,EAAL,IAAYH,EADT,WAENrJ,MAAOwB,EAFD,OAGNjG,KAHM,EAINlC,EAJM,EAKNC,EALM,EAMNmQ,KAAMb,EAAAA,KANA,EAONc,KAAMd,EAAAA,IAPA,EAQN3N,MARM,EASND,OATM,EAUN+I,MAAOwE,EAVD,GAWNpF,MAAOsF,EAAgBY,WAK5B7H,GAMEsI,EAAsB,YAkC5B,IAAD,EAnKmB7F,EAkIrB3B,EAiCE,EAjCFA,OACAE,EAgCE,EAhCFA,SACAC,EA+BE,EA/BFA,SACAF,EA8BE,EA9BFA,QACAtH,EA6BE,EA7BFA,MACAD,EA4BE,EA5BFA,OA4BE,IA3BF4H,QAAAA,OA2BE,MA3BQ,EA2BR,MA1BFC,aAAAA,OA0BE,MA1Ba,EA0Bb,EAzBFH,EAyBE,EAzBFA,WACYqH,EAwBV,EAxBFpH,WAwBE,IAvBFqH,UAAAA,OAuBE,MAvBU,GAuBV,EAtBCC,EAsBD,OACI7H,EAAO6H,EAAA,aAAkB,SAAAT,GAAG,OAAKQ,EAAAA,SAAL,MAC5BzO,EAAOgM,EAAc0C,EAAD,KAA1B,GACA,EACI3H,aAAAA,EAAyB,CAAC,IAAI,IAA9BA,GAAwD,CAAC,IAAI,IADjE,GAAO4H,EAAP,KAAaC,EAAb,KAAwBtP,EAAxB,KAEM8H,EAAauE,EAAc,EAE7B+C,EAF4B,eAAhC,GASMG,EAAS,GACX9C,IADW,EAEXD,IAFW,EAGX9E,QAAAA,GAHJ,GAOM8H,EAAWD,SAAAA,EAAAA,IAAAA,EAAyC,sBAEpDE,EAAS/O,EAAA,QACO,gCAA4B6G,EAAA,KAAS,SAAAmI,GAAC,OAAIC,EAAJ,SAD7C,WAAf,SAGMnD,EAAMgD,EAAShQ,KAAAA,IAAAA,MAAAA,KAArB,IACMiN,GA9LerD,EA8LO5J,KAAAA,IAAAA,MAAAA,KAA5B,GA9LwCoQ,SAAAA,GAAAA,EAApB,GAgMdC,GAAQvD,EAAAA,EAAAA,IAAa,EAEvB,CAAEC,IAAF,EAAeC,IAAf,EAAoBC,IAAAA,GACpB4C,MAAAA,EAAAA,EAHsB,EAA1B,GAOA,EAAyB5H,aAAAA,EAAwB,CAACK,EAAzBL,GAA8C,CAACoI,EAAxE,GAAOhC,EAAP,KAAeC,EAAf,KAEMgC,GAAahI,EAAAA,YAAyBE,GAAgBT,EAAAA,OAA1C,IAA8DA,EAAhF,OACMwI,EAAS,CAAC,EAAD,MACCrP,KADD,EACO6G,KADP,EACaS,aADb,EAC2B6F,OAD3B,EACmCC,OAAAA,IADnC,EAGXyB,EAHW,iBAIXM,EAJW,MAAf,GAcA,MAAO,CAAEhC,OAAF,EAAUC,OAAV,EAAkBnH,KANrBmJ,EAAAA,EACMrI,aAAAA,EACI+F,EAAAA,WAAAA,EADJ/F,GAEIqH,EAAAA,WAAAA,EAHVgB,GADJ,KAhFG,qHCtIDE,EAAc,SAAdA,EAAc,gBAChBC,EAAAA,KAAS7C,MAAT6C,SAA0BD,GAAa,EAAD,mBAAtCC,IADgB,GASdC,EAA8B,gBAcA,IAZ5BzC,EAY2B,EAZ3BA,YACAC,EAW2B,EAX3BA,SACAC,EAU2B,EAV3BA,SACAC,EAS2B,EAT3BA,gBACA5F,EAQ2B,EAR3BA,aACAmI,EAO2B,EAP3BA,YACAtC,EAM2B,EAN3BA,OACAC,EAK2B,EAL3BA,OACAC,EAI2B,EAJ3BA,OAQEpH,EAAN,GAmCA,OAlCAwJ,EAAAA,SAAoB,SAAAC,GAAe,OAC/BvC,EAAA,kBAAwB,cAAe,IAAD,IAC5BlK,EAAIyM,EAAV,GACM5R,EAAC,SAAGqP,EAAOF,EAAShK,EAAnB,UAAP,EACMlF,GAAI,SARL,SAACkF,GAAD,OAA6BmK,EAAOnK,EAAE+D,EAAO,EAA7C,IAQM2I,CAAD,SAAV,GAA2BrI,EACrBqG,EARI,SAAC1K,EAAD,gBAAwC,SAACmK,EAAOnK,EAAE+D,EAAO,EAAjB,UAAxC,EAQQ6G,CAAU5K,EAAV4K,GAAlB,EACA,EAA0BzB,EAAYnJ,EAAAA,KAAOyM,EAA7C,MAAOlC,EAAP,KAAiB9E,EAAjB,KAEMoF,EAAmC,CACrCrF,GAAIiH,EADiC,IAErChH,MAAO8E,OAAAA,EAAAA,EAF8B,EAGrCO,eAAgBhB,EAHqB,GAIrCiB,QAJqC,EAKrCvJ,MALqC,EAMrCgJ,WANqC,EAOrCzN,KAAMkM,EAAiBjJ,EAAD,OAG1BgD,EAAAA,KAAU,CACNgI,IAAQyB,EAAL,QADG,EAENjL,MAAOwB,EAFD,OAGNjG,KAHM,EAINlC,EAJM,EAKNC,EALM,EAMNmQ,KAAMb,EAAAA,KANA,EAONc,KAAMd,EAAAA,IAPA,EAQN3N,MARM,EASND,OATM,EAUN+I,MAAOwE,EAVD,GAWNpF,MAAOsF,EAAgBY,WAK5B7H,GAML2J,EAAgC,gBAcF,IAZ5B7C,EAY2B,EAZ3BA,YACAC,EAW2B,EAX3BA,SACAC,EAU2B,EAV3BA,SACAC,EAS2B,EAT3BA,gBACA5F,EAQ2B,EAR3BA,aACAmI,EAO2B,EAP3BA,YACAtC,EAM2B,EAN3BA,OACAC,EAK2B,EAL3BA,OACAC,EAI2B,EAJ3BA,OAQEpH,EAAN,GAmCA,OAlCAwJ,EAAAA,SAAoB,SAAAC,GAAe,OAC/BtC,EAAA,kBAAwB,cAAe,IAAD,IAC5BnK,EAAIyM,EAAV,GACM3R,EAAC,SAAGqP,EAAOH,EAAShK,EAAnB,UAAP,EACMnF,GAAI,SARL,SAACmF,GAAD,OAA6BkK,EAAOlK,EAAE+D,EAAO,EAA7C,IAQM6I,CAAD,SAAV,GAA2BvI,EACrBoG,EARG,SAACzK,EAAD,gBAAwC,SAACkK,EAAOlK,EAAE+D,EAAO,EAAjB,UAAxC,EAQQsH,CAASrL,EAATqL,GAAjB,EACA,EAA0BlC,EAAYnJ,EAAAA,KAAOyM,EAA7C,MAAOlC,EAAP,KAAiB9E,EAAjB,KAEMoF,EAAmC,CACrCrF,GAAIiH,EADiC,IAErChH,MAAO8E,OAAAA,EAAAA,EAF8B,EAGrCO,eAAgBhB,EAHqB,GAIrCiB,QAJqC,EAKrCvJ,MALqC,EAMrCgJ,WANqC,EAOrCzN,KAAMkM,EAAiBjJ,EAAD,OAG1BgD,EAAAA,KAAU,CACNgI,IAAQyB,EAAL,QADG,EAENjL,MAAOwB,EAFD,OAGNjG,KAHM,EAINlC,EAJM,EAKNC,EALM,EAMNmQ,KAAMb,EAAAA,KANA,EAONc,KAAMd,EAAAA,IAPA,EAQN3N,MARM,EASND,OATM,EAUN+I,MAAOwE,EAVD,GAWNpF,MAAOsF,EAAgBY,WAK5B7H,GAME6J,EAAsB,YAkC5B,IA9JmBC,EA6HtB/P,EAiCE,EAjCFA,KACA+G,EAgCE,EAhCFA,OACAE,EA+BE,EA/BFA,SACAC,EA8BE,EA9BFA,SACAF,EA6BE,EA7BFA,QACAtH,EA4BE,EA5BFA,MACAD,EA2BE,EA3BFA,OA2BE,IA1BF4H,QAAAA,OA0BE,MA1BQ,EA0BR,EAzBFF,EAyBE,EAzBFA,WACYqH,EAwBV,EAxBFpH,WAwBE,IAvBFqH,UAAAA,OAuBE,MAvBU,GAuBV,EAtBCC,EAsBD,OACI7H,EAAO6H,EAAA,aAAkB,SAAAT,GAAG,OAAKQ,EAAAA,SAAL,MAC5BgB,GAAcO,EAAAA,EAAAA,KAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,CAChBhE,EAAchM,EADlB,IAIA,EACI+G,aAAAA,EAAyB,CAAC,IAAI,IAA9BA,GAAwD,CAAC,IAAI,IADjE,GAAO4H,EAAP,KAAaC,EAAb,KAAwBtP,EAAxB,KAEM8H,EAAauE,EAAc,EAE7B+C,EAF4B,eAAhC,GASMG,EAAS,GACX9C,IADW,EAEXD,IAFW,EAGX9E,QAAAA,GAHJ,GAOM+H,GAtLgBgB,EAuLlBT,EAD2B,GArL/B,QAuLInI,EAFJ,KArLiB4I,EAAA,QAAa,SAAAE,GAAG,WAAIA,KADhB,GA0LfnE,EAAMhN,KAAAA,IAAAA,MAAAA,KAAZ,GACMiN,EAAMjN,KAAAA,IAAAA,MAAAA,KAAZ,GAEMqQ,GAAQvD,EAAAA,EAAAA,IAAa,EAEvB,CAAEC,IAAF,EAAeC,IAAf,EAAoBC,IAAAA,GACpB4C,MAAAA,EAAAA,EAHsB,EAA1B,GAOA,EAAyB5H,aAAAA,EAAwB,CAACK,EAAzBL,GAA8C,CAACoI,EAAxE,GAAOhC,EAAP,KAAeC,EAAf,KAEM9F,EAAeoH,EAAAA,aAAAA,EAAyBA,EAAzBA,aAArB,EACMU,EAAYhI,EAAlB,YACMiI,EAAS,CAAC,EAAD,MACC/H,aADD,EACemI,YADf,EAC4BtC,OAD5B,EACoCC,OAAAA,IADpC,EAGXyB,EAHJ,SAaA,MAAO,CAAE1B,OAAF,EAAUC,OAAV,EAAkBnH,KANrBmJ,EAAAA,EACMrI,aAAAA,EACIyI,EAAAA,WAAAA,EADJzI,GAEI6I,EAAAA,WAAAA,EAHVR,GADJ,KCtKSc,EAAgB,YAatB,IAZHjK,EAYE,EAZFA,KACAkK,EAWE,EAXFA,UACAnI,EAUE,EAVFA,KACAlB,EASE,EATFA,UACAC,EAQE,EARFA,OACAqJ,EAOE,EAPFA,YACApJ,EAME,EANFA,QAOMqJ,GAAiBC,EAAAA,EAAAA,IAAmB,MACtCF,EADsC,EACtBpI,YAAAA,EAAAA,aADpB,MAIA,kBAAIA,EAxC+B,gBAKnC,IAAMhI,EAAO,IACTiG,EAAA,KAAS,SAAAE,GAAG,cAAK,CACbsC,GAAE,SAAEtC,EAAAA,KAAF,cADW,GAEbyB,MAAOyI,EAAelK,EAFT,MAGb6H,OAAQ7H,EAAAA,KAHK,OAIbqC,MAAK,SAAErC,EAAF,SAAe,YAExB,2BAOJ,MAJA,eAAIY,GACA/G,EAAAA,UAGGA,EAsBIuQ,CAAwBtK,EAAK,EAApC,GAxE4B,sBAQhC,IAAMjG,EAAO,IACTiG,EAAA,KAAS,SAAAE,GAAG,YAAK,CACbsC,GAAItC,EAAAA,KADS,GAEbyB,MAAOyI,EAAelK,EAFT,MAGb6H,OAAQ7H,EAAAA,KAHK,OAIbqC,MAAK,SAAErC,EAAF,SAAe,YAExB,2BAaJ,OATKY,aAAAA,GAAAA,YACGD,GADHC,WAEGoJ,IAFJ,IAGInJ,GACHD,eAAAA,GAAAA,YAA2BD,IALhC,IAK2DE,IAEvDhH,EAAAA,UAGGA,EA+CAwQ,CAAqBvK,EAAK,EAAN,MAA3B,IfxESwK,EAAS,YA0DhB,QAzDF7J,QAAAA,OAyDE,MAzDQxJ,EAAawJ,QAyDrB,MAxDFC,KAAAA,OAwDE,MAxDKzJ,EAAayJ,KAwDlB,MAvDFe,MAAAA,OAuDE,MAvDMxK,EAAawK,MAuDnB,MAtDFgB,aAAAA,OAsDE,MAtDaxL,EAAawL,aAsD1B,EArDF8H,EAqDE,EArDFA,YAqDE,IApDFxI,OAAAA,OAoDE,MApDO9K,EAAa8K,OAoDpB,MAnDFD,QAAAA,OAmDE,MAnDQ7K,EAAa6K,QAmDrB,MAlDFI,YAAAA,OAkDE,MAlDYjL,EAAaiL,YAkDzB,MAjDFN,eAAAA,OAiDE,MAjDe3K,EAAa2K,eAiD5B,MAhDFjB,UAAAA,OAgDE,MAhDU1J,EAAa0J,UAgDvB,MA/CFC,OAAAA,OA+CE,MA/CO3J,EAAa2J,OA+CpB,MA9CFC,QAAAA,OA8CE,MA9CQ5J,EAAa4J,QA8CrB,EA7CFhH,EA6CE,EA7CFA,KA6CE,IA5CFiH,SAAAA,OA4CE,MA5CS7J,EAAa6J,SA4CtB,MA3CFC,SAAAA,OA2CE,MA3CS9J,EAAa8J,SA2CtB,EA1CFmG,EA0CE,EA1CFA,OACA3N,EAyCE,EAzCFA,MACAD,EAwCE,EAxCFA,OAwCE,IAvCF4H,QAAAA,OAuCE,MAvCQjK,EAAaiK,QAuCrB,MAtCFC,aAAAA,OAsCE,MAtCalK,EAAakK,aAsC1B,MArCFH,WAAAA,OAqCE,MArCW/J,EAAa+J,WAqCxB,MApCFC,WAAAA,OAoCE,MApCWhK,EAAagK,WAoCxB,MAnCFyB,iBAAAA,OAmCE,MAnCiBzL,EAAayL,iBAmC9B,MAlCFlB,YAAAA,OAkCE,MAlCYvK,EAAauK,YAkCzB,MAjCFE,eAAAA,OAiCE,MAjCezK,EAAayK,eAiC5B,OAhCFC,gBAAAA,QAgCE,OAhCgB1K,EAAa0K,gBAgC7B,QA/BFxB,QAAAA,QA+BE,OA/BQlJ,EAAakJ,QA+BrB,GA9BF8J,GA8BE,EA9BFA,YA+BA,IAAkCO,EAAAA,EAAAA,UAAQ,MAAC9H,EAAD,EAA1C,IAAO4F,GAAP,MAAkBmC,GAAlB,MACMrK,IAAc8D,EAAAA,EAAAA,cAAY,YAC5BuG,IAAa,YAAK,OACd,gBAAyB,UAAa,YAAI,OAAI3E,IAAJ,KAA1C,aADc,SADtB,IAMMgB,IAAW4D,EAAAA,EAAAA,IAAjB,GACMC,IAAWD,EAAAA,EAAAA,IAAjB,GACM3D,IAAkB2D,EAAAA,EAAAA,IAAxB,GACM9D,IAAcgE,EAAAA,EAAAA,IAApB,GAEM5P,IAAQC,EAAAA,EAAAA,MACR4L,IAAWgE,EAAAA,EAAAA,GAAoB,EAArC,GACMC,IAAiBC,EAAAA,EAAAA,IAAiB,EAAxC,IAIMC,IAAgBD,EAAAA,EAAAA,IAAiB,EAAvC,IAMA,IADqBpK,YAAAA,EAAAA,EAArB,GAC8C,CAC1CC,OAD0C,EAE1CC,QAF0C,EAG1ChH,KAH0C,EAI1CiN,SAJ0C,GAK1CpG,KAL0C,EAM1CI,SAN0C,EAO1CC,SAP0C,EAQ1CxH,MAR0C,EAS1CD,OAT0C,EAU1CuN,SAV0C,GAW1C3F,QAX0C,EAY1CC,aAZ0C,EAa1CH,WAb0C,EAc1CC,WAd0C,EAe1CqH,UAf0C,GAgB1C1B,YAhB0C,GAiB1CG,gBAjB0C,GAkB1CG,OAAAA,IAlBIpH,GAAR,QAAckH,GAAd,UAAsBC,GAAtB,UAqBMgE,IAAgBhR,EAAAA,EAAAA,UAClB,kBACI,WAEQ,0BAAqD+F,EAAAA,KAAAA,SAF7D,KAIS,6BAED1B,MAAAA,SAEZ,CAVJ,KAaM4M,IAAuBhH,EAAAA,EAAAA,cACzB,YAA0D,IAAvD3K,EAAuD,EAAvDA,MAAOD,EAAgD,EAAhDA,OACN,cACIoI,EAAAA,GAAsBnI,EAA1B,MACIoI,GAAAA,GAAuBrI,EAA3B,OAGJ,KAPJ,KAUM6R,IAAalR,EAAAA,EAAAA,UACf,kBACI,OAAS,YACL,IAAM+F,EAAM,SAAU,YAAG,OAAIA,EAAAA,KAAAA,KAAJ,KAEzB,eAAiBnG,KAAI,GAAIyI,GAAIwF,GAAR,MAAgB9H,OAAhB,EAAgBA,EAAhB,MAA2B6H,OAAQS,GAAAA,SAAAA,YAEhE,MAPJ,KAUM8C,IAAoDnR,EAAAA,EAAAA,UACtD,kBACI,QAAY,YAWR,MAAO,GAVM8P,EAAc,CACvBjK,KAAMO,SAAAA,EAAAA,SAAAA,GADiB,GAEvB2J,UAAW3J,EAFY,UAGvBwB,KAAMxB,EAHiB,SAIvBM,UAJuB,EAKvBC,OALuB,EAMvBqJ,YANuB,GAOvBpJ,QAAAA,UAKZ,iBAfJ,IAkBA,MAAO,CACHf,KADG,GAEHmL,cAFG,GAGHjE,OAHG,GAIHC,OAJG,GAKHH,SALG,GAMH6D,SANG,GAOH5D,gBAPG,GAQHH,YARG,GASHC,SATG,GAUHiE,eAVG,GAWHE,cAXG,GAYHE,qBAZG,GAaH5C,UAbG,GAcHlI,YAdG,GAeHgL,gBAAAA,KA1KD,qEgBSDC,EAAW,YA0Ee,IAzE5BxR,EAyE2B,EAzE3BA,KACA4G,EAwE2B,EAxE3BA,QACAC,EAuE2B,EAvE3BA,KAEQ4K,EAqEmB,EArE3BpE,OACA3N,EAoE2B,EApE3BA,MACAD,EAmE2B,EAnE3BA,OAEAqH,EAiE2B,EAjE3BA,UACAC,EAgE2B,EAhE3BA,OACAC,EA+D2B,EA/D3BA,QACAC,EA8D2B,EA9D3BA,SACAC,EA6D2B,EA7D3BA,SAEAC,EA2D2B,EA3D3BA,WACAC,EA0D2B,EA1D3BA,WAEAC,EAwD2B,EAxD3BA,QACAC,EAuD2B,EAvD3BA,aAEAoK,EAqD2B,EArD3BA,QACAC,EAoD2B,EApD3BA,UAoD2B,IAnD3BpK,WAAAA,OAmD2B,MAnDdwB,EAAgBxB,WAmDF,MAlD3BC,SAAAA,OAkD2B,MAlDhBuB,EAAgBvB,SAkDA,MAjD3BC,YAAAA,OAiD2B,MAjDbsB,EAAgBtB,YAiDH,MAhD3BC,YAAAA,OAgD2B,MAhDbqB,EAAgBrB,YAgDH,EA/C3BkK,EA+C2B,EA/C3BA,YACAC,EA8C2B,EA9C3BA,YA8C2B,IA5C3B7I,OAAAA,OA4C2B,MA5ClBD,EAAgBC,OA4CE,MA3C3BC,aAAAA,OA2C2B,MA3CZF,EAAgBE,aA2CJ,EAzC3BtB,EAyC2B,EAzC3BA,YACAC,EAwC2B,EAxC3BA,MACAC,EAuC2B,EAvC3BA,eACAC,EAsC2B,EAtC3BA,gBACAC,EAqC2B,EArC3BA,eAqC2B,IAnC3Be,QAAAA,OAmC2B,MAnCjBC,EAAgBD,QAmCC,EAjC3Bb,EAiC2B,EAjC3BA,QACAC,EAgC2B,EAhC3BA,OAgC2B,IA/B3BmD,KAAAA,OA+B2B,MA/BpBtC,EAAgBsC,KA+BI,MA9B3BrI,KAAAA,QA8B2B,MA9BpB+F,EAAgB/F,KA8BI,OA7B3Ba,aAAAA,QA6B2B,OA7BZkF,EAAgBlF,aA6BJ,QA5B3BuE,YAAAA,QA4B2B,OA5BbW,EAAgBX,YA4BH,GA3B3BC,GA2B2B,EA3B3BA,YA2B2B,KAzB3BpI,YAAAA,QAyB2B,OAzBb8I,EAAgB9I,YAyBH,GAvB3BmQ,GAuB2B,EAvB3BA,YACAxH,GAsB2B,EAtB3BA,aAEA8H,GAoB2B,EApB3BA,YAoB2B,KAlB3BpI,cAAAA,QAkB2B,OAlBXS,EAAgBT,cAkBL,QAjB3BC,QAAAA,QAiB2B,OAjBjBQ,EAAgBR,QAiBC,GAhB3BiB,GAgB2B,EAhB3BA,QACAC,GAe2B,EAf3BA,aACAC,GAc2B,EAd3BA,aAEApD,GAY2B,EAZ3BA,QAY2B,KAV3BiF,KAAAA,QAU2B,OAVpBxC,EAAgBwC,KAUI,GAT3B3B,GAS2B,EAT3BA,UACAC,GAQ2B,EAR3BA,eACAC,GAO2B,EAP3BA,gBAO2B,KAN3BH,YAAAA,QAM2B,OANbZ,EAAgBY,YAMH,GAL3BmI,GAK2B,EAL3BA,aACAC,GAI2B,EAJ3BA,kBACAC,GAG2B,EAH3BA,mBAEAnJ,GAC2B,EAD3BA,iBAEA,IAA0CxH,EAAAA,EAAAA,MAAlCC,GAAR,WAAyBC,GAAzB,UACA,IAAqE0Q,EAAAA,EAAAA,IAAc,EAAD,EAAlF,GAAQC,GAAR,cAAoBC,GAApB,eAAiC9E,GAAjC,UAAyC+E,GAAzC,cAAqDC,GAArD,eAMA,GAYI5B,EAAiB,CACjB7J,QADiB,EAEjBgB,MAFiB,EAGjBgB,aAHiB,GAIjB8H,YAJiB,GAKjBxI,OALiB,EAMjBD,QANiB,EAOjBI,YAPiB,GAQjBN,eARiB,EASjBjB,UATiB,EAUjBC,OAViB,EAWjBC,QAXiB,EAYjBhH,KAZiB,EAajB6G,KAbiB,EAcjBI,SAdiB,EAejBC,SAfiB,EAgBjBmG,OAhBiB,GAiBjB3N,MAjBiB,GAkBjBD,OAlBiB,GAmBjB4H,QAnBiB,EAoBjBC,aApBiB,EAqBjBH,WArBiB,EAsBjBC,WAtBiB,EAuBjBO,YAvBiB,EAwBjBE,eAxBiB,EAyBjBC,gBAzBiB,EA0BjBxB,QA1BiB,GA2BjB8J,YA3BiB,GA4BjBvH,iBAAAA,KAvCA5C,GADJ,QAEImL,GAFJ,iBAGIjE,GAHJ,UAIIC,GAJJ,UAKI0D,GALJ,YAMI5D,GANJ,mBAOI+D,GAPJ,kBAQIE,GARJ,iBASIE,GATJ,wBAUI9K,GAVJ,eAWIgL,GAXJ,mBA2CMe,IAAaC,EAAAA,EAAAA,eAAa,GAcf,CACb1L,KAAM,SAAAV,GAAG,OAAIA,EAAJ,KACT6B,KAAM,SAAA7B,GAAG,UACLkC,YAAa4I,GADR,GAELzI,MAAOrC,EAFF,MAGL1G,OAHK,EAILyJ,WAAYiI,GAJP,GAKLhI,aALK,EAMLC,OAAQjD,EAAAA,MANH,EAOLkD,OAAQlD,EAAAA,OAPH,EAQLmD,UAAU,aAAcnD,EAAf,QAAyBA,EAAAA,EAAQA,EAAjC,QARJ,IASLzG,MAAOyG,EAAIzG,OACPqH,aAAAA,EAAAA,GAEE,CACItH,OAAQ0G,EADZ,OAEImD,UAAU,aAAcnD,EAAf,OAAyBA,EAAzB,EAFb,IAGIzG,MAAO,KAGrB8S,MAAO,SAAArM,GAAG,MAAK,CACXkC,YAAa4I,GADF,GAEXzI,MAAOrC,EAFI,MAGX1G,OAAQ0G,EAHG,OAIX+C,WAAYiI,GAJD,GAKXhI,aALW,EAMXC,OAAQjD,EAAAA,MANG,EAOXkD,OAAQlD,EAAAA,OAPG,EAQXmD,UAAU,aAAcnD,EAAf,OAAyBA,EAAzB,EARE,IASXzG,MAAOyG,EAAIzG,QAEf+S,OAAQ,SAAAtM,GAAG,MAAK,CACZkC,YAAa4I,GADD,GAEZzI,MAAOrC,EAFK,MAGZ1G,OAAQ0G,EAHI,OAIZ+C,WAAYiI,GAJA,GAKZhI,aALY,EAMZC,OAAQjD,EAAAA,MANI,EAOZkD,OAAQlD,EAAAA,OAPI,EAQZmD,UAAU,aAAcnD,EAAf,OAAyBA,EAAzB,EARG,IASZzG,MAAOyG,EAAIzG,QAEfgT,MAAO,SAAAvM,GAAG,UACNkC,YAAa4I,GADP,GAENzI,MAAOrC,EAFD,MAGN1G,OAHM,EAINyJ,WAAYiI,GAJN,GAKNhI,aALM,EAMNC,OAAQjD,EAAAA,MANF,EAONkD,OAPM,EAQNC,UAAU,aAAcnD,EAAf,QAAyBA,EAAAA,EAAQA,EAAjC,QARH,IASNzG,MAAOyG,EAAIzG,OACPqH,aAAAA,EAAAA,GAEE,CACIqC,OADJ,EAEIC,OAAQlD,EAAAA,OAFZ,EAGI1G,OAAQ0G,EAHZ,OAIImD,UAAU,aAAcnD,EAAf,OAAyBA,EAAzB,EAJb,IAKIzG,MAAO,KAGrB8B,OA9Da,GA+DbG,WAAYL,KAGVqR,IAAcvS,EAAAA,EAAAA,UAChB,iBAAO,CACHyD,aADG,GAEHuE,YAFG,GAGHT,YAHG,EAIHW,cAJG,GAKHT,eALG,EAMHC,gBANG,EAOH0B,QAPG,GAQHC,aARG,GASHC,aATG,GAUHwD,gBAVG,GAWH3E,QAXG,GAYHoB,YAZG,GAaHC,UAbG,GAcHC,eAdG,GAeHC,gBAAiBkI,MAErB,CAAC,GAAD,oCAlBJ,KAqCMY,IAAYC,EAAAA,EAAAA,IAASxH,EAAK,GAAN,GAAmB,CACzCyH,QADyC,OAEzCC,UAAW,cAGTC,GAA2C,CAC7C/S,YAD6C,KAE7CgT,KAF6C,KAG7ChN,KAH6C,KAI7CiN,KAJ6C,KAK7C5M,QAL6C,KAM7CwC,QAAS,MAGTE,EAAAA,SAAJ,iBACIgK,GAAAA,aACI,YAAkC/M,KAAlC,GAA8ChG,YAAaA,IAD/D+S,gBAKAhK,EAAAA,SAAJ,UACIgK,GAAAA,MACI,eAEI7F,OAFJ,GAGIC,OAHJ,GAII1N,MAJJ,GAKID,OALJ,GAMI0T,IANJ,EAOIC,MAPJ,EAQIC,OARJ,EASIC,KAAM9L,GAVdwL,SAeAhK,EAAAA,SAAJ,UACIgK,GAAAA,MACI,8BACKV,IAAW,qBACR1Q,EAAAA,EAAAA,eAAcqH,EAAa,EAAd,OAET9C,IAFS,EAGTnE,MAHS,EAITuH,kBAAmB8H,GAJV,GAKTzJ,MAAOkJ,GAAS3K,EAAD,aAR/B6M,SAeAhK,EAAAA,SAAJ,UACIgK,GAAAA,MACI,eAEItT,MAFJ,GAGID,OAHJ,GAII0N,OAAQ1F,EAAW,GAJvB,KAKI2F,OAAQ1F,EAAW,GALvB,KAMI6L,QANJ,EAOIC,QAAS3B,GARjBmB,SAaAhK,EAAAA,SAAJ,aACIgK,GAAAA,SACI,YAEItT,MAFJ,GAGID,OAHJ,GAII6G,QAJJ,GAKIC,YAAaA,IANrByM,YAWAhK,EAAAA,SAAJ,aACIgK,GAAAA,SACI,eAEIlK,QAFJ,EAGIpJ,MAHJ,GAIID,OAJJ,GAKI0N,OALJ,GAMIC,OAAQA,IAPhB4F,YAaJ,IAAMS,IAAoBrT,EAAAA,EAAAA,UACtB,2BAEIiN,OAFJ,GAGI+E,WAHJ,GAIIC,YAJJ,GAKI3S,MALJ,EAMID,OANJ,EAOIwG,KAPJ,GAQIkH,OARJ,GASIC,OAAAA,OAEJ,CAACuF,GAAY,GAAb,gBAZJ,KAeA,OACI,eACIjT,MADJ,GAEID,OAFJ,GAGI4N,OAHJ,GAIIhC,KAJJ,GAKIE,KALJ,GAMI3B,UANJ,GAOIC,eAPJ,GAQIC,gBARJ,GASIH,YATJ,YAWKX,EAAA,KAAW,cAAe,IAAD,EACtB,yBAAW0K,GACA,+BAAmB9R,EAAAA,EAAAA,eAAc8R,EAAM,KAA9C,GAGJ,eAAOV,QAAP,EAAOA,GAAP,iBAMHW,EAAM,kCACfrL,OADe,MACCS,EADD,4BAEfzH,OAFe,MAELyH,EAFK,2BAGfuC,OAHe,MAGAvC,EAHA,eAIf5H,EAJe,QAKfyS,EALe,gBAMZC,EANY,cAQf,eAEQvS,QAFR,EAGQgH,cAHR,EAIQgD,aAJR,EAKQsI,cALR,EAMQzS,MANR,YASI,cAAoBmH,cAAeA,GAAnC,OAjBW,4CCvWbwL,EAAqB,yBAMvBC,EAAA,MAAW,SAAAC,GAAI,OACXC,EAAAA,EAAAA,IAAeD,EAAAA,EAAS3G,EAAV,KAAuB2G,EAAAA,EAAS3G,EAAhC,IAA4C2G,EAA5C,MAAwDA,EAAxD,SADH,OAMbE,EAAiB,YAkHe,IAjHlClU,EAiHiC,EAjHjCA,KACA4G,EAgHiC,EAhHjCA,QACAC,EA+GiC,EA/GjCA,KAEQ4K,EA6GyB,EA7GjCpE,OACA3N,EA4GiC,EA5GjCA,MACAD,EA2GiC,EA3GjCA,OAEAqH,EAyGiC,EAzGjCA,UACAC,EAwGiC,EAxGjCA,OACAC,EAuGiC,EAvGjCA,QACAC,EAsGiC,EAtGjCA,SACAC,EAqGiC,EArGjCA,SAEAC,EAmGiC,EAnGjCA,WACAC,EAkGiC,EAlGjCA,WAEAC,EAgGiC,EAhGjCA,QACAC,EA+FiC,EA/FjCA,aAEAoK,EA6FiC,EA7FjCA,QACAC,EA4FiC,EA5FjCA,UA4FiC,IA3FjCpK,WAAAA,OA2FiC,MA3FpBiE,EAAmBjE,WA2FC,MA1FjCC,SAAAA,OA0FiC,MA1FtBgE,EAAmBhE,SA0FG,MAzFjCC,YAAAA,OAyFiC,MAzFnB+D,EAAmB/D,YAyFA,MAxFjCC,YAAAA,OAwFiC,MAxFnB8D,EAAmB9D,YAwFA,EAvFjCkK,EAuFiC,EAvFjCA,YACAC,EAsFiC,EAtFjCA,YAsFiC,IApFjC7I,OAAAA,OAoFiC,MApFxBwC,EAAmBxC,OAoFK,MAnFjCmL,UAAAA,OAmFiC,MAnFrB,cAYN,IAAD,IATGhO,IAAOqC,EASV,EATUA,MAAO/I,EASjB,EATiBA,OAAQC,EASzB,EATyBA,MAAO5B,EAShC,EATgCA,EAAGC,EASnC,EATmCA,EAEhCsK,EAOH,EAPGA,YACAxE,EAMH,EANGA,aACAuE,EAKH,EALGA,YACAR,EAIH,EAJGA,MACAsB,EAGH,EAHGA,WACAK,EAEH,EAFGA,kBAYJ,GATAhF,EAAAA,UAAAA,EAEI6D,EAAJ,IACI7D,EAAAA,YAAAA,EACAA,EAAAA,UAAAA,GAGJA,EAAAA,YAEIV,EAAJ,EAAsB,CAClB,IAAMV,EAASrE,KAAAA,IAAAA,EAAf,GAEAyF,EAAAA,OAAWzG,EAAXyG,EAAAA,GACAA,EAAAA,OAAWzG,EAAAA,EAAXyG,EAAAA,GACAA,EAAAA,iBAAqBzG,EAArByG,EAAAA,EAAmCzG,EAAnCyG,EAA8CxG,EAA9CwG,GACAA,EAAAA,OAAWzG,EAAXyG,EAAsBxG,EAAAA,EAAtBwG,GACAA,EAAAA,iBAAqBzG,EAArByG,EAAgCxG,EAAhCwG,EAA4CzG,EAAAA,EAA5CyG,EAAgExG,EAAhEwG,GACAA,EAAAA,OAAWzG,EAAXyG,EAAuBxG,EAAvBwG,GACAA,EAAAA,iBAAAA,EAAwBxG,EAAxBwG,EAAAA,EAAuCxG,EAAAA,EAAvCwG,GACAA,EAAAA,OAAAA,EAAcxG,EAAdwG,GACAA,EAAAA,iBAAAA,EAAAA,EAA2BzG,EAA3ByG,EAAAA,GACAA,EAAAA,iBAEAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,GAGJA,EAAAA,OAEI6D,EAAJ,GACI7D,EAAAA,SAGJ,IACIA,EAAAA,aAAAA,SACAA,EAAAA,UAAAA,SACAA,EAAAA,UAAAA,EACAA,EAAAA,SAAAA,EAAoBzG,EAAI4B,EAAxB6E,EAAmCxG,EAAI0B,EAAvC8E,KAkCyB,EA9BjCoD,EA8BiC,EA9BjCA,YACAC,EA6BiC,EA7BjCA,MACAC,EA4BiC,EA5BjCA,eACAC,EA2BiC,EA3BjCA,gBACAC,EA0BiC,EA1BjCA,eAEAE,EAwBiC,EAxBjCA,QACAC,EAuBiC,EAvBjCA,OAuBiC,IAtBjCrE,aAAAA,OAsBiC,MAtBlB2H,EAAmB3H,aAsBD,MArBjCuE,YAAAA,OAqBiC,MArBnBoD,EAAmBpD,YAqBA,EApBjCC,GAoBiC,EApBjCA,YAoBiC,KAlBjCpI,YAAAA,QAkBiC,OAlBnBuL,EAAmBvL,YAkBA,GAhBjCmQ,GAgBiC,EAhBjCA,YACAxH,GAeiC,EAfjCA,aAEA8H,GAaiC,EAbjCA,YAaiC,KAXjCpI,cAAAA,QAWiC,OAXjBkD,EAAmBlD,cAWF,QAVjCC,QAAAA,QAUiC,OAVvBiD,EAAmBjD,QAUI,GATjCiB,GASiC,EATjCA,QACAC,GAQiC,EARjCA,aACAC,GAOiC,EAPjCA,aAEApD,GAKiC,EALjCA,QAKiC,KAHjCmF,WAAAA,QAGiC,OAHpBD,EAAmBC,WAGC,GADjC2I,GACiC,EADjCA,UAEMC,IAAWC,EAAAA,EAAAA,QAAjB,MAEMnT,IAAQC,EAAAA,EAAAA,MACd,IAAqE6Q,EAAAA,EAAAA,IAAc,EAAD,EAAlF,GAAQ5E,GAAR,UAAgB+E,GAAhB,cAA4BC,GAA5B,eAAyCH,GAAzC,cAAqDC,GAArD,eAMA,GAWI1B,EAAiB,CACjB7J,QADiB,EAEjBgB,MAFiB,EAGjBgB,aAHiB,GAIjB8H,YAJiB,GAKjBxI,OALiB,EAMjBD,QANiB,EAOjBI,YAPiB,GAQjBN,eARiB,EASjBjB,UATiB,EAUjBC,OAViB,EAWjBC,QAXiB,EAYjBhH,KAZiB,EAajB6G,KAbiB,EAcjBI,SAdiB,EAejBC,SAfiB,EAgBjBmG,OAhBiB,GAiBjB3N,MAjBiB,GAkBjBD,OAlBiB,GAmBjB4H,QAnBiB,EAoBjBC,aApBiB,EAqBjBH,WArBiB,EAsBjBC,WAtBiB,EAuBjBO,YAvBiB,EAwBjBE,eAxBiB,EAyBjBC,gBAzBiB,EA0BjBxB,QA1BiB,GA2BjB8J,YAAAA,KArCAnK,GADJ,QAEImL,GAFJ,iBAGIjE,GAHJ,UAIIC,GAJJ,UAKI0D,GALJ,YAMI5D,GANJ,mBAOI+D,GAPJ,kBAQIE,GARJ,iBASIE,GATJ,wBAUIE,GAVJ,mBAyCA,IAA8CxH,EAAAA,EAAAA,MAAtCC,GAAR,wBAA8BE,GAA9B,eAGMhE,IAAwBnF,EAAAA,EAAAA,IAAuB,CACjDd,aAAaF,EAAAA,EAAAA,IAAe,CACxBC,KADwB,GAExBC,YAFwB,GAGxBC,YAAa,SAAA8T,GAAI,MAAK,CAClBlW,EAAGkW,EADe,EAElBjW,EAAGiW,EAAKjW,IAEZoC,cAAe,gBAAGT,EAAH,QAAUD,EAAV,eAAwB,CACnCC,MADmC,EAEnCD,OAFmC,EAGnCH,KAAMR,KAAAA,IAAAA,EAAAA,SAMZ2U,IAAoBrT,EAAAA,EAAAA,UACtB,iBAAO,CACHyD,aADG,EAEHuE,YAFG,EAGHT,YAHG,EAIHW,cAJG,GAKHT,eALG,EAMHC,gBANG,EAOH0B,QAPG,GAQHC,aARG,GASHC,aATG,GAUHwD,gBAVG,GAWH3E,QAXG,GAYH8E,OAZG,GAaH+E,WAbG,GAcHC,YAdG,GAeH3S,MAfG,EAgBHD,OAhBG,EAiBHwG,KAjBG,GAkBHkH,OAlBG,GAmBHC,OAAAA,MAEJ,CAAC,EAAD,8CAtBJ,KA6CAmH,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACNhQ,EAAG,SAAG8P,GAAH,gBAAGA,EAAAA,WAAZ,MAEKA,GAAL,SACA,IAEAA,GAAAA,QAAAA,MAAyBnC,GAAzBmC,GACAA,GAAAA,QAAAA,OAA0BlC,GAA1BkC,GAEA9P,EAAAA,MAAAA,GAAAA,IAEAA,EAAAA,UAAgBpD,GAAhBoD,WACAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IACAA,EAAAA,UAAc8I,GAAd9I,KAA2B8I,GAA3B9I,KAEAyE,EAAAA,SAAe,SAAA0K,GACX,SAAIA,EAxPC,iBAyPYvS,GAAAA,KAAAA,KAATqT,aAAyCrT,GAAAA,KAAAA,KAAAA,YAA7C,IACIoD,EAAAA,UAAgBpD,GAAAA,KAAAA,KAAhBoD,YACAA,EAAAA,YAAkBpD,GAAAA,KAAAA,KAAlBoD,OAEA,IACIkQ,EAAAA,EAAAA,IAAuB,EAAuB,CAC1C/U,MAD0C,EAE1CD,OAF0C,EAG1C0P,MAH0C,GAI1CR,KAJ0C,IAK1CI,OAAQ6C,IAIhB,IACI6C,EAAAA,EAAAA,IAAuB,EAAuB,CAC1C/U,MAD0C,EAE1CD,OAF0C,EAG1C0P,MAH0C,GAI1CR,KAJ0C,IAK1CI,OAAQ8C,KAIjB,SAAI6B,GACPgB,EAAAA,EAAAA,IAAmBnQ,EAAK,CACpB4I,OADoB,GAEpBC,OAFoB,GAGpB1N,MAHoB,GAIpBD,OAJoB,GAKpB0T,IALoB,EAMpBC,MANoB,EAOpBC,OAPoB,EAQpBC,KARoB,EASpBnS,MAAAA,KAED,SAAIuS,EACPtC,GAAAA,SAAsB,SAAAjL,GAClBgO,EAAU5P,EAAK,CACX4B,IADW,EAEXkC,YAAa4I,GAFF,GAGXpN,aAHW,EAIXuE,YAJW,EAKXR,MAAOkJ,GAAS3K,EALL,MAMX+C,WAAYiI,GAND,GAOX5H,kBAAmB8H,GAAqBlL,QAG7C,YAAIuN,EACPnC,GAAAA,SAAwB,YAAqB,IAAnB/K,EAAkB,KAAVxG,EAAU,MACxC2U,EAAAA,EAAAA,IAAqBpQ,EAAI,EAAL,MAEhBvE,KAFgB,EAGhByG,eAHgB,GAIhBC,gBAJgB,GAKhBvF,MAAAA,SAGL,gBAAIuS,GACP9O,EAAAA,EAAAA,IAA0BL,EAAK,CAAEtE,YAAF,GAAiCkB,MAAAA,KAC7D,mBAAWuS,GACdA,EAAMnP,EAANmP,OAIRnP,EAAAA,UACD,CAAC,EAAD,qDAwBC8I,GAxBD,KAyBCA,GAzBD,6BAnFHkH,IAyHA,IAAMK,IAAmBvK,EAAAA,EAAAA,cACrB,YACI,OACKgK,GAAL,SAEA,OAAeQ,EAAAA,EAAAA,IAAkBR,GAAD,QAAhC,GAAOvW,EAAP,KAAUC,EAAV,KACMoI,EAAM2N,EAAmB7N,GAAK,GAAN,EAA9B,QAEA,IAAIE,GACA6D,IACIpI,EAAAA,EAAAA,eAAc2G,GAAQ,EAAT,GACNpC,EADM,MAETqC,MAAOrC,EAFE,MAGTyB,MAAOzB,EAHE,MAITuC,MAAO2D,OAAOlG,EAAAA,KAAD,UALrB6D,GAUA,eAAI8K,EAAAA,OACArL,MAAAA,IAAAA,GAAetD,EAAH,KAAZsD,KAGJS,QAGR,CAACA,GAAY,GAAb,SA1BJ,KA6BMM,IAAmBH,EAAAA,EAAAA,cACrB,YACI,OACKgK,GAAL,SAEAnK,KAEA,OAAe2K,EAAAA,EAAAA,IAAkBR,GAAD,QAAhC,GAAOvW,EAAP,KAAUC,EAAV,KACMoI,EAAM2N,EAAmB7N,GAAK,GAAN,EAA9B,GAEA,IACIyD,MAAAA,IAAAA,GAAevD,EAAH,KAAZuD,OAGR,CAACQ,GAAY,GAAb,GAdJ,KAiBME,IAAcC,EAAAA,EAAAA,cAChB,YACI,OACKgK,GAAL,SAEA,OAAeQ,EAAAA,EAAAA,IAAkBR,GAAD,QAAhC,GAAOvW,EAAP,KAAUC,EAAV,KACMoI,EAAM2N,EAAmB7N,GAAK,GAAN,EAA9B,QAEA,IAAIE,IACAqD,MAAAA,IAAAA,GAAO,KAAQrD,EAAR,MAAkBqC,MAAOrC,EAAIqC,QAApCgB,OAGR,CAAC6D,GAAO,GAZZ,KAeA,OACI,mBACI0H,IAAK,SAAAC,GACDX,GAAAA,QAAAA,EACID,IAAa,YAAjB,KAAyCA,GAAAA,QAAAA,IAE7C1U,MAAOwS,GALX,GAMIzS,OAAQ0S,GANZ,GAOInQ,MAAO,CACHtC,MADG,GAEHD,OAFG,GAGHwV,OAAQ3M,GAAa,OAAY,UAErCmB,aAAcnB,GAAa,QAZ/B,EAaIwC,YAAaxC,GAAa,QAb9B,EAcIoB,aAAcpB,GAAa,QAd/B,EAeIkB,QAASlB,GAAa,QAAiB3B,KAKtCuO,GAAYC,EAAAA,EAAAA,aACrB,kBACM7M,EADN,gBACqBsL,EADrB,gBACoCzS,EADpC,QAC8CuN,EAD9C,cAII,eAAiBpG,cAAjB,EAAgCsL,cAAhC,EAA+CzS,MAA/C,EAAwDG,SAAxD,YACI,mBAAqC8S,UAAWW,UCne/CK,EAAgB,mBAGzB,uBACK,gBAAG1V,EAAH,QAAUD,EAAV,gBAAuB,cAAeC,MAAf,EAA6BD,OAAQA,GAA5D,QCHI4V,IAAsBF,EAAAA,EAAAA,aAAW,cAG1C,OACI,uBACK,gBAAGzV,EAAH,QAAUD,EAAV,gBACG,cACIC,MADJ,EAEID,OAAQA,GAFZ,GAIIsV,IAAKA,Y,sBCfzB,IAAIO,EAAW,EAAQ,OAoBvBC,EAAOC,QAVP,SAAoBC,EAAYC,GAC9B,IAAIC,EAAS,GAMb,OALAL,EAASG,GAAY,SAAS/M,EAAOjE,EAAOgR,GACtCC,EAAUhN,EAAOjE,EAAOgR,IAC1BE,EAAOC,KAAKlN,MAGTiN,I,sBCjBT,IAAIE,EAAc,EAAQ,OACtBC,EAAa,EAAQ,OACrBC,EAAe,EAAQ,OACvBC,EAAU,EAAQ,OAgDtBT,EAAOC,QALP,SAAgBC,EAAYC,GAE1B,OADWM,EAAQP,GAAcI,EAAcC,GACnCL,EAAYM,EAAaL,EAAW","sources":["webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/utils.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/AnnotationNote.tsx","webpack://nivo-website/../src/AnnotationLink.tsx","webpack://nivo-website/../src/CircleAnnotationOutline.tsx","webpack://nivo-website/../src/DotAnnotationOutline.tsx","webpack://nivo-website/../src/RectAnnotationOutline.tsx","webpack://nivo-website/../src/Annotation.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/BarAnnotations.tsx","webpack://nivo-website/../src/BarTooltip.tsx","webpack://nivo-website/../src/BarLegends.tsx","webpack://nivo-website/../src/BarItem.tsx","webpack://nivo-website/../src/compute/common.ts","webpack://nivo-website/../src/compute/grouped.ts","webpack://nivo-website/../src/compute/stacked.ts","webpack://nivo-website/../src/compute/legends.ts","webpack://nivo-website/../src/Bar.tsx","webpack://nivo-website/../src/BarCanvas.tsx","webpack://nivo-website/../src/ResponsiveBar.tsx","webpack://nivo-website/../src/ResponsiveBarCanvas.tsx","webpack://nivo-website/../node_modules/lodash/_baseFilter.js","webpack://nivo-website/../node_modules/lodash/filter.js"],"sourcesContent":["export const defaultProps = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 13,\n}\n","import {\n    AnnotationSpec,\n    CircleAnnotationSpec,\n    DotAnnotationSpec,\n    Note,\n    NoteCanvas,\n    NoteSvg,\n    RectAnnotationSpec,\n} from './types'\nimport { isValidElement } from 'react'\n\nexport const isSvgNote = <Datum>(note: Note<Datum>): note is NoteSvg<Datum> => {\n    const noteType = typeof note\n\n    return (\n        isValidElement(note) ||\n        noteType === 'string' ||\n        noteType === 'function' ||\n        noteType === 'object'\n    )\n}\n\nexport const isCanvasNote = <Datum>(note: Note<Datum>): note is NoteCanvas<Datum> => {\n    const noteType = typeof note\n\n    return noteType === 'string' || noteType === 'function'\n}\n\nexport const isCircleAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is CircleAnnotationSpec<Datum> => annotationSpec.type === 'circle'\n\nexport const isDotAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is DotAnnotationSpec<Datum> => annotationSpec.type === 'dot'\n\nexport const isRectAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is RectAnnotationSpec<Datum> => annotationSpec.type === 'rect'\n","import { filter, isNumber, omit } from 'lodash'\nimport {\n    radiansToDegrees,\n    absoluteAngleDegrees,\n    degreesToRadians,\n    positionFromAngle,\n} from '@nivo/core'\nimport { defaultProps } from './props'\nimport {\n    AnnotationPositionGetter,\n    AnnotationDimensionsGetter,\n    BoundAnnotation,\n    AnnotationMatcher,\n    AnnotationInstructions,\n} from './types'\nimport { isCircleAnnotation, isRectAnnotation } from './utils'\n\nexport const bindAnnotations = <\n    Datum = {\n        x: number\n        y: number\n    }\n>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}): BoundAnnotation<Datum>[] =>\n    annotations.reduce((acc: BoundAnnotation<Datum>[], annotation) => {\n        const offset = annotation.offset || 0\n\n        return [\n            ...acc,\n            ...filter<Datum>(data, annotation.match).map(datum => {\n                const position = getPosition(datum)\n                const dimensions = getDimensions(datum)\n\n                if (isCircleAnnotation(annotation) || isRectAnnotation(annotation)) {\n                    dimensions.size = dimensions.size + offset * 2\n                    dimensions.width = dimensions.width + offset * 2\n                    dimensions.height = dimensions.height + offset * 2\n                }\n\n                // acc.push({\n                //     ...omit(annotation, ['match', 'offset']),\n                //     ...position,\n                //     ...dimensions,\n                //     size: annotation.size || dimensions.size,\n                //     datum,\n                // } as any)\n                // return [\n                //     ...acc,\n                //     {\n                //         ...omit(annotation, ['match', 'offset']),\n                //         ...position,\n                //         ...dimensions,\n                //         size: annotation.size || dimensions.size,\n                //         datum,\n                //     },\n                // ]\n                return {\n                    ...omit(annotation, ['match', 'offset']),\n                    ...position,\n                    ...dimensions,\n                    size: annotation.size || dimensions.size,\n                    datum,\n                } as Required<BoundAnnotation<Datum>>\n            }),\n        ]\n\n        // return acc\n    }, [])\n\nexport const getLinkAngle = (\n    sourceX: number,\n    sourceY: number,\n    targetX: number,\n    targetY: number\n) => {\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX)\n\n    return absoluteAngleDegrees(radiansToDegrees(angle))\n}\n\nexport const computeAnnotation = <Datum>(\n    annotation: BoundAnnotation<Datum>\n): AnnotationInstructions => {\n    const {\n        x,\n        y,\n        noteX,\n        noteY,\n        noteWidth = defaultProps.noteWidth,\n        noteTextOffset = defaultProps.noteTextOffset,\n    } = annotation\n\n    let computedNoteX: number\n    let computedNoteY: number\n\n    if (isNumber(noteX)) {\n        computedNoteX = x + noteX\n    } else if (noteX.abs !== undefined) {\n        computedNoteX = noteX.abs\n    } else {\n        throw new Error(`noteX should be either a number or an object containing an 'abs' property`)\n    }\n\n    if (isNumber(noteY)) {\n        computedNoteY = y + noteY\n    } else if (noteY.abs !== undefined) {\n        computedNoteY = noteY.abs\n    } else {\n        throw new Error(`noteY should be either a number or an object containing an 'abs' property`)\n    }\n\n    let computedX = x\n    let computedY = y\n\n    const angle = getLinkAngle(x, y, computedNoteX, computedNoteY)\n\n    if (isCircleAnnotation<Datum>(annotation)) {\n        const position = positionFromAngle(degreesToRadians(angle), annotation.size / 2)\n        computedX += position.x\n        computedY += position.y\n    }\n\n    if (isRectAnnotation<Datum>(annotation)) {\n        const eighth = Math.round((angle + 90) / 45) % 8\n        if (eighth === 0) {\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 1) {\n            computedX += annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 2) {\n            computedX += annotation.width / 2\n        }\n        if (eighth === 3) {\n            computedX += annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 4) {\n            computedY += annotation.height / 2\n        }\n        if (eighth === 5) {\n            computedX -= annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 6) {\n            computedX -= annotation.width / 2\n        }\n        if (eighth === 7) {\n            computedX -= annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n    }\n\n    let textX = computedNoteX\n    const textY = computedNoteY - noteTextOffset\n\n    let noteLineX = computedNoteX\n    const noteLineY = computedNoteY\n\n    if ((angle + 90) % 360 > 180) {\n        textX -= noteWidth\n        noteLineX -= noteWidth\n    } else {\n        noteLineX += noteWidth\n    }\n\n    return {\n        points: [\n            [computedX, computedY],\n            [computedNoteX, computedNoteY],\n            [noteLineX, noteLineY],\n        ] as [number, number][],\n        text: [textX, textY],\n        angle: angle + 90,\n    }\n}\n","import { useMemo } from 'react'\nimport { bindAnnotations, computeAnnotation } from './compute'\nimport {\n    AnnotationDimensionsGetter,\n    AnnotationMatcher,\n    AnnotationPositionGetter,\n    BoundAnnotation,\n} from './types'\n\n/**\n * Bind annotations to a dataset.\n */\nexport const useAnnotations = <Datum>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}) =>\n    useMemo(\n        () =>\n            bindAnnotations<Datum>({\n                data,\n                annotations,\n                getPosition,\n                getDimensions,\n            }),\n        [data, annotations, getPosition, getDimensions]\n    )\n\nexport const useComputedAnnotations = <Datum>({\n    annotations,\n}: {\n    annotations: BoundAnnotation<Datum>[]\n}) =>\n    useMemo(\n        () =>\n            annotations.map(annotation => ({\n                ...annotation,\n                computed: computeAnnotation<Datum>({\n                    ...annotation,\n                }),\n            })),\n        [annotations]\n    )\n\nexport const useComputedAnnotation = <Datum>(annotation: BoundAnnotation<Datum>) =>\n    useMemo(() => computeAnnotation<Datum>(annotation), [annotation])\n","import { createElement } from 'react'\nimport omit from 'lodash/omit'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { NoteSvg } from './types'\n\nexport const AnnotationNote = <Datum,>({\n    datum,\n    x,\n    y,\n    note,\n}: {\n    datum: Datum\n    x: number\n    y: number\n    note: NoteSvg<Datum>\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    if (typeof note === 'function') {\n        return createElement(note, { x, y, datum })\n    }\n\n    return (\n        <>\n            {theme.annotations.text.outlineWidth > 0 && (\n                <animated.text\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    style={{\n                        ...theme.annotations.text,\n                        strokeLinejoin: 'round',\n                        strokeWidth: theme.annotations.text.outlineWidth * 2,\n                        stroke: theme.annotations.text.outlineColor,\n                    }}\n                >\n                    {note}\n                </animated.text>\n            )}\n            <animated.text\n                x={animatedProps.x}\n                y={animatedProps.y}\n                style={omit(theme.annotations.text, ['outlineWidth', 'outlineColor'])}\n            >\n                {note}\n            </animated.text>\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath, useTheme } from '@nivo/core'\n\nexport const AnnotationLink = ({\n    points,\n    isOutline = false,\n}: {\n    points: [number, number][]\n    isOutline?: boolean\n}) => {\n    const theme = useTheme()\n\n    const path = useMemo(() => {\n        const [firstPoint, ...otherPoints] = points\n\n        return otherPoints.reduce(\n            (acc, [x, y]) => `${acc} L${x},${y}`,\n            `M${firstPoint[0]},${firstPoint[1]}`\n        )\n    }, [points])\n\n    const animatedPath = useAnimatedPath(path)\n\n    if (isOutline && theme.annotations.link.outlineWidth <= 0) {\n        return null\n    }\n\n    const style = { ...theme.annotations.link }\n    if (isOutline) {\n        style.strokeLinecap = 'square'\n        style.strokeWidth =\n            theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n        style.stroke = theme.annotations.link.outlineColor\n        style.opacity = theme.annotations.link.outlineOpacity\n    }\n\n    return <animated.path fill=\"none\" d={animatedPath} style={style} />\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const CircleAnnotationOutline = ({ x, y, size }: { x: number; y: number; size: number }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { defaultProps } from './props'\n\nexport const DotAnnotationOutline = ({\n    x,\n    y,\n    size = defaultProps.dotSize,\n}: {\n    x: number\n    y: number\n    size?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth: theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.symbol}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const RectAnnotationOutline = ({\n    x,\n    y,\n    width,\n    height,\n    borderRadius = 6,\n}: {\n    x: number\n    y: number\n    width: number\n    height: number\n    borderRadius?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x: x - width / 2,\n        y: y - height / 2,\n        width,\n        height,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.rect\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    rx={borderRadius}\n                    ry={borderRadius}\n                    width={animatedProps.width}\n                    height={animatedProps.height}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.rect\n                x={animatedProps.x}\n                y={animatedProps.y}\n                rx={borderRadius}\n                ry={borderRadius}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useComputedAnnotation } from './hooks'\nimport { AnnotationNote } from './AnnotationNote'\nimport { AnnotationLink } from './AnnotationLink'\nimport { CircleAnnotationOutline } from './CircleAnnotationOutline'\nimport { DotAnnotationOutline } from './DotAnnotationOutline'\nimport { RectAnnotationOutline } from './RectAnnotationOutline'\nimport { BoundAnnotation } from './types'\nimport { isCircleAnnotation, isDotAnnotation, isRectAnnotation, isSvgNote } from './utils'\n\nexport const Annotation = <Datum,>(annotation: BoundAnnotation<Datum>) => {\n    const { datum, x, y, note } = annotation\n    const computed = useComputedAnnotation(annotation)\n\n    if (!isSvgNote(note)) {\n        throw new Error('note should be a valid react element')\n    }\n\n    return (\n        <>\n            <AnnotationLink points={computed.points} isOutline={true} />\n            {isCircleAnnotation(annotation) && (\n                <CircleAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isDotAnnotation(annotation) && (\n                <DotAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isRectAnnotation(annotation) && (\n                <RectAnnotationOutline\n                    x={x}\n                    y={y}\n                    width={annotation.width}\n                    height={annotation.height}\n                    borderRadius={annotation.borderRadius}\n                />\n            )}\n            <AnnotationLink points={computed.points} />\n            <AnnotationNote datum={datum} x={computed.text[0]} y={computed.text[1]} note={note} />\n        </>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { ComputedAnnotation } from './types'\nimport { isCanvasNote, isCircleAnnotation, isDotAnnotation, isRectAnnotation } from './utils'\n\nconst drawPoints = (ctx: CanvasRenderingContext2D, points: [number, number][]) => {\n    points.forEach(([x, y], index) => {\n        if (index === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    })\n}\n\nexport const renderAnnotationsToCanvas = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        annotations,\n        theme,\n    }: {\n        annotations: ComputedAnnotation<Datum>[]\n        theme: CompleteTheme\n    }\n) => {\n    if (annotations.length === 0) return\n\n    ctx.save()\n    annotations.forEach(annotation => {\n        if (!isCanvasNote(annotation.note)) {\n            throw new Error('note is invalid for canvas implementation')\n        }\n\n        if (theme.annotations.link.outlineWidth > 0) {\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.annotations.link.outlineColor\n            ctx.lineWidth =\n                theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n            ctx.beginPath()\n            drawPoints(ctx, annotation.computed.points)\n            ctx.stroke()\n            ctx.lineCap = 'butt'\n        }\n\n        if (isCircleAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation) && theme.annotations.symbol.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.symbol.outlineColor\n            ctx.lineWidth = theme.annotations.symbol.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isRectAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        ctx.strokeStyle = theme.annotations.link.stroke\n        ctx.lineWidth = theme.annotations.link.strokeWidth\n        ctx.beginPath()\n        drawPoints(ctx, annotation.computed.points)\n        ctx.stroke()\n\n        if (isCircleAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation)) {\n            ctx.fillStyle = theme.annotations.symbol.fill\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.fill()\n        }\n\n        if (isRectAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        if (typeof annotation.note === 'function') {\n            annotation.note(ctx, {\n                datum: annotation.datum,\n                x: annotation.computed.text[0],\n                y: annotation.computed.text[1],\n                theme,\n            })\n        } else {\n            ctx.font = `${theme.annotations.text.fontSize}px ${theme.annotations.text.fontFamily}`\n            ctx.textAlign = 'left'\n            ctx.textBaseline = 'alphabetic'\n\n            ctx.fillStyle = theme.annotations.text.fill\n            ctx.strokeStyle = theme.annotations.text.outlineColor\n            ctx.lineWidth = theme.annotations.text.outlineWidth * 2\n\n            if (theme.annotations.text.outlineWidth > 0) {\n                ctx.lineJoin = 'round'\n                ctx.strokeText(\n                    annotation.note,\n                    annotation.computed.text[0],\n                    annotation.computed.text[1]\n                )\n                ctx.lineJoin = 'miter'\n            }\n            ctx.fillText(annotation.note, annotation.computed.text[0], annotation.computed.text[1])\n        }\n    })\n    ctx.restore()\n}\n","import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: RawDatum[], keys: string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport { uniqBy } from 'lodash'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarDatum, BarLayer, BarLayerId, BarSvgProps, ComputedBarDatumWithValue } from './types'\nimport { BarLegends } from './BarLegends'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { svgDefaultProps } from './props'\nimport { useTransition } from '@react-spring/web'\nimport { useBar } from './hooks'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel,\n    label,\n    labelSkipWidth,\n    labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as any) : null}\n                yScale={enableGridY ? (yScale as any) : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: any = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            innerWidth,\n            innerHeight,\n            width,\n            height,\n            bars,\n            xScale,\n            yScale,\n        }),\n        [commonProps, margin, innerWidth, innerHeight, width, height, bars, xScale, yScale]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { BarCanvasLayer, BarCanvasProps, BarDatum, ComputedBarDatum } from './types'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel,\n    label,\n    labelSkipWidth,\n    labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: any = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            margin,\n            innerWidth,\n            innerHeight,\n            width,\n            height,\n            bars,\n            xScale,\n            yScale,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            height,\n            innerHeight,\n            innerWidth,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            margin,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            bars,\n            xScale,\n            yScale,\n            tooltip,\n            width,\n        ]\n    )\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: xScale as any,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: yScale as any,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale as any,\n                    yScale: yScale as any,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: Omit<BarSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: Omit<BarCanvasProps<RawDatum>, 'height' | 'width'>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n"],"names":["defaultProps","isCircleAnnotation","annotationSpec","type","isDotAnnotation","isRectAnnotation","computeAnnotation","annotation","computedNoteX","computedNoteY","x","y","noteX","noteY","noteWidth","noteTextOffset","_isNumber","abs","Error","computedX","computedY","angle","sourceX","sourceY","targetX","targetY","Math","atan2","absoluteAngleDegrees","radiansToDegrees","getLinkAngle","position","positionFromAngle","degreesToRadians","size","eighth","round","height","width","textX","noteLineX","points","text","useAnnotations","data","annotations","getPosition","getDimensions","useMemo","reduce","acc","offset","_filter","match","map","datum","dimensions","_omit","bindAnnotations","useComputedAnnotations","computed","AnnotationNote","note","theme","useTheme","useMotionConfig","animate","springConfig","config","animatedProps","useSpring","immediate","createElement","_jsxDEV","outlineWidth","animated","style","strokeLinejoin","strokeWidth","stroke","outlineColor","omit","AnnotationLink","isOutline","path","firstPoint","animatedPath","useAnimatedPath","link","strokeLinecap","opacity","outlineOpacity","fill","d","CircleAnnotationOutline","radius","outline","circle","cx","cy","r","DotAnnotationOutline","dotSize","symbol","RectAnnotationOutline","borderRadius","rect","rx","ry","Annotation","useComputedAnnotation","noteType","isValidElement","isSvgNote","drawPoints","ctx","forEach","index","moveTo","lineTo","renderAnnotationsToCanvas","length","save","isCanvasNote","lineCap","strokeStyle","lineWidth","beginPath","arc","PI","fillStyle","font","fontSize","fontFamily","textAlign","textBaseline","lineJoin","strokeText","fillText","restore","BarAnnotations","bars","boundAnnotations","bar","_jsx","BarLegends","legends","toggleSerie","legend","containerWidth","containerHeight","undefined","indexBy","keys","groupMode","layout","reverse","minValue","maxValue","valueScale","indexScale","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","label","labelSkipWidth","labelSkipHeight","labelTextColor","from","colorBy","colors","scheme","borderWidth","borderColor","isInteractive","tooltip","color","id","value","enableChip","tooltipLabel","initialHiddenIds","markers","svgDefaultProps","layers","barComponent","labelColor","labelOpacity","labelX","labelY","transform","shouldRenderLabel","onClick","onMouseEnter","onMouseLeave","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","handleClick","useCallback","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","handleBlur","to","focusable","tabIndex","onMouseMove","onFocus","onBlur","textAnchor","dominantBaseline","fillOpacity","pointerEvents","defs","motionConfig","role","canvasDefaultProps","pixelRatio","window","getIndexScale","computeScale","all","min","max","normalizeData","item","filterNullValues","Object","coerceValue","Number","gt","lt","range","start","Array","repeat","end","clampToZero","generateVerticalGroupedBars","formatValue","getColor","getIndex","getTooltipLabel","xScale","yScale","margin","compare","cleanedData","rawValue","indexValue","barWidth","barHeight","yRef","getHeight","barData","formattedValue","hidden","key","absX","absY","generateHorizontalGroupedBars","xRef","getWidth","generateGroupedBars","indexScaleConfig","hiddenIds","props","axis","otherAxis","scaleSpec","clampMin","values","k","entry","isFinite","scale","bandwidth","params","flattenDeep","arr","generateVerticalStackedBars","stackedData","stackedDataItem","getY","generateHorizontalStackedBars","getX","generateStackedBars","array","stack","num","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","getLegendDataForIndexes","getLegendDataForKeys","useBar","valueFormat","useState","setHiddenIds","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","barsWithValue","shouldRenderBarLabel","legendData","legendsWithData","InnerBar","partialMargin","axisTop","axisRight","gridXValues","gridYValues","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","transition","useTransition","enter","update","leave","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","top","right","bottom","left","xValues","yValues","layerContext","layer","Bar","renderWrapper","otherProps","findBarUnderCursor","nodes","node","isCursorInRect","InnerBarCanvas","renderBar","canvasRef","canvasEl","useRef","useEffect","isNumber","renderGridLinesToCanvas","renderAxesToCanvas","renderLegendToCanvas","handleMouseHover","getRelativeCursor","event","ref","canvas","cursor","BarCanvas","forwardRef","ResponsiveBar","ResponsiveBarCanvas","baseEach","module","exports","collection","predicate","result","push","arrayFilter","baseFilter","baseIteratee","isArray"],"sourceRoot":""}