{"version":3,"file":"c46004bf0c87c9b2cb2e65443efe604c9ed83710-46a8115322796b84bfab.js","mappings":"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","sources":["webpack://nivo-website/./src/data/components/waffle/props.ts","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/props.ts","webpack://nivo-website/./src/data/components/waffle/CustomTooltip.js","webpack://nivo-website/./src/data/components/waffle/mapper.js"],"sourcesContent":["import { WaffleDefaultProps } from '@nivo/waffle'\nimport {\n    themeProperty,\n    motionProperties,\n    defsProperties,\n    getLegendsProps,\n    groupProperties,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst defaults = WaffleDefaultProps\n\nconst props: ChartProperty[] = [\n    {\n        key: 'total',\n        group: 'Base',\n        type: 'number',\n        required: true,\n        help: 'Max value.',\n        description: 'Max value, ratio will be computed against this value for each datum.',\n        flavors: ['svg', 'html', 'canvas'],\n    },\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                id:    string | number\n                value: number\n                label: string | number\n            }>\n            \\`\\`\\`\n        `,\n        type: 'object[]',\n        required: true,\n        flavors: ['svg', 'html', 'canvas'],\n    },\n    // {\n    //     key: 'hiddenIds',\n    //     type: 'Array<string | number>',\n    //     help: 'Hide parts of the data by id',\n    //     description: `\n    //         Hide parts of the data by id, this can be used\n    //         to implement toggle. Note that the datum will\n    //         still be visible in legends, if you want\n    //         to completely remove a datum from the data set,\n    //         you'll have to filter the data before passing\n    //         it to the component.\n    //     `,\n    //     required: false,\n    //     defaultValue: defaults.hiddenIds,\n    // },\n    {\n        key: 'rows',\n        group: 'Base',\n        type: 'number',\n        help: 'Number of rows.',\n        required: true,\n        flavors: ['svg', 'html', 'canvas'],\n        controlType: 'range',\n        controlOptions: {\n            min: 1,\n            max: 100,\n        },\n    },\n    {\n        key: 'columns',\n        group: 'Base',\n        type: 'number',\n        help: 'Number of columns.',\n        required: true,\n        flavors: ['svg', 'html', 'canvas'],\n        controlType: 'range',\n        controlOptions: {\n            min: 1,\n            max: 100,\n        },\n    },\n    {\n        key: 'fillDirection',\n        group: 'Base',\n        type: 'string',\n        required: false,\n        help: `How to fill the waffle.`,\n        flavors: ['svg', 'html', 'canvas'],\n        defaultValue: defaults.fillDirection,\n        controlType: 'choices',\n        controlOptions: {\n            choices: [\n                { label: 'top', value: 'top' },\n                { label: 'right', value: 'right' },\n                { label: 'bottom', value: 'bottom' },\n                { label: 'left', value: 'left' },\n            ],\n        },\n    },\n    {\n        key: 'padding',\n        group: 'Base',\n        type: 'number',\n        help: 'Padding between each cell.',\n        required: true,\n        flavors: ['svg', 'html', 'canvas'],\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 10,\n        },\n    },\n    {\n        key: 'width',\n        group: 'Base',\n        enableControlForFlavors: ['api'],\n        flavors: ['svg', 'html', 'canvas'],\n        help: 'Chart width.',\n        description: `\n            not required if using responsive alternative\n            of the component\n            \\`<Responsive*/>\\`.\n        `,\n        type: 'number',\n        required: true,\n    },\n    {\n        key: 'height',\n        group: 'Base',\n        enableControlForFlavors: ['api'],\n        flavors: ['svg', 'html', 'canvas'],\n        help: 'Chart height.',\n        description: `\n            not required if using responsive alternative\n            of the component\n            \\`<Responsive*/>\\`.\n        `,\n        type: 'number',\n        required: true,\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        required: false,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'margin',\n        group: 'Base',\n        type: 'object',\n        required: false,\n        help: 'Chart margin.',\n        flavors: ['svg', 'html', 'canvas'],\n        controlType: 'margin',\n    },\n    themeProperty(['svg', 'html', 'canvas']),\n    {\n        key: 'cellComponent',\n        flavors: ['svg', 'html'],\n        help: 'Override default cell component.',\n        type: 'Function',\n        required: false,\n        controlType: 'choices',\n        group: 'Style',\n        controlOptions: {\n            choices: ['default', 'Custom(props) => (…)'].map(key => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'colors',\n        group: 'Style',\n        type: 'string | Function | string[]',\n        required: false,\n        help: 'Defines how to compute node color.',\n        defaultValue: defaults.colors,\n        flavors: ['svg', 'html', 'canvas'],\n        controlType: 'ordinalColors',\n    },\n    {\n        key: 'emptyColor',\n        group: 'Style',\n        help: 'Defines empty cells color.',\n        type: 'string',\n        required: false,\n        defaultValue: defaults.emptyColor,\n        flavors: ['svg', 'html', 'canvas'],\n        controlType: 'colorPicker',\n    },\n    {\n        key: 'emptyOpacity',\n        group: 'Style',\n        help: 'Empty cells opacity.',\n        required: false,\n        defaultValue: defaults.emptyOpacity,\n        type: 'number',\n        flavors: ['svg', 'html', 'canvas'],\n        controlType: 'opacity',\n    },\n    {\n        key: 'borderWidth',\n        group: 'Style',\n        type: 'number',\n        required: false,\n        help: 'Control cell border width.',\n        defaultValue: defaults.borderWidth,\n        flavors: ['svg', 'html', 'canvas'],\n        controlType: 'lineWidth',\n    },\n    {\n        key: 'borderColor',\n        group: 'Style',\n        type: 'string | object | Function',\n        required: false,\n        help: 'Method to compute cell border color.',\n        defaultValue: defaults.borderColor,\n        flavors: ['svg', 'html', 'canvas'],\n        controlType: 'inheritedColor',\n    },\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'isInteractive',\n        group: 'Interactivity',\n        type: 'boolean',\n        required: false,\n        help: 'Enable/disable interactivity.',\n        defaultValue: defaults.isInteractive,\n        flavors: ['svg', 'html', 'canvas'],\n        controlType: 'switch',\n    },\n    {\n        key: 'onClick',\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'onClick handler, it receives clicked node data and style plus mouse event.',\n        flavors: ['svg', 'html', 'canvas'],\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom tooltip component',\n        flavors: ['svg', 'html', 'canvas'],\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will\n            receive the following data:\n            \\`\\`\\`\n            {\n                id:         {string|number},\n                value:      number,\n                label:      {string|number},\n                color:      string,\n                position:   number,\n                row:        number,\n                column:     number,\n                groupIndex: number,\n                startAt:    number,\n                endAt:      number,\n            }\n            \\`\\`\\`\n            You can customize the tooltip style\n            using the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        group: 'Interactivity',\n        type: 'boolean',\n        required: false,\n        controlType: 'switch',\n        help: 'Showcase custom tooltip.',\n        flavors: ['svg', 'html', 'canvas'],\n    },\n    {\n        key: 'legends',\n        group: 'Legends',\n        type: 'object[]',\n        required: false,\n        help: `Optional chart's legends.`,\n        flavors: ['svg', 'canvas'],\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            defaults: {\n                anchor: 'left',\n                direction: 'column',\n                justify: false,\n                translateX: -100,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 4,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                itemTextColor: '#777',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemTextColor: '#000',\n                            itemBackground: '#f7fafb',\n                        },\n                    },\n                ],\n            },\n        },\n    },\n    ...motionProperties(['svg', 'html'], defaults),\n]\n\nexport const groups = groupProperties(props)\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { BoxLegendSvgProps, LegendAnchor, LegendItemDirection } from './types'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { computeDimensions, computePositionFromAnchor, computeItemLayout } from './compute'\nimport { LegendCanvasProps } from './types'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n        if (reverse === true) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n`\nconst TooltipKey = styled.span`\n    font-weight: 600;\n`\nconst TooltipValue = styled.span``\n\nconst CustomTooltip = node => (\n    <TooltipWrapper style={{ color: node.color }}>\n        <TooltipKey>label</TooltipKey>\n        <TooltipValue>{node.label}</TooltipValue>\n        <TooltipKey>id</TooltipKey>\n        <TooltipValue>{node.id}</TooltipValue>\n        <TooltipKey>value</TooltipKey>\n        <TooltipValue>{node.value}</TooltipValue>\n        <TooltipKey>position</TooltipKey>\n        <TooltipValue>{node.position}</TooltipValue>\n        <TooltipKey>groupIndex</TooltipKey>\n        <TooltipValue>{node.groupIndex}</TooltipValue>\n        <TooltipKey>row</TooltipKey>\n        <TooltipValue>{node.row}</TooltipValue>\n        <TooltipKey>column</TooltipKey>\n        <TooltipValue>{node.column}</TooltipValue>\n        <TooltipKey>color</TooltipKey>\n        <TooltipValue>{node.color}</TooltipValue>\n    </TooltipWrapper>\n)\n\nexport default CustomTooltip\n","import React from 'react'\nimport { settingsMapper } from '../../../lib/settings'\nimport CustomTooltip from './CustomTooltip'\n\nconst CustomSvgCell = ({\n    position,\n    size,\n    x,\n    y,\n    color,\n    fill,\n    opacity,\n    borderWidth,\n    borderColor,\n    data,\n    onHover,\n    onLeave,\n    onClick,\n}) => (\n    <circle\n        r={size / 2}\n        cx={x + size / 2}\n        cy={y + size / 2}\n        fill={fill || color}\n        strokeWidth={borderWidth}\n        stroke={borderColor}\n        opacity={opacity}\n        onMouseEnter={onHover}\n        onMouseMove={onHover}\n        onMouseLeave={onLeave}\n        onClick={event => {\n            onClick({ position, color, x, y, data }, event)\n        }}\n    />\n)\n\nconst CustomHtmlCell = ({\n    position,\n    size,\n    x,\n    y,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    data,\n    onHover,\n    onLeave,\n    onClick,\n}) => (\n    <div\n        style={{\n            borderRadius: `${size / 2}px 0 ${size / 2}px 0`,\n            position: 'absolute',\n            top: y,\n            left: x,\n            width: size,\n            height: size,\n            background: color,\n            opacity,\n            boxSizing: 'content-box',\n            borderStyle: 'solid',\n            borderWidth: `${borderWidth}px`,\n            borderColor,\n        }}\n        onMouseEnter={onHover}\n        onMouseMove={onHover}\n        onMouseLeave={onLeave}\n        onClick={event => {\n            onClick({ position, color, x, y, data }, event)\n        }}\n    />\n)\n\nexport default settingsMapper(\n    {\n        cellComponent: (value, values, options) => {\n            if (value === `Custom(props) => (…)`) {\n                if (options.component === 'Waffle') return CustomSvgCell\n                return CustomHtmlCell\n            }\n            return undefined\n        },\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return null\n\n            return CustomTooltip\n        },\n    },\n    {\n        exclude: ['custom tooltip example'],\n    }\n)\n"],"names":["defaults","WaffleDefaultProps","props","key","group","type","required","help","description","flavors","controlType","controlOptions","min","max","defaultValue","fillDirection","choices","label","value","unit","enableControlForFlavors","themeProperty","map","colors","emptyColor","emptyOpacity","borderWidth","borderColor","defsProperties","isInteractive","getLegendsProps","shouldCreate","addLabel","shouldRemove","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","itemTextColor","onClick","data","alert","JSON","stringify","effects","on","style","itemBackground","motionProperties","groups","groupProperties","zeroPadding","top","right","bottom","left","computeDimensions","item","_padding","padding","itemCount","Array","isArray","Error","horizontalPadding","verticalPadding","width","height","spacing","computePositionFromAnchor","containerWidth","containerHeight","x","y","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","symbolSpacing","symbolByShape","circle","size","fill","opacity","_jsx","r","cx","cy","strokeWidth","stroke","pointerEvents","diamond","transform","d","square","triangle","LegendSvgItem","textColor","background","symbolShape","symbolBorderWidth","symbolBorderColor","onMouseEnter","onMouseLeave","toggleSerie","useState","setStyle","theme","useTheme","handleMouseEnter","useCallback","event","filter","reduce","acc","effect","handleMouseLeave","some","handler","SymbolShape","_jsxs","itemOpacity","cursor","e","id","React","color","hidden","legends","symbol","textAnchor","text","dominantBaseline","userSelect","LegendSvg","length","xStep","yStep","i","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","ctx","save","translate","font","fontSize","fontFamily","forEach","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","useQuantizeColorScaleLegendData","scale","overriddenDomain","domain","reverse","valueFormat","v","separator","useMemo","items","range","domainValue","index","invertExtent","extent","LegendPropShape","PropTypes","isRequired","TooltipWrapper","styled","TooltipKey","TooltipValue","node","position","groupIndex","row","column","CustomSvgCell","onHover","onLeave","onMouseMove","CustomHtmlCell","borderRadius","boxSizing","borderStyle","settingsMapper","cellComponent","values","options","component","tooltip","CustomTooltip","exclude"],"sourceRoot":""}