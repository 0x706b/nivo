{"version":3,"file":"d41ac18d021debeaacd01cb9d2d5d4deadfa31a8-945cf7a9d6eeb38f2b34.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-shape/src/array.js","webpack://nivo-website/../node_modules/d3-shape/src/stack.js","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../src/svg/ContinuousColorsLegendSvg.tsx","webpack://nivo-website/../src/svg/AnchoredContinuousColorsLegendSvg.tsx","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/hooks.ts"],"sourcesContent":["export var slice = Array.prototype.slice;","import { slice } from \"./array.js\";\nimport constant from \"./constant.js\";\nimport offsetNone from \"./offset/none.js\";\nimport orderNone from \"./order/none.js\";\n\nfunction stackValue(d, key) {\n  return d[key];\n}\n\nexport default function () {\n  var keys = constant([]),\n      order = orderNone,\n      offset = offsetNone,\n      value = stackValue;\n\n  function stack(data) {\n    var kz = keys.apply(this, arguments),\n        i,\n        m = data.length,\n        n = kz.length,\n        sz = new Array(n),\n        oz;\n\n    for (i = 0; i < n; ++i) {\n      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\n        si[j] = sij = [0, +value(data[j], ki, j, data)];\n        sij.data = data[j];\n      }\n\n      si.key = ki;\n    }\n\n    for (i = 0, oz = order(sz); i < n; ++i) {\n      sz[oz[i]].index = i;\n    }\n\n    offset(sz, oz);\n    return sz;\n  }\n\n  stack.keys = function (_) {\n    return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : keys;\n  };\n\n  stack.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), stack) : value;\n  };\n\n  stack.order = function (_) {\n    return arguments.length ? (order = _ == null ? orderNone : typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : order;\n  };\n\n  stack.offset = function (_) {\n    return arguments.length ? (offset = _ == null ? offsetNone : _, stack) : offset;\n  };\n\n  return stack;\n}","import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProps, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProps<X> | null\n        right?: CanvasAxisProps<Y> | null\n        bottom?: CanvasAxisProps<X> | null\n        left?: CanvasAxisProps<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProps<X> | undefined\n            : CanvasAxisProps<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { ContinuousColorsLegendProps } from './types'\n\nexport const continuousColorsLegendDefaults: {\n    length: NonNullable<ContinuousColorsLegendProps['length']>\n    thickness: NonNullable<ContinuousColorsLegendProps['thickness']>\n    direction: NonNullable<ContinuousColorsLegendProps['direction']>\n    tickPosition: NonNullable<ContinuousColorsLegendProps['tickPosition']>\n    tickSize: NonNullable<ContinuousColorsLegendProps['tickSize']>\n    tickSpacing: NonNullable<ContinuousColorsLegendProps['tickSpacing']>\n    tickOverlap: NonNullable<ContinuousColorsLegendProps['tickOverlap']>\n    tickFormat: NonNullable<ContinuousColorsLegendProps['tickFormat']>\n    titleAlign: NonNullable<ContinuousColorsLegendProps['titleAlign']>\n    titleOffset: NonNullable<ContinuousColorsLegendProps['titleOffset']>\n} = {\n    length: 200,\n    thickness: 16,\n    direction: 'row',\n    tickPosition: 'after',\n    tickSize: 4,\n    tickSpacing: 3,\n    tickOverlap: false,\n    tickFormat: (value: number) => `${value}`,\n    titleAlign: 'start',\n    titleOffset: 4,\n}\n","import { Fragment } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { computeContinuousColorsLegend } from '../compute'\nimport { ContinuousColorsLegendProps } from '../types'\nimport { continuousColorsLegendDefaults } from '../defaults'\n\nexport const ContinuousColorsLegendSvg = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        ticks: computedTicks,\n        colorStops,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const theme = useTheme()\n\n    const id = `ContinuousColorsLegendSvgGradient.${direction}.${colorStops\n        .map(stop => stop.offset)\n        .join('_')}`\n\n    return (\n        <g>\n            <defs>\n                <linearGradient\n                    id={id}\n                    x1={gradientX1}\n                    y1={gradientY1}\n                    x2={gradientX2}\n                    y2={gradientY2}\n                >\n                    {colorStops.map(colorStop => (\n                        <stop {...colorStop} />\n                    ))}\n                </linearGradient>\n            </defs>\n            {titleText && (\n                <text\n                    transform={`translate(${titleX}, ${titleY}) rotate(${titleRotation})`}\n                    textAnchor={titleHorizontalAlign}\n                    dominantBaseline={titleVerticalAlign}\n                    style={theme.legends.title.text}\n                >\n                    {titleText}\n                </text>\n            )}\n            <rect width={width} height={height} fill={`url(#${id}`} />\n            {computedTicks.map((tick, index) => (\n                <Fragment key={index}>\n                    <line\n                        x1={tick.x1}\n                        y1={tick.y1}\n                        x2={tick.x2}\n                        y2={tick.y2}\n                        style={theme.legends.ticks.line}\n                    />\n                    <text\n                        x={tick.textX}\n                        y={tick.textY}\n                        textAnchor={tick.textHorizontalAlign}\n                        dominantBaseline={tick.textVerticalAlign}\n                        style={theme.legends.ticks.text}\n                    >\n                        {tick.text}\n                    </text>\n                </Fragment>\n            ))}\n        </g>\n    )\n}\n","import { AnchoredContinuousColorsLegendProps } from '../types'\nimport { computePositionFromAnchor } from '../compute'\nimport { continuousColorsLegendDefaults } from '../defaults'\nimport { ContinuousColorsLegendSvg } from './ContinuousColorsLegendSvg'\n\nexport const AnchoredContinuousColorsLegendSvg = ({\n    containerWidth,\n    containerHeight,\n    anchor,\n    translateX = 0,\n    translateY = 0,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    ...legendProps\n}: AnchoredContinuousColorsLegendProps) => {\n    let width: number\n    let height: number\n    if (direction === 'row') {\n        width = length\n        height = thickness\n    } else {\n        width = thickness\n        height = length\n    }\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <g transform={`translate(${x}, ${y})`}>\n            <ContinuousColorsLegendSvg\n                length={length}\n                thickness={thickness}\n                direction={direction}\n                {...legendProps}\n            />\n        </g>\n    )\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n\n        if (reverse) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse, separator, valueFormat])\n}\n"],"names":["slice","Array","prototype","stackValue","d","key","keys","order","offset","value","stack","data","i","oz","kz","apply","this","arguments","m","length","n","sz","sij","ki","si","j","index","_","computeCartesianTicks","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","position","centerScale","line","lineX","lineY","text","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","x","y","top","bottom","left","right","ticks","map","v","getFormatter","format","type","formatter","timeFormat","Date","d3Format","computeGridLines","width","height","_values","isArray","lines","x1","x2","y1","y2","memoizedAxisTick","memo","_value","onClick","textAnchor","animatedProps","theme","useTheme","props","useMemo","style","opacity","cursor","event","_jsxs","animated","g","transform","_jsx","dominantBaseline","textTransform","memoizedAxis","renderTick","AxisTick","legend","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","config","useSpring","lineX2","lineY2","immediate","transition","useTransition","t","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","rotate","domain","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","axes","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","_format","save","font","fontWeight","fontSize","fontFamily","strokeWidth","lineWidth","Number","lineCap","stroke","strokeStyle","beginPath","moveTo","lineTo","forEach","degreesToRadians","fill","fillStyle","fillText","String","restore","renderAxesToCanvas","renderGridLinesToCanvas","continuousColorsLegendDefaults","thickness","direction","tickPosition","tickSpacing","tickOverlap","tickFormat","titleAlign","titleOffset","zeroPadding","computeDimensions","item","itemsSpacing","_padding","padding","itemCount","itemWidth","itemHeight","Error","horizontalPadding","verticalPadding","spacing","computePositionFromAnchor","anchor","translateX","translateY","containerWidth","containerHeight","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","justify","symbolSize","symbolSpacing","computeContinuousColorsLegend","title","reverse","positionScale","scaleLinear","range","thresholds","titleX","titleY","titleRotation","titleVerticalAlign","textVerticalAlign","textHorizontalAlign","colorStops","computeContinuousColorScaleColorStops","getValueFormatter","computedTicks","gradientY1","gradientX2","push","gradientX1","gradientY2","titleText","titleHorizontalAlign","ContinuousColorsLegendSvg","id","stop","join","colorStop","legends","Fragment","AnchoredContinuousColorsLegendSvg","legendProps","symbolByShape","circle","size","borderWidth","borderColor","r","cx","cy","pointerEvents","diamond","square","triangle","LegendSvgItem","textColor","background","symbolShape","symbolBorderWidth","symbolBorderColor","onMouseEnter","onMouseLeave","toggleSerie","effects","useState","setStyle","handleMouseEnter","useCallback","filter","on","reduce","acc","effect","handleMouseLeave","isInteractive","some","handler","SymbolShape","itemOpacity","itemBackground","color","hidden","symbol","itemTextColor","userSelect","label","LegendSvg","itemDirection","xStep","yStep","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","itemX","itemY","fillRect","renderContinuousColorLegendToCanvas","_ticks","initialStyles","gradient","createLinearGradient","addColorStop","stopColor","useQuantizeColorScaleLegendData","overriddenDomain","valueFormat","separator","items","domainValue","invertExtent","extent","LegendPropShape","isRequired"],"sourceRoot":""}