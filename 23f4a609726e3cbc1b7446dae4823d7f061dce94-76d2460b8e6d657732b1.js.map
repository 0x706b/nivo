{"version":3,"file":"23f4a609726e3cbc1b7446dae4823d7f061dce94-76d2460b8e6d657732b1.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-hierarchy/src/accessors.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/constant.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/count.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/index.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/each.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/sum.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/sort.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/path.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/ancestors.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/descendants.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/leaves.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/links.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/treemap/dice.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/treemap/round.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/treemap/slice.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/treemap/squarify.js","webpack://nivo-website/../src/transitions.ts","webpack://nivo-website/../src/TreeMapNode.tsx","webpack://nivo-website/../src/TreeMapNodeTooltip.tsx","webpack://nivo-website/../src/TreeMapHtmlNode.tsx","webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../src/tiling.ts","webpack://nivo-website/../node_modules/d3-hierarchy/src/treemap/binary.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/treemap/sliceDice.js","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../node_modules/d3-hierarchy/src/treemap/index.js","webpack://nivo-website/../src/TreeMapNodes.tsx","webpack://nivo-website/../src/TreeMap.tsx","webpack://nivo-website/../src/ResponsiveTreeMap.tsx","webpack://nivo-website/../src/TreeMapHtml.tsx","webpack://nivo-website/../src/ResponsiveTreeMapHtml.tsx","webpack://nivo-website/../src/TreeMapCanvas.tsx","webpack://nivo-website/../src/ResponsiveTreeMapCanvas.tsx","webpack://nivo-website/../node_modules/lodash/cloneDeep.js"],"sourcesContent":["export function optional(f) {\n  return f == null ? null : required(f);\n}\nexport function required(f) {\n  if (typeof f !== \"function\") throw new Error();\n  return f;\n}","export function constantZero() {\n  return 0;\n}\nexport default function (x) {\n  return function () {\n    return x;\n  };\n}","function count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;else while (--i >= 0) {\n    sum += children[i].value;\n  }\n  node.value = sum;\n}\n\nexport default function () {\n  return this.eachAfter(count);\n}","import node_count from \"./count.js\";\nimport node_each from \"./each.js\";\nimport node_eachBefore from \"./eachBefore.js\";\nimport node_eachAfter from \"./eachAfter.js\";\nimport node_sum from \"./sum.js\";\nimport node_sort from \"./sort.js\";\nimport node_path from \"./path.js\";\nimport node_ancestors from \"./ancestors.js\";\nimport node_descendants from \"./descendants.js\";\nimport node_leaves from \"./leaves.js\";\nimport node_links from \"./links.js\";\nexport default function hierarchy(data, children) {\n  var root = new Node(data),\n      valued = +data.value && (root.value = data.value),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n  if (children == null) children = defaultChildren;\n\n  while (node = nodes.pop()) {\n    if (valued) node.value = +node.data.value;\n\n    if ((childs = children(node.data)) && (n = childs.length)) {\n      node.children = new Array(n);\n\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction defaultChildren(d) {\n  return d.children;\n}\n\nfunction copyData(node) {\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n\n  do {\n    node.height = height;\n  } while ((node = node.parent) && node.height < ++height);\n}\nexport function Node(data) {\n  this.data = data;\n  this.depth = this.height = 0;\n  this.parent = null;\n}\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy\n};","export default function (callback) {\n  var node = this,\n      current,\n      next = [node],\n      children,\n      i,\n      n;\n\n  do {\n    current = next.reverse(), next = [];\n\n    while (node = current.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        next.push(children[i]);\n      }\n    }\n  } while (next.length);\n\n  return this;\n}","export default function (callback) {\n  var node = this,\n      nodes = [node],\n      next = [],\n      children,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    next.push(node), children = node.children;\n    if (children) for (i = 0, n = children.length; i < n; ++i) {\n      nodes.push(children[i]);\n    }\n  }\n\n  while (node = next.pop()) {\n    callback(node);\n  }\n\n  return this;\n}","export default function (callback) {\n  var node = this,\n      nodes = [node],\n      children,\n      i;\n\n  while (node = nodes.pop()) {\n    callback(node), children = node.children;\n    if (children) for (i = children.length - 1; i >= 0; --i) {\n      nodes.push(children[i]);\n    }\n  }\n\n  return this;\n}","export default function (value) {\n  return this.eachAfter(function (node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n\n    while (--i >= 0) {\n      sum += children[i].value;\n    }\n\n    node.value = sum;\n  });\n}","export default function (compare) {\n  return this.eachBefore(function (node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n}","export default function (end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n\n  var k = nodes.length;\n\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n\n  return c;\n}","export default function () {\n  var node = this,\n      nodes = [node];\n\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n\n  return nodes;\n}","export default function () {\n  var nodes = [];\n  this.each(function (node) {\n    nodes.push(node);\n  });\n  return nodes;\n}","export default function () {\n  var leaves = [];\n  this.eachBefore(function (node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n}","export default function () {\n  var root = this,\n      links = [];\n  root.each(function (node) {\n    if (node !== root) {\n      // Don’t include the root’s parent, if any.\n      links.push({\n        source: node.parent,\n        target: node\n      });\n    }\n  });\n  return links;\n}","export default function (parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (x1 - x0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.y0 = y0, node.y1 = y1;\n    node.x0 = x0, node.x1 = x0 += node.value * k;\n  }\n}","export default function (node) {\n  node.x0 = Math.round(node.x0);\n  node.y0 = Math.round(node.y0);\n  node.x1 = Math.round(node.x1);\n  node.y1 = Math.round(node.y1);\n}","export default function (parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (y1 - y0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.x0 = x0, node.x1 = x1;\n    node.y0 = y0, node.y1 = y0 += node.value * k;\n  }\n}","import treemapDice from \"./dice.js\";\nimport treemapSlice from \"./slice.js\";\nexport var phi = (1 + Math.sqrt(5)) / 2;\nexport function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [],\n      nodes = parent.children,\n      row,\n      nodeValue,\n      i0 = 0,\n      i1 = 0,\n      n = nodes.length,\n      dx,\n      dy,\n      value = parent.value,\n      sumValue,\n      minValue,\n      maxValue,\n      newRatio,\n      minRatio,\n      alpha,\n      beta;\n\n  while (i0 < n) {\n    dx = x1 - x0, dy = y1 - y0; // Find the next non-empty node.\n\n    do {\n      sumValue = nodes[i1++].value;\n    } while (!sumValue && i1 < n);\n\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.\n\n    for (; i1 < n; ++i1) {\n      sumValue += nodeValue = nodes[i1].value;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n\n      if (newRatio > minRatio) {\n        sumValue -= nodeValue;\n        break;\n      }\n\n      minRatio = newRatio;\n    } // Position and record the row orientation.\n\n\n    rows.push(row = {\n      value: sumValue,\n      dice: dx < dy,\n      children: nodes.slice(i0, i1)\n    });\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n    value -= sumValue, i0 = i1;\n  }\n\n  return rows;\n}\nexport default (function custom(ratio) {\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n\n  squarify.ratio = function (x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return squarify;\n})(phi);","import { to, SpringValue } from '@react-spring/web'\n\nexport const svgNodeTransform = (x: SpringValue<number>, y: SpringValue<number>) =>\n    to([x, y], (x, y) => `translate(${x},${y})`)\n\nexport const htmlNodeTransform = (x: SpringValue<number>, y: SpringValue<number>) =>\n    to([x, y], (x, y) => `translate(${x}px, ${y}px)`)\n\nexport const svgLabelTransform = (\n    x: SpringValue<number>,\n    y: SpringValue<number>,\n    rotation: SpringValue<number>\n) => to([x, y, rotation], (x, y, rotation) => `translate(${x},${y}) rotate(${rotation})`)\n\nexport const htmlLabelTransform = (\n    x: SpringValue<number>,\n    y: SpringValue<number>,\n    rotation: SpringValue<number>\n) => to([x, y, rotation], (x, y, rotation) => `translate(${x}px,${y}px) rotate(${rotation}deg)`)\n\nexport const htmlParentLabelTransform = (\n    x: SpringValue<number>,\n    y: SpringValue<number>,\n    rotation: SpringValue<number>\n) =>\n    to(\n        [x, y, rotation],\n        (x, y, rotation) =>\n            `translate(${x - (rotation === 0 ? 0 : 5)}px,${\n                y - (rotation === 0 ? 5 : 0)\n            }px) rotate(${rotation}deg)`\n    )\n","import { memo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { NodeProps } from './types'\nimport { svgNodeTransform, svgLabelTransform } from './transitions'\n\nconst NonMemoizedTreeMapNode = <Datum extends object>({\n    node,\n    animatedProps,\n    borderWidth,\n    enableLabel,\n    enableParentLabel,\n    labelSkipSize,\n}: NodeProps<Datum>) => {\n    const theme = useTheme()\n\n    const showLabel =\n        enableLabel &&\n        node.isLeaf &&\n        (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n    const showParentLabel = enableParentLabel && node.isParent\n\n    return (\n        <animated.g transform={svgNodeTransform(animatedProps.x, animatedProps.y)}>\n            <animated.rect\n                data-testid={`node.${node.id}`}\n                width={to(animatedProps.width, v => Math.max(v, 0))}\n                height={to(animatedProps.height, v => Math.max(v, 0))}\n                fill={node.fill ? node.fill : animatedProps.color}\n                strokeWidth={borderWidth}\n                stroke={node.borderColor}\n                fillOpacity={node.opacity}\n                onMouseEnter={node.onMouseEnter}\n                onMouseMove={node.onMouseMove}\n                onMouseLeave={node.onMouseLeave}\n                onClick={node.onClick}\n            />\n            {showLabel && (\n                <animated.text\n                    data-testid={`label.${node.id}`}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: node.labelTextColor,\n                        pointerEvents: 'none',\n                    }}\n                    fillOpacity={animatedProps.labelOpacity}\n                    transform={svgLabelTransform(\n                        animatedProps.labelX,\n                        animatedProps.labelY,\n                        animatedProps.labelRotation\n                    )}\n                >\n                    {node.label}\n                </animated.text>\n            )}\n            {showParentLabel && (\n                <animated.text\n                    data-testid={`parentLabel.${node.id}`}\n                    dominantBaseline=\"central\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: node.parentLabelTextColor,\n                        pointerEvents: 'none',\n                    }}\n                    fillOpacity={animatedProps.parentLabelOpacity}\n                    transform={svgLabelTransform(\n                        animatedProps.parentLabelX,\n                        animatedProps.parentLabelY,\n                        animatedProps.parentLabelRotation\n                    )}\n                >\n                    {node.parentLabel}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nexport const TreeMapNode = memo(NonMemoizedTreeMapNode) as typeof NonMemoizedTreeMapNode\n","import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { TooltipProps } from './types'\n\nconst NonMemoizedTreeMapNodeTooltip = <Datum extends object>({ node }: TooltipProps<Datum>) => (\n    <BasicTooltip id={node.id} value={node.formattedValue} enableChip={true} color={node.color} />\n)\n\nexport const TreeMapNodeTooltip = memo(\n    NonMemoizedTreeMapNodeTooltip\n) as typeof NonMemoizedTreeMapNodeTooltip\n","import { memo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { NodeProps } from './types'\nimport { htmlNodeTransform, htmlLabelTransform, htmlParentLabelTransform } from './transitions'\n\nconst NonMemoizedTreeMapHtmlNode = <Datum extends object>({\n    node,\n    animatedProps,\n    borderWidth,\n    enableLabel,\n    enableParentLabel,\n    labelSkipSize,\n}: NodeProps<Datum>) => {\n    const theme = useTheme()\n\n    const showLabel =\n        enableLabel &&\n        node.isLeaf &&\n        (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n    const showParentLabel = enableParentLabel && node.isParent\n\n    return (\n        <animated.div\n            data-testid={`node.${node.id}`}\n            id={node.path.replace(/[^\\w]/gi, '-')}\n            style={{\n                boxSizing: 'border-box',\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                transform: htmlNodeTransform(animatedProps.x, animatedProps.y),\n                width: animatedProps.width,\n                height: animatedProps.height,\n                borderWidth,\n                borderStyle: 'solid',\n                borderColor: node.borderColor,\n                overflow: 'hidden',\n            }}\n        >\n            <animated.div\n                style={{\n                    boxSizing: 'border-box',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    opacity: node.opacity,\n                    width: animatedProps.width,\n                    height: animatedProps.height,\n                    background: animatedProps.color,\n                }}\n                onMouseEnter={node.onMouseEnter}\n                onMouseMove={node.onMouseMove}\n                onMouseLeave={node.onMouseLeave}\n                onClick={node.onClick}\n            />\n            {showLabel && (\n                <animated.span\n                    data-testid={`label.${node.id}`}\n                    style={{\n                        ...theme.labels.text,\n                        position: 'absolute',\n                        display: 'flex',\n                        top: -5,\n                        left: -5,\n                        width: 10,\n                        height: 10,\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        whiteSpace: 'nowrap',\n                        color: node.labelTextColor,\n                        transformOrigin: 'center center',\n                        transform: htmlLabelTransform(\n                            animatedProps.labelX,\n                            animatedProps.labelY,\n                            animatedProps.labelRotation\n                        ),\n                        opacity: animatedProps.labelOpacity,\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {node.label}\n                </animated.span>\n            )}\n            {showParentLabel && (\n                <animated.span\n                    data-testid={`parentLabel.${node.id}`}\n                    style={{\n                        ...theme.labels.text,\n                        position: 'absolute',\n                        display: 'flex',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                        whiteSpace: 'nowrap',\n                        width: 10,\n                        height: 10,\n                        color: node.parentLabelTextColor,\n                        transformOrigin: 'top left',\n                        transform: htmlParentLabelTransform(\n                            animatedProps.parentLabelX,\n                            animatedProps.parentLabelY,\n                            animatedProps.parentLabelRotation\n                        ),\n                        opacity: animatedProps.parentLabelOpacity,\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {node.parentLabel}\n                </animated.span>\n            )}\n        </animated.div>\n    )\n}\n\nexport const TreeMapHtmlNode = memo(NonMemoizedTreeMapHtmlNode) as typeof NonMemoizedTreeMapHtmlNode\n","import { TreeMapCommonProps, DefaultTreeMapDatum, LayerId } from './types'\nimport { TreeMapNode } from './TreeMapNode'\nimport { TreeMapNodeTooltip } from './TreeMapNodeTooltip'\nimport { TreeMapHtmlNode } from './TreeMapHtmlNode'\n\nexport const commonDefaultProps: Omit<\n    TreeMapCommonProps<DefaultTreeMapDatum>,\n    | 'valueFormat'\n    | 'margin'\n    | 'theme'\n    | 'labelFormat'\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'renderWrapper'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['nodes'],\n\n    identity: 'id',\n    value: 'value',\n\n    tile: 'squarify',\n    leavesOnly: false,\n    innerPadding: 0,\n    outerPadding: 0,\n\n    colors: { scheme: 'nivo' as const },\n    colorBy: 'pathComponents.1',\n    nodeOpacity: 0.33,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipSize: 0,\n    labelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    orientLabel: true,\n\n    enableParentLabel: true,\n    parentLabel: 'id',\n    parentLabelSize: 20,\n    parentLabelPosition: 'top',\n    parentLabelPadding: 6,\n    parentLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    borderWidth: 1,\n    borderColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    isInteractive: true,\n    tooltip: TreeMapNodeTooltip,\n\n    role: 'img',\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: TreeMapNode,\n    defs: [],\n    fill: [],\n}\n\nexport const htmlDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: TreeMapHtmlNode,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import {\n    treemapBinary,\n    treemapDice,\n    treemapSlice,\n    treemapSliceDice,\n    treemapSquarify,\n} from 'd3-hierarchy'\n\nexport const tileByType = {\n    binary: treemapBinary,\n    dice: treemapDice,\n    slice: treemapSlice,\n    sliceDice: treemapSliceDice,\n    squarify: treemapSquarify,\n} as const\n\nexport type TileType = keyof typeof tileByType\n","export default function (parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      i,\n      n = nodes.length,\n      sum,\n      sums = new Array(n + 1);\n\n  for (sums[0] = sum = i = 0; i < n; ++i) {\n    sums[i + 1] = sum += nodes[i].value;\n  }\n\n  partition(0, n, parent.value, x0, y0, x1, y1);\n\n  function partition(i, j, value, x0, y0, x1, y1) {\n    if (i >= j - 1) {\n      var node = nodes[i];\n      node.x0 = x0, node.y0 = y0;\n      node.x1 = x1, node.y1 = y1;\n      return;\n    }\n\n    var valueOffset = sums[i],\n        valueTarget = value / 2 + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n\n    while (k < hi) {\n      var mid = k + hi >>> 1;\n      if (sums[mid] < valueTarget) k = mid + 1;else hi = mid;\n    }\n\n    if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;\n    var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n\n    if (x1 - x0 > y1 - y0) {\n      var xk = (x0 * valueRight + x1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, xk, y1);\n      partition(k, j, valueRight, xk, y0, x1, y1);\n    } else {\n      var yk = (y0 * valueRight + y1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, x1, yk);\n      partition(k, j, valueRight, x0, yk, x1, y1);\n    }\n  }\n}","import dice from \"./dice.js\";\nimport slice from \"./slice.js\";\nexport default function (parent, x0, y0, x1, y1) {\n  (parent.depth & 1 ? slice : dice)(parent, x0, y0, x1, y1);\n}","import { createElement, useCallback, useMemo, MouseEvent } from 'react'\nimport omit from 'lodash/omit'\nimport cloneDeep from 'lodash/cloneDeep'\nimport startCase from 'lodash/startCase'\nimport {\n    treemap as d3Treemap,\n    hierarchy,\n    HierarchyNode,\n    HierarchyRectangularNode,\n} from 'd3-hierarchy'\nimport { useTheme, useValueFormatter, PropertyAccessor, usePropertyAccessor } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { commonDefaultProps } from './defaults'\nimport {\n    DefaultTreeMapDatum,\n    TreeMapCommonProps,\n    TreeMapDataProps,\n    ComputedNode,\n    ComputedNodeWithoutStyles,\n    ComputedNodeWithHandlers,\n    CustomLayerProps,\n} from './types'\nimport { tileByType } from './tiling'\n\nexport const useTreeMapLayout = <Datum extends object>({\n    width,\n    height,\n    tile,\n    innerPadding,\n    outerPadding,\n    enableParentLabel,\n    parentLabelSize,\n    parentLabelPosition,\n    leavesOnly,\n}: {\n    width: number\n    height: number\n    tile: TreeMapCommonProps<Datum>['tile']\n    innerPadding: TreeMapCommonProps<Datum>['innerPadding']\n    outerPadding: TreeMapCommonProps<Datum>['outerPadding']\n    enableParentLabel: TreeMapCommonProps<Datum>['enableParentLabel']\n    parentLabelSize: TreeMapCommonProps<Datum>['parentLabelSize']\n    parentLabelPosition: TreeMapCommonProps<Datum>['parentLabelPosition']\n    leavesOnly: TreeMapCommonProps<Datum>['leavesOnly']\n}) =>\n    useMemo(() => {\n        const treemap = d3Treemap<Datum>()\n            .size([width, height])\n            .tile(tileByType[tile])\n            .round(true)\n            .paddingInner(innerPadding)\n            .paddingOuter(outerPadding)\n\n        if (enableParentLabel && !leavesOnly) {\n            const parentLabelPadding = parentLabelSize + outerPadding * 2\n            // @ts-ignore\n            treemap[`padding${startCase(parentLabelPosition)}`](parentLabelPadding)\n        }\n\n        return treemap\n    }, [\n        width,\n        height,\n        tile,\n        innerPadding,\n        outerPadding,\n        enableParentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        leavesOnly,\n    ])\n\nexport const useHierarchy = <Datum extends object>({\n    root,\n    getValue,\n}: {\n    root: Datum\n    getValue: (datum: Datum) => number\n}) => useMemo(() => hierarchy<Datum>(root).sum(getValue), [root, getValue])\n\nconst computeNodeIdAndPath = <Datum extends object>(\n    node: HierarchyNode<Datum>,\n    getIdentity: (node: Datum) => string\n) => {\n    const path = node\n        .ancestors()\n        .map(ancestor => getIdentity(ancestor.data))\n        .reverse()\n\n    return { path: path.join('.'), pathComponents: path }\n}\n\nexport const useTreeMap = <Datum extends object = DefaultTreeMapDatum>({\n    data,\n    width,\n    height,\n    identity = commonDefaultProps.identity as PropertyAccessor<Datum, string>,\n    value = commonDefaultProps.value as PropertyAccessor<Datum, number>,\n    valueFormat,\n    leavesOnly = commonDefaultProps.leavesOnly,\n    tile = commonDefaultProps.tile,\n    innerPadding = commonDefaultProps.innerPadding,\n    outerPadding = commonDefaultProps.outerPadding,\n    label = commonDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    orientLabel = commonDefaultProps.orientLabel,\n    enableParentLabel = commonDefaultProps.enableParentLabel,\n    parentLabel = commonDefaultProps.parentLabel as TreeMapCommonProps<Datum>['parentLabel'],\n    parentLabelSize = commonDefaultProps.parentLabelSize,\n    parentLabelPosition = commonDefaultProps.parentLabelPosition,\n    parentLabelPadding = commonDefaultProps.parentLabelPadding,\n    colors = commonDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = commonDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = commonDefaultProps.nodeOpacity,\n    borderColor = commonDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    labelTextColor = commonDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    parentLabelTextColor = commonDefaultProps.parentLabelTextColor as TreeMapCommonProps<Datum>['parentLabelTextColor'],\n}: {\n    data: TreeMapDataProps<Datum>['data']\n    width: number\n    height: number\n    identity?: TreeMapCommonProps<Datum>['identity']\n    value?: TreeMapCommonProps<Datum>['value']\n    valueFormat?: TreeMapCommonProps<Datum>['valueFormat']\n    tile?: TreeMapCommonProps<Datum>['tile']\n    leavesOnly?: TreeMapCommonProps<Datum>['leavesOnly']\n    innerPadding?: TreeMapCommonProps<Datum>['innerPadding']\n    outerPadding?: TreeMapCommonProps<Datum>['outerPadding']\n    label?: TreeMapCommonProps<Datum>['label']\n    orientLabel?: TreeMapCommonProps<Datum>['orientLabel']\n    enableParentLabel?: TreeMapCommonProps<Datum>['enableParentLabel']\n    parentLabel?: TreeMapCommonProps<Datum>['parentLabel']\n    parentLabelSize?: TreeMapCommonProps<Datum>['parentLabelSize']\n    parentLabelPosition?: TreeMapCommonProps<Datum>['parentLabelPosition']\n    parentLabelPadding?: TreeMapCommonProps<Datum>['parentLabelPadding']\n    colors?: TreeMapCommonProps<Datum>['colors']\n    colorBy?: TreeMapCommonProps<Datum>['colorBy']\n    nodeOpacity?: TreeMapCommonProps<Datum>['nodeOpacity']\n    borderColor?: TreeMapCommonProps<Datum>['borderColor']\n    labelTextColor?: TreeMapCommonProps<Datum>['labelTextColor']\n    parentLabelTextColor?: TreeMapCommonProps<Datum>['parentLabelTextColor']\n}) => {\n    const getIdentity = usePropertyAccessor(identity)\n    const getValue = usePropertyAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n    const getLabel = usePropertyAccessor(label)\n    const getParentLabel = usePropertyAccessor(parentLabel)\n\n    const layout = useTreeMapLayout<Datum>({\n        width,\n        height,\n        tile,\n        innerPadding,\n        outerPadding,\n        enableParentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        leavesOnly,\n    })\n\n    const hierarchy = useHierarchy<Datum>({ root: data, getValue })\n\n    const rawNodes = useMemo(() => {\n        // d3 treemap mutates the data, so we need to copy it\n        // to have proper behavior for subsequents useMemo()\n        const root = cloneDeep(hierarchy)\n        layout(root)\n\n        return (\n            leavesOnly ? root.leaves() : root.descendants()\n        ) as HierarchyRectangularNode<Datum>[]\n    }, [hierarchy, layout, leavesOnly])\n\n    const nodes = useMemo(\n        () =>\n            rawNodes.map(rawNode => {\n                const { path, pathComponents } = computeNodeIdAndPath(rawNode, getIdentity)\n\n                const node = {\n                    id: getIdentity(rawNode.data),\n                    path,\n                    pathComponents,\n                    data: omit(rawNode.data, 'children'),\n                    x: rawNode.x0,\n                    y: rawNode.y0,\n                    width: rawNode.x1 - rawNode.x0,\n                    height: rawNode.y1 - rawNode.y0,\n                    value: rawNode.value!,\n                    formattedValue: formatValue(rawNode.value!),\n                    treeDepth: rawNode.depth,\n                    treeHeight: rawNode.height,\n                    isParent: rawNode.height > 0,\n                    isLeaf: rawNode.height === 0,\n                    parentLabelX: 0,\n                    parentLabelY: 0,\n                    parentLabelRotation: 0,\n                } as ComputedNodeWithoutStyles<Datum>\n\n                node.labelRotation = orientLabel && node.height > node.width ? -90 : 0\n\n                if (parentLabelPosition === 'top') {\n                    node.parentLabelX = outerPadding + parentLabelPadding\n                    node.parentLabelY = outerPadding + parentLabelSize / 2\n                }\n                if (parentLabelPosition === 'right') {\n                    node.parentLabelX = node.width - outerPadding - parentLabelSize / 2\n                    node.parentLabelY = node.height - outerPadding - parentLabelPadding\n                    node.parentLabelRotation = -90\n                }\n                if (parentLabelPosition === 'bottom') {\n                    node.parentLabelX = outerPadding + parentLabelPadding\n                    node.parentLabelY = node.height - outerPadding - parentLabelSize / 2\n                }\n                if (parentLabelPosition === 'left') {\n                    node.parentLabelX = outerPadding + parentLabelSize / 2\n                    node.parentLabelY = node.height - outerPadding - parentLabelPadding\n                    node.parentLabelRotation = -90\n                }\n\n                node.label = getLabel(node)\n                node.parentLabel = getParentLabel(node)\n\n                return node\n            }),\n        [\n            rawNodes,\n            getIdentity,\n            formatValue,\n            getLabel,\n            orientLabel,\n            getParentLabel,\n            parentLabelSize,\n            parentLabelPosition,\n            parentLabelPadding,\n            outerPadding,\n        ]\n    )\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const getParentLabelTextColor = useInheritedColor(parentLabelTextColor, theme)\n\n    const nodesWithStyles = useMemo(\n        () =>\n            nodes.map(node => {\n                const nodeWithStyles = {\n                    ...node,\n                    color: getColor(node),\n                    opacity: nodeOpacity,\n                } as ComputedNode<Datum>\n\n                nodeWithStyles.borderColor = getBorderColor(nodeWithStyles)\n                nodeWithStyles.labelTextColor = getLabelTextColor(nodeWithStyles)\n                nodeWithStyles.parentLabelTextColor = getParentLabelTextColor(nodeWithStyles)\n\n                return nodeWithStyles\n            }),\n        [nodes, getColor, nodeOpacity, getBorderColor, getLabelTextColor, getParentLabelTextColor]\n    )\n\n    return {\n        hierarchy,\n        nodes: nodesWithStyles,\n        layout,\n    }\n}\n\nexport const useInteractiveTreeMapNodes = <Datum extends object>(\n    nodes: ComputedNode<Datum>[],\n    {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: {\n        isInteractive: TreeMapCommonProps<Datum>['isInteractive']\n        onMouseEnter?: TreeMapCommonProps<Datum>['onMouseEnter']\n        onMouseMove?: TreeMapCommonProps<Datum>['onMouseMove']\n        onMouseLeave?: TreeMapCommonProps<Datum>['onMouseLeave']\n        onClick?: TreeMapCommonProps<Datum>['onClick']\n        tooltip: TreeMapCommonProps<Datum>['tooltip']\n    }\n): ComputedNodeWithHandlers<Datum>[] => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event, 'left')\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseEnter = useCallback(\n        (node, event) => {\n            showTooltip(node, event)\n            onMouseEnter?.(node, event)\n        },\n        [onMouseEnter, showTooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (node, event) => {\n            showTooltip(node, event)\n            onMouseMove?.(node, event)\n        },\n        [onMouseMove, showTooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node, event) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [onMouseLeave, hideTooltip]\n    )\n\n    const handleClick = useCallback(\n        (node, event) => {\n            onClick?.(node, event)\n        },\n        [onClick]\n    )\n\n    return useMemo(\n        () =>\n            nodes.map(node => {\n                if (!isInteractive) return node\n\n                return {\n                    ...node,\n                    onMouseEnter: (event: MouseEvent) => handleMouseEnter(node, event),\n                    onMouseMove: (event: MouseEvent) => handleMouseMove(node, event),\n                    onMouseLeave: (event: MouseEvent) => handleMouseLeave(node, event),\n                    onClick: (event: MouseEvent) => handleClick(node, event),\n                }\n            }),\n        [isInteractive, nodes, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useCustomLayerProps = <Datum extends object>({\n    nodes,\n}: CustomLayerProps<Datum>): CustomLayerProps<Datum> =>\n    useMemo(\n        () => ({\n            nodes,\n        }),\n        [nodes]\n    )\n","import roundNode from \"./round.js\";\nimport squarify from \"./squarify.js\";\nimport { required } from \"../accessors.js\";\nimport constant, { constantZero } from \"../constant.js\";\nexport default function () {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 = root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function (x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function (x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function (x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function (x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function (x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function (x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function (x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function (x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function (x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function (x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n}","import { createElement, memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useInteractiveTreeMapNodes } from './hooks'\nimport {\n    ComputedNode,\n    TreeMapCommonProps,\n    NodeAnimatedProps,\n    NodeComponent,\n    ComputedNodeWithHandlers,\n} from './types'\n\nconst getAnimatedNodeProps = <Datum extends object>(\n    node: ComputedNodeWithHandlers<Datum>\n): NodeAnimatedProps => ({\n    x: node.x,\n    y: node.y,\n    width: node.width,\n    height: node.height,\n    color: node.color,\n    labelX: node.width / 2,\n    labelY: node.height / 2,\n    labelRotation: node.labelRotation,\n    labelOpacity: 1,\n    parentLabelX: node.parentLabelX,\n    parentLabelY: node.parentLabelY,\n    parentLabelRotation: node.parentLabelRotation,\n    parentLabelOpacity: 1,\n})\n\nconst getEndingAnimatedNodeProps = <Datum extends object>(\n    node: ComputedNodeWithHandlers<Datum>\n): NodeAnimatedProps => {\n    const x = node.x + node.width / 2\n    const y = node.y + node.height / 2\n\n    return {\n        x,\n        y,\n        width: 0,\n        height: 0,\n        color: node.color,\n        labelX: 0,\n        labelY: 0,\n        labelRotation: node.labelRotation,\n        labelOpacity: 0,\n        parentLabelX: 0,\n        parentLabelY: 0,\n        parentLabelRotation: node.parentLabelRotation,\n        parentLabelOpacity: 0,\n    }\n}\n\ninterface TreeMapNodesProps<Datum extends object> {\n    nodes: ComputedNode<Datum>[]\n    nodeComponent: NodeComponent<Datum>\n    borderWidth: TreeMapCommonProps<Datum>['borderWidth']\n    enableLabel: TreeMapCommonProps<Datum>['enableLabel']\n    labelSkipSize: TreeMapCommonProps<Datum>['labelSkipSize']\n    enableParentLabel: TreeMapCommonProps<Datum>['enableParentLabel']\n    isInteractive: TreeMapCommonProps<Datum>['isInteractive']\n    onMouseEnter?: TreeMapCommonProps<Datum>['onMouseEnter']\n    onMouseMove?: TreeMapCommonProps<Datum>['onMouseMove']\n    onMouseLeave?: TreeMapCommonProps<Datum>['onMouseLeave']\n    onClick?: TreeMapCommonProps<Datum>['onClick']\n    tooltip: TreeMapCommonProps<Datum>['tooltip']\n}\n\nconst NonMemoizedTreeMapNodes = <Datum extends object>({\n    nodes,\n    nodeComponent,\n    borderWidth,\n    enableLabel,\n    labelSkipSize,\n    enableParentLabel,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: TreeMapNodesProps<Datum>) => {\n    const nodesWithHandlers = useInteractiveTreeMapNodes<Datum>(nodes, {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<ComputedNodeWithHandlers<Datum>, NodeAnimatedProps>(\n        nodesWithHandlers,\n        {\n            keys: node => node.path,\n            initial: getAnimatedNodeProps,\n            from: getEndingAnimatedNodeProps,\n            enter: getAnimatedNodeProps,\n            update: getAnimatedNodeProps,\n            leave: getEndingAnimatedNodeProps,\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <>\n            {transition((animatedProps, node) =>\n                createElement(nodeComponent, {\n                    key: node.path,\n                    node,\n                    animatedProps,\n                    borderWidth,\n                    enableLabel,\n                    labelSkipSize,\n                    enableParentLabel,\n                })\n            )}\n        </>\n    )\n}\n\nexport const TreeMapNodes = memo(NonMemoizedTreeMapNodes) as typeof NonMemoizedTreeMapNodes\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    SvgWrapper,\n    Container,\n    useDimensions,\n    // @ts-ignore\n    bindDefs,\n} from '@nivo/core'\nimport { useTreeMap, useCustomLayerProps } from './hooks'\nimport { TreeMapNodes } from './TreeMapNodes'\nimport {\n    DefaultTreeMapDatum,\n    NodeComponent,\n    TreeMapCommonProps,\n    TreeMapSvgProps,\n    LayerId,\n} from './types'\nimport { svgDefaultProps } from './defaults'\n\ntype InnerTreeMapProps<Datum extends object> = Omit<\n    TreeMapSvgProps<Datum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerTreeMap = <Datum extends object>({\n    data,\n    identity = svgDefaultProps.identity as TreeMapCommonProps<Datum>['identity'],\n    value = svgDefaultProps.value as TreeMapCommonProps<Datum>['value'],\n    valueFormat,\n    tile = svgDefaultProps.tile,\n    nodeComponent = svgDefaultProps.nodeComponent as NodeComponent<Datum>,\n    innerPadding = svgDefaultProps.innerPadding,\n    outerPadding = svgDefaultProps.outerPadding,\n    leavesOnly = svgDefaultProps.leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers as NonNullable<TreeMapSvgProps<Datum>['layers']>,\n    colors = svgDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = svgDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = svgDefaultProps.nodeOpacity,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    enableLabel = svgDefaultProps.enableLabel,\n    label = svgDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    labelTextColor = svgDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    orientLabel = svgDefaultProps.orientLabel,\n    labelSkipSize = svgDefaultProps.labelSkipSize,\n    enableParentLabel = svgDefaultProps.enableParentLabel,\n    parentLabel = svgDefaultProps.parentLabel as TreeMapCommonProps<Datum>['parentLabel'],\n    parentLabelSize = svgDefaultProps.parentLabelSize,\n    parentLabelPosition = svgDefaultProps.parentLabelPosition,\n    parentLabelPadding = svgDefaultProps.parentLabelPadding,\n    parentLabelTextColor = svgDefaultProps.parentLabelTextColor as TreeMapCommonProps<Datum>['parentLabelTextColor'],\n    isInteractive = svgDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip as TreeMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeMapProps<Datum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap<Datum>({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel,\n        parentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        parentLabelPadding,\n        parentLabelTextColor,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        nodes: null,\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <TreeMapNodes<Datum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                borderWidth={borderWidth}\n                enableLabel={enableLabel}\n                labelSkipSize={labelSkipSize}\n                enableParentLabel={enableParentLabel}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    const customLayerProps = useCustomLayerProps<Datum>({ nodes })\n\n    const boundDefs = bindDefs(defs, nodes, fill)\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const TreeMap = <Datum extends object = DefaultTreeMapDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: TreeMapSvgProps<Datum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerTreeMap<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultTreeMapDatum, TreeMapSvgProps } from './types'\nimport { TreeMap } from './TreeMap'\n\nexport const ResponsiveTreeMap = <Datum extends object = DefaultTreeMapDatum>(\n    props: Omit<TreeMapSvgProps<Datum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMap<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions } from '@nivo/core'\nimport { useCustomLayerProps, useTreeMap } from './hooks'\nimport { TreeMapNodes } from './TreeMapNodes'\nimport { DefaultTreeMapDatum, TreeMapCommonProps, TreeMapHtmlProps, LayerId } from './types'\nimport { htmlDefaultProps, svgDefaultProps } from './defaults'\n\ntype InnerTreeMapHtmlProps<Datum extends object> = Omit<\n    TreeMapHtmlProps<Datum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerTreeMapHtml = <Datum extends object>({\n    data,\n    identity = htmlDefaultProps.identity as TreeMapCommonProps<Datum>['identity'],\n    value = htmlDefaultProps.value as TreeMapCommonProps<Datum>['value'],\n    tile = htmlDefaultProps.tile,\n    nodeComponent = htmlDefaultProps.nodeComponent,\n    valueFormat,\n    innerPadding = htmlDefaultProps.innerPadding,\n    outerPadding = htmlDefaultProps.outerPadding,\n    leavesOnly = htmlDefaultProps.leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers as NonNullable<TreeMapHtmlProps<Datum>['layers']>,\n    colors = htmlDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = htmlDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = htmlDefaultProps.nodeOpacity,\n    borderWidth = htmlDefaultProps.borderWidth,\n    borderColor = htmlDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    enableLabel = htmlDefaultProps.enableLabel,\n    label = htmlDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    labelTextColor = htmlDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    orientLabel = htmlDefaultProps.orientLabel,\n    labelSkipSize = htmlDefaultProps.labelSkipSize,\n    enableParentLabel = htmlDefaultProps.enableParentLabel,\n    parentLabel = htmlDefaultProps.parentLabel as TreeMapCommonProps<Datum>['parentLabel'],\n    parentLabelSize = htmlDefaultProps.parentLabelSize,\n    parentLabelPosition = htmlDefaultProps.parentLabelPosition,\n    parentLabelPadding = htmlDefaultProps.parentLabelPadding,\n    parentLabelTextColor = htmlDefaultProps.parentLabelTextColor as TreeMapCommonProps<Datum>['parentLabelTextColor'],\n    isInteractive = htmlDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = htmlDefaultProps.tooltip as TreeMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeMapHtmlProps<Datum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap<Datum>({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel,\n        parentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        parentLabelPadding,\n        parentLabelTextColor,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        nodes: null,\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <TreeMapNodes<Datum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                borderWidth={borderWidth}\n                enableLabel={enableLabel}\n                labelSkipSize={labelSkipSize}\n                enableParentLabel={enableParentLabel}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    const customLayerProps = useCustomLayerProps<Datum>({ nodes })\n\n    return (\n        <div\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n            style={{\n                position: 'relative',\n                width: outerWidth,\n                height: outerHeight,\n            }}\n        >\n            <div style={{ position: 'absolute', top: margin.top, left: margin.left }}>\n                {layers.map((layer, i) => {\n                    if (typeof layer === 'function') {\n                        return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                    }\n\n                    return layerById?.[layer] ?? null\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport const TreeMapHtml = <Datum extends object = DefaultTreeMapDatum>({\n    isInteractive = htmlDefaultProps.isInteractive,\n    animate = htmlDefaultProps.animate,\n    motionConfig = htmlDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: TreeMapHtmlProps<Datum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerTreeMapHtml<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultTreeMapDatum, TreeMapHtmlProps } from './types'\nimport { TreeMapHtml } from './TreeMapHtml'\n\nexport const ResponsiveTreeMapHtml = <Datum extends object = DefaultTreeMapDatum>(\n    props: Omit<TreeMapHtmlProps<Datum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMapHtml<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { createElement, useCallback, useEffect, useRef } from 'react'\nimport {\n    degreesToRadians,\n    getRelativeCursor,\n    isCursorInRect,\n    Container,\n    useDimensions,\n    useTheme,\n    Margin,\n} from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useTreeMap } from './hooks'\nimport { ComputedNode, DefaultTreeMapDatum, TreeMapCanvasProps, TreeMapCommonProps } from './types'\nimport { canvasDefaultProps } from './defaults'\n\nconst findNodeUnderCursor = <Datum extends object>(\n    nodes: ComputedNode<Datum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\ntype InnerTreeMapCanvasProps<Datum extends object> = Omit<\n    TreeMapCanvasProps<Datum>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerTreeMapCanvas = <Datum extends object>({\n    data,\n    identity = canvasDefaultProps.identity as TreeMapCommonProps<Datum>['identity'],\n    value = canvasDefaultProps.identity as TreeMapCommonProps<Datum>['value'],\n    tile = canvasDefaultProps.tile,\n    valueFormat,\n    innerPadding = canvasDefaultProps.innerPadding,\n    outerPadding = canvasDefaultProps.outerPadding,\n    leavesOnly = canvasDefaultProps.leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    colors = canvasDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = canvasDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = canvasDefaultProps.nodeOpacity,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor = canvasDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    enableLabel = canvasDefaultProps.enableLabel,\n    label = canvasDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    labelTextColor = canvasDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    orientLabel = canvasDefaultProps.orientLabel,\n    labelSkipSize = canvasDefaultProps.labelSkipSize,\n    isInteractive = canvasDefaultProps.isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip as TreeMapCommonProps<Datum>['tooltip'],\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeMapCanvasProps<Datum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap<Datum>({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel: false,\n    })\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        const ctx = canvasEl.current.getContext('2d')\n        if (ctx === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        nodes.forEach(node => {\n            ctx.fillStyle = node.color\n            ctx.fillRect(node.x, node.y, node.width, node.height)\n\n            if (borderWidth > 0) {\n                ctx.strokeStyle = node.borderColor\n                ctx.lineWidth = borderWidth\n                ctx.strokeRect(node.x, node.y, node.width, node.height)\n            }\n        })\n\n        if (enableLabel) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'middle'\n            ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n            nodes.forEach(node => {\n                const showLabel =\n                    node.isLeaf &&\n                    (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n                if (!showLabel) return\n\n                const rotate = orientLabel && node.height > node.width\n\n                ctx.save()\n                ctx.translate(node.x + node.width / 2, node.y + node.height / 2)\n                ctx.rotate(degreesToRadians(rotate ? -90 : 0))\n\n                ctx.fillStyle = node.labelTextColor\n                ctx.fillText(`${node.label}`, 0, 0)\n\n                ctx.restore()\n            })\n        }\n    }, [\n        canvasEl,\n        nodes,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        borderWidth,\n        enableLabel,\n        orientLabel,\n        labelSkipSize,\n        theme,\n        pixelRatio,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            if (canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const node = findNodeUnderCursor(nodes, margin, x, y)\n\n            if (node !== undefined) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event, 'left')\n                onMouseMove?.(node, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [canvasEl, nodes, margin, showTooltipFromEvent, hideTooltip, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            if (canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const node = findNodeUnderCursor(nodes, margin, x, y)\n\n            if (node === undefined) return\n\n            onClick?.(node, event)\n        },\n        [canvasEl, nodes, margin, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n        />\n    )\n}\n\nexport const TreeMapCanvas = <Datum extends object = DefaultTreeMapDatum>({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: TreeMapCanvasProps<Datum>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerTreeMapCanvas<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultTreeMapDatum, TreeMapCanvasProps } from './types'\nimport { TreeMapCanvas } from './TreeMapCanvas'\n\nexport const ResponsiveTreeMapCanvas = <Datum extends object = DefaultTreeMapDatum>(\n    props: Omit<TreeMapCanvasProps<Datum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMapCanvas<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = cloneDeep;\n"],"names":["optional","f","required","Error","constantZero","x","count","node","sum","children","i","length","value","hierarchy","data","child","childs","n","root","Node","valued","nodes","defaultChildren","pop","Array","push","parent","depth","eachBefore","computeHeight","d","copyData","height","this","prototype","constructor","eachAfter","each","callback","current","next","reverse","sort","compare","path","end","start","ancestor","a","b","aNodes","ancestors","bNodes","c","leastCommonAncestor","k","splice","descendants","leaves","links","source","target","copy","x0","y0","x1","y1","Math","round","custom","ratio","squarify","row","nodeValue","dx","dy","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","rows","i0","i1","max","dice","slice","squarifyRatio","sqrt","svgNodeTransform","y","to","htmlNodeTransform","svgLabelTransform","rotation","htmlLabelTransform","htmlParentLabelTransform","TreeMapNode","memo","animatedProps","borderWidth","enableLabel","enableParentLabel","labelSkipSize","theme","useTheme","showLabel","isLeaf","min","width","showParentLabel","isParent","_jsxs","animated","g","transform","_jsx","rect","id","v","fill","color","strokeWidth","stroke","borderColor","fillOpacity","opacity","onMouseEnter","onMouseMove","onMouseLeave","onClick","text","textAnchor","dominantBaseline","style","labels","labelTextColor","pointerEvents","labelOpacity","labelX","labelY","labelRotation","label","parentLabelTextColor","parentLabelOpacity","parentLabelX","parentLabelY","parentLabelRotation","parentLabel","TreeMapNodeTooltip","BasicTooltip","formattedValue","enableChip","TreeMapHtmlNode","div","replace","boxSizing","position","top","left","borderStyle","overflow","background","span","display","justifyContent","alignItems","whiteSpace","transformOrigin","commonDefaultProps","layers","identity","tile","leavesOnly","innerPadding","outerPadding","colors","scheme","colorBy","nodeOpacity","from","modifiers","orientLabel","parentLabelSize","parentLabelPosition","parentLabelPadding","isInteractive","tooltip","role","animate","motionConfig","svgDefaultProps","nodeComponent","defs","htmlDefaultProps","canvasDefaultProps","pixelRatio","window","devicePixelRatio","tileByType","binary","sums","partition","j","valueOffset","valueTarget","hi","mid","valueLeft","valueRight","xk","yk","treemapDice","treemapSlice","sliceDice","treemapSquarify","useTreeMap","valueFormat","getIdentity","usePropertyAccessor","getValue","formatValue","useValueFormatter","getLabel","getParentLabel","layout","useMemo","treemap","paddingStack","paddingInner","constant","paddingTop","paddingRight","paddingBottom","paddingLeft","positionNode","p","arguments","size","padding","paddingOuter","d3Treemap","startCase","useHierarchy","rawNodes","cloneDeep","map","join","pathComponents","rawNode","omit","treeDepth","treeHeight","getColor","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelTextColor","getParentLabelTextColor","nodesWithStyles","nodeWithStyles","useCustomLayerProps","getAnimatedNodeProps","getEndingAnimatedNodeProps","TreeMapNodes","nodesWithHandlers","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","event","createElement","handleMouseEnter","handleMouseMove","handleMouseLeave","handleClick","useMotionConfig","springConfig","config","transition","useTransition","keys","initial","enter","update","leave","immediate","key","InnerTreeMap","partialMargin","margin","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","layerById","includes","customLayerProps","boundDefs","bindDefs","SvgWrapper","layer","Fragment","TreeMap","renderWrapper","otherProps","Container","ResponsiveTreeMap","props","ResponsiveWrapper","InnerTreeMapHtml","TreeMapHtml","ResponsiveTreeMapHtml","findNodeUnderCursor","find","isCursorInRect","InnerTreeMapCanvas","canvasEl","useRef","useEffect","ctx","getContext","scale","fillStyle","fillRect","translate","forEach","strokeStyle","lineWidth","strokeRect","textAlign","textBaseline","font","fontSize","fontFamily","rotate","save","degreesToRadians","fillText","restore","handleMouseHover","e","getRelativeCursor","ref","TreeMapCanvas","ResponsiveTreeMapCanvas","baseClone","module","exports","CLONE_DEEP_FLAG"],"sourceRoot":""}