{"version":3,"file":"ba344a88e745567caeb0d1944109937757303e67-c81e65dfc8650bbc3856.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-force/src/link.js","webpack://nivo-website/../node_modules/d3-force/src/manyBody.js","webpack://nivo-website/../node_modules/d3-force/src/center.js","webpack://nivo-website/../src/NetworkNode.tsx","webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../src/NetworkNodeTooltip.tsx","webpack://nivo-website/../src/NetworkLink.tsx","webpack://nivo-website/../src/renderCanvasNode.ts","webpack://nivo-website/../src/renderCanvasLink.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/NetworkLinks.tsx","webpack://nivo-website/../src/NetworkNodes.tsx","webpack://nivo-website/../src/NetworkNodeAnnotations.tsx","webpack://nivo-website/../src/Network.tsx","webpack://nivo-website/../src/ResponsiveNetwork.tsx","webpack://nivo-website/../src/NetworkCanvas.tsx","webpack://nivo-website/../src/ResponsiveNetworkCanvas.tsx"],"sourcesContent":["import constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"node not found: \" + nodeId);\n  return node;\n}\n\nexport default function (links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      count,\n      bias,\n      random,\n      iterations = 1;\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle(random);\n        y = target.y + target.vy - source.y - source.vy || jiggle(random);\n        l = Math.sqrt(x * x + y * y);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l;\n        target.vx -= x * (b = bias[i]);\n        target.vy -= y * b;\n        source.vx += x * (b = 1 - b);\n        source.vy += y * b;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = new Map(nodes.map(function (d, i) {\n      return [id(d, i, nodes), d];\n    })),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function (_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.links = function (_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function (_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function (_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function (_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}","import { quadtree } from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\nimport { x, y } from \"./simulation.js\";\nexport default function () {\n  var nodes,\n      node,\n      random,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i,\n        n = nodes.length,\n        tree = quadtree(nodes, x, y).visitAfter(accumulate);\n\n    for (alpha = _, i = 0; i < n; ++i) {\n      node = nodes[i], tree.visit(apply);\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        node;\n    strengths = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n    }\n  }\n\n  function accumulate(quad) {\n    var strength = 0,\n        q,\n        c,\n        weight = 0,\n        x,\n        y,\n        i; // For internal nodes, accumulate forces from child quadrants.\n\n    if (quad.length) {\n      for (x = y = i = 0; i < 4; ++i) {\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n        }\n      }\n\n      quad.x = x / weight;\n      quad.y = y / weight;\n    } // For leaf nodes, accumulate forces from coincident quadrants.\n    else {\n      q = quad;\n      q.x = q.data.x;\n      q.y = q.data.y;\n\n      do {\n        strength += strengths[q.data.index];\n      } while (q = q.next);\n    }\n\n    quad.value = strength;\n  }\n\n  function apply(quad, x1, _, x2) {\n    if (!quad.value) return true;\n    var x = quad.x - node.x,\n        y = quad.y - node.y,\n        w = x2 - x1,\n        l = x * x + y * y; // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(random), l += x * x;\n        if (y === 0) y = jiggle(random), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * quad.value * alpha / l;\n        node.vy += y * quad.value * alpha / l;\n      }\n\n      return true;\n    } // Otherwise, process points directly.\n    else if (quad.length || l >= distanceMax2) return; // Limit forces for very close nodes; randomize direction if coincident.\n\n\n    if (quad.data !== node || quad.next) {\n      if (x === 0) x = jiggle(random), l += x * x;\n      if (y === 0) y = jiggle(random), l += y * y;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do {\n      if (quad.data !== node) {\n        w = strengths[quad.data.index] * alpha / l;\n        node.vx += x * w;\n        node.vy += y * w;\n      }\n    } while (quad = quad.next);\n  }\n\n  force.initialize = function (_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function (_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function (_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function (_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}","export default function (x, y) {\n  var nodes,\n      strength = 1;\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n\n  function force() {\n    var i,\n        n = nodes.length,\n        node,\n        sx = 0,\n        sy = 0;\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], sx += node.x, sy += node.y;\n    }\n\n    for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i) {\n      node = nodes[i], node.x -= sx, node.y -= sy;\n    }\n  }\n\n  force.initialize = function (_) {\n    nodes = _;\n  };\n\n  force.x = function (_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function (_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  return force;\n}","import { memo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { InputNode, NodeProps } from './types'\n\nconst NonMemoizedNetworkNode = <Node extends InputNode>({\n    node,\n    animated: animatedProps,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: NodeProps<Node>) => (\n    <animated.circle\n        data-testid={`node.${node.id}`}\n        transform={to([animatedProps.x, animatedProps.y, animatedProps.scale], (x, y, scale) => {\n            return `translate(${x},${y}) scale(${scale})`\n        })}\n        r={to([animatedProps.size], size => size / 2)}\n        fill={animatedProps.color}\n        strokeWidth={animatedProps.borderWidth}\n        stroke={animatedProps.borderColor}\n        opacity={animatedProps.opacity}\n        onClick={onClick ? event => onClick(node, event) : undefined}\n        onMouseEnter={onMouseEnter ? event => onMouseEnter(node, event) : undefined}\n        onMouseMove={onMouseMove ? event => onMouseMove(node, event) : undefined}\n        onMouseLeave={onMouseLeave ? event => onMouseLeave(node, event) : undefined}\n    />\n)\n\nexport const NetworkNode = memo(NonMemoizedNetworkNode) as typeof NonMemoizedNetworkNode\n","import { NetworkCommonProps, InputNode, LayerId, NetworkSvgProps, InputLink } from './types'\nimport { NetworkNode } from './NetworkNode'\nimport { renderCanvasNode } from './renderCanvasNode'\nimport { NetworkLink } from './NetworkLink'\nimport { renderCanvasLink } from './renderCanvasLink'\nimport { NetworkNodeTooltip } from './NetworkNodeTooltip'\n\nexport const commonDefaultProps: Omit<\n    NetworkCommonProps<InputNode, InputLink>,\n    | 'margin'\n    | 'theme'\n    | 'onClick'\n    | 'renderWrapper'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['links', 'nodes', 'annotations'],\n\n    linkDistance: 30,\n    centeringStrength: 1,\n    repulsivity: 10,\n    distanceMin: 1,\n    distanceMax: Infinity,\n    iterations: 120,\n\n    nodeSize: 12,\n    activeNodeSize: 18,\n    inactiveNodeSize: 8,\n    nodeColor: '#000000',\n    nodeBorderWidth: 0,\n    nodeBorderColor: { from: 'color' },\n\n    linkThickness: 1,\n    linkColor: { from: 'source.color' },\n\n    isInteractive: true,\n    defaultActiveNodeIds: [],\n    nodeTooltip: NetworkNodeTooltip,\n\n    annotations: [],\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n\n    role: 'img',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: NetworkNode as NonNullable<\n        NetworkSvgProps<InputNode, InputLink>['nodeComponent']\n    >,\n    linkComponent: NetworkLink as NonNullable<\n        NetworkSvgProps<InputNode, InputLink>['linkComponent']\n    >,\n    linkBlendMode: 'normal' as NonNullable<NetworkSvgProps<InputNode, InputLink>['linkBlendMode']>,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    renderNode: renderCanvasNode,\n    renderLink: renderCanvasLink,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { InputNode, NodeTooltipProps } from './types'\n\nexport const NetworkNodeTooltip = <Node extends InputNode>({ node }: NodeTooltipProps<Node>) => (\n    <BasicTooltip id={node.id} enableChip={true} color={node.color} />\n)\n","import { animated } from '@react-spring/web'\nimport { InputLink, InputNode, LinkProps } from './types'\nimport { memo } from 'react'\n\nconst NonMemoizedNetworkLink = <Node extends InputNode, Link extends InputLink>({\n    link,\n    animated: animatedProps,\n    blendMode,\n}: LinkProps<Node, Link>) => (\n    <animated.line\n        data-testid={`link.${link.id}`}\n        stroke={animatedProps.color}\n        style={{ mixBlendMode: blendMode }}\n        strokeWidth={link.thickness}\n        strokeLinecap=\"round\"\n        opacity={animatedProps.opacity}\n        x1={animatedProps.x1}\n        y1={animatedProps.y1}\n        x2={animatedProps.x2}\n        y2={animatedProps.y2}\n    />\n)\n\nexport const NetworkLink = memo(NonMemoizedNetworkLink) as typeof NonMemoizedNetworkLink\n","import { ComputedNode, InputNode } from './types'\n\nexport const renderCanvasNode = <Node extends InputNode>(\n    ctx: CanvasRenderingContext2D,\n    node: ComputedNode<Node>\n) => {\n    ctx.fillStyle = node.color\n    ctx.beginPath()\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n    ctx.fill()\n\n    if (node.borderWidth > 0) {\n        ctx.strokeStyle = node.borderColor\n        ctx.lineWidth = node.borderWidth\n        ctx.stroke()\n    }\n}\n","import { InputNode, ComputedLink, InputLink } from './types'\n\nexport const renderCanvasLink = <Node extends InputNode, Link extends InputLink>(\n    ctx: CanvasRenderingContext2D,\n    link: ComputedLink<Node, Link>\n) => {\n    ctx.strokeStyle = link.color\n    ctx.lineWidth = link.thickness\n\n    ctx.beginPath()\n    ctx.moveTo(link.source.x, link.source.y)\n    ctx.lineTo(link.target.x, link.target.y)\n    ctx.stroke()\n}\n","import { useState, useEffect, useMemo, useCallback } from 'react'\nimport { forceSimulation, forceManyBody, forceCenter, forceLink } from 'd3-force'\nimport { useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { AnnotationMatcher, useAnnotations } from '@nivo/annotations'\nimport { commonDefaultProps } from './defaults'\nimport {\n    InputLink,\n    InputNode,\n    NetworkCommonProps,\n    DerivedProp,\n    ComputedNode,\n    ComputedLink,\n    TransientNode,\n    TransientLink,\n} from './types'\n\nconst useDerivedProp = <Target, Output extends string | number>(\n    instruction: DerivedProp<Target, Output>\n) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useComputeForces = <Node extends InputNode, Link extends InputLink>({\n    linkDistance,\n    centeringStrength,\n    repulsivity,\n    distanceMin,\n    distanceMax,\n    center,\n}: {\n    linkDistance: NetworkCommonProps<Node, Link>['linkDistance']\n    centeringStrength: NetworkCommonProps<Node, Link>['centeringStrength']\n    repulsivity: NetworkCommonProps<Node, Link>['repulsivity']\n    distanceMin: NetworkCommonProps<Node, Link>['distanceMin']\n    distanceMax: NetworkCommonProps<Node, Link>['distanceMax']\n    center: [number, number]\n}) => {\n    const getLinkDistance = useDerivedProp<Link, number>(linkDistance)\n\n    const centerX = center[0]\n    const centerY = center[1]\n\n    return useMemo(() => {\n        const linkForce = forceLink<TransientNode<Node>, TransientLink<Node, Link>>()\n            .distance(link => getLinkDistance(link.data))\n            .strength(centeringStrength)\n\n        const chargeForce = forceManyBody()\n            .strength(-repulsivity)\n            .distanceMin(distanceMin)\n            .distanceMax(distanceMax)\n\n        const centerForce = forceCenter(centerX, centerY)\n\n        return { link: linkForce, charge: chargeForce, center: centerForce }\n    }, [\n        getLinkDistance,\n        centeringStrength,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        centerX,\n        centerY,\n    ])\n}\n\nconst useNodeStyle = <Node extends InputNode, Link extends InputLink>({\n    size,\n    activeSize,\n    inactiveSize,\n    color,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    activeNodeIds,\n}: {\n    size: NetworkCommonProps<Node, Link>['nodeSize']\n    activeSize: NetworkCommonProps<Node, Link>['activeNodeSize']\n    inactiveSize: NetworkCommonProps<Node, Link>['inactiveNodeSize']\n    color: NetworkCommonProps<Node, Link>['nodeColor']\n    borderWidth: NetworkCommonProps<Node, Link>['nodeBorderWidth']\n    borderColor: NetworkCommonProps<Node, Link>['nodeBorderColor']\n    isInteractive: NetworkCommonProps<Node, Link>['isInteractive']\n    activeNodeIds: string[]\n}) => {\n    const theme = useTheme()\n\n    const getSize = useDerivedProp(size)\n    const getColor = useDerivedProp(color)\n    const getBorderWidth = useDerivedProp(borderWidth)\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getNormalStyle = useCallback(\n        (node: TransientNode<Node>) => {\n            const color = getColor(node.data)\n\n            return {\n                size: getSize(node.data),\n                color,\n                borderWidth: getBorderWidth(node.data),\n                borderColor: getBorderColor({ ...node, color }),\n            }\n        },\n        [getSize, getColor, getBorderWidth, getBorderColor]\n    )\n\n    const getActiveSize = useDerivedProp(activeSize)\n    const getActiveStyle = useCallback(\n        (node: TransientNode<Node>) => {\n            const color = getColor(node.data)\n\n            return {\n                size: getActiveSize(node.data),\n                color,\n                borderWidth: getBorderWidth(node.data),\n                borderColor: getBorderColor({ ...node, color }),\n            }\n        },\n        [getActiveSize, getColor, getBorderWidth, getBorderColor]\n    )\n\n    const getInactiveSize = useDerivedProp(inactiveSize)\n    const getInactiveStyle = useCallback(\n        (node: TransientNode<Node>) => {\n            const color = getColor(node.data)\n\n            return {\n                size: getInactiveSize(node.data),\n                color,\n                borderWidth: getBorderWidth(node.data),\n                borderColor: getBorderColor({ ...node, color }),\n            }\n        },\n        [getInactiveSize, getColor, getBorderWidth, getBorderColor]\n    )\n\n    return useCallback(\n        (node: TransientNode<Node>) => {\n            if (!isInteractive || activeNodeIds.length === 0) return getNormalStyle(node)\n            if (activeNodeIds.includes(node.id)) return getActiveStyle(node)\n            return getInactiveStyle(node)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeNodeIds]\n    )\n}\n\nexport const useNetwork = <Node extends InputNode = InputNode, Link extends InputLink = InputLink>({\n    center,\n    nodes,\n    links,\n    linkDistance = commonDefaultProps.linkDistance,\n    centeringStrength = commonDefaultProps.centeringStrength,\n    repulsivity = commonDefaultProps.repulsivity,\n    distanceMin = commonDefaultProps.distanceMin,\n    distanceMax = commonDefaultProps.distanceMax,\n    iterations = commonDefaultProps.iterations,\n    nodeSize = commonDefaultProps.nodeSize,\n    activeNodeSize = commonDefaultProps.activeNodeSize,\n    inactiveNodeSize = commonDefaultProps.inactiveNodeSize,\n    nodeColor = commonDefaultProps.nodeColor,\n    nodeBorderWidth = commonDefaultProps.nodeBorderWidth,\n    nodeBorderColor = commonDefaultProps.nodeBorderColor,\n    linkThickness = commonDefaultProps.linkThickness,\n    linkColor = commonDefaultProps.linkColor,\n    isInteractive = commonDefaultProps.isInteractive,\n    defaultActiveNodeIds = commonDefaultProps.defaultActiveNodeIds,\n}: {\n    center: [number, number]\n    nodes: Node[]\n    links: Link[]\n    linkDistance?: NetworkCommonProps<Node, Link>['linkDistance']\n    centeringStrength?: NetworkCommonProps<Node, Link>['centeringStrength']\n    repulsivity?: NetworkCommonProps<Node, Link>['repulsivity']\n    distanceMin?: NetworkCommonProps<Node, Link>['distanceMin']\n    distanceMax?: NetworkCommonProps<Node, Link>['distanceMax']\n    iterations?: NetworkCommonProps<Node, Link>['iterations']\n    nodeSize?: NetworkCommonProps<Node, Link>['nodeSize']\n    activeNodeSize?: NetworkCommonProps<Node, Link>['activeNodeSize']\n    inactiveNodeSize?: NetworkCommonProps<Node, Link>['inactiveNodeSize']\n    nodeColor?: NetworkCommonProps<Node, Link>['nodeColor']\n    nodeBorderWidth?: NetworkCommonProps<Node, Link>['nodeBorderWidth']\n    nodeBorderColor?: NetworkCommonProps<Node, Link>['nodeBorderColor']\n    linkThickness?: NetworkCommonProps<Node, Link>['linkThickness']\n    linkColor?: NetworkCommonProps<Node, Link>['linkColor']\n    isInteractive?: NetworkCommonProps<Node, Link>['isInteractive']\n    defaultActiveNodeIds?: NetworkCommonProps<Node, Link>['defaultActiveNodeIds']\n}) => {\n    // we're using `null` instead of empty array so that we can dissociate\n    // initial rendering from updates when using transitions.\n    const [transientNodes, setTransientNodes] = useState<null | TransientNode<Node>[]>(null)\n    const [transientLinks, setTransientLinks] = useState<null | TransientLink<Node, Link>[]>(null)\n\n    const forces = useComputeForces<Node, Link>({\n        linkDistance,\n        centeringStrength,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        center,\n    })\n\n    useEffect(() => {\n        // copy the nodes & links to avoid mutating the original ones.\n        const _transientNodes: TransientNode<Node>[] = nodes.map(node => ({\n            id: node.id,\n            data: { ...node },\n            // the properties below are populated by D3, via mutations\n            index: 0,\n            x: 0,\n            y: 0,\n            vx: 0,\n            vy: 0,\n        }))\n        const _transientLinks: TransientLink<Node, Link>[] = links.map(link => ({\n            data: { ...link },\n            // populated by D3, via mutation\n            index: 0,\n            // replace ids with objects, otherwise D3 does this automatically\n            // which is a bit annoying with typings because then `source` & `target`\n            // can be either strings (before the simulation) or an objects (after).\n            source: _transientNodes.find(node => node.id === link.source)!,\n            target: _transientNodes.find(node => node.id === link.target)!,\n        }))\n\n        const simulation = forceSimulation(_transientNodes)\n            .force('link', forces.link.links(_transientLinks))\n            .force('charge', forces.charge)\n            .force('center', forces.center)\n            .stop()\n\n        // this will set `index`, `x`, `y`, `vx`, `vy` for each node.\n        simulation.tick(iterations)\n\n        setTransientNodes(_transientNodes)\n        setTransientLinks(_transientLinks)\n\n        return () => {\n            simulation.stop()\n        }\n    }, [nodes, links, forces, iterations, setTransientNodes, setTransientLinks])\n\n    const [activeNodeIds, setActiveNodeIds] = useState<string[]>(defaultActiveNodeIds)\n\n    const getNodeStyle = useNodeStyle<Node, Link>({\n        size: nodeSize,\n        activeSize: activeNodeSize,\n        inactiveSize: inactiveNodeSize,\n        color: nodeColor,\n        borderWidth: nodeBorderWidth,\n        borderColor: nodeBorderColor,\n        isInteractive,\n        activeNodeIds,\n    })\n    const computedNodes: ComputedNode<Node>[] | null = useMemo(() => {\n        if (transientNodes === null) return null\n\n        return transientNodes.map(node => ({\n            ...node,\n            ...getNodeStyle(node),\n        }))\n    }, [transientNodes, getNodeStyle])\n\n    const theme = useTheme()\n    const getLinkThickness = useDerivedProp(linkThickness)\n    const getLinkColor = useInheritedColor(linkColor, theme)\n\n    const computedLinks: ComputedLink<Node, Link>[] | null = useMemo(() => {\n        if (transientLinks === null || computedNodes === null) return null\n\n        return transientLinks.map(({ index, ...link }) => {\n            const linkWithComputedNodes: Omit<ComputedLink<Node, Link>, 'color' | 'thickness'> = {\n                id: `${link.source.id}.${link.target.id}`,\n                data: link.data,\n                index,\n                source: computedNodes.find(node => node.id === link.source.id)!,\n                target: computedNodes.find(node => node.id === link.target.id)!,\n            }\n\n            return {\n                ...linkWithComputedNodes,\n                thickness: getLinkThickness(linkWithComputedNodes),\n                color: getLinkColor(linkWithComputedNodes),\n            }\n        })\n    }, [transientLinks, computedNodes, getLinkThickness, getLinkColor])\n\n    return {\n        nodes: computedNodes,\n        links: computedLinks,\n        activeNodeIds,\n        setActiveNodeIds,\n    }\n}\n\nconst getNodeAnnotationPosition = <Node extends InputNode>(node: ComputedNode<Node>) => ({\n    x: node.x,\n    y: node.y,\n})\n\nconst getNodeAnnotationDimensions = <Node extends InputNode>(node: ComputedNode<Node>) => ({\n    size: node.size,\n    width: node.size,\n    height: node.size,\n})\n\nexport const useNodeAnnotations = <Node extends InputNode>(\n    nodes: ComputedNode<Node>[],\n    annotations: AnnotationMatcher<ComputedNode<Node>>[]\n) =>\n    useAnnotations<ComputedNode<Node>>({\n        data: nodes,\n        annotations,\n        getPosition: getNodeAnnotationPosition,\n        getDimensions: getNodeAnnotationDimensions,\n    })\n","import { createElement, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { ComputedLink, InputLink, InputNode, LinkComponent, NetworkSvgProps } from './types'\n\ninterface NetworkLinksProps<Node extends InputNode, Link extends InputLink> {\n    links: ComputedLink<Node, Link>[]\n    linkComponent: LinkComponent<Node, Link>\n    blendMode: NonNullable<NetworkSvgProps<Node, Link>['linkBlendMode']>\n}\n\nconst getEnterTransition =\n    <Node extends InputNode, Link extends InputLink>() =>\n    (link: ComputedLink<Node, Link>) => ({\n        x1: link.source.x,\n        y1: link.source.y,\n        x2: link.source.x,\n        y2: link.source.y,\n        color: link.color,\n        opacity: 0,\n    })\n\nconst getRegularTransition =\n    <Node extends InputNode, Link extends InputLink>() =>\n    (link: ComputedLink<Node, Link>) => ({\n        x1: link.source.x,\n        y1: link.source.y,\n        x2: link.target.x,\n        y2: link.target.y,\n        color: link.color,\n        opacity: 1,\n    })\n\nexport const NetworkLinks = <Node extends InputNode, Link extends InputLink>({\n    links,\n    linkComponent,\n    blendMode,\n}: NetworkLinksProps<Node, Link>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const [enterTransition, regularTransition] = useMemo(\n        () => [getEnterTransition<Node, Link>(), getRegularTransition<Node, Link>()],\n        []\n    )\n\n    const transition = useTransition<\n        ComputedLink<Node, Link>,\n        {\n            x1: number\n            y1: number\n            x2: number\n            y2: number\n            color: string\n            opacity: number\n        }\n    >(links, {\n        keys: link => link.id,\n        initial: regularTransition,\n        from: enterTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        expires: true,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, link) => {\n                return createElement(linkComponent, {\n                    key: link.id,\n                    link,\n                    animated: transitionProps,\n                    blendMode,\n                })\n            })}\n        </>\n    )\n}\n","import { createElement, useCallback, useMemo, MouseEvent } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { InputNode, ComputedNode, NodeAnimatedProps, NetworkSvgProps, InputLink } from './types'\n\ninterface NetworkNodesProps<Node extends InputNode, Link extends InputLink> {\n    nodes: ComputedNode<Node>[]\n    nodeComponent: NonNullable<NetworkSvgProps<Node, Link>['nodeComponent']>\n    onMouseEnter: NetworkSvgProps<Node, Link>['onMouseEnter']\n    onMouseMove: NetworkSvgProps<Node, Link>['onMouseMove']\n    onMouseLeave: NetworkSvgProps<Node, Link>['onMouseLeave']\n    onClick: NetworkSvgProps<Node, Link>['onClick']\n    tooltip: NonNullable<NetworkSvgProps<Node, Link>['nodeTooltip']>\n    setActiveNodeIds: (nodeIds: string[]) => void\n    isInteractive: NonNullable<NetworkSvgProps<Node, Link>['isInteractive']>\n}\n\nconst getEnterTransition =\n    <Node extends InputNode>() =>\n    (node: ComputedNode<Node>) => ({\n        x: node.x,\n        y: node.y,\n        size: node.size,\n        color: node.color,\n        borderWidth: node.borderWidth,\n        borderColor: node.borderColor,\n        scale: 0,\n        opacity: 0,\n    })\n\nconst getRegularTransition =\n    <N extends InputNode>() =>\n    (node: ComputedNode<N>) => ({\n        x: node.x,\n        y: node.y,\n        size: node.size,\n        color: node.color,\n        borderWidth: node.borderWidth,\n        borderColor: node.borderColor,\n        scale: 1,\n        opacity: 1,\n    })\n\nconst getExitTransition =\n    <Node extends InputNode>() =>\n    (node: ComputedNode<Node>) => ({\n        x: node.x,\n        y: node.y,\n        size: node.size,\n        color: node.color,\n        borderWidth: node.borderWidth,\n        borderColor: node.borderColor,\n        scale: 0,\n        opacity: 0,\n    })\n\nexport const NetworkNodes = <Node extends InputNode, Link extends InputLink>({\n    nodes,\n    nodeComponent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    setActiveNodeIds,\n    isInteractive,\n}: NetworkNodesProps<Node, Link>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const [enterTransition, regularTransition, exitTransition] = useMemo(\n        () => [getEnterTransition<Node>(), getRegularTransition<Node>(), getExitTransition<Node>()],\n        []\n    )\n\n    const transition = useTransition<ComputedNode<Node>, NodeAnimatedProps>(nodes, {\n        keys: node => node.id,\n        initial: regularTransition,\n        from: enterTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: exitTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node: ComputedNode<Node>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            setActiveNodeIds([node.id])\n            onMouseEnter?.(node, event)\n        },\n        [showTooltipFromEvent, tooltip, setActiveNodeIds, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ComputedNode<Node>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ComputedNode<Node>, event: MouseEvent) => {\n            hideTooltip()\n            setActiveNodeIds([])\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, setActiveNodeIds, onMouseLeave]\n    )\n\n    return (\n        <>\n            {transition((transitionProps, node) =>\n                createElement(nodeComponent, {\n                    key: node.id,\n                    node,\n                    animated: transitionProps,\n                    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n                    onMouseMove: isInteractive ? handleMouseMove : undefined,\n                    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n                    onClick: isInteractive ? onClick : undefined,\n                })\n            )}\n        </>\n    )\n}\n","import { Annotation } from '@nivo/annotations'\nimport { ComputedNode, InputLink, InputNode, NetworkSvgProps } from './types'\nimport { useNodeAnnotations } from './hooks'\n\ninterface NetworkNodeAnnotationsProps<Node extends InputNode, Link extends InputLink> {\n    nodes: ComputedNode<Node>[]\n    annotations: NonNullable<NetworkSvgProps<Node, Link>['annotations']>\n}\n\nexport const NetworkNodeAnnotations = <Node extends InputNode, Link extends InputLink>({\n    nodes,\n    annotations,\n}: NetworkNodeAnnotationsProps<Node, Link>) => {\n    const boundAnnotations = useNodeAnnotations<Node>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { svgDefaultProps } from './defaults'\nimport { useNetwork } from './hooks'\nimport { NetworkLinks } from './NetworkLinks'\nimport { NetworkNodes } from './NetworkNodes'\nimport { NetworkNodeAnnotations } from './NetworkNodeAnnotations'\nimport {\n    InputNode,\n    LayerId,\n    NodeTooltip,\n    NetworkSvgProps,\n    InputLink,\n    CustomLayerProps,\n} from './types'\n\ntype InnerNetworkProps<Node extends InputNode, Link extends InputLink> = Omit<\n    NetworkSvgProps<Node, Link>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerNetwork = <Node extends InputNode, Link extends InputLink>({\n    width,\n    height,\n    margin: partialMargin,\n\n    data: { nodes: rawNodes, links: rawLinks },\n\n    linkDistance = svgDefaultProps.linkDistance,\n    centeringStrength = svgDefaultProps.centeringStrength,\n    repulsivity = svgDefaultProps.repulsivity,\n    distanceMin = svgDefaultProps.distanceMin,\n    distanceMax = svgDefaultProps.distanceMax,\n    iterations = svgDefaultProps.iterations,\n\n    layers = svgDefaultProps.layers,\n\n    nodeComponent = svgDefaultProps.nodeComponent as NonNullable<\n        NetworkSvgProps<Node, Link>['nodeComponent']\n    >,\n    nodeSize = svgDefaultProps.nodeSize,\n    activeNodeSize = svgDefaultProps.activeNodeSize,\n    inactiveNodeSize = svgDefaultProps.inactiveNodeSize,\n    nodeColor = svgDefaultProps.nodeColor,\n    nodeBorderWidth = svgDefaultProps.nodeBorderWidth,\n    nodeBorderColor = svgDefaultProps.nodeBorderColor,\n\n    linkComponent = svgDefaultProps.linkComponent as NonNullable<\n        NetworkSvgProps<Node, Link>['linkComponent']\n    >,\n    linkThickness = svgDefaultProps.linkThickness,\n    linkColor = svgDefaultProps.linkColor,\n    linkBlendMode = svgDefaultProps.linkBlendMode,\n\n    annotations = svgDefaultProps.annotations as NonNullable<\n        NetworkSvgProps<Node, Link>['annotations']\n    >,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    defaultActiveNodeIds = svgDefaultProps.defaultActiveNodeIds,\n    nodeTooltip = svgDefaultProps.nodeTooltip as NodeTooltip<Node>,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerNetworkProps<Node, Link>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, links, activeNodeIds, setActiveNodeIds } = useNetwork<Node, Link>({\n        center: [innerWidth / 2, innerHeight / 2],\n        nodes: rawNodes,\n        links: rawLinks,\n        linkDistance,\n        centeringStrength,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        nodeBorderWidth,\n        nodeBorderColor,\n        linkThickness,\n        linkColor,\n        isInteractive,\n        defaultActiveNodeIds,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        links: null,\n        nodes: null,\n        annotations: null,\n    }\n\n    if (layers.includes('links') && links !== null) {\n        layerById.links = (\n            <NetworkLinks<Node, Link>\n                key=\"links\"\n                links={links}\n                linkComponent={linkComponent}\n                blendMode={linkBlendMode}\n            />\n        )\n    }\n\n    if (layers.includes('nodes') && nodes !== null) {\n        layerById.nodes = (\n            <NetworkNodes<Node, Link>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={nodeTooltip}\n                setActiveNodeIds={setActiveNodeIds}\n                isInteractive={isInteractive}\n            />\n        )\n    }\n\n    if (layers.includes('annotations') && nodes !== null) {\n        layerById.annotations = (\n            <NetworkNodeAnnotations<Node, Link>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    const customLayerProps: CustomLayerProps<Node, Link> = useMemo(\n        () => ({\n            nodes: nodes || [],\n            links: links || [],\n            activeNodeIds,\n            setActiveNodeIds,\n        }),\n        [nodes, links, activeNodeIds, setActiveNodeIds]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Network = <Node extends InputNode = InputNode, Link extends InputLink = InputLink>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: NetworkSvgProps<Node, Link>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerNetwork<Node, Link> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { InputLink, InputNode, NetworkSvgProps } from './types'\nimport { Network } from './Network'\n\nexport const ResponsiveNetwork = <\n    Node extends InputNode = InputNode,\n    Link extends InputLink = InputLink\n>(\n    props: Omit<NetworkSvgProps<Node, Link>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Network<Node, Link> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import {\n    ForwardedRef,\n    forwardRef,\n    useCallback,\n    useRef,\n    useEffect,\n    createElement,\n    MouseEvent,\n    useMemo,\n} from 'react'\nimport { getDistance, getRelativeCursor, Container, useDimensions, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useComputedAnnotations, renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { canvasDefaultProps } from './defaults'\nimport { useNetwork, useNodeAnnotations } from './hooks'\nimport {\n    NetworkCanvasProps,\n    InputNode,\n    ComputedNode,\n    NodeTooltip,\n    InputLink,\n    NetworkSvgProps,\n    CustomLayerProps,\n} from './types'\n\ntype InnerNetworkCanvasProps<Node extends InputNode, Link extends InputLink> = Omit<\n    NetworkCanvasProps<Node, Link>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst InnerNetworkCanvas = <Node extends InputNode, Link extends InputLink>({\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    data: { nodes: rawNodes, links: rawLinks },\n\n    linkDistance = canvasDefaultProps.linkDistance,\n    centeringStrength = canvasDefaultProps.centeringStrength,\n    repulsivity = canvasDefaultProps.repulsivity,\n    distanceMin = canvasDefaultProps.distanceMin,\n    distanceMax = canvasDefaultProps.distanceMax,\n    iterations = canvasDefaultProps.iterations,\n\n    layers = canvasDefaultProps.layers,\n\n    renderNode = canvasDefaultProps.renderNode,\n    nodeSize = canvasDefaultProps.nodeSize,\n    activeNodeSize = canvasDefaultProps.activeNodeSize,\n    inactiveNodeSize = canvasDefaultProps.inactiveNodeSize,\n    nodeColor = canvasDefaultProps.nodeColor,\n    nodeBorderWidth = canvasDefaultProps.nodeBorderWidth,\n    nodeBorderColor = canvasDefaultProps.nodeBorderColor,\n\n    renderLink = canvasDefaultProps.renderLink,\n    linkThickness = canvasDefaultProps.linkThickness,\n    linkColor = canvasDefaultProps.linkColor,\n\n    annotations = canvasDefaultProps.annotations as NonNullable<\n        NetworkSvgProps<Node, Link>['annotations']\n    >,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    defaultActiveNodeIds = canvasDefaultProps.defaultActiveNodeIds,\n    nodeTooltip = canvasDefaultProps.nodeTooltip as NodeTooltip<Node>,\n    onClick,\n    canvasRef,\n}: InnerNetworkCanvasProps<Node, Link>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, links, activeNodeIds, setActiveNodeIds } = useNetwork<Node, Link>({\n        center: [innerWidth / 2, innerHeight / 2],\n        nodes: rawNodes,\n        links: rawLinks,\n        linkDistance,\n        centeringStrength,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        nodeBorderWidth,\n        nodeBorderColor,\n        linkThickness,\n        linkColor,\n        isInteractive,\n        defaultActiveNodeIds,\n    })\n\n    const boundAnnotations = useNodeAnnotations<Node>(nodes!, annotations)\n    const computedAnnotations = useComputedAnnotations<ComputedNode<Node>>({\n        annotations: boundAnnotations,\n    })\n\n    const customLayerProps: CustomLayerProps<Node, Link> = useMemo(\n        () => ({\n            nodes: nodes || [],\n            links: links || [],\n            activeNodeIds,\n            setActiveNodeIds,\n        }),\n        [nodes, links, activeNodeIds, setActiveNodeIds]\n    )\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'links' && links !== null) {\n                links.forEach(link => renderLink(ctx, link))\n            } else if (layer === 'nodes' && nodes !== null) {\n                nodes.forEach(node => renderNode(ctx, node))\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas<ComputedNode<Node>>(ctx, {\n                    annotations: computedAnnotations as any,\n                    theme,\n                })\n            } else if (typeof layer === 'function' && nodes !== null && links !== null) {\n                layer(ctx, customLayerProps)\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        margin.left,\n        margin.top,\n        pixelRatio,\n        layers,\n        theme,\n        nodes,\n        links,\n        renderNode,\n        renderLink,\n        computedAnnotations,\n        customLayerProps,\n    ])\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: MouseEvent) => {\n            if (!canvasEl.current || nodes === null) return undefined\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n            return nodes.find(node => {\n                const distanceFromNode = getDistance(\n                    node.x,\n                    node.y,\n                    x - margin.left,\n                    y - margin.top\n                )\n                return distanceFromNode <= node.size / 2\n            })\n        },\n        [canvasEl, margin, nodes]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                showTooltipFromEvent(createElement(nodeTooltip, { node }), event)\n                setActiveNodeIds([node.id])\n            } else {\n                hideTooltip()\n                setActiveNodeIds([])\n            }\n        },\n        [getNodeFromMouseEvent, showTooltipFromEvent, nodeTooltip, hideTooltip, setActiveNodeIds]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setActiveNodeIds([])\n    }, [hideTooltip, setActiveNodeIds])\n\n    const handleClick = useCallback(\n        (event: MouseEvent) => {\n            if (!onClick) return\n\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n        />\n    )\n}\n\nexport const NetworkCanvas = forwardRef(\n    <Node extends InputNode = InputNode, Link extends InputLink = InputLink>(\n        {\n            theme,\n            isInteractive = canvasDefaultProps.isInteractive,\n            animate = canvasDefaultProps.animate,\n            motionConfig = canvasDefaultProps.motionConfig,\n            renderWrapper,\n            ...otherProps\n        }: NetworkCanvasProps<Node, Link>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n            <InnerNetworkCanvas<Node, Link>\n                isInteractive={isInteractive}\n                {...otherProps}\n                canvasRef={ref}\n            />\n        </Container>\n    )\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { NetworkCanvasProps, InputNode, InputLink } from './types'\nimport { NetworkCanvas } from './NetworkCanvas'\n\nexport const ResponsiveNetworkCanvas = forwardRef(function ResponsiveBarCanvas<\n    Node extends InputNode = InputNode,\n    Link extends InputLink = InputLink\n>(\n    props: Omit<NetworkCanvasProps<Node, Link>, 'height' | 'width'>,\n    ref: ForwardedRef<HTMLCanvasElement>\n) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <NetworkCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<\n                        NetworkCanvasProps<InputNode, InputLink>,\n                        'height' | 'width'\n                    >)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],"names":["index","d","find","nodeById","nodeId","node","get","Error","links","strengths","distances","nodes","count","bias","random","id","strength","link","Math","min","source","target","distance","constant","iterations","force","alpha","k","n","length","x","y","l","b","i","vx","jiggle","vy","sqrt","initialize","m","Map","map","Array","initializeStrength","initializeDistance","_nodes","_random","_","arguments","distanceMin2","distanceMax2","Infinity","theta2","tree","quadtree","visitAfter","accumulate","visit","apply","quad","q","c","weight","abs","value","data","next","x1","x2","w","distanceMin","distanceMax","theta","sx","sy","commonDefaultProps","layers","linkDistance","centeringStrength","repulsivity","nodeSize","activeNodeSize","inactiveNodeSize","nodeColor","nodeBorderWidth","nodeBorderColor","from","linkThickness","linkColor","isInteractive","defaultActiveNodeIds","nodeTooltip","_jsx","BasicTooltip","enableChip","color","annotations","animate","motionConfig","role","svgDefaultProps","nodeComponent","memo","animatedProps","animated","onClick","onMouseEnter","onMouseMove","onMouseLeave","circle","transform","to","scale","r","size","fill","strokeWidth","borderWidth","stroke","borderColor","opacity","e","event","linkComponent","blendMode","line","style","mixBlendMode","thickness","strokeLinecap","y1","y2","linkBlendMode","canvasDefaultProps","renderNode","ctx","fillStyle","beginPath","arc","PI","strokeStyle","lineWidth","renderLink","moveTo","lineTo","pixelRatio","window","devicePixelRatio","useDerivedProp","instruction","useMemo","useNetwork","center","useState","transientNodes","setTransientNodes","transientLinks","setTransientLinks","forces","getLinkDistance","centerX","centerY","forceLink","charge","forceManyBody","forceCenter","useEffect","_transientNodes","_transientLinks","simulation","forceSimulation","stop","tick","activeNodeIds","setActiveNodeIds","getNodeStyle","activeSize","inactiveSize","theme","useTheme","getSize","getColor","getBorderWidth","getBorderColor","useInheritedColor","getNormalStyle","useCallback","getActiveSize","getActiveStyle","getInactiveSize","getInactiveStyle","includes","computedNodes","getLinkThickness","getLinkColor","computedLinks","linkWithComputedNodes","getNodeAnnotationPosition","getNodeAnnotationDimensions","width","height","useNodeAnnotations","useAnnotations","getPosition","getDimensions","NetworkLinks","useMotionConfig","springConfig","config","enterTransition","regularTransition","transition","useTransition","keys","initial","enter","update","expires","immediate","transitionProps","createElement","key","NetworkNodes","tooltip","exitTransition","leave","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","handleMouseMove","handleMouseLeave","NetworkNodeAnnotations","boundAnnotations","annotation","Annotation","InnerNetwork","partialMargin","margin","rawNodes","rawLinks","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","layerById","customLayerProps","SvgWrapper","layer","Fragment","Network","renderWrapper","otherProps","Container","ResponsiveNetwork","props","ResponsiveWrapper","InnerNetworkCanvas","canvasRef","canvasEl","useRef","computedAnnotations","useComputedAnnotations","current","getContext","background","fillRect","translate","left","top","forEach","renderAnnotationsToCanvas","getNodeFromMouseEvent","getRelativeCursor","getDistance","handleMouseHover","handleClick","ref","canvas","cursor","NetworkCanvas","forwardRef","ResponsiveNetworkCanvas"],"sourceRoot":""}