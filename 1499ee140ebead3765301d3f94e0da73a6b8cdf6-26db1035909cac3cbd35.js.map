{"version":3,"file":"1499ee140ebead3765301d3f94e0da73a6b8cdf6-26db1035909cac3cbd35.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-force/src/collide.js","webpack://nivo-website/../node_modules/d3-force/src/x.js","webpack://nivo-website/../node_modules/d3-force/src/y.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://nivo-website/../src/SwarmPlotTooltip.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/Circles.tsx","webpack://nivo-website/../src/CircleSvg.tsx","webpack://nivo-website/../src/SwarmPlotAnnotations.tsx","webpack://nivo-website/../src/SwarmPlot.tsx","webpack://nivo-website/../src/ResponsiveSwarmPlot.tsx","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://nivo-website/../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://nivo-website/../src/SwarmPlotCanvas.tsx","webpack://nivo-website/../src/ResponsiveSwarmPlotCanvas.tsx"],"sourcesContent":["import { quadtree } from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nexport default function (radius) {\n  var nodes,\n      radii,\n      random,\n      strength = 1,\n      iterations = 1;\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i,\n        n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data,\n          rj = quad.r,\n          r = ri + rj;\n\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n\n          if (l < r * r) {\n            if (x === 0) x = jiggle(random), l += x * x;\n            if (y === 0) y = jiggle(random), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n\n        return;\n      }\n\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        node;\n    radii = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n    }\n  }\n\n  force.initialize = function (_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.iterations = function (_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}","import constant from \"./constant.js\";\nexport default function (x) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      xz;\n  if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length;\n    strengths = new Array(n);\n    xz = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function (_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n  };\n\n  return force;\n}","import constant from \"./constant.js\";\nexport default function (y) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      yz;\n  if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length;\n    strengths = new Array(n);\n    yz = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function (_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n  };\n\n  return force;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const SwarmPlotTooltip = <RawDatum,>({\n    id,\n    formattedValue,\n    color,\n}: ComputedDatum<RawDatum>) => (\n    <BasicTooltip id={id} value={formattedValue} enableChip={true} color={color} />\n)\n","import { ScaleLinearSpec } from '@nivo/scales'\nimport { SwarmPlotLayerId } from './types'\nimport { SwarmPlotTooltip } from './SwarmPlotTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    valueScale: { type: 'linear', min: 0, max: 'auto' } as ScaleLinearSpec,\n    groupBy: 'group',\n    size: 6,\n    spacing: 2,\n    layout: 'vertical' as const,\n    gap: 0,\n    forceStrength: 1,\n    simulationIterations: 120,\n    colors: { scheme: 'nivo' },\n    colorBy: 'group',\n    borderWidth: 0,\n    borderColor: 'rgba(0, 0, 0, 0)',\n    layers: ['grid', 'axes', 'circles', 'annotations', 'mesh'] as SwarmPlotLayerId[],\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisRight: {},\n    axisBottom: {},\n    axisLeft: {},\n    isInteractive: true,\n    useMesh: false,\n    debugMesh: false,\n    tooltip: SwarmPlotTooltip,\n    animate: true,\n    motionConfig: 'gentle',\n    annotations: [],\n    role: 'img',\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport isString from 'lodash/isString'\nimport get from 'lodash/get'\nimport { scaleLinear, ScaleOrdinal, scaleOrdinal } from 'd3-scale'\nimport { forceSimulation, forceX, forceY, forceCollide, ForceX, ForceY } from 'd3-force'\nimport {\n    computeScale,\n    createDateNormalizer,\n    generateSeriesAxis,\n    ScaleLinear,\n    ScaleLinearSpec,\n    ScaleTime,\n    ScaleTimeSpec,\n} from '@nivo/scales'\nimport { ComputedDatum, PreSimulationDatum, SizeSpec, SimulationForces } from './types'\n\nconst getParsedValue = (scaleSpec: ScaleLinearSpec | ScaleTimeSpec) => {\n    if (scaleSpec.type === 'time' && scaleSpec.format !== 'native') {\n        return createDateNormalizer(scaleSpec) as <T>(value: T) => T\n    }\n\n    return <T>(value: T) => value\n}\n\nexport const computeOrdinalScale = ({\n    width,\n    height,\n    axis,\n    groups,\n    gap,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    groups: string[]\n    gap: number\n}) => {\n    if (!Array.isArray(groups) || groups.length === 0) {\n        throw new Error(`'groups' should be an array containing at least one item`)\n    }\n\n    const groupCount = groups.length\n\n    let groupSize: number\n    if (axis === 'x') {\n        groupSize = (height - gap * (groupCount - 1)) / groupCount\n    } else if (axis === 'y') {\n        groupSize = (width - gap * (groupCount - 1)) / groupCount\n    }\n\n    const range = groups.map((_, i) => i * (groupSize + gap) + groupSize / 2)\n\n    return scaleOrdinal(range).domain(groups)\n}\n\nexport const computeValueScale = <RawDatum>({\n    width,\n    height,\n    axis,\n    getValue,\n    scale,\n    data,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    getValue: (datum: RawDatum) => number | Date\n    scale: ScaleLinearSpec | ScaleTimeSpec\n    data: RawDatum[]\n}) => {\n    const values = data.map(getValue)\n\n    if (scale.type === 'time') {\n        const series = [\n            { data: values.map(value => ({ data: { x: null, y: null, [axis]: value } })) },\n        ]\n        const axes = generateSeriesAxis(series, axis, scale)\n\n        return computeScale(scale, axes, axis === 'x' ? width : height, axis) as ScaleTime<\n            Date | string\n        >\n    }\n\n    const min = Math.min(...(values as number[]))\n    const max = Math.max(...(values as number[]))\n\n    return computeScale(\n        scale,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    ) as ScaleLinear<number>\n}\n\nexport const getSizeGenerator = <RawDatum>(size: SizeSpec<RawDatum>) => {\n    // user defined size function\n    if (typeof size === 'function') {\n        return size\n    }\n\n    // static size\n    if (isNumber(size)) {\n        return () => size\n    }\n\n    // dynamic size based on config\n    if (isPlainObject(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'Size is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'Size is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'Size is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return (d: RawDatum) => sizeScale(get(d, size.key))\n    }\n\n    throw new Error('Size is invalid, it should be either a function, a number or an object')\n}\n\nexport const computeForces = <RawDatum>({\n    axis,\n    valueScale,\n    ordinalScale,\n    spacing,\n    forceStrength,\n}: {\n    axis: 'x' | 'y'\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    ordinalScale: ScaleOrdinal<string, number>\n    spacing: number\n    forceStrength: number\n}): SimulationForces<RawDatum> => {\n    const collisionForce = forceCollide<PreSimulationDatum<RawDatum>>(d => d.size / 2 + spacing / 2)\n\n    let xForce: ForceX<PreSimulationDatum<RawDatum>>\n    let yForce: ForceY<PreSimulationDatum<RawDatum>>\n    if (axis === 'x') {\n        xForce = forceX<PreSimulationDatum<RawDatum>>(d => valueScale(d.value)).strength(\n            forceStrength\n        )\n        yForce = forceY<PreSimulationDatum<RawDatum>>(d => ordinalScale(d.group))\n    } else if (axis === 'y') {\n        xForce = forceX<PreSimulationDatum<RawDatum>>(d => ordinalScale(d.group))\n        yForce = forceY<PreSimulationDatum<RawDatum>>(d => valueScale(d.value)).strength(\n            forceStrength\n        )\n    } else {\n        throw new Error(`Invalid axis provided: ${axis}`)\n    }\n\n    return { x: xForce, y: yForce, collision: collisionForce }\n}\n\nexport const computeNodes = <RawDatum>({\n    data,\n    getId,\n    layout,\n    getValue,\n    valueScale,\n    getGroup,\n    ordinalScale,\n    getSize,\n    forces,\n    simulationIterations,\n    valueScaleConfig,\n}: {\n    data: RawDatum[]\n    getId: (datum: RawDatum) => string\n    layout: 'vertical' | 'horizontal'\n    getValue: (datum: RawDatum) => number | Date\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    getGroup: (datum: RawDatum) => string\n    ordinalScale: ScaleOrdinal<string, number>\n    getSize: (datum: RawDatum) => number\n    forces: SimulationForces<RawDatum>\n    simulationIterations: number\n    valueScaleConfig: ScaleLinearSpec | ScaleTimeSpec\n}) => {\n    const config = {\n        horizontal: ['x', 'y'],\n        vertical: ['y', 'x'],\n    }\n\n    const parseValue = getParsedValue(valueScaleConfig)\n\n    const simulatedNodes: PreSimulationDatum<RawDatum>[] = data.map(d => ({\n        id: getId(d),\n        group: getGroup(d),\n        value: parseValue(getValue(d)),\n        size: getSize(d),\n        data: { ...d },\n    }))\n\n    const simulation = forceSimulation<PreSimulationDatum<RawDatum>>(simulatedNodes)\n        .force('x', forces.x)\n        .force('y', forces.y)\n        .force('collide', forces.collision)\n        .stop()\n\n    simulation.tick(simulationIterations)\n\n    return {\n        [`${config[layout][0]}Scale`]: valueScale,\n        [`${config[layout][1]}Scale`]: ordinalScale,\n        nodes: simulation.nodes() as ComputedDatum<RawDatum>[],\n    }\n}\n","import { useCallback, useMemo } from 'react'\nimport { ScaleOrdinal } from 'd3-scale'\nimport { usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { AnnotationMatcher, useAnnotations } from '@nivo/annotations'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ScaleLinear, ScaleLinearSpec, ScaleTime, ScaleTimeSpec } from '@nivo/scales'\nimport {\n    computeValueScale,\n    computeOrdinalScale,\n    getSizeGenerator,\n    computeForces,\n    computeNodes,\n} from './compute'\nimport {\n    SwarmPlotCommonProps,\n    ComputedDatum,\n    SizeSpec,\n    SwarmPlotCustomLayerProps,\n    MouseHandlers,\n} from './types'\n\nexport const useValueScale = <RawDatum>({\n    width,\n    height,\n    axis,\n    getValue,\n    scale,\n    data,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    getValue: (datum: RawDatum) => number | Date\n    scale: ScaleLinearSpec | ScaleTimeSpec\n    data: RawDatum[]\n}) =>\n    useMemo(\n        () =>\n            computeValueScale<RawDatum>({\n                width,\n                height,\n                axis,\n                getValue,\n                scale,\n                data,\n            }),\n        [width, height, axis, getValue, scale, data]\n    )\n\nexport const useOrdinalScale = ({\n    width,\n    height,\n    axis,\n    groups,\n    gap,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    groups: string[]\n    gap: number\n}) =>\n    useMemo(\n        () => computeOrdinalScale({ width, height, axis, groups, gap }),\n        [width, height, axis, groups, gap]\n    )\n\nconst useSize = <RawDatum>(size: SizeSpec<RawDatum>) =>\n    useMemo(() => getSizeGenerator<RawDatum>(size), [size])\n\nexport const useForces = <RawDatum>({\n    axis,\n    valueScale,\n    ordinalScale,\n    spacing,\n    forceStrength,\n}: {\n    axis: 'x' | 'y'\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    ordinalScale: ScaleOrdinal<string, number>\n    spacing: number\n    forceStrength: number\n}) =>\n    useMemo(\n        () =>\n            computeForces<RawDatum>({\n                axis,\n                valueScale,\n                ordinalScale,\n                spacing,\n                forceStrength,\n            }),\n        [axis, valueScale, ordinalScale, spacing, forceStrength]\n    )\n\nexport const useSwarmPlot = <RawDatum>({\n    data,\n    width,\n    height,\n    id,\n    value,\n    valueFormat,\n    valueScale: valueScaleConfig,\n    groups,\n    groupBy,\n    size,\n    spacing,\n    layout,\n    gap,\n    forceStrength,\n    simulationIterations,\n    colors,\n    colorBy,\n}: {\n    data: RawDatum[]\n    width: number\n    height: number\n    id: SwarmPlotCommonProps<RawDatum>['id']\n    value: SwarmPlotCommonProps<RawDatum>['value']\n    valueScale: SwarmPlotCommonProps<RawDatum>['valueScale']\n    valueFormat?: SwarmPlotCommonProps<RawDatum>['valueFormat']\n    groups: SwarmPlotCommonProps<RawDatum>['groups']\n    groupBy: SwarmPlotCommonProps<RawDatum>['groupBy']\n    size: SwarmPlotCommonProps<RawDatum>['size']\n    spacing: SwarmPlotCommonProps<RawDatum>['spacing']\n    layout: SwarmPlotCommonProps<RawDatum>['layout']\n    gap: SwarmPlotCommonProps<RawDatum>['gap']\n    forceStrength: SwarmPlotCommonProps<RawDatum>['forceStrength']\n    simulationIterations: SwarmPlotCommonProps<RawDatum>['simulationIterations']\n    colors: SwarmPlotCommonProps<RawDatum>['colors']\n    colorBy: SwarmPlotCommonProps<RawDatum>['colorBy']\n}) => {\n    const axis = layout === 'horizontal' ? 'x' : 'y'\n\n    const getId = usePropertyAccessor<RawDatum, string>(id)\n    const getValue = usePropertyAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n    const getGroup = usePropertyAccessor<RawDatum, string>(groupBy)\n    const getSize = useSize<RawDatum>(size)\n    const getColorId = usePropertyAccessor<Omit<ComputedDatum<RawDatum>, 'color'>, string>(colorBy)\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'color'>>(\n        colors,\n        getColorId\n    )\n\n    const valueScale = useValueScale({\n        width,\n        height,\n        axis,\n        getValue,\n        scale: valueScaleConfig,\n        data,\n    })\n\n    const ordinalScale = useOrdinalScale({\n        width,\n        height,\n        axis,\n        groups,\n        gap,\n    })\n\n    const forces = useForces<RawDatum>({\n        axis,\n        valueScale,\n        ordinalScale,\n        spacing,\n        forceStrength,\n    })\n\n    const { nodes, xScale, yScale } = useMemo(\n        () =>\n            computeNodes<RawDatum>({\n                data,\n                getId,\n                layout,\n                getValue,\n                valueScale,\n                getGroup,\n                ordinalScale,\n                getSize,\n                forces,\n                simulationIterations,\n                valueScaleConfig,\n            }),\n        [\n            data,\n            getId,\n            layout,\n            getValue,\n            valueScale,\n            getGroup,\n            ordinalScale,\n            getSize,\n            forces,\n            simulationIterations,\n            valueScaleConfig,\n        ]\n    )\n\n    const augmentedNodes: ComputedDatum<RawDatum>[] = useMemo(\n        () =>\n            nodes.map(node => ({\n                ...node,\n                formattedValue: formatValue(node.value),\n                color: getColor(node),\n            })),\n        [nodes, formatValue, getColor]\n    )\n\n    return {\n        nodes: augmentedNodes,\n        xScale,\n        yScale,\n        getColor,\n    }\n}\n\nexport const useBorderWidth = <RawDatum>(\n    borderWidth: SwarmPlotCommonProps<RawDatum>['borderWidth']\n) =>\n    useMemo(() => {\n        if (typeof borderWidth === 'function') return borderWidth\n        return () => borderWidth\n    }, [borderWidth])\n\nexport const useNodeMouseHandlers = <RawDatum>({\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n    tooltip,\n}: Pick<SwarmPlotCommonProps<RawDatum>, 'isInteractive' | 'tooltip'> & MouseHandlers<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const mouseEnterHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            showTooltipFromEvent(tooltip(node), event)\n            onMouseEnter?.(node, event)\n        },\n        [isInteractive, onMouseEnter, showTooltipFromEvent, tooltip]\n    )\n\n    const mouseMoveHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            showTooltipFromEvent(tooltip(node), event)\n            onMouseMove?.(node, event)\n        },\n        [isInteractive, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const mouseLeaveHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [isInteractive, hideTooltip, onMouseLeave]\n    )\n\n    const clickHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            onClick?.(node, event)\n        },\n        [isInteractive, onClick]\n    )\n\n    return {\n        onMouseEnter: mouseEnterHandler,\n        onMouseMove: mouseMoveHandler,\n        onMouseLeave: mouseLeaveHandler,\n        onClick: clickHandler,\n    }\n}\n\nconst getNodeAnnotationPosition = (node: ComputedDatum<unknown>) => ({\n    x: node.x,\n    y: node.y,\n})\n\nconst getNodeAnnotationDimensions = (node: ComputedDatum<unknown>) => ({\n    size: node.size,\n    width: node.size,\n    height: node.size,\n})\n\nexport const useSwarmPlotAnnotations = <RawDatum>(\n    nodes: ComputedDatum<RawDatum>[],\n    annotations: AnnotationMatcher<ComputedDatum<RawDatum>>[]\n) =>\n    useAnnotations<ComputedDatum<RawDatum>>({\n        data: nodes,\n        annotations,\n        getPosition: getNodeAnnotationPosition,\n        getDimensions: getNodeAnnotationDimensions,\n    })\n\nexport const useSwarmPlotLayerContext = <\n    RawDatum,\n    Scale extends\n        | ScaleLinear<number>\n        | ScaleTime<string | Date>\n        | ScaleOrdinal<string, number, never>\n>({\n    nodes,\n    xScale,\n    yScale,\n    innerWidth,\n    innerHeight,\n    outerWidth,\n    outerHeight,\n    margin,\n}: SwarmPlotCustomLayerProps<RawDatum, Scale>): SwarmPlotCustomLayerProps<RawDatum, Scale> =>\n    useMemo(\n        () => ({\n            nodes,\n            xScale,\n            yScale,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            margin,\n        }),\n        [nodes, xScale, yScale, innerWidth, innerHeight, outerWidth, outerHeight, margin]\n    )\n","import { createElement, useMemo, MouseEvent } from 'react'\nimport * as React from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CircleComponent, MouseHandlers, SwarmPlotCommonProps } from './types'\nimport { useBorderWidth } from './hooks'\n\n/**\n * A negative radius value is invalid for an SVG circle,\n * this custom interpolation makes sure it's either\n * positive or zero.\n */\nexport const interpolateRadius = (radiusValue: SpringValue<number>) =>\n    to([radiusValue], radius => Math.max(0, radius))\n\ntype CirclesProps<RawDatum> = {\n    nodes: ComputedDatum<RawDatum>[]\n    borderWidth: SwarmPlotCommonProps<RawDatum>['borderWidth']\n    borderColor: SwarmPlotCommonProps<RawDatum>['borderColor']\n    component: CircleComponent<RawDatum>\n    isInteractive: SwarmPlotCommonProps<RawDatum>['isInteractive']\n    tooltip: SwarmPlotCommonProps<RawDatum>['tooltip']\n} & MouseHandlers<RawDatum>\n\nconst getTransitionPhases = <RawDatum,>(\n    getBorderColor: (node: ComputedDatum<RawDatum>) => string\n) => ({\n    enter: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n    update: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: node.size / 2,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 1,\n    }),\n    leave: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n})\n\nexport const Circles = <RawDatum,>({\n    nodes,\n    borderWidth,\n    borderColor,\n    component,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: CirclesProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseEnter?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseMove?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        }\n    }, [isInteractive, hideTooltip, onMouseLeave])\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            onClick?.(node, event)\n        }\n    }, [isInteractive, onClick])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getBorderWidth = useBorderWidth<RawDatum>(borderWidth)\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const transitionPhases = useMemo(\n        () => getTransitionPhases<RawDatum>(getBorderColor),\n        [getBorderColor]\n    )\n\n    const transition = useTransition<\n        ComputedDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            radius: number\n            color: string\n            borderColor: string\n            opacity: number\n        }\n    >(nodes, {\n        keys: node => node.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, node) => {\n                return React.createElement(component, {\n                    key: node.id,\n                    node,\n                    style: {\n                        ...transitionProps,\n                        radius: interpolateRadius(transitionProps.radius),\n                        borderWidth: getBorderWidth(node),\n                    },\n                    onMouseEnter: handleMouseEnter,\n                    onMouseMove: handleMouseMove,\n                    onMouseLeave: handleMouseLeave,\n                    onClick: handleClick,\n                })\n            })}\n        </>\n    )\n}\n","import { animated } from '@react-spring/web'\nimport { CircleProps } from './types'\n\nexport const CircleSvg = <RawDatum,>({\n    node,\n    style,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: CircleProps<RawDatum>) => {\n    return (\n        <animated.circle\n            key={node.id}\n            cx={style.x}\n            cy={style.y}\n            r={style.radius}\n            fill={style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            opacity={style.opacity}\n            onMouseEnter={event => onMouseEnter?.(node, event)}\n            onMouseMove={event => onMouseMove?.(node, event)}\n            onMouseLeave={event => onMouseLeave?.(node, event)}\n            onClick={event => onClick?.(node, event)}\n        />\n    )\n}\n","import { Annotation } from '@nivo/annotations'\nimport { ComputedDatum, SwarmPlotSvgProps } from './types'\nimport { useSwarmPlotAnnotations } from './hooks'\n\nexport const SwarmPlotAnnotations = <RawDatum,>({\n    nodes,\n    annotations,\n}: {\n    nodes: ComputedDatum<RawDatum>[]\n    annotations: SwarmPlotSvgProps<RawDatum>['annotations']\n}) => {\n    const boundAnnotations = useSwarmPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { AnyScale } from '@nivo/scales'\nimport { Axes, Grid } from '@nivo/axes'\nimport { Mesh } from '@nivo/voronoi'\nimport { ComputedDatum, SwarmPlotLayerId, SwarmPlotSvgProps } from './types'\nimport { defaultProps } from './props'\nimport { useSwarmPlot, useSwarmPlotLayerContext, useNodeMouseHandlers } from './hooks'\nimport { Circles } from './Circles'\nimport { CircleSvg } from './CircleSvg'\nimport { SwarmPlotAnnotations } from './SwarmPlotAnnotations'\n\ntype InnerSwarmPlotProps<RawDatum> = Partial<\n    Omit<\n        SwarmPlotSvgProps<RawDatum>,\n        'data' | 'groups' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height' | 'isInteractive'>\n\nconst InnerSwarmPlot = <RawDatum,>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueScale = defaultProps.valueScale,\n    valueFormat,\n    groups,\n    groupBy = defaultProps.groupBy,\n    size = defaultProps.size,\n    forceStrength = defaultProps.forceStrength,\n    simulationIterations = defaultProps.simulationIterations,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<Omit<ComputedDatum<RawDatum>, 'color'>>,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    layout = defaultProps.layout,\n    spacing = defaultProps.spacing,\n    gap = defaultProps.gap,\n    layers = defaultProps.layers,\n    circleComponent = CircleSvg,\n    useMesh = defaultProps.useMesh,\n    debugMesh = defaultProps.debugMesh,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    axisTop = defaultProps.axisTop,\n    axisRight = defaultProps.axisRight,\n    axisBottom = defaultProps.axisBottom,\n    axisLeft = defaultProps.axisLeft,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    annotations = defaultProps.annotations,\n    role = defaultProps.role,\n}: InnerSwarmPlotProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, ...props } = useSwarmPlot<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        id,\n        value,\n        valueFormat,\n        valueScale,\n        groups,\n        groupBy,\n        size,\n        spacing,\n        layout,\n        gap,\n        colors,\n        colorBy,\n        forceStrength,\n        simulationIterations,\n    })\n\n    const xScale = props.xScale as Exclude<typeof props.xScale, ComputedDatum<RawDatum>[]>\n    const yScale = props.yScale as Exclude<typeof props.yScale, ComputedDatum<RawDatum>[]>\n\n    const handlers = useNodeMouseHandlers({\n        isInteractive,\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        onMouseMove,\n        tooltip,\n    })\n\n    const layerById: Record<SwarmPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        circles: null,\n        annotations: null,\n        mesh: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as AnyScale) : null}\n                xValues={gridXValues}\n                yScale={enableGridY ? (yScale as AnyScale) : null}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as AnyScale}\n                yScale={yScale as AnyScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop ?? undefined}\n                right={axisRight ?? undefined}\n                bottom={axisBottom ?? undefined}\n                left={axisLeft ?? undefined}\n            />\n        )\n    }\n\n    if (layers.includes('circles')) {\n        layerById.circles = (\n            <Circles<RawDatum>\n                key=\"circles\"\n                nodes={nodes}\n                borderWidth={0}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                component={circleComponent}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <SwarmPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={handlers.onMouseEnter}\n                onMouseMove={handlers.onMouseMove}\n                onMouseLeave={handlers.onMouseLeave}\n                onClick={handlers.onClick}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    const layerContext = useSwarmPlotLayerContext({\n        nodes,\n        xScale,\n        yScale,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin,\n    })\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (layerById[layer as SwarmPlotLayerId] !== undefined) {\n                    return layerById[layer as SwarmPlotLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const SwarmPlot = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSwarmPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { SwarmPlotSvgProps } from './types'\nimport { SwarmPlot } from './SwarmPlot'\n\ntype ResponsiveSwarmPlotProps<RawDatum> = Partial<\n    Omit<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>\n> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups'>\n\nexport const ResponsiveSwarmPlot = <RawDatum,>(props: ResponsiveSwarmPlotProps<RawDatum>) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <SwarmPlot<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { createElement, useCallback, useEffect, useRef, useState } from 'react'\nimport * as React from 'react'\nimport isNumber from 'lodash/isNumber'\nimport { Container, getRelativeCursor, isCursorInRect, useDimensions, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig, useInheritedColor } from '@nivo/colors'\nimport { AnyScale } from '@nivo/scales'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { ComputedDatum, SwarmPlotCanvasProps } from './types'\nimport { defaultProps } from './props'\nimport { useSwarmPlot } from './hooks'\n\nexport const renderCircleDefault = <RawDatum,>(\n    ctx: CanvasRenderingContext2D,\n    {\n        node,\n        getBorderWidth,\n        getBorderColor,\n    }: {\n        node: ComputedDatum<RawDatum>\n        getBorderWidth: (node: ComputedDatum<RawDatum>) => number\n        getBorderColor: (node: ComputedDatum<RawDatum>) => string\n    }\n) => {\n    const nodeBorderWidth = getBorderWidth(node)\n    if (nodeBorderWidth > 0) {\n        ctx.strokeStyle = getBorderColor(node)\n        ctx.lineWidth = nodeBorderWidth\n    }\n\n    ctx.beginPath()\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n    ctx.fillStyle = node.color\n    ctx.fill()\n\n    if (nodeBorderWidth > 0) {\n        ctx.stroke()\n    }\n}\n\ntype InnerSwarmCanvasPlotProps<RawDatum> = Partial<\n    Omit<\n        SwarmPlotCanvasProps<RawDatum>,\n        'data' | 'groups' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height' | 'isInteractive'>\n\nexport const InnerSwarmPlotCanvas = <RawDatum,>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    valueScale = defaultProps.valueScale,\n    groups,\n    groupBy = defaultProps.groupBy,\n    size = defaultProps.size,\n    forceStrength = defaultProps.forceStrength,\n    simulationIterations = defaultProps.simulationIterations,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<Omit<ComputedDatum<RawDatum>, 'color'>>,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    layout = defaultProps.layout,\n    spacing = defaultProps.spacing,\n    gap = defaultProps.gap,\n    layers = defaultProps.layers,\n    renderCircle = renderCircleDefault,\n    debugMesh = defaultProps.debugMesh,\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop = defaultProps.axisTop,\n    axisRight = defaultProps.axisRight,\n    axisBottom = defaultProps.axisBottom,\n    axisLeft = defaultProps.axisLeft,\n    isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    role = defaultProps.role,\n    pixelRatio = defaultProps.pixelRatio,\n}: InnerSwarmCanvasPlotProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ComputedDatum<RawDatum> | null>(null)\n\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, ...scales } = useSwarmPlot<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        id,\n        value,\n        valueFormat,\n        valueScale,\n        groups,\n        groupBy,\n        size,\n        spacing,\n        layout,\n        gap,\n        colors,\n        colorBy,\n        forceStrength,\n        simulationIterations,\n    })\n\n    const { xScale, yScale } = scales as Record<'xScale' | 'yScale', AnyScale>\n\n    const { delaunay, voronoi } = useVoronoiMesh<ComputedDatum<RawDatum>>({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getBorderWidth = () => 1\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        if (!ctx) return\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (\n                layer === 'grid' &&\n                isNumber(theme.grid.line.strokeWidth) &&\n                theme.grid.line.strokeWidth > 0\n            ) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'circles') {\n                nodes.forEach(node => {\n                    renderCircle(ctx, {\n                        node,\n                        getBorderWidth,\n                        getBorderColor,\n                    })\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh && voronoi) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentNode) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentNode.index)\n                }\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        pixelRatio,\n        margin,\n        theme,\n        layers,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        voronoi,\n        debugMesh,\n        currentNode,\n        nodes,\n        renderCircle,\n        getBorderWidth,\n        getBorderColor,\n    ])\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: React.MouseEvent) => {\n            if (!canvasEl.current) {\n                return null\n            }\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) {\n                return null\n            }\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay, nodes]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const showNodeTooltip = useCallback(\n        (node: ComputedDatum<RawDatum>, event: React.MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                onMouseMove?.(node, event)\n                showNodeTooltip(node, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getNodeFromMouseEvent, setCurrentNode, onMouseMove, showNodeTooltip, hideTooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setCurrentNode(null)\n    }, [hideTooltip, setCurrentNode])\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onClick?.(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            role={role}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const SwarmPlotCanvas = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSwarmPlotCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { SwarmPlotCanvasProps } from './types'\nimport { SwarmPlotCanvas } from './SwarmPlotCanvas'\n\ntype ResponsiveSwarmPlotCanvasProps<RawDatum> = Partial<\n    Omit<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>\n> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups'>\n\nexport const ResponsiveSwarmPlotCanvas = <RawDatum,>(\n    props: ResponsiveSwarmPlotCanvasProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <SwarmPlotCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["x","d","vx","y","vy","nodes","strengths","xz","strength","constant","force","alpha","node","i","n","length","initialize","Array","isNaN","_","arguments","yz","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","source","forEach","getOwnPropertyDescriptors","defineProperties","_objectWithoutProperties","excluded","sourceKeys","indexOf","objectWithoutPropertiesLoose","sourceSymbolKeys","prototype","propertyIsEnumerable","call","defaultProps","id","valueScale","type","min","max","groupBy","size","spacing","layout","gap","forceStrength","simulationIterations","colors","scheme","colorBy","borderWidth","borderColor","layers","enableGridX","enableGridY","axisTop","axisRight","axisBottom","axisLeft","isInteractive","useMesh","debugMesh","tooltip","formattedValue","color","enableChip","animate","motionConfig","annotations","role","pixelRatio","window","_arrayLikeToArray","arr","len","arr2","_unsupportedIterableToArray","o","minLen","arrayLikeToArray","toString","slice","constructor","name","from","test","_toConsumableArray","isArray","arrayWithoutHoles","iter","Symbol","iterator","iterableToArray","unsupportedIterableToArray","TypeError","nonIterableSpread","computeForces","axis","ordinalScale","collisionForce","radius","radii","random","iterations","tree","xi","yi","ri","ri2","k","quadtree","visitAfter","prepare","index","visit","quad","x0","y0","x1","y1","data","rj","r","l","jiggle","Math","sqrt","_nodes","_random","forceCollide","xForce","yForce","forceY","forceX","collision","computeNodes","scaleSpec","getId","getValue","getGroup","getSize","forces","valueScaleConfig","config","horizontal","vertical","parseValue","createDateNormalizer","simulatedNodes","group","simulation","forceSimulation","useValueScale","width","height","scale","useMemo","values","series","axes","generateSeriesAxis","computeScale","all","computeValueScale","useOrdinalScale","groups","groupCount","groupSize","range","scaleOrdinal","computeOrdinalScale","useSize","isNumber","isPlainObject","isString","sizeScale","scaleLinear","get","getSizeGenerator","useSwarmPlot","valueFormat","usePropertyAccessor","formatValue","useValueFormatter","getColorId","getColor","useOrdinalColorScale","useForces","xScale","yScale","getNodeAnnotationPosition","getNodeAnnotationDimensions","Circles","component","onMouseEnter","onMouseMove","onMouseLeave","onClick","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","handleClick","useMotionConfig","springConfig","theme","useTheme","getBorderWidth","useBorderWidth","getBorderColor","useInheritedColor","transitionPhases","enter","opacity","update","leave","getTransitionPhases","transition","useTransition","initial","immediate","style","radiusValue","transitionProps","to","CircleSvg","cx","cy","fill","stroke","strokeWidth","event","SwarmPlotAnnotations","boundAnnotations","useAnnotations","getPosition","getDimensions","useSwarmPlotAnnotations","_jsx","InnerSwarmPlot","partialMargin","margin","circleComponent","gridXValues","gridYValues","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","props","handlers","useCallback","useNodeMouseHandlers","layerById","grid","circles","mesh","xValues","yValues","top","right","bottom","left","undefined","debug","layerContext","useSwarmPlotLayerContext","layer","SwarmPlot","renderWrapper","otherProps","ResponsiveSwarmPlot","_slicedToArray","arrayWithHoles","_arr","_n","_d","_e","_s","_i","next","done","err","iterableToArrayLimit","nonIterableRest","renderCircleDefault","nodeBorderWidth","ctx","InnerSwarmPlotCanvas","renderCircle","canvasEl","useRef","useState","currentNode","setCurrentNode","useVoronoiMesh","points","delaunay","voronoi","useEffect","renderGridLinesToCanvas","renderAxesToCanvas","renderVoronoiToCanvas","renderVoronoiCellToCanvas","getNodeFromMouseEvent","getRelativeCursor","isCursorInRect","nodeIndex","showNodeTooltip","handleMouseHover","ref","cursor","SwarmPlotCanvas","ResponsiveSwarmPlotCanvas"],"sourceRoot":""}