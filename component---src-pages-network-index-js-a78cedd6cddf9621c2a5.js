(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{"4owV":function(e,n,o){"use strict";o.r(n);var t=o("mXGw"),r=o.n(t),i=o("6NhV"),l=o("ZS2m"),a=o("hvUk"),s=o.n(a),u=o("kNwl"),c=o("6zZa"),d=Object.freeze({margin:{top:0,right:0,bottom:0,left:0},linkDistance:30,repulsivity:6,iterations:60,nodeColor:function(e){return e.color},nodeBorderWidth:1,nodeBorderColor:{from:"color",modifiers:[["darker",.8]]},linkColor:i.c.linkColor,linkThickness:function(e){return 2*(2-e.source.depth)},isInteractive:!0,animate:!0,motionStiffness:160,motionDamping:12}),p=function(){return Object(c.g)()};n.default=function(){return r.a.createElement(l.a,{name:"Network",meta:s.a.Network,icon:"network",flavors:s.a.flavors,currentFlavor:"svg",properties:u.a,initialProperties:d,defaultProperties:i.c,generateData:p,getDataSize:function(e){return e.nodes.length}},(function(e,n,o,t){return r.a.createElement(i.d,Object.assign({nodes:n.nodes,links:n.links},e,{theme:o,onClick:function(e){t({type:"click",label:"[node] id: "+e.id+", index: "+e.index,color:e.color,data:e})}}))}))}},kNwl:function(e,n,o){"use strict";o.d(n,"a",(function(){return s}));var t,r=o("Eo5u"),i=o("6NhV"),l=o("RQLE"),a=[{key:"width",enableControlForFlavors:["api"],help:"Chart width.",description:"\n            Not required if using responsive component.\n        ",type:"number",required:!0,controlType:"range",group:"Base",controlOptions:{unit:"px",min:100,max:1e3,step:5}},{key:"height",enableControlForFlavors:["api"],help:"Chart height.",description:"\n            Not required if using responsive component.\n        ",type:"number",required:!0,controlType:"range",group:"Base",controlOptions:{unit:"px",min:100,max:1e3,step:5}},{key:"pixelRatio",flavors:["canvas"],help:"Adjust pixel ratio, useful for HiDPI screens.",defaultValue:"Depends on device",type:"number",controlType:"range",group:"Base",controlOptions:{min:1,max:2}},(t={key:"margin",group:"Base",type:"object",help:"Chart margin.",controlType:"margin"},t.group="Base",t),{key:"linkDistance",group:"Simulation",type:"number | string | (link: Link) => number",help:"Control links' distance.",description:"\n            If you set a **number**, this value will be used for all links.\n\n            If you use a **string**, this will be used to pick the distance\n            from the corresponding link property, thus, this property\n            should exist on each link.\n\n            If you use a **function**, it will receive a link and must return\n            the desired distance.\n        "},{key:"repulsivity",group:"Simulation",type:"number",help:"Control how nodes repel each other.",description:"\n            This value will also affect the strength\n            of `distanceMin` and `distanceMax`.\n        ",controlType:"range",controlOptions:{min:1,max:100},defaultValue:i.c.repulsivity},{key:"distanceMin",group:"Simulation",type:"number",help:"Sets the minimum distance between nodes for the many-body force.",defaultValue:i.c.distanceMin},{key:"distanceMax",group:"Simulation",help:"Sets the maximum distance between nodes for the many-body force.",defaultValue:i.c.distanceMax},{key:"iterations",group:"Simulation",help:"Adjust the simulation quality.",description:"\n            Increasing this number will result in a **more accurate simulation**,\n            however it will also involve more computing.\n        ",type:"number",defaultValue:i.c.iterations,controlType:"range",controlOptions:{min:60,max:260}},{key:"nodeColor",group:"Nodes",type:"string | (node: Node) => string",help:"Control nodes' color."},{key:"nodeBorderWidth",group:"Nodes",type:"number | (node: Node) => number",help:"Control nodes' border width.",defaultValue:i.c.nodeBorderWidth,controlType:"lineWidth"},{key:"nodeBorderColor",group:"Nodes",type:"string | object | (link: Link) => string",help:"Control nodes' border color.",defaultValue:i.c.nodeBorderColor,controlType:"inheritedColor"},{key:"linkThickness",enableControlForFlavors:["canvas"],group:"Links",type:"number | (link: Link) => number",help:"Control links' thickness.",defaultValue:i.c.linkThickness,controlType:"lineWidth"},{key:"linkColor",group:"Links",type:"string | (link: Link) => string",help:"Control links' color.",defaultValue:i.c.linkColor,controlType:"inheritedColor",controlOptions:{inheritableProperties:["source.color","target.color"]}},{key:"tooltip",group:"Interactivity",type:"Function",required:!1,help:"Custom tooltip component.",description:"\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML\n            element and will receive the node's data.\n        "},{key:"onClick",group:"Interactivity",help:"onClick handler.",type:"(node, event) => void",required:!1},{key:"layers",group:"Customization",help:"Defines the order of layers and add custom layers.",required:!1,defaultValue:i.c.layers}].concat(Object(r.a)(Object(l.e)(["svg"],i.c))),s=Object(l.d)(a)}}]);
//# sourceMappingURL=component---src-pages-network-index-js-a78cedd6cddf9621c2a5.js.map