{"version":3,"file":"component---src-pages-radial-bar-index-tsx-116f89d13df203497cbb.js","mappings":"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","sources":["webpack://nivo-website/./src/lib/settings.ts","webpack://nivo-website/./src/data/components/radial-bar/mapper.ts","webpack://nivo-website/./src/data/components/radial-bar/props.ts","webpack://nivo-website/./src/pages/radial-bar/index.tsx","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/svg/ContinuousColorsLegendSvg.tsx","webpack://nivo-website/../src/svg/AnchoredContinuousColorsLegendSvg.tsx","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/props.ts"],"sourcesContent":["import omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\nimport { AxisProps, CanvasAxisProps } from '@nivo/axes'\n\nexport const settingsMapper =\n    (mapping: any, { exclude = [] }: { exclude?: string[] } = {}) =>\n    (settings: any, options: any = {}) => {\n        const overrides: any = {}\n\n        Object.keys(settings).forEach(key => {\n            if (mapping[key]) {\n                overrides[key] = mapping[key](settings[key], settings, options)\n            }\n        })\n\n        return {\n            ...omit(settings, exclude),\n            ...overrides,\n        }\n    }\n\nexport type AxisWithToggle<Axis extends AxisProps | CanvasAxisProps> = NonNullable<Axis> & {\n    enable: boolean\n}\n\nexport const mapAxis = (type: 'top' | 'right' | 'bottom' | 'left') => (value: any, settings: any) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }: { format: string; enabled: boolean }) =>\n    enabled ? format : undefined\n","import omit from 'lodash/omit'\nimport { settingsMapper, mapFormat } from '../../../lib/settings'\n\nexport const mapAxis = (key: string) => (value: any, settings: any) =>\n    settings[key].enable ? omit(value, ['enable']) : null\n\nexport default settingsMapper({\n    valueFormat: mapFormat,\n    radialAxisStart: mapAxis('radialAxisStart'),\n    radialAxisEnd: mapAxis('radialAxisEnd'),\n    circularAxisInner: mapAxis('circularAxisInner'),\n    circularAxisOuter: mapAxis('circularAxisOuter'),\n})\n","import { svgDefaultProps } from '@nivo/radial-bar'\nimport { arcTransitionModes } from '@nivo/arcs'\nimport {\n    themeProperty,\n    motionProperties,\n    groupProperties,\n    getLegendsProps,\n    polarAxisProperty,\n} from '../../../lib/componentProperties'\nimport {\n    chartDimensions,\n    ordinalColors,\n    isInteractive,\n    commonAccessibilityProps,\n} from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg']\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        type: 'object[]',\n        required: true,\n        help: 'Chart data.',\n        description: `\n            Here is what the data for a single chart with 2 bars would look like:\n            \n            \\`\\`\\`\n            [\n                {\n                    id: 'Fruits',\n                    data: [{ x: 'Apples', y: 32 }]\n                },\n                {\n                    id: 'Vegetables',\n                    data: [{ x: 'Eggplants', y: 27 }]\n                }\n            ]\n            \\`\\`\\`\n            \n            You can add several metrics per group:\n            \n            \\`\\`\\`\n            [\n                {\n                    id: 'Fruits',\n                    data: [\n                        { x: 'Apples', y: 32 },\n                        { x: 'Mangoes', y: 15 }\n                    ]\n                },\n                {\n                    id: 'Vegetables',\n                    data: [\n                        { x: 'Eggplants', y: 27 },\n                        { x: 'Avocados', y: 34 }\n                    ]\n                }\n            ]\n            \\`\\`\\`\n            \n            When a bar is computed, the \\`id\\` is going to be added\n            as the \\`groupId\\`, \\`x\\` as the \\`category\\` and \\`y\\`\n            as the value, for example the first bar for the number of Apples\n            in the Fruits group would be:\n            \n            \\`\\`\\`\n            {\n                groupId: 'Fruits',\n                category: 'Apples',\n                value: 32\n            }\n            \\`\\`\\`\n            \n            You might read those values when adding an \\`onClick\\` handler\n            for example, or when customizing the tooltip.\n        `,\n        flavors: allFlavors,\n    },\n    {\n        key: 'maxValue',\n        group: 'Base',\n        type: `'auto' | number`,\n        required: false,\n        help: `If 'auto', the max value is derived from the data, otherwise use a static value.`,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.maxValue,\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        type: 'string | (value: number) => string',\n        required: false,\n        help: 'Optional formatter for values (`y`).',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        flavors: allFlavors,\n        control: { type: 'valueFormat' },\n    },\n    ...chartDimensions(allFlavors),\n    {\n        key: 'startAngle',\n        group: 'Base',\n        type: 'number',\n        required: false,\n        help: 'Start angle (in degrees).',\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.startAngle,\n        control: {\n            type: 'angle',\n            min: -360,\n            max: 360,\n            step: 5,\n        },\n    },\n    {\n        key: 'endAngle',\n        group: 'Base',\n        type: 'number',\n        required: false,\n        help: 'End angle (in degrees).',\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.endAngle,\n        control: {\n            type: 'angle',\n            min: -360,\n            max: 360,\n            step: 5,\n        },\n    },\n    {\n        key: 'innerRadius',\n        group: 'Base',\n        help: `Donut if greater than 0. Value should be between 0~1 as it's a ratio from outer radius.`,\n        type: 'number',\n        required: false,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.innerRadius,\n        control: {\n            type: 'range',\n            min: 0,\n            max: 0.95,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'padding',\n        group: 'Base',\n        type: 'number',\n        required: false,\n        help: 'Padding between each ring (ratio).',\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.padding,\n        control: {\n            type: 'range',\n            min: 0,\n            max: 0.9,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'padAngle',\n        group: 'Base',\n        type: 'number',\n        required: false,\n        help: 'Padding between each bar.',\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.padAngle,\n        control: {\n            type: 'range',\n            unit: '°',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'cornerRadius',\n        group: 'Base',\n        type: 'number',\n        required: false,\n        help: 'Rounded corners.',\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.cornerRadius,\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    themeProperty(['svg']),\n    ordinalColors({\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.colors,\n    }),\n    {\n        key: 'borderWidth',\n        group: 'Style',\n        type: 'number',\n        required: false,\n        help: 'Bars border width.',\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.borderWidth,\n        control: { type: 'lineWidth' },\n    },\n    {\n        key: 'borderColor',\n        group: 'Style',\n        type: 'InheritedColorConfig<ComputedBar>',\n        required: false,\n        help: 'Method to compute border color.',\n        description: `\n            how to compute border color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.borderColor,\n        control: { type: 'inheritedColor' },\n    },\n    {\n        key: 'enableTracks',\n        group: 'Tracks',\n        type: 'boolean',\n        required: false,\n        help: 'Enable/disable tracks.',\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.enableTracks,\n        control: { type: 'switch' },\n    },\n    {\n        key: 'tracksColor',\n        group: 'Tracks',\n        type: 'string',\n        required: false,\n        help: 'Define tracks color.',\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.tracksColor,\n        control: { type: 'colorPicker' },\n    },\n    {\n        key: 'enableRadialGrid',\n        group: 'Grid & Axes',\n        type: 'boolean',\n        required: false,\n        help: 'Enable radial grid (rays)',\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.enableRadialGrid,\n        control: { type: 'switch' },\n    },\n    {\n        key: 'enableCircularGrid',\n        group: 'Grid & Axes',\n        type: 'boolean',\n        required: false,\n        help: 'Enable circular grid (rings)',\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.enableCircularGrid,\n        control: { type: 'switch' },\n    },\n    polarAxisProperty({\n        key: 'radialAxisStart',\n        flavors: allFlavors,\n        tickComponent: 'RadialAxisTickComponent',\n    }),\n    polarAxisProperty({\n        key: 'radialAxisEnd',\n        flavors: allFlavors,\n        tickComponent: 'RadialAxisTickComponent',\n    }),\n    polarAxisProperty({\n        key: 'circularAxisInner',\n        flavors: allFlavors,\n        tickComponent: 'CircularAxisTickComponent',\n    }),\n    polarAxisProperty({\n        key: 'circularAxisOuter',\n        flavors: allFlavors,\n        tickComponent: 'CircularAxisTickComponent',\n    }),\n    {\n        key: 'enableLabels',\n        group: 'Labels',\n        type: 'boolean',\n        required: false,\n        help: 'Enable/disable labels.',\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.enableLabels,\n        control: { type: 'switch' },\n    },\n    {\n        key: 'label',\n        group: 'Labels',\n        type: 'string | (bar: ComputedBar) => string',\n        required: false,\n        help: 'Defines how to get label text, can be a string (used to access current bar property) or a function which will receive the actual bar data.',\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.label,\n        control: {\n            type: 'choices',\n            choices: ['category', 'groupId', 'value', 'formattedValue'].map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n    {\n        key: 'labelsSkipAngle',\n        group: 'Labels',\n        type: 'number',\n        required: false,\n        help: `Skip label if corresponding arc's angle is lower than provided value.`,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.labelsSkipAngle,\n        control: {\n            type: 'range',\n            unit: '°',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'labelsRadiusOffset',\n        group: 'Labels',\n        type: 'number',\n        required: false,\n        help: `\n            Define the radius to use to determine the label position, starting from inner radius,\n            this is expressed as a ratio. Centered at 0.5 by default.\n        `,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.labelsRadiusOffset,\n        control: {\n            type: 'range',\n            min: 0,\n            max: 2,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'labelsTextColor',\n        group: 'Labels',\n        help: 'Defines how to compute label text color.',\n        type: 'string | object | Function',\n        required: false,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.labelsTextColor,\n        control: { type: 'inheritedColor' },\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        type: '(RadialBarLayerId | RadialBarCustomLayer)[]',\n        required: false,\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer should be a component.\n            \n            The component will receive properties as defined in\n            the \\`RadialBarCustomLayerProps\\` interface\n            and must return a valid SVG element.\n        `,\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.layers,\n    },\n    isInteractive({\n        flavors: allFlavors,\n        defaultValue: svgDefaultProps.isInteractive,\n    }),\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: 'RadialBarTooltipComponent',\n        required: false,\n        help: 'Override default tooltip.',\n        flavors: allFlavors,\n    },\n    {\n        key: 'onClick',\n        group: 'Interactivity',\n        type: '(bar: ComputedBar, event: MouseEvent) => void',\n        required: false,\n        help: 'onClick handler.',\n        flavors: allFlavors,\n    },\n    {\n        key: 'onMouseEnter',\n        group: 'Interactivity',\n        type: '(bar: ComputedBar, event: MouseEvent) => void',\n        required: false,\n        help: 'onMouseEnter handler.',\n        flavors: allFlavors,\n    },\n    {\n        key: 'onMouseMove',\n        group: 'Interactivity',\n        type: '(bar: ComputedBar, event: MouseEvent) => void',\n        required: false,\n        help: 'onMouseMove handler.',\n        flavors: allFlavors,\n    },\n    {\n        key: 'onMouseLeave',\n        group: 'Interactivity',\n        type: '(bar: ComputedBar, event: MouseEvent) => void',\n        required: false,\n        help: 'onMouseLeave handler.',\n        flavors: allFlavors,\n    },\n    {\n        key: 'legends',\n        group: 'Legends',\n        type: 'LegendProps[]',\n        required: false,\n        help: `Optional chart's legends.`,\n        flavors: allFlavors,\n        control: {\n            type: 'array',\n            props: getLegendsProps(['svg']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend: any) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                dataFrom: 'keys',\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: (data: any) => {\n                    console.log(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n    ...commonAccessibilityProps(allFlavors),\n    ...motionProperties(allFlavors, svgDefaultProps, 'react-spring'),\n    {\n        key: 'transitionMode',\n        flavors: allFlavors,\n        help: 'Define how transitions behave.',\n        type: 'string',\n        required: false,\n        defaultValue: svgDefaultProps.transitionMode,\n        group: 'Motion',\n        control: {\n            type: 'choices',\n            choices: arcTransitionModes.map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n]\n\nexport const groups = groupProperties(props)\n","import React from 'react'\nimport { ResponsiveRadialBar, RadialBarSvgProps, svgDefaultProps } from '@nivo/radial-bar'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/radial-bar/meta.yml'\nimport mapper from '../../data/components/radial-bar/mapper'\nimport { groups } from '../../data/components/radial-bar/props'\nimport { graphql, useStaticQuery } from 'gatsby'\n\ntype MappedRadarProps = Omit<RadialBarSvgProps, 'data' | 'width' | 'height'>\ntype UnmappedRadarProps = Omit<\n    MappedRadarProps,\n    'valueFormat' | 'radialAxisStart' | 'radialAxisEnd' | 'circularAxisInner' | 'circularAxisOuter'\n> & {\n    valueFormat: {\n        format: string\n        enabled: boolean\n    }\n    radialAxisStart: { enable: boolean } & RadialBarSvgProps['radialAxisStart']\n    radialAxisEnd: { enable: boolean } & RadialBarSvgProps['radialAxisEnd']\n    circularAxisInner: { enable: boolean } & RadialBarSvgProps['circularAxisInner']\n    circularAxisOuter: { enable: boolean } & RadialBarSvgProps['circularAxisOuter']\n}\n\nconst initialProperties: UnmappedRadarProps = {\n    valueFormat: { format: '>-.2f', enabled: true },\n\n    startAngle: svgDefaultProps.startAngle,\n    endAngle: svgDefaultProps.endAngle,\n    innerRadius: svgDefaultProps.innerRadius,\n    padding: 0.4,\n    padAngle: svgDefaultProps.padAngle,\n    cornerRadius: 2,\n\n    margin: {\n        top: 40,\n        right: 120,\n        bottom: 40,\n        left: 40,\n    },\n\n    colors: svgDefaultProps.colors,\n    borderWidth: svgDefaultProps.borderWidth,\n    borderColor: svgDefaultProps.borderColor,\n\n    enableTracks: svgDefaultProps.enableTracks,\n    tracksColor: svgDefaultProps.tracksColor,\n\n    enableRadialGrid: svgDefaultProps.enableRadialGrid,\n    enableCircularGrid: svgDefaultProps.enableCircularGrid,\n    radialAxisStart: {\n        enable: true,\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n    },\n    radialAxisEnd: {\n        enable: false,\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n    },\n    circularAxisInner: {\n        enable: false,\n        tickSize: 5,\n        tickPadding: 12,\n        tickRotation: 0,\n    },\n    circularAxisOuter: {\n        enable: true,\n        tickSize: 5,\n        tickPadding: 12,\n        tickRotation: 0,\n    },\n\n    enableLabels: svgDefaultProps.enableLabels,\n    label: svgDefaultProps.label,\n    labelsSkipAngle: svgDefaultProps.labelsSkipAngle,\n    labelsRadiusOffset: svgDefaultProps.labelsRadiusOffset,\n    labelsTextColor: svgDefaultProps.labelsTextColor,\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n    transitionMode: svgDefaultProps.transitionMode,\n\n    isInteractive: svgDefaultProps.isInteractive,\n\n    legends: [\n        {\n            anchor: 'right',\n            direction: 'column',\n            justify: false,\n            translateX: 80,\n            translateY: 0,\n            itemsSpacing: 6,\n            itemDirection: 'left-to-right',\n            itemWidth: 100,\n            itemHeight: 18,\n            itemTextColor: '#999',\n            symbolSize: 18,\n            symbolShape: 'square',\n            onClick: d => {\n                alert(JSON.stringify(d, null, '    '))\n            },\n            effects: [\n                {\n                    on: 'hover',\n                    style: {\n                        itemTextColor: '#000',\n                    },\n                },\n            ],\n        },\n    ],\n}\n\nconst generateData = () => {\n    const ids = ['Supermarket', 'Combini', 'Online']\n    if (Math.random() > 0.5) {\n        ids.push('Marché')\n    }\n\n    const categories = ['Vegetables', 'Fruits', 'Meat']\n    if (Math.random() < 0.5) {\n        categories.push('Fish')\n    }\n\n    return ids.map(id => ({\n        id,\n        data: categories.map(category => ({\n            x: category,\n            y: Math.round(Math.random() * 300),\n        })),\n    }))\n}\n\nconst RadialBar = () => {\n    const {\n        image: {\n            childImageSharp: { gatsbyImageData: image },\n        },\n    } = useStaticQuery(graphql`\n        query {\n            image: file(absolutePath: { glob: \"**/src/assets/captures/radial-bar.png\" }) {\n                childImageSharp {\n                    gatsbyImageData(layout: FIXED, width: 700, quality: 100)\n                }\n            }\n        }\n    `)\n\n    return (\n        <ComponentTemplate<UnmappedRadarProps, MappedRadarProps, any>\n            name=\"RadialBar\"\n            meta={meta.RadialBar}\n            icon=\"radial-bar\"\n            flavors={meta.flavors}\n            currentFlavor=\"svg\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={svgDefaultProps}\n            propertiesMapper={mapper}\n            generateData={generateData}\n            image={image}\n        >\n            {(properties, data, theme, logAction) => (\n                <ResponsiveRadialBar\n                    data={data}\n                    {...properties}\n                    theme={theme}\n                    onClick={bar => {\n                        logAction({\n                            type: 'click',\n                            label: `${bar.category} - ${bar.groupId}: ${bar.value}`,\n                            color: bar.color,\n                            data: bar,\n                        })\n                    }}\n                />\n            )}\n        </ComponentTemplate>\n    )\n}\n\nexport default RadialBar\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { ContinuousColorsLegendProps } from './types'\n\nexport const continuousColorsLegendDefaults: {\n    length: NonNullable<ContinuousColorsLegendProps['length']>\n    thickness: NonNullable<ContinuousColorsLegendProps['thickness']>\n    direction: NonNullable<ContinuousColorsLegendProps['direction']>\n    tickPosition: NonNullable<ContinuousColorsLegendProps['tickPosition']>\n    tickSize: NonNullable<ContinuousColorsLegendProps['tickSize']>\n    tickSpacing: NonNullable<ContinuousColorsLegendProps['tickSpacing']>\n    tickOverlap: NonNullable<ContinuousColorsLegendProps['tickOverlap']>\n    tickFormat: NonNullable<ContinuousColorsLegendProps['tickFormat']>\n    titleAlign: NonNullable<ContinuousColorsLegendProps['titleAlign']>\n    titleOffset: NonNullable<ContinuousColorsLegendProps['titleOffset']>\n} = {\n    length: 200,\n    thickness: 16,\n    direction: 'row',\n    tickPosition: 'after',\n    tickSize: 4,\n    tickSpacing: 3,\n    tickOverlap: false,\n    tickFormat: (value: number) => `${value}`,\n    titleAlign: 'start',\n    titleOffset: 4,\n}\n","import { scaleLinear } from 'd3-scale'\nimport { getValueFormatter } from '@nivo/core'\nimport { computeContinuousColorScaleColorStops } from '@nivo/colors'\nimport {\n    BoxLegendSvgProps,\n    ContinuousColorsLegendProps,\n    LegendAnchor,\n    LegendItemDirection,\n} from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n\nexport const computeContinuousColorsLegend = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    // left to right for `row`, bottom to top for `column`\n    const domain = direction === 'column' ? [...scale.domain()].reverse() : scale.domain()\n\n    const positionScale = scaleLinear().domain(domain)\n    if (domain.length === 2) {\n        // sequential, quantize\n        positionScale.range([0, length])\n    } else if (domain.length === 3) {\n        // diverging\n        positionScale.range([0, length / 2, length])\n    }\n\n    let values: number[]\n    if ('thresholds' in scale) {\n        // quantize\n        values = [domain[0], ...scale.thresholds(), domain[1]]\n    } else {\n        // sequential, diverging\n        values = Array.isArray(ticks) ? ticks : (scale as any).ticks(ticks)\n    }\n\n    const colorStops = computeContinuousColorScaleColorStops(scale, 32)\n\n    const formatValue = getValueFormatter(tickFormat)\n\n    const computedTicks: {\n        x1: number\n        y1: number\n        x2: number\n        y2: number\n        text: string\n        textX: number\n        textY: number\n        textHorizontalAlign: 'start' | 'middle' | 'end'\n        textVerticalAlign: 'alphabetic' | 'central' | 'hanging'\n    }[] = []\n\n    let width: number\n    let height: number\n\n    const gradientX1 = 0\n    let gradientY1 = 0\n    let gradientX2 = 0\n    const gradientY2 = 0\n\n    let titleX: number\n    let titleY: number\n    let titleRotation: number\n    let titleVerticalAlign: 'alphabetic' | 'hanging'\n\n    if (direction === 'row') {\n        width = length\n        height = thickness\n\n        gradientX2 = 1\n\n        let y1: number\n        let y2: number\n\n        let textY: number\n        const textHorizontalAlign = 'middle'\n        let textVerticalAlign: 'alphabetic' | 'hanging'\n\n        titleRotation = 0\n        if (titleAlign === 'start') {\n            titleX = 0\n        } else if (titleAlign === 'middle') {\n            titleX = length / 2\n        } else {\n            titleX = length\n        }\n\n        if (tickPosition === 'before') {\n            y1 = -tickSize\n            y2 = tickOverlap ? thickness : 0\n\n            textY = -tickSize - tickSpacing\n            textVerticalAlign = 'alphabetic'\n\n            titleY = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            y1 = tickOverlap ? 0 : thickness\n            y2 = thickness + tickSize\n\n            textY = y2 + tickSpacing\n            textVerticalAlign = 'hanging'\n\n            titleY = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const x = positionScale(value)\n\n            computedTicks.push({\n                x1: x,\n                y1,\n                x2: x,\n                y2,\n                text: formatValue(value),\n                textX: x,\n                textY,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    } else {\n        width = thickness\n        height = length\n\n        gradientY1 = 1\n\n        let x1: number\n        let x2: number\n\n        let textX: number\n        let textHorizontalAlign: 'start' | 'end'\n        const textVerticalAlign = 'central'\n\n        titleRotation = -90\n        if (titleAlign === 'start') {\n            titleY = length\n        } else if (titleAlign === 'middle') {\n            titleY = length / 2\n        } else {\n            titleY = 0\n        }\n\n        if (tickPosition === 'before') {\n            x1 = -tickSize\n            x2 = tickOverlap ? thickness : 0\n\n            textX = x1 - tickSpacing\n            textHorizontalAlign = 'end'\n\n            titleX = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            x1 = tickOverlap ? 0 : thickness\n            x2 = thickness + tickSize\n\n            textX = x2 + tickSpacing\n            textHorizontalAlign = 'start'\n\n            titleX = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const y = positionScale(value)\n\n            computedTicks.push({\n                x1,\n                y1: y,\n                x2,\n                y2: y,\n                text: formatValue(value),\n                textX,\n                textY: y,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    }\n\n    return {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks: computedTicks,\n        titleText: title,\n        titleX,\n        titleY,\n        titleRotation,\n        titleHorizontalAlign: titleAlign,\n        titleVerticalAlign,\n    }\n}\n","import { Fragment } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { computeContinuousColorsLegend } from '../compute'\nimport { ContinuousColorsLegendProps } from '../types'\nimport { continuousColorsLegendDefaults } from '../defaults'\n\nexport const ContinuousColorsLegendSvg = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        ticks: computedTicks,\n        colorStops,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const theme = useTheme()\n\n    const id = `ContinuousColorsLegendSvgGradient.${direction}.${colorStops\n        .map(stop => stop.offset)\n        .join('_')}`\n\n    return (\n        <g>\n            <defs>\n                <linearGradient\n                    id={id}\n                    x1={gradientX1}\n                    y1={gradientY1}\n                    x2={gradientX2}\n                    y2={gradientY2}\n                >\n                    {colorStops.map(colorStop => (\n                        <stop {...colorStop} />\n                    ))}\n                </linearGradient>\n            </defs>\n            {titleText && (\n                <text\n                    transform={`translate(${titleX}, ${titleY}) rotate(${titleRotation})`}\n                    textAnchor={titleHorizontalAlign}\n                    dominantBaseline={titleVerticalAlign}\n                    style={theme.legends.title.text}\n                >\n                    {titleText}\n                </text>\n            )}\n            <rect width={width} height={height} fill={`url(#${id}`} />\n            {computedTicks.map((tick, index) => (\n                <Fragment key={index}>\n                    <line\n                        x1={tick.x1}\n                        y1={tick.y1}\n                        x2={tick.x2}\n                        y2={tick.y2}\n                        style={theme.legends.ticks.line}\n                    />\n                    <text\n                        x={tick.textX}\n                        y={tick.textY}\n                        textAnchor={tick.textHorizontalAlign}\n                        dominantBaseline={tick.textVerticalAlign}\n                        style={theme.legends.ticks.text}\n                    >\n                        {tick.text}\n                    </text>\n                </Fragment>\n            ))}\n        </g>\n    )\n}\n","import { AnchoredContinuousColorsLegendProps } from '../types'\nimport { computePositionFromAnchor } from '../compute'\nimport { continuousColorsLegendDefaults } from '../defaults'\nimport { ContinuousColorsLegendSvg } from './ContinuousColorsLegendSvg'\n\nexport const AnchoredContinuousColorsLegendSvg = ({\n    containerWidth,\n    containerHeight,\n    anchor,\n    translateX = 0,\n    translateY = 0,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    ...legendProps\n}: AnchoredContinuousColorsLegendProps) => {\n    let width: number\n    let height: number\n    if (direction === 'row') {\n        width = length\n        height = thickness\n    } else {\n        width = thickness\n        height = length\n    }\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <g transform={`translate(${x}, ${y})`}>\n            <ContinuousColorsLegendSvg\n                length={length}\n                thickness={thickness}\n                direction={direction}\n                {...legendProps}\n            />\n        </g>\n    )\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { CompleteTheme, degreesToRadians } from '@nivo/core'\nimport {\n    computeDimensions,\n    computePositionFromAnchor,\n    computeItemLayout,\n    computeContinuousColorsLegend,\n} from './compute'\nimport { AnchoredContinuousColorsLegendProps, LegendCanvasProps } from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n\nexport const renderContinuousColorLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        containerWidth,\n        containerHeight,\n        anchor,\n        translateX = 0,\n        translateY = 0,\n        scale,\n        length = continuousColorsLegendDefaults.length,\n        thickness = continuousColorsLegendDefaults.thickness,\n        direction = continuousColorsLegendDefaults.direction,\n        ticks: _ticks,\n        tickPosition = continuousColorsLegendDefaults.tickPosition,\n        tickSize = continuousColorsLegendDefaults.tickSize,\n        tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n        tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n        tickFormat = continuousColorsLegendDefaults.tickFormat,\n        title,\n        titleAlign = continuousColorsLegendDefaults.titleAlign,\n        titleOffset = continuousColorsLegendDefaults.titleOffset,\n        theme,\n    }: AnchoredContinuousColorsLegendProps & {\n        theme: CompleteTheme\n    }\n) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks: _ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const initialStyles = {\n        font: ctx.font,\n        textAlign: ctx.textAlign,\n        textBaseline: ctx.textBaseline,\n    }\n    ctx.save()\n\n    ctx.translate(x, y)\n\n    const gradient = ctx.createLinearGradient(\n        gradientX1 * width,\n        gradientY1 * height,\n        gradientX2 * width,\n        gradientY2 * height\n    )\n    colorStops.forEach(colorStop => {\n        gradient.addColorStop(colorStop.offset, colorStop.stopColor)\n    })\n\n    ctx.fillStyle = gradient\n    ctx.fillRect(0, 0, width, height)\n\n    ctx.font = `${\n        theme.legends.ticks.text.fontWeight ? `${theme.legends.ticks.text.fontWeight} ` : ''\n    }${theme.legends.ticks.text.fontSize}px ${theme.legends.ticks.text.fontFamily}`\n\n    ticks.forEach(tick => {\n        if ((theme.legends.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n            ctx.lineCap = 'square'\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x1, tick.y1)\n            ctx.lineTo(tick.x2, tick.y2)\n            ctx.stroke()\n        }\n\n        if (theme.legends.ticks.text.fill) {\n            ctx.fillStyle = theme.legends.ticks.text.fill\n        }\n        ctx.textAlign = tick.textHorizontalAlign === 'middle' ? 'center' : tick.textHorizontalAlign\n        ctx.textBaseline = tick.textVerticalAlign === 'central' ? 'middle' : tick.textVerticalAlign\n\n        ctx.fillText(tick.text, tick.textX, tick.textY)\n    })\n\n    if (titleText) {\n        ctx.save()\n        ctx.translate(titleX, titleY)\n        ctx.rotate(degreesToRadians(titleRotation))\n\n        ctx.font = `${\n            theme.legends.title.text.fontWeight ? `${theme.legends.title.text.fontWeight} ` : ''\n        }${theme.legends.title.text.fontSize}px ${theme.legends.title.text.fontFamily}`\n        if (theme.legends.title.text.fill) {\n            ctx.fillStyle = theme.legends.title.text.fill\n        }\n        ctx.textAlign = titleHorizontalAlign === 'middle' ? 'center' : titleHorizontalAlign\n        ctx.textBaseline = titleVerticalAlign\n\n        ctx.fillText(titleText, 0, 0)\n\n        ctx.restore()\n    }\n\n    ctx.restore()\n\n    ctx.font = initialStyles.font\n    ctx.textAlign = initialStyles.textAlign\n    ctx.textBaseline = initialStyles.textBaseline\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n\n        if (reverse) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse, separator, valueFormat])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n"],"names":["settingsMapper","mapping","exclude","settings","options","overrides","Object","keys","forEach","key","omit","mapAxis","type","value","upperFirst","enable","mapFormat","format","enabled","undefined","valueFormat","radialAxisStart","radialAxisEnd","circularAxisInner","circularAxisOuter","allFlavors","props","group","required","help","description","flavors","defaultValue","svgDefaultProps","control","chartDimensions","min","max","step","unit","themeProperty","ordinalColors","polarAxisProperty","tickComponent","choices","map","choice","label","isInteractive","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","defaults","dataFrom","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","data","console","log","JSON","stringify","commonAccessibilityProps","motionProperties","arcTransitionModes","groups","groupProperties","initialProperties","startAngle","endAngle","innerRadius","padding","padAngle","cornerRadius","margin","top","right","bottom","left","colors","borderWidth","borderColor","enableTracks","tracksColor","enableRadialGrid","enableCircularGrid","tickSize","tickPadding","tickRotation","enableLabels","labelsSkipAngle","labelsRadiusOffset","labelsTextColor","animate","motionConfig","transitionMode","legends","itemTextColor","symbolShape","d","alert","effects","on","style","generateData","ids","Math","random","push","categories","id","category","x","y","round","image","useStaticQuery","childImageSharp","gatsbyImageData","ComponentTemplate","name","meta","icon","currentFlavor","properties","defaultProperties","propertiesMapper","mapper","theme","logAction","bar","groupId","color","continuousColorsLegendDefaults","length","thickness","tickPosition","tickSpacing","tickOverlap","tickFormat","titleAlign","titleOffset","zeroPadding","computeDimensions","item","_padding","itemCount","Array","isArray","Error","horizontalPadding","verticalPadding","width","height","spacing","computePositionFromAnchor","containerWidth","containerHeight","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","symbolSpacing","computeContinuousColorsLegend","values","scale","ticks","title","domain","reverse","positionScale","scaleLinear","range","thresholds","titleX","titleY","titleRotation","titleVerticalAlign","y1","y2","textY","textVerticalAlign","x1","x2","textX","textHorizontalAlign","colorStops","computeContinuousColorScaleColorStops","formatValue","getValueFormatter","computedTicks","gradientY1","gradientX2","text","gradientX1","gradientY2","titleText","titleHorizontalAlign","ContinuousColorsLegendSvg","useTheme","stop","offset","join","_jsxDEV","colorStop","transform","textAnchor","dominantBaseline","fill","tick","Fragment","line","AnchoredContinuousColorsLegendSvg","legendProps","symbolByShape","circle","size","opacity","r","cx","cy","strokeWidth","stroke","pointerEvents","diamond","square","triangle","LegendSvgItem","textColor","background","symbolBorderWidth","symbolBorderColor","onMouseEnter","onMouseLeave","toggleSerie","useState","setStyle","handleMouseEnter","useCallback","event","filter","reduce","acc","effect","handleMouseLeave","some","handler","SymbolShape","itemOpacity","itemBackground","cursor","e","React","hidden","symbol","userSelect","LegendSvg","xStep","yStep","i","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","ctx","save","translate","font","fontSize","fontFamily","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","renderContinuousColorLegendToCanvas","_ticks","initialStyles","gradient","createLinearGradient","addColorStop","stopColor","fontWeight","t","lineWidth","Number","axis","strokeStyle","lineCap","beginPath","moveTo","lineTo","rotate","degreesToRadians","useQuantizeColorScaleLegendData","overriddenDomain","v","separator","useMemo","items","domainValue","invertExtent","extent","LegendPropShape","PropTypes","isRequired"],"sourceRoot":""}