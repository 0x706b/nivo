{"version":3,"file":"e64d68d709d71eab07f23953910e81fe4be31d23-888630e7bf5ce9fbbf68.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-path/src/path.js","webpack://nivo-website/../node_modules/d3-shape/src/arc.js","webpack://nivo-website/../node_modules/d3-shape/src/constant.js","webpack://nivo-website/../node_modules/d3-shape/src/line.js","webpack://nivo-website/../node_modules/d3-shape/src/point.js","webpack://nivo-website/../node_modules/d3-time/src/duration.js","webpack://nivo-website/../node_modules/d3-time/src/interval.js","webpack://nivo-website/./src/data/components/radar/mapper.ts","webpack://nivo-website/./src/data/components/radar/props.ts","webpack://nivo-website/../node_modules/d3-shape/src/curve/radial.js","webpack://nivo-website/../node_modules/d3-shape/src/lineRadial.js","webpack://nivo-website/../src/RadarLayer.tsx","webpack://nivo-website/../src/RadarGridLabels.tsx","webpack://nivo-website/../src/RadarGridLevels.tsx","webpack://nivo-website/../src/RadarGrid.tsx","webpack://nivo-website/../src/RadarSlice.tsx","webpack://nivo-website/../src/RadarSlices.tsx","webpack://nivo-website/../src/RadarDots.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/RadarGridLabel.tsx","webpack://nivo-website/../src/RadarSliceTooltip.tsx","webpack://nivo-website/../src/Radar.tsx","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/ResponsiveRadar.tsx"],"sourcesContent":["var pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path();\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function moveTo(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function lineTo(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function quadraticCurveTo(x1, y1, x, y) {\n    this._ += \"Q\" + +x1 + \",\" + +y1 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + +x1 + \",\" + +y1 + \",\" + +x2 + \",\" + +y2 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function arcTo(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.\n\n    if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x1,y1).\n\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    } // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.\n\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + +(y01 * x20 > x01 * y20) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function arc(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.\n\n    if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x0,y0).\n\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    } // Is this arc empty? We’re done.\n\n\n    if (!r) return; // Does the angle go the wrong way? Flip the direction.\n\n    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.\n\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    } // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + +(da >= pi) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function rect(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + +w + \"v\" + +h + \"h\" + -w + \"Z\";\n  },\n  toString: function toString() {\n    return this._;\n  }\n};\nexport default path;","import { path } from \"d3-path\";\nimport constant from \"./constant.js\";\nimport { abs, acos, asin, atan2, cos, epsilon, halfPi, max, min, pi, sin, sqrt, tau } from \"./math.js\";\n\nfunction arcInnerRadius(d) {\n  return d.innerRadius;\n}\n\nfunction arcOuterRadius(d) {\n  return d.outerRadius;\n}\n\nfunction arcStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction arcEndAngle(d) {\n  return d.endAngle;\n}\n\nfunction arcPadAngle(d) {\n  return d && d.padAngle; // Note: optional!\n}\n\nfunction intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var x10 = x1 - x0,\n      y10 = y1 - y0,\n      x32 = x3 - x2,\n      y32 = y3 - y2,\n      t = y32 * x10 - x32 * y10;\n  if (t * t < epsilon) return;\n  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;\n  return [x0 + t * x10, y0 + t * y10];\n} // Compute perpendicular offset line of length rc.\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\n\n\nfunction cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n  var x01 = x0 - x1,\n      y01 = y0 - y1,\n      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\n      ox = lo * y01,\n      oy = -lo * x01,\n      x11 = x0 + ox,\n      y11 = y0 + oy,\n      x10 = x1 + ox,\n      y10 = y1 + oy,\n      x00 = (x11 + x10) / 2,\n      y00 = (y11 + y10) / 2,\n      dx = x10 - x11,\n      dy = y10 - y11,\n      d2 = dx * dx + dy * dy,\n      r = r1 - rc,\n      D = x11 * y10 - x10 * y11,\n      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),\n      cx0 = (D * dy - dx * d) / d2,\n      cy0 = (-D * dx - dy * d) / d2,\n      cx1 = (D * dy + dx * d) / d2,\n      cy1 = (-D * dx + dy * d) / d2,\n      dx0 = cx0 - x00,\n      dy0 = cy0 - y00,\n      dx1 = cx1 - x00,\n      dy1 = cy1 - y00; // Pick the closer of the two intersection points.\n  // TODO Is there a faster way to determine which intersection to use?\n\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n  return {\n    cx: cx0,\n    cy: cy0,\n    x01: -ox,\n    y01: -oy,\n    x11: cx0 * (r1 / r - 1),\n    y11: cy0 * (r1 / r - 1)\n  };\n}\n\nexport default function () {\n  var innerRadius = arcInnerRadius,\n      outerRadius = arcOuterRadius,\n      cornerRadius = constant(0),\n      padRadius = null,\n      startAngle = arcStartAngle,\n      endAngle = arcEndAngle,\n      padAngle = arcPadAngle,\n      context = null;\n\n  function arc() {\n    var buffer,\n        r,\n        r0 = +innerRadius.apply(this, arguments),\n        r1 = +outerRadius.apply(this, arguments),\n        a0 = startAngle.apply(this, arguments) - halfPi,\n        a1 = endAngle.apply(this, arguments) - halfPi,\n        da = abs(a1 - a0),\n        cw = a1 > a0;\n    if (!context) context = buffer = path(); // Ensure that the outer radius is always larger than the inner radius.\n\n    if (r1 < r0) r = r1, r1 = r0, r0 = r; // Is it a point?\n\n    if (!(r1 > epsilon)) context.moveTo(0, 0); // Or is it a circle or annulus?\n    else if (da > tau - epsilon) {\n      context.moveTo(r1 * cos(a0), r1 * sin(a0));\n      context.arc(0, 0, r1, a0, a1, !cw);\n\n      if (r0 > epsilon) {\n        context.moveTo(r0 * cos(a1), r0 * sin(a1));\n        context.arc(0, 0, r0, a1, a0, cw);\n      }\n    } // Or is it a circular or annular sector?\n    else {\n      var a01 = a0,\n          a11 = a1,\n          a00 = a0,\n          a10 = a1,\n          da0 = da,\n          da1 = da,\n          ap = padAngle.apply(this, arguments) / 2,\n          rp = ap > epsilon && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\n          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n          rc0 = rc,\n          rc1 = rc,\n          t0,\n          t1; // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n\n      if (rp > epsilon) {\n        var p0 = asin(rp / r0 * sin(ap)),\n            p1 = asin(rp / r1 * sin(ap));\n        if ((da0 -= p0 * 2) > epsilon) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n        if ((da1 -= p1 * 2) > epsilon) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n      }\n\n      var x01 = r1 * cos(a01),\n          y01 = r1 * sin(a01),\n          x10 = r0 * cos(a10),\n          y10 = r0 * sin(a10); // Apply rounded corners?\n\n      if (rc > epsilon) {\n        var x11 = r1 * cos(a11),\n            y11 = r1 * sin(a11),\n            x00 = r0 * cos(a00),\n            y00 = r0 * sin(a00),\n            oc; // Restrict the corner radius according to the sector angle.\n\n        if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {\n          var ax = x01 - oc[0],\n              ay = y01 - oc[1],\n              bx = x11 - oc[0],\n              by = y11 - oc[1],\n              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\n              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = min(rc, (r0 - lc) / (kc - 1));\n          rc1 = min(rc, (r1 - lc) / (kc + 1));\n        }\n      } // Is the sector collapsed to a line?\n\n\n      if (!(da1 > epsilon)) context.moveTo(x01, y01); // Does the sector’s outer ring have rounded corners?\n      else if (rc1 > epsilon) {\n        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?\n\n        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      } // Or is the outer ring just a circular arc?\n      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw); // Is there no inner ring, and it’s a circular sector?\n      // Or perhaps it’s an annular sector collapsed due to padding?\n\n      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10); // Does the sector’s inner ring (or point) have rounded corners?\n      else if (rc0 > epsilon) {\n        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?\n\n        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      } // Or is the inner ring just a circular arc?\n      else context.arc(0, 0, r0, a10, a00, cw);\n    }\n    context.closePath();\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  arc.centroid = function () {\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;\n    return [cos(a) * r, sin(a) * r];\n  };\n\n  arc.innerRadius = function (_) {\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : innerRadius;\n  };\n\n  arc.outerRadius = function (_) {\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : outerRadius;\n  };\n\n  arc.cornerRadius = function (_) {\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : cornerRadius;\n  };\n\n  arc.padRadius = function (_) {\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), arc) : padRadius;\n  };\n\n  arc.startAngle = function (_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : startAngle;\n  };\n\n  arc.endAngle = function (_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : endAngle;\n  };\n\n  arc.padAngle = function (_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : padAngle;\n  };\n\n  arc.context = function (_) {\n    return arguments.length ? (context = _ == null ? null : _, arc) : context;\n  };\n\n  return arc;\n}","export default function (x) {\n  return function constant() {\n    return x;\n  };\n}","import { path } from \"d3-path\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport { x as pointX, y as pointY } from \"./point.js\";\nexport default function () {\n  var x = pointX,\n      y = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function line(data) {\n    var i,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer;\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();else output.lineEnd();\n      }\n\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  line.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), line) : x;\n  };\n\n  line.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), line) : y;\n  };\n\n  line.defined = function (_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n  };\n\n  line.curve = function (_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function (_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}","export function x(p) {\n  return p[0];\n}\nexport function y(p) {\n  return p[1];\n}","export var durationSecond = 1e3;\nexport var durationMinute = 6e4;\nexport var durationHour = 36e5;\nexport var durationDay = 864e5;\nexport var durationWeek = 6048e5;","var t0 = new Date(),\n    t1 = new Date();\nexport default function newInterval(floori, offseti, count, field) {\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;\n  }\n\n  interval.floor = function (date) {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = function (date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function (date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function (date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function (start, stop, step) {\n    var range = [],\n        previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n\n    do {\n      range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    } while (previous < start && start < stop);\n\n    return range;\n  };\n\n  interval.filter = function (test) {\n    return newInterval(function (date) {\n      if (date >= date) while (floori(date), !test(date)) {\n        date.setTime(date - 1);\n      }\n    }, function (date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function (start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function (step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n        return field(d) % step === 0;\n      } : function (d) {\n        return interval.count(0, d) % step === 0;\n      });\n    };\n  }\n\n  return interval;\n}","import { settingsMapper, mapFormat } from '../../../lib/settings'\n\nexport default settingsMapper({\n    valueFormat: mapFormat,\n    dotLabel: (value: string) => {\n        if (value === `p => \\`\\${p.key}: \\${p.value}\\``) return (p: any) => `${p.key}: ${p.value}`\n        if (value === `p => \\`\\${p.index}: \\${p.value}\\``)\n            return (p: any) => `${p.index}: ${p.value}`\n        return value\n    },\n})\n","import { closedCurvePropKeys } from '@nivo/core'\nimport { svgDefaultProps } from '@nivo/radar'\nimport {\n    themeProperty,\n    motionProperties,\n    groupProperties,\n    defsProperties,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        type: 'Datum[]',\n        required: true,\n        help: 'Chart data.',\n        description: `\n            For example, given this config:\n            \\`\\`\\`\n            [\n                { language: 'javascript', john: 12, sarah: 32, bob: 27 },\n                { language: 'golang', john: 25, sarah: 15, bob: 3 },\n                { language: 'python', john: 5, sarah: 22, bob: 31 },\n                { language: 'java', john: 19, sarah: 17, bob: 9 }\n            ]\n            keys: ['john', 'sarah', 'bob']\n            indexBy: 'language'\n            \\`\\`\\`\n            We'll have a radar chart representing programing\n            skills for each user by language\n            (3 layers and 4 dimensions).\n        `,\n        flavors: ['svg', 'api'],\n    },\n    {\n        key: 'indexBy',\n        group: 'Base',\n        type: 'string',\n        required: true,\n        help: 'Key to use to index the data.',\n        description: `\n            Key to use to index the data, this key\n            must exist in each data item.\n        `,\n        flavors: ['svg', 'api'],\n    },\n    {\n        key: 'keys',\n        group: 'Base',\n        type: 'string[]',\n        required: true,\n        help: 'Keys to use to determine each serie.',\n        description: `\n            Keys to use to determine each serie.\n            Those keys should exist in each data item.\n        `,\n        flavors: ['svg', 'api'],\n    },\n    {\n        key: 'maxValue',\n        group: 'Base',\n        type: `number | 'auto'`,\n        required: false,\n        help: 'Maximum value.',\n        description: `\n            Maximum value, if 'auto',\n            will use max value from\n            the provided data.\n        `,\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.maxValue,\n        controlType: 'switchableRange',\n        controlOptions: {\n            disabledValue: 'auto',\n            defaultValue: 200,\n            min: 0,\n            max: 1000,\n        },\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        type: 'string | (value: number) => string',\n        required: false,\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        flavors: ['svg', 'api'],\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'curve',\n        group: 'Base',\n        type: 'string',\n        required: false,\n        help: 'Curve interpolation.',\n        description: `\n            Defines the curve factory to use\n            for the line generator.\n        `,\n        defaultValue: svgDefaultProps.curve,\n        flavors: ['svg', 'api'],\n        controlType: 'choices',\n        controlOptions: {\n            choices: closedCurvePropKeys.map((key: string) => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'width',\n        group: 'Base',\n        type: 'number',\n        required: true,\n        help: 'Chart width.',\n        description: `\n            not required if using\n            \\`<ResponsiveRadar/>\\`.\n        `,\n        flavors: ['svg', 'api'],\n        enableControlForFlavors: ['api'],\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        group: 'Base',\n        type: 'number',\n        required: true,\n        help: 'Chart height.',\n        description: `\n            not required if using\n            \\`<ResponsiveRadar/>\\`.\n        `,\n        flavors: ['svg', 'api'],\n        enableControlForFlavors: ['api'],\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'margin',\n        group: 'Base',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        flavors: ['svg', 'api'],\n        controlType: 'margin',\n    },\n    themeProperty(['svg', 'api']),\n    {\n        key: 'colors',\n        group: 'Style',\n        type: 'string | Function | string[]',\n        required: false,\n        help: 'Defines how to compute colors.',\n        defaultValue: svgDefaultProps.colors,\n        flavors: ['svg', 'api'],\n        controlType: 'ordinalColors',\n    },\n    {\n        key: 'fillOpacity',\n        group: 'Style',\n        type: 'number',\n        required: false,\n        help: 'Shape fill opacity.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.fillOpacity,\n        controlType: 'opacity',\n    },\n    {\n        key: 'blendMode',\n        group: 'Style',\n        type: 'string',\n        required: false,\n        help: 'Defines CSS [mix-blend-mode](https://developer.mozilla.org/fr/docs/Web/CSS/mix-blend-mode) for shapes.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.blendMode,\n        controlType: 'blendMode',\n    },\n    {\n        key: 'borderWidth',\n        group: 'Style',\n        type: 'number',\n        required: false,\n        help: 'Shape border width.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.borderWidth,\n        controlType: 'lineWidth',\n    },\n    {\n        key: 'borderColor',\n        group: 'Style',\n        type: 'string | object | Function',\n        required: false,\n        help: 'Method to compute border color.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.borderColor,\n        controlType: 'inheritedColor',\n    },\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'gridLevels',\n        group: 'Grid',\n        type: 'number',\n        required: false,\n        help: 'Number of levels to display for grid',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.gridLevels,\n        controlType: 'range',\n        controlOptions: {\n            min: 1,\n            max: 12,\n        },\n    },\n    {\n        key: 'gridShape',\n        group: 'Grid',\n        type: 'string',\n        required: false,\n        help: 'Determine shape of the grid.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.gridShape,\n        controlType: 'choices',\n        controlOptions: {\n            choices: [\n                { label: 'circular', value: 'circular' },\n                { label: 'linear', value: 'linear' },\n            ],\n        },\n    },\n    {\n        key: 'gridLabel',\n        group: 'Grid',\n        type: 'Function',\n        required: false,\n        help: 'Grid label.',\n        description: `\n            An optional function to override label rendering.\n            It must return a **valid SVG element** and will\n            receive the following props:\n            \\`\\`\\`\n            {\n                id:     string\n                # this can be used to determine the label layout,\n                # if the element should be centered, left/right aligned\n                anchor: 'start' | 'middle' | 'end'\n                # angle in degrees\n                angle:  number\n            }\n            \\`\\`\\`\n            The component will be wrapped inside\n            a \\`g\\` element **already positioned**\n            where the default label would have been placed.\n        `,\n        flavors: ['svg'],\n    },\n    {\n        key: 'gridLabelOffset',\n        group: 'Grid',\n        type: 'number',\n        required: false,\n        help: 'Label offset from outer radius.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.gridLabelOffset,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 60,\n        },\n    },\n    {\n        key: 'enableDots',\n        group: 'Dots',\n        type: 'boolean',\n        required: false,\n        help: 'Enable/disable dots.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.enableDots,\n        controlType: 'switch',\n    },\n    {\n        key: 'dotSymbol',\n        group: 'Dots',\n        type: 'Function',\n        required: false,\n        help: 'Overrides default dot circle.',\n        description: `\n            Overrides default dot circle.\n            The function will receive \\`size\\`,\n            \\`color\\`, \\`borderWidth\\` and \\`borderColor\\`\n            props and must return a valid SVG element.\n        `,\n        flavors: ['svg'],\n    },\n    {\n        key: 'dotSize',\n        group: 'Dots',\n        type: 'number',\n        required: false,\n        help: 'Size of the dots.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.dotSize,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 2,\n            max: 64,\n        },\n    },\n    {\n        key: 'dotColor',\n        type: 'string | object | Function',\n        required: false,\n        help: 'Method to compute dots color.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.dotColor,\n        controlType: 'inheritedColor',\n        group: 'Dots',\n    },\n    {\n        key: 'dotBorderWidth',\n        group: 'Dots',\n        type: 'number',\n        required: false,\n        help: 'Width of the dots border.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.dotBorderWidth,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 10,\n        },\n    },\n    {\n        key: 'dotBorderColor',\n        group: 'Dots',\n        type: 'string | object | Function',\n        required: false,\n        help: 'Method to compute dots border color.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.dotBorderColor,\n        controlType: 'inheritedColor',\n    },\n    {\n        key: 'enableDotLabel',\n        group: 'Dots',\n        help: 'Enable/disable dots label.',\n        type: 'boolean',\n        required: false,\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.enableDotLabel,\n        controlType: 'switch',\n    },\n    {\n        key: 'dotLabel',\n        group: 'Dots',\n        type: 'string | ((point: PointData) => string | number)',\n        required: false,\n        help: 'Dot label.',\n        description:\n            'Property to use to determine dot label. If a function is provided, it will receive current value and serie and must return a label.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.dotLabel,\n        controlType: 'choices',\n        controlOptions: {\n            choices: [\n                'value',\n                'formattedValue',\n                'index',\n                'key',\n                `p => \\`\\${p.key}: \\${p.value}\\``,\n                `p => \\`\\${p.index}: \\${p.value}\\``,\n            ].map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n    {\n        key: 'dotLabelYOffset',\n        group: 'Dots',\n        type: 'number',\n        required: false,\n        help: 'Label Y offset from dot shape.',\n        flavors: ['svg', 'api'],\n        defaultValue: svgDefaultProps.dotLabelYOffset,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: -24,\n            max: 24,\n        },\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer should be a component.\n            \n            The layer function which will receive the chart's\n            context & computed data and must return a valid SVG element.\n        `,\n        required: false,\n        type: '(RadarLayerId | FunctionComponent<RadarCustomLayerProps>)[]',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.layers,\n    },\n    {\n        key: 'isInteractive',\n        group: 'Interactivity',\n        type: 'boolean',\n        required: false,\n        help: 'Enable/disable interactivity.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.isInteractive,\n        controlType: 'switch',\n    },\n    {\n        key: 'sliceTooltip',\n        group: 'Interactivity',\n        type: 'FunctionComponent<RadarSliceTooltipProps>',\n        required: false,\n        help: 'Override default slice tooltip.',\n        flavors: ['svg'],\n    },\n    ...motionProperties(['svg'], svgDefaultProps, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","import curveLinear from \"./linear.js\";\nexport var curveRadialLinear = curveRadial(curveLinear);\n\nfunction Radial(curve) {\n  this._curve = curve;\n}\n\nRadial.prototype = {\n  areaStart: function areaStart() {\n    this._curve.areaStart();\n  },\n  areaEnd: function areaEnd() {\n    this._curve.areaEnd();\n  },\n  lineStart: function lineStart() {\n    this._curve.lineStart();\n  },\n  lineEnd: function lineEnd() {\n    this._curve.lineEnd();\n  },\n  point: function point(a, r) {\n    this._curve.point(r * Math.sin(a), r * -Math.cos(a));\n  }\n};\nexport default function curveRadial(curve) {\n  function radial(context) {\n    return new Radial(curve(context));\n  }\n\n  radial._curve = curve;\n  return radial;\n}","import curveRadial, { curveRadialLinear } from \"./curve/radial.js\";\nimport line from \"./line.js\";\nexport function lineRadial(l) {\n  var c = l.curve;\n  l.angle = l.x, delete l.x;\n  l.radius = l.y, delete l.y;\n\n  l.curve = function (_) {\n    return arguments.length ? c(curveRadial(_)) : c()._curve;\n  };\n\n  return l;\n}\nexport default function () {\n  return lineRadial(line().curve(curveRadialLinear));\n}","import { useMemo } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { lineRadial, CurveFactory } from 'd3-shape'\nimport { ScaleLinear } from 'd3-scale'\nimport { useMotionConfig, useTheme, useAnimatedPath } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { RadarCommonProps } from './types'\n\ninterface RadarLayerProps<D extends Record<string, unknown>> {\n    data: D[]\n    item: string\n    colorByKey: Record<string | number, string>\n    fillByKey: Record<string, string | null>\n    radiusScale: ScaleLinear<number, number>\n    angleStep: number\n    curveFactory: CurveFactory\n    borderWidth: RadarCommonProps<D>['borderWidth']\n    borderColor: RadarCommonProps<D>['borderColor']\n    fillOpacity: RadarCommonProps<D>['fillOpacity']\n    blendMode: RadarCommonProps<D>['blendMode']\n}\n\nexport const RadarLayer = <D extends Record<string, unknown>>({\n    data,\n    item: key,\n    colorByKey,\n    fillByKey,\n    radiusScale,\n    angleStep,\n    curveFactory,\n    borderWidth,\n    borderColor,\n    fillOpacity,\n    blendMode,\n}: RadarLayerProps<D>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const lineGenerator = useMemo(() => {\n        return lineRadial<number>()\n            .radius(d => radiusScale(d))\n            .angle((_, i) => i * angleStep)\n            .curve(curveFactory)\n    }, [radiusScale, angleStep, curveFactory])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(lineGenerator(data.map(d => d[key] as number)) as string)\n    const animatedProps = useSpring<{ fill: string; stroke: string }>({\n        fill: colorByKey[key],\n        stroke: getBorderColor({ key, color: colorByKey[key] }),\n        config: springConfig,\n        immediate: !animate,\n    })\n    const fill = fillByKey[key] ?? animatedProps.fill\n\n    return (\n        <animated.path\n            key={key}\n            d={animatedPath}\n            fill={fill}\n            fillOpacity={fillOpacity}\n            stroke={animatedProps.stroke}\n            strokeWidth={borderWidth}\n            style={{ mixBlendMode: blendMode }}\n        />\n    )\n}\n","import { createElement } from 'react'\nimport { useSprings } from '@react-spring/web'\nimport { useMotionConfig, positionFromAngle, radiansToDegrees } from '@nivo/core'\nimport { GridLabelComponent } from './types'\n\nconst textAnchorFromAngle = (_angle: number) => {\n    const angle = radiansToDegrees(_angle) + 90\n\n    if (angle <= 10 || angle >= 350 || (angle >= 170 && angle <= 190)) return 'middle' as const\n    if (angle > 180) return 'end' as const\n    return 'start' as const\n}\n\ninterface RadarGridLabelsProps {\n    radius: number\n    angles: number[]\n    indices: string[]\n    label: GridLabelComponent\n    labelOffset: number\n}\n\nexport const RadarGridLabels = ({\n    radius,\n    angles,\n    indices,\n    label: labelComponent,\n    labelOffset,\n}: RadarGridLabelsProps) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = indices.map((index, i) => {\n        const position = positionFromAngle(angles[i], radius + labelOffset)\n        const textAnchor = textAnchorFromAngle(angles[i])\n\n        return {\n            id: index,\n            angle: radiansToDegrees(angles[i]),\n            anchor: textAnchor,\n            ...position,\n        }\n    })\n\n    const springs = useSprings(\n        labels.length,\n        labels.map(label => ({\n            transform: `translate(${label.x}, ${label.y})`,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return createElement(labelComponent, {\n                    key: label.id,\n                    id: label.id,\n                    anchor: label.anchor,\n                    angle: label.angle,\n                    x: label.x,\n                    y: label.y,\n                    animated: animatedProps,\n                })\n            })}\n        </>\n    )\n}\n","import { memo, SVGProps, useMemo } from 'react'\nimport { lineRadial, curveLinearClosed } from 'd3-shape'\nimport { animated, useSpring, to } from '@react-spring/web'\nimport { useTheme, useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { RadarCommonProps } from './types'\n\ninterface RadarGridLevelCircularProps {\n    radius: number\n}\n\nconst RadarGridLevelCircular = memo(({ radius }: RadarGridLevelCircularProps) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        radius,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            fill=\"none\"\n            r={to(animatedProps.radius, value => Math.max(value, 0))}\n            {...(theme.grid.line as Omit<SVGProps<SVGCircleElement>, 'ref'>)}\n        />\n    )\n})\n\ninterface RadarGridLevelLinearProps {\n    radius: number\n    angleStep: number\n    dataLength: number\n}\n\nconst RadarGridLevelLinear = ({ radius, angleStep, dataLength }: RadarGridLevelLinearProps) => {\n    const theme = useTheme()\n\n    const radarLineGenerator = useMemo(\n        () =>\n            lineRadial<number>()\n                .angle(i => i * angleStep)\n                .radius(radius)\n                .curve(curveLinearClosed),\n        [angleStep, radius]\n    )\n\n    const points = Array.from({ length: dataLength }, (_, i) => i)\n    const animatedPath = useAnimatedPath(radarLineGenerator(points) as string)\n\n    return (\n        <animated.path\n            fill=\"none\"\n            d={animatedPath}\n            {...(theme.grid.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n        />\n    )\n}\n\ninterface RadarGridLevelsProps<D extends Record<string, unknown>> {\n    shape: RadarCommonProps<D>['gridShape']\n    radius: number\n    angleStep: number\n    dataLength: number\n}\n\nexport const RadarGridLevels = <D extends Record<string, unknown>>({\n    shape,\n    ...props\n}: RadarGridLevelsProps<D>) => {\n    return shape === 'circular' ? (\n        <RadarGridLevelCircular radius={props.radius} />\n    ) : (\n        <RadarGridLevelLinear {...props} />\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { positionFromAngle, useTheme } from '@nivo/core'\nimport { RadarGridLabels } from './RadarGridLabels'\nimport { RadarGridLevels } from './RadarGridLevels'\nimport { GridLabelComponent, RadarCommonProps } from './types'\n\ninterface RadarGridProps<D extends Record<string, unknown>> {\n    indices: string[]\n    shape: RadarCommonProps<D>['gridShape']\n    radius: number\n    levels: number\n    angleStep: number\n    label: GridLabelComponent\n    labelOffset: number\n}\n\nexport const RadarGrid = <D extends Record<string, unknown>>({\n    indices,\n    levels,\n    shape,\n    radius,\n    angleStep,\n    label,\n    labelOffset,\n}: RadarGridProps<D>) => {\n    const theme = useTheme()\n    const { radii, angles } = useMemo(() => {\n        return {\n            radii: Array.from({ length: levels })\n                .map((_, i) => (radius / levels) * (i + 1))\n                .reverse(),\n            angles: Array.from({ length: indices.length }, (_, i) => i * angleStep - Math.PI / 2),\n        }\n    }, [indices, levels, radius, angleStep])\n\n    return (\n        <>\n            {angles.map((angle, i) => {\n                const position = positionFromAngle(angle, radius)\n                return (\n                    <line\n                        key={`axis.${i}`}\n                        x1={0}\n                        y1={0}\n                        x2={position.x}\n                        y2={position.y}\n                        {...(theme.grid.line as SVGProps<SVGLineElement>)}\n                    />\n                )\n            })}\n            {radii.map((radius, i) => (\n                <RadarGridLevels<D>\n                    key={`level.${i}`}\n                    shape={shape}\n                    radius={radius}\n                    angleStep={angleStep}\n                    dataLength={indices.length}\n                />\n            ))}\n            <RadarGridLabels\n                radius={radius}\n                angles={angles}\n                indices={indices}\n                labelOffset={labelOffset}\n                label={label}\n            />\n        </>\n    )\n}\n","import { useMemo, useState, useCallback, createElement } from 'react'\nimport { Arc } from 'd3-shape'\nimport { positionFromAngle, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { RadarCommonProps, RadarDataProps, RadarSliceTooltipDatum } from './types'\n\ninterface RadarSliceProps<D extends Record<string, unknown>> {\n    datum: D\n    keys: RadarDataProps<D>['keys']\n    index: string | number\n    formatValue: (value: number, context: string) => string\n    colorByKey: Record<string, string>\n    startAngle: number\n    endAngle: number\n    radius: number\n    arcGenerator: Arc<void, { startAngle: number; endAngle: number }>\n    tooltip: RadarCommonProps<D>['sliceTooltip']\n}\n\nexport const RadarSlice = <D extends Record<string, unknown>>({\n    datum,\n    keys,\n    index,\n    formatValue,\n    colorByKey,\n    radius,\n    startAngle,\n    endAngle,\n    arcGenerator,\n    tooltip,\n}: RadarSliceProps<D>) => {\n    const [isHover, setIsHover] = useState(false)\n    const theme = useTheme()\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const tooltipData = useMemo(() => {\n        const data: RadarSliceTooltipDatum[] = keys.map(key => ({\n            color: colorByKey[key],\n            id: key,\n            value: datum[key] as number,\n            formattedValue: formatValue(datum[key] as number, key),\n        }))\n        data.sort((a, b) => a.value - b.value)\n        data.reverse()\n\n        return data\n    }, [datum, keys, formatValue, colorByKey])\n\n    const showItemTooltip = useCallback(\n        event => {\n            setIsHover(true)\n            showTooltipFromEvent(\n                createElement(tooltip, {\n                    index,\n                    data: tooltipData,\n                }),\n                event\n            )\n        },\n        [showTooltipFromEvent, tooltip, index, tooltipData]\n    )\n\n    const hideItemTooltip = useCallback(() => {\n        setIsHover(false)\n        hideTooltip()\n    }, [hideTooltip, setIsHover])\n\n    const { path, tipX, tipY } = useMemo(() => {\n        const position = positionFromAngle(\n            startAngle + (endAngle - startAngle) * 0.5 - Math.PI / 2,\n            radius\n        )\n\n        return {\n            path: arcGenerator({ startAngle, endAngle }) as string,\n            tipX: position.x,\n            tipY: position.y,\n        }\n    }, [startAngle, endAngle, radius, arcGenerator])\n\n    return (\n        <>\n            {isHover && <line x1={0} y1={0} x2={tipX} y2={tipY} style={theme.crosshair.line} />}\n            <path\n                d={path}\n                fill=\"#F00\"\n                fillOpacity={0}\n                onMouseEnter={showItemTooltip}\n                onMouseMove={showItemTooltip}\n                onMouseLeave={hideItemTooltip}\n            />\n        </>\n    )\n}\n","import { arc as d3Arc } from 'd3-shape'\nimport { RadarSlice } from './RadarSlice'\nimport { RadarColorMapping, RadarCommonProps, RadarDataProps } from './types'\n\ninterface RadarSlicesProps<D extends Record<string, unknown>> {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    getIndex: (d: D) => string | number\n    formatValue: (value: number, context: string) => string\n    colorByKey: RadarColorMapping\n    radius: number\n    angleStep: number\n    tooltip: RadarCommonProps<D>['sliceTooltip']\n}\n\nexport const RadarSlices = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    getIndex,\n    formatValue,\n    colorByKey,\n    radius,\n    angleStep,\n    tooltip,\n}: RadarSlicesProps<D>) => {\n    const arc = d3Arc<{ startAngle: number; endAngle: number }>().outerRadius(radius).innerRadius(0)\n\n    const halfAngleStep = angleStep * 0.5\n    let rootStartAngle = -halfAngleStep\n\n    return (\n        <>\n            {data.map(d => {\n                const index = getIndex(d)\n                const startAngle = rootStartAngle\n                const endAngle = startAngle + angleStep\n\n                rootStartAngle += angleStep\n\n                return (\n                    <RadarSlice\n                        key={index}\n                        datum={d}\n                        keys={keys}\n                        index={index}\n                        formatValue={formatValue}\n                        colorByKey={colorByKey}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        radius={radius}\n                        arcGenerator={arc}\n                        tooltip={tooltip}\n                    />\n                )\n            })}\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { ScaleLinear } from 'd3-scale'\nimport { useTheme, positionFromAngle, DotsItem, usePropertyAccessor } from '@nivo/core'\nimport { getInheritedColorGenerator } from '@nivo/colors'\nimport { RadarCommonProps, RadarDataProps, PointProps, PointData, RadarColorMapping } from './types'\n\ninterface RadarDotsProps<D extends Record<string, unknown>> {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    radiusScale: ScaleLinear<number, number>\n    getIndex: (d: D) => string\n    colorByKey: RadarColorMapping\n    angleStep: number\n    symbol?: RadarCommonProps<D>['dotSymbol']\n    size: number\n    color: RadarCommonProps<D>['dotColor']\n    borderWidth: number\n    borderColor: RadarCommonProps<D>['dotBorderColor']\n    enableLabel: boolean\n    label: RadarCommonProps<D>['dotLabel']\n    formatValue: (value: number, context: string) => string\n    labelYOffset: number\n}\n\nexport const RadarDots = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    getIndex,\n    colorByKey,\n    radiusScale,\n    angleStep,\n    symbol,\n    size = 6,\n    color = { from: 'color' },\n    borderWidth = 0,\n    borderColor = { from: 'color' },\n    enableLabel = false,\n    label = 'value',\n    formatValue,\n    labelYOffset,\n}: RadarDotsProps<D>) => {\n    const theme = useTheme()\n    const fillColor = getInheritedColorGenerator(color, theme)\n    const strokeColor = getInheritedColorGenerator(borderColor, theme)\n    const getLabel = usePropertyAccessor<PointData, string | number>(label)\n\n    const points: PointProps[] = useMemo(\n        () =>\n            data.reduce((acc, datum, i) => {\n                const index = getIndex(datum)\n                keys.forEach(key => {\n                    const value = datum[key] as number\n\n                    const pointData: PointData = {\n                        index,\n                        key,\n                        value,\n                        formattedValue: formatValue(value, key),\n                        color: colorByKey[key],\n                    }\n\n                    acc.push({\n                        key: `${key}.${index}`,\n                        label: enableLabel ? getLabel(pointData) : undefined,\n                        style: {\n                            fill: fillColor(pointData),\n                            stroke: strokeColor(pointData),\n                            ...positionFromAngle(\n                                angleStep * i - Math.PI / 2,\n                                radiusScale(datum[key] as number)\n                            ),\n                        },\n                        data: pointData,\n                    })\n                })\n\n                return acc\n            }, [] as PointProps[]),\n        [\n            data,\n            keys,\n            getIndex,\n            colorByKey,\n            enableLabel,\n            getLabel,\n            formatValue,\n            fillColor,\n            strokeColor,\n            angleStep,\n            radiusScale,\n        ]\n    )\n\n    return (\n        <>\n            {points.map(point => (\n                <DotsItem\n                    key={point.key}\n                    x={point.style.x}\n                    y={point.style.y}\n                    symbol={symbol}\n                    size={size}\n                    color={point.style.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.style.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    datum={point.data}\n                />\n            ))}\n        </>\n    )\n}\n","import { RadarGridLabel } from './RadarGridLabel'\nimport { RadarSliceTooltip } from './RadarSliceTooltip'\nimport { RadarLayerId } from './types'\n\nexport const svgDefaultProps = {\n    layers: ['grid', 'layers', 'slices', 'dots', 'legends'] as RadarLayerId[],\n\n    maxValue: 'auto' as const,\n\n    curve: 'linearClosed' as const,\n\n    borderWidth: 2,\n    borderColor: { from: 'color' },\n\n    gridLevels: 5,\n    gridShape: 'circular' as const,\n    gridLabelOffset: 16,\n    gridLabel: RadarGridLabel,\n\n    enableDots: true,\n    dotSize: 6,\n    dotColor: { from: 'color' },\n    dotBorderWidth: 0,\n    dotBorderColor: { from: 'color' },\n    enableDotLabel: false,\n    dotLabel: 'formattedValue',\n    dotLabelYOffset: -12,\n\n    colors: { scheme: 'nivo' as const },\n    fillOpacity: 0.25,\n    blendMode: 'normal' as const,\n\n    isInteractive: true,\n    sliceTooltip: RadarSliceTooltip,\n\n    legends: [],\n    role: 'img',\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n\n    defs: [],\n    fill: [],\n}\n","import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { GridLabelProps } from './types'\n\nexport const RadarGridLabel = ({ id, anchor, animated: animatedProps }: GridLabelProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={animatedProps.transform}>\n            <text style={theme.axis.ticks.text} dominantBaseline=\"central\" textAnchor={anchor}>\n                {id}\n            </text>\n        </animated.g>\n    )\n}\n","import { useMemo } from 'react'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\nimport { RadarSliceTooltipProps } from './types'\n\nexport const RadarSliceTooltip = ({ index, data }: RadarSliceTooltipProps) => {\n    const rows = useMemo(\n        () =>\n            data.map(datum => [\n                <Chip key={datum.id} color={datum.color} />,\n                datum.id,\n                datum.formattedValue,\n            ]),\n        [data]\n    )\n\n    return <TableTooltip title={<strong>{index}</strong>} rows={rows} />\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { RadarLayer } from './RadarLayer'\nimport { RadarGrid } from './RadarGrid'\nimport { RadarSlices } from './RadarSlices'\nimport { RadarDots } from './RadarDots'\nimport { svgDefaultProps } from './props'\nimport { RadarLayerId, RadarSvgProps } from './types'\nimport { useRadar } from './hooks'\n\ntype InnerRadarProps<D extends Record<string, unknown>> = Omit<\n    RadarSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerRadar = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    indexBy,\n    layers = svgDefaultProps.layers,\n    maxValue = svgDefaultProps.maxValue,\n    valueFormat,\n    curve = svgDefaultProps.curve,\n    margin: partialMargin,\n    width,\n    height,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    gridLevels = svgDefaultProps.gridLevels,\n    gridShape = svgDefaultProps.gridShape,\n    gridLabel = svgDefaultProps.gridLabel,\n    gridLabelOffset = svgDefaultProps.gridLabelOffset,\n    enableDots = svgDefaultProps.enableDots,\n    dotSymbol,\n    dotSize = svgDefaultProps.dotSize,\n    dotColor = svgDefaultProps.dotColor,\n    dotBorderWidth = svgDefaultProps.dotBorderWidth,\n    dotBorderColor = svgDefaultProps.dotBorderColor,\n    enableDotLabel = svgDefaultProps.enableDotLabel,\n    dotLabel = svgDefaultProps.dotLabel,\n    dotLabelYOffset = svgDefaultProps.dotLabelYOffset,\n    colors = svgDefaultProps.colors,\n    fillOpacity = svgDefaultProps.fillOpacity,\n    blendMode = svgDefaultProps.blendMode,\n    isInteractive = svgDefaultProps.isInteractive,\n    sliceTooltip = svgDefaultProps.sliceTooltip,\n    legends = svgDefaultProps.legends,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n}: InnerRadarProps<D>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        getIndex,\n        indices,\n        formatValue,\n        colorByKey,\n        fillByKey,\n        boundDefs,\n        radius,\n        radiusScale,\n        centerX,\n        centerY,\n        angleStep,\n        curveFactory,\n        boundLegends,\n        customLayerProps,\n    } = useRadar<D>({\n        data,\n        keys,\n        indexBy,\n        maxValue,\n        valueFormat,\n        curve,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        legends,\n        defs,\n        fill,\n    })\n\n    const layerById: Record<RadarLayerId, ReactNode> = {\n        grid: null,\n        layers: null,\n        slices: null,\n        dots: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <g key=\"grid\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarGrid<D>\n                    levels={gridLevels}\n                    shape={gridShape}\n                    radius={radius}\n                    angleStep={angleStep}\n                    indices={indices}\n                    label={gridLabel}\n                    labelOffset={gridLabelOffset}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('layers')) {\n        layerById.layers = (\n            <g key=\"layers\" transform={`translate(${centerX}, ${centerY})`}>\n                {keys.map(key => (\n                    <RadarLayer<D>\n                        key={key}\n                        data={data}\n                        item={key}\n                        colorByKey={colorByKey}\n                        fillByKey={fillByKey}\n                        radiusScale={radiusScale}\n                        angleStep={angleStep}\n                        curveFactory={curveFactory}\n                        borderWidth={borderWidth}\n                        borderColor={borderColor}\n                        fillOpacity={fillOpacity}\n                        blendMode={blendMode}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    if (layers.includes('slices') && isInteractive) {\n        layerById.slices = (\n            <g key=\"slices\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarSlices<D>\n                    data={data}\n                    keys={keys}\n                    getIndex={getIndex}\n                    formatValue={formatValue}\n                    colorByKey={colorByKey}\n                    radius={radius}\n                    angleStep={angleStep}\n                    tooltip={sliceTooltip}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('dots') && enableDots) {\n        layerById.dots = (\n            <g key=\"dots\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarDots<D>\n                    data={data}\n                    keys={keys}\n                    getIndex={getIndex}\n                    radiusScale={radiusScale}\n                    angleStep={angleStep}\n                    symbol={dotSymbol}\n                    size={dotSize}\n                    colorByKey={colorByKey}\n                    color={dotColor}\n                    borderWidth={dotBorderWidth}\n                    borderColor={dotBorderColor}\n                    enableLabel={enableDotLabel}\n                    label={dotLabel}\n                    formatValue={formatValue}\n                    labelYOffset={dotLabelYOffset}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {boundLegends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={width}\n                        containerHeight={height}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Radar = <D extends Record<string, unknown>>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: RadarSvgProps<D>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerRadar<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { useMemo } from 'react'\nimport { scaleLinear } from 'd3-scale'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useCurveInterpolation,\n    usePropertyAccessor,\n    useValueFormatter,\n} from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { svgDefaultProps } from './props'\nimport {\n    RadarColorMapping,\n    RadarCommonProps,\n    RadarDataProps,\n    RadarCustomLayerProps,\n    RadarSvgProps,\n    BoundLegendProps,\n} from './types'\n\nexport const useRadar = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    indexBy,\n    maxValue,\n    valueFormat,\n    curve,\n    width,\n    height,\n    colors = svgDefaultProps.colors,\n    legends,\n    defs,\n    fill,\n}: {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    indexBy: RadarDataProps<D>['indexBy']\n    maxValue: RadarCommonProps<D>['maxValue']\n    valueFormat?: RadarCommonProps<D>['valueFormat']\n    curve: RadarCommonProps<D>['curve']\n    width: number\n    height: number\n    colors: RadarCommonProps<D>['colors']\n    legends: RadarCommonProps<D>['legends']\n    defs: RadarSvgProps<D>['defs']\n    fill: RadarSvgProps<D>['fill']\n}) => {\n    const getIndex = usePropertyAccessor<D, string>(indexBy)\n    const indices = useMemo(() => data.map(getIndex), [data, getIndex])\n    const formatValue = useValueFormatter<number, string>(valueFormat)\n\n    const getColor = useOrdinalColorScale<{ key: string; index: number }>(colors, 'key')\n    const colorByKey: RadarColorMapping = useMemo(\n        () =>\n            keys.reduce<RadarColorMapping>((mapping, key, index) => {\n                mapping[key] = getColor({ key, index })\n                return mapping\n            }, {}),\n        [keys, getColor]\n    )\n\n    const { boundDefs, fillByKey } = useMemo(() => {\n        // expand keys into structure expected by bindDefs\n        const keyData = keys.map(k => ({ key: k, color: colorByKey[k], data, fill: null }))\n        const boundDefs = bindDefs(defs, keyData, fill)\n        const fillByKey = keyData.reduce<Record<string, string | null>>((mapping, keyDatum) => {\n            const { key: keyName, fill } = keyDatum\n            mapping[keyName] = fill\n            return mapping\n        }, {})\n\n        return { boundDefs, fillByKey }\n    }, [keys, data, defs, fill, colorByKey])\n\n    const { radius, radiusScale, centerX, centerY, angleStep } = useMemo(() => {\n        const allValues: number[] = data.reduce(\n            (acc: number[], d) => [...acc, ...keys.map(key => d[key] as number)],\n            [] as number[]\n        )\n        const computedMaxValue = maxValue !== 'auto' ? maxValue : Math.max(...allValues)\n\n        const radius = Math.min(width, height) / 2\n        const radiusScale = scaleLinear<number, number>()\n            .range([0, radius])\n            .domain([0, computedMaxValue])\n\n        return {\n            radius,\n            radiusScale,\n            centerX: width / 2,\n            centerY: height / 2,\n            angleStep: (Math.PI * 2) / data.length,\n        }\n    }, [keys, data, maxValue, width, height])\n\n    const curveFactory = useCurveInterpolation(curve)\n\n    const customLayerProps: RadarCustomLayerProps<D> = useMemo(\n        () => ({\n            data,\n            keys,\n            indices,\n            colorByKey,\n            centerX,\n            centerY,\n            radiusScale,\n            angleStep,\n        }),\n        [data, keys, indices, colorByKey, centerX, centerY, radiusScale, angleStep]\n    )\n\n    const legendData = useMemo(\n        () => keys.map(key => ({ id: key, label: key, color: colorByKey[key] })),\n        [keys, colorByKey]\n    )\n\n    const boundLegends: BoundLegendProps[] = useMemo(\n        () =>\n            legends.map(({ data: customData, ...legend }) => {\n                const boundData = customData?.map(cd => {\n                    const findData = legendData.find(ld => ld.id === cd.id) || {}\n                    return { ...findData, ...cd }\n                })\n                return { ...legend, data: boundData || legendData }\n            }),\n        [legends, legendData]\n    )\n\n    return {\n        getIndex,\n        indices,\n        formatValue,\n        colorByKey,\n        fillByKey,\n        boundDefs,\n        radius,\n        radiusScale,\n        centerX,\n        centerY,\n        angleStep,\n        curveFactory,\n        legendData,\n        boundLegends,\n        customLayerProps,\n    }\n}\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { RadarSvgProps } from './types'\nimport { Radar } from './Radar'\n\nexport const ResponsiveRadar = <D extends Record<string, unknown>>(\n    props: Omit<RadarSvgProps<D>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Radar<D> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["pi","Math","PI","tau","epsilon","tauEpsilon","Path","this","_x0","_y0","_x1","_y1","_","path","prototype","constructor","moveTo","x","y","closePath","lineTo","quadraticCurveTo","x1","y1","bezierCurveTo","x2","y2","arcTo","r","x0","y0","x21","y21","x01","y01","l01_2","Error","abs","x20","y20","l21_2","l20_2","l21","sqrt","l01","l","tan","acos","t01","t21","arc","a0","a1","ccw","dx","cos","dy","sin","cw","da","rect","w","h","toString","arcInnerRadius","d","innerRadius","arcOuterRadius","outerRadius","arcStartAngle","startAngle","arcEndAngle","endAngle","arcPadAngle","padAngle","intersect","x3","y3","x10","y10","x32","y32","t","cornerTangents","r1","rc","lo","ox","oy","x11","y11","x00","y00","d2","D","cx0","cy0","cx1","cy1","dx0","dy0","dx1","dy1","cx","cy","cornerRadius","padRadius","context","buffer","r0","apply","arguments","t0","t1","a01","a11","a00","a10","da0","da1","ap","rp","rc0","rc1","p0","p1","oc","ax","ay","bx","by","kc","lc","centroid","a","length","defined","curve","output","line","data","i","n","defined0","lineStart","lineEnd","point","p","durationSecond","durationMinute","durationHour","durationDay","durationWeek","Date","newInterval","floori","offseti","count","field","interval","date","floor","ceil","round","d0","d1","offset","step","range","start","stop","previous","push","filter","test","setTime","end","every","isFinite","settingsMapper","valueFormat","mapFormat","dotLabel","value","key","index","props","group","type","required","help","description","flavors","defaultValue","svgDefaultProps","controlType","controlOptions","disabledValue","min","max","choices","closedCurvePropKeys","label","enableControlForFlavors","unit","themeProperty","defsProperties","map","choice","motionProperties","groups","groupProperties","curveRadialLinear","curveRadial","Radial","_curve","radial","areaStart","areaEnd","c","angle","radius","RadarLayer","item","colorByKey","fillByKey","radiusScale","angleStep","curveFactory","borderWidth","borderColor","fillOpacity","blendMode","theme","useTheme","getBorderColor","useInheritedColor","lineGenerator","useMemo","lineRadial","useMotionConfig","animate","springConfig","config","animatedPath","useAnimatedPath","animatedProps","useSpring","fill","stroke","color","immediate","React","animated","strokeWidth","style","mixBlendMode","RadarGridLabels","angles","indices","labelComponent","labelOffset","labels","_angle","position","positionFromAngle","textAnchor","radiansToDegrees","id","anchor","springs","useSprings","transform","createElement","RadarGridLevelCircular","memo","circle","to","grid","RadarGridLevelLinear","dataLength","radarLineGenerator","curveLinearClosed","points","Array","from","RadarGridLevels","shape","RadarGrid","levels","radii","reverse","RadarSlice","datum","keys","formatValue","arcGenerator","tooltip","useState","isHover","setIsHover","useTooltip","showTooltipFromEvent","hideTooltip","tooltipData","formattedValue","sort","b","showItemTooltip","useCallback","e","event","hideItemTooltip","tipX","tipY","crosshair","onMouseEnter","onMouseMove","onMouseLeave","RadarSlices","getIndex","d3Arc","rootStartAngle","RadarDots","symbol","size","enableLabel","labelYOffset","fillColor","getInheritedColorGenerator","strokeColor","getLabel","usePropertyAccessor","reduce","acc","forEach","pointData","DotsItem","layers","maxValue","gridLevels","gridShape","gridLabelOffset","gridLabel","g","axis","ticks","text","dominantBaseline","enableDots","dotSize","dotColor","dotBorderWidth","dotBorderColor","enableDotLabel","dotLabelYOffset","colors","scheme","isInteractive","sliceTooltip","rows","Chip","TableTooltip","title","legends","role","motionConfig","defs","InnerRadar","indexBy","partialMargin","margin","width","height","dotSymbol","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","useValueFormatter","getColor","useOrdinalColorScale","mapping","keyData","k","boundDefs","bindDefs","keyDatum","keyName","allValues","computedMaxValue","scaleLinear","domain","centerX","centerY","useCurveInterpolation","customLayerProps","legendData","boundLegends","customData","legend","boundData","find","ld","cd","layerById","slices","dots","includes","Fragment","BoxLegendSvg","containerWidth","containerHeight","SvgWrapper","layer","Radar","renderWrapper","otherProps","Container","ResponsiveRadar","ResponsiveWrapper"],"sourceRoot":""}