{"version":3,"file":"efe91cf6703fad396db656d24d0f48444463fb65-6b999560f2b1dd4a0eca.js","mappings":"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","sources":["webpack://nivo-website/./src/data/components/swarmplot/props.ts","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/utils.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/AnnotationNote.tsx","webpack://nivo-website/../src/AnnotationLink.tsx","webpack://nivo-website/../src/CircleAnnotationOutline.tsx","webpack://nivo-website/../src/DotAnnotationOutline.tsx","webpack://nivo-website/../src/RectAnnotationOutline.tsx","webpack://nivo-website/../src/Annotation.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/color.ts","webpack://nivo-website/../src/sets/countryCodes.ts","webpack://nivo-website/../src/sets/names.ts","webpack://nivo-website/../src/sets/programmingLanguages.ts","webpack://nivo-website/../src/bullet.ts","webpack://nivo-website/../src/chord.ts","webpack://nivo-website/../src/network.ts","webpack://nivo-website/../src/parallelCoordinates.ts","webpack://nivo-website/../src/sankey.ts","webpack://nivo-website/../src/swarmplot.ts","webpack://nivo-website/../src/index.ts","webpack://nivo-website/./src/data/components/swarmplot/generator.js","webpack://nivo-website/./src/data/components/swarmplot/mapper.js","webpack://nivo-website/../node_modules/lodash/_arrayShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseFilter.js","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/_baseShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseValues.js","webpack://nivo-website/../node_modules/lodash/_shuffleSelf.js","webpack://nivo-website/../node_modules/lodash/filter.js","webpack://nivo-website/../node_modules/lodash/random.js","webpack://nivo-website/../node_modules/lodash/shuffle.js","webpack://nivo-website/../node_modules/lodash/values.js"],"sourcesContent":["import { defaultProps } from '@nivo/swarmplot'\nimport { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { themeProperty, motionProperties, groupProperties } from '../../../lib/componentProperties'\nimport {\n    chartDimensions,\n    ordinalColors,\n    chartGrid,\n    axes,\n    isInteractive,\n} from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg', 'canvas']\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        help: 'Chart data.',\n        flavors: allFlavors,\n        description: `\n            This Chart's doesn't have a predefined structure,\n            you must use a schema which match \\`groupBy\\`,\n            \\`identity\\` and \\`value\\` properties.\n        `,\n        type: 'object[]',\n        group: 'Base',\n        required: true,\n    },\n    {\n        key: 'id',\n        group: 'Base',\n        flavors: allFlavors,\n        type: 'string | Function',\n        required: false,\n        help: `Property used to retrieve the node's unique identifier.`,\n        description: `\n            This property will determine the identifier of a datum\n            amongst the whole data set, thus, it's really important\n            that it's unique.\n\n            It is especially important to have proper identifier\n            when enabling animations, as it will be used to determine\n            if a node is a new one or should transition from previous\n            to next state.\n        `,\n        defaultValue: defaultProps.id,\n    },\n    {\n        key: 'value',\n        group: 'Base',\n        flavors: allFlavors,\n        type: 'string | Function',\n        required: false,\n        help: `Property used to retrieve the node's value.`,\n        defaultValue: defaultProps.value,\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'string | (value: number) => string | number',\n        control: { type: 'valueFormat' },\n    },\n    {\n        key: 'groups',\n        group: 'Base',\n        flavors: allFlavors,\n        type: 'string[]',\n        required: true,\n        help: 'Available groups.',\n    },\n    {\n        key: 'groupBy',\n        group: 'Base',\n        flavors: allFlavors,\n        type: 'string | Function',\n        required: false,\n        help: 'Propety used to group nodes, must return a group which is available in the groups property.',\n        defaultValue: defaultProps.groupBy,\n    },\n    {\n        key: 'size',\n        group: 'Base',\n        flavors: allFlavors,\n        type: 'number | object | Function',\n        required: false,\n        help: `How to compute node size, static or dynamic.`,\n        description: `\n            If you provide a **number**, all nodes will have the same\n            **fixed size**.\n\n            You can also use an object to define a varying size,\n            it must conform to the following interface:\n\n            \\`\\`\\`\n            {\n                key:    string\n                values: [min: number, max: number]\n                sizes:  [min: number, max: number]\n            }\n            \\`\\`\\`\n\n            Then the size of each node will **depend on the value\n            of \\`key\\` and \\`sizes\\`**.\n\n            If you use a **custom function**, it will receive the current\n            node and must **return a number**.\n        `,\n        defaultValue: defaultProps.size,\n    },\n    {\n        key: 'spacing',\n        help: 'Spacing between nodes.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.spacing,\n        group: 'Base',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 20,\n        },\n    },\n    ...chartDimensions(allFlavors),\n    {\n        key: 'forceStrength',\n        help: 'Force strength.',\n        flavors: allFlavors,\n        description: `\n            This value determine the strength applied on the value\n            axis, using lower value will result in a **more linear\n            arrangement**, however nodes won't be placed accurately\n            according to their values.\n\n            On the other hand, if you increase this value, the\n            simulation will try to **align the nodes with their\n            corresponding values** on the value axis, resulting\n            in a narrower chart.\n\n            Please note that increasing this value will sometimes\n            require to **increase the quality of the simulation**\n            via the \\`simulationIterations\\` property.\n        `,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.forceStrength,\n        group: 'Simulation',\n        control: {\n            type: 'range',\n            step: 0.2,\n            min: 0.2,\n            max: 9,\n        },\n    },\n    {\n        key: 'simulationIterations',\n        help: 'Adjust the simulation quality.',\n        flavors: allFlavors,\n        description: `\n            Increasing this number will result in a **more accurate simulation**,\n            however it will also involve more computing.\n        `,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.simulationIterations,\n        group: 'Simulation',\n        control: {\n            type: 'range',\n            min: 60,\n            max: 260,\n        },\n    },\n    {\n        key: 'layout',\n        help: `Chart layout.`,\n        flavors: allFlavors,\n        type: 'string',\n        required: false,\n        defaultValue: defaultProps.layout,\n        group: 'Layout',\n        control: {\n            type: 'radio',\n            choices: [\n                { label: 'horizontal', value: 'horizontal' },\n                { label: 'vertical', value: 'vertical' },\n            ],\n        },\n    },\n    {\n        key: 'gap',\n        help: 'Gap between each serie.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaultProps.gap,\n        group: 'Layout',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 0,\n            max: 100,\n        },\n    },\n    themeProperty(allFlavors),\n    ordinalColors({\n        flavors: allFlavors,\n        defaultValue: defaultProps.colors as OrdinalColorScaleConfig,\n        description: `\n            The colors property is used to determine the **ordinal color scale**\n            to use to compute nodes' color, it use the serie id as a discriminator.\n\n            You can use a **predefined color scheme**, using the following form:\n\n            \\`\\`\\`\n            colors={{ scheme: 'category10' }}\n            \\`\\`\\`\n\n            Where \\`category10\\` is the identifier of the color scheme.\n            Please have a look at [the dedicated guide](self:/guides/colors)\n            for available schemes.\n\n            If you wish to use **color already defined on the data**\n            you passed to the chart, you can also use this form:\n\n            \\`\\`\\`\n            colors={{ datum: 'color' }}\n            \\`\\`\\`\n\n            Where \\`color\\` is the path to the property containing the color\n            to apply in the current datum.\n\n            You can also use a **custom function** which will receive the current\n            datum and must **return a valid color code**.\n\n            If you pass a string, it will be **used as a color for each and every nodes**.\n        `,\n    }),\n    {\n        key: 'colorBy',\n        group: 'Style',\n        help: 'Property or accessor function to be used with colors.',\n        flavors: allFlavors,\n        description: `\n            When using a color scheme or an array of colors,\n            you'll generate a color scale, this scale will\n            receive a value which will be translated to a color.\n\n            This property define the way we get this value,\n            it can be either a \\`string\\` or a custom function.\n\n            Please have a look at [the colors guide](self:/guides/colors)\n            for further information.\n        `,\n        type: `Function | string`,\n        required: false,\n        defaultValue: defaultProps.colorBy,\n        control: {\n            type: 'choices',\n            choices: ['group', 'id'].map(key => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'borderWidth',\n        help: 'Control node border width.',\n        flavors: allFlavors,\n        type: 'number | Function',\n        required: false,\n        defaultValue: defaultProps.borderWidth,\n        control: { type: 'lineWidth' },\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Control node border color.',\n        flavors: allFlavors,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaultProps.borderColor,\n        control: { type: 'inheritedColor' },\n        group: 'Style',\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        flavors: allFlavors,\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            Defines the order of layers, available layers are:\n            \\`grid\\`, \\`axes\\`, \\`nodes\\`, \\`mesh\\`.\n\n            You can also use this to insert extra layers\n            to the chart, the extra layer must be a function.\n\n            The layer function which will receive the chart's\n            context & computed data and must return a valid SVG element\n            for the \\`SwarmPlot\\` component.\n\n            When using the canvas implementation, the function\n            will receive the canvas 2d context as first argument\n            and the chart's context and computed data as second.\n\n            Please make sure to use \\`context.save()\\` and\n            \\`context.restore()\\` if you make some global\n            modifications to the 2d context inside this function\n            to avoid side effects.\n\n            You can see a live example of custom layers\n            [here](storybook:/swarmplot--extra-layers).\n        `,\n        required: false,\n        type: 'Array<string | Function>',\n        defaultValue: defaultProps.layers,\n    },\n    {\n        key: 'circleComponent',\n        group: 'Customization',\n        flavors: ['svg'],\n        help: 'Override default circle component for the SVG implementation.',\n        description: `\n            This property can be used to completely\n            customize the way nodes are rendered.\n\n            You should return a valid SVG node.\n\n            You can see a live example of custom circle component\n            [here](storybook:/swarmplot--custom-circle-component).\n        `,\n        required: false,\n        type: 'Component',\n    },\n    {\n        key: 'renderCircle',\n        group: 'Customization',\n        flavors: ['canvas'],\n        help: 'Override default circle rendering for the canvas implementation.',\n        description: `\n            This property can be used to completely\n            customize the way nodes are rendered.\n\n            The rendering function will receive the canvas 2d\n            context as first argument.\n\n            Please make sure to use \\`context.save()\\` and\n            \\`context.restore()\\` if you make some global\n            modifications to the 2d context inside this function\n            to avoid side effects.\n        `,\n        required: false,\n        type: 'Function',\n    },\n    ...chartGrid({\n        flavors: allFlavors,\n        values: true,\n        xDefault: defaultProps.enableGridX,\n        yDefault: defaultProps.enableGridY,\n    }),\n    ...axes({ flavors: allFlavors }),\n    isInteractive({\n        flavors: ['svg', 'canvas'],\n        defaultValue: defaultProps.isInteractive,\n    }),\n    {\n        key: 'useMesh',\n        help: 'Use a mesh to detect mouse interactions, always true for canvas.',\n        flavors: ['svg'],\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.useMesh,\n        control: { type: 'switch' },\n        group: 'Interactivity',\n    },\n    {\n        key: 'debugMesh',\n        help: 'Display the mesh used to detect mouse interactions (voronoi cells), depends on useMesh.',\n        flavors: allFlavors,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaultProps.debugMesh,\n        control: { type: 'switch' },\n        group: 'Interactivity',\n    },\n    {\n        key: 'onMouseEnter',\n        group: 'Interactivity',\n        flavors: allFlavors,\n        help: 'onMouseEnter handler.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        group: 'Interactivity',\n        flavors: allFlavors,\n        help: 'onMouseMove handler.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        group: 'Interactivity',\n        flavors: allFlavors,\n        help: 'onMouseLeave handler.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        group: 'Interactivity',\n        flavors: allFlavors,\n        help: 'onClick handler.',\n        type: '(node, event) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        flavors: allFlavors,\n        type: 'Function',\n        required: false,\n        help: 'Custom tooltip component.',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML\n            element and will receive the node's data.\n        `,\n    },\n    ...motionProperties(['svg'], defaultProps, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","export const defaultProps = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 13,\n}\n","import {\n    AnnotationSpec,\n    CircleAnnotationSpec,\n    DotAnnotationSpec,\n    Note,\n    NoteCanvas,\n    NoteSvg,\n    RectAnnotationSpec,\n} from './types'\nimport { isValidElement } from 'react'\n\nexport const isSvgNote = <Datum>(note: Note<Datum>): note is NoteSvg<Datum> => {\n    const noteType = typeof note\n\n    return (\n        isValidElement(note) ||\n        noteType === 'string' ||\n        noteType === 'function' ||\n        noteType === 'object'\n    )\n}\n\nexport const isCanvasNote = <Datum>(note: Note<Datum>): note is NoteCanvas<Datum> => {\n    const noteType = typeof note\n\n    return noteType === 'string' || noteType === 'function'\n}\n\nexport const isCircleAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is CircleAnnotationSpec<Datum> => annotationSpec.type === 'circle'\n\nexport const isDotAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is DotAnnotationSpec<Datum> => annotationSpec.type === 'dot'\n\nexport const isRectAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is RectAnnotationSpec<Datum> => annotationSpec.type === 'rect'\n","import { filter, isNumber, omit } from 'lodash'\nimport {\n    radiansToDegrees,\n    absoluteAngleDegrees,\n    degreesToRadians,\n    positionFromAngle,\n} from '@nivo/core'\nimport { defaultProps } from './props'\nimport {\n    AnnotationSpec,\n    AnnotationPositionGetter,\n    AnnotationDimensionsGetter,\n    BoundAnnotation,\n    AnnotationMatcher,\n    AnnotationInstructions,\n} from './types'\nimport { isCircleAnnotation, isRectAnnotation } from './utils'\n\nexport const bindAnnotations = <\n    Datum = {\n        x: number\n        y: number\n    }\n>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}): BoundAnnotation<Datum>[] =>\n    annotations.reduce((acc: BoundAnnotation<Datum>[], annotation) => {\n        const offset = annotation.offset || 0\n\n        return [\n            ...acc,\n            ...filter<Datum>(data, annotation.match).map(datum => {\n                const position = getPosition(datum)\n                const dimensions = getDimensions(datum)\n\n                if (isCircleAnnotation(annotation) || isRectAnnotation(annotation)) {\n                    dimensions.size = dimensions.size + offset * 2\n                    dimensions.width = dimensions.width + offset * 2\n                    dimensions.height = dimensions.height + offset * 2\n                }\n\n                // acc.push({\n                //     ...omit(annotation, ['match', 'offset']),\n                //     ...position,\n                //     ...dimensions,\n                //     size: annotation.size || dimensions.size,\n                //     datum,\n                // } as any)\n                // return [\n                //     ...acc,\n                //     {\n                //         ...omit(annotation, ['match', 'offset']),\n                //         ...position,\n                //         ...dimensions,\n                //         size: annotation.size || dimensions.size,\n                //         datum,\n                //     },\n                // ]\n                return {\n                    ...omit(annotation, ['match', 'offset']),\n                    ...position,\n                    ...dimensions,\n                    size: annotation.size || dimensions.size,\n                    datum,\n                } as Required<BoundAnnotation<Datum>>\n            }),\n        ]\n\n        // return acc\n    }, [])\n\nexport const getLinkAngle = (\n    sourceX: number,\n    sourceY: number,\n    targetX: number,\n    targetY: number\n) => {\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX)\n\n    return absoluteAngleDegrees(radiansToDegrees(angle))\n}\n\nexport const computeAnnotation = <Datum>(\n    annotation: Required<AnnotationSpec<Datum>>\n): AnnotationInstructions => {\n    const {\n        x,\n        y,\n        noteX,\n        noteY,\n        noteWidth = defaultProps.noteWidth,\n        noteTextOffset = defaultProps.noteTextOffset,\n    } = annotation\n\n    let computedNoteX: number\n    let computedNoteY: number\n\n    if (isNumber(noteX)) {\n        computedNoteX = x + noteX\n    } else if (noteX.abs !== undefined) {\n        computedNoteX = noteX.abs\n    } else {\n        throw new Error(`noteX should be either a number or an object containing an 'abs' property`)\n    }\n\n    if (isNumber(noteY)) {\n        computedNoteY = y + noteY\n    } else if (noteY.abs !== undefined) {\n        computedNoteY = noteY.abs\n    } else {\n        throw new Error(`noteY should be either a number or an object containing an 'abs' property`)\n    }\n\n    let computedX = x\n    let computedY = y\n\n    const angle = getLinkAngle(x, y, computedNoteX, computedNoteY)\n\n    if (isCircleAnnotation<Datum>(annotation)) {\n        const position = positionFromAngle(degreesToRadians(angle), annotation.size / 2)\n        computedX += position.x\n        computedY += position.y\n    }\n\n    if (isRectAnnotation<Datum>(annotation)) {\n        const eighth = Math.round((angle + 90) / 45) % 8\n        if (eighth === 0) {\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 1) {\n            computedX += annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 2) {\n            computedX += annotation.width / 2\n        }\n        if (eighth === 3) {\n            computedX += annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 4) {\n            computedY += annotation.height / 2\n        }\n        if (eighth === 5) {\n            computedX -= annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 6) {\n            computedX -= annotation.width / 2\n        }\n        if (eighth === 7) {\n            computedX -= annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n    }\n\n    let textX = computedNoteX\n    const textY = computedNoteY - noteTextOffset\n\n    let noteLineX = computedNoteX\n    const noteLineY = computedNoteY\n\n    if ((angle + 90) % 360 > 180) {\n        textX -= noteWidth\n        noteLineX -= noteWidth\n    } else {\n        noteLineX += noteWidth\n    }\n\n    return {\n        points: [\n            [computedX, computedY],\n            [computedNoteX, computedNoteY],\n            [noteLineX, noteLineY],\n        ] as [number, number][],\n        text: [textX, textY],\n        angle: angle + 90,\n    }\n}\n","import { useMemo } from 'react'\nimport { bindAnnotations, computeAnnotation } from './compute'\nimport {\n    AnnotationDimensionsGetter,\n    AnnotationMatcher,\n    AnnotationPositionGetter,\n    AnnotationSpec,\n} from './types'\n\n/**\n * Bind annotations to a dataset.\n */\nexport const useAnnotations = <Datum>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}) =>\n    useMemo(\n        () =>\n            bindAnnotations<Datum>({\n                data,\n                annotations,\n                getPosition,\n                getDimensions,\n            }),\n        [data, annotations, getPosition, getDimensions]\n    )\n\nexport const useComputedAnnotations = <Datum>({\n    annotations,\n}: {\n    annotations: Required<AnnotationSpec<Datum>>[]\n}) =>\n    useMemo(\n        () =>\n            annotations.map(annotation => ({\n                ...annotation,\n                computed: computeAnnotation<Datum>({\n                    ...annotation,\n                }),\n            })),\n        [annotations]\n    )\n\nexport const useComputedAnnotation = <Datum>(annotation: Required<AnnotationSpec<Datum>>) =>\n    useMemo(() => computeAnnotation<Datum>(annotation), [annotation])\n","import { createElement } from 'react'\nimport omit from 'lodash/omit'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { NoteSvg } from './types'\n\nexport const AnnotationNote = <Datum,>({\n    datum,\n    x,\n    y,\n    note,\n}: {\n    datum: Datum\n    x: number\n    y: number\n    note: NoteSvg<Datum>\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    if (typeof note === 'function') {\n        return createElement(note, { x, y, datum })\n    }\n\n    return (\n        <>\n            {theme.annotations.text.outlineWidth > 0 && (\n                <animated.text\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    style={{\n                        ...theme.annotations.text,\n                        strokeLinejoin: 'round',\n                        strokeWidth: theme.annotations.text.outlineWidth * 2,\n                        stroke: theme.annotations.text.outlineColor,\n                    }}\n                >\n                    {note}\n                </animated.text>\n            )}\n            <animated.text\n                x={animatedProps.x}\n                y={animatedProps.y}\n                style={omit(theme.annotations.text, ['outlineWidth', 'outlineColor'])}\n            >\n                {note}\n            </animated.text>\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath, useTheme } from '@nivo/core'\n\nexport const AnnotationLink = ({\n    points,\n    isOutline = false,\n}: {\n    points: [number, number][]\n    isOutline?: boolean\n}) => {\n    const theme = useTheme()\n\n    const path = useMemo(() => {\n        const [firstPoint, ...otherPoints] = points\n\n        return otherPoints.reduce(\n            (acc, [x, y]) => `${acc} L${x},${y}`,\n            `M${firstPoint[0]},${firstPoint[1]}`\n        )\n    }, [points])\n\n    const animatedPath = useAnimatedPath(path)\n\n    if (isOutline && theme.annotations.link.outlineWidth <= 0) {\n        return null\n    }\n\n    const style = { ...theme.annotations.link }\n    if (isOutline) {\n        style.strokeLinecap = 'square'\n        style.strokeWidth =\n            theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n        style.stroke = theme.annotations.link.outlineColor\n    }\n\n    return <animated.path fill=\"none\" d={animatedPath} style={style} />\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const CircleAnnotationOutline = ({ x, y, size }: { x: number; y: number; size: number }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { defaultProps } from './props'\n\nexport const DotAnnotationOutline = ({\n    x,\n    y,\n    size = defaultProps.dotSize,\n}: {\n    x: number\n    y: number\n    size?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth: theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.symbol}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const RectAnnotationOutline = ({\n    x,\n    y,\n    width,\n    height,\n}: {\n    x: number\n    y: number\n    width: number\n    height: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x: x - width / 2,\n        y: y - height / 2,\n        width,\n        height,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.rect\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    width={animatedProps.width}\n                    height={animatedProps.height}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                    }}\n                />\n            )}\n            <animated.rect\n                x={animatedProps.x}\n                y={animatedProps.y}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useComputedAnnotation } from './hooks'\nimport { AnnotationNote } from './AnnotationNote'\nimport { AnnotationLink } from './AnnotationLink'\nimport { CircleAnnotationOutline } from './CircleAnnotationOutline'\nimport { DotAnnotationOutline } from './DotAnnotationOutline'\nimport { RectAnnotationOutline } from './RectAnnotationOutline'\nimport { BoundAnnotation } from './types'\nimport { isCircleAnnotation, isDotAnnotation, isRectAnnotation, isSvgNote } from './utils'\n\nexport const Annotation = <Datum,>(annotation: BoundAnnotation<Datum>) => {\n    const { datum, x, y, note } = annotation\n    const computed = useComputedAnnotation(annotation)\n\n    if (!isSvgNote(note)) {\n        throw new Error('note should be a valid react element')\n    }\n\n    return (\n        <>\n            <AnnotationLink points={computed.points} isOutline={true} />\n            {isCircleAnnotation(annotation) && (\n                <CircleAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isDotAnnotation(annotation) && (\n                <DotAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isRectAnnotation(annotation) && (\n                <RectAnnotationOutline\n                    x={x}\n                    y={y}\n                    width={annotation.width}\n                    height={annotation.height}\n                />\n            )}\n            <AnnotationLink points={computed.points} />\n            <AnnotationNote datum={datum} x={computed.text[0]} y={computed.text[1]} note={note} />\n        </>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { ComputedAnnotation } from './types'\nimport { isCanvasNote, isCircleAnnotation, isDotAnnotation, isRectAnnotation } from './utils'\n\nconst drawPoints = (ctx: CanvasRenderingContext2D, points: [number, number][]) => {\n    points.forEach(([x, y], index) => {\n        if (index === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    })\n}\n\nexport const renderAnnotationsToCanvas = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        annotations,\n        theme,\n    }: {\n        annotations: ComputedAnnotation<Datum>[]\n        theme: CompleteTheme\n    }\n) => {\n    if (annotations.length === 0) return\n\n    ctx.save()\n    annotations.forEach(annotation => {\n        if (!isCanvasNote(annotation.note)) {\n            throw new Error('note is invalid for canvas implementation')\n        }\n\n        if (theme.annotations.link.outlineWidth > 0) {\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.annotations.link.outlineColor\n            ctx.lineWidth =\n                theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n            ctx.beginPath()\n            drawPoints(ctx, annotation.computed.points)\n            ctx.stroke()\n            ctx.lineCap = 'butt'\n        }\n\n        if (isCircleAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation) && theme.annotations.symbol.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.symbol.outlineColor\n            ctx.lineWidth = theme.annotations.symbol.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isRectAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        ctx.strokeStyle = theme.annotations.link.stroke\n        ctx.lineWidth = theme.annotations.link.strokeWidth\n        ctx.beginPath()\n        drawPoints(ctx, annotation.computed.points)\n        ctx.stroke()\n\n        if (isCircleAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation)) {\n            ctx.fillStyle = theme.annotations.symbol.fill\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.fill()\n        }\n\n        if (isRectAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        if (typeof annotation.note === 'function') {\n            annotation.note(ctx, {\n                datum: annotation.datum,\n                x: annotation.computed.text[0],\n                y: annotation.computed.text[1],\n                theme,\n            })\n        } else {\n            ctx.font = `${theme.annotations.text.fontSize}px ${theme.annotations.text.fontFamily}`\n            ctx.fillStyle = theme.annotations.text.fill\n            ctx.strokeStyle = theme.annotations.text.outlineColor\n            ctx.lineWidth = theme.annotations.text.outlineWidth * 2\n            if (theme.annotations.text.outlineWidth > 0) {\n                ctx.lineJoin = 'round'\n                ctx.strokeText(\n                    annotation.note,\n                    annotation.computed.text[0],\n                    annotation.computed.text[1]\n                )\n                ctx.lineJoin = 'miter'\n            }\n            ctx.fillText(annotation.note, annotation.computed.text[0], annotation.computed.text[1])\n        }\n    })\n    ctx.restore()\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","export const randColor = () => `hsl(${Math.round(Math.random() * 360)}, 70%, 50%)`\n","export const countryCodes = [\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AS',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CC',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CU',\n    'CV',\n    'CW',\n    'CX',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FM',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HM',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IR',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KP',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MH',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MP',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NF',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PW',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SY',\n    'SZ',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'UM',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VI',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n]\n","export const names = [\n    'John',\n    'Raoul',\n    'Jane',\n    'Marcel',\n    'Ibrahim',\n    'Junko',\n    'Lyu',\n    'André',\n    'Maki',\n    'Véronique',\n    'Thibeau',\n    'Josiane',\n    'Raphaël',\n    'Mathéo',\n    'Margot',\n    'Hugo',\n    'Christian',\n    'Louis',\n    'Ella',\n    'Alton',\n    'Jimmy',\n    'Guillaume',\n    'Sébastien',\n    'Alfred',\n    'Bon',\n    'Solange',\n    'Kendrick',\n    'Jared',\n    'Satoko',\n    'Tomoko',\n    'Line',\n    'Delphine',\n    'Leonard',\n    'Alphonse',\n    'Lisa',\n    'Bart',\n    'Benjamin',\n    'Homer',\n    'Jack',\n]\n","export const programmingLanguages = [\n    'php',\n    'make',\n    'javascript',\n    'go',\n    'erlang',\n    'elixir',\n    'lisp',\n    'haskell',\n    'python',\n    'ruby',\n    'hack',\n    'scala',\n    'java',\n    'rust',\n    'c',\n    'css',\n    'sass',\n    'stylus',\n]\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\ntype Options = Partial<{\n    float: boolean\n    markerCount: number\n    measureCount: number\n    rangeCount: number\n    subtitle: string\n    title: string\n}>\n\nexport const generateBulletData = (\n    id: string,\n    max: number,\n    {\n        title,\n        subtitle,\n        rangeCount = 5,\n        measureCount = 1,\n        markerCount = 1,\n        float = false,\n    }: Options = {}\n) => {\n    const ranges = range(rangeCount - 1).reduce(\n        acc => {\n            const remaining = max - acc[0]\n            return [random(remaining, float), ...acc]\n        },\n        [max]\n    )\n\n    const measures = range(measureCount).reduce<number[]>(acc => {\n        if (acc.length === 0) return [random(max, float)]\n        return [random(acc[0], float), ...acc]\n    }, [])\n\n    const markers = range(markerCount).map(() => max * 0.6 + random(max * 0.4))\n\n    return {\n        id,\n        title,\n        subtitle,\n        ranges,\n        measures,\n        markers,\n    }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport { names } from './sets'\n\nexport const generateChordData = ({\n    keys = names,\n    size = 7,\n    minValue = 0,\n    maxValue = 2000,\n} = {}) => {\n    const maxSize = Math.min(keys.length, size)\n    const selectedKeys = keys.slice(0, maxSize)\n\n    const matrix = range(maxSize).map(() =>\n        range(maxSize).map(() => {\n            if (Math.random() < 0.66) return random(minValue, maxValue / 4)\n            return random(minValue, maxValue)\n        })\n    )\n\n    return { matrix, keys: selectedKeys }\n}\n","import random from 'lodash/random'\n\ntype Link = {\n    distance: number\n    source: string\n    target: string\n}\n\ntype ExtraNode = {\n    color: string\n    depth: number\n    id: string\n    radius: number\n}\n\nexport const generateNetworkData = ({\n    rootNodeRadius = 12,\n    minMidNodes = 6,\n    maxMidNodes = 16,\n    midNodeRadius = 8,\n    minLeaves = 4,\n    maxLeaves = 16,\n    leafRadius = 4,\n} = {}) => {\n    const rootNode = {\n        id: '0',\n        radius: rootNodeRadius,\n        depth: 0,\n        color: 'rgb(244, 117, 96)',\n    }\n    let nodes = Array.from({ length: random(minMidNodes, maxMidNodes) }, (_, k) => ({\n        id: `${k + 1}`,\n        radius: midNodeRadius,\n        depth: 1,\n        color: 'rgb(97, 205, 187)',\n    }))\n\n    const links: Link[] = []\n    const extraNodes: ExtraNode[] = []\n    nodes.forEach(source => {\n        links.push({\n            source: '0',\n            target: source.id,\n            distance: 50,\n        })\n        nodes.forEach(target => {\n            if (Math.random() < 0.04) {\n                links.push({\n                    source: source.id,\n                    target: target.id,\n                    distance: 70,\n                })\n            }\n        })\n        Array.from({ length: random(minLeaves, maxLeaves) }, (_, k) => {\n            extraNodes.push({\n                id: `${source.id}.${k}`,\n                radius: leafRadius,\n                depth: 2,\n                color: 'rgb(232, 193, 160)',\n            })\n            links.push({\n                source: source.id,\n                target: `${source.id}.${k}`,\n                distance: 30,\n            })\n\n            return null\n        })\n    })\n\n    nodes.push(rootNode)\n    nodes = nodes.concat(extraNodes)\n\n    return { nodes, links }\n}\n","import random from 'lodash/random'\nimport range from 'lodash/range'\nimport shuffle from 'lodash/shuffle'\n\ntype Options = Partial<{\n    size: number\n    keys: Array<{\n        key: string\n        random?: [number, number]\n        shuffle?: string[]\n    }>\n}>\n\nexport const generateParallelCoordinatesData = ({\n    size = 26,\n    keys = [\n        { key: 'temp', random: [-10, 40] },\n        { key: 'cost', random: [200, 400000] },\n        { key: 'color', shuffle: ['red', 'yellow', 'green'] },\n        { key: 'target', shuffle: ['A', 'B', 'C', 'D', 'E'] },\n        { key: 'volume', random: [0.2, 7.6] },\n    ],\n}: Options = {}) => {\n    const datumGenerator = () =>\n        keys.reduce((acc, key) => {\n            let value\n            if (key.random !== undefined) {\n                value = random(...key.random)\n            } else if (key.shuffle !== undefined) {\n                value = shuffle(key.shuffle)[0]\n            }\n\n            return { ...acc, [key.key]: value }\n        }, {})\n\n    return range(size).map(datumGenerator)\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { randColor } from './color'\nimport { names } from './sets'\n\ntype Link = {\n    source: string\n    target: string\n    value: number\n}\n\nconst availableNodes = names.map(name => ({ id: name }))\n\nconst getNodeTargets = (id: string, links: Link[], currentPath?: string[]): string[] => {\n    const targets = links\n        .filter(({ source }) => source === id)\n        .map(({ target }) => {\n            if (target === id) {\n                throw new Error(\n                    `[sankey] a node cannot be linked on itself:\\n  link: ${id} —> ${id}`\n                )\n            }\n            if (currentPath?.includes(target)) {\n                throw new Error(\n                    `[sankey] found cyclic dependency:\\n  link: ${currentPath.join(\n                        ' —> '\n                    )} —> ${target}`\n                )\n            }\n            return target\n        })\n\n    return targets.reduce(\n        (acc, targetId) =>\n            acc.concat(\n                getNodeTargets(\n                    targetId,\n                    links,\n                    currentPath ? [...currentPath, targetId] : [id, targetId]\n                )\n            ),\n        targets\n    )\n}\n\nconst getNodesTargets = (links: Link[]) =>\n    links.reduce<Record<string, string[]>>((targetsById, link) => {\n        if (!targetsById[link.source]) {\n            targetsById[link.source] = getNodeTargets(link.source, links)\n        }\n\n        return targetsById\n    }, {})\n\nexport const generateSankeyData = ({\n    nodeCount,\n    maxIterations = 3,\n}: {\n    nodeCount?: number\n    maxIterations?: number\n} = {}) => {\n    const nodes = availableNodes.slice(0, nodeCount).map(node =>\n        Object.assign({}, node, {\n            nodeColor: randColor(),\n        })\n    )\n\n    const links: Link[] = []\n    shuffle(nodes).forEach(({ id }) => {\n        range(random(1, maxIterations)).forEach(() => {\n            const targetsById = getNodesTargets(links)\n            const randId = shuffle(nodes.filter(n => n.id !== id).map(n => n.id))[0]\n            if (\n                (!targetsById[randId] || !targetsById[randId].includes(id)) &&\n                (!targetsById[id] || !targetsById[id].includes(randId))\n            ) {\n                links.push({\n                    source: id,\n                    target: randId,\n                    value: random(5, 200),\n                })\n            }\n        })\n    })\n\n    return { nodes, links }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\n\ntype SwarmPlotDatum = {\n    id: string\n    categories?: number[]\n    group: string\n    price: number\n    volume: number\n}\n\nconst randomPrice = () => random(0, 500)\nconst randomVolume = () => random(4, 20)\nconst randomCategory = () => random(3, 17)\n\nexport const generateSwarmPlotData = (\n    groups: string[],\n    { min = 60, max = 100, categoryCount = 0 }\n) => ({\n    groups,\n    data: groups.reduce<SwarmPlotDatum[]>(\n        (acc, group, groupIndex) => [\n            ...acc,\n            ...range(random(min, max))\n                .map(() => randomPrice())\n                .map((price, index) => {\n                    const datum: SwarmPlotDatum = {\n                        id: `${groupIndex}.${index}`,\n                        group,\n                        price,\n                        volume: randomVolume(),\n                    }\n\n                    if (categoryCount > 0) {\n                        datum.categories = range(categoryCount).map(randomCategory)\n                    }\n\n                    return datum\n                }),\n        ],\n        []\n    ),\n})\n\nexport const randomizeSwarmPlotData = (previousData: ReturnType<typeof generateSwarmPlotData>) => ({\n    groups: previousData.groups,\n    data: previousData.data.map(d => {\n        const datum = {\n            ...d,\n            group: shuffle(previousData.groups)[0],\n            price: randomPrice(),\n            volume: randomVolume(),\n        }\n\n        if (d.categories !== undefined) {\n            datum.categories = range(3).map(randomCategory)\n        }\n\n        return datum\n    }),\n})\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { timeDays } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport * as color from './color'\nimport * as sets from './sets'\n\nexport { sets }\nexport const randColor = color.randColor\n\nexport const generateProgrammingLanguageStats = (shouldShuffle = true, limit = -1) => {\n    let langs = sets.programmingLanguages\n    if (shouldShuffle) {\n        langs = shuffle(langs)\n    }\n    if (limit < 1) {\n        limit = 1 + Math.round(Math.random() * (sets.programmingLanguages.length - 1))\n    }\n\n    return langs.slice(0, limit).map(language => ({\n        label: language,\n        value: Math.round(Math.random() * 600),\n        color: randColor(),\n    }))\n}\n\nexport const uniqRand = <T>(generator: (...args: unknown[]) => T) => {\n    const used: T[] = []\n\n    return (...args: unknown[]) => {\n        let value\n        do {\n            value = generator(...args)\n        } while (used.includes(value))\n\n        used.push(value)\n\n        return value\n    }\n}\n\nexport const randCountryCode = () => shuffle(sets.countryCodes)[0]\n\ntype DrinkDatum = {\n    id: string\n    color: string\n    data: Array<{\n        color: string\n        x: string\n        y: number\n    }>\n}\n\nexport const generateDrinkStats = (xSize = 16) => {\n    const rand = () => random(0, 60)\n    const types = ['whisky', 'rhum', 'gin', 'vodka', 'cognac']\n    const country = uniqRand(randCountryCode)\n\n    const data: DrinkDatum[] = types.map(id => ({\n        id,\n        color: randColor(),\n        data: [],\n    }))\n\n    range(xSize).forEach(() => {\n        const x = country()\n        types.forEach(id => {\n            data.find(d => d.id === id)?.data.push({\n                color: randColor(),\n                x,\n                y: rand(),\n            })\n        })\n    })\n\n    return data\n}\n\nexport const generateSerie = (xSize = 20) => {\n    const max = 100 + Math.random() * (Math.random() * 600)\n\n    return range(xSize).map(() => Math.round(Math.random() * max))\n}\n\nexport const generateSeries = (ids: string[], xKeys: string[]) =>\n    ids.map(id => ({\n        id,\n        color: randColor(),\n        data: xKeys.map(x => ({ x, y: Math.round(Math.random() * 300) })),\n    }))\n\nexport const generateStackData = (size = 3) => {\n    const length = 16\n    return range(size).map(() => generateSerie(length).map((v, i) => ({ x: i, y: v })))\n}\n\nexport const generateCountriesPopulation = (size: number) => {\n    const countryCode = uniqRand(randCountryCode)\n\n    return range(size).map(() => ({\n        country: countryCode(),\n        population: 200 + Math.round(Math.random() * Math.random() * 1000000),\n    }))\n}\n\nexport const generateOrderedDayCounts = (from: Date, to: Date) => {\n    const days = timeDays(from, to)\n    const dayFormat = timeFormat('%Y-%m-%d')\n\n    return days.map(day => {\n        return {\n            value: Math.round(Math.random() * 400),\n            day: dayFormat(day),\n        }\n    })\n}\n\nexport const generateDayCounts = (from: Date, to: Date, maxSize = 0.9) => {\n    const days = generateOrderedDayCounts(from, to)\n\n    const size =\n        Math.round(days.length * (maxSize * 0.4)) +\n        Math.round(Math.random() * (days.length * (maxSize * 0.6)))\n\n    return shuffle(days).slice(0, size)\n}\n\nexport const generateCountriesData = (\n    keys: string[],\n    { size = 12, min = 0, max = 200, withColors = true } = {}\n) =>\n    sets.countryCodes.slice(0, size).map(country => {\n        const d: Record<string, unknown> = {\n            country,\n        }\n        keys.forEach(key => {\n            d[key] = random(min, max)\n            if (withColors === true) {\n                d[`${key}Color`] = randColor()\n            }\n        })\n\n        return d\n    })\n\nconst libTreeItems = [\n    [\n        'viz',\n        [\n            ['stack', [['cchart'], ['xAxis'], ['yAxis'], ['layers']]],\n            [\n                'ppie',\n                [\n                    ['chart', [['pie', [['outline'], ['slices'], ['bbox']]], ['donut'], ['gauge']]],\n                    ['legends'],\n                ],\n            ],\n        ],\n    ],\n    ['colors', [['rgb'], ['hsl']]],\n    [\n        'utils',\n        [['randomize'], ['resetClock'], ['noop'], ['tick'], ['forceGC'], ['stackTrace'], ['dbg']],\n    ],\n    ['generators', [['address'], ['city'], ['animal'], ['movie'], ['user']]],\n    [\n        'set',\n        [\n            ['clone'],\n            ['intersect'],\n            ['merge'],\n            ['reverse'],\n            ['toArray'],\n            ['toObject'],\n            ['fromCSV'],\n            ['slice'],\n            ['append'],\n            ['prepend'],\n            ['shuffle'],\n            ['pick'],\n            ['plouc'],\n        ],\n    ],\n    [\n        'text',\n        [\n            ['trim'],\n            ['slugify'],\n            ['snakeCase'],\n            ['camelCase'],\n            ['repeat'],\n            ['padLeft'],\n            ['padRight'],\n            ['sanitize'],\n            ['ploucify'],\n        ],\n    ],\n    [\n        'misc',\n        [\n            ['greetings', [['hey'], ['HOWDY'], ['aloha'], ['AHOY']]],\n            ['other'],\n            [\n                'path',\n                [\n                    ['pathA'],\n                    ['pathB', [['pathB1'], ['pathB2'], ['pathB3'], ['pathB4']]],\n                    [\n                        'pathC',\n                        [\n                            ['pathC1'],\n                            ['pathC2'],\n                            ['pathC3'],\n                            ['pathC4'],\n                            ['pathC5'],\n                            ['pathC6'],\n                            ['pathC7'],\n                            ['pathC8'],\n                            ['pathC9'],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n]\n\nexport const generateLibTree = (name = 'nivo', limit?: number | null, children = libTreeItems) => {\n    limit = limit || children.length\n    if (limit > children.length) {\n        limit = children.length\n    }\n\n    const tree: Record<string, unknown> = {\n        name,\n        color: randColor(),\n    }\n    if (children?.length > 0) {\n        tree.children = range(limit).map((_, i) => {\n            const leaf = children[i]\n\n            // full path `${name}.${leaf[0]}`\n            return generateLibTree(leaf[0] as string, null, (leaf[1] ?? []) as any)\n        })\n    } else {\n        tree.loc = Math.round(Math.random() * 200000)\n    }\n\n    return tree\n}\n\nconst wines = ['chardonay', 'carmenere', 'syrah']\nconst wineTastes = ['fruity', 'bitter', 'heavy', 'strong', 'sunny']\n\nexport const generateWinesTastes = ({ randMin = 20, randMax = 120 } = {}) => {\n    const data = wineTastes.map(taste => {\n        const d: Record<string, unknown> = { taste }\n        wines.forEach(wine => {\n            d[wine] = random(randMin, randMax)\n        })\n\n        return d\n    })\n\n    return { data, keys: wines }\n}\n\nexport * from './bullet'\nexport * from './chord'\nexport * from './network'\nexport * from './parallelCoordinates'\nexport * from './sankey'\nexport * from './swarmplot'\n","import { generateSwarmPlotData, randomizeSwarmPlotData } from '@nivo/generators'\n\nconst allGroups = ['group A', 'group B', 'group C', 'group D', 'group E', 'group F', 'group G']\n\nexport const generateLightDataSet = previousData => {\n    if (previousData !== undefined) return randomizeSwarmPlotData(previousData)\n\n    return generateSwarmPlotData(allGroups.slice(0, 3), { min: 50, max: 80 })\n}\n\nexport const generateHeavyDataSet = previousData => {\n    if (previousData !== undefined) return randomizeSwarmPlotData(previousData)\n\n    return generateSwarmPlotData(allGroups, { min: 60, max: 100 })\n}\n","import { settingsMapper, mapAxis, mapFormat } from '../../../lib/settings'\n\nexport default settingsMapper({\n    valueFormat: mapFormat,\n    axisTop: mapAxis('top'),\n    axisRight: mapAxis('right'),\n    axisBottom: mapAxis('bottom'),\n    axisLeft: mapAxis('left'),\n})\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n"],"names":["allFlavors","props","key","help","flavors","description","type","group","required","defaultValue","defaultProps","control","unit","min","max","chartDimensions","step","choices","label","value","themeProperty","ordinalColors","map","chartGrid","values","xDefault","yDefault","axes","isInteractive","motionProperties","groups","groupProperties","isCircleAnnotation","annotationSpec","isDotAnnotation","isRectAnnotation","computeAnnotation","annotation","computedNoteX","computedNoteY","x","y","noteX","noteY","noteWidth","noteTextOffset","_isNumber","abs","Error","computedX","computedY","angle","sourceX","sourceY","targetX","targetY","Math","atan2","absoluteAngleDegrees","radiansToDegrees","getLinkAngle","position","positionFromAngle","degreesToRadians","size","eighth","round","height","width","textX","noteLineX","points","text","useAnnotations","data","annotations","getPosition","getDimensions","useMemo","reduce","acc","offset","_filter","match","datum","dimensions","_omit","bindAnnotations","useComputedAnnotations","computed","AnnotationNote","note","theme","useTheme","useMotionConfig","animate","springConfig","config","animatedProps","useSpring","immediate","createElement","_jsxs","outlineWidth","_jsx","animated","style","strokeLinejoin","strokeWidth","stroke","outlineColor","omit","AnnotationLink","isOutline","path","firstPoint","animatedPath","useAnimatedPath","link","strokeLinecap","fill","d","CircleAnnotationOutline","radius","outline","circle","cx","cy","r","DotAnnotationOutline","dotSize","symbol","RectAnnotationOutline","rect","Annotation","useComputedAnnotation","noteType","isValidElement","isSvgNote","drawPoints","ctx","forEach","index","moveTo","lineTo","renderAnnotationsToCanvas","length","save","isCanvasNote","lineCap","strokeStyle","lineWidth","beginPath","arc","PI","fillStyle","font","fontSize","fontFamily","lineJoin","strokeText","fillText","restore","computeCartesianTicks","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","getScaleTicks","textProps","textPropsByEngine","centerScale","line","lineX","lineY","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","top","bottom","left","right","ticks","getFormatter","format","formatter","timeFormat","Date","d3Format","computeGridLines","_values","Array","isArray","lines","x1","x2","y1","y2","memoizedAxisTick","memo","_value","onClick","textAnchor","opacity","cursor","event","g","transform","dominantBaseline","textTransform","memoizedAxis","renderTick","AxisTick","legend","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","lineX2","lineY2","transition","useTransition","keys","t","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","rotate","domain","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","_format","fontWeight","Number","String","renderAxesToCanvas","renderGridLinesToCanvas","randColor","random","countryCodes","names","programmingLanguages","generateBulletData","id","title","subtitle","rangeCount","measureCount","markerCount","float","ranges","range","remaining","measures","markers","generateChordData","minValue","maxValue","maxSize","selectedKeys","slice","matrix","generateNetworkData","rootNodeRadius","minMidNodes","maxMidNodes","midNodeRadius","minLeaves","maxLeaves","leafRadius","rootNode","depth","color","nodes","_","k","links","extraNodes","push","source","target","distance","concat","generateParallelCoordinatesData","shuffle","availableNodes","n","name","getNodeTargets","currentPath","targets","filter","includes","join","targetId","getNodesTargets","targetsById","generateSankeyData","nodeCount","maxIterations","Object","assign","node","nodeColor","randId","randomPrice","randomVolume","randomCategory","generateSwarmPlotData","categoryCount","groupIndex","price","volume","categories","randomizeSwarmPlotData","previousData","generateProgrammingLanguageStats","shouldShuffle","limit","langs","sets","language","uniqRand","generator","used","randCountryCode","generateDrinkStats","xSize","types","country","find","generateSeries","ids","xKeys","generateDayCounts","to","days","timeDays","dayFormat","day","generateOrderedDayCounts","generateCountriesData","withColors","libTreeItems","generateLibTree","children","tree","i","leaf","loc","wines","wineTastes","generateWinesTastes","randMin","randMax","taste","wine","allGroups","generateLightDataSet","undefined","generateHeavyDataSet","settingsMapper","valueFormat","mapFormat","axisTop","mapAxis","axisRight","axisBottom","axisLeft","copyArray","shuffleSelf","module","exports","array","baseEach","collection","predicate","result","nativeFloor","floor","nativeRandom","lower","upper","arrayMap","object","baseRandom","lastIndex","rand","arrayFilter","baseFilter","baseIteratee","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","temp","arrayShuffle","baseShuffle","baseValues"],"sourceRoot":""}