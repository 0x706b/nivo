{"version":3,"file":"a40eafbb951865aa634165003673cfdb1579d35d-250ca31d0781f47b2beb.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-hierarchy/src/accessors.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/constant.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/count.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/index.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/each.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/sum.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/sort.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/path.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/ancestors.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/descendants.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/leaves.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/hierarchy/links.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/treemap/round.js","webpack://nivo-website/../src/TreeMapNode.js","webpack://nivo-website/../src/TreeMapHtmlNode.js","webpack://nivo-website/../src/props.js","webpack://nivo-website/../src/TreeMapNodeTooltip.js","webpack://nivo-website/../src/hooks.js","webpack://nivo-website/../node_modules/d3-hierarchy/src/treemap/index.js","webpack://nivo-website/../src/TreeMapNodes.js","webpack://nivo-website/../src/TreeMap.js","webpack://nivo-website/../src/ResponsiveTreeMap.js","webpack://nivo-website/../src/TreeMapHtml.js","webpack://nivo-website/../src/ResponsiveTreeMapHtml.js","webpack://nivo-website/../src/TreeMapCanvas.js","webpack://nivo-website/../src/ResponsiveTreeMapCanvas.js","webpack://nivo-website/../node_modules/lodash/cloneDeep.js","webpack://nivo-website/../node_modules/lodash/startCase.js"],"sourcesContent":["export function optional(f) {\n  return f == null ? null : required(f);\n}\nexport function required(f) {\n  if (typeof f !== \"function\") throw new Error();\n  return f;\n}","export function constantZero() {\n  return 0;\n}\nexport default function (x) {\n  return function () {\n    return x;\n  };\n}","function count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;else while (--i >= 0) {\n    sum += children[i].value;\n  }\n  node.value = sum;\n}\n\nexport default function () {\n  return this.eachAfter(count);\n}","import node_count from \"./count.js\";\nimport node_each from \"./each.js\";\nimport node_eachBefore from \"./eachBefore.js\";\nimport node_eachAfter from \"./eachAfter.js\";\nimport node_sum from \"./sum.js\";\nimport node_sort from \"./sort.js\";\nimport node_path from \"./path.js\";\nimport node_ancestors from \"./ancestors.js\";\nimport node_descendants from \"./descendants.js\";\nimport node_leaves from \"./leaves.js\";\nimport node_links from \"./links.js\";\nexport default function hierarchy(data, children) {\n  var root = new Node(data),\n      valued = +data.value && (root.value = data.value),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n  if (children == null) children = defaultChildren;\n\n  while (node = nodes.pop()) {\n    if (valued) node.value = +node.data.value;\n\n    if ((childs = children(node.data)) && (n = childs.length)) {\n      node.children = new Array(n);\n\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction defaultChildren(d) {\n  return d.children;\n}\n\nfunction copyData(node) {\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n\n  do {\n    node.height = height;\n  } while ((node = node.parent) && node.height < ++height);\n}\nexport function Node(data) {\n  this.data = data;\n  this.depth = this.height = 0;\n  this.parent = null;\n}\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy\n};","export default function (callback) {\n  var node = this,\n      current,\n      next = [node],\n      children,\n      i,\n      n;\n\n  do {\n    current = next.reverse(), next = [];\n\n    while (node = current.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        next.push(children[i]);\n      }\n    }\n  } while (next.length);\n\n  return this;\n}","export default function (callback) {\n  var node = this,\n      nodes = [node],\n      next = [],\n      children,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    next.push(node), children = node.children;\n    if (children) for (i = 0, n = children.length; i < n; ++i) {\n      nodes.push(children[i]);\n    }\n  }\n\n  while (node = next.pop()) {\n    callback(node);\n  }\n\n  return this;\n}","export default function (callback) {\n  var node = this,\n      nodes = [node],\n      children,\n      i;\n\n  while (node = nodes.pop()) {\n    callback(node), children = node.children;\n    if (children) for (i = children.length - 1; i >= 0; --i) {\n      nodes.push(children[i]);\n    }\n  }\n\n  return this;\n}","export default function (value) {\n  return this.eachAfter(function (node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n\n    while (--i >= 0) {\n      sum += children[i].value;\n    }\n\n    node.value = sum;\n  });\n}","export default function (compare) {\n  return this.eachBefore(function (node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n}","export default function (end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n\n  var k = nodes.length;\n\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n\n  return c;\n}","export default function () {\n  var node = this,\n      nodes = [node];\n\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n\n  return nodes;\n}","export default function () {\n  var nodes = [];\n  this.each(function (node) {\n    nodes.push(node);\n  });\n  return nodes;\n}","export default function () {\n  var leaves = [];\n  this.eachBefore(function (node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n}","export default function () {\n  var root = this,\n      links = [];\n  root.each(function (node) {\n    if (node !== root) {\n      // Don’t include the root’s parent, if any.\n      links.push({\n        source: node.parent,\n        target: node\n      });\n    }\n  });\n  return links;\n}","export default function (node) {\n  node.x0 = Math.round(node.x0);\n  node.y0 = Math.round(node.y0);\n  node.x1 = Math.round(node.x1);\n  node.y1 = Math.round(node.y1);\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nconst TreeMapNode = ({\n    node,\n    animatedProps,\n    borderWidth,\n    enableLabel,\n    enableParentLabel,\n    labelSkipSize,\n}) => {\n    const theme = useTheme()\n\n    const showLabel =\n        enableLabel &&\n        node.isLeaf &&\n        (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n    const showParentLabel = enableParentLabel && node.isParent\n\n    return (\n        <animated.g transform={animatedProps.transform}>\n            <animated.rect\n                width={to(animatedProps.width, v => Math.max(v, 0))}\n                height={to(animatedProps.height, v => Math.max(v, 0))}\n                fill={node.fill ? node.fill : animatedProps.color}\n                strokeWidth={borderWidth}\n                stroke={node.borderColor}\n                fillOpacity={node.opacity}\n                onMouseEnter={node.onMouseEnter}\n                onMouseMove={node.onMouseMove}\n                onMouseLeave={node.onMouseLeave}\n                onClick={node.onClick}\n            />\n            {showLabel && (\n                <animated.text\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: node.labelTextColor,\n                        pointerEvents: 'none',\n                    }}\n                    fillOpacity={animatedProps.labelOpacity}\n                    transform={animatedProps.labelTransform}\n                >\n                    {node.label}\n                </animated.text>\n            )}\n            {showParentLabel && (\n                <animated.text\n                    dominantBaseline=\"central\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: node.parentLabelTextColor,\n                        pointerEvents: 'none',\n                    }}\n                    fillOpacity={animatedProps.parentLabelOpacity}\n                    transform={animatedProps.parentLabelTransform}\n                >\n                    {node.parentLabel}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nTreeMapNode.propTypes = {\n    node: PropTypes.object.isRequired,\n    animatedProps: PropTypes.object.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    enableParentLabel: PropTypes.bool.isRequired,\n    labelSkipSize: PropTypes.number.isRequired,\n}\n\nexport default memo(TreeMapNode)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nconst TreeMapHtmlNode = ({\n    node,\n    animatedProps,\n    borderWidth,\n    enableLabel,\n    enableParentLabel,\n    labelSkipSize,\n}) => {\n    const theme = useTheme()\n\n    const showLabel =\n        enableLabel &&\n        node.isLeaf &&\n        (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n    const showParentLabel = enableParentLabel && node.isParent\n\n    return (\n        <animated.div\n            id={node.path.replace(/[^\\w]/gi, '-')}\n            style={{\n                boxSizing: 'border-box',\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                transform: animatedProps.htmlTransform,\n                width: animatedProps.width,\n                height: animatedProps.height,\n                borderWidth,\n                borderStyle: 'solid',\n                borderColor: node.borderColor,\n                overflow: 'hidden',\n            }}\n        >\n            <animated.div\n                style={{\n                    boxSizing: 'border-box',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    opacity: node.opacity,\n                    width: animatedProps.width,\n                    height: animatedProps.height,\n                    background: animatedProps.color,\n                }}\n                onMouseEnter={node.onMouseEnter}\n                onMouseMove={node.onMouseMove}\n                onMouseLeave={node.onMouseLeave}\n                onClick={node.onClick}\n            />\n            {showLabel && (\n                <animated.span\n                    style={{\n                        ...theme.labels.text,\n                        position: 'absolute',\n                        display: 'flex',\n                        top: -5,\n                        left: -5,\n                        width: 10,\n                        height: 10,\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        whiteSpace: 'nowrap',\n                        color: node.labelTextColor,\n                        transformOrigin: 'center center',\n                        transform: animatedProps.labelHtmlTransform,\n                        opacity: animatedProps.labelOpacity,\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {node.label}\n                </animated.span>\n            )}\n            {showParentLabel && (\n                <animated.span\n                    style={{\n                        ...theme.labels.text,\n                        position: 'absolute',\n                        display: 'flex',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                        whiteSpace: 'nowrap',\n                        width: 10,\n                        height: 10,\n                        color: node.parentLabelTextColor,\n                        transformOrigin: 'top left',\n                        transform: animatedProps.parentLabelHtmlTransform,\n                        opacity: animatedProps.parentLabelOpacity,\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {node.parentLabel}\n                </animated.span>\n            )}\n        </animated.div>\n    )\n}\n\nTreeMapHtmlNode.propTypes = {\n    node: PropTypes.object.isRequired,\n    animatedProps: PropTypes.object.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    enableParentLabel: PropTypes.bool.isRequired,\n    labelSkipSize: PropTypes.number.isRequired,\n}\n\nexport default memo(TreeMapHtmlNode)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { treeMapTilePropType, defsPropTypes } from '@nivo/core'\nimport {\n    ordinalColorsPropType,\n    colorPropertyAccessorPropType,\n    inheritedColorPropType,\n} from '@nivo/colors'\nimport TreeMapNode from './TreeMapNode'\nimport TreeMapHtmlNode from './TreeMapHtmlNode'\n\nconst commonPropTypes = {\n    identity: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    valueFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n    colors: ordinalColorsPropType.isRequired,\n    colorBy: colorPropertyAccessorPropType.isRequired,\n    nodeOpacity: PropTypes.number.isRequired,\n\n    leavesOnly: PropTypes.bool.isRequired,\n    tile: treeMapTilePropType.isRequired,\n    innerPadding: PropTypes.number.isRequired,\n    outerPadding: PropTypes.number.isRequired,\n\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelFormat: PropTypes.string,\n    labelSkipSize: PropTypes.number.isRequired,\n    labelTextColor: inheritedColorPropType.isRequired,\n    orientLabel: PropTypes.bool.isRequired,\n\n    enableParentLabel: PropTypes.bool.isRequired,\n    parentLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    parentLabelSize: PropTypes.number.isRequired,\n    parentLabelPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']).isRequired,\n    parentLabelPadding: PropTypes.number.isRequired,\n    parentLabelTextColor: inheritedColorPropType.isRequired,\n\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: inheritedColorPropType.isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.func,\n}\n\nexport const TreeMapPropTypes = {\n    ...commonPropTypes,\n    nodeComponent: PropTypes.elementType.isRequired,\n    role: PropTypes.string.isRequired,\n    ...defsPropTypes,\n}\n\nexport const TreeMapHtmlPropTypes = {\n    ...commonPropTypes,\n    nodeComponent: PropTypes.elementType.isRequired,\n}\n\nexport const TreeMapCanvasPropTypes = {\n    ...commonPropTypes,\n    pixelRatio: PropTypes.number.isRequired,\n}\n\nconst commonDefaultProps = {\n    identity: 'id',\n    value: 'value',\n\n    tile: 'squarify',\n    leavesOnly: false,\n    innerPadding: 0,\n    outerPadding: 0,\n\n    colors: { scheme: 'nivo' },\n    colorBy: 'pathComponents.1',\n    nodeOpacity: 0.33,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipSize: 0,\n    labelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    orientLabel: true,\n\n    enableParentLabel: true,\n    parentLabel: 'id',\n    parentLabelSize: 20,\n    parentLabelPosition: 'top',\n    parentLabelPadding: 6,\n    parentLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    borderWidth: 1,\n    borderColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n\nexport const TreeMapDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: TreeMapNode,\n    role: 'img',\n    defs: [],\n    fill: [],\n}\n\nexport const TreeMapHtmlDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: TreeMapHtmlNode,\n}\n\nexport const TreeMapCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst TreeMapNodeTooltip = ({ node, tooltip }) => {\n    return (\n        <BasicTooltip\n            id={node.id}\n            value={node.formattedValue}\n            enableChip={true}\n            color={node.color}\n            renderContent={typeof tooltip === 'function' ? tooltip.bind(null, { node }) : null}\n        />\n    )\n}\n\nTreeMapNodeTooltip.propTypes = {\n    node: PropTypes.shape({\n        id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        formattedValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        color: PropTypes.string.isRequired,\n    }).isRequired,\n    tooltip: PropTypes.elementType,\n}\n\nexport default memo(TreeMapNodeTooltip)\n","import { useCallback, useMemo } from 'react'\nimport get from 'lodash/get'\nimport omit from 'lodash/omit'\nimport cloneDeep from 'lodash/cloneDeep'\nimport startCase from 'lodash/startCase'\nimport { treemap as d3Treemap, hierarchy } from 'd3-hierarchy'\nimport { treeMapTileFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { TreeMapDefaultProps } from './props'\nimport TreeMapNodeTooltip from './TreeMapNodeTooltip'\n\nexport const useTreeMapLayout = ({\n    width,\n    height,\n    tile,\n    innerPadding,\n    outerPadding,\n    enableParentLabel,\n    parentLabelSize,\n    parentLabelPosition,\n    leavesOnly,\n}) =>\n    useMemo(() => {\n        const treemap = d3Treemap()\n            .size([width, height])\n            .tile(treeMapTileFromProp(tile))\n            .round(true)\n            .paddingInner(innerPadding)\n            .paddingOuter(outerPadding)\n\n        if (enableParentLabel && !leavesOnly) {\n            const parentLabelPadding = parentLabelSize + outerPadding * 2\n            treemap[`padding${startCase(parentLabelPosition)}`](parentLabelPadding)\n        }\n\n        return treemap\n    }, [\n        width,\n        height,\n        tile,\n        innerPadding,\n        outerPadding,\n        enableParentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        leavesOnly,\n    ])\n\nexport const useHierarchy = ({ root, getValue }) =>\n    useMemo(() => hierarchy(root).sum(getValue), [root, getValue])\n\nexport const useAccessor = accessor =>\n    useMemo(() => {\n        if (typeof accessor === 'function') return accessor\n        return d => get(d, accessor)\n    }, [accessor])\n\nconst computeNodeIdAndPath = (node, getIdentity) => {\n    const path = node\n        .ancestors()\n        .map(ancestor => getIdentity(ancestor.data))\n        .reverse()\n\n    return [path.join('.'), path]\n}\n\nexport const useTreeMap = ({\n    data,\n    identity = TreeMapDefaultProps.identity,\n    value = TreeMapDefaultProps.value,\n    valueFormat,\n    leavesOnly = TreeMapDefaultProps.leavesOnly,\n    width,\n    height,\n    tile = TreeMapDefaultProps.tile,\n    innerPadding = TreeMapDefaultProps.innerPadding,\n    outerPadding = TreeMapDefaultProps.outerPadding,\n    label = TreeMapDefaultProps.label,\n    orientLabel = TreeMapDefaultProps.orientLabel,\n    enableParentLabel = TreeMapDefaultProps.enableParentLabel,\n    parentLabel = TreeMapDefaultProps.parentLabel,\n    parentLabelSize = TreeMapDefaultProps.parentLabelSize,\n    parentLabelPosition = TreeMapDefaultProps.parentLabelPosition,\n    parentLabelPadding = TreeMapDefaultProps.parentLabelPadding,\n    colors = TreeMapDefaultProps.colors,\n    colorBy = TreeMapDefaultProps.colorBy,\n    nodeOpacity = TreeMapDefaultProps.nodeOpacity,\n    borderColor = TreeMapDefaultProps.borderColor,\n    labelTextColor = TreeMapDefaultProps.labelTextColor,\n    parentLabelTextColor = TreeMapDefaultProps.parentLabelTextColor,\n}) => {\n    const getIdentity = useAccessor(identity)\n    const getValue = useAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n    const getLabel = useAccessor(label)\n    const getParentLabel = useAccessor(parentLabel)\n\n    const layout = useTreeMapLayout({\n        width,\n        height,\n        tile,\n        innerPadding,\n        outerPadding,\n        enableParentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        leavesOnly,\n    })\n\n    const hierarchy = useHierarchy({ root: data, getValue })\n\n    const rawNodes = useMemo(() => {\n        // d3 treemap mutates the data, so we need to copy it\n        // to have proper behavior for subsequents useMemo()\n        const root = cloneDeep(hierarchy)\n        layout(root)\n\n        return leavesOnly ? root.leaves() : root.descendants()\n    }, [hierarchy, layout, leavesOnly])\n\n    const nodes = useMemo(\n        () =>\n            rawNodes.map(rawNode => {\n                const [path, pathComponents] = computeNodeIdAndPath(rawNode, getIdentity)\n\n                const node = {\n                    id: getIdentity(rawNode.data),\n                    path,\n                    pathComponents,\n                    data: omit(rawNode.data, 'children'),\n                    x: rawNode.x0,\n                    y: rawNode.y0,\n                    width: rawNode.x1 - rawNode.x0,\n                    height: rawNode.y1 - rawNode.y0,\n                    value: rawNode.value,\n                    formattedValue: formatValue(rawNode.value),\n                    treeDepth: rawNode.depth,\n                    treeHeight: rawNode.height,\n                    isParent: rawNode.height > 0,\n                    isLeaf: rawNode.height === 0,\n                }\n\n                node.label = getLabel(node)\n                node.parentLabel = getParentLabel(node)\n                node.parentLabelRotation = 0\n\n                if (parentLabelPosition === 'top') {\n                    node.parentLabelX = outerPadding + parentLabelPadding\n                    node.parentLabelY = outerPadding + parentLabelSize / 2\n                }\n                if (parentLabelPosition === 'right') {\n                    node.parentLabelX = node.width - outerPadding - parentLabelSize / 2\n                    node.parentLabelY = node.height - outerPadding - parentLabelPadding\n                    node.parentLabelRotation = -90\n                }\n                if (parentLabelPosition === 'bottom') {\n                    node.parentLabelX = outerPadding + parentLabelPadding\n                    node.parentLabelY = node.height - outerPadding - parentLabelSize / 2\n                }\n                if (parentLabelPosition === 'left') {\n                    node.parentLabelX = outerPadding + parentLabelSize / 2\n                    node.parentLabelY = node.height - outerPadding - parentLabelPadding\n                    node.parentLabelRotation = -90\n                }\n\n                return node\n            }),\n        [\n            rawNodes,\n            leavesOnly,\n            getIdentity,\n            formatValue,\n            getLabel,\n            getParentLabel,\n            parentLabelSize,\n            parentLabelPosition,\n            parentLabelPadding,\n            outerPadding,\n        ]\n    )\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const getParentLabelTextColor = useInheritedColor(parentLabelTextColor, theme)\n\n    const enhancedNodes = useMemo(\n        () =>\n            nodes.map(node => {\n                node.opacity = nodeOpacity\n                node.labelRotation = orientLabel && node.height > node.width ? -90 : 0\n                node.color = getColor(node)\n                node.borderColor = getBorderColor(node)\n                node.labelTextColor = getLabelTextColor(node)\n                node.parentLabelTextColor = getParentLabelTextColor(node)\n\n                return node\n            }),\n        [\n            nodes,\n            getColor,\n            nodeOpacity,\n            getBorderColor,\n            getLabelTextColor,\n            getParentLabelTextColor,\n            orientLabel,\n        ]\n    )\n\n    return {\n        hierarchy,\n        nodes: enhancedNodes,\n        layout,\n    }\n}\n\nexport const useInteractiveTreeMapNodes = (\n    nodes,\n    { isInteractive, onMouseEnter, onMouseMove, onMouseLeave, onClick, tooltip }\n) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(\n                <TreeMapNodeTooltip node={node} tooltip={tooltip} />,\n                event,\n                'left'\n            )\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseEnter = useCallback(\n        (node, event) => {\n            showTooltip(node, event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [onMouseEnter, showTooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (node, event) => {\n            showTooltip(node, event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [onMouseMove, showTooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node, event) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [onMouseLeave, hideTooltip]\n    )\n\n    const handleClick = useCallback(\n        (node, event) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n\n    return useMemo(() => {\n        return nodes.map(node => {\n            if (!isInteractive) return node\n\n            return {\n                ...node,\n                onMouseEnter: event => handleMouseEnter(node, event),\n                onMouseMove: event => handleMouseMove(node, event),\n                onMouseLeave: event => handleMouseLeave(node, event),\n                onClick: event => handleClick(node, event),\n            }\n        })\n    }, [nodes, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick])\n}\n","import roundNode from \"./round.js\";\nimport squarify from \"./squarify.js\";\nimport { required } from \"../accessors.js\";\nimport constant, { constantZero } from \"../constant.js\";\nexport default function () {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 = root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function (x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function (x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function (x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function (x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function (x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function (x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function (x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function (x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function (x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function (x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useInteractiveTreeMapNodes } from './hooks'\n\nconst getAnimatedNodeProps = node => {\n    return {\n        transform: `translate(${node.x},${node.y})`,\n        htmlTransform: `translate(${node.x}px,${node.y}px)`,\n        labelOpacity: 1,\n        labelTransform: `translate(${node.width / 2},${node.height / 2}) rotate(${\n            node.labelRotation\n        })`,\n        labelHtmlTransform: `translate(${node.width / 2}px,${node.height / 2}px) rotate(${\n            node.labelRotation\n        }deg)`,\n        parentLabelOpacity: 1,\n        parentLabelTransform: `translate(${node.parentLabelX},${node.parentLabelY}) rotate(${node.parentLabelRotation})`,\n        parentLabelHtmlTransform: `translate(${\n            node.parentLabelX - (node.parentLabelRotation === 0 ? 0 : 5)\n        }px,${node.parentLabelY - (node.parentLabelRotation === 0 ? 5 : 0)}px) rotate(${\n            node.parentLabelRotation\n        }deg)`,\n        width: node.width,\n        height: node.height,\n        color: node.color,\n    }\n}\n\nconst getEndingAnimatedNodeProps = node => {\n    const x = node.x + node.width / 2\n    const y = node.y + node.height / 2\n\n    return {\n        transform: `translate(${x},${y})`,\n        transformPixels: `translate(${x}px,${y}px)`,\n        labelOpacity: 0,\n        labelTransform: `translate(0,0) rotate(${node.labelRotation})`,\n        parentLabelOpacity: 0,\n        parentLabelTransform: `translate(0,0) rotate(${node.parentLabelRotation})`,\n        parentLabelHtmlTransform: `translate(0px,0px) rotate(${node.parentLabelRotation}deg)`,\n        width: 0,\n        height: 0,\n        color: node.color,\n    }\n}\n\nconst TreeMapNodes = ({\n    nodes,\n    nodeComponent,\n    borderWidth,\n    enableLabel,\n    labelSkipSize,\n    enableParentLabel,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}) => {\n    const interactiveNodes = useInteractiveTreeMapNodes(nodes, {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition(interactiveNodes, {\n        key: node => node.path,\n        initial: node => getAnimatedNodeProps(node),\n        from: node => getEndingAnimatedNodeProps(node),\n        enter: node => getAnimatedNodeProps(node),\n        update: node => getAnimatedNodeProps(node),\n        leave: node => getEndingAnimatedNodeProps(node),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return transition((animatedProps, node) => {\n        return createElement(nodeComponent, {\n            key: node.path,\n            node,\n            animatedProps,\n            borderWidth,\n            enableLabel,\n            labelSkipSize,\n            enableParentLabel,\n        })\n    })\n}\n\nTreeMapNodes.propTypes = {\n    nodes: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    nodeComponent: PropTypes.elementType.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    labelSkipSize: PropTypes.number.isRequired,\n    enableParentLabel: PropTypes.bool.isRequired,\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.elementType,\n}\n\nexport default memo(TreeMapNodes)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { SvgWrapper, withContainer, useDimensions, bindDefs } from '@nivo/core'\nimport { TreeMapDefaultProps, TreeMapPropTypes } from './props'\nimport { useTreeMap } from './hooks'\nimport TreeMapNodes from './TreeMapNodes'\n\nconst TreeMap = ({\n    data,\n    identity,\n    value,\n    tile,\n    nodeComponent,\n    valueFormat,\n    innerPadding,\n    outerPadding,\n    leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    colors,\n    colorBy,\n    nodeOpacity,\n    borderWidth,\n    borderColor,\n    defs,\n    fill,\n    enableLabel,\n    label,\n    labelTextColor,\n    orientLabel,\n    labelSkipSize,\n    enableParentLabel,\n    parentLabel,\n    parentLabelSize,\n    parentLabelPosition,\n    parentLabelPadding,\n    parentLabelTextColor,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    role,\n}) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel,\n        parentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        parentLabelPadding,\n        parentLabelTextColor,\n    })\n\n    const boundDefs = bindDefs(defs, nodes, fill)\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            <TreeMapNodes\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                borderWidth={borderWidth}\n                enableLabel={enableLabel}\n                labelSkipSize={labelSkipSize}\n                enableParentLabel={enableParentLabel}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n            />\n        </SvgWrapper>\n    )\n}\n\nTreeMap.propTypes = TreeMapPropTypes\n\nconst WrappedTreeMap = withContainer(TreeMap)\nWrappedTreeMap.defaultProps = TreeMapDefaultProps\n\nexport default WrappedTreeMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport TreeMap from './TreeMap'\n\nconst ResponsiveTreeMap = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMap width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveTreeMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { withContainer, useDimensions } from '@nivo/core'\nimport { TreeMapHtmlPropTypes, TreeMapHtmlDefaultProps } from './props'\nimport { useTreeMap } from './hooks'\nimport TreeMapNodes from './TreeMapNodes'\n\nconst TreeMapHtml = ({\n    data,\n    identity,\n    value,\n    tile,\n    nodeComponent,\n    valueFormat,\n    innerPadding,\n    outerPadding,\n    leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    colors,\n    colorBy,\n    nodeOpacity,\n    borderWidth,\n    borderColor,\n    enableLabel,\n    label,\n    labelTextColor,\n    orientLabel,\n    labelSkipSize,\n    enableParentLabel,\n    parentLabel,\n    parentLabelSize,\n    parentLabelPosition,\n    parentLabelPadding,\n    parentLabelTextColor,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel,\n        parentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        parentLabelPadding,\n        parentLabelTextColor,\n    })\n\n    return (\n        <div\n            style={{\n                position: 'relative',\n                width: outerWidth,\n                height: outerHeight,\n            }}\n        >\n            <div style={{ position: 'absolute', top: margin.top, left: margin.left }}>\n                <TreeMapNodes\n                    nodes={nodes}\n                    nodeComponent={nodeComponent}\n                    borderWidth={borderWidth}\n                    enableLabel={enableLabel}\n                    labelSkipSize={labelSkipSize}\n                    enableParentLabel={enableParentLabel}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                    onClick={onClick}\n                    tooltip={tooltip}\n                />\n            </div>\n        </div>\n    )\n}\n\nTreeMapHtml.propTypes = TreeMapHtmlPropTypes\n\nconst WrappedTreeMapHtml = withContainer(TreeMapHtml)\nWrappedTreeMapHtml.defaultProps = TreeMapHtmlDefaultProps\n\nexport default WrappedTreeMapHtml\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport TreeMapHtml from './TreeMapHtml'\n\nconst ResponsiveTreeMapHtml = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMapHtml width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveTreeMapHtml\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useCallback, useEffect, useRef } from 'react'\nimport {\n    degreesToRadians,\n    getRelativeCursor,\n    isCursorInRect,\n    withContainer,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { TreeMapCanvasPropTypes, TreeMapCanvasDefaultProps } from './props'\nimport { useTreeMap } from './hooks'\nimport TreeMapNodeTooltip from './TreeMapNodeTooltip'\n\nconst findNodeUnderCursor = (nodes, margin, x, y) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst TreeMapCanvas = ({\n    data,\n    identity,\n    value,\n    tile,\n    valueFormat,\n    innerPadding,\n    outerPadding,\n    leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    colors,\n    colorBy,\n    nodeOpacity,\n    borderWidth,\n    borderColor,\n    enableLabel,\n    label,\n    labelTextColor,\n    orientLabel,\n    labelSkipSize,\n    isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip,\n    pixelRatio,\n}) => {\n    const canvasEl = useRef(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel: false,\n    })\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        nodes.forEach(node => {\n            ctx.fillStyle = node.color\n            ctx.fillRect(node.x, node.y, node.width, node.height)\n\n            if (borderWidth > 0) {\n                ctx.strokeStyle = node.borderColor\n                ctx.lineWidth = borderWidth\n                ctx.strokeRect(node.x, node.y, node.width, node.height)\n            }\n        })\n\n        if (enableLabel) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'middle'\n            ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n            nodes.forEach(node => {\n                const showLabel =\n                    node.isLeaf &&\n                    (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n                if (!showLabel) return\n\n                const rotate = orientLabel && node.height > node.width\n\n                ctx.save()\n                ctx.translate(node.x + node.width / 2, node.y + node.height / 2)\n                ctx.rotate(degreesToRadians(rotate ? -90 : 0))\n\n                ctx.fillStyle = node.labelTextColor\n                ctx.fillText(node.label, 0, 0)\n\n                ctx.restore()\n            })\n        }\n    }, [\n        canvasEl,\n        nodes,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        borderWidth,\n        enableLabel,\n        orientLabel,\n        labelSkipSize,\n        theme,\n        pixelRatio,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const node = findNodeUnderCursor(nodes, margin, x, y)\n\n            if (node !== undefined) {\n                showTooltipFromEvent(\n                    <TreeMapNodeTooltip node={node} tooltip={tooltip} />,\n                    event,\n                    'left'\n                )\n                onMouseMove && onMouseMove(node, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [canvasEl, nodes, margin, showTooltipFromEvent, hideTooltip, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const node = findNodeUnderCursor(nodes, margin, x, y)\n\n            if (node === undefined) return\n\n            onClick && onClick(node, event)\n        },\n        [canvasEl, nodes, margin, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nTreeMapCanvas.propTypes = TreeMapCanvasPropTypes\n\nconst WrappedTreeMapCanvas = withContainer(TreeMapCanvas)\nWrappedTreeMapCanvas.defaultProps = TreeMapCanvasDefaultProps\n\nexport default WrappedTreeMapCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport TreeMapCanvas from './TreeMapCanvas'\n\nconst ResponsiveTreeMapCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMapCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveTreeMapCanvas\n","var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = cloneDeep;\n","var createCompounder = require('./_createCompounder'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts `string` to\n * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n *\n * @static\n * @memberOf _\n * @since 3.1.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the start cased string.\n * @example\n *\n * _.startCase('--foo-bar--');\n * // => 'Foo Bar'\n *\n * _.startCase('fooBar');\n * // => 'Foo Bar'\n *\n * _.startCase('__FOO_BAR__');\n * // => 'FOO BAR'\n */\nvar startCase = createCompounder(function(result, word, index) {\n  return result + (index ? ' ' : '') + upperFirst(word);\n});\n\nmodule.exports = startCase;\n"],"names":["optional","f","required","Error","constantZero","x","count","node","sum","children","i","length","value","hierarchy","data","child","childs","n","root","Node","valued","nodes","defaultChildren","pop","Array","push","parent","depth","eachBefore","computeHeight","d","copyData","height","this","prototype","constructor","eachAfter","each","callback","current","next","reverse","sort","compare","path","end","start","ancestor","a","b","aNodes","ancestors","bNodes","c","leastCommonAncestor","k","splice","descendants","leaves","links","source","target","copy","x0","Math","round","y0","x1","y1","TreeMapNode","animatedProps","borderWidth","enableLabel","enableParentLabel","labelSkipSize","theme","useTheme","showLabel","isLeaf","min","width","showParentLabel","isParent","_jsxs","animated","g","transform","_jsx","rect","to","max","v","fill","color","strokeWidth","stroke","borderColor","fillOpacity","opacity","onMouseEnter","onMouseMove","onMouseLeave","onClick","text","textAnchor","dominantBaseline","style","labels","labelTextColor","pointerEvents","labelOpacity","labelTransform","label","parentLabelTextColor","parentLabelOpacity","parentLabelTransform","parentLabel","propTypes","PropTypes","memo","TreeMapHtmlNode","div","id","replace","boxSizing","position","top","left","htmlTransform","borderStyle","overflow","background","span","display","justifyContent","alignItems","whiteSpace","transformOrigin","labelHtmlTransform","parentLabelHtmlTransform","commonPropTypes","identity","isRequired","valueFormat","colors","ordinalColorsPropType","colorBy","colorPropertyAccessorPropType","nodeOpacity","leavesOnly","tile","treeMapTilePropType","innerPadding","outerPadding","labelFormat","inheritedColorPropType","orientLabel","parentLabelSize","parentLabelPosition","parentLabelPadding","isInteractive","tooltip","TreeMapPropTypes","nodeComponent","role","defsPropTypes","TreeMapHtmlPropTypes","TreeMapCanvasPropTypes","pixelRatio","commonDefaultProps","scheme","from","modifiers","animate","motionConfig","TreeMapDefaultProps","defs","TreeMapHtmlDefaultProps","TreeMapCanvasDefaultProps","window","devicePixelRatio","TreeMapNodeTooltip","BasicTooltip","formattedValue","enableChip","renderContent","bind","useAccessor","useMemo","accessor","get","useTreeMap","getIdentity","getValue","formatValue","useValueFormatter","getLabel","getParentLabel","layout","treemap","squarify","dx","dy","paddingStack","paddingInner","constant","paddingTop","paddingRight","paddingBottom","paddingLeft","positionNode","p","arguments","size","padding","paddingOuter","d3Treemap","treeMapTileFromProp","startCase","useHierarchy","rawNodes","cloneDeep","map","join","rawNode","pathComponents","omit","y","treeDepth","treeHeight","parentLabelRotation","parentLabelX","parentLabelY","getColor","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelTextColor","getParentLabelTextColor","enhancedNodes","labelRotation","getAnimatedNodeProps","getEndingAnimatedNodeProps","transformPixels","TreeMapNodes","interactiveNodes","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","event","handleMouseEnter","handleMouseMove","handleMouseLeave","handleClick","useMotionConfig","springConfig","config","useTransition","key","initial","enter","update","leave","immediate","createElement","TreeMap","partialMargin","margin","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","boundDefs","bindDefs","SvgWrapper","WrappedTreeMap","withContainer","defaultProps","ResponsiveTreeMap","ResponsiveWrapper","props","TreeMapHtml","WrappedTreeMapHtml","ResponsiveTreeMapHtml","findNodeUnderCursor","find","isCursorInRect","TreeMapCanvas","canvasEl","useRef","useEffect","ctx","getContext","scale","fillStyle","fillRect","translate","forEach","strokeStyle","lineWidth","strokeRect","textAlign","textBaseline","font","fontSize","fontFamily","rotate","save","degreesToRadians","fillText","restore","handleMouseHover","e","getRelativeCursor","ref","WrappedTreeMapCanvas","ResponsiveTreeMapCanvas","baseClone","module","exports","CLONE_DEEP_FLAG","createCompounder","upperFirst","result","word","index"],"sourceRoot":""}