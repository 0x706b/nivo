{"version":3,"sources":["webpack:///./src/data/components/waffle/props.js","webpack:///./src/data/components/waffle/CustomTooltip.js","webpack:///./src/data/components/waffle/mapper.js","webpack:///./src/lib/settings.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack:///../src/compute.js","webpack:///../src/props.js","webpack:///../src/components/AxisTick.js","webpack:///../src/components/Axis.js","webpack:///../src/components/Axes.js","webpack:///../src/components/GridLine.js","webpack:///../src/components/GridLines.js","webpack:///../src/components/Grid.js","webpack:///../src/utils.js","webpack:///../src/canvas.js"],"names":["props","key","group","type","help","description","required","controlType","controlOptions","min","max","defaultValue","defaults","fillDirection","choices","label","value","padding","unit","enableControlForFlavors","flavors","themeProperty","colors","emptyColor","emptyOpacity","borderWidth","borderColor","defsProperties","map","isInteractive","getLegendsProps","shouldCreate","addLabel","shouldRemove","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","itemTextColor","onClick","data","alert","JSON","stringify","effects","on","style","itemBackground","motionProperties","defaultProps","groups","groupProperties","TooltipWrapper","styled","div","TooltipKey","span","TooltipValue","CustomTooltip","cell","color","id","position","groupIndex","row","column","CustomSvgCell","size","x","y","fill","opacity","onHover","onLeave","r","cx","cy","strokeWidth","stroke","onMouseEnter","onMouseMove","onMouseLeave","event","CustomHtmlCell","borderRadius","top","left","width","height","background","boxSizing","borderStyle","settingsMapper","valueFormat","mapFormat","cellComponent","values","options","component","tooltip","exclude","mapping","settings","overrides","Object","keys","forEach","omit","mapAxis","upperFirst","enable","format","enabled","undefined","_defineProperty","obj","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","getOwnPropertyDescriptors","defineProperties","centerScale","scale","bandwidth","offset","Math","d","timeByType","millisecond","second","minute","hour","day","week","sunday","monday","tuesday","wednesday","thursday","friday","saturday","month","year","timeTypes","timeIntervalRegexp","RegExp","isInteger","isFinite","getScaleTicks","Array","spec","matches","timeType","Number","computeCartesianTicks","axis","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","textProps","textPropsByEngine","line","lineX","lineY","text","textX","textY","textAlign","textBaseline","translate","ticks","getFormatter","f","timeFormat","Date","d3Format","computeGridLines","_values","lineValues","lineCount","lines","v","x1","x2","y1","y2","axisPropTypes","PropTypes","renderTick","legend","legendPosition","legendOffset","ariaHidden","bool","axisPropType","AxisTick","_value","textAnchor","animatedProps","theme","useTheme","gStyle","transform","e","dominantBaseline","rotate","memo","Axis","formatValue","useMemo","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","useSpring","lineX2","lineY2","config","immediate","transitions","useTransition","tick","initial","textTransform","from","enter","update","leave","aria-hidden","item","transitionProps","tickIndex","positions","Axes","xScale","yScale","axes","right","bottom","isXAxis","GridLine","GridLines","Grid","xValues","yValues","xLines","yLines","degreesToRadians","degrees","renderAxisToCanvas","ctx","renderAxesToCanvas","renderGridLinesToCanvas"],"mappings":"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","file":"c46004bf0c87c9b2cb2e65443efe604c9ed83710-f92bb0bb1064867097fd.js","sourcesContent":["import { defaultProps as defaults } from '@nivo/waffle'\nimport {\n    themeProperty,\n    motionProperties,\n    defsProperties,\n    getLegendsProps,\n    groupProperties,\n} from '../../../lib/componentProperties'\nimport { defaultProps } from '@nivo/bullet'\n\nconst props = [\n    {\n        key: 'total',\n        group: 'Base',\n        type: 'number',\n        help: 'Max value.',\n        description: 'Max value, ratio will be computed against this value for each datum.',\n        required: true,\n    },\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                id:    string | number\n                value: number\n                label: string | number\n            }>\n            \\`\\`\\`\n        `,\n        type: 'object[]',\n        required: true,\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'string | (value: number) => string | number',\n        controlType: 'valueFormat',\n    },\n    // {\n    //     key: 'hiddenIds',\n    //     type: 'Array<string | number>',\n    //     help: 'Hide parts of the data by id',\n    //     description: `\n    //         Hide parts of the data by id, this can be used\n    //         to implement toggle. Note that the datum will\n    //         still be visible in legends, if you want\n    //         to completely remove a datum from the data set,\n    //         you'll have to filter the data before passing\n    //         it to the component.\n    //     `,\n    //     required: false,\n    //     defaultValue: defaults.hiddenIds,\n    // },\n    {\n        key: 'rows',\n        type: 'number',\n        help: 'Number of rows.',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 100,\n        },\n    },\n    {\n        key: 'columns',\n        type: 'number',\n        help: 'Number of columns.',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 100,\n        },\n    },\n    {\n        key: 'fillDirection',\n        help: `How to fill the waffle.`,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.fillDirection,\n        controlType: 'choices',\n        group: 'Base',\n        controlOptions: {\n            choices: [\n                { label: 'top', value: 'top' },\n                { label: 'right', value: 'right' },\n                { label: 'bottom', value: 'bottom' },\n                { label: 'left', value: 'left' },\n            ],\n        },\n    },\n    {\n        key: 'padding',\n        type: 'number',\n        help: 'Padding between each cell.',\n        required: false,\n        defaultValue: defaults.padding,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 10,\n        },\n    },\n    {\n        key: 'width',\n        group: 'Base',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            not required if using responsive alternative\n            of the component\n            \\`<Responsive*/>\\`.\n        `,\n        type: 'number',\n        required: true,\n    },\n    {\n        key: 'height',\n        group: 'Base',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            not required if using responsive alternative\n            of the component\n            \\`<Responsive*/>\\`.\n        `,\n        type: 'number',\n        required: true,\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        required: false,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    themeProperty,\n    {\n        key: 'colors',\n        help: 'Defines how to compute node color.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: defaults.colors,\n        controlType: 'ordinalColors',\n        group: 'Style',\n    },\n    {\n        key: 'emptyColor',\n        help: 'Defines empty cells color.',\n        type: 'string',\n        required: false,\n        defaultValue: defaults.emptyColor,\n        controlType: 'colorPicker',\n        group: 'Style',\n    },\n    {\n        key: 'emptyOpacity',\n        help: 'Empty cells opacity.',\n        required: false,\n        defaultValue: defaults.emptyOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Style',\n    },\n    {\n        key: 'borderWidth',\n        help: 'Control cell border width.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.borderWidth,\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute cell border color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.borderColor,\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'cellComponent',\n        group: 'Customization',\n        flavors: ['svg', 'html'],\n        help: 'Override default cell component.',\n        type: 'Function',\n        required: false,\n        controlType: 'choices',\n        controlOptions: {\n            choices: ['default', 'Custom(props) => (…)'].map(key => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'renderCell',\n        group: 'Customization',\n        flavors: ['canvas'],\n        help: 'Override default cell rendering for canvas implementation.',\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: `\n            Defines the order of layers and add custom layers,\n            the legends layer is not available for WaffleHtml.\n        `,\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer must be a function.\n            \n            The layer component which will receive the chart's\n            context & computed data and must return a valid SVG element\n            for the \\`Waffle\\` component or an HTML one for \\`WaffleHtml\\`.\n\n            When using the canvas implementation, the function\n            will receive the canvas 2d context as first argument\n            and the chart's context and computed data as second.\n\n            Please make sure to use \\`context.save()\\` and\n            \\`context.restore()\\` if you make some global\n            modifications to the 2d context inside this function\n            to avoid side effects.\n            \n            The context passed to layers has the following structure:\n            \n            \\`\\`\\`\n            {\n                cells:          Cell[],\n                cellSize:       number\n                borderWidth:    number\n                getBorderColor: number\n                origin: {\n                    x: number\n                    y: number\n                }\n            }\n            \\`\\`\\`\n        `,\n        required: false,\n        type: 'Array<string | Function>',\n        defaultValue: ['cells', 'legends'],\n    },\n    {\n        key: 'isInteractive',\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.isInteractive,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg', 'html'],\n        group: 'Interactivity',\n        help: 'onMouseEnter handler, it receives target cell data and mouse event.',\n        type: '(cell: Cell, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        group: 'Interactivity',\n        help: 'onMouseMove handler, it receives target cell data and mouse event.',\n        type: '(cell: Cell, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        group: 'Interactivity',\n        flavors: ['svg', 'html'],\n        help: 'onMouseLeave handler, it receives target cell data and mouse event.',\n        type: '(cell: Cell, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        group: 'Interactivity',\n        help: 'onClick handler, it receives target cell data and mouse event.',\n        type: '(cell: Cell, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: '({ cell: DataCell }) => JSX.Element',\n        required: false,\n        help: 'Overrides default tooltip component.',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will\n            receive the following properties:\n            \\`\\`\\`\n            {\n                // cell with data, only cell having data\n                // trigger the tooltip\n                cell: {\n                    position: number\n                    column:   number\n                    row:      number\n                    x:        number\n                    y:        number\n                    color:    string\n                    // normalized data\n                    data: {\n                        id:             string | number\n                        label:          string | number\n                        value:          number\n                        formattedValue: string | number\n                        groupIndex:     number\n                        startAt:        number\n                        endAt:          number\n                        // raw data as passed to the chart\n                        data: { /* ... */ }\n                    }\n                }\n            }\n            \\`\\`\\`\n            Please note that you can also customize the default\n            tooltip style using the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        help: 'Showcase custom tooltip.',\n        type: 'boolean',\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'legends',\n        flavors: ['svg', 'canvas'],\n        type: 'object[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            defaults: {\n                anchor: 'left',\n                direction: 'column',\n                justify: false,\n                translateX: -100,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 4,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                itemTextColor: '#777',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemTextColor: '#000',\n                            itemBackground: '#f7fafb',\n                        },\n                    },\n                ],\n            },\n        },\n    },\n    ...motionProperties(['svg', 'html'], defaultProps, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: auto auto;\n    grid-column-gap: 16px;\n    background: #111;\n    font-size: 12px;\n    padding: 12px 16px;\n    border-radius: 2px;\n`\nconst TooltipKey = styled.span`\n    text-decoration: underline;\n`\nconst TooltipValue = styled.span`\n    font-weight: 600;\n`\n\nconst CustomTooltip = ({ cell }) => (\n    <TooltipWrapper style={{ color: cell.color }}>\n        <TooltipKey>label</TooltipKey>\n        <TooltipValue>{cell.data.label}</TooltipValue>\n        <TooltipKey>id</TooltipKey>\n        <TooltipValue>{cell.data.id}</TooltipValue>\n        <TooltipKey>value</TooltipKey>\n        <TooltipValue>{cell.data.value}</TooltipValue>\n        <TooltipKey>position</TooltipKey>\n        <TooltipValue>{cell.position}</TooltipValue>\n        <TooltipKey>groupIndex</TooltipKey>\n        <TooltipValue>{cell.groupIndex}</TooltipValue>\n        <TooltipKey>row</TooltipKey>\n        <TooltipValue>{cell.row}</TooltipValue>\n        <TooltipKey>column</TooltipKey>\n        <TooltipValue>{cell.column}</TooltipValue>\n        <TooltipKey>color</TooltipKey>\n        <TooltipValue>{cell.color}</TooltipValue>\n    </TooltipWrapper>\n)\n\nexport default CustomTooltip\n","import React from 'react'\nimport { mapFormat, settingsMapper } from '../../../lib/settings'\nimport CustomTooltip from './CustomTooltip'\n\nconst CustomSvgCell = ({\n    position,\n    size,\n    x,\n    y,\n    color,\n    fill,\n    opacity,\n    borderWidth,\n    borderColor,\n    data,\n    onHover,\n    onLeave,\n    onClick,\n}) => (\n    <circle\n        r={size / 2}\n        cx={x + size / 2}\n        cy={y + size / 2}\n        fill={fill || color}\n        strokeWidth={borderWidth}\n        stroke={borderColor}\n        opacity={opacity}\n        onMouseEnter={onHover}\n        onMouseMove={onHover}\n        onMouseLeave={onLeave}\n        onClick={event => {\n            onClick({ position, color, x, y, data }, event)\n        }}\n    />\n)\n\nconst CustomHtmlCell = ({\n    position,\n    size,\n    x,\n    y,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    data,\n    onHover,\n    onLeave,\n    onClick,\n}) => (\n    <div\n        style={{\n            borderRadius: `${size / 2}px 0 ${size / 2}px 0`,\n            position: 'absolute',\n            top: y,\n            left: x,\n            width: size,\n            height: size,\n            background: color,\n            opacity,\n            boxSizing: 'content-box',\n            borderStyle: 'solid',\n            borderWidth: `${borderWidth}px`,\n            borderColor,\n        }}\n        onMouseEnter={onHover}\n        onMouseMove={onHover}\n        onMouseLeave={onLeave}\n        onClick={event => {\n            onClick({ position, color, x, y, data }, event)\n        }}\n    />\n)\n\nexport default settingsMapper(\n    {\n        valueFormat: mapFormat,\n        cellComponent: (value, values, options) => {\n            if (value === `Custom(props) => (…)`) {\n                if (options.component === 'Waffle') return CustomSvgCell\n                return CustomHtmlCell\n            }\n            return undefined\n        },\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return undefined\n\n            return CustomTooltip\n        },\n    },\n    {\n        exclude: ['custom tooltip example'],\n    }\n)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\n\nexport const settingsMapper = (mapping, { exclude = [] } = {}) => (settings, options = {}) => {\n    const overrides = {}\n\n    Object.keys(settings).forEach(key => {\n        if (mapping[key]) {\n            overrides[key] = mapping[key](settings[key], settings, options)\n        }\n    })\n\n    return {\n        ...omit(settings, exclude),\n        ...overrides,\n    }\n}\n\nexport const mapAxis = type => (value, settings) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }) => (enabled === true ? format : undefined)\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport {\n    timeMillisecond,\n    utcMillisecond,\n    timeSecond,\n    utcSecond,\n    timeMinute,\n    utcMinute,\n    timeHour,\n    utcHour,\n    timeDay,\n    utcDay,\n    timeWeek,\n    utcWeek,\n    timeSunday,\n    utcSunday,\n    timeMonday,\n    utcMonday,\n    timeTuesday,\n    utcTuesday,\n    timeWednesday,\n    utcWednesday,\n    timeThursday,\n    utcThursday,\n    timeFriday,\n    utcFriday,\n    timeSaturday,\n    utcSaturday,\n    timeMonth,\n    utcMonth,\n    timeYear,\n    utcYear,\n} from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\nimport { textPropsByEngine } from '@nivo/core'\n\nexport const centerScale = scale => {\n    const bandwidth = scale.bandwidth()\n\n    if (bandwidth === 0) return scale\n\n    let offset = bandwidth / 2\n    if (scale.round()) {\n        offset = Math.round(offset)\n    }\n\n    return d => scale(d) + offset\n}\n\nconst timeByType = {\n    millisecond: [timeMillisecond, utcMillisecond],\n    second: [timeSecond, utcSecond],\n    minute: [timeMinute, utcMinute],\n    hour: [timeHour, utcHour],\n    day: [timeDay, utcDay],\n    week: [timeWeek, utcWeek],\n    sunday: [timeSunday, utcSunday],\n    monday: [timeMonday, utcMonday],\n    tuesday: [timeTuesday, utcTuesday],\n    wednesday: [timeWednesday, utcWednesday],\n    thursday: [timeThursday, utcThursday],\n    friday: [timeFriday, utcFriday],\n    saturday: [timeSaturday, utcSaturday],\n    month: [timeMonth, utcMonth],\n    year: [timeYear, utcYear],\n}\n\nconst timeTypes = Object.keys(timeByType)\nconst timeIntervalRegexp = new RegExp(`^every\\\\s*(\\\\d+)?\\\\s*(${timeTypes.join('|')})s?$`, 'i')\n\nconst isInteger = value =>\n    typeof value === 'number' && isFinite(value) && Math.floor(value) === value\n\nexport const getScaleTicks = (scale, spec) => {\n    // specific values\n    if (Array.isArray(spec)) {\n        return spec\n    }\n\n    // continuous scales\n    if (scale.ticks) {\n        // default behaviour\n        if (spec === undefined) {\n            return scale.ticks()\n        }\n\n        // specific tick count\n        if (isInteger(spec)) {\n            return scale.ticks(spec)\n        }\n\n        if (typeof spec === 'string') {\n            // time interval\n            const matches = spec.match(timeIntervalRegexp)\n            if (matches) {\n                // UTC is used as it's more predictible\n                // however local time could be used too\n                // let's see how it fits users' requirements\n                const timeType = timeByType[matches[2]][scale.useUTC ? 1 : 0]\n                if (matches[1] === undefined) {\n                    return scale.ticks(timeType)\n                }\n\n                return scale.ticks(timeType.every(Number(matches[1])))\n            }\n\n            throw new Error(`Invalid tickValues: ${spec}`)\n        }\n    }\n\n    // non linear scale default\n    return scale.domain()\n}\n\nexport const computeCartesianTicks = ({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}) => {\n    const values = getScaleTicks(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = scale.bandwidth ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    let translate\n    let textAlign = textProps.align.center\n    let textBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d), y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align.right\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align.left\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: value,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = (format, scale) => {\n    if (!format || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const f = timeFormat(format)\n        return d => f(new Date(d))\n    }\n\n    return d3Format(format)\n}\n\nexport const computeGridLines = ({ width, height, scale, axis, values: _values }) => {\n    const lineValues = Array.isArray(_values) ? _values : undefined\n    const lineCount = isInteger(_values) ? _values : undefined\n\n    const values = lineValues || getScaleTicks(scale, lineCount)\n\n    const position = scale.bandwidth ? centerScale(scale) : scale\n\n    let lines\n    if (axis === 'x') {\n        lines = values.map(v => ({\n            key: `${v}`,\n            x1: position(v),\n            x2: position(v),\n            y1: 0,\n            y2: height,\n        }))\n    } else if (axis === 'y') {\n        lines = values.map(v => ({\n            key: `${v}`,\n            x1: 0,\n            x2: width,\n            y1: position(v),\n            y2: position(v),\n        }))\n    }\n\n    return lines\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport { animated } from 'react-spring'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@nivo/core'\n\nconst AxisTick = ({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}) => {\n    const theme = useTheme()\n\n    let value = _value\n    if (format !== undefined) {\n        value = format(value)\n    }\n\n    let gStyle = { opacity: animatedProps.opacity }\n    if (onClick) {\n        gStyle['cursor'] = 'pointer'\n    }\n\n    return (\n        <animated.g\n            transform={animatedProps.transform}\n            {...(onClick ? { onClick: e => onClick(e, value) } : {})}\n            style={gStyle}\n        >\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nAxisTick.propTypes = {\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        .isRequired,\n    format: PropTypes.func,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    lineX: PropTypes.number.isRequired,\n    lineY: PropTypes.number.isRequired,\n    textX: PropTypes.number.isRequired,\n    textY: PropTypes.number.isRequired,\n    textBaseline: PropTypes.string.isRequired,\n    textAnchor: PropTypes.string.isRequired,\n    opacity: PropTypes.number.isRequired,\n    rotate: PropTypes.number.isRequired,\n    onClick: PropTypes.func,\n    animatedProps: PropTypes.object.isRequired,\n}\nAxisTick.defaultProps = {\n    opacity: 1,\n    rotate: 0,\n}\n\nexport default memo(AxisTick)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, useTransition, animated } from 'react-spring'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { axisPropTypes } from '../props'\nimport AxisTick from './AxisTick'\n\nconst defaultTickRenderer = props => <AxisTick {...props} />\n\nconst Axis = ({\n    axis,\n    scale,\n    x,\n    y,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    format,\n    renderTick,\n    legend,\n    legendPosition,\n    legendOffset,\n    onClick,\n    ariaHidden,\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transitions = useTransition(ticks, tick => tick.key, {\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transitions.map(({ item: tick, props: transitionProps, key }, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                    key,\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nAxis.propTypes = {\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    scale: PropTypes.func.isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    length: PropTypes.number.isRequired,\n    ticksPosition: PropTypes.oneOf(['before', 'after']).isRequired,\n    tickValues: axisPropTypes.tickValues,\n    tickSize: PropTypes.number.isRequired,\n    tickPadding: PropTypes.number.isRequired,\n    tickRotation: PropTypes.number.isRequired,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func.isRequired,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']).isRequired,\n    legendOffset: PropTypes.number.isRequired,\n    onClick: PropTypes.func,\n    ariaHidden: PropTypes.bool,\n}\nAxis.defaultProps = {\n    x: 0,\n    y: 0,\n    tickSize: 5,\n    tickPadding: 5,\n    tickRotation: 0,\n    renderTick: defaultTickRenderer,\n    legendPosition: 'end',\n    legendOffset: 0,\n}\n\nexport default memo(Axis)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport Axis from './Axis'\nimport { axisPropType } from '../props'\n\nconst positions = ['top', 'right', 'bottom', 'left']\n\nconst Axes = ({ xScale, yScale, width, height, top, right, bottom, left }) => {\n    const axes = { top, right, bottom, left }\n\n    return positions.map(position => {\n        const axis = axes[position]\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n\n        return (\n            <Axis\n                key={position}\n                {...axis}\n                axis={isXAxis ? 'x' : 'y'}\n                x={position === 'right' ? width : 0}\n                y={position === 'bottom' ? height : 0}\n                scale={isXAxis ? xScale : yScale}\n                length={isXAxis ? width : height}\n                ticksPosition={ticksPosition}\n            />\n        )\n    })\n}\n\nAxes.propTypes = {\n    xScale: PropTypes.func,\n    yScale: PropTypes.func,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    top: axisPropType,\n    right: axisPropType,\n    bottom: axisPropType,\n    left: axisPropType,\n}\n\nexport default memo(Axes)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from 'react-spring'\nimport { useTheme } from '@nivo/core'\n\nconst GridLine = ({ animatedProps }) => {\n    const theme = useTheme()\n\n    return <animated.line {...animatedProps} {...theme.grid.line} />\n}\n\nGridLine.propTypes = {\n    x1: PropTypes.number.isRequired,\n    x2: PropTypes.number.isRequired,\n    y1: PropTypes.number.isRequired,\n    y2: PropTypes.number.isRequired,\n    animatedProps: PropTypes.object.isRequired,\n}\nGridLine.defaultProps = {\n    x1: 0,\n    x2: 0,\n    y1: 0,\n    y2: 0,\n}\n\nexport default memo(GridLine)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTransition } from 'react-spring'\nimport { useMotionConfig } from '@nivo/core'\nimport GridLine from './GridLine'\n\nconst GridLines = ({ lines }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transitions = useTransition(lines, line => line.key, {\n        initial: line => ({\n            opacity: 1,\n            x1: line.x1,\n            x2: line.x2,\n            y1: line.y1,\n            y2: line.y2,\n        }),\n        from: line => ({\n            opacity: 0,\n            x1: line.x1,\n            x2: line.x2,\n            y1: line.y1,\n            y2: line.y2,\n        }),\n        enter: line => ({\n            opacity: 1,\n            x1: line.x1,\n            x2: line.x2,\n            y1: line.y1,\n            y2: line.y2,\n        }),\n        update: line => ({\n            opacity: 1,\n            x1: line.x1,\n            x2: line.x2,\n            y1: line.y1,\n            y2: line.y2,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <g>\n            {transitions.map(({ item: line, props: animatedProps, key }) => (\n                <GridLine {...line} key={key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n}\n\nGridLines.propTypes = {\n    type: PropTypes.oneOf(['x', 'y']).isRequired,\n    lines: PropTypes.arrayOf(\n        PropTypes.shape({\n            key: PropTypes.string.isRequired,\n            x1: PropTypes.number,\n            x2: PropTypes.number,\n            y1: PropTypes.number,\n            y2: PropTypes.number,\n        })\n    ).isRequired,\n}\n\nexport default memo(GridLines)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport GridLines from './GridLines'\nimport { computeGridLines } from '../compute'\n\nconst Grid = ({ width, height, xScale, yScale, xValues, yValues }) => {\n    const xLines = useMemo(() => {\n        if (!xScale) return false\n\n        return computeGridLines({\n            width,\n            height,\n            scale: xScale,\n            axis: 'x',\n            values: xValues,\n        })\n    }, [xScale, xValues])\n\n    const yLines = yScale\n        ? computeGridLines({\n              width,\n              height,\n              scale: yScale,\n              axis: 'y',\n              values: yValues,\n          })\n        : false\n\n    return (\n        <>\n            {xLines && <GridLines type=\"x\" lines={xLines} />}\n            {yLines && <GridLines type=\"y\" lines={yLines} />}\n        </>\n    )\n}\n\nGrid.propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n\n    xScale: PropTypes.func,\n    yScale: PropTypes.func,\n    xValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n    yValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n}\n\nexport default memo(Grid)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nexport const degreesToRadians = degrees => (degrees * Math.PI) / 180\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { degreesToRadians } from './utils'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\n\nexport const renderAxisToCanvas = (\n    ctx,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontSize}px ${theme.axis.ticks.text.fontFamily}`\n\n    if (theme.axis.domain.line.strokeWidth > 0) {\n        ctx.lineWidth = theme.axis.domain.line.strokeWidth\n        ctx.lineCap = 'square'\n        ctx.strokeStyle = theme.axis.domain.line.stroke\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    ticks.forEach(tick => {\n        if (theme.axis.ticks.line.strokeWidth > 0) {\n            ctx.lineWidth = theme.axis.ticks.line.strokeWidth\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.axis.ticks.line.stroke\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format !== undefined ? format(tick.value) : tick.value\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n        ctx.fillStyle = theme.axis.ticks.text.fill\n        ctx.fillText(value, 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n        ctx.fillStyle = theme.axis.legend.text.fill\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nconst positions = ['top', 'right', 'bottom', 'left']\n\nexport const renderAxesToCanvas = (\n    ctx,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position]\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = (ctx, { width, height, scale, axis, values }) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n"],"sourceRoot":""}