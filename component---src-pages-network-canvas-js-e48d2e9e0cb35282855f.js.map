{"version":3,"file":"component---src-pages-network-canvas-js-e48d2e9e0cb35282855f.js","mappings":"yZAOA,IAAMA,EAAoBC,OAAOC,OAAO,CACpCC,WACsB,oBAAXC,QAA0BA,OAAOC,iBAAmBD,OAAOC,iBAAmB,EAEzFC,OAAQ,CACJC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,GAGVC,aAAc,WACdC,YAAa,EACbC,WAAY,GAEZC,UAAW,SAAAC,GAAI,OAAIA,EAAKC,OACxBC,gBAAiB,EACjBC,gBAAiB,CAAEC,MAAO,cAE1BC,UAAWC,EAAAA,GAAAA,UACXC,cAAe,EAEfC,eAAe,IAgDnB,UA3CsB,WAClB,OACI,SAAC,IAAD,CACIC,KAAK,gBACLC,KAAMA,EAAAA,GACNC,KAAK,UACLC,QAASF,EAAAA,GACTG,cAAc,SACdC,WAAYC,EAAAA,EACZ9B,kBAAmBA,EACnB+B,kBAAmBV,EAAAA,GACnBW,aAAc,kBAbCC,EAAAA,EAAAA,OAqBfC,YAAa,SAAAC,GAAI,OAAIA,EAAKC,MAAMC,QAjBpC,SAmBK,SAACR,EAAYM,EAAMhB,EAAOmB,GACvB,OACI,SAAC,KAAD,GACIF,MAAOD,EAAKC,MACZG,MAAOJ,EAAKI,OACRV,EAHR,CAIIV,MAAOA,EACPqB,QAAS,SAAAzB,GACLuB,EAAU,CACNG,KAAM,QACNC,MAAM,cAAe3B,EAAK4B,GAArB,YAAmC5B,EAAK6B,MAC7C5B,MAAOD,EAAKC,MACZmB,KAAMpB","sources":["webpack://nivo-website/./src/pages/network/canvas.js"],"sourcesContent":["import React from 'react'\nimport { ResponsiveNetworkCanvas, NetworkCanvasDefaultProps } from '@nivo/network'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/network/meta.yml'\nimport { groups } from '../../data/components/network/props'\nimport { generateNetworkData } from '@nivo/generators'\n\nconst initialProperties = Object.freeze({\n    pixelRatio:\n        typeof window !== 'undefined' && window.devicePixelRatio ? window.devicePixelRatio : 1,\n\n    margin: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    },\n\n    linkDistance: 'distance',\n    repulsivity: 4,\n    iterations: 60,\n\n    nodeColor: node => node.color,\n    nodeBorderWidth: 1,\n    nodeBorderColor: { theme: 'background' },\n\n    linkColor: NetworkCanvasDefaultProps.linkColor,\n    linkThickness: 1,\n\n    isInteractive: true,\n})\n\nconst generateData = () => generateNetworkData()\n\nconst NetworkCanvas = () => {\n    return (\n        <ComponentTemplate\n            name=\"NetworkCanvas\"\n            meta={meta.NetworkCanvas}\n            icon=\"network\"\n            flavors={meta.flavors}\n            currentFlavor=\"canvas\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={NetworkCanvasDefaultProps}\n            generateData={() =>\n                generateData({\n                    rootNodeRadius: 10,\n                    maxMidNodes: 32,\n                    midNodeRadius: 6,\n                    leafRadius: 3,\n                })\n            }\n            getDataSize={data => data.nodes.length}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveNetworkCanvas\n                        nodes={data.nodes}\n                        links={data.links}\n                        {...properties}\n                        theme={theme}\n                        onClick={node => {\n                            logAction({\n                                type: 'click',\n                                label: `[node] id: ${node.id}, index: ${node.index}`,\n                                color: node.color,\n                                data: node,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default NetworkCanvas\n"],"names":["initialProperties","Object","freeze","pixelRatio","window","devicePixelRatio","margin","top","right","bottom","left","linkDistance","repulsivity","iterations","nodeColor","node","color","nodeBorderWidth","nodeBorderColor","theme","linkColor","NetworkCanvasDefaultProps","linkThickness","isInteractive","name","meta","icon","flavors","currentFlavor","properties","groups","defaultProperties","generateData","generateNetworkData","getDataSize","data","nodes","length","logAction","links","onClick","type","label","id","index"],"sourceRoot":""}