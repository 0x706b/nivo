{"version":3,"file":"8c100872d36789d92c6d44f3d0917111aaa22371-93f4fc6d85599ad892a2.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-path/src/path.js","webpack://nivo-website/../node_modules/d3-shape/src/arc.js","webpack://nivo-website/../node_modules/d3-shape/src/constant.js","webpack://nivo-website/../node_modules/d3-shape/src/line.js","webpack://nivo-website/../node_modules/d3-shape/src/point.js","webpack://nivo-website/../src/arc_labels/ArcLabel.tsx","webpack://nivo-website/../src/utils.ts","webpack://nivo-website/../src/arcTransitionMode.ts","webpack://nivo-website/../src/centers.ts","webpack://nivo-website/../src/arc_labels/ArcLabelsLayer.tsx","webpack://nivo-website/../src/arc_labels/canvas.ts","webpack://nivo-website/../src/arc_labels/useArcLabels.ts","webpack://nivo-website/../src/arc_link_labels/ArcLinkLabel.tsx","webpack://nivo-website/../src/arc_link_labels/compute.ts","webpack://nivo-website/../src/arc_link_labels/useArcLinkLabelsTransition.ts","webpack://nivo-website/../src/arc_link_labels/ArcLinkLabelsLayer.tsx","webpack://nivo-website/../src/arc_link_labels/canvas.ts","webpack://nivo-website/../src/arc_link_labels/useArcLinkLabels.ts","webpack://nivo-website/../src/arc_link_labels/useArcLinks.ts","webpack://nivo-website/../src/arc_link_labels/index.ts","webpack://nivo-website/../src/ArcLine.tsx","webpack://nivo-website/../src/ArcShape.tsx","webpack://nivo-website/../src/interpolateArc.ts","webpack://nivo-website/../src/ArcsLayer.tsx","webpack://nivo-website/../src/useArcsTransition.ts","webpack://nivo-website/../src/boundingBox.ts","webpack://nivo-website/../src/interactivity.ts","webpack://nivo-website/../src/useArcGenerator.ts"],"sourcesContent":["var pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path();\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function moveTo(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function lineTo(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function quadraticCurveTo(x1, y1, x, y) {\n    this._ += \"Q\" + +x1 + \",\" + +y1 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + +x1 + \",\" + +y1 + \",\" + +x2 + \",\" + +y2 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function arcTo(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.\n\n    if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x1,y1).\n\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    } // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.\n\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + +(y01 * x20 > x01 * y20) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function arc(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.\n\n    if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x0,y0).\n\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    } // Is this arc empty? We’re done.\n\n\n    if (!r) return; // Does the angle go the wrong way? Flip the direction.\n\n    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.\n\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    } // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + +(da >= pi) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function rect(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + +w + \"v\" + +h + \"h\" + -w + \"Z\";\n  },\n  toString: function toString() {\n    return this._;\n  }\n};\nexport default path;","import { path } from \"d3-path\";\nimport constant from \"./constant.js\";\nimport { abs, acos, asin, atan2, cos, epsilon, halfPi, max, min, pi, sin, sqrt, tau } from \"./math.js\";\n\nfunction arcInnerRadius(d) {\n  return d.innerRadius;\n}\n\nfunction arcOuterRadius(d) {\n  return d.outerRadius;\n}\n\nfunction arcStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction arcEndAngle(d) {\n  return d.endAngle;\n}\n\nfunction arcPadAngle(d) {\n  return d && d.padAngle; // Note: optional!\n}\n\nfunction intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var x10 = x1 - x0,\n      y10 = y1 - y0,\n      x32 = x3 - x2,\n      y32 = y3 - y2,\n      t = y32 * x10 - x32 * y10;\n  if (t * t < epsilon) return;\n  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;\n  return [x0 + t * x10, y0 + t * y10];\n} // Compute perpendicular offset line of length rc.\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\n\n\nfunction cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n  var x01 = x0 - x1,\n      y01 = y0 - y1,\n      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\n      ox = lo * y01,\n      oy = -lo * x01,\n      x11 = x0 + ox,\n      y11 = y0 + oy,\n      x10 = x1 + ox,\n      y10 = y1 + oy,\n      x00 = (x11 + x10) / 2,\n      y00 = (y11 + y10) / 2,\n      dx = x10 - x11,\n      dy = y10 - y11,\n      d2 = dx * dx + dy * dy,\n      r = r1 - rc,\n      D = x11 * y10 - x10 * y11,\n      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),\n      cx0 = (D * dy - dx * d) / d2,\n      cy0 = (-D * dx - dy * d) / d2,\n      cx1 = (D * dy + dx * d) / d2,\n      cy1 = (-D * dx + dy * d) / d2,\n      dx0 = cx0 - x00,\n      dy0 = cy0 - y00,\n      dx1 = cx1 - x00,\n      dy1 = cy1 - y00; // Pick the closer of the two intersection points.\n  // TODO Is there a faster way to determine which intersection to use?\n\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n  return {\n    cx: cx0,\n    cy: cy0,\n    x01: -ox,\n    y01: -oy,\n    x11: cx0 * (r1 / r - 1),\n    y11: cy0 * (r1 / r - 1)\n  };\n}\n\nexport default function () {\n  var innerRadius = arcInnerRadius,\n      outerRadius = arcOuterRadius,\n      cornerRadius = constant(0),\n      padRadius = null,\n      startAngle = arcStartAngle,\n      endAngle = arcEndAngle,\n      padAngle = arcPadAngle,\n      context = null;\n\n  function arc() {\n    var buffer,\n        r,\n        r0 = +innerRadius.apply(this, arguments),\n        r1 = +outerRadius.apply(this, arguments),\n        a0 = startAngle.apply(this, arguments) - halfPi,\n        a1 = endAngle.apply(this, arguments) - halfPi,\n        da = abs(a1 - a0),\n        cw = a1 > a0;\n    if (!context) context = buffer = path(); // Ensure that the outer radius is always larger than the inner radius.\n\n    if (r1 < r0) r = r1, r1 = r0, r0 = r; // Is it a point?\n\n    if (!(r1 > epsilon)) context.moveTo(0, 0); // Or is it a circle or annulus?\n    else if (da > tau - epsilon) {\n      context.moveTo(r1 * cos(a0), r1 * sin(a0));\n      context.arc(0, 0, r1, a0, a1, !cw);\n\n      if (r0 > epsilon) {\n        context.moveTo(r0 * cos(a1), r0 * sin(a1));\n        context.arc(0, 0, r0, a1, a0, cw);\n      }\n    } // Or is it a circular or annular sector?\n    else {\n      var a01 = a0,\n          a11 = a1,\n          a00 = a0,\n          a10 = a1,\n          da0 = da,\n          da1 = da,\n          ap = padAngle.apply(this, arguments) / 2,\n          rp = ap > epsilon && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\n          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n          rc0 = rc,\n          rc1 = rc,\n          t0,\n          t1; // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n\n      if (rp > epsilon) {\n        var p0 = asin(rp / r0 * sin(ap)),\n            p1 = asin(rp / r1 * sin(ap));\n        if ((da0 -= p0 * 2) > epsilon) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n        if ((da1 -= p1 * 2) > epsilon) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n      }\n\n      var x01 = r1 * cos(a01),\n          y01 = r1 * sin(a01),\n          x10 = r0 * cos(a10),\n          y10 = r0 * sin(a10); // Apply rounded corners?\n\n      if (rc > epsilon) {\n        var x11 = r1 * cos(a11),\n            y11 = r1 * sin(a11),\n            x00 = r0 * cos(a00),\n            y00 = r0 * sin(a00),\n            oc; // Restrict the corner radius according to the sector angle.\n\n        if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {\n          var ax = x01 - oc[0],\n              ay = y01 - oc[1],\n              bx = x11 - oc[0],\n              by = y11 - oc[1],\n              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\n              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = min(rc, (r0 - lc) / (kc - 1));\n          rc1 = min(rc, (r1 - lc) / (kc + 1));\n        }\n      } // Is the sector collapsed to a line?\n\n\n      if (!(da1 > epsilon)) context.moveTo(x01, y01); // Does the sector’s outer ring have rounded corners?\n      else if (rc1 > epsilon) {\n        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?\n\n        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      } // Or is the outer ring just a circular arc?\n      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw); // Is there no inner ring, and it’s a circular sector?\n      // Or perhaps it’s an annular sector collapsed due to padding?\n\n      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10); // Does the sector’s inner ring (or point) have rounded corners?\n      else if (rc0 > epsilon) {\n        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?\n\n        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      } // Or is the inner ring just a circular arc?\n      else context.arc(0, 0, r0, a10, a00, cw);\n    }\n    context.closePath();\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  arc.centroid = function () {\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;\n    return [cos(a) * r, sin(a) * r];\n  };\n\n  arc.innerRadius = function (_) {\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : innerRadius;\n  };\n\n  arc.outerRadius = function (_) {\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : outerRadius;\n  };\n\n  arc.cornerRadius = function (_) {\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : cornerRadius;\n  };\n\n  arc.padRadius = function (_) {\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), arc) : padRadius;\n  };\n\n  arc.startAngle = function (_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : startAngle;\n  };\n\n  arc.endAngle = function (_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : endAngle;\n  };\n\n  arc.padAngle = function (_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : padAngle;\n  };\n\n  arc.context = function (_) {\n    return arguments.length ? (context = _ == null ? null : _, arc) : context;\n  };\n\n  return arc;\n}","export default function (x) {\n  return function constant() {\n    return x;\n  };\n}","import { path } from \"d3-path\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport { x as pointX, y as pointY } from \"./point.js\";\nexport default function () {\n  var x = pointX,\n      y = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function line(data) {\n    var i,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer;\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();else output.lineEnd();\n      }\n\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  line.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), line) : x;\n  };\n\n  line.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), line) : y;\n  };\n\n  line.defined = function (_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n  };\n\n  line.curve = function (_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function (_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}","export function x(p) {\n  return p[0];\n}\nexport function y(p) {\n  return p[1];\n}","import { CSSProperties } from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\n\nconst staticStyle: CSSProperties = {\n    pointerEvents: 'none',\n}\n\nexport interface ArcLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        progress: SpringValue<number>\n        transform: Interpolation<string>\n        textColor: string\n    }\n}\n\nexport const ArcLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={style.transform} opacity={style.progress} style={staticStyle}>\n            <animated.text\n                textAnchor=\"middle\"\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { useMemo } from 'react'\nimport { radiansToDegrees, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { DatumWithArc } from './types'\n\n/**\n * Make sure an angle (expressed in radians)\n * always falls in the range 0~2*PI.\n */\nexport const getNormalizedAngle = (angle: number) => {\n    let normalizedAngle = angle % (Math.PI * 2)\n    if (normalizedAngle < 0) {\n        normalizedAngle += Math.PI * 2\n    }\n\n    return normalizedAngle\n}\n\n/**\n * Filter out arcs with a length below `skipAngle`.\n */\nexport const filterDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) =>\n    data.filter(\n        datum => Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >= skipAngle\n    )\n\n/**\n * Memoized version of `filterDataBySkipAngle`.\n */\nexport const useFilteredDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) => useMemo(() => filterDataBySkipAngle(data, skipAngle), [data, skipAngle])\n\nexport const svgEllipticalArcCommand = (\n    radius: number,\n    largeArcFlag: 0 | 1,\n    sweepFlag: 0 | 1,\n    x: number,\n    y: number\n) =>\n    [\n        'A',\n        radius,\n        radius,\n        0, // x-axis-rotation\n        largeArcFlag,\n        sweepFlag,\n        x,\n        y,\n    ].join(' ')\n\nexport const generateSvgArc = (\n    radius: number,\n    originalStartAngle: number,\n    originalEndAngle: number\n): string => {\n    const startAngle = Math.min(originalStartAngle, originalEndAngle)\n    const endAngle = Math.max(originalStartAngle, originalEndAngle)\n\n    const start = positionFromAngle(degreesToRadians(endAngle), radius)\n    const end = positionFromAngle(degreesToRadians(startAngle), radius)\n\n    // we have a full circle, we cannot use a single elliptical arc\n    // to draw it, so we use 2 in that case.\n    if (endAngle - startAngle >= 360) {\n        const mid = positionFromAngle(degreesToRadians(startAngle + 180), radius)\n\n        return [\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 1, mid.x, mid.y),\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 0, mid.x, mid.y),\n        ].join(' ')\n    }\n\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1\n\n    return [\n        `M ${start.x} ${start.y}`,\n        svgEllipticalArcCommand(radius, largeArcFlag, 0, end.x, end.y),\n    ].join(' ')\n}\n","import { Arc, DatumWithArc } from './types'\nimport { useMemo } from 'react'\n\nexport interface ArcTransitionModeConfig {\n    enter: (arc: Arc) => Arc\n    update: (arc: Arc) => Arc\n    leave: (arc: Arc) => Arc\n}\n\nexport const arcTransitionModes = [\n    'startAngle',\n    'middleAngle',\n    'endAngle',\n    'innerRadius',\n    'centerRadius',\n    'outerRadius',\n    'pushIn',\n    'pushOut',\n] as const\nexport type ArcTransitionMode = typeof arcTransitionModes[number]\n\nexport const arcTransitionModeById: Record<ArcTransitionMode, ArcTransitionModeConfig> = {\n    startAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n    },\n    middleAngle: {\n        enter: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n    },\n    endAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n    },\n    innerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n    },\n    centerRadius: {\n        enter: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n    },\n    outerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n    pushIn: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n    },\n    pushOut: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n}\n\nexport interface TransitionExtra<Datum extends DatumWithArc, ExtraProps> {\n    enter: (datum: Datum) => ExtraProps\n    update: (datum: Datum) => ExtraProps\n    leave: (datum: Datum) => ExtraProps\n}\n\nexport const useArcTransitionMode = <Datum extends DatumWithArc, ExtraProps>(\n    mode: ArcTransitionMode,\n    extraTransition?: TransitionExtra<Datum, ExtraProps>\n) =>\n    useMemo(() => {\n        const transitionMode = arcTransitionModeById[mode]\n\n        return {\n            enter: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.enter(datum.arc),\n                ...(extraTransition ? extraTransition.enter(datum) : {}),\n            }),\n            update: (datum: Datum) => ({\n                progress: 1,\n                ...transitionMode.update(datum.arc),\n                ...(extraTransition ? extraTransition.update(datum) : {}),\n            }),\n            leave: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.leave(datum.arc),\n                ...(extraTransition ? extraTransition.leave(datum) : {}),\n            }),\n        }\n    }, [mode, extraTransition])\n","import { useMemo } from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport {\n    // @ts-ignore\n    midAngle,\n    positionFromAngle,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Arc, DatumWithArc, Point } from './types'\nimport { filterDataBySkipAngle } from './utils'\nimport { ArcTransitionMode, TransitionExtra, useArcTransitionMode } from './arcTransitionMode'\n\nexport const computeArcCenter = (arc: Arc, offset: number): Point => {\n    const angle = midAngle(arc) - Math.PI / 2\n    const radius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) * offset\n\n    return positionFromAngle(angle, radius)\n}\n\nexport const interpolateArcCenter =\n    (offset: number) =>\n    (\n        startAngleValue: SpringValue<number>,\n        endAngleValue: SpringValue<number>,\n        innerRadiusValue: SpringValue<number>,\n        outerRadiusValue: SpringValue<number>\n    ) =>\n        to(\n            [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n            (startAngle, endAngle, innerRadius, outerRadius) => {\n                const centroid = computeArcCenter(\n                    { startAngle, endAngle, innerRadius, outerRadius },\n                    offset\n                )\n\n                return `translate(${centroid.x},${centroid.y})`\n            }\n        )\n\nexport const useArcCentersTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset = 0.5,\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArcCenter(offset),\n    }\n}\n\nexport interface ArcCenter<Datum extends DatumWithArc> extends Point {\n    data: Datum\n}\n\n/**\n * Compute an array of arc centers from an array of data containing arcs.\n *\n * If you plan to animate those, you could use `useArcCentersTransition`\n * instead, you could use the returned array with react-spring `useTransition`,\n * but this would lead to cartesian transitions (x/y), while `useArcCentersTransition`\n * will generate proper transitions using radius/angle.\n */\nexport const useArcCenters = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    offset = 0.5,\n    skipAngle = 0,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset?: number\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // this can be used to append extra properties to the centers,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: Datum) => ExtraProps\n}): (ArcCenter<Datum> & ExtraProps)[] =>\n    useMemo(\n        () =>\n            filterDataBySkipAngle<Datum>(data, skipAngle)\n                // compute position and extra props for each eligible datum\n                .map(datum => {\n                    const position = computeArcCenter(datum.arc, offset)\n\n                    return {\n                        ...computeExtraProps(datum),\n                        x: position.x,\n                        y: position.y,\n                        data: datum,\n                    }\n                }),\n        [data, offset, skipAngle, computeExtraProps]\n    )\n","import { createElement, useMemo } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, radiansToDegrees, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useArcCentersTransition } from '../centers'\nimport { ArcTransitionMode } from '../arcTransitionMode'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabelsProps } from './props'\nimport { ArcLabel, ArcLabelProps } from './ArcLabel'\n\nexport type ArcLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: PropertyAccessor<Datum, string>\n    radiusOffset: ArcLabelsProps<Datum>['arcLabelsRadiusOffset']\n    skipAngle: ArcLabelsProps<Datum>['arcLabelsSkipAngle']\n    textColor: ArcLabelsProps<Datum>['arcLabelsTextColor']\n    transitionMode: ArcTransitionMode\n    component?: ArcLabelsProps<Datum>['arcLabelsComponent']\n}\n\nexport const ArcLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    transitionMode,\n    label: labelAccessor,\n    radiusOffset,\n    skipAngle,\n    textColor,\n    component = ArcLabel,\n}: ArcLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useMemo(\n        () =>\n            data.filter(datum => {\n                return (\n                    Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                    skipAngle\n                )\n            }),\n        [data, skipAngle]\n    )\n\n    const { transition, interpolate } = useArcCentersTransition<Datum>(\n        filteredData,\n        radiusOffset,\n        transitionMode\n    )\n\n    const Label: ArcLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        transform: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textColor: getTextColor(datum),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabel } from './useArcLabels'\n\nexport const drawCanvasArcLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLabel<Datum>[],\n    theme: CompleteTheme\n) => {\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.fillText(`${label.label}`, label.x, label.y)\n    })\n}\n","import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcCenters, ArcCenter } from '../centers'\n\nexport interface ArcLabel<Datum extends DatumWithArcAndColor> extends ArcCenter<Datum> {\n    label: string\n    textColor: string\n}\n\n/**\n * Compute arc labels, please note that the datum should\n * contain a color in order to be able to compute the label text color.\n *\n * Please see `useArcCenters` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset,\n    skipAngle,\n    label,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    skipAngle?: number\n    label: PropertyAccessor<Datum, string>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (datum: Datum) => {\n            return {\n                label: getLabel(datum),\n                textColor: getTextColor(datum),\n            }\n        },\n        [getLabel, getTextColor]\n    )\n\n    return useArcCenters<Datum, Omit<ArcLabel<Datum>, keyof ArcCenter<Datum>>>({\n        data,\n        offset,\n        skipAngle,\n        computeExtraProps,\n    })\n}\n","import { useTheme } from '@nivo/core'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from '../types'\n\nexport interface ArcLinkLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        path: Interpolation<string>\n        thickness: number\n        textPosition: Interpolation<string>\n        textAnchor: Interpolation<'start' | 'end'>\n        linkColor: SpringValue<string>\n        opacity: SpringValue<number>\n        textColor: SpringValue<string>\n    }\n}\n\nexport const ArcLinkLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLinkLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={style.opacity}>\n            <animated.path\n                fill=\"none\"\n                stroke={style.linkColor}\n                strokeWidth={style.thickness}\n                d={style.path}\n            />\n            <animated.text\n                transform={style.textPosition}\n                textAnchor={style.textAnchor}\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { positionFromAngle } from '@nivo/core'\nimport { Arc, Point } from '../types'\nimport { getNormalizedAngle } from '../utils'\nimport { ArcLink } from './types'\n\n/**\n * Compute text anchor for a given arc.\n *\n * `computeArcLink` already computes a `side`, but when using\n * `react-spring`, you cannot have a single interpolation\n * returning several output values, so we need to compute\n * them in separate interpolations.\n */\nexport const computeArcLinkTextAnchor = (arc: Arc): 'start' | 'end' => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        return 'start'\n    }\n\n    return 'end'\n}\n\n/**\n * Compute the link of a single arc, returning its points,\n * please note that points coordinates are relative to\n * the center of the arc.\n */\nexport const computeArcLink = (\n    arc: Arc,\n    offset: number,\n    diagonalLength: number,\n    straightLength: number\n): ArcLink => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n    const point0: Point = positionFromAngle(centerAngle, arc.outerRadius + offset)\n    const point1: Point = positionFromAngle(centerAngle, arc.outerRadius + offset + diagonalLength)\n\n    let side: ArcLink['side']\n    let point2: Point\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        side = 'after'\n        point2 = {\n            x: point1.x + straightLength,\n            y: point1.y,\n        }\n    } else {\n        side = 'before'\n        point2 = {\n            x: point1.x - straightLength,\n            y: point1.y,\n        }\n    }\n\n    return {\n        side,\n        points: [point0, point1, point2],\n    }\n}\n","import { useMemo } from 'react'\nimport { SpringValue, useTransition, to } from '@react-spring/web'\nimport { line } from 'd3-shape'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, Point } from '../types'\nimport { useFilteredDataBySkipAngle } from '../utils'\nimport { computeArcLink, computeArcLinkTextAnchor } from './compute'\n\nconst lineGenerator = line<Point>()\n    .x(d => d.x)\n    .y(d => d.y)\n\ntype AnimatedProps = {\n    startAngle: number\n    endAngle: number\n    innerRadius: number\n    outerRadius: number\n    offset: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    linkColor: string\n    textColor: string\n    opacity: number\n}\n\nconst useTransitionPhases = <Datum extends DatumWithArcAndColor>({\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset,\n    getLinkColor,\n    getTextColor,\n}: Pick<AnimatedProps, 'offset' | 'diagonalLength' | 'straightLength' | 'textOffset'> & {\n    getLinkColor: (datum: Datum) => string\n    getTextColor: (datum: Datum) => string\n}): Record<'enter' | 'update' | 'leave', (datum: Datum) => AnimatedProps> =>\n    useMemo(\n        () => ({\n            enter: (datum: Datum) => ({\n                startAngle: datum.arc.startAngle,\n                endAngle: datum.arc.endAngle,\n                innerRadius: datum.arc.innerRadius,\n                outerRadius: datum.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(datum),\n                textColor: getTextColor(datum),\n                opacity: 0,\n            }),\n            update: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength,\n                straightLength,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 1,\n            }),\n            leave: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 0,\n            }),\n        }),\n        [diagonalLength, straightLength, textOffset, getLinkColor, getTextColor]\n    )\n\nconst interpolateLink = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated\n        ) => {\n            const { points } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            return lineGenerator(points)\n        }\n    )\n\nconst interpolateTextAnchor = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return computeArcLinkTextAnchor({\n                startAngle,\n                endAngle,\n                innerRadius,\n                outerRadius,\n            })\n        }\n    )\n\n/**\n * Interpolating the text position involves almost the same computation\n * as `interpolateLink`, unfortunately `react-spring` does not support\n * multiple output values from a single interpolation.\n *\n * We should revise this if `react-spring` adds this feature at some point.\n */\nconst interpolateTextPosition = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>,\n    textOffsetValue: SpringValue<AnimatedProps['textOffset']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n            textOffsetValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated,\n            textOffset\n        ) => {\n            const { points, side } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            const position = points[2]\n            if (side === 'before') {\n                position.x -= textOffset\n            } else {\n                position.x += textOffset\n            }\n\n            return `translate(${position.x},${position.y})`\n        }\n    )\n\n/**\n * This hook can be used to animate a group of arc link labels,\n * if you just want to compute the labels, please use `useArcLinkLabels`.\n */\nexport const useArcLinkLabelsTransition = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset = 0,\n    diagonalLength,\n    straightLength,\n    skipAngle = 0,\n    textOffset,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    skipAngle?: number\n    textOffset: number\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useFilteredDataBySkipAngle<Datum>(data, skipAngle)\n    const transitionPhases = useTransitionPhases<Datum>({\n        offset,\n        diagonalLength,\n        straightLength,\n        textOffset,\n        getLinkColor,\n        getTextColor,\n    })\n\n    const transition = useTransition<Datum, AnimatedProps>(filteredData, {\n        keys: datum => datum.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolateLink,\n        interpolateTextAnchor,\n        interpolateTextPosition,\n    }\n}\n","import { createElement } from 'react'\nimport { usePropertyAccessor } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcLinkLabelsTransition } from './useArcLinkLabelsTransition'\nimport { ArcLinkLabelsProps } from './props'\nimport { ArcLinkLabel, ArcLinkLabelProps } from './ArcLinkLabel'\n\nexport type ArcLinkLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLinkLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLinkLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: ArcLinkLabelsProps<Datum>['arcLinkLabel']\n    skipAngle: ArcLinkLabelsProps<Datum>['arcLinkLabelsSkipAngle']\n    offset: ArcLinkLabelsProps<Datum>['arcLinkLabelsOffset']\n    diagonalLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsDiagonalLength']\n    straightLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsStraightLength']\n    strokeWidth: ArcLinkLabelsProps<Datum>['arcLinkLabelsThickness']\n    textOffset: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextOffset']\n    textColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextColor']\n    linkColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsColor']\n    component?: ArcLinkLabelComponent<Datum>\n}\n\nexport const ArcLinkLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    label: labelAccessor,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    strokeWidth,\n    textOffset,\n    textColor,\n    linkColor,\n    component = ArcLinkLabel,\n}: ArcLinkLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n\n    const { transition, interpolateLink, interpolateTextAnchor, interpolateTextPosition } =\n        useArcLinkLabelsTransition<Datum>({\n            data,\n            skipAngle,\n            offset,\n            diagonalLength,\n            straightLength,\n            textOffset,\n            linkColor,\n            textColor,\n        })\n\n    const Label: ArcLinkLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        thickness: strokeWidth,\n                        path: interpolateLink(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength\n                        ),\n                        textAnchor: interpolateTextAnchor(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textPosition: interpolateTextPosition(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength,\n                            transitionProps.textOffset\n                        ),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n","import {\n    // @ts-ignore\n    textPropsByEngine,\n    CompleteTheme,\n} from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkLabel } from './types'\n\nexport const drawCanvasArcLinkLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLinkLabel<Datum>[],\n    theme: CompleteTheme,\n    strokeWidth: number\n) => {\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.textAlign = textPropsByEngine.canvas.align[label.textAnchor]\n        ctx.fillText(`${label.label}`, label.x, label.y)\n\n        ctx.beginPath()\n        ctx.strokeStyle = label.linkColor\n        ctx.lineWidth = strokeWidth\n        label.points.forEach((point, index) => {\n            if (index === 0) ctx.moveTo(point.x, point.y)\n            else ctx.lineTo(point.x, point.y)\n        })\n        ctx.stroke()\n    })\n}\n","import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkWithDatum, ArcLinkLabel } from './types'\nimport { useArcLinks } from './useArcLinks'\n\n/**\n * Compute arc link labels, please note that the datum should\n * contain a color in order to be able to compute the link/label text color.\n *\n * Please see `useArcLinks` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLinkLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset = 0,\n    label,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    skipAngle?: number\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    label: PropertyAccessor<Datum, string>\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (link: ArcLinkWithDatum<Datum>) => {\n            const position = {\n                x: link.points[2].x,\n                y: link.points[2].y,\n            }\n            let textAnchor: ArcLinkLabel<Datum>['textAnchor']\n            if (link.side === 'before') {\n                position.x -= textOffset\n                textAnchor = 'end'\n            } else {\n                position.x += textOffset\n                textAnchor = 'start'\n            }\n\n            return {\n                ...position,\n                label: getLabel(link.data),\n                linkColor: getLinkColor(link.data),\n                textAnchor,\n                textColor: getTextColor(link.data),\n            }\n        },\n        [getLabel, getLinkColor, getTextColor, textOffset]\n    )\n\n    return useArcLinks<Datum, Omit<ArcLinkLabel<Datum>, keyof ArcLinkWithDatum<Datum>>>({\n        data,\n        skipAngle,\n        offset,\n        diagonalLength,\n        straightLength,\n        computeExtraProps,\n    })\n}\n","import { useMemo } from 'react'\nimport { radiansToDegrees } from '@nivo/core'\nimport { DatumWithArc } from '../types'\nimport { ArcLinkWithDatum } from './types'\nimport { computeArcLink } from './compute'\n\n/**\n * Compute links for an array of data containing arcs.\n *\n * This is typically used to create labels for arcs,\n * and it's used for the `useArcLinkLabels` hook.\n */\nexport const useArcLinks = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    skipAngle = 0,\n    offset = 0.5,\n    diagonalLength,\n    straightLength,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // offset from arc outer radius in pixels\n    offset?: number\n    // length of the diagonal segment of the link\n    diagonalLength: number\n    // length of the straight segment of the link\n    straightLength: number\n    // this can be used to append extra properties to the links,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: ArcLinkWithDatum<Datum>) => ExtraProps\n}): (ArcLinkWithDatum<Datum> & ExtraProps)[] => {\n    const links = useMemo(\n        () =>\n            data\n                // filter out arcs with a length below `skipAngle`\n                .filter(\n                    datum =>\n                        Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                        skipAngle\n                )\n                // compute the link for each eligible arc\n                .map(datum => ({\n                    ...computeArcLink(datum.arc, offset, diagonalLength, straightLength),\n                    data: datum,\n                })),\n        [data, skipAngle, offset, diagonalLength, straightLength]\n    )\n\n    // splitting memoization of links and extra props can be more efficient,\n    // this way if only `computeExtraProps` changes, we skip links computation.\n    return useMemo(\n        () =>\n            links.map(link => ({\n                ...computeExtraProps(link),\n                ...link,\n            })),\n        [links, computeExtraProps]\n    )\n}\n","import { ArcLinkLabel } from './ArcLinkLabel'\n\nexport const ArcLinkLabelComponent = ArcLinkLabel\nexport * from './ArcLinkLabelsLayer'\nexport * from './canvas'\nexport * from './compute'\nexport * from './props'\nexport * from './types'\nexport * from './useArcLinkLabels'\nexport * from './useArcLinkLabelsTransition'\nexport * from './useArcLinks'\n","import { animated, to, AnimatedProps } from '@react-spring/web'\nimport { ExtractProps } from '@nivo/core'\nimport { generateSvgArc } from './utils'\n\ntype ArcLineProps = {\n    animated: AnimatedProps<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>\n} & ExtractProps<typeof animated.path>\n\nexport const ArcLine = ({ animated: animatedProps, ...rest }: ArcLineProps) => (\n    <animated.path\n        d={to(\n            [animatedProps.radius, animatedProps.startAngle, animatedProps.endAngle],\n            (radius, start, end) => generateSvgArc(radius, start, end)\n        )}\n        {...rest}\n    />\n)\n","import { useCallback } from 'react'\nimport * as React from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from './types'\n\nexport type ArcMouseHandler<Datum extends DatumWithArcAndColor> = (\n    datum: Datum,\n    event: React.MouseEvent<SVGPathElement>\n) => void\n\nexport interface ArcShapeProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    style: {\n        opacity: SpringValue<number>\n        color: SpringValue<string>\n        borderWidth: number\n        borderColor: SpringValue<string>\n        path: Interpolation<string>\n    }\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n}\n\n/**\n * A simple arc component to be used typically with an `ArcsLayer`.\n *\n * Please note that the component accepts `SpringValue`s instead of\n * regular values to support animations.\n */\nexport const ArcShape = <Datum extends DatumWithArcAndColor>({\n    datum,\n    style,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: ArcShapeProps<Datum>) => {\n    const handleClick = useCallback(event => onClick?.(datum, event), [onClick, datum])\n\n    const handleMouseEnter = useCallback(\n        event => onMouseEnter?.(datum, event),\n        [onMouseEnter, datum]\n    )\n\n    const handleMouseMove = useCallback(event => onMouseMove?.(datum, event), [onMouseMove, datum])\n\n    const handleMouseLeave = useCallback(\n        event => onMouseLeave?.(datum, event),\n        [onMouseLeave, datum]\n    )\n\n    return (\n        <animated.path\n            d={style.path}\n            opacity={style.opacity}\n            fill={datum.fill || style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            onClick={onClick ? handleClick : undefined}\n            onMouseEnter={onMouseEnter ? handleMouseEnter : undefined}\n            onMouseMove={onMouseMove ? handleMouseMove : undefined}\n            onMouseLeave={onMouseLeave ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { to, SpringValue } from '@react-spring/web'\nimport { ArcGenerator } from './types'\n\n/**\n * Directly animating paths for arcs leads to sub-optimal results\n * as the interpolation is going to be linear while we deal with polar coordinates,\n * this interpolator is going to generate proper arc transitions.\n * It should be used with the `useAnimatedArc` or `useArcsTransition` hooks.\n */\nexport const interpolateArc = (\n    startAngleValue: SpringValue<number>,\n    endAngleValue: SpringValue<number>,\n    innerRadiusValue: SpringValue<number>,\n    outerRadiusValue: SpringValue<number>,\n    arcGenerator: ArcGenerator\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return arcGenerator({\n                startAngle,\n                endAngle,\n                innerRadius: Math.max(0, innerRadius),\n                outerRadius: Math.max(0, outerRadius),\n            })\n        }\n    )\n","import { createElement } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, ArcGenerator } from './types'\nimport { useArcsTransition } from './useArcsTransition'\nimport { ArcTransitionMode } from './arcTransitionMode'\nimport { ArcMouseHandler, ArcShape, ArcShapeProps } from './ArcShape'\n\nexport type ArcComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcShapeProps<Datum>\n) => JSX.Element\n\ninterface ArcsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    arcGenerator: ArcGenerator\n    borderWidth: number\n    borderColor: InheritedColorConfig<Datum>\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n    transitionMode: ArcTransitionMode\n    component?: ArcComponent<Datum>\n}\n\nexport const ArcsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode,\n    component = ArcShape,\n}: ArcsLayerProps<Datum>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<Datum>(borderColor, theme)\n\n    const { transition, interpolate } = useArcsTransition<\n        Datum,\n        {\n            opacity: number\n            color: string\n            borderColor: string\n        }\n    >(data, transitionMode, {\n        enter: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        update: datum => ({\n            opacity: 1,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        leave: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n    })\n\n    const Arc: ArcComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Arc, {\n                    key: datum.id,\n                    datum,\n                    style: {\n                        ...transitionProps,\n                        borderWidth,\n                        path: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            arcGenerator\n                        ),\n                    },\n                    onClick,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                })\n            })}\n        </g>\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { DatumWithArc } from './types'\nimport { ArcTransitionMode, useArcTransitionMode, TransitionExtra } from './arcTransitionMode'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a group of arcs,\n * if you want to animate a single arc,\n * please have a look at the `useAnimatedArc` hook.\n */\nexport const useArcsTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArc,\n    }\n}\n","import { positionFromAngle, degreesToRadians } from '@nivo/core'\n\n/**\n * Computes the bounding box for a circle arc.\n *\n * Assumptions:\n *   - Anywhere the arc intersects an axis will be a max or a min.\n *   - If the arc doesn't intersect an axis, then the center\n *     will be one corner of the bounding rectangle,\n *     and this is the only case when it will be.\n *   - The only other possible extreme points of the sector to consider\n *     are the endpoints of the radii.\n *\n * This script was built within the help of this answer on stackoverflow:\n *   https://stackoverflow.com/questions/1336663/2d-bounding-box-of-a-sector\n */\nexport const computeArcBoundingBox = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    // in degrees\n    startAngle: number,\n    // in degrees\n    endAngle: number,\n    includeCenter = true\n) => {\n    let points: [number, number][] = []\n\n    const p0 = positionFromAngle(degreesToRadians(startAngle), radius)\n    points.push([p0.x, p0.y])\n\n    const p1 = positionFromAngle(degreesToRadians(endAngle), radius)\n    points.push([p1.x, p1.y])\n\n    for (\n        let angle = Math.round(Math.min(startAngle, endAngle));\n        angle <= Math.round(Math.max(startAngle, endAngle));\n        angle++\n    ) {\n        if (angle % 90 === 0) {\n            const p = positionFromAngle(degreesToRadians(angle), radius)\n            points.push([p.x, p.y])\n        }\n    }\n\n    points = points.map(([x, y]) => [centerX + x, centerY + y])\n    if (includeCenter) {\n        points.push([centerX, centerY])\n    }\n\n    const xs = points.map(([x]) => x)\n    const ys = points.map(([, y]) => y)\n\n    const x0 = Math.min(...xs)\n    const x1 = Math.max(...xs)\n\n    const y0 = Math.min(...ys)\n    const y1 = Math.max(...ys)\n\n    return {\n        points,\n        x: x0,\n        y: y0,\n        width: x1 - x0,\n        height: y1 - y0,\n    }\n}\n","import { getDistance, getAngle } from '@nivo/core'\nimport { Arc } from './types'\n\n/**\n * Check if cursor is in given ring.\n */\nexport const isCursorInRing = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    cursorX: number,\n    cursorY: number\n) => {\n    const distance = getDistance(cursorX, cursorY, centerX, centerY)\n\n    return distance < radius && distance > innerRadius\n}\n\n/**\n * Search for an arc being under cursor.\n */\nexport const findArcUnderCursor = <A extends Arc = Arc>(\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    arcs: A[],\n    cursorX: number,\n    cursorY: number\n): A | undefined => {\n    if (!isCursorInRing(centerX, centerY, radius, innerRadius, cursorX, cursorY)) {\n        return undefined\n    }\n\n    const cursorAngle = getAngle(cursorX, cursorY, centerX, centerY)\n\n    return arcs.find(\n        ({ startAngle, endAngle }) => cursorAngle >= startAngle && cursorAngle < endAngle\n    )\n}\n","import { useMemo } from 'react'\nimport { arc as d3Arc } from 'd3-shape'\nimport { ArcGenerator, Arc } from './types'\n\n/**\n * Memoize a d3 arc generator.\n *\n * Please note that both inner/outer radius aren't static\n * and should come from the arc itself, while it requires\n * more props on the arcs, it provides more flexibility\n * because it's not limited to pie then but can also work\n * with charts such as sunbursts.\n */\nexport const useArcGenerator = ({\n    cornerRadius = 0,\n    padAngle = 0,\n}: {\n    cornerRadius?: number\n    padAngle?: number\n} = {}): ArcGenerator =>\n    useMemo(\n        () =>\n            d3Arc<Arc>()\n                .innerRadius(arc => arc.innerRadius)\n                .outerRadius(arc => arc.outerRadius)\n                .cornerRadius(cornerRadius)\n                .padAngle(padAngle),\n        [cornerRadius, padAngle]\n    )\n"],"names":["pi","Math","PI","tau","epsilon","tauEpsilon","Path","this","_x0","_y0","_x1","_y1","_","path","prototype","constructor","moveTo","x","y","closePath","lineTo","quadraticCurveTo","x1","y1","bezierCurveTo","x2","y2","arcTo","r","x0","y0","x21","y21","x01","y01","l01_2","Error","abs","x20","y20","l21_2","l20_2","l21","sqrt","l01","l","tan","acos","t01","t21","arc","a0","a1","ccw","dx","cos","dy","sin","cw","da","rect","w","h","toString","arcInnerRadius","d","innerRadius","arcOuterRadius","outerRadius","arcStartAngle","startAngle","arcEndAngle","endAngle","arcPadAngle","padAngle","intersect","x3","y3","x10","y10","x32","y32","t","cornerTangents","r1","rc","lo","ox","oy","x11","y11","x00","y00","d2","D","cx0","cy0","cx1","cy1","dx0","dy0","dx1","dy1","cx","cy","cornerRadius","padRadius","context","buffer","r0","apply","arguments","t0","t1","a01","a11","a00","a10","da0","da1","ap","rp","rc0","rc1","p0","p1","oc","ax","ay","bx","by","kc","lc","centroid","a","length","defined","curve","output","line","data","i","n","defined0","lineStart","lineEnd","point","p","staticStyle","pointerEvents","ArcLabel","label","style","theme","useTheme","_jsx","animated","g","transform","opacity","progress","text","textAnchor","dominantBaseline","labels","fill","textColor","getNormalizedAngle","angle","normalizedAngle","filterDataBySkipAngle","skipAngle","filter","radiansToDegrees","datum","svgEllipticalArcCommand","radius","largeArcFlag","sweepFlag","join","arcTransitionModes","arcTransitionModeById","enter","update","leave","middleAngle","centerRadius","pushIn","pushOut","useArcTransitionMode","mode","extraTransition","useMemo","transitionMode","computeArcCenter","offset","midAngle","positionFromAngle","interpolateArcCenter","startAngleValue","endAngleValue","innerRadiusValue","outerRadiusValue","to","ArcLabelsLayer","center","labelAccessor","radiusOffset","component","getLabel","usePropertyAccessor","getTextColor","useInheritedColor","filteredData","extra","useMotionConfig","animate","springConfig","config","phases","transition","useTransition","keys","id","initial","from","immediate","interpolate","useArcCentersTransition","Label","transitionProps","createElement","key","drawCanvasArcLabels","ctx","textAlign","textBaseline","font","fontSize","fontFamily","forEach","fillStyle","fillText","useArcLabels","computeExtraProps","useCallback","map","position","useArcCenters","ArcLinkLabel","_jsxs","stroke","linkColor","strokeWidth","thickness","textPosition","computeArcLink","diagonalLength","straightLength","side","point2","centerAngle","point0","point1","points","lineGenerator","interpolateLink","offsetValue","diagonalLengthValue","straightLengthValue","diagonalLengthAnimated","straightLengthAnimated","interpolateTextAnchor","computeArcLinkTextAnchor","interpolateTextPosition","textOffsetValue","textOffset","ArcLinkLabelsLayer","getLinkColor","transitionPhases","useArcLinkLabelsTransition","drawCanvasArcLinkLabels","textPropsByEngine","beginPath","strokeStyle","lineWidth","index","useArcLinkLabels","link","links","useArcLinks","ArcLine","animatedProps","rest","start","end","originalStartAngle","originalEndAngle","min","max","degreesToRadians","mid","ArcShape","onClick","onMouseEnter","onMouseMove","onMouseLeave","handleClick","event","handleMouseEnter","handleMouseMove","handleMouseLeave","color","borderColor","borderWidth","interpolateArc","arcGenerator","ArcsLayer","getBorderColor","useArcsTransition","Arc","computeArcBoundingBox","centerX","centerY","includeCenter","push","round","xs","ys","width","height","findArcUnderCursor","arcs","cursorX","cursorY","distance","getDistance","isCursorInRing","cursorAngle","getAngle","find","useArcGenerator","d3Arc"],"sourceRoot":""}