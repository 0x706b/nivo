{"version":3,"file":"74a3323269f816433de8976cfbd9d0ceb5d37e1e-92c7545774460d95e4fd.js","mappings":"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","sources":["webpack://nivo-website/./src/data/components/heatmap/props.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/props.js","webpack://nivo-website/../src/hooks.js","webpack://nivo-website/../src/HeatMapCells.js","webpack://nivo-website/../src/HeatMapCellRect.js","webpack://nivo-website/../src/HeatMapCellCircle.js","webpack://nivo-website/../src/HeatMapCellTooltip.js","webpack://nivo-website/../src/HeatMap.js","webpack://nivo-website/../src/canvas.js","webpack://nivo-website/../src/HeatMapCanvas.js","webpack://nivo-website/../src/ResponsiveHeatMap.js","webpack://nivo-website/../src/ResponsiveHeatMapCanvas.js","webpack://nivo-website/./src/data/components/heatmap/generator.js","webpack://nivo-website/./src/data/components/heatmap/mapper.js"],"sourcesContent":["import { HeatMapDefaultProps as defaults } from '@nivo/heatmap'\nimport {\n    themeProperty,\n    axesProperties,\n    motionProperties,\n    groupProperties,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        type: 'object[]',\n        required: true,\n    },\n    {\n        key: 'indexBy',\n        group: 'Base',\n        help: 'Key to use to index the data.',\n        description: `\n            Key to use to index the data,\n            this key must exist in each data item.\n            You can also provide a function which will\n            receive the data item and must return\n            the desired index\n        `,\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaults.indexBy,\n    },\n    {\n        key: 'keys',\n        group: 'Base',\n        help: 'Keys to use to determine each serie.',\n        type: 'string[]',\n        required: false,\n        defaultValue: defaults.keys,\n    },\n    {\n        key: 'minValue',\n        help: 'Minimum value.',\n        description: `\n            Minimum value.\n            If 'auto', will pick the lowest value\n            in the provided data set. Should be overriden\n            if your data set does not contain desired\n            lower bound value.\n        `,\n        required: false,\n        defaultValue: defaults.minValue,\n        type: `number | 'auto'`,\n        controlType: 'switchableRange',\n        group: 'Base',\n        controlOptions: {\n            disabledValue: 'auto',\n            defaultValue: 0,\n            min: -100,\n            max: 100,\n        },\n    },\n    {\n        key: 'maxValue',\n        help: 'Maximum value.',\n        description: `\n            Maximum value. If 'auto', will pick the highest value\n            in the provided data set. Should be overriden\n            if your data set does not contain desired\n            higher bound value.\n        `,\n        required: false,\n        defaultValue: defaults.maxValue,\n        type: `number | 'auto'`,\n        controlType: 'switchableRange',\n        group: 'Base',\n        controlOptions: {\n            disabledValue: 'auto',\n            defaultValue: 100,\n            min: -100,\n            max: 100,\n        },\n    },\n    {\n        key: 'forceSquare',\n        help: 'Force square cells (width = height).',\n        required: false,\n        defaultValue: defaults.forceSquare,\n        type: 'boolean',\n        controlType: 'switch',\n        group: 'Base',\n    },\n    {\n        key: 'sizeVariation',\n        help: 'Cell size variation.',\n        description: `Size variation (0~1), if value is 0 size won't be affected. If you use for example the value 0.3, cell width/height will vary between 0.7~1 according to its corresponding value.`,\n        required: false,\n        defaultValue: defaults.sizeVariation,\n        type: 'number',\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 1,\n            step: 0.02,\n        },\n    },\n    {\n        key: 'padding',\n        help: 'Padding.',\n        required: false,\n        defaultValue: defaults.padding,\n        type: 'number',\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 36,\n            unit: 'px',\n        },\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            not required if using\n            \\`<ResponsiveHeatMap/>\\`.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1200,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            not required if using\n            \\`<ResponsiveHeatMap/>\\`.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1200,\n            step: 5,\n        },\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        required: false,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    themeProperty(['svg', 'canvas', 'api']),\n    {\n        key: 'cellShape',\n        help: `Cell shape/component.`,\n        description: `\n            Cell shape, can be one of: \\`'rect'\\`, \\`'circle'\\`,\n            if a function is provided, it must return\n            a valid SVG element and will receive\n            the following props:\n            \\`\\`\\`\n            {\n                value:       number,\n                x:           number,\n                y:           number,\n                width:       number,\n                height:      number,\n                color:       string,\n                opacity:     number,\n                borderWidth: number,\n                borderColor: string,\n                textColor:   string,\n            }\n            \\`\\`\\`\n        `,\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaults.cellShape,\n        controlType: 'choices',\n        group: 'Style',\n        controlOptions: {\n            choices: ['rect', 'circle', 'Custom(props) => (…)'].map(key => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'colors',\n        help: 'Defines color range.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: 'nivo',\n        controlType: 'quantizeColors',\n        group: 'Style',\n    },\n    {\n        key: 'cellOpacity',\n        help: 'Cell opacity (0~1).',\n        required: false,\n        defaultValue: defaults.cellOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Style',\n    },\n    {\n        key: 'cellBorderWidth',\n        help: 'Cell border width.',\n        required: false,\n        defaultValue: defaults.cellBorderWidth,\n        type: 'number',\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'cellBorderColor',\n        help: 'Method to compute cell border color.',\n        description: `\n            how to compute cell border color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.cellBorderColor,\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    {\n        key: 'enableLabels',\n        help: 'Enable/disable labels.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableLabels,\n        controlType: 'switch',\n        group: 'Labels',\n    },\n    {\n        key: 'labelTextColor',\n        help: 'Method to compute label text color.',\n        description: `\n            how to compute label text color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.labelTextColor,\n        controlType: 'inheritedColor',\n        group: 'Labels',\n    },\n    {\n        key: 'enableGridX',\n        help: 'Enable/disable x grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableGridX,\n        controlType: 'switch',\n        group: 'Grid & Axes',\n    },\n    {\n        key: 'enableGridY',\n        help: 'Enable/disable y grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableGridY,\n        controlType: 'switch',\n        group: 'Grid & Axes',\n    },\n    ...axesProperties(),\n    {\n        key: 'isInteractive',\n        flavors: ['svg', 'canvas'],\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.isInteractive,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        type: '(cell, event) => void',\n        required: false,\n        help: 'onClick handler.',\n        description: `\n            onClick handler, will receive node data\n            as first argument & event as second one.\n            The node data has the following shape:\n            \\`\\`\\`\n            {\n                key:        string,\n                value:      number,\n                x:          number,\n                xKey:       {string|number},\n                y:          number,\n                yKey:       {string|number},\n                width:      number,\n                height:     number,\n                opacity:    number\n            }\n            \\`\\`\\`\n        `,\n    },\n    {\n        key: 'hoverTarget',\n        flavors: ['svg', 'canvas'],\n        help: 'Defines hover behavior.',\n        description: `\n            Defines hover behavior:\n\n            - **cell**: highlight the current cell\n            - **row**: highlight the current cell's row\n            - **column**: highlight the current cell's column\n            - **rowColumn**: highlight the current cell's row & column\n        `,\n        required: false,\n        defaultValue: defaults.hoverTarget,\n        type: 'string',\n        controlType: 'choices',\n        group: 'Interactivity',\n        controlOptions: {\n            choices: ['cell', 'row', 'column', 'rowColumn'].map(key => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'cellHoverOpacity',\n        flavors: ['svg', 'canvas'],\n        help: 'Cell opacity on hover.',\n        required: false,\n        defaultValue: defaults.cellHoverOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Interactivity',\n    },\n    {\n        key: 'cellHoverOthersOpacity',\n        flavors: ['svg', 'canvas'],\n        help: 'Cell opacity when not hovered.',\n        required: false,\n        defaultValue: defaults.cellHoverOthersOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Interactivity',\n    },\n    ...motionProperties(['svg'], defaults, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProp, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProp<X> | null\n        right?: CanvasAxisProp<Y> | null\n        bottom?: CanvasAxisProp<X> | null\n        left?: CanvasAxisProp<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProp<X> | undefined\n            : CanvasAxisProp<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { quantizeColorScalePropType, noop } from '@nivo/core'\nimport { inheritedColorPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\n\nexport const HeatMapPropTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    indexBy: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    keys: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    minValue: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n    maxValue: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n\n    forceSquare: PropTypes.bool.isRequired,\n    sizeVariation: PropTypes.number.isRequired,\n    padding: PropTypes.number.isRequired,\n\n    cellShape: PropTypes.oneOfType([PropTypes.oneOf(['rect', 'circle']), PropTypes.func])\n        .isRequired,\n    cellOpacity: PropTypes.number.isRequired,\n    cellBorderWidth: PropTypes.number.isRequired,\n    cellBorderColor: inheritedColorPropType.isRequired,\n\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n\n    enableLabels: PropTypes.bool.isRequired,\n    label: PropTypes.func.isRequired,\n    labelTextColor: inheritedColorPropType.isRequired,\n\n    colors: quantizeColorScalePropType.isRequired,\n    nanColor: PropTypes.string,\n\n    isInteractive: PropTypes.bool,\n    onClick: PropTypes.func.isRequired,\n    hoverTarget: PropTypes.oneOf(['cell', 'row', 'column', 'rowColumn']).isRequired,\n    cellHoverOpacity: PropTypes.number.isRequired,\n    cellHoverOthersOpacity: PropTypes.number.isRequired,\n    tooltipFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    tooltip: PropTypes.func,\n\n    pixelRatio: PropTypes.number.isRequired,\n}\n\nexport const HeatMapSvgPropTypes = {\n    ...HeatMapPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const HeatMapDefaultProps = {\n    indexBy: 'id',\n\n    minValue: 'auto',\n    maxValue: 'auto',\n\n    forceSquare: false,\n    sizeVariation: 0,\n    padding: 0,\n\n    // cells\n    cellShape: 'rect',\n    cellOpacity: 0.85,\n    cellBorderWidth: 0,\n    cellBorderColor: { from: 'color' },\n\n    // axes & grid\n    axisTop: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: false,\n\n    // labels\n    enableLabels: true,\n    label: (datum, key) => datum[key],\n    labelTextColor: { from: 'color', modifiers: [['darker', 1.4]] },\n\n    // theming\n    colors: 'nivo',\n    nanColor: '#000000',\n\n    // interactivity\n    isInteractive: true,\n    onClick: noop,\n    hoverTarget: 'rowColumn',\n    cellHoverOpacity: 1,\n    cellHoverOthersOpacity: 0.35,\n\n    // canvas specific\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n\nexport const HeatMapSvgDefaultProps = {\n    ...HeatMapDefaultProps,\n    role: 'img',\n}\n","import { useState, useMemo } from 'react'\nimport { scaleOrdinal, scaleLinear } from 'd3-scale'\nimport {\n    useTheme,\n    usePropertyAccessor,\n    guessQuantizeColorScale,\n    getLabelGenerator,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\n\nconst computeX = (column, cellWidth, padding) => {\n    return column * cellWidth + cellWidth * 0.5 + padding * column + padding\n}\nconst computeY = (row, cellHeight, padding) => {\n    return row * cellHeight + cellHeight * 0.5 + padding * row + padding\n}\n\nconst isHoverTargetByType = {\n    cell: (cell, current) => cell.xKey === current.xKey && cell.yKey === current.yKey,\n    row: (cell, current) => cell.yKey === current.yKey,\n    column: (cell, current) => cell.xKey === current.xKey,\n    rowColumn: (cell, current) => cell.xKey === current.xKey || cell.yKey === current.yKey,\n}\n\nconst computeCells = ({\n    data,\n    keys,\n    getIndex,\n    xScale,\n    yScale,\n    sizeScale,\n    cellOpacity,\n    cellWidth,\n    cellHeight,\n    colorScale,\n    nanColor,\n    getLabel,\n    getLabelTextColor,\n}) => {\n    const cells = []\n    data.forEach(datum => {\n        keys.forEach(key => {\n            const value = datum[key]\n            const label = getLabel(datum, key)\n            const index = getIndex(datum)\n            const sizeMultiplier = sizeScale ? sizeScale(value) : 1\n            const width = sizeMultiplier * cellWidth\n            const height = sizeMultiplier * cellHeight\n\n            const cell = {\n                id: `${key}.${index}`,\n                xKey: key,\n                yKey: index,\n                x: xScale(key),\n                y: yScale(index),\n                width,\n                height,\n                value,\n                label,\n                color: isNaN(value) ? nanColor : colorScale(value),\n                opacity: cellOpacity,\n            }\n            cell.labelTextColor = getLabelTextColor(cell)\n\n            cells.push(cell)\n        })\n    })\n\n    return cells\n}\n\nexport const useHeatMap = ({\n    data,\n    keys,\n    indexBy,\n    minValue: _minValue = 'auto',\n    maxValue: _maxValue = 'auto',\n    width,\n    height,\n    padding,\n    forceSquare,\n    sizeVariation,\n    colors,\n    nanColor,\n    cellOpacity,\n    cellBorderColor,\n    label,\n    labelTextColor,\n    hoverTarget,\n    cellHoverOpacity,\n    cellHoverOthersOpacity,\n}) => {\n    const [currentCellId, setCurrentCellId] = useState(null)\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const indices = useMemo(() => data.map(getIndex), [data, getIndex])\n    const getLabel = useMemo(() => getLabelGenerator(label), [label])\n\n    const layoutConfig = useMemo(() => {\n        const columns = keys.length\n        const rows = data.length\n\n        let cellWidth = Math.max((width - padding * (columns + 1)) / columns, 0)\n        let cellHeight = Math.max((height - padding * (rows + 1)) / rows, 0)\n\n        let offsetX = 0\n        let offsetY = 0\n        if (forceSquare === true) {\n            const cellSize = Math.min(cellWidth, cellHeight)\n            cellWidth = cellSize\n            cellHeight = cellSize\n\n            offsetX = (width - ((cellWidth + padding) * columns + padding)) / 2\n            offsetY = (height - ((cellHeight + padding) * rows + padding)) / 2\n        }\n\n        return {\n            cellWidth,\n            cellHeight,\n            offsetX,\n            offsetY,\n        }\n    }, [data, keys, width, height, padding, forceSquare])\n\n    const scales = useMemo(() => {\n        return {\n            x: scaleOrdinal(\n                keys.map((key, i) => computeX(i, layoutConfig.cellWidth, padding))\n            ).domain(keys),\n            y: scaleOrdinal(\n                indices.map((d, i) => computeY(i, layoutConfig.cellHeight, padding))\n            ).domain(indices),\n        }\n    }, [indices, keys, layoutConfig, padding])\n\n    const values = useMemo(() => {\n        let minValue = _minValue\n        let maxValue = _maxValue\n        if (minValue === 'auto' || maxValue === 'auto') {\n            const allValues = data.reduce((acc, row) => acc.concat(keys.map(key => row[key])), [])\n\n            if (minValue === 'auto') minValue = Math.min(...allValues)\n            if (maxValue === 'auto') maxValue = Math.max(...allValues)\n        }\n\n        return {\n            min: Math.min(minValue, maxValue),\n            max: Math.max(maxValue, minValue),\n        }\n    }, [data, keys, _minValue, _maxValue])\n\n    const sizeScale = useMemo(() => {\n        if (sizeVariation > 0) {\n            return scaleLinear()\n                .range([1 - sizeVariation, 1])\n                .domain([values.min, values.max])\n        }\n    }, [sizeVariation, values])\n\n    const colorScale = useMemo(\n        () => guessQuantizeColorScale(colors).domain([values.min, values.max]),\n        [colors, values]\n    )\n    const theme = useTheme()\n    const getCellBorderColor = useInheritedColor(cellBorderColor, theme)\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n\n    const cells = useMemo(\n        () =>\n            computeCells({\n                data,\n                keys,\n                getIndex,\n                xScale: scales.x,\n                yScale: scales.y,\n                sizeScale,\n                cellOpacity,\n                cellWidth: layoutConfig.cellWidth,\n                cellHeight: layoutConfig.cellHeight,\n                colorScale,\n                nanColor,\n                getLabel,\n                getLabelTextColor,\n            }),\n        [\n            data,\n            keys,\n            getIndex,\n            scales,\n            sizeScale,\n            cellOpacity,\n            layoutConfig,\n            colorScale,\n            nanColor,\n            getLabel,\n            getLabelTextColor,\n        ]\n    )\n\n    const cellsWithCurrent = useMemo(() => {\n        if (currentCellId === null) return cells\n\n        const isHoverTarget = isHoverTargetByType[hoverTarget]\n        const currentCell = cells.find(cell => cell.id === currentCellId)\n\n        return cells.map(cell => {\n            const opacity = isHoverTarget(cell, currentCell)\n                ? cellHoverOpacity\n                : cellHoverOthersOpacity\n\n            if (opacity === cell.opacity) return cell\n\n            return {\n                ...cell,\n                opacity,\n            }\n        })\n    }, [cells, currentCellId, hoverTarget, cellHoverOpacity, cellHoverOthersOpacity])\n\n    return {\n        cells: cellsWithCurrent,\n        getIndex,\n        xScale: scales.x,\n        yScale: scales.y,\n        ...layoutConfig,\n        sizeScale,\n        currentCellId,\n        setCurrentCellId,\n        colorScale,\n        getCellBorderColor,\n        getLabelTextColor,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement } from 'react'\n\nconst HeatMapCells = ({\n    cells,\n    cellComponent,\n    cellBorderWidth,\n    getCellBorderColor,\n    enableLabels,\n    getLabelTextColor,\n    handleCellHover,\n    handleCellLeave,\n    onClick,\n}) => {\n    return cells.map(cell =>\n        createElement(cellComponent, {\n            key: cell.id,\n            data: cell,\n            label: cell.label,\n            x: cell.x,\n            y: cell.y,\n            width: cell.width,\n            height: cell.height,\n            color: cell.color,\n            opacity: cell.opacity,\n            borderWidth: cellBorderWidth,\n            borderColor: getCellBorderColor(cell),\n            enableLabel: enableLabels,\n            textColor: getLabelTextColor(cell),\n            onHover: handleCellHover ? event => handleCellHover(cell, event) : undefined,\n            onLeave: handleCellLeave,\n            onClick,\n        })\n    )\n}\n\nHeatMapCells.propTypes = {}\n\nexport default HeatMapCells\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nconst HeatMapCellRect = ({\n    data,\n    label,\n    x,\n    y,\n    width,\n    height,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    enableLabel,\n    textColor,\n    onHover,\n    onLeave,\n    onClick,\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x}, ${y})`,\n        width,\n        height,\n        xOffset: width * -0.5,\n        yOffset: height * -0.5,\n        color,\n        opacity,\n        textColor,\n        borderWidth,\n        borderColor,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g\n            transform={animatedProps.transform}\n            style={{ cursor: 'pointer' }}\n            onMouseEnter={onHover}\n            onMouseMove={onHover}\n            onMouseLeave={onLeave}\n            onClick={onClick ? event => onClick(data, event) : undefined}\n        >\n            <animated.rect\n                x={animatedProps.xOffset}\n                y={animatedProps.yOffset}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                fill={animatedProps.color}\n                fillOpacity={animatedProps.opacity}\n                strokeWidth={animatedProps.borderWidth}\n                stroke={animatedProps.borderColor}\n                strokeOpacity={animatedProps.opacity}\n            />\n            {enableLabel && (\n                <animated.text\n                    dominantBaseline=\"central\"\n                    textAnchor=\"middle\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: animatedProps.textColor,\n                    }}\n                    fillOpacity={animatedProps.opacity}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nHeatMapCellRect.propTypes = {\n    data: PropTypes.object.isRequired,\n    label: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    opacity: PropTypes.number.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    textColor: PropTypes.string.isRequired,\n    onHover: PropTypes.func,\n    onLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default memo(HeatMapCellRect)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\n\nconst HeatMapCellCircle = ({\n    data,\n    label,\n    x,\n    y,\n    width,\n    height,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    enableLabel,\n    textColor,\n    onHover,\n    onLeave,\n    onClick,\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x}, ${y})`,\n        radius: Math.min(width, height) / 2,\n        color,\n        opacity,\n        textColor,\n        borderWidth,\n        borderColor,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g\n            transform={animatedProps.transform}\n            style={{ cursor: 'pointer' }}\n            onMouseEnter={onHover}\n            onMouseMove={onHover}\n            onMouseLeave={onLeave}\n            onClick={onClick ? event => onClick(data, event) : undefined}\n        >\n            <animated.circle\n                r={animatedProps.radius}\n                fill={animatedProps.color}\n                fillOpacity={animatedProps.opacity}\n                strokeWidth={animatedProps.borderWidth}\n                stroke={animatedProps.borderColor}\n                strokeOpacity={animatedProps.opacity}\n            />\n            {enableLabel && (\n                <animated.text\n                    dominantBaseline=\"central\"\n                    textAnchor=\"middle\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: animatedProps.textColor,\n                    }}\n                    fillOpacity={animatedProps.opacity}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nHeatMapCellCircle.propTypes = {\n    data: PropTypes.object.isRequired,\n    label: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    opacity: PropTypes.number.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    textColor: PropTypes.string.isRequired,\n    onHover: PropTypes.func,\n    onLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default memo(HeatMapCellCircle)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst HeatMapCellTooltip = ({ cell, format, tooltip }) => (\n    <BasicTooltip\n        id={`${cell.yKey} - ${cell.xKey}`}\n        value={cell.value}\n        enableChip={true}\n        color={cell.color}\n        format={format}\n        renderContent={typeof tooltip === 'function' ? tooltip.bind(null, { ...cell }) : null}\n    />\n)\n\nHeatMapCellTooltip.propTypes = {\n    cell: PropTypes.shape({\n        xKey: PropTypes.string.isRequired,\n        yKey: PropTypes.string.isRequired,\n        value: PropTypes.number.isRequired,\n        color: PropTypes.string.isRequired,\n    }).isRequired,\n    format: PropTypes.func,\n    tooltip: PropTypes.func,\n}\n\nexport default memo(HeatMapCellTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useCallback } from 'react'\nimport { SvgWrapper, withContainer, useDimensions } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { HeatMapSvgPropTypes, HeatMapSvgDefaultProps } from './props'\nimport { useHeatMap } from './hooks'\nimport HeatMapCells from './HeatMapCells'\nimport HeatMapCellRect from './HeatMapCellRect'\nimport HeatMapCellCircle from './HeatMapCellCircle'\nimport HeatMapCellTooltip from './HeatMapCellTooltip'\n\nconst HeatMap = ({\n    data,\n    keys,\n    indexBy,\n    minValue,\n    maxValue,\n    width,\n    height,\n    margin: partialMargin,\n    forceSquare,\n    padding,\n    sizeVariation,\n    cellShape,\n    cellOpacity,\n    cellBorderWidth,\n    cellBorderColor,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableGridX,\n    enableGridY,\n    enableLabels,\n    label,\n    labelTextColor,\n    colors,\n    nanColor,\n    isInteractive,\n    onClick,\n    hoverTarget,\n    cellHoverOpacity,\n    cellHoverOthersOpacity,\n    tooltipFormat,\n    tooltip,\n    role,\n}) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        cells,\n        xScale,\n        yScale,\n        offsetX,\n        offsetY,\n        setCurrentCellId,\n        getCellBorderColor,\n        getLabelTextColor,\n    } = useHeatMap({\n        data,\n        keys,\n        indexBy,\n        minValue,\n        maxValue,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        forceSquare,\n        sizeVariation,\n        colors,\n        nanColor,\n        cellOpacity,\n        cellBorderColor,\n        label,\n        labelTextColor,\n        hoverTarget,\n        cellHoverOpacity,\n        cellHoverOthersOpacity,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleCellHover = useCallback(\n        (cell, event) => {\n            setCurrentCellId(cell.id)\n            showTooltipFromEvent(\n                <HeatMapCellTooltip cell={cell} format={tooltipFormat} tooltip={tooltip} />,\n                event\n            )\n        },\n        [setCurrentCellId, showTooltipFromEvent, tooltipFormat, tooltip]\n    )\n\n    const handleCellLeave = useCallback(() => {\n        setCurrentCellId(null)\n        hideTooltip()\n    }, [setCurrentCellId, hideTooltip])\n\n    let cellComponent\n    if (cellShape === 'rect') {\n        cellComponent = HeatMapCellRect\n    } else if (cellShape === 'circle') {\n        cellComponent = HeatMapCellCircle\n    } else {\n        cellComponent = cellShape\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={Object.assign({}, margin, {\n                top: margin.top + offsetY,\n                left: margin.left + offsetX,\n            })}\n            role={role}\n        >\n            <Grid\n                width={innerWidth - offsetX * 2}\n                height={innerHeight - offsetY * 2}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n            <Axes\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth - offsetX * 2}\n                height={innerHeight - offsetY * 2}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n            <HeatMapCells\n                cells={cells}\n                cellComponent={cellComponent}\n                cellBorderWidth={cellBorderWidth}\n                getCellBorderColor={getCellBorderColor}\n                enableLabels={enableLabels}\n                getLabelTextColor={getLabelTextColor}\n                handleCellHover={isInteractive ? handleCellHover : undefined}\n                handleCellLeave={isInteractive ? handleCellLeave : undefined}\n                onClick={isInteractive ? onClick : undefined}\n            />\n        </SvgWrapper>\n    )\n}\n\nHeatMap.propTypes = HeatMapSvgPropTypes\n\nconst WrappedHeatMap = withContainer(HeatMap)\nWrappedHeatMap.defaultProps = HeatMapSvgDefaultProps\n\nexport default WrappedHeatMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * Render heatmap rect cell.\n *\n * @param {Object}  ctx\n * @param {boolean} enableLabels\n * @param {number}  x\n * @param {number}  y\n * @param {number}  width\n * @param {number}  height\n * @param {string}  color\n * @param {number}  opacity\n * @param {string}  labelTextColor\n * @param {number | string}  label\n */\nexport const renderRect = (\n    ctx,\n    { enableLabels, theme },\n    { x, y, width, height, color, opacity, labelTextColor, label }\n) => {\n    ctx.save()\n    ctx.globalAlpha = opacity\n\n    ctx.fillStyle = color\n    ctx.fillRect(x - width / 2, y - height / 2, width, height)\n\n    if (enableLabels === true) {\n        ctx.fillStyle = labelTextColor\n        ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n        ctx.fillText(label, x, y)\n    }\n\n    ctx.restore()\n}\n\n/**\n * Render heatmap circle cell.\n *\n * @param {Object}  ctx\n * @param {boolean} enableLabels\n * @param {number}  x\n * @param {number}  y\n * @param {number}  width\n * @param {number}  height\n * @param {string}  color\n * @param {number}  opacity\n * @param {string}  labelTextColor\n * @param {number | string}  label\n */\nexport const renderCircle = (\n    ctx,\n    { enableLabels, theme },\n    { x, y, width, height, color, opacity, labelTextColor, label }\n) => {\n    ctx.save()\n    ctx.globalAlpha = opacity\n\n    const radius = Math.min(width, height) / 2\n\n    ctx.fillStyle = color\n    ctx.beginPath()\n    ctx.arc(x, y, radius, 0, 2 * Math.PI)\n    ctx.fill()\n\n    if (enableLabels === true) {\n        ctx.fillStyle = labelTextColor\n        ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n        ctx.fillText(label, x, y)\n    }\n\n    ctx.restore()\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useEffect, useRef, useCallback } from 'react'\nimport {\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n    withContainer,\n} from '@nivo/core'\nimport { renderAxesToCanvas } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useHeatMap } from './hooks'\nimport { HeatMapDefaultProps, HeatMapPropTypes } from './props'\nimport { renderRect, renderCircle } from './canvas'\nimport HeatMapCellTooltip from './HeatMapCellTooltip'\n\nconst HeatMapCanvas = ({\n    data,\n    keys,\n    indexBy,\n    minValue,\n    maxValue,\n    width,\n    height,\n    margin: partialMargin,\n    forceSquare,\n    padding,\n    sizeVariation,\n    cellShape,\n    cellOpacity,\n    cellBorderColor,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableLabels,\n    label,\n    labelTextColor,\n    colors,\n    nanColor,\n    isInteractive,\n    onClick,\n    hoverTarget,\n    cellHoverOpacity,\n    cellHoverOthersOpacity,\n    tooltipFormat,\n    tooltip,\n    pixelRatio,\n}) => {\n    const canvasEl = useRef(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { cells, xScale, yScale, offsetX, offsetY, currentCellId, setCurrentCellId } = useHeatMap(\n        {\n            data,\n            keys,\n            indexBy,\n            minValue,\n            maxValue,\n            width: innerWidth,\n            height: innerHeight,\n            padding,\n            forceSquare,\n            sizeVariation,\n            colors,\n            nanColor,\n            cellOpacity,\n            cellBorderColor,\n            label,\n            labelTextColor,\n            hoverTarget,\n            cellHoverOpacity,\n            cellHoverOthersOpacity,\n        }\n    )\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left + offsetX, margin.top + offsetY)\n\n        renderAxesToCanvas(ctx, {\n            xScale,\n            yScale,\n            width: innerWidth - offsetX * 2,\n            height: innerHeight - offsetY * 2,\n            top: axisTop,\n            right: axisRight,\n            bottom: axisBottom,\n            left: axisLeft,\n            theme,\n        })\n\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n\n        let renderCell\n        if (cellShape === 'rect') {\n            renderCell = renderRect\n        } else {\n            renderCell = renderCircle\n        }\n        cells.forEach(cell => {\n            renderCell(ctx, { enableLabels, theme }, cell)\n        })\n    }, [\n        canvasEl,\n        cells,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        offsetX,\n        offsetY,\n        cellShape,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        xScale,\n        yScale,\n        theme,\n        enableLabels,\n        pixelRatio,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n            const cell = cells.find(c =>\n                isCursorInRect(\n                    c.x + margin.left + offsetX - c.width / 2,\n                    c.y + margin.top + offsetY - c.height / 2,\n                    c.width,\n                    c.height,\n                    x,\n                    y\n                )\n            )\n            if (cell !== undefined) {\n                setCurrentCellId(cell.id)\n                showTooltipFromEvent(\n                    <HeatMapCellTooltip cell={cell} tooltip={tooltip} format={tooltipFormat} />,\n                    event\n                )\n            } else {\n                setCurrentCellId(null)\n                hideTooltip()\n            }\n        },\n        [\n            canvasEl,\n            cells,\n            margin,\n            offsetX,\n            offsetY,\n            setCurrentCellId,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n            tooltipFormat,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setCurrentCellId(null)\n        hideTooltip()\n    }, [setCurrentCellId, hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            if (currentCellId === null) return\n\n            const currentCell = cells.find(cell => cell.id === currentCellId)\n            currentCell && onClick(currentCell, event)\n        },\n        [cells, currentCellId, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nHeatMapCanvas.propTypes = HeatMapPropTypes\n\nconst WrappedHeatMapCanvas = withContainer(HeatMapCanvas)\nWrappedHeatMapCanvas.defaultProps = HeatMapDefaultProps\n\nexport default WrappedHeatMapCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport HeatMap from './HeatMap'\n\nconst ResponsiveHeatMap = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <HeatMap width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveHeatMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport HeatMapCanvas from './HeatMapCanvas'\n\nconst ResponsiveHeatMapCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <HeatMapCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveHeatMapCanvas\n","import { generateCountriesData } from '@nivo/generators'\n\nconst dishes = [\n    'hot dog',\n    'burger',\n    'sandwich',\n    'kebab',\n    'fries',\n    'donut',\n    'junk',\n    'sushi',\n    'ramen',\n    'curry',\n    'udon',\n    'bagel',\n    'yakitori',\n    'takoyaki',\n    'tacos',\n    'miso soup',\n    'tortilla',\n    'tapas',\n    'chipirones',\n    'gazpacho',\n    'soba',\n    'bavette',\n    'steak',\n    'pizza',\n    'spaghetti',\n    'ravioli',\n    'salad',\n    'pad thai',\n    'bun',\n    'waffle',\n    'crepe',\n    'churros',\n    'paella',\n    'empanadas',\n    'bruschetta',\n    'onion soup',\n    'cassoulet',\n    'bouillabaisse',\n    'unagi',\n    'tempura',\n    'tonkatsu',\n    'shabu-shabu',\n    'twinkies',\n    'jerky',\n    'fajitas',\n    'jambalaya',\n    'meatloaf',\n    `mac n' cheese`,\n    'baked beans',\n    'popcorn',\n    'buffalo wings',\n    'BBQ ribs',\n    'apple pie',\n    'nachos',\n    'risotto',\n    'tiramisu',\n]\n\nexport const generateLightDataSet = () => ({\n    data: generateCountriesData(dishes.slice(0, 11), { size: 9, min: 0, max: 100 }),\n    keys: dishes.slice(0, 11),\n})\n\nexport const generateHeavyDataSet = () => ({\n    data: generateCountriesData(dishes, { size: 22, min: 0, max: 100 }),\n    keys: dishes,\n})\n","import React from 'react'\nimport { settingsMapper, mapAxis } from '../../../lib/settings'\n\nconst CustomCell = ({\n    value,\n    x,\n    y,\n    width,\n    height,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    textColor,\n}) => (\n    <g transform={`translate(${x}, ${y})`}>\n        <path\n            transform={`rotate(${value < 50 ? 180 : 0})`}\n            fill={color}\n            fillOpacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            d={`\n                M0 -${Math.round(height / 2)}\n                L${Math.round(width / 2)} ${Math.round(height / 2)}\n                L-${Math.round(width / 2)} ${Math.round(height / 2)}\n                L0 -${Math.round(height / 2)}\n            `}\n        />\n        <text\n            alignmentBaseline=\"central\"\n            textAnchor=\"middle\"\n            style={{ fill: textColor }}\n            dy={value < 50 ? -6 : 6}\n        >\n            {value}\n        </text>\n    </g>\n)\n\nexport default settingsMapper(\n    {\n        cellShape: value => {\n            if (value === `Custom(props) => (…)`) return CustomCell\n            return value\n        },\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n    },\n    {\n        exclude: ['enable axisTop', 'enable axisRight', 'enable axisBottom', 'enable axisLeft'],\n    }\n)\n"],"names":["props","key","group","help","type","required","description","defaultValue","defaults","controlType","controlOptions","disabledValue","min","max","step","unit","enableControlForFlavors","flavors","themeProperty","choices","map","label","value","axesProperties","motionProperties","groups","groupProperties","computeCartesianTicks","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","position","centerScale","line","lineX","lineY","text","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","x","d","y","top","bottom","left","right","ticks","v","getFormatter","format","formatter","timeFormat","Date","d3Format","computeGridLines","width","height","_values","Array","isArray","lines","x1","x2","y1","y2","memoizedAxisTick","memo","_value","onClick","textAnchor","animatedProps","theme","useTheme","useMemo","style","opacity","cursor","event","_jsxs","animated","g","transform","_jsx","dominantBaseline","textTransform","memoizedAxis","length","renderTick","AxisTick","legend","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","config","useSpring","lineX2","lineY2","immediate","transition","useTransition","keys","t","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","rotate","domain","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","axes","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","_format","save","font","fontWeight","fontSize","fontFamily","strokeWidth","lineWidth","Number","lineCap","stroke","strokeStyle","beginPath","moveTo","lineTo","forEach","degreesToRadians","fill","fillStyle","fillText","String","restore","renderAxesToCanvas","renderGridLinesToCanvas","HeatMapPropTypes","data","isRequired","indexBy","minValue","maxValue","forceSquare","sizeVariation","padding","cellShape","cellOpacity","cellBorderWidth","cellBorderColor","inheritedColorPropType","axisTop","axisRight","axisBottom","axisLeft","enableGridX","enableGridY","enableLabels","labelTextColor","colors","quantizeColorScalePropType","nanColor","isInteractive","hoverTarget","cellHoverOpacity","cellHoverOthersOpacity","tooltipFormat","tooltip","pixelRatio","HeatMapSvgPropTypes","role","HeatMapDefaultProps","datum","modifiers","noop","window","devicePixelRatio","HeatMapSvgDefaultProps","isHoverTargetByType","cell","current","xKey","yKey","row","column","rowColumn","useHeatMap","_minValue","_maxValue","useState","currentCellId","setCurrentCellId","getIndex","usePropertyAccessor","indices","getLabel","getLabelGenerator","layoutConfig","columns","rows","cellWidth","Math","cellHeight","offsetX","offsetY","cellSize","scales","scaleOrdinal","i","allValues","reduce","acc","concat","sizeScale","scaleLinear","range","colorScale","guessQuantizeColorScale","getCellBorderColor","useInheritedColor","getLabelTextColor","cells","index","sizeMultiplier","id","color","isNaN","push","cellsWithCurrent","isHoverTarget","currentCell","find","HeatMapCells","cellComponent","handleCellHover","handleCellLeave","createElement","borderWidth","borderColor","enableLabel","textColor","onHover","onLeave","propTypes","HeatMapCellRect","xOffset","yOffset","onMouseEnter","onMouseMove","onMouseLeave","e","undefined","rect","fillOpacity","strokeOpacity","labels","HeatMapCellCircle","radius","circle","r","HeatMapCellTooltip","BasicTooltip","enableChip","renderContent","bind","HeatMap","partialMargin","margin","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","useTooltip","showTooltipFromEvent","hideTooltip","useCallback","SvgWrapper","Object","assign","WrappedHeatMap","withContainer","defaultProps","renderRect","globalAlpha","fillRect","renderCircle","arc","PI","HeatMapCanvas","canvasEl","useRef","useEffect","renderCell","getContext","background","handleMouseHover","getRelativeCursor","isCursorInRect","c","handleMouseLeave","handleClick","ref","WrappedHeatMapCanvas","ResponsiveHeatMap","ResponsiveWrapper","ResponsiveHeatMapCanvas","dishes","generateLightDataSet","generateCountriesData","slice","size","generateHeavyDataSet","CustomCell","round","alignmentBaseline","dy","settingsMapper","mapAxis","exclude"],"sourceRoot":""}