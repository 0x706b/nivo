{"version":3,"file":"fdfa66205b88a9fae762ee6cb169ee9c5fd2a6d9-46a0a5b791681de2c34b.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/ascending.js","webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/bisector.js","webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/bisect.js","webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/array.js","webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/ticks.js","webpack://nivo-website/../node_modules/d3-chord/node_modules/d3-array/src/range.js","webpack://nivo-website/../node_modules/d3-chord/src/math.js","webpack://nivo-website/../node_modules/d3-chord/src/chord.js","webpack://nivo-website/../node_modules/d3-chord/src/array.js","webpack://nivo-website/../node_modules/d3-chord/src/constant.js","webpack://nivo-website/../node_modules/d3-chord/src/ribbon.js","webpack://nivo-website/../src/ChordArcTooltip.tsx","webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../src/ChordRibbonTooltip.tsx","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/ChordRibbon.tsx","webpack://nivo-website/../src/ChordRibbons.tsx","webpack://nivo-website/../src/ChordArc.tsx","webpack://nivo-website/../src/ChordArcs.tsx","webpack://nivo-website/../src/ChordLabels.tsx","webpack://nivo-website/../src/Chord.tsx","webpack://nivo-website/../src/ChordCanvas.tsx","webpack://nivo-website/../src/ResponsiveChord.tsx","webpack://nivo-website/../src/ResponsiveChordCanvas.tsx"],"sourcesContent":["export default function (a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}","import ascending from \"./ascending\";\nexport default function (compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function left(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      }\n\n      return lo;\n    },\n    right: function right(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;\n      }\n\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function (d, x) {\n    return ascending(f(d), x);\n  };\n}","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;","var array = Array.prototype;\nexport var slice = array.slice;\nexport var map = array.map;","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\nexport default function (start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n\n    while (++i < n) {\n      ticks[i] = (start + i) * step;\n    }\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n\n    while (++i < n) {\n      ticks[i] = (start - i) / step;\n    }\n  }\n\n  if (reverse) ticks.reverse();\n  return ticks;\n}\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}","export default function (start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}","export var cos = Math.cos;\nexport var sin = Math.sin;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var tau = pi * 2;\nexport var max = Math.max;","import { range } from \"d3-array\";\nimport { max, tau } from \"./math\";\n\nfunction compareValue(compare) {\n  return function (a, b) {\n    return compare(a.source.value + a.target.value, b.source.value + b.target.value);\n  };\n}\n\nexport default function () {\n  var padAngle = 0,\n      sortGroups = null,\n      sortSubgroups = null,\n      sortChords = null;\n\n  function chord(matrix) {\n    var n = matrix.length,\n        groupSums = [],\n        groupIndex = range(n),\n        subgroupIndex = [],\n        chords = [],\n        groups = chords.groups = new Array(n),\n        subgroups = new Array(n * n),\n        k,\n        x,\n        x0,\n        dx,\n        i,\n        j; // Compute the sum.\n\n    k = 0, i = -1;\n\n    while (++i < n) {\n      x = 0, j = -1;\n\n      while (++j < n) {\n        x += matrix[i][j];\n      }\n\n      groupSums.push(x);\n      subgroupIndex.push(range(n));\n      k += x;\n    } // Sort groups…\n\n\n    if (sortGroups) groupIndex.sort(function (a, b) {\n      return sortGroups(groupSums[a], groupSums[b]);\n    }); // Sort subgroups…\n\n    if (sortSubgroups) subgroupIndex.forEach(function (d, i) {\n      d.sort(function (a, b) {\n        return sortSubgroups(matrix[i][a], matrix[i][b]);\n      });\n    }); // Convert the sum to scaling factor for [0, 2pi].\n    // TODO Allow start and end angle to be specified?\n    // TODO Allow padding to be specified as percentage?\n\n    k = max(0, tau - padAngle * n) / k;\n    dx = k ? padAngle : tau / n; // Compute the start and end angle for each group and subgroup.\n    // Note: Opera has a bug reordering object literal properties!\n\n    x = 0, i = -1;\n\n    while (++i < n) {\n      x0 = x, j = -1;\n\n      while (++j < n) {\n        var di = groupIndex[i],\n            dj = subgroupIndex[di][j],\n            v = matrix[di][dj],\n            a0 = x,\n            a1 = x += v * k;\n        subgroups[dj * n + di] = {\n          index: di,\n          subindex: dj,\n          startAngle: a0,\n          endAngle: a1,\n          value: v\n        };\n      }\n\n      groups[di] = {\n        index: di,\n        startAngle: x0,\n        endAngle: x,\n        value: groupSums[di]\n      };\n      x += dx;\n    } // Generate chords for each (non-empty) subgroup-subgroup link.\n\n\n    i = -1;\n\n    while (++i < n) {\n      j = i - 1;\n\n      while (++j < n) {\n        var source = subgroups[j * n + i],\n            target = subgroups[i * n + j];\n\n        if (source.value || target.value) {\n          chords.push(source.value < target.value ? {\n            source: target,\n            target: source\n          } : {\n            source: source,\n            target: target\n          });\n        }\n      }\n    }\n\n    return sortChords ? chords.sort(sortChords) : chords;\n  }\n\n  chord.padAngle = function (_) {\n    return arguments.length ? (padAngle = max(0, _), chord) : padAngle;\n  };\n\n  chord.sortGroups = function (_) {\n    return arguments.length ? (sortGroups = _, chord) : sortGroups;\n  };\n\n  chord.sortSubgroups = function (_) {\n    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\n  };\n\n  chord.sortChords = function (_) {\n    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\n  };\n\n  return chord;\n}","export var slice = Array.prototype.slice;","export default function (x) {\n  return function () {\n    return x;\n  };\n}","import { slice } from \"./array\";\nimport constant from \"./constant\";\nimport { cos, halfPi, sin } from \"./math\";\nimport { path } from \"d3-path\";\n\nfunction defaultSource(d) {\n  return d.source;\n}\n\nfunction defaultTarget(d) {\n  return d.target;\n}\n\nfunction defaultRadius(d) {\n  return d.radius;\n}\n\nfunction defaultStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction defaultEndAngle(d) {\n  return d.endAngle;\n}\n\nexport default function () {\n  var source = defaultSource,\n      target = defaultTarget,\n      radius = defaultRadius,\n      startAngle = defaultStartAngle,\n      endAngle = defaultEndAngle,\n      context = null;\n\n  function ribbon() {\n    var buffer,\n        argv = slice.call(arguments),\n        s = source.apply(this, argv),\n        t = target.apply(this, argv),\n        sr = +radius.apply(this, (argv[0] = s, argv)),\n        sa0 = startAngle.apply(this, argv) - halfPi,\n        sa1 = endAngle.apply(this, argv) - halfPi,\n        sx0 = sr * cos(sa0),\n        sy0 = sr * sin(sa0),\n        tr = +radius.apply(this, (argv[0] = t, argv)),\n        ta0 = startAngle.apply(this, argv) - halfPi,\n        ta1 = endAngle.apply(this, argv) - halfPi;\n    if (!context) context = buffer = path();\n    context.moveTo(sx0, sy0);\n    context.arc(0, 0, sr, sa0, sa1);\n\n    if (sa0 !== ta0 || sa1 !== ta1) {\n      // TODO sr !== tr?\n      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));\n      context.arc(0, 0, tr, ta0, ta1);\n    }\n\n    context.quadraticCurveTo(0, 0, sx0, sy0);\n    context.closePath();\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  ribbon.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), ribbon) : radius;\n  };\n\n  ribbon.startAngle = function (_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : startAngle;\n  };\n\n  ribbon.endAngle = function (_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : endAngle;\n  };\n\n  ribbon.source = function (_) {\n    return arguments.length ? (source = _, ribbon) : source;\n  };\n\n  ribbon.target = function (_) {\n    return arguments.length ? (target = _, ribbon) : target;\n  };\n\n  ribbon.context = function (_) {\n    return arguments.length ? (context = _ == null ? null : _, ribbon) : context;\n  };\n\n  return ribbon;\n}","import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { ArcTooltipComponentProps } from './types'\n\nexport const ChordArcTooltip = memo(({ arc }: ArcTooltipComponentProps) => (\n    <BasicTooltip id={arc.label} value={arc.formattedValue} color={arc.color} enableChip={true} />\n))\n","import { LayerId, ChordSvgProps, ChordCommonProps } from './types'\nimport { ChordArcTooltip } from './ChordArcTooltip'\nimport { ChordRibbonTooltip } from './ChordRibbonTooltip'\n\nexport const commonDefaultProps: Omit<\n    ChordCommonProps,\n    | 'valueFormat'\n    | 'margin'\n    | 'theme'\n    | 'onArcMouseEnter'\n    | 'onArcMouseMove'\n    | 'onArcMouseLeave'\n    | 'onArcClick'\n    | 'onRibbonMouseEnter'\n    | 'onRibbonMouseMove'\n    | 'onRibbonMouseLeave'\n    | 'onRibbonClick'\n    | 'renderWrapper'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['ribbons', 'arcs', 'labels', 'legends'],\n\n    padAngle: 0,\n    innerRadiusRatio: 0.9,\n    innerRadiusOffset: 0,\n\n    colors: { scheme: 'nivo' },\n\n    arcOpacity: 1,\n    activeArcOpacity: 1,\n    inactiveArcOpacity: 0.15,\n    arcBorderWidth: 1,\n    arcBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n    arcTooltip: ChordArcTooltip,\n\n    ribbonOpacity: 0.5,\n    activeRibbonOpacity: 0.85,\n    inactiveRibbonOpacity: 0.15,\n    ribbonBorderWidth: 1,\n    ribbonBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n    ribbonBlendMode: 'normal',\n\n    enableLabel: true,\n    label: 'id',\n    labelOffset: 12,\n    labelRotation: 0,\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    isInteractive: true,\n\n    legends: [],\n\n    animate: true,\n    motionConfig: 'gentle',\n\n    role: 'img',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    ribbonBlendMode: 'normal' as NonNullable<ChordSvgProps['ribbonBlendMode']>,\n    ribbonTooltip: ChordRibbonTooltip,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import { memo } from 'react'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\nimport { RibbonTooltipComponentProps } from './types'\n\nexport const ChordRibbonTooltip = memo(({ ribbon }: RibbonTooltipComponentProps) => (\n    <TableTooltip\n        rows={[\n            [\n                <Chip key=\"chip\" color={ribbon.source.color} />,\n                <strong key=\"id\">{ribbon.source.label}</strong>,\n                ribbon.source.formattedValue,\n            ],\n            [\n                <Chip key=\"chip\" color={ribbon.target.color} />,\n                <strong key=\"id\">{ribbon.target.label}</strong>,\n                ribbon.target.formattedValue,\n            ],\n        ]}\n    />\n))\n","import { to, SpringValues } from '@react-spring/web'\nimport { arc as d3Arc } from 'd3-shape'\nimport { chord as d3Chord, ChordLayout, ribbon as d3Ribbon } from 'd3-chord'\nimport {\n    ArcDatum,\n    ChordCommonProps,\n    ChordDataProps,\n    RibbonAnimatedProps,\n    RibbonDatum,\n    RibbonGenerator,\n    ArcGenerator,\n    ArcAnimatedProps,\n} from './types'\nimport { OrdinalColorScale } from '@nivo/colors'\n\nexport const computeChordLayout = ({ padAngle }: { padAngle: ChordCommonProps['padAngle'] }) =>\n    d3Chord().padAngle(padAngle)\n\nexport const computeChordGenerators = ({\n    width,\n    height,\n    innerRadiusRatio,\n    innerRadiusOffset,\n}: {\n    width: number\n    height: number\n    innerRadiusRatio: ChordCommonProps['innerRadiusRatio']\n    innerRadiusOffset: ChordCommonProps['innerRadiusOffset']\n}) => {\n    const center: [number, number] = [width / 2, height / 2]\n    const radius = Math.min(width, height) / 2\n    const innerRadius = radius * innerRadiusRatio\n    const ribbonRadius = radius * (innerRadiusRatio - innerRadiusOffset)\n\n    return {\n        center,\n        radius,\n        innerRadius,\n        arcGenerator: d3Arc()\n            .outerRadius(radius)\n            .innerRadius(innerRadius) as unknown as ArcGenerator,\n        ribbonGenerator: d3Ribbon().radius(ribbonRadius) as unknown as RibbonGenerator,\n    }\n}\n\nexport const computeChordArcsAndRibbons = ({\n    chord,\n    data,\n    keys,\n    getLabel,\n    formatValue,\n    getColor,\n}: {\n    chord: ChordLayout\n    data: ChordDataProps['data']\n    keys: ChordDataProps['keys']\n    getLabel: (arc: Omit<ArcDatum, 'label' | 'color'>) => string\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<Omit<ArcDatum, 'label' | 'color'>>\n}): {\n    arcs: ArcDatum[]\n    ribbons: RibbonDatum[]\n} => {\n    const _ribbons = chord(data)\n\n    const arcs: ArcDatum[] = _ribbons.groups.map(chordGroup => {\n        const arc: Omit<ArcDatum, 'label' | 'color'> = {\n            ...chordGroup,\n            id: keys[chordGroup.index],\n            formattedValue: formatValue(chordGroup.value),\n        }\n\n        return {\n            ...arc,\n            label: getLabel(arc),\n            color: getColor(arc),\n        }\n    })\n\n    const ribbons: RibbonDatum[] = _ribbons.map(_ribbon => {\n        const source = {\n            ..._ribbon.source,\n            id: keys[_ribbon.source.index],\n            formattedValue: formatValue(_ribbon.source.value),\n        }\n\n        const target = {\n            ..._ribbon.target,\n            id: keys[_ribbon.target.index],\n            formattedValue: formatValue(_ribbon.target.value),\n        }\n\n        return {\n            ..._ribbon,\n            // ensure id remains the same even if source/target are reversed\n            id: [source.id, target.id].sort().join('.'),\n            source: {\n                ...source,\n                label: getLabel(source),\n                color: getColor(source),\n            },\n            target: {\n                ...target,\n                label: getLabel(target),\n                color: getColor(target),\n            },\n        }\n    })\n\n    return { arcs, ribbons }\n}\n\nexport const computeArcPath = ({\n    startAngle,\n    endAngle,\n    arcGenerator,\n}: SpringValues<Pick<ArcAnimatedProps, 'startAngle' | 'endAngle'>> & {\n    arcGenerator: ArcGenerator\n}) => to([startAngle, endAngle], (startAngle, endAngle) => arcGenerator({ startAngle, endAngle }))\n\nexport const computeRibbonPath = ({\n    sourceStartAngle,\n    sourceEndAngle,\n    targetStartAngle,\n    targetEndAngle,\n    ribbonGenerator,\n}: SpringValues<\n    Pick<\n        RibbonAnimatedProps,\n        'sourceStartAngle' | 'sourceEndAngle' | 'targetStartAngle' | 'targetEndAngle'\n    >\n> & {\n    ribbonGenerator: RibbonGenerator\n}) =>\n    to(\n        [sourceStartAngle, sourceEndAngle, targetStartAngle, targetEndAngle],\n        (sourceStartAngle, sourceEndAngle, targetStartAngle, targetEndAngle) =>\n            ribbonGenerator({\n                source: {\n                    startAngle: Math.min(sourceStartAngle, sourceEndAngle),\n                    endAngle: Math.max(sourceEndAngle, sourceStartAngle),\n                },\n                target: {\n                    startAngle: Math.min(targetStartAngle, targetEndAngle),\n                    endAngle: Math.max(targetEndAngle, targetStartAngle),\n                },\n            })\n    )\n","import { useMemo, useState } from 'react'\nimport {\n    useValueFormatter,\n    // @ts-ignore\n    getLabelGenerator,\n} from '@nivo/core'\nimport { OrdinalColorScale, useOrdinalColorScale } from '@nivo/colors'\nimport { computeChordLayout, computeChordGenerators, computeChordArcsAndRibbons } from './compute'\nimport { ArcDatum, ChordCommonProps, ChordDataProps, CustomLayerProps, RibbonDatum } from './types'\nimport { commonDefaultProps } from './defaults'\nimport { ChordLayout } from 'd3-chord'\n\nexport const useChordLayout = ({ padAngle }: { padAngle: ChordCommonProps['padAngle'] }) =>\n    useMemo(() => computeChordLayout({ padAngle }), [padAngle])\n\nexport const useChordGenerators = ({\n    width,\n    height,\n    innerRadiusRatio,\n    innerRadiusOffset,\n}: {\n    width: number\n    height: number\n    innerRadiusRatio: ChordCommonProps['innerRadiusRatio']\n    innerRadiusOffset: ChordCommonProps['innerRadiusOffset']\n}) =>\n    useMemo(\n        () =>\n            computeChordGenerators({\n                width,\n                height,\n                innerRadiusRatio,\n                innerRadiusOffset,\n            }),\n        [width, height, innerRadiusRatio, innerRadiusOffset]\n    )\n\nexport const useChordArcsAndRibbons = ({\n    chord,\n    getColor,\n    keys,\n    data,\n    getLabel,\n    formatValue,\n}: {\n    chord: ChordLayout\n    data: ChordDataProps['data']\n    keys: ChordDataProps['keys']\n    getLabel: (arc: Omit<ArcDatum, 'label' | 'color'>) => string\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<Omit<ArcDatum, 'label' | 'color'>>\n}) =>\n    useMemo(\n        () =>\n            computeChordArcsAndRibbons({\n                chord,\n                data,\n                keys,\n                getLabel,\n                formatValue,\n                getColor,\n            }),\n        [chord, getColor, keys, data, getLabel, formatValue]\n    )\n\nexport const useChord = ({\n    data,\n    keys,\n    label = commonDefaultProps.label,\n    valueFormat,\n    width,\n    height,\n    innerRadiusRatio = commonDefaultProps.innerRadiusRatio,\n    innerRadiusOffset = commonDefaultProps.innerRadiusOffset,\n    padAngle = commonDefaultProps.padAngle,\n    colors = commonDefaultProps.colors,\n}: {\n    data: ChordDataProps['data']\n    keys: ChordDataProps['keys']\n    label?: ChordCommonProps['label']\n    valueFormat?: ChordCommonProps['valueFormat']\n    width: number\n    height: number\n    innerRadiusRatio?: ChordCommonProps['innerRadiusRatio']\n    innerRadiusOffset?: ChordCommonProps['innerRadiusOffset']\n    padAngle?: ChordCommonProps['padAngle']\n    colors?: ChordCommonProps['colors']\n}) => {\n    const chord = useChordLayout({ padAngle })\n    const { center, radius, innerRadius, arcGenerator, ribbonGenerator } = useChordGenerators({\n        width,\n        height,\n        innerRadiusRatio,\n        innerRadiusOffset,\n    })\n    const getLabel = useMemo(() => getLabelGenerator(label), [label])\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const { arcs, ribbons } = useChordArcsAndRibbons({\n        chord,\n        getColor,\n        keys,\n        data,\n        getLabel,\n        formatValue,\n    })\n\n    return {\n        center,\n        chord,\n        radius,\n        innerRadius,\n        arcGenerator,\n        ribbonGenerator,\n        getColor,\n        arcs,\n        ribbons,\n    }\n}\n\nexport const useChordSelection = ({\n    arcOpacity = commonDefaultProps.arcOpacity,\n    activeArcOpacity = commonDefaultProps.activeArcOpacity,\n    inactiveArcOpacity = commonDefaultProps.inactiveArcOpacity,\n    ribbons,\n    ribbonOpacity = commonDefaultProps.ribbonOpacity,\n    activeRibbonOpacity = commonDefaultProps.activeRibbonOpacity,\n    inactiveRibbonOpacity = commonDefaultProps.inactiveRibbonOpacity,\n}: {\n    arcOpacity?: ChordCommonProps['arcOpacity']\n    activeArcOpacity?: ChordCommonProps['activeArcOpacity']\n    inactiveArcOpacity?: ChordCommonProps['inactiveArcOpacity']\n    ribbons: RibbonDatum[]\n    ribbonOpacity?: ChordCommonProps['ribbonOpacity']\n    activeRibbonOpacity?: ChordCommonProps['activeRibbonOpacity']\n    inactiveRibbonOpacity?: ChordCommonProps['inactiveRibbonOpacity']\n}) => {\n    const [currentArc, setCurrentArc] = useState<ArcDatum | null>(null)\n    const [currentRibbon, setCurrentRibbon] = useState<RibbonDatum | null>(null)\n\n    const selection = useMemo(() => {\n        const selectedArcIds = []\n        const selectedRibbonIds = []\n\n        if (currentArc) {\n            selectedArcIds.push(currentArc.id)\n            ribbons\n                .filter(\n                    ribbon =>\n                        ribbon.source.id === currentArc.id || ribbon.target.id === currentArc.id\n                )\n                .forEach(ribbon => {\n                    selectedRibbonIds.push(ribbon.id)\n                })\n        }\n\n        if (currentRibbon) {\n            selectedArcIds.push(currentRibbon.source.id)\n            selectedArcIds.push(currentRibbon.target.id)\n            selectedRibbonIds.push(currentRibbon.id)\n        }\n\n        return { selectedArcIds, selectedRibbonIds }\n    }, [currentArc, currentRibbon, ribbons])\n\n    const hasSelection =\n        selection.selectedArcIds.length > 1 || selection.selectedRibbonIds.length > 0\n\n    const getArcOpacity = useMemo(\n        () => (arc: ArcDatum) => {\n            if (!hasSelection) return arcOpacity\n\n            return selection.selectedArcIds.includes(arc.id) ? activeArcOpacity : inactiveArcOpacity\n        },\n        [hasSelection, selection.selectedArcIds, arcOpacity, activeArcOpacity, inactiveArcOpacity]\n    )\n    const getRibbonOpacity = useMemo(\n        () => (ribbon: RibbonDatum) => {\n            if (!hasSelection) return ribbonOpacity\n\n            return selection.selectedRibbonIds.includes(ribbon.id)\n                ? activeRibbonOpacity\n                : inactiveRibbonOpacity\n        },\n        [\n            hasSelection,\n            selection.selectedRibbonIds,\n            ribbonOpacity,\n            activeRibbonOpacity,\n            inactiveRibbonOpacity,\n        ]\n    )\n\n    return {\n        currentArc,\n        setCurrentArc,\n        currentRibbon,\n        setCurrentRibbon,\n        hasSelection,\n        ...selection,\n        getArcOpacity,\n        getRibbonOpacity,\n    }\n}\n\nexport const useCustomLayerProps = ({\n    center,\n    radius,\n    arcs,\n    arcGenerator,\n    ribbons,\n    ribbonGenerator,\n}: {\n    center: [number, number]\n    radius: number\n    arcs: ArcDatum[]\n    arcGenerator: any\n    ribbons: RibbonDatum[]\n    ribbonGenerator: any\n}): CustomLayerProps =>\n    useMemo(\n        () => ({\n            center,\n            radius,\n            arcs,\n            arcGenerator,\n            ribbons,\n            ribbonGenerator,\n        }),\n        [center, radius, arcs, arcGenerator, ribbons, ribbonGenerator]\n    )\n","import { createElement, memo, useMemo, MouseEvent } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ChordCommonProps,\n    ChordSvgProps,\n    RibbonAnimatedProps,\n    RibbonDatum,\n    RibbonGenerator,\n} from './types'\nimport { computeRibbonPath } from './compute'\n\ninterface ChordRibbonProps {\n    ribbon: RibbonDatum\n    ribbonGenerator: RibbonGenerator\n    animatedProps: SpringValues<RibbonAnimatedProps>\n    borderWidth: ChordCommonProps['ribbonBorderWidth']\n    blendMode: NonNullable<ChordSvgProps['ribbonBlendMode']>\n    setCurrent: (ribbon: RibbonDatum | null) => void\n    isInteractive: ChordCommonProps['isInteractive']\n    tooltip: NonNullable<ChordSvgProps['ribbonTooltip']>\n    onMouseEnter: ChordSvgProps['onRibbonMouseEnter']\n    onMouseMove: ChordSvgProps['onRibbonMouseMove']\n    onMouseLeave: ChordSvgProps['onRibbonMouseLeave']\n    onClick: ChordSvgProps['onRibbonClick']\n}\n\nexport const ChordRibbon = memo(\n    ({\n        ribbon,\n        ribbonGenerator,\n        animatedProps,\n        borderWidth,\n        blendMode,\n        isInteractive,\n        setCurrent,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordRibbonProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(ribbon)\n                showTooltipFromEvent(createElement(tooltip, { ribbon }), event)\n                onMouseEnter?.(ribbon, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, ribbon, onMouseEnter, setCurrent])\n\n        const handleMouseMove = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                showTooltipFromEvent(createElement(tooltip, { ribbon }), event)\n                onMouseMove?.(ribbon, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, ribbon, onMouseMove])\n\n        const handleMouseLeave = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(null)\n                hideTooltip()\n                onMouseLeave?.(ribbon, event)\n            }\n        }, [isInteractive, hideTooltip, ribbon, onMouseLeave, setCurrent])\n\n        const handleClick = useMemo(() => {\n            if (!isInteractive || !onClick) return undefined\n\n            return (event: MouseEvent) => onClick?.(ribbon, event)\n        }, [isInteractive, ribbon, onClick])\n\n        return (\n            <animated.path\n                data-testid={`ribbon.${ribbon.source.id}.${ribbon.target.id}`}\n                d={computeRibbonPath({\n                    sourceStartAngle: animatedProps.sourceStartAngle,\n                    sourceEndAngle: animatedProps.sourceEndAngle,\n                    targetStartAngle: animatedProps.targetStartAngle,\n                    targetEndAngle: animatedProps.targetEndAngle,\n                    ribbonGenerator,\n                })}\n                fill={animatedProps.color}\n                opacity={animatedProps.opacity}\n                strokeWidth={borderWidth}\n                stroke={animatedProps.borderColor}\n                style={{ mixBlendMode: blendMode }}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport {\n    useTheme,\n    // @ts-ignore\n    midAngle,\n    useMotionConfig,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { ChordRibbon } from './ChordRibbon'\nimport {\n    ChordCommonProps,\n    ChordSvgProps,\n    RibbonDatum,\n    RibbonAnimatedProps,\n    RibbonGenerator,\n    ArcDatum,\n} from './types'\n\n/**\n * Used to get ribbon angles, instead of using source and target arcs,\n * we sort arcs by value to have smooth transitions, otherwise,\n * if source|target arc value becomes greater than the other,\n * the ribbon will be reversed.\n */\nconst getRibbonAngles = ({ source, target }: RibbonDatum, useMiddleAngle: boolean) => {\n    let firstArc: ArcDatum\n    let secondArc: ArcDatum\n    if (source.startAngle < target.startAngle) {\n        firstArc = source\n        secondArc = target\n    } else {\n        firstArc = target\n        secondArc = source\n    }\n\n    if (useMiddleAngle) {\n        const firstMiddleAngle = midAngle(firstArc)\n        const secondMiddleAngle = midAngle(secondArc)\n\n        return {\n            sourceStartAngle: firstMiddleAngle,\n            sourceEndAngle: firstMiddleAngle,\n            targetStartAngle: secondMiddleAngle,\n            targetEndAngle: secondMiddleAngle,\n        }\n    }\n\n    return {\n        sourceStartAngle: firstArc.startAngle,\n        sourceEndAngle: firstArc.endAngle,\n        targetStartAngle: secondArc.startAngle,\n        targetEndAngle: secondArc.endAngle,\n    }\n}\n\ninterface ChordRibbonsProps {\n    ribbons: RibbonDatum[]\n    ribbonGenerator: RibbonGenerator\n    borderWidth: ChordCommonProps['ribbonBorderWidth']\n    borderColor: ChordCommonProps['ribbonBorderColor']\n    getOpacity: (ribbon: RibbonDatum) => number\n    blendMode: NonNullable<ChordSvgProps['ribbonBlendMode']>\n    isInteractive: ChordCommonProps['isInteractive']\n    setCurrent: (ribbon: RibbonDatum | null) => void\n    tooltip: NonNullable<ChordSvgProps['ribbonTooltip']>\n    onMouseEnter: ChordSvgProps['onRibbonMouseEnter']\n    onMouseMove: ChordSvgProps['onRibbonMouseMove']\n    onMouseLeave: ChordSvgProps['onRibbonMouseLeave']\n    onClick: ChordSvgProps['onRibbonClick']\n}\n\nexport const ChordRibbons = memo(\n    ({\n        ribbons,\n        ribbonGenerator,\n        borderWidth,\n        borderColor,\n        getOpacity,\n        blendMode,\n        isInteractive,\n        setCurrent,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordRibbonsProps) => {\n        const { animate, config: springConfig } = useMotionConfig()\n\n        const theme = useTheme()\n        const getBorderColor = useInheritedColor(borderColor, theme)\n\n        const transition = useTransition<RibbonDatum, RibbonAnimatedProps>(ribbons, {\n            keys: ribbon => ribbon.id,\n            initial: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: getOpacity(ribbon),\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            from: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: 0,\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            update: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: getOpacity(ribbon),\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            leave: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: 0,\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            expires: true,\n            config: springConfig,\n            immediate: !animate,\n        })\n\n        return (\n            <>\n                {transition((animatedProps, ribbon) => (\n                    <ChordRibbon\n                        key={ribbon.id}\n                        ribbon={ribbon}\n                        ribbonGenerator={ribbonGenerator}\n                        animatedProps={animatedProps}\n                        borderWidth={borderWidth}\n                        blendMode={blendMode}\n                        setCurrent={setCurrent}\n                        isInteractive={isInteractive}\n                        tooltip={tooltip}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                    />\n                ))}\n            </>\n        )\n    }\n)\n","import { createElement, memo, useMemo, MouseEvent } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ArcAnimatedProps, ArcDatum, ArcGenerator, ChordCommonProps } from './types'\nimport { computeArcPath } from './compute'\n\ninterface ChordArcProps {\n    arc: ArcDatum\n    animatedProps: SpringValues<ArcAnimatedProps>\n    arcGenerator: ArcGenerator\n    borderWidth: number\n    setCurrent: (arc: ArcDatum | null) => void\n    isInteractive: ChordCommonProps['isInteractive']\n    onMouseEnter?: ChordCommonProps['onArcMouseEnter']\n    onMouseMove?: ChordCommonProps['onArcMouseMove']\n    onMouseLeave?: ChordCommonProps['onArcMouseLeave']\n    onClick?: ChordCommonProps['onArcClick']\n    tooltip: ChordCommonProps['arcTooltip']\n}\n\nexport const ChordArc = memo(\n    ({\n        arc,\n        animatedProps,\n        borderWidth,\n        arcGenerator,\n        setCurrent,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordArcProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(arc)\n                showTooltipFromEvent(createElement(tooltip, { arc }), event)\n                onMouseEnter?.(arc, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, arc, onMouseEnter, setCurrent])\n\n        const handleMouseMove = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                showTooltipFromEvent(createElement(tooltip, { arc }), event)\n                onMouseMove?.(arc, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, arc, onMouseMove])\n\n        const handleMouseLeave = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(null)\n                hideTooltip()\n                onMouseLeave?.(arc, event)\n            }\n        }, [isInteractive, hideTooltip, arc, onMouseLeave, setCurrent])\n\n        const handleClick = useMemo(() => {\n            if (!isInteractive || !onClick) return undefined\n\n            return (event: MouseEvent) => onClick?.(arc, event)\n        }, [isInteractive, arc, onClick])\n\n        return (\n            <animated.path\n                data-testid={`arc.${arc.id}`}\n                d={computeArcPath({\n                    startAngle: animatedProps.startAngle,\n                    endAngle: animatedProps.endAngle,\n                    arcGenerator,\n                })}\n                fill={animatedProps.color}\n                opacity={animatedProps.opacity}\n                strokeWidth={borderWidth}\n                stroke={animatedProps.borderColor}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { ChordArc } from './ChordArc'\nimport { ArcDatum, ArcGenerator, ChordCommonProps, ArcAnimatedProps } from './types'\n\ninterface ChordArcsProps {\n    arcs: ArcDatum[]\n    arcGenerator: ArcGenerator\n    borderWidth: ChordCommonProps['arcBorderWidth']\n    borderColor: ChordCommonProps['arcBorderColor']\n    getOpacity: (arc: ArcDatum) => number\n    setCurrent: (arc: ArcDatum | null) => void\n    isInteractive: ChordCommonProps['isInteractive']\n    onMouseEnter?: ChordCommonProps['onArcMouseEnter']\n    onMouseMove?: ChordCommonProps['onArcMouseMove']\n    onMouseLeave?: ChordCommonProps['onArcMouseLeave']\n    onClick?: ChordCommonProps['onArcClick']\n    tooltip: ChordCommonProps['arcTooltip']\n}\n\nexport const ChordArcs = memo(\n    ({\n        arcs,\n        borderWidth,\n        borderColor,\n        getOpacity,\n        arcGenerator,\n        setCurrent,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordArcsProps) => {\n        const { animate, config: springConfig } = useMotionConfig()\n\n        const theme = useTheme()\n        const getBorderColor = useInheritedColor(borderColor, theme)\n\n        const transition = useTransition<ArcDatum, ArcAnimatedProps>(arcs, {\n            keys: arc => arc.id,\n            initial: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: getOpacity(arc),\n                borderColor: getBorderColor(arc),\n            }),\n            from: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: 0,\n                borderColor: getBorderColor(arc),\n            }),\n            update: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: getOpacity(arc),\n                borderColor: getBorderColor(arc),\n            }),\n            leave: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: 0,\n                borderColor: getBorderColor(arc),\n            }),\n            expires: true,\n            config: springConfig,\n            immediate: !animate,\n        })\n\n        return (\n            <>\n                {transition((animatedProps, arc) => (\n                    <ChordArc\n                        key={arc.id}\n                        arc={arc}\n                        arcGenerator={arcGenerator}\n                        animatedProps={animatedProps}\n                        borderWidth={borderWidth}\n                        setCurrent={setCurrent}\n                        isInteractive={isInteractive}\n                        tooltip={tooltip}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                    />\n                ))}\n            </>\n        )\n    }\n)\n","import { memo, useMemo } from 'react'\nimport { useTransition, animated, to } from '@react-spring/web'\nimport {\n    // @ts-ignore\n    midAngle,\n    // @ts-ignore\n    getPolarLabelProps,\n    useTheme,\n} from '@nivo/core'\nimport { useMotionConfig } from '@nivo/core'\nimport { ArcDatum, ChordCommonProps } from './types'\nimport { useInheritedColor } from '@nivo/colors'\n\ninterface ChordLabelsProps {\n    arcs: ArcDatum[]\n    radius: number\n    rotation: number\n    color: ChordCommonProps['labelTextColor']\n}\n\nexport const ChordLabels = memo(({ arcs, radius, rotation, color }: ChordLabelsProps) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    const labels = useMemo(\n        () =>\n            arcs.map(arc => {\n                const angle = midAngle(arc)\n                const textProps = getPolarLabelProps(radius, angle, rotation)\n\n                return {\n                    id: arc.id,\n                    label: arc.label,\n                    x: textProps.x,\n                    y: textProps.y,\n                    rotation: textProps.rotate,\n                    color: getColor(arc),\n                    textAnchor: textProps.align,\n                    dominantBaseline: textProps.baseline,\n                }\n            }),\n        [arcs, radius, rotation, getColor]\n    )\n\n    const transition = useTransition<\n        typeof labels[number],\n        {\n            x: number\n            y: number\n            rotation: number\n            color: string\n        }\n    >(labels, {\n        keys: label => label.id,\n        initial: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        from: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        enter: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        update: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        expires: true,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, label) => (\n                <animated.text\n                    key={label.id}\n                    data-testid={`label.${label.id}`}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: transitionProps.color,\n                    }}\n                    transform={to(\n                        [transitionProps.x, transitionProps.y, transitionProps.rotation],\n                        (x, y, rotation) => `translate(${x}, ${y}) rotate(${rotation})`\n                    )}\n                    textAnchor={label.textAnchor}\n                    dominantBaseline={label.dominantBaseline}\n                >\n                    {label.label}\n                </animated.text>\n            ))}\n        </>\n    )\n})\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { svgDefaultProps } from './defaults'\nimport { useChord, useChordSelection, useCustomLayerProps } from './hooks'\nimport { ChordRibbons } from './ChordRibbons'\nimport { ChordArcs } from './ChordArcs'\nimport { ChordLabels } from './ChordLabels'\nimport { ChordSvgProps, LayerId } from './types'\n\ntype InnerChordProps = Omit<ChordSvgProps, 'animate' | 'motionConfig' | 'renderWrapper' | 'theme'>\n\nconst InnerChord = ({\n    data,\n    keys,\n    label,\n    valueFormat,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    innerRadiusRatio = svgDefaultProps.innerRadiusRatio,\n    innerRadiusOffset = svgDefaultProps.innerRadiusOffset,\n    padAngle = svgDefaultProps.padAngle,\n\n    layers = svgDefaultProps.layers,\n\n    colors = svgDefaultProps.colors,\n\n    arcBorderWidth = svgDefaultProps.arcBorderWidth,\n    arcBorderColor = svgDefaultProps.arcBorderColor,\n    arcOpacity = svgDefaultProps.arcOpacity,\n    activeArcOpacity = svgDefaultProps.activeArcOpacity,\n    inactiveArcOpacity = svgDefaultProps.inactiveArcOpacity,\n    arcTooltip = svgDefaultProps.arcTooltip,\n\n    ribbonBorderWidth = svgDefaultProps.ribbonBorderWidth,\n    ribbonBorderColor = svgDefaultProps.ribbonBorderColor,\n    ribbonBlendMode = svgDefaultProps.ribbonBlendMode,\n    ribbonOpacity = svgDefaultProps.ribbonOpacity,\n    activeRibbonOpacity = svgDefaultProps.activeRibbonOpacity,\n    inactiveRibbonOpacity = svgDefaultProps.inactiveRibbonOpacity,\n    ribbonTooltip = svgDefaultProps.ribbonTooltip,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    labelOffset = svgDefaultProps.labelOffset,\n    labelRotation = svgDefaultProps.labelRotation,\n    labelTextColor = svgDefaultProps.labelTextColor,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    onArcMouseEnter,\n    onArcMouseMove,\n    onArcMouseLeave,\n    onArcClick,\n    onRibbonMouseEnter,\n    onRibbonMouseMove,\n    onRibbonMouseLeave,\n    onRibbonClick,\n\n    legends = svgDefaultProps.legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerChordProps) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { center, radius, arcGenerator, ribbonGenerator, arcs, ribbons } = useChord({\n        data,\n        keys,\n        label,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        innerRadiusRatio,\n        innerRadiusOffset,\n        padAngle,\n        colors,\n    })\n\n    const { setCurrentArc, setCurrentRibbon, getArcOpacity, getRibbonOpacity } = useChordSelection({\n        arcOpacity,\n        activeArcOpacity,\n        inactiveArcOpacity,\n        ribbons,\n        ribbonOpacity,\n        activeRibbonOpacity,\n        inactiveRibbonOpacity,\n    })\n\n    const customLayerProps = useCustomLayerProps({\n        center,\n        radius,\n        arcs,\n        arcGenerator,\n        ribbons,\n        ribbonGenerator,\n    })\n\n    if (radius <= 0) return null\n\n    const legendData = arcs.map(arc => ({\n        id: arc.id,\n        label: arc.label,\n        color: arc.color,\n    }))\n\n    const layerById: Record<LayerId, ReactNode> = {\n        ribbons: null,\n        arcs: null,\n        labels: null,\n        legends: null,\n    }\n\n    if (layers.includes('ribbons')) {\n        layerById.ribbons = (\n            <g key=\"ribbons\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordRibbons\n                    ribbons={ribbons}\n                    ribbonGenerator={ribbonGenerator}\n                    borderWidth={ribbonBorderWidth}\n                    borderColor={ribbonBorderColor}\n                    getOpacity={getRibbonOpacity}\n                    blendMode={ribbonBlendMode}\n                    setCurrent={setCurrentRibbon}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onRibbonMouseEnter}\n                    onMouseMove={onRibbonMouseMove}\n                    onMouseLeave={onRibbonMouseLeave}\n                    onClick={onRibbonClick}\n                    tooltip={ribbonTooltip}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <g key=\"arcs\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordArcs\n                    arcs={arcs}\n                    arcGenerator={arcGenerator}\n                    borderWidth={arcBorderWidth}\n                    borderColor={arcBorderColor}\n                    getOpacity={getArcOpacity}\n                    setCurrent={setCurrentArc}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onArcMouseEnter}\n                    onMouseMove={onArcMouseMove}\n                    onMouseLeave={onArcMouseLeave}\n                    onClick={onArcClick}\n                    tooltip={arcTooltip}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('labels') && enableLabel) {\n        layerById.labels = (\n            <g key=\"labels\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordLabels\n                    arcs={arcs}\n                    radius={radius + labelOffset}\n                    rotation={labelRotation}\n                    color={labelTextColor}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('legends') && legends.length > 0) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Chord = ({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: ChordSvgProps) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerChord isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { createElement, useRef, useEffect, useCallback, MouseEvent } from 'react'\nimport {\n    useDimensions,\n    useTheme,\n    // @ts-ignore\n    midAngle,\n    // @ts-ignore\n    getPolarLabelProps,\n    degreesToRadians,\n    getRelativeCursor,\n    Margin,\n    Container,\n} from '@nivo/core'\nimport { findArcUnderCursor } from '@nivo/arcs'\nimport { useInheritedColor } from '@nivo/colors'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useChord, useChordSelection, useCustomLayerProps } from './hooks'\nimport { ArcDatum, ChordCanvasProps } from './types'\nimport { canvasDefaultProps } from './defaults'\n\nconst getArcFromMouseEvent = ({\n    event,\n    canvasEl,\n    center,\n    margin,\n    radius,\n    innerRadius,\n    arcs,\n}: {\n    event: MouseEvent\n    canvasEl: HTMLCanvasElement\n    center: [number, number]\n    margin: Margin\n    radius: number\n    innerRadius: number\n    arcs: ArcDatum[]\n}) => {\n    const [x, y] = getRelativeCursor(canvasEl, event)\n    const centerX = margin.left + center[0]\n    const centerY = margin.top + center[1]\n\n    return findArcUnderCursor(centerX, centerY, radius, innerRadius, arcs as any[], x, y)\n}\n\ntype InnerChordCanvasProps = Omit<ChordCanvasProps, 'renderWrapper' | 'theme'>\n\nconst InnerChordCanvas = ({\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    margin: partialMargin,\n    data,\n    keys,\n    width,\n    height,\n    label = canvasDefaultProps.label,\n    valueFormat,\n    innerRadiusRatio = canvasDefaultProps.innerRadiusRatio,\n    innerRadiusOffset = canvasDefaultProps.innerRadiusOffset,\n    padAngle = canvasDefaultProps.padAngle,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    arcBorderWidth = canvasDefaultProps.arcBorderWidth,\n    arcBorderColor = canvasDefaultProps.arcBorderColor,\n    arcOpacity = canvasDefaultProps.arcOpacity,\n    activeArcOpacity = canvasDefaultProps.activeArcOpacity,\n    inactiveArcOpacity = canvasDefaultProps.inactiveArcOpacity,\n    arcTooltip = canvasDefaultProps.arcTooltip,\n    ribbonBorderWidth = canvasDefaultProps.ribbonBorderWidth,\n    ribbonBorderColor = canvasDefaultProps.ribbonBorderColor,\n    ribbonOpacity = canvasDefaultProps.ribbonOpacity,\n    activeRibbonOpacity = canvasDefaultProps.activeRibbonOpacity,\n    inactiveRibbonOpacity = canvasDefaultProps.inactiveRibbonOpacity,\n    enableLabel = canvasDefaultProps.enableLabel,\n    labelOffset = canvasDefaultProps.labelOffset,\n    labelRotation = canvasDefaultProps.labelRotation,\n    labelTextColor = canvasDefaultProps.labelTextColor,\n    isInteractive = canvasDefaultProps.isInteractive,\n    onArcMouseEnter,\n    onArcMouseMove,\n    onArcMouseLeave,\n    onArcClick,\n    legends = canvasDefaultProps.legends,\n}: InnerChordCanvasProps) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const { innerWidth, innerHeight, outerWidth, outerHeight, margin } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { center, radius, innerRadius, arcGenerator, ribbonGenerator, arcs, ribbons } = useChord({\n        data,\n        keys,\n        label,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        innerRadiusRatio,\n        innerRadiusOffset,\n        padAngle,\n        colors,\n    })\n\n    const { currentArc, setCurrentArc, getArcOpacity, getRibbonOpacity } = useChordSelection({\n        arcOpacity,\n        activeArcOpacity,\n        inactiveArcOpacity,\n        ribbons,\n        ribbonOpacity,\n        activeRibbonOpacity,\n        inactiveRibbonOpacity,\n    })\n\n    const theme = useTheme()\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const getArcBorderColor = useInheritedColor(arcBorderColor, theme)\n    const getRibbonBorderColor = useInheritedColor(ribbonBorderColor, theme)\n\n    const layerContext = useCustomLayerProps({\n        center,\n        radius,\n        arcs,\n        arcGenerator,\n        ribbons,\n        ribbonGenerator,\n    })\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        if (radius <= 0) return\n\n        layers.forEach(layer => {\n            if (layer === 'ribbons') {\n                ctx.save()\n                ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                ribbonGenerator.context(ctx)\n                ribbons.forEach(ribbon => {\n                    ctx.save()\n\n                    ctx.globalAlpha = getRibbonOpacity(ribbon)\n                    ctx.fillStyle = ribbon.source.color\n                    ctx.beginPath()\n                    ribbonGenerator(ribbon)\n                    ctx.fill()\n\n                    if (ribbonBorderWidth > 0) {\n                        ctx.strokeStyle = getRibbonBorderColor(ribbon.source)\n                        ctx.lineWidth = ribbonBorderWidth\n                        ctx.stroke()\n                    }\n\n                    ctx.restore()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'arcs') {\n                ctx.save()\n                ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                arcGenerator.context(ctx)\n                arcs.forEach(arc => {\n                    ctx.save()\n\n                    ctx.globalAlpha = getArcOpacity(arc)\n                    ctx.fillStyle = arc.color\n                    ctx.beginPath()\n                    arcGenerator(arc)\n                    ctx.fill()\n\n                    if (arcBorderWidth > 0) {\n                        ctx.strokeStyle = getArcBorderColor(arc)\n                        ctx.lineWidth = arcBorderWidth\n                        ctx.stroke()\n                    }\n\n                    ctx.restore()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'labels' && enableLabel === true) {\n                ctx.save()\n                ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                ctx.font = `${theme.labels.text.fontSize}px ${\n                    theme.labels.text.fontFamily || 'sans-serif'\n                }`\n\n                arcs.forEach(arc => {\n                    const angle = midAngle(arc)\n                    const props = getPolarLabelProps(radius + labelOffset, angle, labelRotation)\n\n                    ctx.save()\n                    ctx.translate(props.x, props.y)\n                    ctx.rotate(degreesToRadians(props.rotate))\n\n                    ctx.textAlign = props.align\n                    ctx.textBaseline = props.baseline\n                    ctx.fillStyle = getLabelTextColor(arc)\n                    ctx.fillText(arc.label, 0, 0)\n\n                    ctx.restore()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'legends') {\n                ctx.save()\n                ctx.translate(margin.left, margin.top)\n\n                const legendData = arcs.map(arc => ({\n                    id: arc.id,\n                    label: arc.label,\n                    color: arc.color,\n                }))\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n\n                ctx.restore()\n            }\n\n            if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin,\n        pixelRatio,\n        center,\n        radius,\n        theme,\n        layers,\n        arcs,\n        arcGenerator,\n        getArcOpacity,\n        arcBorderWidth,\n        getArcBorderColor,\n        ribbons,\n        ribbonGenerator,\n        getRibbonOpacity,\n        ribbonBorderWidth,\n        getRibbonBorderColor,\n        enableLabel,\n        labelOffset,\n        labelRotation,\n        getLabelTextColor,\n        legends,\n        layerContext,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            if (canvasEl.current === null) return\n\n            const arc = getArcFromMouseEvent({\n                event,\n                canvasEl: canvasEl.current,\n                center,\n                margin,\n                radius,\n                innerRadius,\n                arcs,\n            })\n\n            if (arc) {\n                setCurrentArc(arc)\n                showTooltipFromEvent(createElement(arcTooltip, { arc }), event)\n                !currentArc && onArcMouseEnter && onArcMouseEnter(arc, event)\n                onArcMouseMove && onArcMouseMove(arc, event)\n                currentArc &&\n                    currentArc.id !== arc.id &&\n                    onArcMouseLeave &&\n                    onArcMouseLeave(arc, event)\n            } else {\n                setCurrentArc(null)\n                hideTooltip()\n                currentArc && onArcMouseLeave && onArcMouseLeave(currentArc, event)\n            }\n        },\n        [\n            canvasEl,\n            center,\n            margin,\n            radius,\n            innerRadius,\n            arcs,\n            setCurrentArc,\n            currentArc,\n            showTooltipFromEvent,\n            hideTooltip,\n            arcTooltip,\n            onArcMouseEnter,\n            onArcMouseMove,\n            onArcMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setCurrentArc(null)\n        hideTooltip()\n    }, [setCurrentArc, hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            if (canvasEl.current === null || !onArcClick) return\n\n            const arc = getArcFromMouseEvent({\n                event,\n                canvasEl: canvasEl.current,\n                center,\n                margin,\n                radius,\n                innerRadius,\n                arcs,\n            })\n\n            arc && onArcClick(arc, event)\n        },\n        [canvasEl, center, margin, radius, innerRadius, arcs, onArcClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const ChordCanvas = ({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: ChordCanvasProps) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerChordCanvas isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Chord } from './Chord'\nimport { ChordSvgProps } from './types'\n\nexport const ResponsiveChord = (props: Omit<ChordSvgProps, 'width' | 'height'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Chord {...props} width={width} height={height} />}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ChordCanvas } from './ChordCanvas'\nimport { ChordCanvasProps } from './types'\n\nexport const ResponsiveChordCanvas = (props: Omit<ChordCanvasProps, 'width' | 'height'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ChordCanvas {...props} width={width} height={height} />}\n    </ResponsiveWrapper>\n)\n"],"names":["a","b","NaN","compare","length","f","d","x","array","Array","prototype","slice","map","Math","sqrt","start","stop","step","n","arguments","i","max","ceil","range","cos","sin","pi","PI","halfPi","tau","compareValue","source","value","target","defaultSource","defaultTarget","defaultRadius","radius","defaultStartAngle","startAngle","defaultEndAngle","endAngle","context","ribbon","buffer","argv","s","apply","this","t","sr","sa0","sa1","sx0","sy0","tr","ta0","ta1","path","moveTo","arc","quadraticCurveTo","closePath","_","commonDefaultProps","layers","padAngle","innerRadiusRatio","innerRadiusOffset","colors","scheme","arcOpacity","activeArcOpacity","inactiveArcOpacity","arcBorderWidth","arcBorderColor","from","modifiers","arcTooltip","memo","_jsx","BasicTooltip","id","label","formattedValue","color","enableChip","ribbonOpacity","activeRibbonOpacity","inactiveRibbonOpacity","ribbonBorderWidth","ribbonBorderColor","ribbonBlendMode","enableLabel","labelOffset","labelRotation","labelTextColor","isInteractive","legends","animate","motionConfig","role","svgDefaultProps","ribbonTooltip","TableTooltip","rows","Chip","canvasDefaultProps","pixelRatio","window","devicePixelRatio","computeChordLayout","sortGroups","sortSubgroups","sortChords","chord","matrix","k","x0","dx","j","groupSums","groupIndex","subgroupIndex","chords","groups","subgroups","push","sort","forEach","di","dj","v","a0","a1","index","subindex","d3Chord","computeArcPath","arcGenerator","to","computeRibbonPath","sourceStartAngle","sourceEndAngle","targetStartAngle","targetEndAngle","ribbonGenerator","min","useChordGenerators","width","height","useMemo","center","innerRadius","ribbonRadius","d3Arc","outerRadius","d3Ribbon","computeChordGenerators","useChordArcsAndRibbons","getColor","keys","data","getLabel","formatValue","_ribbons","arcs","chordGroup","ribbons","_ribbon","join","computeChordArcsAndRibbons","useChord","valueFormat","useChordLayout","getLabelGenerator","useValueFormatter","useOrdinalColorScale","useChordSelection","useState","currentArc","setCurrentArc","currentRibbon","setCurrentRibbon","selection","selectedArcIds","selectedRibbonIds","filter","hasSelection","getArcOpacity","includes","getRibbonOpacity","useCustomLayerProps","ChordRibbon","animatedProps","borderWidth","blendMode","setCurrent","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleClick","animated","fill","opacity","strokeWidth","stroke","borderColor","style","mixBlendMode","getRibbonAngles","useMiddleAngle","firstArc","secondArc","firstMiddleAngle","midAngle","secondMiddleAngle","ChordRibbons","getOpacity","useMotionConfig","springConfig","config","theme","useTheme","getBorderColor","useInheritedColor","transition","useTransition","initial","update","leave","expires","immediate","ChordArc","ChordArcs","ChordLabels","rotation","labels","angle","textProps","getPolarLabelProps","y","rotate","textAnchor","align","dominantBaseline","baseline","enter","transitionProps","text","pointerEvents","transform","InnerChord","partialMargin","margin","onArcMouseEnter","onArcMouseMove","onArcMouseLeave","onArcClick","onRibbonMouseEnter","onRibbonMouseMove","onRibbonMouseLeave","onRibbonClick","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","customLayerProps","legendData","layerById","Fragment","legend","BoxLegendSvg","containerWidth","containerHeight","SvgWrapper","layer","Chord","renderWrapper","otherProps","Container","getArcFromMouseEvent","canvasEl","getRelativeCursor","centerX","left","centerY","top","findArcUnderCursor","InnerChordCanvas","useRef","getLabelTextColor","getArcBorderColor","getRibbonBorderColor","layerContext","useEffect","current","ctx","getContext","scale","fillStyle","background","fillRect","save","translate","r","globalAlpha","beginPath","strokeStyle","lineWidth","restore","font","fontSize","fontFamily","props","degreesToRadians","textAlign","textBaseline","fillText","renderLegendToCanvas","handleMouseHover","useCallback","e","ref","cursor","ChordCanvas","ResponsiveChord","ResponsiveWrapper","ResponsiveChordCanvas"],"sourceRoot":""}