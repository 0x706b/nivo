{"version":3,"file":"57d6731406706875e3167deff93524f709d877a8-870a0dd2b2ab7eed9213.js","mappings":"iHAAA,IAAIA,EAAKC,KAAKC,GACVC,EAAM,EAAIH,EACVI,EAAU,KACVC,EAAaF,EAAMC,EAEvB,SAASE,IACPC,KAAKC,IAAMD,KAAKE,IAChBF,KAAKG,IAAMH,KAAKI,IAAM,KAEtBJ,KAAKK,EAAI,GAGX,SAASC,IACP,OAAO,IAAIP,EAGbA,EAAKQ,UAAYD,EAAKC,UAAY,CAChCC,YAAaT,EACbU,OAAQ,SAAgBC,EAAGC,GACzBX,KAAKK,GAAK,KAAOL,KAAKC,IAAMD,KAAKG,KAAOO,GAAK,KAAOV,KAAKE,IAAMF,KAAKI,KAAOO,IAE7EC,UAAW,WACQ,OAAbZ,KAAKG,MACPH,KAAKG,IAAMH,KAAKC,IAAKD,KAAKI,IAAMJ,KAAKE,IACrCF,KAAKK,GAAK,MAGdQ,OAAQ,SAAgBH,EAAGC,GACzBX,KAAKK,GAAK,KAAOL,KAAKG,KAAOO,GAAK,KAAOV,KAAKI,KAAOO,IAEvDG,iBAAkB,SAA0BC,EAAIC,EAAIN,EAAGC,GACrDX,KAAKK,GAAK,MAAOU,EAAK,MAAOC,EAAK,KAAOhB,KAAKG,KAAOO,GAAK,KAAOV,KAAKI,KAAOO,IAE/EM,cAAe,SAAuBF,EAAIC,EAAIE,EAAIC,EAAIT,EAAGC,GACvDX,KAAKK,GAAK,MAAOU,EAAK,MAAOC,EAAK,MAAOE,EAAK,MAAOC,EAAK,KAAOnB,KAAKG,KAAOO,GAAK,KAAOV,KAAKI,KAAOO,IAEvGS,MAAO,SAAeL,EAAIC,EAAIE,EAAIC,EAAIE,GACpCN,GAAMA,EAAIC,GAAMA,EAAIE,GAAMA,EAAIC,GAAMA,EAAIE,GAAKA,EAC7C,IAAIC,EAAKtB,KAAKG,IACVoB,EAAKvB,KAAKI,IACVoB,EAAMN,EAAKH,EACXU,EAAMN,EAAKH,EACXU,EAAMJ,EAAKP,EACXY,EAAMJ,EAAKP,EACXY,EAAQF,EAAMA,EAAMC,EAAMA,EAE9B,GAAIN,EAAI,EAAG,MAAM,IAAIQ,MAAM,oBAAsBR,GAEjD,GAAiB,OAAbrB,KAAKG,IACPH,KAAKK,GAAK,KAAOL,KAAKG,IAAMY,GAAM,KAAOf,KAAKI,IAAMY,QAEjD,GAAMY,EAAQ/B,EAGd,GAAMH,KAAKoC,IAAIH,EAAMH,EAAMC,EAAMC,GAAO7B,GAAawB,EAGrD,CACH,IAAIU,EAAMb,EAAKI,EACXU,EAAMb,EAAKI,EACXU,EAAQT,EAAMA,EAAMC,EAAMA,EAC1BS,EAAQH,EAAMA,EAAMC,EAAMA,EAC1BG,EAAMzC,KAAK0C,KAAKH,GAChBI,EAAM3C,KAAK0C,KAAKR,GAChBU,EAAIjB,EAAI3B,KAAK6C,KAAK9C,EAAKC,KAAK8C,MAAMP,EAAQL,EAAQM,IAAU,EAAIC,EAAME,KAAS,GAC/EI,EAAMH,EAAID,EACVK,EAAMJ,EAAIH,EAEVzC,KAAKoC,IAAIW,EAAM,GAAK5C,IACtBG,KAAKK,GAAK,KAAOU,EAAK0B,EAAMf,GAAO,KAAOV,EAAKyB,EAAMd,IAGvD3B,KAAKK,GAAK,IAAMgB,EAAI,IAAMA,EAAI,WAAYM,EAAMI,EAAML,EAAMM,GAAO,KAAOhC,KAAKG,IAAMY,EAAK2B,EAAMlB,GAAO,KAAOxB,KAAKI,IAAMY,EAAK0B,EAAMjB,QAjBpIzB,KAAKK,GAAK,KAAOL,KAAKG,IAAMY,GAAM,KAAOf,KAAKI,IAAMY,UAoBxD2B,IAAK,SAAajC,EAAGC,EAAGU,EAAGuB,EAAIC,EAAIC,GACjCpC,GAAKA,EAAGC,GAAKA,EAAWmC,IAAQA,EAChC,IAAIC,GADY1B,GAAKA,GACR3B,KAAKsD,IAAIJ,GAClBK,EAAK5B,EAAI3B,KAAKwD,IAAIN,GAClBtB,EAAKZ,EAAIqC,EACTxB,EAAKZ,EAAIsC,EACTE,EAAK,EAAIL,EACTM,EAAKN,EAAMF,EAAKC,EAAKA,EAAKD,EAE9B,GAAIvB,EAAI,EAAG,MAAM,IAAIQ,MAAM,oBAAsBR,GAEhC,OAAbrB,KAAKG,IACPH,KAAKK,GAAK,IAAMiB,EAAK,IAAMC,GAEpB7B,KAAKoC,IAAI9B,KAAKG,IAAMmB,GAAMzB,GAAWH,KAAKoC,IAAI9B,KAAKI,IAAMmB,GAAM1B,KACtEG,KAAKK,GAAK,IAAMiB,EAAK,IAAMC,GAIxBF,IAED+B,EAAK,IAAGA,EAAKA,EAAKxD,EAAMA,GAExBwD,EAAKtD,EACPE,KAAKK,GAAK,IAAMgB,EAAI,IAAMA,EAAI,QAAU8B,EAAK,KAAOzC,EAAIqC,GAAM,KAAOpC,EAAIsC,GAAM,IAAM5B,EAAI,IAAMA,EAAI,QAAU8B,EAAK,KAAOnD,KAAKG,IAAMmB,GAAM,KAAOtB,KAAKI,IAAMmB,GAErJ6B,EAAKvD,IACZG,KAAKK,GAAK,IAAMgB,EAAI,IAAMA,EAAI,SAAU+B,GAAM3D,GAAM,IAAM0D,EAAK,KAAOnD,KAAKG,IAAMO,EAAIW,EAAI3B,KAAKsD,IAAIH,IAAO,KAAO7C,KAAKI,IAAMO,EAAIU,EAAI3B,KAAKwD,IAAIL,OAGhJQ,KAAM,SAAc3C,EAAGC,EAAG2C,EAAGC,GAC3BvD,KAAKK,GAAK,KAAOL,KAAKC,IAAMD,KAAKG,KAAOO,GAAK,KAAOV,KAAKE,IAAMF,KAAKI,KAAOO,GAAK,MAAO2C,EAAI,MAAOC,EAAI,KAAOD,EAAI,KAEnHE,SAAU,WACR,OAAOxD,KAAKK,IAGhB,O,qBChHe,SAAS,EAACK,GACvB,OAAO,WACL,OAAOA,G,sICEI,SAAS,IACtB,IAAIA,EAAI,IACJC,EAAI,IACJ8C,GAAU,QAAS,GACnBC,EAAU,KACVC,EAAQ,IACRC,EAAS,KAEb,SAASC,EAAKC,GACZ,IAAIC,EAEAC,EAEAC,EAHAC,EAAIJ,EAAKK,OAETC,GAAW,EAIf,IAFe,MAAXV,IAAiBE,EAASD,EAAMM,GAAS,WAExCF,EAAI,EAAGA,GAAKG,IAAKH,IACdA,EAAIG,GAAKT,EAAQO,EAAIF,EAAKC,GAAIA,EAAGD,MAAWM,KAC5CA,GAAYA,GAAUR,EAAOS,YAAiBT,EAAOU,WAGvDF,GAAUR,EAAOW,OAAO7D,EAAEsD,EAAGD,EAAGD,IAAQnD,EAAEqD,EAAGD,EAAGD,IAGtD,GAAIG,EAAQ,OAAOL,EAAS,KAAMK,EAAS,IAAM,KAuBnD,OApBAJ,EAAKnD,EAAI,SAAUL,GACjB,OAAOmE,UAAUL,QAAUzD,EAAiB,mBAANL,EAAmBA,GAAI,QAAUA,GAAIwD,GAAQnD,GAGrFmD,EAAKlD,EAAI,SAAUN,GACjB,OAAOmE,UAAUL,QAAUxD,EAAiB,mBAANN,EAAmBA,GAAI,QAAUA,GAAIwD,GAAQlD,GAGrFkD,EAAKJ,QAAU,SAAUpD,GACvB,OAAOmE,UAAUL,QAAUV,EAAuB,mBAANpD,EAAmBA,GAAI,SAAWA,GAAIwD,GAAQJ,GAG5FI,EAAKF,MAAQ,SAAUtD,GACrB,OAAOmE,UAAUL,QAAUR,EAAQtD,EAAc,MAAXqD,IAAoBE,EAASD,EAAMD,IAAWG,GAAQF,GAG9FE,EAAKH,QAAU,SAAUrD,GACvB,OAAOmE,UAAUL,QAAe,MAAL9D,EAAYqD,EAAUE,EAAS,KAAOA,EAASD,EAAMD,EAAUrD,GAAIwD,GAAQH,GAGjGG,I,sBCnDF,SAASnD,EAAE+D,GAChB,OAAOA,EAAE,GAEJ,SAAS9D,EAAE8D,GAChB,OAAOA,EAAE,G,4FCFX,KACIC,MAAO,IACPC,OAAQ,IAERC,OAAQ,CACJC,IAAK,GACLC,MAAO,IACPC,OAAQ,GACRC,KAAM,IAGVC,OAAQ,CACJC,KAAM,SAEVC,QAAS,CAAEC,OAAQ,GAAIC,SAAS,GAChCC,OAAQ,CACJJ,KAAM,SACNK,IAAK,OACLC,IAAK,OACLC,SAAS,EACTC,SAAS,GAEbC,QAAS,CAAEP,OAAQ,SAAUC,SAAS,GAEtC1B,MAAOiC,EAAAA,GAAAA,MAEPC,QAAS,CACLC,QAAQ,EACRC,OAAQ,MACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,GACRC,aAAc,IAElBC,UAAW,CACPP,QAAQ,EACRC,OAAQ,QACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,GACRC,aAAc,GAElBE,WAAY,CACRR,QAAQ,EACRC,OAAQ,SACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,iBACRC,aAAc,GACdG,eAAgB,UAEpBC,SAAU,CACNV,QAAQ,EACRC,OAAQ,OACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,QACRC,cAAe,GACfG,eAAgB,UAGpBE,YAAab,EAAAA,GAAAA,YACbc,YAAad,EAAAA,GAAAA,YAEbe,OAAQf,EAAAA,GAAAA,OACRgB,UAAW,EAEXC,cAAc,EACdC,UAAW,GACXC,WAAY,CAAEC,MAAO,cACrBC,iBAAkB,EAClBC,iBAAkB,CAAEC,KAAM,cAC1BC,iBAAkBxB,EAAAA,GAAAA,iBAClByB,WAAYzB,EAAAA,GAAAA,WACZ0B,mBAAoB,GAEpBC,WAAY3B,EAAAA,GAAAA,WACZ4B,cAAe5B,EAAAA,GAAAA,cACf6B,kBAAmB7B,EAAAA,GAAAA,kBACnB8B,YAAa9B,EAAAA,GAAAA,YAEb+B,cAAe/B,EAAAA,GAAAA,cACfgC,cAAc,EACdC,aAAa,EAEbC,iBAAiB,EACjBC,cAAe,gB,+GCzFNC,EAAuB,WAChC,OAAOC,EAAAA,EAAAA,IACH,CAAC,QAAS,SAAU,KAAM,UAAW,UACrC,CACI,QACA,aACA,OACA,QACA,SACA,MACA,MACA,OACA,UACA,QACA,aACA,YAKCC,EAAuB,WAChC,OAAOD,EAAAA,EAAAA,IACH,CACI,QACA,SACA,SACA,KACA,UACA,SACA,QACA,UACA,SACA,UACA,aAEJE,GAAAA,CAAM,Q,qCCpCd,KAAeC,EAAAA,EAAAA,IACX,CACIf,WAAY,SAAAgB,GACR,MAAS,0BAALA,EAA8C,SAAArE,GAAC,OAAOA,EAAEtD,EAAT,KAAesD,EAAErD,GAC7D0H,GAEXlD,QAASmD,EAAAA,GACT3C,QAAS2C,EAAAA,GACTzC,SAAS0C,EAAAA,EAAAA,IAAQ,OACjBlC,WAAWkC,EAAAA,EAAAA,IAAQ,SACnBjC,YAAYiC,EAAAA,EAAAA,IAAQ,UACpB/B,UAAU+B,EAAAA,EAAAA,IAAQ,SAEtB,CACIC,QAAS,CAAC,iBAAkB,mBAAoB,oBAAqB,sB,oGCKvEC,EAAuB,CAAC,MAAO,SAAU,OAEzCC,EAAsB,CACxB,CACIC,IAAK,OACLC,MAAO,OACPC,QAASJ,EACTK,KAAM,cACNC,YAAY,2UAYZC,UAAU,EACV9D,KAAM,YAEV,CACIyD,IAAK,SACLzD,KAAM,SACN2D,QAASJ,EACTG,MAAO,OACPE,KAAK,yBACLE,UAAU,EACVC,QAAS,CACL/D,KAAM,SACNwD,MAAO,CACH,CACIC,IAAK,OACLG,KAAK,cACL5D,KAAM,SACN8D,UAAU,EACVH,QAASJ,EACTQ,QAAS,CACL/D,KAAM,UACNgE,UAAU,EACVC,QAAS,CAAC,SAAU,SAASC,KAAI,SAAAC,GAAC,MAAK,CACnCC,MAAOD,EACPhB,MAAOgB,WAO/B,CACIV,IAAK,UACLC,MAAO,OACPE,KAAM,mCACND,QAASJ,EACTM,YAAY,meAUZC,UAAU,EACV9D,KAAM,oBACN+D,QAAS,CAAE/D,KAAM,gBAErB,CACIyD,IAAK,SACLzD,KAAM,SACN4D,KAAK,yBACLD,QAASJ,EACTG,MAAO,OACPI,UAAU,EACVC,QAAS,CACL/D,KAAM,SACNwD,MAAO,CACH,CACIC,IAAK,OACLG,KAAK,cACL5D,KAAM,SACN2D,QAASJ,EACTO,UAAU,EACVC,QAAS,CACL/D,KAAM,UACNgE,UAAU,EACVC,QAAS,CAAC,SAAU,SAASC,KAAI,SAAAC,GAAC,MAAK,CACnCC,MAAOD,EACPhB,MAAOgB,QAInB,CACIV,IAAK,UACLG,KAAM,+BACND,QAASJ,EACTvD,KAAM,UACN8D,UAAU,EACVC,QAAS,CAAE/D,KAAM,WAErB,CACIyD,IAAK,MACLG,KAAM,uBACND,QAASJ,EACTO,UAAU,EACV9D,KAAK,kBACL+D,QAAS,CACL/D,KAAM,kBACNqE,cAAe,OACfC,aAAc,EACdjE,KAAM,IACNC,IAAK,MAGb,CACImD,IAAK,MACLG,KAAM,uBACND,QAASJ,EACTO,UAAU,EACV9D,KAAK,kBACL+D,QAAS,CACL/D,KAAM,kBACNqE,cAAe,OACfC,aAAc,KACdjE,KAAM,IACNC,IAAK,SAMzB,CACImD,IAAK,UACLC,MAAO,OACPC,QAASJ,EACTK,KAAM,mCACNC,YAAY,meAUZC,UAAU,EACV9D,KAAM,oBACN+D,QAAS,CAAE/D,KAAM,iBArJG,QAuJrBuE,EAAAA,EAAAA,IAAgBhB,GAvJK,CAwJxB,CACIE,IAAK,QACLG,KAAM,uBACND,QAASJ,EACTM,YAAY,mFAGZ7D,KAAM,SACN8D,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,MACdd,MAAO,QACPK,QAAS,CACL/D,KAAM,UACNiE,QAASQ,EAAAA,GAAAA,KAAsB,SAAChB,GAAD,MAAkB,CAC7CW,MAAOX,EACPN,MAAOM,SAInBiB,EAAAA,EAAAA,IAAc,CAAC,MAAO,SAAU,SAChCC,EAAAA,EAAAA,IAAc,CACVhB,QAASJ,EACTe,aAAcE,EAAAA,GAAAA,SAElB,CACIf,IAAK,YACLG,KAAM,cACND,QAASJ,EACTvD,KAAM,SACN8D,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,UACdT,QAAS,CAAE/D,KAAM,aACjB0D,MAAO,SAEX,CACID,IAAK,aACLG,KAAM,uCACND,QAASJ,EACTvD,KAAM,UACN8D,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,WACdT,QAAS,CAAE/D,KAAM,UACjB0D,MAAO,SAEX,CACID,IAAK,oBACLG,KAAM,iDACND,QAASJ,EACTM,YAAY,iNAMZ7D,KAAM,yBACN8D,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,kBACdd,MAAO,QACPK,QAAS,CACL/D,KAAM,QACNK,IAAK,EACLC,IAAK,IACLsE,KAAM,KAGd,CACInB,IAAK,cACLG,KAAM,6CACND,QAASJ,EACTO,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,YACdxE,KAAM,SACN+D,QAAS,CAAE/D,KAAM,WACjB0D,MAAO,UAEXmB,EAAAA,EAAAA,IAAU,CACNpB,IAAK,gBACLqB,OAAQ,QACRnB,QAAS,CAAC,OACVW,aAAcE,EAAAA,GAAAA,kBAEfO,EAAAA,EAAAA,IAAe,QAAS,CAAC,QAzOJ,CA0OxB,CACItB,IAAK,SACLC,MAAO,gBACP1D,KAAM,yBACN2D,QAASJ,EACTK,KAAM,qDACNC,YAAY,yPAMZC,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,QAElB,CACIf,IAAK,eACLG,KAAM,yBACND,QAASJ,EACTvD,KAAM,UACN8D,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,aACdT,QAAS,CAAE/D,KAAM,UACjB0D,MAAO,UAEX,CACID,IAAK,cACLE,QAAS,CAAC,OACVC,KAAM,wJACN5D,KAAM,WACN8D,UAAU,EACVJ,MAAO,UAEX,CACID,IAAK,YACLG,KAAM,sBACND,QAASJ,EACTvD,KAAM,SACN8D,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,UACdd,MAAO,SACPK,QAAS,CACL/D,KAAM,QACNgF,KAAM,KACN3E,IAAK,EACLC,IAAK,KAGb,CACImD,IAAK,aACLG,KAAM,kCACN5D,KAAM,6BACN2D,QAASJ,EACTO,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,WACdd,MAAO,SACPK,QAAS,CAAE/D,KAAM,mBAErB,CACIyD,IAAK,mBACLG,KAAM,8BACND,QAASJ,EACTvD,KAAM,SACN8D,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,iBACdd,MAAO,SACPK,QAAS,CAAE/D,KAAM,cAErB,CACIyD,IAAK,mBACLG,KAAM,yCACND,QAASJ,EACTvD,KAAM,6BACN8D,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,iBACdd,MAAO,SACPK,QAAS,CAAE/D,KAAM,mBAErB,CACIyD,IAAK,mBACLE,QAAS,CAAC,MAAO,OACjBD,MAAO,SACPE,KAAM,+BACN5D,KAAM,UACN8D,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,iBACdT,QAAS,CAAE/D,KAAM,WAErB,CACIyD,IAAK,aACLE,QAAS,CAAC,MAAO,OACjBD,MAAO,SACPE,KAAM,+IACN5D,KAAM,SACN8D,UAAU,EACVC,QAAS,CACL/D,KAAM,UACNiE,QAAS,CAAC,IAAK,aAAc,IAAK,aAAzB,yBAAoEC,KACzE,SAAAe,GAAM,MAAK,CACPb,MAAOa,EACP9B,MAAO8B,QAKvB,CACIxB,IAAK,oBACLE,QAAS,CAAC,MAAO,OACjBD,MAAO,SACPE,KAAM,mCACN5D,KAAM,SACN8D,UAAU,EACVQ,cAAe,GACfP,QAAS,CACL/D,KAAM,QACNgF,KAAM,KACN3E,KAAM,GACNC,IAAK,OAGV4E,EAAAA,EAAAA,IAAU,CACTvB,QAASJ,EACT4B,QAAQ,EACRC,SAAUZ,EAAAA,GAAAA,YACVa,SAAUb,EAAAA,GAAAA,eAEXc,EAAAA,EAAAA,IAAK,CAAE3B,QAASJ,IAxWK,EAyWxBd,EAAAA,EAAAA,IAAc,CACVkB,QAAS,CAAC,MAAO,UACjBW,aAAcE,EAAAA,GAAAA,gBAElB,CACIf,IAAK,UACLE,QAAS,CAAC,OACVC,KAAM,iFACN5D,KAAM,UACN8D,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,QACdT,QAAS,CAAE/D,KAAM,UACjB0D,MAAO,iBAEX,CACID,IAAK,YACLE,QAAS,CAAC,MAAO,UACjBC,KAAM,kEACN5D,KAAM,UACN8D,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,UACdT,QAAS,CAAE/D,KAAM,UACjB0D,MAAO,iBAEX,CACID,IAAK,eACLE,QAAS,CAAC,OACVD,MAAO,gBACPE,KAAK,yDACL5D,KAAM,yBACN8D,UAAU,GAEd,CACIL,IAAK,cACLE,QAAS,CAAC,OACVD,MAAO,gBACPE,KAAK,wDACL5D,KAAM,yBACN8D,UAAU,GAEd,CACIL,IAAK,eACLE,QAAS,CAAC,MAAO,UACjBD,MAAO,gBACPE,KAAK,yDACL5D,KAAM,yBACN8D,UAAU,GAEd,CACIL,IAAK,UACLE,QAAS,CAAC,MAAO,UACjBD,MAAO,gBACPE,KAAK,oDACL5D,KAAM,yBACN8D,UAAU,GAEd,CACIL,IAAK,UACLE,QAAS,CAAC,MAAO,UACjBD,MAAO,gBACPE,KAAK,uBACL5D,KAAM,WACN8D,UAAU,GAEd,CACIL,IAAK,eACLC,MAAO,gBACPC,QAAS,CAAC,OACVC,KAAK,6EACL5D,KAAK,oBACL8D,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,oBACdT,QAAS,CACL/D,KAAM,UACNiE,QAAS,CACL,CACIG,MAAO,QACPjB,OAAO,GAEX,CACIiB,MAAO,IACPjB,MAAO,KAEX,CACIiB,MAAO,IACPjB,MAAO,QAKvB,CACIM,IAAK,cACLE,QAAS,CAAC,OACVC,KAAM,6DACN5D,KAAM,UACN8D,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,YACdT,QAAS,CAAE/D,KAAM,UACjB0D,MAAO,iBAEX,CACID,IAAK,eACLE,QAAS,CAAC,MAAO,UACjBD,MAAO,gBACPE,KAAK,uBACL5D,KAAM,WACN8D,UAAU,GAEd,CACIL,IAAK,kBACLE,QAAS,CAAC,OACVD,MAAO,gBACPE,KAAM,4BACN5D,KAAM,UACN8D,UAAU,EACVC,QAAS,CAAE/D,KAAM,UACjBsE,aAAcE,EAAAA,GAAAA,iBAElB,CACIf,IAAK,gBACLE,QAAS,CAAC,OACVD,MAAO,gBACPI,UAAU,EACVQ,aAAcE,EAAAA,GAAAA,cACdZ,KAAK,oDACL5D,KAAM,SACN+D,QAAS,CACL/D,KAAM,UACNgE,UAAU,EACVC,QAAS,CACL,IACA,IACA,WACA,MACA,YACA,QACA,eACA,SACA,cACA,OACA,SACFC,KAAI,SAAAC,GAAC,MAAK,CACRC,MAAOD,EACPhB,MAAOgB,QAInB,CACIV,IAAK,UACLE,QAAS,CAAC,MAAO,UACjB3D,KAAM,WACN4D,KAAK,4BACLF,MAAO,UACPI,UAAU,EACVC,QAAS,CACL/D,KAAM,QACNwD,OAAO+B,EAAAA,EAAAA,IAAgB,CAAC,MAAO,WAC/BC,cAAc,EACdC,SAAU,aACVC,cAAc,EACdC,aAAc,SAACC,EAAO3E,GAAR,gBACA2E,EADA,MACW3E,EAAO4E,OADlB,KAC6B5E,EAAO6E,WAClDtB,SAAU,CACNqB,OAAQ,OACRC,UAAW,SACXC,SAAS,EACTC,WAAY,EACZC,WAAY,EACZC,UAAW,IACXC,WAAY,GACZC,aAAc,EACdC,WAAY,GACZC,YAAa,SACbC,cAAe,gBACfC,cAAe,OACfC,QAAS,SAAC7H,GACN8H,QAAQC,IAAIC,KAAKC,UAAUjI,EAAM,KAAM,UAE3CkI,QAAS,CACL,CACIC,GAAI,QACJC,MAAO,CACHC,eAAgB,qBAChBC,YAAa,UAOlCC,EAAAA,EAAAA,IAAiB,CAAC,OAAQ3C,EAAAA,GAAU,iBAG9B4C,GAASC,EAAAA,EAAAA,IAAgB7D,I,yfC1jBtC,IAEa8D,EAAwB,gBA4B7BC,EA3BJC,EAAAA,EAAAA,KACAC,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,cACAC,EAAAA,EAAAA,WACA7G,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,aAAAA,EAAAA,EACA4G,OAAAA,OAAAA,IAAAA,EAAS,QAWHzC,GAAS0C,EAAAA,EAAAA,IAAqBJ,EAAOE,GAErCG,EAAYC,EAAAA,GAAkBH,GAE9BI,EAAW,cAAeP,GAAQQ,EAAAA,EAAAA,IAAYR,GAASA,EACvD9I,EAAO,CAAEuJ,MAAO,EAAGC,MAAO,GAC1BC,EAAO,CAAEC,MAAO,EAAGC,MAAO,GAE1BC,EAA4B,iBAAbC,UAAyC,QAAjBA,SAASC,IAElDC,EAA6BZ,EAAUa,MAAMC,OAC7CC,EAAmCf,EAAUgB,SAASF,OAAAA,MAE7C,MAATpB,GACAD,EAAY,wBAAM,CAAE/L,EAAAA,OAAAA,EAAGwM,EAASlJ,IAAAA,EAAM,EAAGrD,EAAG,IAE5CkD,EAAKwJ,MAAQrH,GAA8B,UAAlB4G,EAA4B,GAAK,GAC1DU,EAAKE,OAASxH,EAAWC,IAAkC,UAAlB2G,EAA4B,GAAK,GAGtEmB,EADkB,UAAlBnB,EACeI,EAAUgB,SAASnJ,IAEnBmI,EAAUgB,SAASjJ,OAGjB,IAAjBmB,EACA0H,EAAYZ,EAAUa,MAAMC,OAET,UAAlBlB,GAA6B1G,EAAe,GAC1B,WAAlB0G,GAA8B1G,EAAe,GAE9C0H,EAAYZ,EAAUa,MAAMJ,EAAQ,OAAS,SAC7CM,EAAef,EAAUgB,SAASF,SAEf,UAAlBlB,GAA6B1G,EAAe,GAC1B,WAAlB0G,GAA8B1G,EAAe,KAE9C0H,EAAYZ,EAAUa,MAAMJ,EAAQ,QAAU,QAC9CM,EAAef,EAAUgB,SAASF,UAGtCrB,EAAY,wBAAM,CAAE/L,EAAG,EAAGC,EAAAA,OAAAA,EAAGuM,EAASlJ,IAAAA,EAAM,IAE5CH,EAAKuJ,MAAQpH,GAA8B,UAAlB4G,EAA4B,GAAK,GAC1DU,EAAKC,OAASvH,EAAWC,IAAkC,UAAlB2G,EAA4B,GAAK,GAGtEgB,EADkB,UAAlBhB,EACYI,EAAUa,MAAM7I,KAEhBgI,EAAUa,MAAM/I,OAY7B,CACHmJ,MATU5D,EAAOjB,KAAI,SAACf,GAAAA,OAAAA,EAAAA,CACtBM,IAAKN,aAAiB6F,KAAAA,GAAU7F,EAAM8F,UAAAA,GAAiB9F,EACvDA,MAAAA,GACGoE,EAAUpE,GACVxE,EACAyJ,MAKHM,UAAAA,EACAG,aAAAA,IAIKK,EAAe,SACxBhJ,EACAuH,GAAAA,QAAAA,IAEWvH,GAA4C,mBAAXA,EAAuB,OAAOA,EAAAA,GAEvD,SAAfuH,EAAMzH,KAAiB,CAAC,IAClBmJ,GAAYC,EAAAA,EAAAA,IAAWlJ,GAAAA,OAErB,SAACpB,GAAAA,OAAWqK,EAAUrK,aAAakK,KAAOlK,EAAI,IAAIkK,KAAKlK,KAAAA,OAG5DuK,EAAAA,EAAAA,IAASnJ,IAGPoJ,EAAmB,gBAxGZnG,EAyGhB3D,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OACAgI,EAAAA,EAAAA,MACAD,EAAAA,EAAAA,KACQ+B,EAAAA,EAARpE,OASMA,GAtHUhC,EAqHmBoG,GArHcC,MAAMC,QAAQtG,GAqHjBoG,OAAAA,KACjB1B,EAAAA,EAAAA,IAAqBJ,EAAO8B,IACnDvB,EAAW,cAAeP,GAAQQ,EAAAA,EAAAA,IAAYR,GAASA,EAEvDiC,EACO,MAATlC,EACMrC,EAAOjB,KAAI,SAACf,GAAAA,IAAAA,EAAAA,EAAAA,MAAkB,CAC1BM,IAAKN,aAAiB6F,KAAAA,GAAU7F,EAAM8F,UAAAA,GAAiB9F,EACvDtH,GAAAA,OAAAA,EAAImM,EAAS7E,IAAAA,EAAU,EACvBnH,GAAAA,OAAAA,EAAIgM,EAAS7E,IAAAA,EAAU,EACvBrH,GAAI,EACJG,GAAIwD,MAER0F,EAAOjB,KAAI,SAACf,GAAAA,IAAAA,EAAAA,EAAAA,MAAkB,CAC1BM,IAAKN,aAAiB6F,KAAAA,GAAU7F,EAAM8F,UAAAA,GAAiB9F,EACvDtH,GAAI,EACJG,GAAIwD,EACJ1D,GAAAA,OAAAA,EAAIkM,EAAS7E,IAAAA,EAAU,EACvBlH,GAAAA,OAAAA,EAAI+L,EAAS7E,IAAAA,EAAU,aAG9BuG,GChGLC,GAAmBC,EAAAA,EAAAA,OA1CR,kBACNC,EAAAA,EAAP1G,MACAjD,EAAAA,EAAAA,OACAgI,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,MACA1B,EAAAA,EAAAA,QACAoC,EAAAA,EAAAA,aACAiB,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,cAEMjI,GAAQkI,EAAAA,EAAAA,MAER7G,EAAAA,OAAAA,EAAAA,MAAQjD,OAAAA,EAAAA,EAAS2J,IAAAA,EAAWA,EAE5BrG,GAAQyG,EAAAA,EAAAA,UAAQ,eACZjD,EAAQ,CAAEkD,QAASH,EAAcG,SAAAA,OAElCzD,EAIE,CACHO,MAAAA,EAAAA,GAAYA,EAAAA,CAAOmD,OAAQ,YAC3B1D,QAAS,SAAC2D,GAAAA,OAAqD3D,EAAQ2D,EAAOjH,KALvE,CAAE6D,MAAAA,KAOd,CAAC+C,EAAcG,QAASzD,EAAStD,IAAAA,OAGhCkH,EAAAA,EAAAA,MAACC,EAAAA,EAAAA,EAASC,EAAAA,CAAEC,UAAWT,EAAcS,WAAehH,EAAAA,CAAAA,SAAAA,EAChDiH,EAAAA,EAAAA,KAAAA,OAAAA,CAAM5O,GAAI,EAAGG,GAAIkM,EAAOpM,GAAI,EAAGG,GAAIkM,EAAOnB,MAAOlF,EAAM0F,KAAKuB,MAAMpK,QAClE8L,EAAAA,EAAAA,KAACH,EAAAA,EAAAA,KAASlC,CACNsC,iBAAkB7B,EAClBiB,WAAYA,EACZU,UAAWT,EAAcY,cACzB3D,MAAOlF,EAAM0F,KAAKuB,MAAMX,KAAAA,SAEvBjF,WCwHXyH,GAAehB,EAAAA,EAAAA,OA1JR,gBACTpC,EAAAA,EAAAA,KACAC,EAAAA,EAAAA,MAAAA,EAAAA,EACAjM,EAAAA,OAAAA,IAAAA,EAAI,QACJC,EAAAA,OAAAA,IAAAA,EAAI,IACJwD,EAAAA,EAAAA,OACAyI,EAAAA,EAAAA,cACAC,EAAAA,EAAAA,WAAAA,EAAAA,EACA7G,SAAAA,OAAAA,IAAAA,EAAW,QACXC,YAAAA,OAAAA,IAAAA,EAAc,QACdC,aAAAA,OAAAA,IAAAA,EAAe,IACfd,EAAAA,EAAAA,OAAAA,EAAAA,EACA2K,WAAAA,OAAAA,IAAAA,EAAaC,EAAAA,EACb7J,EAAAA,EAAAA,OAAAA,EAAAA,EACAI,eAAAA,OAAAA,IAAAA,EAAiB,YACjBH,aAAAA,OAAAA,IAAAA,EAAe,IACfuF,EAAAA,EAAAA,QACAsE,EAAAA,EAAAA,WASMjJ,GAAQkI,EAAAA,EAAAA,MAERgB,GAAcf,EAAAA,EAAAA,UAAQ,kBAAMf,EAAahJ,EAAQuH,KAAQ,CAACvH,EAAQuH,IAAAA,EAE7BH,EAAsB,CAC7DE,KAAAA,EACAC,MAAAA,EACAC,cAAAA,EACAC,WAAAA,EACA7G,SAAAA,EACAC,YAAAA,EACAC,aAAAA,IAPI+H,EAAAA,EAAAA,MAAOL,EAAAA,EAAAA,UAAWG,EAAAA,EAAAA,aAUtBoC,EAAa,iBACbhK,EAAsB,CAAC,IAInB6I,EAHAoB,EAAU,EACVC,EAAU,EACVC,EAAiB,EAGR,MAAT5D,GACA4D,GAAkB,GAClBF,EAAUhK,EACa,UAAnBG,GACAyI,EAAa,QACbqB,EAAUlM,GACgB,WAAnBoC,GACPyI,EAAa,SACbqB,EAAUlM,EAAS,GACO,QAAnBoC,IACPyI,EAAa,SAGjBqB,EAAUjK,EACa,UAAnBG,EACAyI,EAAa,QACa,WAAnBzI,GACPyI,EAAa,SACboB,EAAUjM,EAAS,GACO,QAAnBoC,IACPyI,EAAa,MACboB,EAAUjM,IAIlBgM,GACIR,EAAAA,EAAAA,KAAAA,OAAAA,CACID,UAAAA,aAAwBU,EAAAA,KAAYC,EAAAA,YAAmBC,EAAAA,IACvDtB,WAAYA,EACZ9C,MAAAA,EAAAA,CACI0D,iBAAkB,WACf5I,EAAM0F,KAAKvG,OAAOmH,MAAAA,SAGxBnH,IAAAA,IAAAA,GAK6BoK,EAAAA,EAAAA,MAAlCC,EAAAA,EAAAA,QAAiBC,EAAAA,EAARC,OAEXzB,GAAgB0B,EAAAA,EAAAA,WAAU,CAC5BjB,UAAAA,aAAwBhP,EAAAA,IAAKC,EAAAA,IAC7BiQ,OAAiB,MAATlE,EAAevI,EAAS,EAChC0M,OAAiB,MAATnE,EAAe,EAAIvI,EAC3BuM,OAAQD,EACRK,WAAYN,IAGVO,GAAaC,EAAAA,EAAAA,eAGjB/C,EAAO,CACLgD,KAAM,SAAAC,GAAA,OAAQC,EAAKxI,KACnByI,QAAS,SAAAF,GAAA,MAAS,CACd9B,QAAS,EACTM,UAAAA,aAAwByB,EAAKzQ,EAAAA,IAAKyQ,EAAKxQ,EAAAA,IACvCkP,cAAAA,aAA4BsB,EAAK5D,MAAAA,IAAS4D,EAAK3D,MAAAA,YAAiBtH,EAAAA,MAEpEiB,KAAM,SAAA+J,GAAA,MAAS,CACX9B,QAAS,EACTM,UAAAA,aAAwByB,EAAKzQ,EAAAA,IAAKyQ,EAAKxQ,EAAAA,IACvCkP,cAAAA,aAA4BsB,EAAK5D,MAAAA,IAAS4D,EAAK3D,MAAAA,YAAiBtH,EAAAA,MAEpEmL,MAAO,SAAAH,GAAA,MAAS,CACZ9B,QAAS,EACTM,UAAAA,aAAwByB,EAAKzQ,EAAAA,IAAKyQ,EAAKxQ,EAAAA,IACvCkP,cAAAA,aAA4BsB,EAAK5D,MAAAA,IAAS4D,EAAK3D,MAAAA,YAAiBtH,EAAAA,MAEpEoL,OAAQ,SAAAJ,GAAA,MAAS,CACb9B,QAAS,EACTM,UAAAA,aAAwByB,EAAKzQ,EAAAA,IAAKyQ,EAAKxQ,EAAAA,IACvCkP,cAAAA,aAA4BsB,EAAK5D,MAAAA,IAAS4D,EAAK3D,MAAAA,YAAiBtH,EAAAA,MAEpEqL,MAAO,CACHnC,QAAS,GAEbsB,OAAQD,EACRK,WAAYN,IAAAA,OAIZjB,EAAAA,EAAAA,MAACC,EAAAA,EAAAA,EAASC,CAAEC,UAAWT,EAAcS,UAAAA,cAAwBO,EAAAA,SAAAA,CACxDc,GAAW,SAACS,EAAiBL,EAAMM,EAAQC,GAAAA,OACjCC,EAAAA,cAAoB5B,EAAAA,EAAAA,CACvB2B,UAAAA,EACAtM,OAAQ8K,EACR0B,OAAQ1L,EACR6H,aAAAA,EACAiB,WAAYpB,EACZqB,cAAeuC,GACZL,EACCxF,EAAU,CAAEA,QAAAA,GAAY,SAGpCgE,EAAAA,EAAAA,KAACH,EAAAA,EAAAA,KAAS3L,CACNqI,MAAOlF,EAAM0F,KAAKmF,OAAOhO,KACzB9C,GAAI,EACJG,GAAI+N,EAAc2B,OAClB5P,GAAI,EACJG,GAAI8N,EAAc4B,SAErBV,QC5JA2B,EAAgB,CACzBlF,cAAemF,IAAAA,MAAgB,CAAC,SAAU,UAC1ClF,WAAYkF,IAAAA,UAAoB,CAC5BA,IAAAA,OACAA,IAAAA,QACIA,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,OAAkBA,IAAAA,WAAqB7D,SAElF6D,IAAAA,SAEJ/L,SAAU+L,IAAAA,OACV9L,YAAa8L,IAAAA,OACb7L,aAAc6L,IAAAA,OACd3M,OAAQ2M,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,SAC7ChC,WAAYgC,IAAAA,KACZ5L,OAAQ4L,IAAAA,KACRxL,eAAgBwL,IAAAA,MAAgB,CAAC,QAAS,SAAU,QACpD3L,aAAc2L,IAAAA,OACd9B,WAAY8B,IAAAA,MAGHC,EAAeD,IAAAA,MAAgBD,GAE/BG,EAAY,CAAC,MAAO,QAAS,SAAU,QClBvCC,GAAOpD,EAAAA,EAAAA,OAChB,gBACI7J,EAAAA,EAAAA,OACAK,EAAAA,EAAAA,OACAZ,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OAeM6F,EAAO,CAAE3F,IAAAA,EAdfA,IAcoBC,MAAAA,EAbpBA,MAa2BC,OAAAA,EAZ3BA,OAYmCC,KAAAA,EAXnCA,MAAAA,OAcI2K,EAAAA,EAAAA,KAAAA,EAAAA,SAAAA,CAAAA,SACKsC,EAAU7I,KAAI,gBACLsD,EAAOlC,EAAK0C,GAAAA,IAIbR,EAAM,OAAO,SAEZyF,EAAuB,QAAbjF,GAAmC,WAAbA,EAAAA,OAKlCyC,EAAAA,EAAAA,KAACyC,EAAAA,EAAAA,GAEO1F,EAAAA,CACJA,KAAMyF,EAAU,IAAM,IACtBzR,EAAgB,UAAbwM,EAAuBxI,EAAQ,EAClC/D,EAAgB,WAAbuM,EAAwBvI,EAAS,EACpCgI,MAAOwF,EAAUlN,EAASK,EAC1BnB,OAAQgO,EAAUzN,EAAQC,EAC1BiI,cAXS,QAAbM,GAAmC,SAAbA,EAAsB,SAAW,UAI9CA,WCvCpBmF,GAAWvD,EAAAA,EAAAA,OACpB,gBACIG,EAAAA,EAAAA,cAUMjI,GAAQkI,EAAAA,EAAAA,MAAAA,OAEPS,EAAAA,EAAAA,KAACH,EAAAA,EAAAA,KAAS3L,EAAAA,GAASoL,EAAoBjI,EAAMsL,KAAKzO,UCZpD0O,GAAYzD,EAAAA,EAAAA,OAAK,gBAAGF,EAAAA,EAAAA,MAAAA,GACa2B,EAAAA,EAAAA,MAAlCC,EAAAA,EAAAA,QAAiBC,EAAAA,EAARC,OAEXK,GAAaC,EAAAA,EAAAA,eACfpC,EACA,CACIqC,KAAM,mBAAQpN,EAAK8E,KACnByI,QAAS,kBAAS,CACdhC,QAAS,EACTrO,GAAI8C,EAAK9C,GACTG,GAAI2C,EAAK3C,GACTF,GAAI6C,EAAK7C,GACTG,GAAI0C,EAAK1C,KAEbgG,KAAM,kBAAS,CACXiI,QAAS,EACTrO,GAAI8C,EAAK9C,GACTG,GAAI2C,EAAK3C,GACTF,GAAI6C,EAAK7C,GACTG,GAAI0C,EAAK1C,KAEbkQ,MAAO,kBAAS,CACZjC,QAAS,EACTrO,GAAI8C,EAAK9C,GACTG,GAAI2C,EAAK3C,GACTF,GAAI6C,EAAK7C,GACTG,GAAI0C,EAAK1C,KAEbmQ,OAAQ,kBAAS,CACblC,QAAS,EACTrO,GAAI8C,EAAK9C,GACTG,GAAI2C,EAAK3C,GACTF,GAAI6C,EAAK7C,GACTG,GAAI0C,EAAK1C,KAEboQ,MAAO,CACHnC,QAAS,GAEbsB,OAAQD,EACRK,WAAYN,IAAAA,OAKhBb,EAAAA,EAAAA,KAAAA,IAAAA,CAAAA,SACKoB,GAAW,SAAC9B,EAAepL,GAAAA,OACxB2O,EAAAA,EAAAA,eAACH,EAAAA,EAAAA,GAAaxO,EAAAA,CAAM8E,IAAK9E,EAAK8E,IAAKsG,cAAeA,aC/CrDwD,GAAO3D,EAAAA,EAAAA,OAChB,gBACIpK,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OACAM,EAAAA,EAAAA,OACAK,EAAAA,EAAAA,OACAoN,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,QASMC,GAASzD,EAAAA,EAAAA,UAAQ,mBACdlK,GAEEuJ,EAAiB,CACpB9J,MAAAA,EACAC,OAAAA,EACAgI,MAAO1H,EACPyH,KAAM,IACNrC,OAAQqI,MAEb,CAACzN,EAAQyN,EAAShO,EAAOC,IAEtBkO,GAAS1D,EAAAA,EAAAA,UAAQ,mBACd7J,GAEEkJ,EAAiB,CACpB9J,MAAAA,EACAC,OAAAA,EACAgI,MAAOrH,EACPoH,KAAM,IACNrC,OAAQsI,MAEb,CAAChO,EAAQD,EAAOY,EAAQqN,IAAAA,OAGvBpD,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAAA,SAAAA,CACKqD,IAAUjD,EAAAA,EAAAA,KAAC4C,EAAAA,CAAU3D,MAAOgE,IAC5BC,IAAUlD,EAAAA,EAAAA,KAAC4C,EAAAA,CAAU3D,MAAOiE,UC1ChCC,EAAqB,SAC9BC,EAAAA,GAAAA,IAAAA,EAEIrG,EAAAA,EAAAA,KACAC,EAAAA,EAAAA,MAAAA,EAAAA,EACAjM,EAAAA,OAAAA,IAAAA,EAAI,QACJC,EAAAA,OAAAA,IAAAA,EAAI,IACJwD,EAAAA,EAAAA,OAEAyI,EAAAA,EAAAA,cACAC,EAAAA,EAAAA,WAAAA,EAAAA,EACA7G,SAAAA,OAAAA,IAAAA,EAAW,QACXC,YAAAA,OAAAA,IAAAA,EAAc,QACdC,aAAAA,OAAAA,IAAAA,EAAe,IACP8M,EAAAA,EAAR5N,OAEAe,EAAAA,EAAAA,OAAAA,EAAAA,EACAI,eAAAA,OAAAA,IAAAA,EAAiB,YACjBH,aAAAA,OAAAA,IAAAA,EAAe,IAEfY,EAAAA,EAAAA,MAAAA,EAmBuCwF,EAAsB,CAC7DE,KAAAA,EACAC,MAAAA,EACAC,cAAAA,EACAC,WAAAA,EACA7G,SAAAA,EACAC,YAAAA,EACAC,aAAAA,EACA4G,OAAQ,WARJmB,EAAAA,EAAAA,MAAOL,EAAAA,EAAAA,UAAWG,EAAAA,EAAAA,aAW1BgF,EAAIE,OACJF,EAAItG,UAAU/L,EAAGC,GAEjBoS,EAAInF,UAAYA,EAChBmF,EAAIhF,aAAeA,EACnBgF,EAAIG,MAAUlM,EAAM0F,KAAKuB,MAAMX,KAAK6F,WAAgBnM,EAAM0F,KAAKuB,MAAMX,KAAK6F,WAAAA,IAAgB,IACtFnM,EAAM0F,KAAKuB,MAAMX,KAAK8F,SAAAA,MACpBpM,EAAM0F,KAAKuB,MAAMX,KAAK+F,YAAAA,OAAAA,EAEvBrM,EAAM0F,KAAKmF,OAAOhO,KAAKyP,aAAAA,EAAe,GAAK,IAC5CP,EAAInM,UAAY2M,OAAOvM,EAAM0F,KAAKmF,OAAOhO,KAAKyP,aAC9CP,EAAIS,QAAU,SAEVxM,EAAM0F,KAAKmF,OAAOhO,KAAK4P,SACvBV,EAAIW,YAAc1M,EAAM0F,KAAKmF,OAAOhO,KAAK4P,QAG7CV,EAAIY,YACJZ,EAAItS,OAAO,EAAG,GACdsS,EAAIlS,OAAgB,MAAT6L,EAAevI,EAAS,EAAY,MAATuI,EAAe,EAAIvI,GACzD4O,EAAIU,UAAAA,IAGFrO,EAA4B,mBAAZ4N,EAAyBA,EAAU,SAAC3K,GAAAA,MAAAA,GAAsBA,GAAAA,GAEhF4F,EAAM2F,SAAQ,4BACL5M,EAAM0F,KAAKuB,MAAMpK,KAAKyP,aAAAA,EAAe,GAAK,IAC3CP,EAAInM,UAAY2M,OAAOvM,EAAM0F,KAAKuB,MAAMpK,KAAKyP,aAC7CP,EAAIS,QAAU,SAEVxM,EAAM0F,KAAKuB,MAAMpK,KAAK4P,SACtBV,EAAIW,YAAc1M,EAAM0F,KAAKuB,MAAMpK,KAAK4P,QAG5CV,EAAIY,YACJZ,EAAItS,OAAO0Q,EAAKzQ,EAAGyQ,EAAKxQ,GACxBoS,EAAIlS,OAAOsQ,EAAKzQ,EAAIyQ,EAAK/D,MAAO+D,EAAKxQ,EAAIwQ,EAAK9D,OAC9C0F,EAAIU,UAAAA,IAGFpL,EAAQjD,EAAO+L,EAAK9I,OAE1B0K,EAAIE,OACJF,EAAItG,UAAU0E,EAAKzQ,EAAIyQ,EAAK5D,MAAO4D,EAAKxQ,EAAIwQ,EAAK3D,OACjDuF,EAAInB,QAAOiC,EAAAA,EAAAA,IAAiB3N,IAExBc,EAAM0F,KAAKuB,MAAMX,KAAKwG,OACtBf,EAAIgB,UAAY/M,EAAM0F,KAAKuB,MAAMX,KAAKwG,MAG1Cf,EAAIiB,SAASC,OAAO5L,GAAQ,EAAG,GAC/B0K,EAAImB,kBAAAA,IAGJ/N,EAAsB,CAAC,IACnBiK,EAAU,EACVC,EAAU,EACVC,EAAiB,EACjB1C,EAA6B,SAEpB,MAATlB,GACA4D,GAAkB,GAClBF,EAAUhK,EACa,UAAnBG,GACAqH,EAAY,QACZyC,EAAUlM,GACgB,WAAnBoC,GACPqH,EAAY,SACZyC,EAAUlM,EAAS,GACO,QAAnBoC,IACPqH,EAAY,SAGhByC,EAAUjK,EACa,UAAnBG,EACAqH,EAAY,QACc,WAAnBrH,GACPqH,EAAY,SACZwC,EAAUjM,EAAS,GACO,QAAnBoC,IACPqH,EAAY,MACZwC,EAAUjM,IAIlB4O,EAAItG,UAAU2D,EAASC,GACvB0C,EAAInB,QAAOiC,EAAAA,EAAAA,IAAiBvD,IAC5ByC,EAAIG,MACAlM,EAAM0F,KAAKvG,OAAOmH,KAAK6F,WAAgBnM,EAAM0F,KAAKvG,OAAOmH,KAAK6F,WAAAA,IAAgB,IAC/EnM,EAAM0F,KAAKvG,OAAOmH,KAAK8F,SAAAA,MAAcpM,EAAM0F,KAAKvG,OAAOmH,KAAK+F,WAE3DrM,EAAM0F,KAAKvG,OAAOmH,KAAKwG,OACvBf,EAAIgB,UAAY/M,EAAM0F,KAAKvG,OAAOmH,KAAKwG,MAG3Cf,EAAInF,UAAYA,EAChBmF,EAAIhF,aAAe,SACnBgF,EAAIiB,SAAS7N,EAAQ,EAAG,GAG5B4M,EAAImB,WAGKC,EAAqB,SAC9BpB,EAAAA,GAAAA,IAEI9N,EAAAA,EAAAA,OACAK,EAAAA,EAAAA,OACAZ,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OAEAE,EAAAA,EAAAA,IACAC,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,KAEAgC,EAAAA,EAAAA,MAaEwD,EAAO,CAAE3F,IAAAA,EAAKC,MAAAA,EAAOC,OAAAA,EAAQC,KAAAA,GAEnCiN,EAAU2B,SAAQ,gBACRlH,EAAOlC,EAAK0C,GAAAA,IAIbR,EAAM,OAAO,SAEZyF,EAAuB,QAAbjF,GAAmC,WAAbA,EAChCN,EAA6B,QAAbM,GAAmC,SAAbA,EAAsB,SAAW,QACvEP,EAAQwF,EAAUlN,EAASK,EAC3BF,EAASgJ,EAAa1B,EAAKtH,OAAQuH,GAEzCmG,EAAmBC,EAAAA,EAAAA,GACZrG,EAAAA,CACHA,KAAMyF,EAAU,IAAM,IACtBzR,EAAgB,UAAbwM,EAAuBxI,EAAQ,EAClC/D,EAAgB,WAAbuM,EAAwBvI,EAAS,EACpCgI,MAAAA,EACAvH,OAAAA,EACAjB,OAAQgO,EAAUzN,EAAQC,EAC1BiI,cAAAA,EACA5F,MAAAA,SAKCoN,EAA0B,SACnCrB,EAAAA,GAAAA,IAEIrO,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OACAgI,EAAAA,EAAAA,MACAD,EAAAA,EAAAA,KACArC,EAAAA,EAAAA,OASUmE,EAAiB,CAAE9J,MAAAA,EAAOC,OAAAA,EAAQgI,MAAAA,EAAOD,KAAAA,EAAMrC,OAAAA,IAEvDuJ,SAAQ,YACVb,EAAIY,YACJZ,EAAItS,OAAOoD,EAAK9C,GAAI8C,EAAK7C,IACzB+R,EAAIlS,OAAOgD,EAAK3C,GAAI2C,EAAK1C,IACzB4R,EAAIU,c,qRClNuB,oNCvBtBY,EAWT,CACAlQ,OAAQ,IACRmQ,UAAW,GACXtJ,UAAW,MACXuJ,aAAc,QACdvO,SAAU,EACVwO,YAAa,EACbC,aAAAA,EACAC,WAAY,SAACrM,GAAAA,MAAAA,GAAqBA,GAClCsM,WAAY,QACZC,YAAa,GVTXC,EAAc,CAChBhQ,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,GAGG8P,EAAoB,gBAVZC,EAWjB/J,EAAAA,EAAAA,UACAM,EAAAA,EAAAA,aACS0J,EAAAA,EAATC,QACAC,EAAAA,EAAAA,UACA9J,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,WAAAA,GAGwB,iBAAb2J,IAlBK,iBADCD,EAmB6BC,IAlBjBtG,MAAMC,QAAQoG,IAAkB,OAATA,GAAAA,MAmB1C,IAAIlT,MAAM,gEAGdoT,EACkB,iBAAbD,EACD,CACInQ,IAAKmQ,EACLlQ,MAAOkQ,EACPjQ,OAAQiQ,EACRhQ,KAAMgQ,GAAAA,EAAAA,GAGHH,EACAG,GAGXG,EAAoBF,EAAQjQ,KAAOiQ,EAAQnQ,MAC3CsQ,EAAkBH,EAAQpQ,IAAMoQ,EAAQlQ,OAC1CL,EAAQ0G,EAAY+J,EACpBxQ,EAAS0G,EAAa+J,EACpBC,GAAWH,EAAY,GAAK5J,EAAAA,MAChB,QAAdN,EACAtG,EAAQ0G,EAAY8J,EAAYG,EAAUF,EACrB,WAAdnK,IACPrG,EAAS0G,EAAa6J,EAAYG,EAAUD,GAGzC,CAAE1Q,MAAAA,EAAOC,OAAAA,EAAQsQ,QAAAA,IAGfK,EAA4B,gBACrCvK,EAAAA,EAAAA,OACAG,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,WACAoK,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBACA9Q,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OAKIjE,EAAIwK,EACJvK,EAAIwK,EAAAA,OAEAJ,GAAAA,IACC,MACDrK,IAAM6U,EAAiB7Q,GAAS,YAG/B,YACDhE,GAAK6U,EAAiB7Q,EAAAA,MAAAA,IAGrB,QACDhE,GAAK6U,EAAiB7Q,EACtB/D,IAAM6U,EAAkB7Q,GAAU,YAGjC,eACDjE,GAAK6U,EAAiB7Q,EACtB/D,GAAK6U,EAAkB7Q,EAAAA,MAAAA,IAGtB,SACDjE,IAAM6U,EAAiB7Q,GAAS,EAChC/D,GAAK6U,EAAkB7Q,EAAAA,MAAAA,IAGtB,cACDhE,GAAK6U,EAAkB7Q,EAAAA,MAAAA,IAGtB,OACDhE,IAAM6U,EAAkB7Q,GAAU,YAGjC,SACDjE,IAAM6U,EAAiB7Q,GAAS,EAChC/D,IAAM6U,EAAkB7Q,GAAU,QAInC,CAAEjE,EAAAA,EAAGC,EAAAA,IAGH8U,EAAoB,gBAWzBC,EACAC,EAEAC,EACAC,EACAC,EACAC,EAhBJ/K,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,QACAM,EAAAA,EAAAA,WACAyK,EAAAA,EAAAA,cACAtR,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OAAAA,OAaQqG,GAAAA,IACC,gBACD0K,EAAU,EACVC,GAAWhR,EAAS4G,GAAc,EAElCsK,EAASlR,EAAS,EAClBoR,EAAiB,UACb9K,GACA2K,EAASlR,EACToR,EAAc,QAEdF,EAASrK,EAAayK,EACtBF,EAAc,mBAIjB,gBACDJ,EAAUhR,EAAQ6G,EAClBoK,GAAWhR,EAAS4G,GAAc,EAElCsK,EAASlR,EAAS,EAClBoR,EAAiB,UACb9K,GACA2K,EAAS,EACTE,EAAc,UAEdF,EAASlR,EAAQ6G,EAAayK,EAC9BF,EAAc,iBAIjB,gBACDJ,GAAWhR,EAAQ6G,GAAc,EACjCoK,EAAU,EAEVC,EAASlR,EAAQ,EAEjBoR,EAAc,SACV7K,GACA4K,EAASlR,EACToR,EAAiB,eAEjBF,EAAStK,EAAayK,EACtBD,EAAiB,8BAIpB,gBACDL,GAAWhR,EAAQ6G,GAAc,EACjCoK,EAAUhR,EAAS4G,EAEnBqK,EAASlR,EAAQ,EACjBoR,EAAc,SACV7K,GACA4K,EAAS,EACTE,EAAiB,qBAEjBF,EAASlR,EAAS4G,EAAayK,EAC/BD,EAAiB,oBAKtB,CACHL,QAAAA,EACAC,QAAAA,EACAC,OAAAA,EACAC,OAAAA,EACAC,YAAAA,EACAC,eAAAA,IAIKE,EAAgC,gBA2BrC5L,EA1BJsC,EAAAA,EAAAA,MACAsB,EAAAA,EAAAA,MAAAA,EAAAA,EACA9J,OAAAA,OAAAA,IAAAA,EAASkQ,EAA+BlQ,OAAAA,EAAAA,EAAAA,EACxCmQ,UAAAA,OAAAA,IAAAA,EAAYD,EAA+BC,UAAAA,EAAAA,EAAAA,EAC3CtJ,UAAAA,OAAAA,IAAAA,EAAYqJ,EAA+BrJ,UAAAA,EAAAA,EAAAA,EAC3CuJ,aAAAA,OAAAA,IAAAA,EAAeF,EAA+BE,aAAAA,EAAAA,EAAAA,EAC9CvO,SAAAA,OAAAA,IAAAA,EAAWqO,EAA+BrO,SAAAA,EAAAA,EAAAA,EAC1CwO,YAAAA,OAAAA,IAAAA,EAAcH,EAA+BG,YAAAA,EAAAA,EAAAA,EAC7CC,YAAAA,OAAAA,IAAAA,EAAcJ,EAA+BI,YAAAA,EAAAA,EAAAA,EAC7CC,WAAAA,OAAAA,IAAAA,EAAaL,EAA+BK,WAAAA,EAC5CwB,EAAAA,EAAAA,MAAAA,EAAAA,EACAvB,WAAAA,OAAAA,IAAAA,EAAaN,EAA+BM,WAAAA,EAAAA,EAAAA,EAC5CC,YAAAA,OAAAA,IAAAA,EAAcP,EAA+BO,YAAAA,EAGvC/C,EAAuB,WAAd7G,EAAyB,UAAI2B,EAAMkF,UAAUnM,UAAYiH,EAAMkF,SAExEsE,GAAgBC,EAAAA,EAAAA,KAAcvE,OAAOA,GACrB,IAAlBA,EAAO1N,OAEPgS,EAAchO,MAAM,CAAC,EAAGhE,IACC,IAAlB0N,EAAO1N,QAEdgS,EAAchO,MAAM,CAAC,EAAGhE,EAAS,EAAGA,IAMpCkG,EAFA,eAAgBsC,EAAAA,CAENkF,EAAO,WAAOlF,EAAM0J,aAAAA,CAAcxE,EAAO,KAG1CnD,MAAMC,QAAQV,GAASA,EAAStB,EAAcsB,MAAMA,GAAAA,IAmB7DvJ,EACAC,EAOA2R,EACAC,EACAC,EACAC,EAQIzV,EACAG,EAEAqM,EAEAkJ,EAoDA3V,EACAG,EAEAqM,EACAoJ,EAhGFC,GAAaC,EAAAA,EAAAA,IAAsClK,EAAO,IAE1DuD,GAAc4G,EAAAA,EAAAA,IAAkBpC,GAEhCqC,EAUA,GAMFC,EAAa,EACbC,EAAa,EAQC,QAAdjM,GACAtG,EAAQP,EACRQ,EAAS2P,EAET2C,EAAa,EASbT,EAAgB,EAEZF,EADe,UAAf3B,EACS,EACa,WAAfA,EACExQ,EAAS,EAETA,EAGQ,WAAjBoQ,GACAvT,GAAMgF,EACN7E,EAAKsT,EAAcH,EAAY,EAE/B9G,GAASxH,EAAWwO,EACpBkC,EAAoB,aAEpBH,EAASjC,EAAYM,EACrB6B,EAAqB,YAErBzV,EAAKyT,EAAc,EAAIH,EAGvB9G,GAFArM,EAAKmT,EAAYtO,GAEJwO,EACbkC,EAAoB,UAEpBH,GAAU3B,EACV6B,EAAqB,cAGzBpM,EAAOuJ,SAAQ,gBACLlT,EAAIyV,EAAc9N,GAExB0O,EAAcG,KAAK,CACfnW,GAAIL,EACJM,GAAAA,EACAE,GAAIR,EACJS,GAAAA,EACAmM,KAAM4C,EAAY7H,GAClBkF,MAAO7M,EACP8M,MAAAA,EACAmJ,oBA3CoB,SA4CpBD,kBAAAA,SAIRhS,EAAQ4P,EACR3P,EAASR,EAET6S,EAAa,EASbR,GAAiB,GAEbD,EADe,UAAf5B,EACSxQ,EACa,WAAfwQ,EACExQ,EAAS,EAET,EAGQ,WAAjBoQ,GAEArT,EAAKuT,EAAcH,EAAY,EAE/B/G,GAHAxM,GAAMiF,GAGOwO,EACbmC,EAAsB,MAEtBL,EAAShC,EAAYM,EACrB6B,EAAqB,YAErB1V,EAAK0T,EAAc,EAAIH,EAGvB/G,GAFArM,EAAKoT,EAAYtO,GAEJwO,EACbmC,EAAsB,QAEtBL,GAAU1B,EACV6B,EAAqB,cAGzBpM,EAAOuJ,SAAQ,gBACLjT,EAAIwV,EAAc9N,GAExB0O,EAAcG,KAAK,CACfnW,GAAAA,EACAC,GAAIL,EACJO,GAAAA,EACAC,GAAIR,EACJ2M,KAAM4C,EAAY7H,GAClBkF,MAAAA,EACAC,MAAO7M,EACPgW,oBAAAA,EACAD,kBA3CkB,sBAgDvB,CACHhS,MAAAA,EACAC,OAAAA,EACAwS,WAjIe,EAkIfH,WAAAA,EACAC,WAAAA,EACAG,WAjIe,EAkIfR,WAAAA,EACA3I,MAAO8I,EACPM,UAAWnB,EACXI,OAAAA,EACAC,OAAAA,EACAC,cAAAA,EACAc,qBAAsB3C,EACtB8B,mBAAAA,IW9YKc,EAA4B,gBACrC5K,EAAAA,EAAAA,MACAsB,EAAAA,EAAAA,MAAAA,EAAAA,EACA9J,OAAAA,OAAAA,IAAAA,EAASkQ,EAA+BlQ,OAAAA,EAAAA,EAAAA,EACxCmQ,UAAAA,OAAAA,IAAAA,EAAYD,EAA+BC,UAAAA,EAAAA,EAAAA,EAC3CtJ,UAAAA,OAAAA,IAAAA,EAAYqJ,EAA+BrJ,UAAAA,EAAAA,EAAAA,EAC3CuJ,aAAAA,OAAAA,IAAAA,EAAeF,EAA+BE,aAAAA,EAAAA,EAAAA,EAC9CvO,SAAAA,OAAAA,IAAAA,EAAWqO,EAA+BrO,SAAAA,EAAAA,EAAAA,EAC1CwO,YAAAA,OAAAA,IAAAA,EAAcH,EAA+BG,YAAAA,EAAAA,EAAAA,EAC7CC,YAAAA,OAAAA,IAAAA,EAAcJ,EAA+BI,YAAAA,EAAAA,EAAAA,EAC7CC,WAAAA,OAAAA,IAAAA,EAAaL,EAA+BK,WAAAA,EAC5CwB,EAAAA,EAAAA,MAAAA,EAAAA,EACAvB,WAAAA,OAAAA,IAAAA,EAAaN,EAA+BM,WAAAA,EAAAA,EAAAA,EAC5CC,YAAAA,EAiBIqB,EAA8B,CAC9BtJ,MAAAA,EACAsB,MAAAA,EACA9J,OAAAA,EACAmQ,UAAAA,EACAtJ,UAAAA,EACAuJ,aAAAA,EACAvO,SAAAA,EACAwO,YAAAA,EACAC,YAAAA,EACAC,WAAAA,EACAwB,MAAAA,EACAvB,WAAAA,EACAC,iBAAAA,IAAAA,EA9BUP,EAA+BO,YAAAA,IAGzClQ,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OACAwS,EAAAA,EAAAA,WACAH,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,WACAG,EAAAA,EAAAA,WACOL,EAAAA,EAAP9I,MACA2I,EAAAA,EAAAA,WACAS,EAAAA,EAAAA,UACAf,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,cACAC,EAAAA,EAAAA,mBACAa,EAAAA,EAAAA,qBAiBEtQ,GAAQkI,EAAAA,EAAAA,MAERsI,EAAAA,qCAA0CxM,EAAAA,IAAa4L,EACxDxN,KAAI,mBAAQqO,EAAKC,UACjBC,KAAK,YAGNpI,EAAAA,EAAAA,MAAAA,IAAAA,CAAAA,SAAAA,EACII,EAAAA,EAAAA,KAAAA,OAAAA,CAAAA,UACIA,EAAAA,EAAAA,KAAAA,iBAAAA,CACI6H,GAAIA,EACJzW,GAAIoW,EACJnW,GAAIgW,EACJ9V,GAAI+V,EACJ9V,GAAIiW,EAAAA,SAEHR,EAAWxN,KAAI,mBACZuG,EAAAA,EAAAA,KAAAA,OAAAA,EAAAA,GAAUiI,WAIrBP,IACG1H,EAAAA,EAAAA,KAAAA,OAAAA,CACID,UAAAA,aAAwB4G,EAAAA,KAAWC,EAAAA,YAAkBC,EAAAA,IACrDxH,WAAYsI,EACZ1H,iBAAkB6G,EAClBvK,MAAOlF,EAAM6Q,QAAQ3B,MAAM5I,KAAAA,SAE1B+J,KAGT1H,EAAAA,EAAAA,KAAAA,OAAAA,CAAMjL,MAAOA,EAAOC,OAAQA,EAAQmP,KAAAA,QAAc0D,IACjDT,EAAc3N,KAAI,SAAC+H,EAAMrG,GAAAA,OACtByE,EAAAA,EAAAA,MAACuI,EAAAA,SAAAA,CAAAA,SAAAA,EACGnI,EAAAA,EAAAA,KAAAA,OAAAA,CACI5O,GAAIoQ,EAAKpQ,GACTC,GAAImQ,EAAKnQ,GACTE,GAAIiQ,EAAKjQ,GACTC,GAAIgQ,EAAKhQ,GACT+K,MAAOlF,EAAM6Q,QAAQ5J,MAAMpK,QAE/B8L,EAAAA,EAAAA,KAAAA,OAAAA,CACIjP,EAAGyQ,EAAK5D,MACR5M,EAAGwQ,EAAK3D,MACRwB,WAAYmC,EAAKwF,oBACjB/G,iBAAkBuB,EAAKuF,kBACvBxK,MAAOlF,EAAM6Q,QAAQ5J,MAAMX,KAAAA,SAE1B6D,EAAK7D,SAfCxC,UAAAA,EAAAA,CAAAA,iBAAAA,kBAAAA,SAAAA,aAAAA,aAAAA,SAAAA,YAAAA,aChFlBiN,EAAoC,SAAC,GAAD,IAWzCrT,EACAC,EAXJ4Q,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBACAzK,EAAAA,EAAAA,OAAAA,EAAAA,EACAG,WAAAA,OAAAA,IAAAA,EAAa,QACbC,WAAAA,OAAAA,IAAAA,EAAa,QACbhH,OAAAA,OAAAA,IAAAA,EAASkQ,EAA+BlQ,OAAAA,EAAAA,EAAAA,EACxCmQ,UAAAA,OAAAA,IAAAA,EAAYD,EAA+BC,UAAAA,EAAAA,EAAAA,EAC3CtJ,UAAAA,OAAAA,IAAAA,EAAYqJ,EAA+BrJ,UAAAA,EACxCgN,EAAAA,SAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAAAA,MAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,OAAAA,KAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,QAAAA,IAAAA,IAAAA,EAAAA,GAAAA,EAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAIe,QAAdhN,GACAtG,EAAQP,EACRQ,EAAS2P,IAET5P,EAAQ4P,EACR3P,EAASR,GAAAA,IAAAA,EAGImR,EAA0B,CACvCvK,OAAAA,EACAG,WAAAA,EACAC,WAAAA,EACAoK,eAAAA,EACAC,gBAAAA,EACA9Q,MAAAA,EACAC,OAAAA,IAPIjE,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAAAA,OAWPgP,EAAAA,EAAAA,KAAAA,IAAAA,CAAGD,UAAAA,aAAwBhP,EAAAA,KAAMC,EAAAA,IAAAA,UAC7BgP,EAAAA,EAAAA,KAAC4H,EAAAA,EAAAA,CACGpT,OAAQA,EACRmQ,UAAWA,EACXtJ,UAAWA,GACPgN,OC1BdC,EAAgB,CAClBC,OCfwB,SAAC,GAAD,IACxBxX,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAwX,EAAAA,EAAAA,KACArE,EAAAA,EAAAA,KAAAA,EAAAA,EACA1E,QAAAA,OAAAA,IAAAA,EAAU,QACVgJ,YAAAA,OAAAA,IAAAA,EAAc,QACdC,YAAAA,OAGI1I,EAAAA,EAAAA,KAAAA,SAAAA,CACItO,EAAG8W,EAAO,EACVG,GAAI5X,EAAIyX,EAAO,EACfI,GAAI5X,EAAIwX,EAAO,EACfrE,KAAMA,EACN1E,QAASA,EACTkE,YAAa8E,EACb3E,YAAAA,IAAAA,EAVM,gBAWNvH,MAAO,CACHsM,cAAe,WDH3BC,QEhByB,SAAC,GAAD,IACzB/X,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAwX,EAAAA,EAAAA,KACArE,EAAAA,EAAAA,KAAAA,EAAAA,EACA1E,QAAAA,OAAAA,IAAAA,EAAU,QACVgJ,YAAAA,OAAAA,IAAAA,EAAc,QACdC,YAAAA,OAGI1I,EAAAA,EAAAA,KAAAA,IAAAA,CAAGD,UAAAA,aAAwBhP,EAAAA,IAAKC,EAAAA,IAAAA,UAC5BgP,EAAAA,EAAAA,KAAAA,OAAAA,CACI3L,EAAAA,0BACOmU,EAAO,8BACA,GAAPA,EAAAA,IAAcA,EAAO,4BACrBA,EAAO,MAAKA,EAAAA,0BACL,GAAPA,EAAAA,IAAcA,EAAO,4BACrBA,EAAO,yBAEdrE,KAAMA,EACN1E,QAASA,EACTkE,YAAa8E,EACb3E,YAAAA,IAAAA,EAfE,gBAgBFvH,MAAO,CACHsM,cAAe,aFP/BE,OGjBwB,SAAC,GAAD,IACxBhY,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAwX,EAAAA,EAAAA,KACArE,EAAAA,EAAAA,KAAAA,EAAAA,EACA1E,QAAAA,OAAAA,IAAAA,EAAU,QACVgJ,YAAAA,OAAAA,IAAAA,EAAc,QACdC,YAAAA,OAGI1I,EAAAA,EAAAA,KAAAA,OAAAA,CACIjP,EAAGA,EACHC,EAAGA,EACHmT,KAAMA,EACN1E,QAASA,EACTkE,YAAa8E,EACb3E,YAAAA,IAAAA,EATM,gBAUN/O,MAAOyT,EACPxT,OAAQwT,EACRjM,MAAO,CACHsM,cAAe,WHF3BG,SJlB0B,SAAC,GAAD,IAC1BjY,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAwX,EAAAA,EAAAA,KACArE,EAAAA,EAAAA,KAAAA,EAAAA,EACA1E,QAAAA,OAAAA,IAAAA,EAAU,QACVgJ,YAAAA,OAAAA,IAAAA,EAAc,QACdC,YAAAA,OAGI1I,EAAAA,EAAAA,KAAAA,IAAAA,CAAGD,UAAAA,aAAwBhP,EAAAA,IAAKC,EAAAA,IAAAA,UAC5BgP,EAAAA,EAAAA,KAAAA,OAAAA,CACI3L,EAAAA,sBACGmU,EAAO,0BACPA,EAAAA,IAAQA,EAAAA,wBACNA,EAAAA,sBACFA,EAAO,qBAEVrE,KAAMA,EACN1E,QAASA,EACTkE,YAAa8E,EACb3E,YAAAA,IAAAA,EAdE,gBAeFvH,MAAO,CACHsM,cAAe,cIFtBI,EAAgB,sCACzBlY,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACA+D,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OACAb,EAAAA,EAAAA,KAAAA,EAAAA,EACAkH,UAAAA,OAAAA,IAAAA,EAAY,sBACZC,QAAAA,OAAAA,IAAAA,GAAAA,EACA4N,EAAAA,EAAAA,UAAAA,EAAAA,EACAC,WAAAA,OAAAA,IAAAA,EAAa,oBACb1J,QAAAA,OAAAA,IAAAA,EAAU,QAEV5D,YAAAA,OAAAA,IAAAA,EAAc,eACdD,WAAAA,OAAAA,IAAAA,EAAa,SACbyK,cAAAA,OAAAA,IAAAA,EAAgB,QAChB+C,kBAAAA,OAAAA,IAAAA,EAAoB,QACpBC,kBAAAA,OAAAA,IAAAA,EAAoB,gBAEpBrN,EAAAA,EAAAA,QACAsN,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,YAEAnN,EAAAA,EAAAA,QAAAA,GAE0BoN,EAAAA,EAAAA,UAAgB,IAAnClN,EAAAA,EAAAA,GAAOmN,EAAAA,EAAAA,GACRrS,GAAQkI,EAAAA,EAAAA,MAERoK,GAAmBC,EAAAA,EAAAA,cACrB,SAACjK,GAAAA,GACOtD,EAAS,CAAC,IAEJE,EADeF,EAAQwN,QAAO,kBAAmB,YAAhBvN,MACZwN,QACvB,SAACC,EAAKC,GAAAA,OAAAA,EAAAA,GACCD,EACAC,EAAOzN,SAEd,IAEJmN,EAASnN,GAAAA,MAGb+M,GAAAA,EAAenV,EAAMwL,KAEzB,CAAC2J,EAAcnV,EAAMkI,IAEnB4N,GAAmBL,EAAAA,EAAAA,cACrB,SAACjK,GAAAA,GACOtD,EAAS,CAAC,IAEJE,EADeF,EAAQwN,QAAO,kBAAmB,YAAhBvN,MACZwN,QACvB,SAACC,EAAKC,GAAAA,OAAAA,EAAAA,GACCD,EACAC,EAAOzN,SAEd,IAEJmN,EAASnN,GAAAA,MAGbgN,GAAAA,EAAepV,EAAMwL,KAEzB,CAAC4J,EAAcpV,EAAMkI,IAAAA,EAGiDyJ,EAAkB,CACxFzK,UAAAA,EACAC,QAAAA,EACAM,WAAAA,OAAAA,EAAYW,EAAMX,YAAAA,EAAcA,EAChCyK,cAAAA,EACAtR,MAAAA,EACAC,OAAAA,IANI+Q,GAAAA,EAAAA,QAASC,GAAAA,EAAAA,QAASC,GAAAA,EAAAA,OAAQC,GAAAA,EAAAA,OAAQC,GAAAA,EAAAA,YAAaC,GAAAA,EAAAA,eASjDpO,GAAgB,CAACgE,EAASsN,EAAcC,EAAcC,GAAaU,MACrE,4BAAWC,KAGTC,GAAqC,mBAAhBvO,EAA6BA,EAAcyM,EAAczM,GAAAA,OAGhF+D,EAAAA,EAAAA,MAAAA,IAAAA,CACIG,UAAAA,aAAwBhP,EAAAA,IAAKC,EAAAA,IAC7BuL,MAAO,CACHkD,QAAAA,OAAAA,EAASlD,EAAME,aAAAA,EAAegD,GAAAA,SAAAA,EAGlCO,EAAAA,EAAAA,KAAAA,OAAAA,CACIjL,MAAOA,EACPC,OAAQA,EACRmP,KAAAA,OAAAA,EAAM5H,EAAMC,gBAAAA,EAAkB2M,EAC9B5M,MAAO,CACHmD,OAAQ1H,GAAgB,UAAY,QAExCgE,QAAS,kBACLA,GAAAA,EAAU7H,EAAMwL,GAAAA,MAChB6J,GAAAA,EAAcrV,EAAK0T,KAEvByB,aAAcK,EACdJ,aAAcU,IAEjBjI,EAAAA,cAAoBoI,GAAAA,EAAAA,CACjBvC,GAAI1T,EAAK0T,GACT9W,EAAGgV,GACH/U,EAAGgV,GACHwC,KAAAA,OAAAA,EAAMjM,EAAMX,YAAAA,EAAcA,EAC1BuI,KAAAA,OAAAA,EAAAA,OAAAA,EAAMhQ,EAAKgQ,MAAAA,EAAQhQ,EAAKkW,OAAAA,EAAS,QACjC5B,YAAAA,OAAAA,EAAalM,EAAM6M,mBAAAA,EAAqBA,EACxCV,YAAAA,OAAAA,EAAanM,EAAM8M,mBAAAA,EAAqBA,GACpClV,EAAKmW,OAASjT,EAAM6Q,QAAQoC,OAAOC,YAAAA,KAE3CvK,EAAAA,EAAAA,KAAAA,OAAAA,CACIX,WAAY8G,GACZ5J,MAAAA,EAAAA,GACOlF,EAAM6Q,QAAQvK,KAAAA,CACjBwG,KAAAA,OAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAM5H,EAAMR,eAAAA,EAAiBmN,GAAAA,EAAa7R,EAAM6Q,QAAQvK,KAAKwG,MAAAA,EAAQ,QACrElE,iBAAkBmG,GAClByC,cAAe,OACf2B,WAAY,QACRrW,EAAKmW,OAASjT,EAAM6Q,QAAQoC,OAAO3M,UAAAA,GAE3C5M,EAAGkV,GACHjV,EAAGkV,GAAAA,SAEF/R,EAAKwF,YI/IT8Q,EAAY,gBACrBtW,EAAAA,EAAAA,KAEApD,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAqK,EAAAA,EAAAA,UAAAA,EAAAA,EACAiK,QAASD,OAAAA,IAAAA,EAAW,IACpB/J,EAAAA,EAAAA,QACAe,EAAAA,EAAAA,QAEAZ,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,WAAAA,EAAAA,EACAI,cAAAA,OAAAA,IAAAA,EAAgB,sBAChBH,aAAAA,OAAAA,IAAAA,EAAe,IACfI,EAAAA,EAAAA,cAAAA,EAAAA,EACAS,eAAAA,OAAAA,IAAAA,EAAiB,oBACjBC,YAAAA,OAAAA,IAAAA,EAAc,IAEdZ,EAAAA,EAAAA,YACAD,EAAAA,EAAAA,WACAyK,EAAAA,EAAAA,cACA+C,EAAAA,EAAAA,kBACAC,EAAAA,EAAAA,kBAEArN,EAAAA,EAAAA,QACAsN,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,YAEQlE,EAAYH,EAAkB,CAClCI,UAAWpR,EAAKK,OAChBiH,UAAAA,EACAC,WAAAA,EACAC,aAAAA,EACAN,UAAAA,EACAiK,QAASD,IANLC,QASFoF,EAAsB,QAAdrP,EAAsBI,EAAYE,EAAe,EACzDgP,EAAsB,WAAdtP,EAAyBK,EAAaC,EAAe,SAG/DqE,EAAAA,EAAAA,KAAAA,IAAAA,CAAGD,UAAAA,aAAwBhP,EAAAA,IAAKC,EAAAA,IAAAA,SAC3BmD,EAAKsF,KAAI,SAACtF,EAAMC,GAAAA,OACb4L,EAAAA,EAAAA,KAACiJ,EAAAA,CAEG9U,KAAMA,EACNpD,EAAGqD,EAAIsW,EAAQpF,EAAQjQ,KACvBrE,EAAGoD,EAAIuW,EAAQrF,EAAQpQ,IACvBH,MAAO0G,EACPzG,OAAQ0G,EACRL,UAAWS,EACXR,QAASA,EACTe,QAASA,EACT6M,UAAWnN,EACXoN,WAAY3M,EACZiD,QAAShD,EACTZ,YAAaA,EACbD,WAAYA,EACZyK,cAAeA,EACf+C,kBAAmBA,EACnBC,kBAAmBA,EACnBrN,QAASA,EACTsN,aAAcA,EACdC,aAAcA,EACdC,YAAaA,GApBRpV,SC7CZwW,EAAe,gBACxBzW,EAAAA,EAAAA,KAEAyR,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBAAAA,EAAAA,EACAtK,WAAAA,OAAAA,IAAAA,EAAa,QACbC,WAAAA,OAAAA,IAAAA,EAAa,IACbJ,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,UAAAA,EAAAA,EACAiK,QAAAA,OAAAA,IAAAA,EAAU,IACVhK,EAAAA,EAAAA,QAAAA,EAAAA,EAEAK,aAAAA,OAAAA,IAAAA,EAAe,IACfF,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,WACAI,EAAAA,EAAAA,cACAC,EAAAA,EAAAA,cACAS,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,YAEAZ,EAAAA,EAAAA,YACAD,EAAAA,EAAAA,WACAyK,EAAAA,EAAAA,cACA+C,EAAAA,EAAAA,kBACAC,EAAAA,EAAAA,kBAEArN,EAAAA,EAAAA,QACAsN,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,YAEAnN,EAAAA,EAAAA,QAAAA,EAE0B8I,EAAkB,CACxCI,UAAWpR,EAAKK,OAChBmH,aAAAA,EACAF,UAAAA,EACAC,WAAAA,EACAL,UAAAA,EACAiK,QAAAA,IANIvQ,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,OAAAA,EASE2Q,EAA0B,CACvCvK,OAAAA,EACAG,WAAAA,EACAC,WAAAA,EACAoK,eAAAA,EACAC,gBAAAA,EACA9Q,MAAAA,EACAC,OAAAA,IAPIjE,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAAAA,OAWPgP,EAAAA,EAAAA,KAACyK,EAAAA,CACGtW,KAAMA,EACNpD,EAAGA,EACHC,EAAGA,EACHqK,UAAWA,EACXiK,QAASA,EACThK,QAASA,EACTe,QAASA,EACTV,aAAcA,EACdF,UAAWA,EACXC,WAAYA,EACZI,cAAeA,EACfC,cAAeA,EACfS,eAAgBA,EAChBC,YAAaA,EACbZ,YAAaA,EACbD,WAAYA,EACZyK,cAAeA,EACf+C,kBAAmBA,EACnBC,kBAAmBA,EACnBrN,QAASA,EACTsN,aAAcA,EACdC,aAAcA,EACdC,YAAoC,kBAAhBA,OAAAA,EAAwCA,KVtElEqB,EAAmB,CACrBC,MAAO,OACPC,OAAQ,SACRC,IAAK,SAGIC,EAAuB,SAChC7H,EAAAA,GAAAA,IAEIjP,EAAAA,EAAAA,KAEAyR,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBAAAA,EAAAA,EACAtK,WAAAA,OAAAA,IAAAA,EAAa,QACbC,WAAAA,OAAAA,IAAAA,EAAa,IACbJ,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,UAAAA,EAAAA,EACAiK,QAASD,OAAAA,IAAAA,EAAW,QACpB/J,QAAAA,OAAAA,IAAAA,GAAAA,EAAAA,EAAAA,EAGAK,aAAAA,OAAAA,IAAAA,EAAe,IACfF,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,WAAAA,EAAAA,EACAI,cAAAA,OAAAA,IAAAA,EAAgB,kBAChBC,EAAAA,EAAAA,cAAAA,EAAAA,EAGAH,WAAAA,OAAAA,IAAAA,EAAa,SACbyK,cAAAA,OAAAA,IAAAA,EAAgB,IAIhBhP,EAAAA,EAAAA,MAAAA,EAG+B8N,EAAkB,CACjDI,UAAWpR,EAAKK,OAChBiH,UAAAA,EACAC,WAAAA,EACAC,aAAAA,EACAN,UAAAA,EACAiK,QAASD,IANLtQ,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,OAAQsQ,EAAAA,EAAAA,QAAAA,EASNK,EAA0B,CACvCvK,OAAAA,EACAG,WAAAA,EACAC,WAAAA,EACAoK,eAAAA,EACAC,gBAAAA,EACA9Q,MAAAA,EACAC,OAAAA,IAPIjE,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAUL0Z,EAAsB,QAAdrP,EAAsBI,EAAYE,EAAe,EACzDgP,EAAsB,WAAdtP,EAAyBK,EAAaC,EAAe,EAEnEyH,EAAIE,OACJF,EAAItG,UAAU/L,EAAGC,GAEjBoS,EAAIG,KAAUlM,EAAM6Q,QAAQvK,KAAK8F,SAAAA,OAAcpM,EAAM6Q,QAAQvK,KAAK+F,YAAc,cAEhFvP,EAAK8P,SAAQ,SAAC5P,EAAGD,GAAAA,IAAAA,EAAAA,EACP8W,EAAQ9W,EAAIsW,EAAQpF,EAAQjQ,KAC5B8V,EAAQ/W,EAAIuW,EAAQrF,EAAQpQ,IAAAA,EAEwC4Q,EACtE,CACIzK,UAAWS,EACXR,QAAAA,EACAM,WAAAA,EACAyK,cAAAA,EACAtR,MAAO0G,EACPzG,OAAQ0G,IAPRqK,EAAAA,EAAAA,QAASC,EAAAA,EAAAA,QAASC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,YAAaC,EAAAA,EAAAA,eAWvDhD,EAAIgB,UAAAA,OAAAA,EAAY/P,EAAEgW,OAAAA,EAAS,QAC3BjH,EAAIgI,SAASF,EAAQnF,EAASoF,EAAQnF,EAASpK,EAAYA,GAE3DwH,EAAInF,UAAY4M,EAAiB1E,GAEV,YAAnBC,IACAhD,EAAIhF,aAAe,UAGvBgF,EAAIgB,UAAAA,OAAAA,EAAAA,MAAYrI,EAAAA,EAAiB1E,EAAM6Q,QAAQvK,KAAKwG,MAAAA,EAAQ,QAC5Df,EAAIiB,SAASC,OAAOjQ,EAAEsF,OAAQuR,EAAQjF,EAAQkF,EAAQjF,MAG1D9C,EAAImB,WAGK8G,EAAsC,SAC/CjI,EAAAA,GAAAA,IAEIwC,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBACAzK,EAAAA,EAAAA,OAAAA,EAAAA,EACAG,WAAAA,OAAAA,IAAAA,EAAa,QACbC,WAAAA,OAAAA,IAAAA,EAAa,IACbwB,EAAAA,EAAAA,MAAAA,EAAAA,EACAxI,OAAAA,OAAAA,IAAAA,EAASkQ,EAA+BlQ,OAAAA,EAAAA,EAAAA,EACxCmQ,UAAAA,OAAAA,IAAAA,EAAYD,EAA+BC,UAAAA,EAAAA,EAAAA,EAC3CtJ,UAAAA,OAAAA,IAAAA,EAAYqJ,EAA+BrJ,UAAAA,EACpCiQ,EAAAA,EAAPhN,MAAAA,EAAAA,EACAsG,aAAAA,OAAAA,IAAAA,EAAeF,EAA+BE,aAAAA,EAAAA,EAAAA,EAC9CvO,SAAAA,OAAAA,IAAAA,EAAWqO,EAA+BrO,SAAAA,EAAAA,EAAAA,EAC1CwO,YAAAA,OAAAA,IAAAA,EAAcH,EAA+BG,YAAAA,EAAAA,EAAAA,EAC7CC,YAAAA,OAAAA,IAAAA,EAAcJ,EAA+BI,YAAAA,EAAAA,EAAAA,EAC7CC,WAAAA,OAAAA,IAAAA,EAAaL,EAA+BK,WAAAA,EAC5CwB,EAAAA,EAAAA,MAAAA,EAAAA,EACAvB,WAAAA,OAAAA,IAAAA,EAAaN,EAA+BM,WAAAA,EAAAA,EAAAA,EAC5CC,YAAAA,OAAAA,IAAAA,EAAcP,EAA+BO,YAAAA,EAC7C5N,EAAAA,EAAAA,MAAAA,EAoBAiP,EAA8B,CAC9BtJ,MAAAA,EACAsB,MAAOgN,EACP9W,OAAAA,EACAmQ,UAAAA,EACAtJ,UAAAA,EACAuJ,aAAAA,EACAvO,SAAAA,EACAwO,YAAAA,EACAC,YAAAA,EACAC,WAAAA,EACAwB,MAAAA,EACAvB,WAAAA,EACAC,YAAAA,IA3BAlQ,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OACAwS,EAAAA,EAAAA,WACAH,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,WACAG,EAAAA,EAAAA,WACAR,EAAAA,EAAAA,WACA3I,EAAAA,EAAAA,MACAoJ,EAAAA,EAAAA,UACAf,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,cACAC,EAAAA,EAAAA,mBACAa,EAAAA,EAAAA,qBAAAA,EAiBahC,EAA0B,CACvCvK,OAAAA,EACAG,WAAAA,EACAC,WAAAA,EACAoK,eAAAA,EACAC,gBAAAA,EACA9Q,MAAAA,EACAC,OAAAA,IAPIjE,EAAAA,EAAAA,EAAGC,GAAAA,EAAAA,EAULua,GAAgB,CAClBhI,KAAMH,EAAIG,KACVtF,UAAWmF,EAAInF,UACfG,aAAcgF,EAAIhF,cAEtBgF,EAAIE,OAEJF,EAAItG,UAAU/L,EAAGC,IAAAA,IAEXwa,GAAWpI,EAAIqI,qBACjBjE,EAAazS,EACbsS,EAAarS,EACbsS,EAAavS,EACb0S,EAAazS,GAEjBiS,EAAWhD,SAAQ,YACfuH,GAASE,aAAazD,EAAUF,OAAQE,EAAU0D,cAGtDvI,EAAIgB,UAAYoH,GAChBpI,EAAIgI,SAAS,EAAG,EAAGrW,EAAOC,GAE1BoO,EAAIG,MACAlM,EAAM6Q,QAAQ5J,MAAMX,KAAK6F,WAAgBnM,EAAM6Q,QAAQ5J,MAAMX,KAAK6F,WAAAA,IAAgB,IACnFnM,EAAM6Q,QAAQ5J,MAAMX,KAAK8F,SAAAA,MAAcpM,EAAM6Q,QAAQ5J,MAAMX,KAAK+F,WAEnEpF,EAAM2F,SAAQ,4BACL5M,EAAM6Q,QAAQ5J,MAAMpK,KAAKyP,aAAAA,EAAe,GAAK,IAC9CP,EAAInM,UAAY2M,OAAOvM,EAAM0F,KAAKuB,MAAMpK,KAAKyP,aACzCtM,EAAM0F,KAAKuB,MAAMpK,KAAK4P,SACtBV,EAAIW,YAAc1M,EAAM0F,KAAKuB,MAAMpK,KAAK4P,QAE5CV,EAAIS,QAAU,SAEdT,EAAIY,YACJZ,EAAItS,OAAO0Q,EAAKpQ,GAAIoQ,EAAKnQ,IACzB+R,EAAIlS,OAAOsQ,EAAKjQ,GAAIiQ,EAAKhQ,IACzB4R,EAAIU,UAGJzM,EAAM6Q,QAAQ5J,MAAMX,KAAKwG,OACzBf,EAAIgB,UAAY/M,EAAM6Q,QAAQ5J,MAAMX,KAAKwG,MAE7Cf,EAAInF,UAAyC,WAA7BuD,EAAKwF,oBAAmC,SAAWxF,EAAKwF,oBACxE5D,EAAIhF,aAA0C,YAA3BoD,EAAKuF,kBAAkC,SAAWvF,EAAKuF,kBAE1E3D,EAAIiB,SAAS7C,EAAK7D,KAAM6D,EAAK5D,MAAO4D,EAAK3D,UAGzC6J,IACAtE,EAAIE,OACJF,EAAItG,UAAU6J,EAAQC,GACtBxD,EAAInB,QAAOiC,EAAAA,EAAAA,IAAiB2C,IAE5BzD,EAAIG,MACAlM,EAAM6Q,QAAQ3B,MAAM5I,KAAK6F,WAAgBnM,EAAM6Q,QAAQ3B,MAAM5I,KAAK6F,WAAAA,IAAgB,IACnFnM,EAAM6Q,QAAQ3B,MAAM5I,KAAK8F,SAAAA,MAAcpM,EAAM6Q,QAAQ3B,MAAM5I,KAAK+F,WAC/DrM,EAAM6Q,QAAQ3B,MAAM5I,KAAKwG,OACzBf,EAAIgB,UAAY/M,EAAM6Q,QAAQ3B,MAAM5I,KAAKwG,MAE7Cf,EAAInF,UAAqC,WAAzB0J,EAAoC,SAAWA,EAC/DvE,EAAIhF,aAAe0I,EAEnB1D,EAAIiB,SAASqD,EAAW,EAAG,GAE3BtE,EAAImB,WAGRnB,EAAImB,UAEJnB,EAAIG,KAAOgI,GAAchI,KACzBH,EAAInF,UAAYsN,GAActN,UAC9BmF,EAAIhF,aAAemN,GAAcnN,cW3OxBwN,EAAkC,SAAC,GAAD,IAC3C5O,EAAAA,EAAAA,MACQ6O,EAAAA,EAAR3J,OAAAA,EAAAA,EACAnM,QAAAA,OAAAA,IAAAA,GAAAA,EAAAA,EAAAA,EACA+V,YAAAA,OAAAA,IAAAA,EAAc,mBAAKpS,GAAAA,EAAAA,EAAAA,EACnBqS,UAAAA,OAAAA,IAAAA,EAAY,eAQLvM,EAAAA,EAAAA,UAAQ,eAGLwM,GAAAA,MAFSH,EAAAA,EAAoB7O,EAAMxE,SAEpBiB,KAAI,SAACwS,EAAa9Q,GAAAA,IAAAA,EACd6B,EAAMkP,aAAaD,GAAjCnB,EAAAA,EAAAA,GAAOE,EAAAA,EAAAA,GAAAA,MAEP,CACHnD,GAAIoE,EACJ9Q,MAAAA,EACAgR,OAAQ,CAACrB,EAAOE,GAChBrR,MAAAA,GAAUmS,EAAYhB,GAASiB,EAAYD,EAAYd,GACvDtS,MAAOsE,EAAM8N,GACbT,MAAO4B,MAAAA,OAIXlW,GAASiW,EAAMjW,UAEZiW,IACR,CAACH,EAAkB7O,EAAOjH,EAASgW,EAAWD,KhBxBxCM,EAAkB,CAC3BjY,KAAMiO,IAAAA,QAAkBA,IAAAA,QAGxBhH,OAAQgH,IAAAA,MAAgB,CACpB,MACA,YACA,QACA,eACA,SACA,cACA,OACA,WACA,WACDiK,WACH9Q,WAAY6G,IAAAA,OACZ5G,WAAY4G,IAAAA,OACZ/G,UAAW+G,IAAAA,MAAgB,CAAC,MAAO,WAAWiK,WAG9C1Q,aAAcyG,IAAAA,OACd3G,UAAW2G,IAAAA,OAAAA,WACX1G,WAAY0G,IAAAA,OAAAA,WACZtG,cAAesG,IAAAA,MAAgB,CAC3B,gBACA,gBACA,gBACA,kBAEJrG,cAAeqG,IAAAA,OACf5F,eAAgB4F,IAAAA,OAChB3F,YAAa2F,IAAAA,OAEbvG,YAAauG,IAAAA,UAAoB,CAC7BA,IAAAA,MAAgB,CAAC,SAAU,UAAW,SAAU,aAChDA,IAAAA,OAEJxG,WAAYwG,IAAAA,OACZiE,cAAejE,IAAAA,OACfgH,kBAAmBhH,IAAAA,OACnBiH,kBAAmBjH,IAAAA,OAEnBpG,QAASoG,IAAAA,KACTkH,aAAclH,IAAAA,KACdmH,aAAcnH,IAAAA,KAEd/F,QAAS+F,IAAAA,QACLA,IAAAA,MAAgB,CACZ9F,GAAI8F,IAAAA,UAAoB,CAACA,IAAAA,MAAgB,CAAC,YAAYiK,WACtD9P,MAAO6F,IAAAA,MAAgB,CACnBrG,cAAeqG,IAAAA,OACf5F,eAAgB4F,IAAAA,OAChB3F,YAAa2F,IAAAA,OACbxG,WAAYwG,IAAAA,OACZgH,kBAAmBhH,IAAAA,OACnBiH,kBAAmBjH,IAAAA,SACpBiK","sources":["webpack://nivo-website/../node_modules/d3-path/src/path.js","webpack://nivo-website/../node_modules/d3-shape/src/constant.js","webpack://nivo-website/../node_modules/d3-shape/src/line.js","webpack://nivo-website/../node_modules/d3-shape/src/point.js","webpack://nivo-website/./src/data/components/line/defaults.ts","webpack://nivo-website/./src/data/components/line/generator.ts","webpack://nivo-website/./src/data/components/line/mapper.ts","webpack://nivo-website/./src/data/components/line/props.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/defaults.ts","webpack://nivo-website/../src/svg/ContinuousColorsLegendSvg.tsx","webpack://nivo-website/../src/svg/AnchoredContinuousColorsLegendSvg.tsx","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/hooks.ts"],"sourcesContent":["var pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path();\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function moveTo(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function lineTo(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function quadraticCurveTo(x1, y1, x, y) {\n    this._ += \"Q\" + +x1 + \",\" + +y1 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + +x1 + \",\" + +y1 + \",\" + +x2 + \",\" + +y2 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function arcTo(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.\n\n    if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x1,y1).\n\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    } // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.\n\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + +(y01 * x20 > x01 * y20) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function arc(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.\n\n    if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x0,y0).\n\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    } // Is this arc empty? We’re done.\n\n\n    if (!r) return; // Does the angle go the wrong way? Flip the direction.\n\n    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.\n\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    } // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + +(da >= pi) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function rect(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + +w + \"v\" + +h + \"h\" + -w + \"Z\";\n  },\n  toString: function toString() {\n    return this._;\n  }\n};\nexport default path;","export default function (x) {\n  return function constant() {\n    return x;\n  };\n}","import { path } from \"d3-path\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport { x as pointX, y as pointY } from \"./point.js\";\nexport default function () {\n  var x = pointX,\n      y = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function line(data) {\n    var i,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer;\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();else output.lineEnd();\n      }\n\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  line.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), line) : x;\n  };\n\n  line.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), line) : y;\n  };\n\n  line.defined = function (_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n  };\n\n  line.curve = function (_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function (_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}","export function x(p) {\n  return p[0];\n}\nexport function y(p) {\n  return p[1];\n}","import { LineDefaultProps } from '@nivo/line'\n\nexport default {\n    width: 600,\n    height: 400,\n\n    margin: {\n        top: 50,\n        right: 110,\n        bottom: 50,\n        left: 60,\n    },\n\n    xScale: {\n        type: 'point',\n    },\n    xFormat: { format: '', enabled: false },\n    yScale: {\n        type: 'linear',\n        min: 'auto',\n        max: 'auto',\n        stacked: true,\n        reverse: false,\n    },\n    yFormat: { format: ' >-.2f', enabled: true },\n\n    curve: LineDefaultProps.curve,\n\n    axisTop: {\n        enable: false,\n        orient: 'top',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 36,\n    },\n    axisRight: {\n        enable: false,\n        orient: 'right',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 0,\n    },\n    axisBottom: {\n        enable: true,\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'transportation',\n        legendOffset: 36,\n        legendPosition: 'middle',\n    },\n    axisLeft: {\n        enable: true,\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'count',\n        legendOffset: -40,\n        legendPosition: 'middle',\n    },\n\n    enableGridX: LineDefaultProps.enableGridX,\n    enableGridY: LineDefaultProps.enableGridY,\n\n    colors: LineDefaultProps.colors,\n    lineWidth: 2,\n\n    enablePoints: true,\n    pointSize: 10,\n    pointColor: { theme: 'background' },\n    pointBorderWidth: 2,\n    pointBorderColor: { from: 'serieColor' },\n    enablePointLabel: LineDefaultProps.enablePointLabel,\n    pointLabel: LineDefaultProps.pointLabel,\n    pointLabelYOffset: -12,\n\n    enableArea: LineDefaultProps.enableArea,\n    areaBlendMode: LineDefaultProps.areaBlendMode,\n    areaBaselineValue: LineDefaultProps.areaBaselineValue,\n    areaOpacity: LineDefaultProps.areaOpacity,\n\n    isInteractive: LineDefaultProps.isInteractive,\n    enableSlices: false,\n    debugSlices: false,\n\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n","import range from 'lodash/range'\nimport { generateSeries } from '@nivo/generators'\n\nexport const generateLightDataSet = () => {\n    return generateSeries(\n        ['japan', 'france', 'us', 'germany', 'norway'],\n        [\n            'plane',\n            'helicopter',\n            'boat',\n            'train',\n            'subway',\n            'bus',\n            'car',\n            'moto',\n            'bicycle',\n            'horse',\n            'skateboard',\n            'others',\n        ]\n    )\n}\n\nexport const generateHeavyDataSet = () => {\n    return generateSeries(\n        [\n            'japan',\n            'brazil',\n            'france',\n            'us',\n            'germany',\n            'norway',\n            'china',\n            'algeria',\n            'mexico',\n            'finland',\n            'australia',\n        ],\n        range(121)\n    )\n}\n","import { settingsMapper, mapAxis, mapFormat } from '../../../lib/settings'\n\nexport default settingsMapper(\n    {\n        pointLabel: value => {\n            if (value === `d => \\`\\${d.x}: \\${d.y}\\``) return d => `${d.x}: ${d.y}`\n            return value\n        },\n        xFormat: mapFormat,\n        yFormat: mapFormat,\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n    },\n    {\n        exclude: ['enable axisTop', 'enable axisRight', 'enable axisBottom', 'enable axisLeft'],\n    }\n)\n","// @ts-ignore\nimport { lineCurvePropKeys } from '@nivo/core'\n// @ts-ignore\nimport { LineDefaultProps as defaults } from '@nivo/line'\nimport {\n    themeProperty,\n    motionProperties,\n    getLegendsProps,\n    groupProperties,\n    defsProperties,\n} from '../../../lib/componentProperties'\nimport {\n    chartDimensions,\n    ordinalColors,\n    blendMode,\n    chartGrid,\n    axes,\n    isInteractive,\n} from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg', 'canvas', 'api']\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Chart data.',\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                id:   string | number\n                data: Array<{\n                    x: number | string | Date\n                    y: number | string | Date\n                }>\n            }>\n            \\`\\`\\`\n        `,\n        required: true,\n        type: 'object[]',\n    },\n    {\n        key: 'xScale',\n        type: 'object',\n        flavors: allFlavors,\n        group: 'Base',\n        help: `X scale configuration.`,\n        required: false,\n        control: {\n            type: 'object',\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type.`,\n                    type: 'string',\n                    required: true,\n                    flavors: allFlavors,\n                    control: {\n                        type: 'choices',\n                        disabled: true,\n                        choices: ['linear', 'point'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'xFormat',\n        group: 'Base',\n        help: 'Optional formatter for x values.',\n        flavors: allFlavors,\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'Function | string',\n        control: { type: 'valueFormat' },\n    },\n    {\n        key: 'yScale',\n        type: 'object',\n        help: `Y scale configuration.`,\n        flavors: allFlavors,\n        group: 'Base',\n        required: false,\n        control: {\n            type: 'object',\n            props: [\n                {\n                    key: 'type',\n                    help: `Scale type.`,\n                    type: 'string',\n                    flavors: allFlavors,\n                    required: true,\n                    control: {\n                        type: 'choices',\n                        disabled: true,\n                        choices: ['linear', 'point'].map(v => ({\n                            label: v,\n                            value: v,\n                        })),\n                    },\n                },\n                {\n                    key: 'stacked',\n                    help: 'Enable/disable stacked mode.',\n                    flavors: allFlavors,\n                    type: 'boolean',\n                    required: false,\n                    control: { type: 'switch' },\n                },\n                {\n                    key: 'min',\n                    help: 'Minimum scale value.',\n                    flavors: allFlavors,\n                    required: false,\n                    type: `number | 'auto'`,\n                    control: {\n                        type: 'switchableRange',\n                        disabledValue: 'auto',\n                        defaultValue: 0,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n                {\n                    key: 'max',\n                    help: 'Maximum scale value.',\n                    flavors: allFlavors,\n                    required: false,\n                    type: `number | 'auto'`,\n                    control: {\n                        type: 'switchableRange',\n                        disabledValue: 'auto',\n                        defaultValue: 1200,\n                        min: -2000,\n                        max: 2000,\n                    },\n                },\n            ],\n        },\n    },\n    {\n        key: 'yFormat',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Optional formatter for y values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            If you use a time scale, you must provide a time format\n            as values are converted to Date objects.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'Function | string',\n        control: { type: 'valueFormat' },\n    },\n    ...chartDimensions(allFlavors),\n    {\n        key: 'curve',\n        help: 'Curve interpolation.',\n        flavors: allFlavors,\n        description: `\n            Defines the curve factory to use for the line generator.\n        `,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.curve,\n        group: 'Style',\n        control: {\n            type: 'choices',\n            choices: lineCurvePropKeys.map((key: string) => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    themeProperty(['svg', 'canvas', 'api']),\n    ordinalColors({\n        flavors: allFlavors,\n        defaultValue: defaults.colors,\n    }),\n    {\n        key: 'lineWidth',\n        help: 'Line width.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.lineWidth,\n        control: { type: 'lineWidth' },\n        group: 'Style',\n    },\n    {\n        key: 'enableArea',\n        help: 'Enable/disable area below each line.',\n        flavors: allFlavors,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableArea,\n        control: { type: 'switch' },\n        group: 'Style',\n    },\n    {\n        key: 'areaBaselineValue',\n        help: 'Define the value to be used for area baseline.',\n        flavors: allFlavors,\n        description: `\n            Define the value to be used for area baseline.\n            Please note that this value isn't the\n            position of the baseline but the value used\n            to compute it.\n        `,\n        type: 'number | string | Date',\n        required: false,\n        defaultValue: defaults.areaBaselineValue,\n        group: 'Style',\n        control: {\n            type: 'range',\n            min: 0,\n            max: 200,\n            step: 10,\n        },\n    },\n    {\n        key: 'areaOpacity',\n        help: 'Area opacity (0~1), depends on enableArea.',\n        flavors: allFlavors,\n        required: false,\n        defaultValue: defaults.areaOpacity,\n        type: 'number',\n        control: { type: 'opacity' },\n        group: 'Style',\n    },\n    blendMode({\n        key: 'areaBlendMode',\n        target: 'areas',\n        flavors: ['svg'],\n        defaultValue: defaults.areaBlendMode,\n    }),\n    ...defsProperties('Style', ['svg']),\n    {\n        key: 'layers',\n        group: 'Customization',\n        type: '(string | Component)[]',\n        flavors: allFlavors,\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this property to insert extra layers\n            to the chart, this extra layer must be\n            a function which will receive the chart\n            computed data and must return a valid SVG element.\n        `,\n        required: false,\n        defaultValue: defaults.layers,\n    },\n    {\n        key: 'enablePoints',\n        help: 'Enable/disable points.',\n        flavors: allFlavors,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enablePoints,\n        control: { type: 'switch' },\n        group: 'Points',\n    },\n    {\n        key: 'pointSymbol',\n        flavors: ['svg'],\n        help: 'Overrides default point circle. The function will receive `size`, `color`, `borderWidth` and `borderColor` props and must return a valid SVG element.',\n        type: 'Function',\n        required: false,\n        group: 'Points',\n    },\n    {\n        key: 'pointSize',\n        help: 'Size of the points.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.pointSize,\n        group: 'Points',\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: 2,\n            max: 20,\n        },\n    },\n    {\n        key: 'pointColor',\n        help: 'Method to compute points color.',\n        type: 'string | object | Function',\n        flavors: allFlavors,\n        required: false,\n        defaultValue: defaults.pointColor,\n        group: 'Points',\n        control: { type: 'inheritedColor' },\n    },\n    {\n        key: 'pointBorderWidth',\n        help: 'Width of the points border.',\n        flavors: allFlavors,\n        type: 'number',\n        required: false,\n        defaultValue: defaults.pointBorderWidth,\n        group: 'Points',\n        control: { type: 'lineWidth' },\n    },\n    {\n        key: 'pointBorderColor',\n        help: 'Method to compute points border color.',\n        flavors: allFlavors,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.pointBorderColor,\n        group: 'Points',\n        control: { type: 'inheritedColor' },\n    },\n    {\n        key: 'enablePointLabel',\n        flavors: ['svg', 'api'],\n        group: 'Points',\n        help: 'Enable/disable points label.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enablePointLabel,\n        control: { type: 'switch' },\n    },\n    {\n        key: 'pointLabel',\n        flavors: ['svg', 'api'],\n        group: 'Points',\n        help: 'Property to use to determine point label. If a function is provided, it will receive current point data and should return the desired label.',\n        type: 'string',\n        required: false,\n        control: {\n            type: 'choices',\n            choices: ['y', 'yFormatted', 'x', 'xFormatted', `d => \\`\\${d.x}: \\${d.y}\\``].map(\n                choice => ({\n                    label: choice,\n                    value: choice,\n                })\n            ),\n        },\n    },\n    {\n        key: 'pointLabelYOffset',\n        flavors: ['svg', 'api'],\n        group: 'Points',\n        help: 'Label Y offset from point shape.',\n        type: 'number',\n        required: false,\n        defaultValue: -12,\n        control: {\n            type: 'range',\n            unit: 'px',\n            min: -24,\n            max: 24,\n        },\n    },\n    ...chartGrid({\n        flavors: allFlavors,\n        values: true,\n        xDefault: defaults.enableGridX,\n        yDefault: defaults.enableGridY,\n    }),\n    ...axes({ flavors: allFlavors }),\n    isInteractive({\n        flavors: ['svg', 'canvas'],\n        defaultValue: defaults.isInteractive,\n    }),\n    {\n        key: 'useMesh',\n        flavors: ['svg'],\n        help: 'Use a voronoi mesh to detect mouse interactions, enableSlices must be disabled',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.useMesh,\n        control: { type: 'switch' },\n        group: 'Interactivity',\n    },\n    {\n        key: 'debugMesh',\n        flavors: ['svg', 'canvas'],\n        help: 'Display mesh used to detect mouse interactions (voronoi cells).',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.debugMesh,\n        control: { type: 'switch' },\n        group: 'Interactivity',\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: `onMouseEnter handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: `onMouseMove handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `onMouseLeave handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `onClick handler, doesn't work with slice tooltip.`,\n        type: '(point, event) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `Custom point tooltip`,\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'enableSlices',\n        group: 'Interactivity',\n        flavors: ['svg'],\n        help: `Enable/disable slices tooltip for x or y axis, automatically disable mesh.`,\n        type: `'x' | 'y' | false`,\n        required: false,\n        defaultValue: defaults.enableSlicesTooltip,\n        control: {\n            type: 'choices',\n            choices: [\n                {\n                    label: 'false',\n                    value: false,\n                },\n                {\n                    label: 'x',\n                    value: 'x',\n                },\n                {\n                    label: 'y',\n                    value: 'y',\n                },\n            ],\n        },\n    },\n    {\n        key: 'debugSlices',\n        flavors: ['svg'],\n        help: 'Display area used to detect mouse interactions for slices.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.debugSlices,\n        control: { type: 'switch' },\n        group: 'Interactivity',\n    },\n    {\n        key: 'sliceTooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: `Custom slice tooltip`,\n        type: 'Function',\n        required: false,\n    },\n    {\n        key: 'enableCrosshair',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'Enable/disable crosshair.',\n        type: 'boolean',\n        required: false,\n        control: { type: 'switch' },\n        defaultValue: defaults.enableCrosshair,\n    },\n    {\n        key: 'crosshairType',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        required: false,\n        defaultValue: defaults.crosshairType,\n        help: `Crosshair type, forced to slices axis if enabled.`,\n        type: 'string',\n        control: {\n            type: 'choices',\n            disabled: true,\n            choices: [\n                'x',\n                'y',\n                'top-left',\n                'top',\n                'top-right',\n                'right',\n                'bottom-right',\n                'bottom',\n                'bottom-left',\n                'left',\n                'cross',\n            ].map(v => ({\n                label: v,\n                value: v,\n            })),\n        },\n    },\n    {\n        key: 'legends',\n        flavors: ['svg', 'canvas'],\n        type: 'object[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        required: false,\n        control: {\n            type: 'array',\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend: any) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 4,\n                symbolSize: 20,\n                symbolShape: 'circle',\n                itemDirection: 'left-to-right',\n                itemTextColor: '#777',\n                onClick: (data: any) => {\n                    console.log(JSON.stringify(data, null, '    '))\n                },\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1,\n                        },\n                    },\n                ],\n            },\n        },\n    },\n    ...motionProperties(['svg'], defaults, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map((value: Value) => ({\n        key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProps, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProps<X> | null\n        right?: CanvasAxisProps<Y> | null\n        bottom?: CanvasAxisProps<X> | null\n        left?: CanvasAxisProps<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProps<X> | undefined\n            : CanvasAxisProps<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { ContinuousColorsLegendProps } from './types'\n\nexport const continuousColorsLegendDefaults: {\n    length: NonNullable<ContinuousColorsLegendProps['length']>\n    thickness: NonNullable<ContinuousColorsLegendProps['thickness']>\n    direction: NonNullable<ContinuousColorsLegendProps['direction']>\n    tickPosition: NonNullable<ContinuousColorsLegendProps['tickPosition']>\n    tickSize: NonNullable<ContinuousColorsLegendProps['tickSize']>\n    tickSpacing: NonNullable<ContinuousColorsLegendProps['tickSpacing']>\n    tickOverlap: NonNullable<ContinuousColorsLegendProps['tickOverlap']>\n    tickFormat: NonNullable<ContinuousColorsLegendProps['tickFormat']>\n    titleAlign: NonNullable<ContinuousColorsLegendProps['titleAlign']>\n    titleOffset: NonNullable<ContinuousColorsLegendProps['titleOffset']>\n} = {\n    length: 200,\n    thickness: 16,\n    direction: 'row',\n    tickPosition: 'after',\n    tickSize: 4,\n    tickSpacing: 3,\n    tickOverlap: false,\n    tickFormat: (value: number) => `${value}`,\n    titleAlign: 'start',\n    titleOffset: 4,\n}\n","import { Fragment } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { computeContinuousColorsLegend } from '../compute'\nimport { ContinuousColorsLegendProps } from '../types'\nimport { continuousColorsLegendDefaults } from '../defaults'\n\nexport const ContinuousColorsLegendSvg = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        ticks: computedTicks,\n        colorStops,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const theme = useTheme()\n\n    const id = `ContinuousColorsLegendSvgGradient.${direction}.${colorStops\n        .map(stop => stop.offset)\n        .join('_')}`\n\n    return (\n        <g>\n            <defs>\n                <linearGradient\n                    id={id}\n                    x1={gradientX1}\n                    y1={gradientY1}\n                    x2={gradientX2}\n                    y2={gradientY2}\n                >\n                    {colorStops.map(colorStop => (\n                        <stop {...colorStop} />\n                    ))}\n                </linearGradient>\n            </defs>\n            {titleText && (\n                <text\n                    transform={`translate(${titleX}, ${titleY}) rotate(${titleRotation})`}\n                    textAnchor={titleHorizontalAlign}\n                    dominantBaseline={titleVerticalAlign}\n                    style={theme.legends.title.text}\n                >\n                    {titleText}\n                </text>\n            )}\n            <rect width={width} height={height} fill={`url(#${id}`} />\n            {computedTicks.map((tick, index) => (\n                <Fragment key={index}>\n                    <line\n                        x1={tick.x1}\n                        y1={tick.y1}\n                        x2={tick.x2}\n                        y2={tick.y2}\n                        style={theme.legends.ticks.line}\n                    />\n                    <text\n                        x={tick.textX}\n                        y={tick.textY}\n                        textAnchor={tick.textHorizontalAlign}\n                        dominantBaseline={tick.textVerticalAlign}\n                        style={theme.legends.ticks.text}\n                    >\n                        {tick.text}\n                    </text>\n                </Fragment>\n            ))}\n        </g>\n    )\n}\n","import { AnchoredContinuousColorsLegendProps } from '../types'\nimport { computePositionFromAnchor } from '../compute'\nimport { continuousColorsLegendDefaults } from '../defaults'\nimport { ContinuousColorsLegendSvg } from './ContinuousColorsLegendSvg'\n\nexport const AnchoredContinuousColorsLegendSvg = ({\n    containerWidth,\n    containerHeight,\n    anchor,\n    translateX = 0,\n    translateY = 0,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    ...legendProps\n}: AnchoredContinuousColorsLegendProps) => {\n    let width: number\n    let height: number\n    if (direction === 'row') {\n        width = length\n        height = thickness\n    } else {\n        width = thickness\n        height = length\n    }\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <g transform={`translate(${x}, ${y})`}>\n            <ContinuousColorsLegendSvg\n                length={length}\n                thickness={thickness}\n                direction={direction}\n                {...legendProps}\n            />\n        </g>\n    )\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n\n        if (reverse) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse, separator, valueFormat])\n}\n"],"names":["pi","Math","PI","tau","epsilon","tauEpsilon","Path","this","_x0","_y0","_x1","_y1","_","path","prototype","constructor","moveTo","x","y","closePath","lineTo","quadraticCurveTo","x1","y1","bezierCurveTo","x2","y2","arcTo","r","x0","y0","x21","y21","x01","y01","l01_2","Error","abs","x20","y20","l21_2","l20_2","l21","sqrt","l01","l","tan","acos","t01","t21","arc","a0","a1","ccw","dx","cos","dy","sin","cw","da","rect","w","h","toString","defined","context","curve","output","line","data","i","d","buffer","n","length","defined0","lineStart","lineEnd","point","arguments","p","width","height","margin","top","right","bottom","left","xScale","type","xFormat","format","enabled","yScale","min","max","stacked","reverse","yFormat","LineDefaultProps","axisTop","enable","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","axisRight","axisBottom","legendPosition","axisLeft","enableGridX","enableGridY","colors","lineWidth","enablePoints","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","enablePointLabel","pointLabel","pointLabelYOffset","enableArea","areaBlendMode","areaBaselineValue","areaOpacity","isInteractive","enableSlices","debugSlices","enableCrosshair","crosshairType","generateLightDataSet","generateSeries","generateHeavyDataSet","range","settingsMapper","value","mapFormat","mapAxis","exclude","allFlavors","props","key","group","flavors","help","description","required","control","disabled","choices","map","v","label","disabledValue","defaultValue","chartDimensions","defaults","lineCurvePropKeys","themeProperty","ordinalColors","step","blendMode","target","defsProperties","unit","choice","chartGrid","values","xDefault","yDefault","axes","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","symbolShape","itemDirection","itemTextColor","onClick","console","log","JSON","stringify","effects","on","style","itemBackground","itemOpacity","motionProperties","groups","groupProperties","computeCartesianTicks","translate","axis","scale","ticksPosition","tickValues","engine","getScaleTicks","textProps","textPropsByEngine","position","centerScale","lineX","lineY","text","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","ticks","Date","valueOf","getFormatter","formatter","timeFormat","d3Format","computeGridLines","_values","Array","isArray","lines","memoizedAxisTick","memo","_value","textAnchor","animatedProps","useTheme","useMemo","opacity","cursor","event","_jsxs","animated","g","transform","_jsx","dominantBaseline","textTransform","memoizedAxis","renderTick","AxisTick","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","config","useSpring","lineX2","lineY2","immediate","transition","useTransition","keys","t","tick","initial","enter","update","leave","transitionProps","_state","tickIndex","React","rotate","domain","axisPropTypes","PropTypes","axisPropType","positions","Axes","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","_format","save","font","fontWeight","fontSize","fontFamily","strokeWidth","Number","lineCap","stroke","strokeStyle","beginPath","forEach","degreesToRadians","fill","fillStyle","fillText","String","restore","renderAxesToCanvas","renderGridLinesToCanvas","continuousColorsLegendDefaults","thickness","tickPosition","tickSpacing","tickOverlap","tickFormat","titleAlign","titleOffset","zeroPadding","computeDimensions","item","_padding","padding","itemCount","horizontalPadding","verticalPadding","spacing","computePositionFromAnchor","containerWidth","containerHeight","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","symbolSpacing","computeContinuousColorsLegend","title","positionScale","scaleLinear","thresholds","titleX","titleY","titleRotation","titleVerticalAlign","textVerticalAlign","textHorizontalAlign","colorStops","computeContinuousColorScaleColorStops","getValueFormatter","computedTicks","gradientY1","gradientX2","push","gradientX1","gradientY2","titleText","titleHorizontalAlign","ContinuousColorsLegendSvg","id","stop","offset","join","colorStop","legends","Fragment","AnchoredContinuousColorsLegendSvg","legendProps","symbolByShape","circle","size","borderWidth","borderColor","cx","cy","pointerEvents","diamond","square","triangle","LegendSvgItem","textColor","background","symbolBorderWidth","symbolBorderColor","onMouseEnter","onMouseLeave","toggleSerie","useState","setStyle","handleMouseEnter","useCallback","filter","reduce","acc","effect","handleMouseLeave","some","handler","SymbolShape","color","hidden","symbol","userSelect","LegendSvg","xStep","yStep","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","itemX","itemY","fillRect","renderContinuousColorLegendToCanvas","_ticks","initialStyles","gradient","createLinearGradient","addColorStop","stopColor","useQuantizeColorScaleLegendData","overriddenDomain","valueFormat","separator","items","domainValue","invertExtent","extent","LegendPropShape","isRequired"],"sourceRoot":""}