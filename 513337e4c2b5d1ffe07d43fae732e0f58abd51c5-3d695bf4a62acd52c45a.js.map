{"version":3,"file":"513337e4c2b5d1ffe07d43fae732e0f58abd51c5-3d695bf4a62acd52c45a.js","mappings":"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","sources":["webpack://nivo-website/../src/bump/compute.ts","webpack://nivo-website/../src/bump/hooks.ts","webpack://nivo-website/../src/bump/Point.tsx","webpack://nivo-website/../src/bump/defaults.ts","webpack://nivo-website/../src/bump/LineTooltip.tsx","webpack://nivo-website/../src/bump/Line.tsx","webpack://nivo-website/../src/bump/LinesLabels.tsx","webpack://nivo-website/../src/bump/Points.tsx","webpack://nivo-website/../src/bump/Bump.tsx","webpack://nivo-website/../src/bump/ResponsiveBump.tsx","webpack://nivo-website/../src/area-bump/hooks.ts","webpack://nivo-website/../src/area-bump/compute.ts","webpack://nivo-website/../src/area-bump/Area.tsx","webpack://nivo-website/../src/area-bump/AreasLabels.tsx","webpack://nivo-website/../src/area-bump/defaults.ts","webpack://nivo-website/../src/area-bump/AreaTooltip.tsx","webpack://nivo-website/../src/area-bump/AreaBump.tsx","webpack://nivo-website/../src/area-bump/ResponsiveAreaBump.tsx"],"sourcesContent":["import { scalePoint } from 'd3-scale'\nimport { castPointScale } from '@nivo/scales'\nimport {\n    BumpDataProps,\n    BumpDatum,\n    BumpComputedSerie,\n    BumpSeriePoint,\n    BumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    width,\n    height,\n    data,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    xPadding: number\n    xOuterPadding: number\n    yOuterPadding: number\n}) => {\n    const xValuesSet = new Set<Datum['x']>()\n    const yValuesSet = new Set<number>()\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            xValuesSet.add(datum.x)\n            if (datum.y !== null) {\n                yValuesSet.add(datum.y)\n            }\n        })\n    })\n\n    const xValues: Datum['x'][] = Array.from(xValuesSet)\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(xValues).range([0, width]).padding(xOuterPadding)\n    )\n\n    const yValues: number[] = Array.from(yValuesSet).sort((a, b) => a - b)\n    const yScale = castPointScale<number>(\n        scalePoint<number>().domain(yValues).range([0, height]).padding(yOuterPadding)\n    )\n\n    const linePointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series: Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>[] =\n        data.map(rawSerie => {\n            const serie: Omit<\n                BumpComputedSerie<Datum, ExtraProps>,\n                'color' | 'opacity' | 'lineWidth'\n            > = {\n                id: rawSerie.id,\n                data: rawSerie,\n                points: [],\n                linePoints: [],\n            }\n\n            rawSerie.data.forEach((datum, i) => {\n                let x = null\n                let y = null\n\n                if (datum.y !== null) {\n                    x = xScale(datum.x)!\n                    y = yScale(datum.y)!\n                }\n\n                const point: BumpSeriePoint<Datum, ExtraProps> = {\n                    id: `${rawSerie.id}.${i}`,\n                    serie: rawSerie,\n                    data: datum,\n                    x: x as number,\n                    y,\n                }\n                serie.points.push(point)\n\n                // only add pre transition point if the datum is not empty\n                if (point.x !== null) {\n                    if (i === 0) {\n                        serie.linePoints.push([0, point.y])\n                    } else {\n                        serie.linePoints.push([point.x - linePointPadding, point.y])\n                    }\n                }\n\n                serie.linePoints.push([point.x, point.y])\n\n                // only add post transition point if the datum is not empty\n                if (x !== null) {\n                    if (i === rawSerie.data.length - 1 && x) {\n                        serie.linePoints.push([width, point.y])\n                    } else {\n                        serie.linePoints.push([point.x + linePointPadding, point.y])\n                    }\n                }\n\n                // remove points having null coordinates\n                serie.points = serie.points.filter(point => point.x !== null)\n            })\n\n            return serie\n        })\n\n    return {\n        series,\n        xScale,\n        yScale,\n    }\n}\n","import { createElement, useMemo, useCallback, useState } from 'react'\nimport { line as d3Line, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    BumpInterpolation,\n    BumpCommonProps,\n    BumpDatum,\n    DefaultBumpDatum,\n    BumpDataProps,\n    BumpComputedSerie,\n    BumpPoint,\n    BumpLabel,\n    BumpLabelData,\n    BumpSerieExtraProps,\n} from './types'\nimport { computeSeries } from './compute'\n\nconst useLineGenerator = (interpolation: BumpInterpolation) =>\n    useMemo(\n        () =>\n            d3Line<[number, number | null]>()\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear)\n                .defined(d => d[0] !== null && d[1] !== null),\n\n        [interpolation]\n    )\n\nconst useSerieDerivedProp = <Target, Output extends string | number>(\n    instruction: ((target: Target) => Output) | Output\n): ((target: Target) => Output) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useSerieStyle = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    isInteractive,\n    activeSerieIds,\n}: {\n    lineWidth: BumpCommonProps<Datum, ExtraProps>['lineWidth']\n    activeLineWidth: BumpCommonProps<Datum, ExtraProps>['activeLineWidth']\n    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>['inactiveLineWidth']\n    opacity: BumpCommonProps<Datum, ExtraProps>['opacity']\n    activeOpacity: BumpCommonProps<Datum, ExtraProps>['activeOpacity']\n    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>['inactiveOpacity']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Serie = Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>\n\n    const getLineWidth = useSerieDerivedProp<Serie, number>(lineWidth)\n    const getActiveLineWidth = useSerieDerivedProp<Serie, number>(activeLineWidth)\n    const getInactiveLineWidth = useSerieDerivedProp<Serie, number>(inactiveLineWidth)\n\n    const getOpacity = useSerieDerivedProp<Serie, number>(opacity)\n    const getActiveOpacity = useSerieDerivedProp<Serie, number>(activeOpacity)\n    const getInactiveOpacity = useSerieDerivedProp<Serie, number>(inactiveOpacity)\n\n    const getNormalStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getOpacity(serie),\n            lineWidth: getLineWidth(serie),\n        }),\n        [getLineWidth, getOpacity]\n    )\n    const getActiveStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getActiveOpacity(serie),\n            lineWidth: getActiveLineWidth(serie),\n        }),\n        [getActiveLineWidth, getActiveOpacity]\n    )\n    const getInactiveStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getInactiveOpacity(serie),\n            lineWidth: getInactiveLineWidth(serie),\n        }),\n        [getInactiveLineWidth, getInactiveOpacity]\n    )\n\n    return useCallback(\n        (serie: Serie) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(serie)\n            if (activeSerieIds.includes(serie.id)) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nconst usePointStyle = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    isInteractive,\n    activeSerieIds,\n}: {\n    pointSize: BumpCommonProps<Datum, ExtraProps>['pointSize']\n    activePointSize: BumpCommonProps<Datum, ExtraProps>['activePointSize']\n    inactivePointSize: BumpCommonProps<Datum, ExtraProps>['inactivePointSize']\n    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>['pointBorderWidth']\n    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['activePointBorderWidth']\n    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['inactivePointBorderWidth']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Point = Omit<BumpPoint<Datum, ExtraProps>, 'size' | 'borderWidth'>\n\n    const getSize = useSerieDerivedProp(pointSize)\n    const getActiveSize = useSerieDerivedProp(activePointSize)\n    const getInactiveSize = useSerieDerivedProp(inactivePointSize)\n\n    const getBorderWidth = useSerieDerivedProp(pointBorderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp(activePointBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp(inactivePointBorderWidth)\n\n    const getNormalStyle = useCallback(\n        (point: Point) => ({\n            size: getSize(point),\n            borderWidth: getBorderWidth(point),\n        }),\n        [getSize, getBorderWidth]\n    )\n    const getActiveStyle = useCallback(\n        (point: Point) => ({\n            size: getActiveSize(point),\n            borderWidth: getActiveBorderWidth(point),\n        }),\n        [getActiveSize, getActiveBorderWidth]\n    )\n    const getInactiveStyle = useCallback(\n        (point: Point) => ({\n            size: getInactiveSize(point),\n            borderWidth: getInactiveBorderWidth(point),\n        }),\n        [getInactiveSize, getInactiveBorderWidth]\n    )\n\n    return useCallback(\n        (point: Point) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(point)\n            if (activeSerieIds.includes(point.serie.id)) return getActiveStyle(point)\n            return getInactiveStyle(point)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nexport const useBump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>({\n    width,\n    height,\n    data,\n    interpolation,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    colors,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointColor,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    pointBorderColor,\n    isInteractive,\n    defaultActiveSerieIds,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    interpolation: BumpCommonProps<Datum, ExtraProps>['interpolation']\n    xPadding: BumpCommonProps<Datum, ExtraProps>['xPadding']\n    xOuterPadding: BumpCommonProps<Datum, ExtraProps>['xOuterPadding']\n    yOuterPadding: BumpCommonProps<Datum, ExtraProps>['yOuterPadding']\n    lineWidth: BumpCommonProps<Datum, ExtraProps>['lineWidth']\n    activeLineWidth: BumpCommonProps<Datum, ExtraProps>['activeLineWidth']\n    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>['inactiveLineWidth']\n    colors: BumpCommonProps<Datum, ExtraProps>['colors']\n    opacity: BumpCommonProps<Datum, ExtraProps>['opacity']\n    activeOpacity: BumpCommonProps<Datum, ExtraProps>['activeOpacity']\n    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>['inactiveOpacity']\n    pointSize: BumpCommonProps<Datum, ExtraProps>['pointSize']\n    activePointSize: BumpCommonProps<Datum, ExtraProps>['activePointSize']\n    inactivePointSize: BumpCommonProps<Datum, ExtraProps>['inactivePointSize']\n    pointColor: BumpCommonProps<Datum, ExtraProps>['pointColor']\n    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>['pointBorderWidth']\n    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['activePointBorderWidth']\n    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['inactivePointBorderWidth']\n    pointBorderColor: BumpCommonProps<Datum, ExtraProps>['pointBorderColor']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    defaultActiveSerieIds: string[]\n}) => {\n    const [activeSerieIds, setActiveSerieIds] = useState<string[]>(defaultActiveSerieIds)\n\n    const {\n        series: rawSeries,\n        xScale,\n        yScale,\n    } = useMemo(\n        () =>\n            computeSeries<Datum, ExtraProps>({\n                width,\n                height,\n                data,\n                xPadding,\n                xOuterPadding,\n                yOuterPadding,\n            }),\n        [width, height, data, xPadding, xOuterPadding, yOuterPadding]\n    )\n\n    const lineGenerator = useLineGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle<Datum, ExtraProps>({\n        lineWidth,\n        activeLineWidth,\n        inactiveLineWidth,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        isInteractive,\n        activeSerieIds,\n    })\n\n    const series: BumpComputedSerie<Datum, ExtraProps>[] = useMemo(\n        () =>\n            rawSeries.map(serie => ({\n                ...serie,\n                color: getColor(serie.data),\n                ...getSerieStyle(serie),\n            })),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const getPointStyle = usePointStyle<Datum, ExtraProps>({\n        pointSize,\n        activePointSize,\n        inactivePointSize,\n        pointBorderWidth,\n        activePointBorderWidth,\n        inactivePointBorderWidth,\n        isInteractive,\n        activeSerieIds,\n    })\n    const points: BumpPoint<Datum, ExtraProps>[] = useMemo(() => {\n        const pts: BumpPoint<Datum, ExtraProps>[] = []\n        series.forEach(serie => {\n            serie.points.forEach(rawPoint => {\n                // @ts-ignore\n                const point: BumpPoint<Datum, ExtraProps> = {\n                    ...rawPoint,\n                    serie,\n                    isActive: activeSerieIds.includes(serie.id),\n                    isInactive: activeSerieIds.length > 0 && !activeSerieIds.includes(serie.id),\n                }\n                point.color = getPointColor(point)\n                point.borderColor = getPointBorderColor(point)\n\n                pts.push({\n                    ...point,\n                    ...getPointStyle(point),\n                })\n            })\n        })\n\n        return pts\n    }, [series, getPointColor, getPointBorderColor, getPointStyle, activeSerieIds])\n\n    return {\n        xScale,\n        yScale,\n        series,\n        points,\n        lineGenerator,\n        activeSerieIds,\n        setActiveSerieIds,\n    }\n}\n\nexport const useBumpSerieHandlers = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: BumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: BumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: BumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: BumpCommonProps<Datum, ExtraProps>['tooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setActiveSerieIds([serie.id])\n            onMouseEnter && onMouseEnter(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setActiveSerieIds, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove && onMouseMove(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useBumpSeriesLabels = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>({\n    series,\n    position,\n    padding,\n    color,\n    getLabel,\n}: {\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>\n}) => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor: 'start' | 'end'\n        let signedPadding: number\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        const labels: BumpLabelData<Datum, ExtraProps>[] = []\n        series.forEach(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie.data)\n            }\n\n            const point =\n                position === 'start'\n                    ? serie.linePoints[0]\n                    : serie.linePoints[serie.linePoints.length - 1]\n\n            // exclude labels for series having missing data at the beginning/end\n            if (point[0] === null || point[1] === null) {\n                return\n            }\n\n            labels.push({\n                id: serie.id,\n                label,\n                x: point[0] + signedPadding,\n                y: point[1],\n                color: getColor(serie),\n                opacity: serie.opacity,\n                serie,\n                textAnchor,\n            })\n        })\n\n        return labels\n    }, [series, position, padding, getColor, getLabel])\n}\n","import { SVGAttributes } from 'react'\nimport { useSpring, animated, to } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BumpDatum, BumpPoint, BumpSerieExtraProps } from './types'\n\nconst pointStyle: SVGAttributes<SVGCircleElement>['style'] = { pointerEvents: 'none' }\n\ninterface PointProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    point: BumpPoint<Datum, ExtraProps>\n}\n\nexport const Point = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    point,\n}: PointProps<Datum, ExtraProps>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring<{\n        x: number\n        y: number\n        radius: number\n        color: string\n        borderWidth: number\n    }>({\n        x: point.x,\n        y: point.y,\n        radius: point.size / 2,\n        color: point.color,\n        borderWidth: point.borderWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            data-testid={`point.${point.serie.id}.${point.data.x}`}\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            r={to(animatedProps.radius, v => Math.max(v, 0))}\n            fill={animatedProps.color}\n            strokeWidth={animatedProps.borderWidth}\n            stroke={point.borderColor}\n            style={pointStyle}\n        />\n    )\n}\n","import { ModernMotionProps } from '@nivo/core'\nimport { LineTooltip } from './LineTooltip'\nimport { Point } from './Point'\nimport { BumpCommonProps, BumpPointComponent, DefaultBumpDatum } from './types'\n\nconst commonDefaultProps: Omit<\n    BumpCommonProps<DefaultBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'margin'\n    | 'theme'\n    | 'axisRight'\n    | 'renderWrapper'\n> = {\n    layers: ['grid', 'axes', 'labels', 'lines', 'points'],\n\n    interpolation: 'smooth',\n    xPadding: 0.6,\n    xOuterPadding: 0.5,\n    yOuterPadding: 0.5,\n\n    colors: { scheme: 'nivo' },\n    lineWidth: 2,\n    activeLineWidth: 4,\n    inactiveLineWidth: 1,\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.3,\n\n    startLabel: false,\n    startLabelPadding: 16,\n    startLabelTextColor: { from: 'color' },\n    endLabel: true,\n    endLabelPadding: 16,\n    endLabelTextColor: { from: 'color' },\n\n    pointSize: 6,\n    activePointSize: 8,\n    inactivePointSize: 4,\n    pointColor: { from: 'serie.color' },\n    pointBorderWidth: 0,\n    activePointBorderWidth: 0,\n    inactivePointBorderWidth: 0,\n    pointBorderColor: { from: 'serie.color', modifiers: [['darker', 1.4]] },\n\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisBottom: {},\n    axisLeft: {},\n\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    tooltip: LineTooltip,\n\n    role: 'img',\n}\n\nexport const bumpSvgDefaultProps: typeof commonDefaultProps & {\n    pointComponent: BumpPointComponent<DefaultBumpDatum, Record<string, unknown>>\n    animate: boolean\n    motionConfig: ModernMotionProps['motionConfig']\n} = {\n    ...commonDefaultProps,\n    pointComponent: Point,\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BumpComputedSerie, BumpDatum, BumpSerieExtraProps } from './types'\n\ninterface LineTooltipProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const LineTooltip = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n}: LineTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip\n        data-testid={`tooltip.${serie.data.id}`}\n        id={serie.data.id}\n        enableChip={true}\n        color={serie.color}\n    />\n)\n","import { useSpring, animated } from '@react-spring/web'\nimport { Line as D3Line } from 'd3-shape'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { BumpCommonProps, BumpComputedSerie, BumpDatum, BumpSerieExtraProps } from './types'\nimport { useBumpSerieHandlers } from './hooks'\n\ninterface LineProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    lineGenerator: D3Line<[number, number | null]>\n    yStep: number\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: BumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: BumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: BumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: BumpCommonProps<Datum, ExtraProps>['tooltip']\n}\n\nexport const Line = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n    lineGenerator,\n    yStep,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: LineProps<Datum, ExtraProps>) => {\n    const handlers = useBumpSerieHandlers<Datum, ExtraProps>({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setActiveSerieIds,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const linePath = lineGenerator(serie.linePoints) || ''\n\n    const animatedPath = useAnimatedPath(linePath)\n    const animatedProps = useSpring<{\n        color: string\n        opacity: number\n        lineWidth: number\n    }>({\n        color: serie.color,\n        opacity: serie.opacity,\n        lineWidth: serie.lineWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            <animated.path\n                data-testid={`line.${serie.id}`}\n                fill=\"none\"\n                d={animatedPath}\n                stroke={animatedProps.color}\n                strokeWidth={animatedProps.lineWidth}\n                strokeLinecap=\"round\"\n                strokeOpacity={animatedProps.opacity}\n                style={{ pointerEvents: 'none' }}\n            />\n            {isInteractive && (\n                <path\n                    data-testid={`line.${serie.id}.interactive`}\n                    fill=\"none\"\n                    stroke=\"red\"\n                    strokeOpacity={0}\n                    strokeWidth={yStep}\n                    d={linePath}\n                    strokeLinecap=\"butt\"\n                    onMouseEnter={handlers.onMouseEnter}\n                    onMouseMove={handlers.onMouseMove}\n                    onMouseLeave={handlers.onMouseLeave}\n                    onClick={handlers.onClick}\n                />\n            )}\n        </>\n    )\n}\n","import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { BumpComputedSerie, BumpDatum, BumpLabel, BumpSerieExtraProps } from './types'\nimport { useBumpSeriesLabels } from './hooks'\n\ninterface LineLabelsProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n}\n\nexport const LinesLabels = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    series,\n    getLabel,\n    position,\n    padding,\n    color,\n}: LineLabelsProps<Datum, ExtraProps>) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useBumpSeriesLabels<Datum, ExtraProps>({\n        series,\n        getLabel,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings<{\n        x: number\n        y: number\n        opacity: number\n    }>(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        data-testid={`label.${position}.${label.serie.id}`}\n                        key={label.id}\n                        x={animatedProps.x}\n                        y={animatedProps.y}\n                        textAnchor={label.textAnchor}\n                        dominantBaseline=\"central\"\n                        opacity={animatedProps.opacity}\n                        style={{\n                            ...theme.labels.text,\n                            fill: label.color,\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n","import { createElement } from 'react'\nimport { BumpDatum, BumpPoint, BumpPointComponent, BumpSerieExtraProps } from './types'\n\ninterface PointsProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    points: BumpPoint<Datum, ExtraProps>[]\n    pointComponent: BumpPointComponent<Datum, ExtraProps>\n}\n\nexport const Points = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    points,\n    pointComponent,\n}: PointsProps<Datum, ExtraProps>) => (\n    <>\n        {points.map(point =>\n            createElement(pointComponent, {\n                key: point.id,\n                point,\n            })\n        )}\n    </>\n)\n","import { createElement, useMemo, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport {\n    BumpCustomLayerProps,\n    BumpDatum,\n    BumpLayerId,\n    BumpSerieExtraProps,\n    BumpSvgProps,\n    DefaultBumpDatum,\n} from './types'\nimport { useBump } from './hooks'\nimport { bumpSvgDefaultProps } from './defaults'\nimport { Line } from './Line'\nimport { LinesLabels } from './LinesLabels'\nimport { Points } from './Points'\n\ntype InnerBumpProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> = Omit<\n    BumpSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBump = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    data,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    layers = bumpSvgDefaultProps.layers as NonNullable<BumpSvgProps<Datum, ExtraProps>['layers']>,\n\n    interpolation = bumpSvgDefaultProps.interpolation,\n    xPadding = bumpSvgDefaultProps.xPadding,\n    xOuterPadding = bumpSvgDefaultProps.xOuterPadding,\n    yOuterPadding = bumpSvgDefaultProps.yOuterPadding,\n\n    colors = bumpSvgDefaultProps.colors as NonNullable<BumpSvgProps<Datum, ExtraProps>['colors']>,\n    lineWidth = bumpSvgDefaultProps.lineWidth,\n    activeLineWidth = bumpSvgDefaultProps.activeLineWidth,\n    inactiveLineWidth = bumpSvgDefaultProps.inactiveLineWidth,\n    opacity = bumpSvgDefaultProps.opacity,\n    activeOpacity = bumpSvgDefaultProps.activeOpacity,\n    inactiveOpacity = bumpSvgDefaultProps.inactiveOpacity,\n\n    startLabel = bumpSvgDefaultProps.startLabel as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['startLabel']\n    >,\n    startLabelPadding = bumpSvgDefaultProps.startLabelPadding,\n    startLabelTextColor = bumpSvgDefaultProps.startLabelTextColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['startLabelTextColor']\n    >,\n    endLabel = bumpSvgDefaultProps.endLabel as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['endLabel']\n    >,\n    endLabelPadding = bumpSvgDefaultProps.endLabelPadding,\n    endLabelTextColor = bumpSvgDefaultProps.endLabelTextColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['endLabelTextColor']\n    >,\n\n    pointComponent = bumpSvgDefaultProps.pointComponent as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointComponent']\n    >,\n    pointSize = bumpSvgDefaultProps.pointSize,\n    activePointSize = bumpSvgDefaultProps.activePointSize,\n    inactivePointSize = bumpSvgDefaultProps.inactivePointSize,\n    pointColor = bumpSvgDefaultProps.pointColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointColor']\n    >,\n    pointBorderWidth = bumpSvgDefaultProps.pointBorderWidth,\n    activePointBorderWidth = bumpSvgDefaultProps.activePointBorderWidth,\n    inactivePointBorderWidth = bumpSvgDefaultProps.inactivePointBorderWidth,\n    pointBorderColor = bumpSvgDefaultProps.pointBorderColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointBorderColor']\n    >,\n\n    enableGridX = bumpSvgDefaultProps.enableGridX,\n    enableGridY = bumpSvgDefaultProps.enableGridY,\n    axisTop = bumpSvgDefaultProps.axisTop,\n    axisRight,\n    axisBottom = bumpSvgDefaultProps.axisBottom,\n    axisLeft = bumpSvgDefaultProps.axisLeft,\n\n    isInteractive = bumpSvgDefaultProps.isInteractive,\n    defaultActiveSerieIds = bumpSvgDefaultProps.defaultActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = bumpSvgDefaultProps.tooltip as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['tooltip']\n    >,\n    role = bumpSvgDefaultProps.role,\n}: InnerBumpProps<Datum, ExtraProps>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { series, points, xScale, yScale, lineGenerator, activeSerieIds, setActiveSerieIds } =\n        useBump<Datum, ExtraProps>({\n            width: innerWidth,\n            height: innerHeight,\n            data,\n            interpolation,\n            xPadding,\n            xOuterPadding,\n            yOuterPadding,\n            lineWidth,\n            activeLineWidth,\n            inactiveLineWidth,\n            colors,\n            opacity,\n            activeOpacity,\n            inactiveOpacity,\n            pointSize,\n            activePointSize,\n            inactivePointSize,\n            pointColor,\n            pointBorderWidth,\n            activePointBorderWidth,\n            inactivePointBorderWidth,\n            pointBorderColor,\n            isInteractive,\n            defaultActiveSerieIds,\n        })\n\n    const layerById: Record<BumpLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        labels: null,\n        lines: null,\n        points: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('lines')) {\n        layerById.lines = (\n            <Fragment key=\"lines\">\n                {series.map(serie => (\n                    <Line<Datum, ExtraProps>\n                        key={serie.id}\n                        serie={serie}\n                        setActiveSerieIds={setActiveSerieIds}\n                        lineGenerator={lineGenerator}\n                        yStep={yScale.step()}\n                        isInteractive={isInteractive}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('points')) {\n        layerById.points = (\n            <Points<Datum, ExtraProps>\n                key=\"points\"\n                pointComponent={pointComponent}\n                points={points}\n            />\n        )\n    }\n\n    if (layers.includes('labels')) {\n        layerById.labels = (\n            <Fragment key=\"legends\">\n                {startLabel !== false && (\n                    <LinesLabels<Datum, ExtraProps>\n                        series={series}\n                        getLabel={startLabel}\n                        position=\"start\"\n                        padding={startLabelPadding}\n                        color={startLabelTextColor}\n                    />\n                )}\n                {endLabel !== false && (\n                    <LinesLabels<Datum, ExtraProps>\n                        series={series}\n                        getLabel={endLabel}\n                        position=\"end\"\n                        padding={endLabelPadding}\n                        color={endLabelTextColor}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    const customLayerProps: BumpCustomLayerProps<Datum, ExtraProps> = useMemo(\n        () => ({\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            xScale,\n            yScale,\n            activeSerieIds,\n            setActiveSerieIds,\n        }),\n        [\n            activeSerieIds,\n            setActiveSerieIds,\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            xScale,\n            yScale,\n        ]\n    )\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>({\n    isInteractive = bumpSvgDefaultProps.isInteractive,\n    animate = bumpSvgDefaultProps.animate,\n    motionConfig = bumpSvgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BumpSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBump<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { BumpDatum, BumpSerieExtraProps, BumpSvgProps, DefaultBumpDatum } from './types'\nimport { Bump } from './Bump'\n\nexport const ResponsiveBump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>(\n    props: Omit<BumpSvgProps<Datum, ExtraProps>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <Bump<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { createElement, useMemo, useCallback, useState } from 'react'\nimport { area as d3Area, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { computeSeries } from './compute'\nimport {\n    AreaBumpAreaPoint,\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDataProps,\n    AreaBumpDatum,\n    AreaBumpInterpolation,\n    AreaBumpLabel,\n    AreaBumpLabelData,\n    AreaBumpSerieExtraProps,\n    DefaultAreaBumpDatum,\n} from './types'\n\nconst useAreaBumpSeries = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n}) =>\n    useMemo(\n        () => computeSeries<Datum, ExtraProps>({ data, width, height, align, spacing, xPadding }),\n        [data, width, height, align, spacing, xPadding]\n    )\n\nconst useAreaGenerator = (interpolation: AreaBumpInterpolation) =>\n    useMemo(\n        () =>\n            d3Area<AreaBumpAreaPoint>()\n                .x(d => d.x)\n                .y0(d => d.y0)\n                .y1(d => d.y1)\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear),\n        [interpolation]\n    )\n\nconst useSerieDerivedProp = <Target, Output extends string | number>(\n    instruction: ((target: Target) => Output) | Output\n): ((target: Target) => Output) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useSerieStyle = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    activeSerieIds,\n}: {\n    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['fillOpacity']\n    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeFillOpacity']\n    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveFillOpacity']\n    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>['borderWidth']\n    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderWidth']\n    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderWidth']\n    borderColor: AreaBumpCommonProps<Datum, ExtraProps>['borderColor']\n    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['borderOpacity']\n    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderOpacity']\n    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderOpacity']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Serie = Omit<\n        AreaBumpComputedSerie<Datum, ExtraProps>,\n        'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n    >\n\n    const getFillOpacity = useSerieDerivedProp<Serie, number>(fillOpacity)\n    const getActiveFillOpacity = useSerieDerivedProp<Serie, number>(activeFillOpacity)\n    const getInactiveFillOpacity = useSerieDerivedProp<Serie, number>(inactiveFillOpacity)\n\n    const getBorderWidth = useSerieDerivedProp<Serie, number>(borderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp<Serie, number>(activeBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp<Serie, number>(inactiveBorderWidth)\n\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const getBorderOpacity = useSerieDerivedProp<Serie, number>(borderOpacity)\n    const getActiveBorderOpacity = useSerieDerivedProp<Serie, number>(activeBorderOpacity)\n    const getInactiveBorderOpacity = useSerieDerivedProp<Serie, number>(inactiveBorderOpacity)\n\n    const getNormalStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getFillOpacity(serie),\n            borderWidth: getBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getBorderOpacity(serie),\n        }),\n        [getFillOpacity, getBorderWidth, getBorderColor, getBorderOpacity]\n    )\n    const getActiveStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getActiveFillOpacity(serie),\n            borderWidth: getActiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getActiveBorderOpacity(serie),\n        }),\n        [getActiveFillOpacity, getActiveBorderWidth, getBorderColor, getActiveBorderOpacity]\n    )\n    const getInactiveStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getInactiveFillOpacity(serie),\n            borderWidth: getInactiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getInactiveBorderOpacity(serie),\n        }),\n        [getInactiveFillOpacity, getInactiveBorderWidth, getBorderColor, getInactiveBorderOpacity]\n    )\n\n    return useCallback(\n        (serie: Serie) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(serie)\n            if (activeSerieIds.includes(serie.id)) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nexport const useAreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n    interpolation,\n    colors,\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    defaultActiveSerieIds,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n    interpolation: AreaBumpCommonProps<Datum, ExtraProps>['interpolation']\n    colors: AreaBumpCommonProps<Datum, ExtraProps>['colors']\n    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['fillOpacity']\n    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeFillOpacity']\n    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveFillOpacity']\n    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>['borderWidth']\n    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderWidth']\n    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderWidth']\n    borderColor: AreaBumpCommonProps<Datum, ExtraProps>['borderColor']\n    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['borderOpacity']\n    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderOpacity']\n    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderOpacity']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    defaultActiveSerieIds: string[]\n}) => {\n    const [activeSerieIds, setActiveSerieIds] = useState<string[]>(defaultActiveSerieIds)\n\n    const {\n        series: rawSeries,\n        xScale,\n        heightScale,\n    } = useAreaBumpSeries<Datum, ExtraProps>({\n        data,\n        width,\n        height,\n        align,\n        spacing,\n        xPadding,\n    })\n\n    const areaGenerator = useAreaGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle<Datum, ExtraProps>({\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        activeSerieIds,\n    })\n\n    const series: AreaBumpComputedSerie<Datum, ExtraProps>[] = useMemo(\n        () =>\n            rawSeries.map(serie => {\n                const serieWithColor = {\n                    ...serie,\n                    color: getColor(serie.data),\n                }\n\n                return {\n                    ...serieWithColor,\n                    ...getSerieStyle(serieWithColor),\n                }\n            }),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    return {\n        series,\n        xScale,\n        heightScale,\n        areaGenerator,\n        activeSerieIds,\n        setActiveSerieIds,\n    }\n}\n\nexport const useAreaBumpSerieHandlers = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: AreaBumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: AreaBumpCommonProps<Datum, ExtraProps>['tooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setActiveSerieIds([serie.id])\n            onMouseEnter && onMouseEnter(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setActiveSerieIds, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove && onMouseMove(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useAreaBumpSeriesLabels = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    series,\n    position,\n    padding,\n    color,\n    getLabel,\n}: {\n    series: AreaBumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>\n    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>\n}): AreaBumpLabelData<Datum, ExtraProps>[] => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor: 'start' | 'end'\n        let signedPadding: number\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        return series.map(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie.data)\n            }\n\n            const point =\n                position === 'start' ? serie.points[0] : serie.points[serie.points.length - 1]\n\n            return {\n                id: serie.id,\n                label,\n                x: point.x + signedPadding,\n                y: point.y,\n                color: getColor(serie),\n                opacity: serie.fillOpacity,\n                serie,\n                textAnchor,\n            }\n        })\n    }, [getLabel, series, position, padding, getColor])\n}\n","import { scalePoint, scaleLinear } from 'd3-scale'\nimport { castPointScale, castLinearScale, ScalePoint, ScaleLinear } from '@nivo/scales'\nimport {\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDataProps,\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n}): {\n    series: Omit<\n        AreaBumpComputedSerie<Datum, ExtraProps>,\n        'color' | 'fill' | 'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n    >[]\n    xScale: ScalePoint<Datum['x']>\n    heightScale: ScaleLinear<number>\n} => {\n    const slices = new Map<\n        Datum['x'],\n        {\n            id: Datum['x']\n            total: number\n            x: number\n            values: Map<\n                string,\n                {\n                    serieId: string\n                    value: number\n                    position: number\n                    height: number\n                    beforeHeight: number\n                }\n            >\n        }\n    >()\n\n    let maxSum: number\n    let maxValues: number\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            if (!slices.has(datum.x)) {\n                slices.set(datum.x, {\n                    id: datum.x,\n                    total: 0,\n                    values: new Map(),\n                    x: 0,\n                })\n            }\n\n            const slice = slices.get(datum.x)!\n\n            const total = slice.total + datum.y\n            slice.total = total\n\n            slice.values.set(serie.id, {\n                serieId: serie.id,\n                value: datum.y,\n                position: 0,\n                height: 0,\n                beforeHeight: 0,\n            })\n\n            if (maxSum === undefined || total > maxSum) {\n                maxSum = total\n            }\n            if (maxValues === undefined || slice.values.size > maxValues) {\n                maxValues = slice.values.size\n            }\n        })\n    })\n\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(Array.from(slices.keys())).range([0, width])\n    )\n\n    const heightScale = castLinearScale<number, number>(\n        scaleLinear<number, number>()\n            .domain([0, maxSum!])\n            .range([0, height - maxValues! * spacing])\n    )\n\n    slices.forEach((slice, x) => {\n        slice.x = xScale(x)!\n        const sliceHeight = heightScale(slice.total) + slice.values.size * spacing\n\n        let offset = 0\n        if (align === 'middle') {\n            offset = (height - sliceHeight) / 2\n        } else if (align === 'end') {\n            offset = height - sliceHeight\n        }\n\n        Array.from(slice.values.values())\n            .sort((a, b) => b.value - a.value)\n            .forEach((value, position, all) => {\n                const previousValues = all.filter((_i, pos) => pos < position)\n                const beforeValue = previousValues.reduce((t, v) => t + v.value, 0)\n\n                const sliceValue = slice.values.get(value.serieId)!\n                sliceValue.position = position\n                sliceValue.height = heightScale(value.value)\n                sliceValue.beforeHeight =\n                    heightScale(beforeValue) + offset + spacing * (previousValues.length + 0.5)\n            })\n    })\n\n    const areaPointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series = data.map(serie => {\n        const computedSerie: Omit<\n            AreaBumpComputedSerie<Datum, ExtraProps>,\n            'color' | 'fill' | 'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n        > = {\n            id: serie.id,\n            data: serie,\n            points: [],\n            areaPoints: [],\n        }\n\n        serie.data.forEach((datum, i) => {\n            const slice = slices.get(datum.x)!\n            const position = slice.values.get(serie.id)!\n\n            const x = slice.x\n            const { beforeHeight, height } = position\n            const y = beforeHeight + height / 2\n            const y0 = beforeHeight\n            const y1 = beforeHeight + height\n\n            computedSerie.points.push({\n                x,\n                y,\n                height,\n                data: { ...datum },\n            })\n            if (i > 0) {\n                computedSerie.areaPoints.push({ x: x - areaPointPadding, y0, y1 })\n            }\n            computedSerie.areaPoints.push({ x, y0, y1 })\n            if (i < serie.data.length - 1) {\n                computedSerie.areaPoints.push({ x: x + areaPointPadding, y0, y1 })\n            }\n        })\n\n        return computedSerie\n    })\n\n    return {\n        series,\n        xScale,\n        heightScale,\n    }\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { useAreaBumpSerieHandlers } from './hooks'\nimport {\n    AreaBumpAreaGenerator,\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n} from './types'\n\ninterface AreaProps<Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n    areaGenerator: AreaBumpAreaGenerator\n    blendMode: AreaBumpCommonProps<Datum, ExtraProps>['blendMode']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: AreaBumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: AreaBumpCommonProps<Datum, ExtraProps>['tooltip']\n}\n\nexport const Area = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    serie,\n    areaGenerator,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: AreaProps<Datum, ExtraProps>) => {\n    const handlers = useAreaBumpSerieHandlers<Datum, ExtraProps>({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setActiveSerieIds,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(areaGenerator(serie.areaPoints) || '')\n    const animatedProps = useSpring<{\n        color: string\n        fillOpacity: number\n        stroke: string\n        strokeOpacity: number\n    }>({\n        color: serie.color,\n        fillOpacity: serie.fillOpacity,\n        stroke: serie.borderColor,\n        strokeOpacity: serie.borderOpacity,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            data-testid={`area.${serie.id}`}\n            d={animatedPath}\n            fill={serie.fill ? serie.fill : animatedProps.color}\n            fillOpacity={animatedProps.fillOpacity}\n            stroke={animatedProps.stroke}\n            strokeWidth={serie.borderWidth}\n            strokeOpacity={animatedProps.strokeOpacity}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={handlers.onMouseEnter}\n            onMouseMove={handlers.onMouseMove}\n            onMouseLeave={handlers.onMouseLeave}\n            onClick={handlers.onClick}\n        />\n    )\n}\n","import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport {\n    AreaBumpComputedSerie,\n    AreaBumpDatum,\n    AreaBumpLabel,\n    AreaBumpSerieExtraProps,\n} from './types'\nimport { useAreaBumpSeriesLabels } from './hooks'\n\ninterface AreaLabelsProps<Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps> {\n    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>\n    series: AreaBumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>\n}\n\nexport const AreasLabels = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    getLabel,\n    series,\n    position,\n    padding,\n    color,\n}: AreaLabelsProps<Datum, ExtraProps>) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useAreaBumpSeriesLabels<Datum, ExtraProps>({\n        getLabel,\n        series,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings<{\n        x: number\n        y: number\n        opacity: number\n    }>(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        data-testid={`label.${position}.${label.serie.id}`}\n                        key={label.id}\n                        x={animatedProps.x}\n                        y={animatedProps.y}\n                        textAnchor={label.textAnchor}\n                        dominantBaseline=\"central\"\n                        opacity={animatedProps.opacity}\n                        style={{\n                            ...theme.labels.text,\n                            fill: label.color,\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n","import { ModernMotionProps, SvgDefsAndFill } from '@nivo/core'\nimport { AreaBumpCommonProps, AreaBumpComputedSerie, DefaultAreaBumpDatum } from './types'\nimport { AreaTooltip } from './AreaTooltip'\n\nconst commonDefaultProps: Omit<\n    AreaBumpCommonProps<DefaultAreaBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'margin'\n    | 'theme'\n    | 'renderWrapper'\n> = {\n    align: 'middle',\n\n    layers: ['grid', 'axes', 'labels', 'areas'],\n\n    interpolation: 'smooth',\n    spacing: 0,\n    xPadding: 0.6,\n\n    colors: { scheme: 'nivo' },\n    blendMode: 'normal',\n    fillOpacity: 0.8,\n    activeFillOpacity: 1,\n    inactiveFillOpacity: 0.15,\n    borderWidth: 1,\n    activeBorderWidth: 1,\n    inactiveBorderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 0.4]] },\n    borderOpacity: 1,\n    activeBorderOpacity: 1,\n    inactiveBorderOpacity: 0,\n\n    startLabel: false,\n    startLabelPadding: 12,\n    startLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    endLabel: true,\n    endLabelPadding: 12,\n    endLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    enableGridX: true,\n    axisTop: {},\n    axisBottom: {},\n\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    tooltip: AreaTooltip,\n\n    role: 'img',\n}\n\nexport const areaBumpSvgDefaultProps: typeof commonDefaultProps &\n    SvgDefsAndFill<AreaBumpComputedSerie<DefaultAreaBumpDatum, Record<string, unknown>>> & {\n        animate: boolean\n        motionConfig: ModernMotionProps['motionConfig']\n    } = {\n    ...commonDefaultProps,\n    defs: [],\n    fill: [],\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { AreaBumpDatum, AreaBumpComputedSerie, AreaBumpSerieExtraProps } from './types'\n\ninterface AreaTooltipProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const AreaTooltip = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    serie,\n}: AreaTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip id={serie.id} enableChip={true} color={serie.color} />\n)\n","import { Fragment, useMemo, ReactNode, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    SvgWrapper,\n    Container,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { useAreaBump } from './hooks'\nimport { Area } from './Area'\nimport { AreasLabels } from './AreasLabels'\nimport {\n    AreaBumpSvgProps,\n    AreaBumpDatum,\n    DefaultAreaBumpDatum,\n    AreaBumpLayerId,\n    AreaBumpCustomLayerProps,\n    AreaBumpSerieExtraProps,\n} from './types'\nimport { areaBumpSvgDefaultProps } from './defaults'\n\ntype InnerAreaBumpProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n> = Omit<\n    AreaBumpSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerAreaBump = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    data,\n    align = areaBumpSvgDefaultProps.align,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    layers = areaBumpSvgDefaultProps.layers as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['layers']\n    >,\n\n    interpolation = areaBumpSvgDefaultProps.interpolation,\n    spacing = areaBumpSvgDefaultProps.spacing,\n    xPadding = areaBumpSvgDefaultProps.xPadding,\n\n    colors = areaBumpSvgDefaultProps.colors as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['colors']\n    >,\n    blendMode = areaBumpSvgDefaultProps.blendMode,\n    fillOpacity = areaBumpSvgDefaultProps.fillOpacity,\n    activeFillOpacity = areaBumpSvgDefaultProps.activeFillOpacity,\n    inactiveFillOpacity = areaBumpSvgDefaultProps.inactiveFillOpacity,\n    defs = areaBumpSvgDefaultProps.defs,\n    fill = areaBumpSvgDefaultProps.fill as NonNullable<AreaBumpSvgProps<Datum, ExtraProps>['fill']>,\n    borderWidth = areaBumpSvgDefaultProps.borderWidth,\n    activeBorderWidth = areaBumpSvgDefaultProps.activeBorderWidth,\n    inactiveBorderWidth = areaBumpSvgDefaultProps.inactiveBorderWidth,\n    borderColor = areaBumpSvgDefaultProps.borderColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['borderColor']\n    >,\n    borderOpacity = areaBumpSvgDefaultProps.borderOpacity,\n    activeBorderOpacity = areaBumpSvgDefaultProps.activeBorderOpacity,\n    inactiveBorderOpacity = areaBumpSvgDefaultProps.inactiveBorderOpacity,\n\n    startLabel = areaBumpSvgDefaultProps.startLabel as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['startLabel']\n    >,\n    startLabelPadding = areaBumpSvgDefaultProps.startLabelPadding,\n    startLabelTextColor = areaBumpSvgDefaultProps.startLabelTextColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['startLabelTextColor']\n    >,\n    endLabel = areaBumpSvgDefaultProps.endLabel as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['endLabel']\n    >,\n    endLabelPadding = areaBumpSvgDefaultProps.endLabelPadding,\n    endLabelTextColor = areaBumpSvgDefaultProps.endLabelTextColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['endLabelTextColor']\n    >,\n\n    enableGridX = areaBumpSvgDefaultProps.enableGridX,\n    axisTop = areaBumpSvgDefaultProps.axisTop,\n    axisBottom = areaBumpSvgDefaultProps.axisBottom,\n\n    isInteractive = areaBumpSvgDefaultProps.isInteractive,\n    defaultActiveSerieIds = areaBumpSvgDefaultProps.defaultActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = areaBumpSvgDefaultProps.tooltip as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['tooltip']\n    >,\n    role = areaBumpSvgDefaultProps.role,\n}: InnerAreaBumpProps<Datum, ExtraProps>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { series, xScale, heightScale, areaGenerator, setActiveSerieIds } = useAreaBump<\n        Datum,\n        ExtraProps\n    >({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        align,\n        spacing,\n        xPadding,\n        interpolation,\n        colors,\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        defaultActiveSerieIds,\n    })\n\n    const boundDefs = useMemo(\n        () => bindDefs(defs, series, fill, { targetKey: 'fill' }),\n        [defs, series, fill]\n    )\n\n    const layerById: Record<AreaBumpLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        labels: null,\n        areas: null,\n    }\n\n    if (layers.includes('grid') && enableGridX) {\n        layerById.grid = <Grid key=\"grid\" width={innerWidth} height={innerHeight} xScale={xScale} />\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={heightScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                bottom={axisBottom}\n            />\n        )\n    }\n\n    if (layers.includes('areas')) {\n        layerById.areas = (\n            <Fragment key=\"areas\">\n                {series.map(serie => (\n                    <Area<Datum, ExtraProps>\n                        key={serie.id}\n                        areaGenerator={areaGenerator}\n                        serie={serie}\n                        blendMode={blendMode}\n                        isInteractive={isInteractive}\n                        setActiveSerieIds={setActiveSerieIds}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('labels')) {\n        layerById.labels = (\n            <Fragment key=\"labels\">\n                {startLabel !== false && (\n                    <AreasLabels<Datum, ExtraProps>\n                        getLabel={startLabel}\n                        series={series}\n                        position=\"start\"\n                        padding={startLabelPadding}\n                        color={startLabelTextColor}\n                    />\n                )}\n                {endLabel !== false && (\n                    <AreasLabels<Datum, ExtraProps>\n                        getLabel={endLabel}\n                        series={series}\n                        position=\"end\"\n                        padding={endLabelPadding}\n                        color={endLabelTextColor}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    const customLayerProps: AreaBumpCustomLayerProps<Datum, ExtraProps> = useMemo(\n        () => ({\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            series,\n            xScale,\n            areaGenerator,\n        }),\n        [innerWidth, innerHeight, outerWidth, outerHeight, series, xScale, areaGenerator]\n    )\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const AreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>({\n    isInteractive = areaBumpSvgDefaultProps.isInteractive,\n    animate = areaBumpSvgDefaultProps.animate,\n    motionConfig = areaBumpSvgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: AreaBumpSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerAreaBump<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport {\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n    AreaBumpSvgProps,\n    DefaultAreaBumpDatum,\n} from './types'\nimport { AreaBump } from './AreaBump'\n\nexport const ResponsiveAreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>(\n    props: Omit<AreaBumpSvgProps<Datum, ExtraProps>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <AreaBump<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["useSerieDerivedProp","instruction","useMemo","useBump","interpolation","width","height","data","xPadding","xOuterPadding","yOuterPadding","lineWidth","activeLineWidth","inactiveLineWidth","colors","opacity","activeOpacity","inactiveOpacity","pointSize","activePointSize","inactivePointSize","pointColor","pointBorderWidth","activePointBorderWidth","inactivePointBorderWidth","pointBorderColor","isInteractive","defaultActiveSerieIds","useState","activeSerieIds","setActiveSerieIds","xValuesSet","Set","yValuesSet","forEach","serie","add","datum","x","y","xValues","Array","from","xScale","castPointScale","scalePoint","domain","range","padding","yValues","sort","a","b","yScale","linePointPadding","step","Math","min","series","map","id","rawSerie","points","linePoints","i","point","push","length","filter","rawSeries","lineGenerator","d3Line","curve","curveBasis","curveLinear","defined","d","getColor","useOrdinalColorScale","getSerieStyle","getLineWidth","getActiveLineWidth","getInactiveLineWidth","getOpacity","getActiveOpacity","getInactiveOpacity","getNormalStyle","useCallback","getActiveStyle","getInactiveStyle","includes","color","theme","useTheme","getPointColor","useInheritedColor","getPointBorderColor","getPointStyle","getSize","getActiveSize","getInactiveSize","getBorderWidth","getActiveBorderWidth","getInactiveBorderWidth","size","borderWidth","pts","rawPoint","isActive","isInactive","borderColor","pointStyle","pointerEvents","bumpSvgDefaultProps","layers","scheme","startLabel","startLabelPadding","startLabelTextColor","endLabel","endLabelPadding","endLabelTextColor","modifiers","enableGridX","enableGridY","axisTop","axisBottom","axisLeft","tooltip","_jsx","BasicTooltip","enableChip","role","pointComponent","useMotionConfig","animate","springConfig","config","animatedProps","useSpring","radius","immediate","animated","circle","cx","cy","r","to","max","v","fill","strokeWidth","stroke","style","motionConfig","Line","yStep","handlers","onMouseEnter","onMouseMove","onMouseLeave","onClick","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","createElement","event","handleMouseMove","handleMouseLeave","handleClick","useBumpSerieHandlers","linePath","animatedPath","useAnimatedPath","_jsxs","path","strokeLinecap","strokeOpacity","LinesLabels","getLabel","position","labels","textAnchor","signedPadding","label","useBumpSeriesLabels","springs","useSprings","index","text","dominantBaseline","Points","key","InnerBump","partialMargin","margin","axisRight","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","layerById","grid","axes","lines","Grid","Axes","top","right","bottom","left","Fragment","customLayerProps","SvgWrapper","layer","Bump","renderWrapper","otherProps","Container","ResponsiveBump","props","ResponsiveWrapper","useAreaBump","align","spacing","fillOpacity","activeFillOpacity","inactiveFillOpacity","activeBorderWidth","inactiveBorderWidth","borderOpacity","activeBorderOpacity","inactiveBorderOpacity","maxSum","maxValues","slices","Map","has","set","total","values","slice","get","serieId","value","beforeHeight","keys","heightScale","castLinearScale","scaleLinear","sliceHeight","offset","all","previousValues","_i","pos","beforeValue","reduce","t","sliceValue","areaPointPadding","computedSerie","areaPoints","y0","y1","useAreaBumpSeries","areaGenerator","d3Area","getFillOpacity","getActiveFillOpacity","getInactiveFillOpacity","getBorderColor","getBorderOpacity","getActiveBorderOpacity","getInactiveBorderOpacity","serieWithColor","Area","blendMode","useAreaBumpSerieHandlers","mixBlendMode","AreasLabels","useAreaBumpSeriesLabels","areaBumpSvgDefaultProps","defs","InnerAreaBump","boundDefs","bindDefs","targetKey","areas","AreaBump","ResponsiveAreaBump"],"sourceRoot":""}