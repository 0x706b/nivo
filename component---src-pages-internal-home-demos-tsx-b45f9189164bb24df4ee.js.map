{"version":3,"file":"component---src-pages-internal-home-demos-tsx-b45f9189164bb24df4ee.js","mappings":"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,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MC1PSC,EAAQ,CA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","sources":["webpack://nivo-website/./src/data/components/geo/generator.ts","webpack://nivo-website/./src/components/home/theme.ts","webpack://nivo-website/./src/components/home/dimensions.ts","webpack://nivo-website/./src/components/home/HomeAreaBumpDemo.tsx","webpack://nivo-website/./src/components/home/HomeBarDemo.tsx","webpack://nivo-website/./src/components/home/HomeBumpDemo.tsx","webpack://nivo-website/./src/components/home/HomeCalendarDemo.tsx","webpack://nivo-website/./src/components/home/HomeChordDemo.tsx","webpack://nivo-website/./src/components/home/HomeChoroplethDemo.tsx","webpack://nivo-website/./src/components/home/HomeCirclePackingDemo.tsx","webpack://nivo-website/./src/components/home/HomeLineDemo.tsx","webpack://nivo-website/./src/components/home/HomePieDemo.tsx","webpack://nivo-website/./src/components/home/HomeRadarDemo.tsx","webpack://nivo-website/./src/components/home/HomeRadialBarDemo.tsx","webpack://nivo-website/./src/components/home/HomeSankeyDemo.tsx","webpack://nivo-website/./src/components/home/HomeStreamDemo.tsx","webpack://nivo-website/./src/components/home/HomeSunburstDemo.tsx","webpack://nivo-website/./src/components/home/HomeSwarmPlotDemo.tsx","webpack://nivo-website/./src/components/home/HomeTreeMapDemo.tsx","webpack://nivo-website/./src/components/home/HomeVoronoiDemo.tsx","webpack://nivo-website/./src/components/home/HomeMarimekkoDemo.tsx","webpack://nivo-website/./src/pages/internal/home-demos.tsx","webpack://nivo-website/../src/color.ts","webpack://nivo-website/../src/sets/countryCodes.ts","webpack://nivo-website/../src/sets/names.ts","webpack://nivo-website/../src/sets/programmingLanguages.ts","webpack://nivo-website/../src/bullet.ts","webpack://nivo-website/../src/chord.ts","webpack://nivo-website/../src/network.ts","webpack://nivo-website/../src/parallelCoordinates.ts","webpack://nivo-website/../src/sankey.ts","webpack://nivo-website/../src/swarmplot.ts","webpack://nivo-website/../src/xySeries.ts","webpack://nivo-website/../src/index.ts","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/types.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/Bar.tsx","webpack://nivo-website/../src/Bars.tsx","webpack://nivo-website/../src/BarTooltip.tsx","webpack://nivo-website/../src/Marimekko.tsx","webpack://nivo-website/../src/ResponsiveMarimekko.tsx","webpack://nivo-website/../src/StreamLayer.tsx","webpack://nivo-website/../src/StreamLayers.tsx","webpack://nivo-website/../src/StreamDots.tsx","webpack://nivo-website/../src/StreamSlicesItem.tsx","webpack://nivo-website/../src/StreamSlices.tsx","webpack://nivo-website/../src/StreamDotsItem.tsx","webpack://nivo-website/../src/LayerTooltip.tsx","webpack://nivo-website/../src/StackTooltip.tsx","webpack://nivo-website/../src/Stream.tsx","webpack://nivo-website/../src/ResponsiveStream.tsx","webpack://nivo-website/../node_modules/d3-hierarchy/src/partition.js","webpack://nivo-website/../src/SunburstTooltip.tsx","webpack://nivo-website/../src/Arcs.tsx","webpack://nivo-website/../src/Sunburst.tsx","webpack://nivo-website/../src/ResponsiveSunburst.tsx","webpack://nivo-website/../node_modules/lodash/_arrayShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseForOwn.js","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/_baseShuffle.js","webpack://nivo-website/../node_modules/lodash/_baseValues.js","webpack://nivo-website/../node_modules/lodash/_shuffleSelf.js","webpack://nivo-website/../node_modules/lodash/random.js","webpack://nivo-website/../node_modules/lodash/shuffle.js","webpack://nivo-website/../node_modules/lodash/values.js"],"sourcesContent":["import countries from './world_countries'\n\nconst exclude = ['BRA', 'AUS', 'SWE', 'GRL', 'COD']\n\nexport const generateChoroplethData = () =>\n    countries.features\n        .filter(feature => !exclude.includes(feature.id))\n        .map(feature => ({\n            id: feature.id,\n            value: Math.round(Math.random() * 1000000),\n        }))\n","import { useMemo } from 'react'\nimport { useTheme } from 'styled-components'\n\nexport const useHomeTheme = () => {\n    const theme = useTheme()\n\n    const { colors, reversedColors } = useMemo(() => {\n        const _colors: string[] = theme.colors.coloredRange.slice(1)\n        const _reversedColors = [..._colors].reverse()\n\n        return { colors: _colors, reversedColors: _reversedColors }\n    }, [theme])\n\n    const nivoTheme = useMemo(() => {\n        return {\n            axis: {\n                ticks: {\n                    line: {\n                        stroke: theme.colors.coloredRange[4],\n                    },\n                    text: {\n                        fill: theme.colors.coloredRange[4],\n                        fontSize: 9,\n                    },\n                },\n            },\n            grid: {\n                line: {\n                    stroke: theme.colors.coloredRange[4],\n                    strokeWidth: 2,\n                    strokeDasharray: '5,8',\n                },\n            },\n            labels: {\n                text: {\n                    fill: theme.colors.coloredRange[4],\n                },\n            },\n        }\n    }, [theme])\n\n    return {\n        colors,\n        reversedColors,\n        nivoTheme,\n    }\n}\n","export const dimensions = {\n    width: 600,\n    height: 400,\n    margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20,\n    },\n    lineWidth: 6,\n    pointSize: 18,\n}\n","import React, { useMemo } from 'react'\nimport random from 'lodash/random'\nimport { AreaBump } from '@nivo/bump'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\nimport range from 'lodash/range'\n\nconst serieIds = ['JavaScript', 'ReasonML', 'TypeScript', 'Elm']\nconst generateData = () => {\n    const years = range(2000, 2005)\n\n    return serieIds.map(id => ({\n        id,\n        data: years.map(year => ({\n            x: year,\n            y: random(5, 40),\n        })),\n    }))\n}\n\nexport const HomeAreaBumpDemo = () => {\n    const data = useMemo(() => generateData(), [])\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"area-bump\">\n            <AreaBump\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                colors={colors}\n                borderWidth={1}\n                spacing={12}\n                borderColor={colors[3]}\n                blendMode=\"normal\"\n                enableGridX={true}\n                axisTop={null}\n                axisBottom={null}\n                startLabel={false}\n                endLabel={false}\n                isInteractive={false}\n                animate={false}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport { Bar } from '@nivo/bar'\nimport { generateCountriesData } from '@nivo/generators'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeBarDemo = ({ isHorizontal = false }: { isHorizontal: boolean }) => {\n    const { colors, nivoTheme } = useHomeTheme()\n    const data = isHorizontal\n        ? generateCountriesData(['hot dogs', 'burgers', 'sandwich', 'kebab', 'fries', 'donut'], {\n              size: 9,\n          })\n        : generateCountriesData(['hot dogs', 'burgers', 'sandwich'], {\n              size: 11,\n          })\n\n    const keys = isHorizontal\n        ? ['hot dogs', 'burgers', 'sandwich', 'kebab', 'fries', 'donut']\n        : ['hot dogs', 'burgers', 'sandwich']\n\n    return (\n        <div id={`bar-${isHorizontal ? 'horizontal' : 'vertical'}`}>\n            <Bar\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                indexBy=\"country\"\n                keys={keys}\n                layout={isHorizontal ? 'horizontal' : 'vertical'}\n                groupMode={isHorizontal ? 'stacked' : 'grouped'}\n                padding={0.1}\n                colors={colors}\n                borderWidth={1}\n                borderColor={colors[3]}\n                theme={nivoTheme}\n                enableGridX\n                enableGridY\n                enableLabel={false}\n                animate={false}\n                isInteractive={false}\n                axisLeft={null}\n                axisBottom={null}\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { Bump } from '@nivo/bump'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\nimport range from 'lodash/range'\nimport shuffle from 'lodash/shuffle'\n\ninterface Datum {\n    x: number\n    y: number\n}\n\nconst generateData = () => {\n    const years = range(2000, 2005)\n    const ranks = range(1, 6)\n\n    const series: {\n        id: string\n        data: Datum[]\n    }[] = ranks.map(rank => {\n        return {\n            id: `Serie ${rank}`,\n            data: [],\n        }\n    })\n\n    years.forEach(year => {\n        shuffle(ranks).forEach((rank, i) => {\n            series[i].data.push({\n                x: year,\n                y: rank,\n            })\n        })\n    })\n\n    return series\n}\n\nexport const HomeBumpDemo = () => {\n    const data = useMemo(() => generateData(), [])\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"bump\">\n            <Bump\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                colors={colors}\n                lineWidth={dimensions.lineWidth}\n                pointSize={dimensions.pointSize}\n                endLabel={false}\n                startLabel={false}\n                enableGridX={true}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={null}\n                axisLeft={null}\n                isInteractive={false}\n                animate={false}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { generateDayCounts } from '@nivo/generators'\nimport { Calendar } from '@nivo/calendar'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nconst calendarFrom = new Date(2015, 3, 1)\nconst calendarTo = new Date(2017, 5, 1)\nconst calendarData = generateDayCounts(calendarFrom, calendarTo)\n\nexport const HomeCalendarDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <Container id=\"calendar\">\n            <Calendar\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                from={calendarFrom}\n                to={calendarTo}\n                data={calendarData}\n                dayBorderWidth={1}\n                yearSpacing={60}\n                emptyColor={colors[1]}\n                dayBorderColor={colors[3]}\n                monthBorderColor={colors[3]}\n                colors={[colors[0], colors[2]]}\n                isInteractive={false}\n                theme={nivoTheme}\n            />\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    svg text {\n        display: none;\n    }\n`\n","import React, { useMemo } from 'react'\nimport { generateChordData } from '@nivo/generators'\nimport { ChordCanvas } from '@nivo/chord'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeChordDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n    const { matrix, keys } = useMemo(() => generateChordData({ size: 7 }), [])\n\n    return (\n        <div id=\"chord\">\n            <ChordCanvas\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={matrix}\n                keys={keys}\n                colors={colors}\n                padAngle={0.04}\n                innerRadiusRatio={0.9}\n                enableLabel={false}\n                isInteractive={false}\n                animate={false}\n                arcBorderWidth={1}\n                arcBorderColor={colors[3]}\n                ribbonBorderWidth={1}\n                ribbonBorderColor={colors[3]}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { Choropleth } from '@nivo/geo'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\nimport { generateChoroplethData } from '../../data/components/geo/generator'\nimport countries from '../../data/components/geo/world_countries'\n\nexport const HomeChoroplethDemo = () => {\n    const data = useMemo(() => generateChoroplethData(), [])\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"choropleth\">\n            <Choropleth\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                features={countries.features}\n                colors={colors}\n                domain={[0, 1000000]}\n                unknownColor={`${colors[0]}44`}\n                borderWidth={1}\n                borderColor={colors[3]}\n                isInteractive={false}\n                animate={false}\n                theme={nivoTheme}\n                projectionType=\"mercator\"\n                projectionScale={100}\n                projectionTranslation={[0.5, 0.6]}\n                projectionRotation={[0, 0, 0]}\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { generateLibTree } from '@nivo/generators'\nimport { CirclePacking } from '@nivo/circle-packing'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeCirclePackingDemo = () => {\n    const { reversedColors, nivoTheme } = useHomeTheme()\n    const data = useMemo(() => generateLibTree(), [])\n\n    return (\n        <div id=\"circle-packing\">\n            <CirclePacking\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                id=\"name\"\n                value=\"loc\"\n                colors={reversedColors}\n                colorBy=\"depth\"\n                childColor=\"noinherit\"\n                padding={1}\n                enableLabels={false}\n                animate={false}\n                isInteractive={false}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport { generateDrinkStats } from '@nivo/generators'\nimport { Line } from '@nivo/line'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeLineDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"line\">\n            <Line\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={generateDrinkStats(12)}\n                yScale={{ type: 'linear', stacked: true }}\n                lineWidth={dimensions.lineWidth}\n                curve=\"monotoneX\"\n                theme={nivoTheme}\n                colors={colors}\n                animate={false}\n                isInteractive={false}\n                pointSize={dimensions.pointSize}\n                axisLeft={null}\n                axisBottom={null}\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { generateProgrammingLanguageStats } from '@nivo/generators'\nimport { Pie } from '@nivo/pie'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomePieDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n    const data = useMemo(\n        () =>\n            generateProgrammingLanguageStats(true, 12).map(d => ({\n                id: d.label,\n                ...d,\n            })),\n        []\n    )\n\n    return (\n        <div id=\"pie\">\n            <Pie\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                innerRadius={0.6}\n                enableArcLabels={false}\n                enableArcLinkLabels={false}\n                colors={colors}\n                borderWidth={1}\n                borderColor={colors[3]}\n                animate={false}\n                isInteractive={false}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { generateWinesTastes } from '@nivo/generators'\nimport { Radar } from '@nivo/radar'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeRadarDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n    const data = useMemo(() => generateWinesTastes(), [])\n\n    return (\n        <Container id=\"radar\">\n            <Radar\n                {...data}\n                width={dimensions.width}\n                height={dimensions.height}\n                indexBy=\"taste\"\n                margin={dimensions.margin}\n                theme={nivoTheme}\n                colors={colors}\n                curve=\"linearClosed\"\n                dotSize={dimensions.pointSize}\n                borderWidth={dimensions.lineWidth}\n                dotBorderWidth={1}\n                dotBorderColor={colors[1]}\n                enableDotLabel={false}\n                animate={false}\n                isInteractive={false}\n            />\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    svg text {\n        display: none;\n    }\n`\n","import React, { useMemo } from 'react'\nimport { RadialBar } from '@nivo/radial-bar'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nconst generateData = () => {\n    const ids = ['Supermarket', 'Combini', 'Online', 'Marché']\n    const categories = ['Vegetables', 'Fruits', 'Meat']\n\n    return ids.map(id => ({\n        id,\n        data: categories.map(category => ({\n            x: category,\n            y: Math.round(Math.random() * 300),\n        })),\n    }))\n}\n\nexport const HomeRadialBarDemo = () => {\n    const data = useMemo(() => generateData(), [])\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"radial-bar\">\n            <RadialBar\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                tracksColor={`${colors[0]}44`}\n                colors={colors.slice(1)}\n                endAngle={315}\n                borderWidth={1}\n                borderColor={colors[3]}\n                padding={0.3}\n                isInteractive={false}\n                animate={false}\n                theme={nivoTheme}\n                enableLabels={false}\n                radialAxisStart={null}\n                circularAxisOuter={null}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport { generateSankeyData } from '@nivo/generators'\nimport { Sankey } from '@nivo/sankey'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeSankeyDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"sankey\">\n            <Sankey\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={generateSankeyData({ nodeCount: 11, maxIterations: 2 })}\n                theme={nivoTheme}\n                colors={colors}\n                animate={false}\n                isInteractive={false}\n                enableLabels={false}\n                nodeBorderColor={{ from: 'color' }}\n                nodeOpacity={1}\n                nodeThickness={12}\n                nodeInnerPadding={2}\n                nodeSpacing={20}\n                nodeBorderWidth={0}\n                linkOpacity={0.6}\n                linkBlendMode=\"normal\"\n                linkContract={1}\n                labelTextColor={{ from: 'color' }}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport range from 'lodash/range'\nimport random from 'lodash/random'\nimport { Stream } from '@nivo/stream'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nconst streamDataLayerCount = 5\nconst generateStreamData = () =>\n    range(16).map(() =>\n        range(streamDataLayerCount).reduce((acc, i) => {\n            acc[i] = random(10, 200)\n            return acc\n        }, {})\n    )\n\nexport const HomeStreamDemo = () => {\n    const { reversedColors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"stream\">\n            <Stream\n                width={dimensions.width}\n                height={dimensions.height}\n                data={generateStreamData()}\n                margin={dimensions.margin}\n                keys={range(streamDataLayerCount)}\n                theme={nivoTheme}\n                colors={reversedColors}\n                animate={false}\n                isInteractive={false}\n                enableGridX\n                axisLeft={null}\n                axisBottom={null}\n                offsetType=\"silhouette\"\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { generateLibTree } from '@nivo/generators'\nimport { Sunburst } from '@nivo/sunburst'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeSunburstDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n    const data = useMemo(() => generateLibTree(), [])\n\n    return (\n        <div id=\"sunburst\">\n            <Sunburst\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                id=\"name\"\n                value=\"loc\"\n                animate={false}\n                isInteractive={false}\n                colors={colors}\n                borderColor={colors[3]}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { generateSwarmPlotData } from '@nivo/generators'\nimport { SwarmPlot } from '@nivo/swarmplot'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeSwarmPlotDemo = () => {\n    const { colors, reversedColors, nivoTheme } = useHomeTheme()\n    const data = useMemo(() => generateSwarmPlotData(['thing'], { min: 50, max: 50 }), [])\n\n    return (\n        <div id=\"swarmplot\">\n            <SwarmPlot\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={{\n                    ...dimensions.margin,\n                    left: dimensions.margin.left * 3,\n                    right: dimensions.margin.right * 3,\n                }}\n                data={data.data}\n                groups={data.groups}\n                groupBy=\"group\"\n                id=\"id\"\n                value=\"price\"\n                layout=\"horizontal\"\n                valueScale={{\n                    type: 'linear',\n                    min: 0,\n                    max: 500,\n                }}\n                size={{\n                    key: 'volume',\n                    values: [4, 20],\n                    sizes: [10, 60],\n                }}\n                theme={nivoTheme}\n                colors={reversedColors}\n                borderWidth={1}\n                borderColor={colors[3]}\n                spacing={3}\n                enableGridY={false}\n                colorBy=\"id\"\n                animate={false}\n                isInteractive={false}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={null}\n                axisLeft={null}\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { generateLibTree } from '@nivo/generators'\nimport { TreeMap } from '@nivo/treemap'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nexport const HomeTreeMapDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n    const data = useMemo(() => generateLibTree(), [])\n\n    return (\n        <div id=\"treemap\">\n            <TreeMap\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                identity=\"name\"\n                value=\"loc\"\n                valueFormat=\".02s\"\n                tile=\"squarify\"\n                colors={colors}\n                leavesOnly={true}\n                borderWidth={1}\n                borderColor={colors[3]}\n                outerPadding={0}\n                innerPadding={0}\n                nodeOpacity={1}\n                animate={false}\n                isInteractive={false}\n                enableLabel={false}\n                labelTextColor={colors[1]}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport range from 'lodash/range'\nimport { Voronoi } from '@nivo/voronoi'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nconst voronoi = {\n    xDomain: [0, 400],\n    yDomain: [0, 300],\n}\nvoronoi.data = range(80).map(id => ({\n    id,\n    x: Math.random() * voronoi.xDomain[1],\n    y: Math.random() * voronoi.yDomain[1],\n}))\n\nexport const HomeVoronoiDemo = () => {\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"voronoi\">\n            <Voronoi\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={voronoi.data}\n                xDomain={voronoi.xDomain}\n                yDomain={voronoi.yDomain}\n                enableLinks={true}\n                linkLineColor={colors[2]}\n                cellLineColor={colors[3]}\n                cellLineWidth={2}\n                enablePoints={true}\n                pointSize={12}\n                pointColor={colors[3]}\n                isInteractive={false}\n                animate={false}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport random from 'lodash/random'\nimport { Marimekko } from '@nivo/marimekko'\nimport { useHomeTheme } from './theme'\nimport { dimensions } from './dimensions'\n\nconst getRandomValue = () => random(0, 32)\n\nconst generateData = () =>\n    [`it's good`, `it's sweet`, `it's spicy`, 'worth eating', 'worth buying'].map(statement => ({\n        statement,\n        participation: getRandomValue(),\n        stronglyAgree: getRandomValue(),\n        agree: getRandomValue(),\n        disagree: getRandomValue(),\n        stronglyDisagree: getRandomValue(),\n    }))\n\nexport const HomeMarimekkoDemo = () => {\n    const data = useMemo(() => generateData(), [])\n    const { colors, nivoTheme } = useHomeTheme()\n\n    return (\n        <div id=\"marimekko\">\n            <Marimekko\n                width={dimensions.width}\n                height={dimensions.height}\n                margin={dimensions.margin}\n                data={data}\n                id=\"statement\"\n                value=\"participation\"\n                dimensions={[\n                    {\n                        id: 'disagree strongly',\n                        value: 'stronglyDisagree',\n                    },\n                    {\n                        id: 'disagree',\n                        value: 'disagree',\n                    },\n                    {\n                        id: 'agree',\n                        value: 'agree',\n                    },\n                    {\n                        id: 'agree strongly',\n                        value: 'stronglyAgree',\n                    },\n                ]}\n                colors={colors}\n                defs={[\n                    {\n                        id: 'lines',\n                        type: 'patternLines',\n                        background: 'rgba(0, 0, 0, 0)',\n                        color: 'inherit',\n                        rotation: -45,\n                        lineWidth: 6,\n                        spacing: 10,\n                    },\n                ]}\n                fill={[\n                    {\n                        match: {\n                            id: 'agree strongly',\n                        },\n                        id: 'lines',\n                    },\n                    {\n                        match: {\n                            id: 'disagree strongly',\n                        },\n                        id: 'lines',\n                    },\n                ]}\n                borderWidth={1}\n                borderColor={colors[3]}\n                innerPadding={6}\n                offset=\"expand\"\n                enableGridX={false}\n                enableGridY={false}\n                isInteractive={false}\n                animate={false}\n                theme={nivoTheme}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n    HomeAreaBumpDemo,\n    HomeBarDemo,\n    HomeBumpDemo,\n    HomeCalendarDemo,\n    HomeChordDemo,\n    HomeChoroplethDemo,\n    HomeCirclePackingDemo,\n    HomeLineDemo,\n    HomeMarimekkoDemo,\n    HomePieDemo,\n    HomeRadarDemo,\n    HomeRadialBarDemo,\n    HomeSankeyDemo,\n    HomeStreamDemo,\n    HomeSunburstDemo,\n    HomeSwarmPlotDemo,\n    HomeTreeMapDemo,\n    HomeVoronoiDemo,\n} from '../../components/home'\n\nconst HomeDemosPage = () => (\n    <Container>\n        <HomeChoroplethDemo />\n        <HomeRadialBarDemo />\n        <HomeAreaBumpDemo />\n        <HomeBarDemo isHorizontal={false} />\n        <HomeBarDemo isHorizontal={true} />\n        <HomeBumpDemo />\n        <HomeMarimekkoDemo />\n        <HomeCalendarDemo />\n        <HomeChordDemo />\n        <HomeCirclePackingDemo />\n        <HomeLineDemo />\n        <HomePieDemo />\n        <HomeRadarDemo />\n        <HomeSankeyDemo />\n        <HomeStreamDemo />\n        <HomeSunburstDemo />\n        <HomeSwarmPlotDemo />\n        <HomeTreeMapDemo />\n        <HomeVoronoiDemo />\n    </Container>\n)\n\nconst Container = styled.div`\n    background: ${({ theme }) => theme.colors.coloredRange[2]};\n    background: transparent;\n    display: flex;\n    flex-wrap: wrap;\n    transform-origin: top left;\n    // transform: scale3d(0.5, 0.5, 1);\n    width: 1800px;\n\n    & > * {\n        width: 600px;\n        height: 400px;\n        display: flex;\n    }\n`\n\nexport default HomeDemosPage\n","export const randColor = () => `hsl(${Math.round(Math.random() * 360)}, 70%, 50%)`\n","export const countryCodes = [\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AS',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CC',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CU',\n    'CV',\n    'CW',\n    'CX',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FM',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HM',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IR',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KP',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MH',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MP',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NF',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PW',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SY',\n    'SZ',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'UM',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VI',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n]\n","export const names = [\n    'John',\n    'Raoul',\n    'Jane',\n    'Marcel',\n    'Ibrahim',\n    'Junko',\n    'Lyu',\n    'André',\n    'Maki',\n    'Véronique',\n    'Thibeau',\n    'Josiane',\n    'Raphaël',\n    'Mathéo',\n    'Margot',\n    'Hugo',\n    'Christian',\n    'Louis',\n    'Ella',\n    'Alton',\n    'Jimmy',\n    'Guillaume',\n    'Sébastien',\n    'Alfred',\n    'Bon',\n    'Solange',\n    'Kendrick',\n    'Jared',\n    'Satoko',\n    'Tomoko',\n    'Line',\n    'Delphine',\n    'Leonard',\n    'Alphonse',\n    'Lisa',\n    'Bart',\n    'Benjamin',\n    'Homer',\n    'Jack',\n]\n","export const programmingLanguages = [\n    'php',\n    'make',\n    'javascript',\n    'go',\n    'erlang',\n    'elixir',\n    'lisp',\n    'haskell',\n    'python',\n    'ruby',\n    'hack',\n    'scala',\n    'java',\n    'rust',\n    'c',\n    'css',\n    'sass',\n    'stylus',\n]\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\ntype Options = Partial<{\n    float: boolean\n    markerCount: number\n    measureCount: number\n    rangeCount: number\n    subtitle: string\n    title: string\n}>\n\nexport const generateBulletData = (\n    id: string,\n    max: number,\n    {\n        title,\n        subtitle,\n        rangeCount = 5,\n        measureCount = 1,\n        markerCount = 1,\n        float = false,\n    }: Options = {}\n) => {\n    const ranges = range(rangeCount - 1).reduce(\n        acc => {\n            const remaining = max - acc[0]\n            return [random(remaining, float), ...acc]\n        },\n        [max]\n    )\n\n    const measures = range(measureCount).reduce<number[]>(acc => {\n        if (acc.length === 0) return [random(max, float)]\n        return [random(acc[0], float), ...acc]\n    }, [])\n\n    const markers = range(markerCount).map(() => max * 0.6 + random(max * 0.4))\n\n    return {\n        id,\n        title,\n        subtitle,\n        ranges,\n        measures,\n        markers,\n    }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport { names } from './sets'\n\nexport const generateChordData = ({\n    keys = names,\n    size = 7,\n    minValue = 0,\n    maxValue = 2000,\n} = {}) => {\n    const maxSize = Math.min(keys.length, size)\n    const selectedKeys = keys.slice(0, maxSize)\n\n    const matrix = range(maxSize).map(() =>\n        range(maxSize).map(() => {\n            if (Math.random() < 0.66) return random(minValue, maxValue / 4)\n            return random(minValue, maxValue)\n        })\n    )\n\n    return { matrix, keys: selectedKeys }\n}\n","import random from 'lodash/random'\n\ntype Link = {\n    source: string\n    target: string\n    distance: number\n}\n\ntype ExtraNode = {\n    id: string\n    height: number\n    color: string\n    size: number\n}\n\nexport const generateNetworkData = ({\n    rootSize = 32,\n    midSize = 24,\n    leafSize = 12,\n    minMidNodes = 5,\n    maxMidNodes = 11,\n    minLeaves = 3,\n    maxLeaves = 9,\n}: {\n    rootSize?: number\n    midSize?: number\n    leafSize?: number\n    minMidNodes?: number\n    maxMidNodes?: number\n    minLeaves?: number\n    maxLeaves?: number\n} = {}) => {\n    const rootNode = {\n        id: 'Node 0',\n        height: 2,\n        size: rootSize,\n        color: 'rgb(244, 117, 96)',\n    }\n    let nodes = Array.from({ length: random(minMidNodes, maxMidNodes) }, (_, k) => ({\n        id: `Node ${k + 1}`,\n        height: 1,\n        size: midSize,\n        color: 'rgb(97, 205, 187)',\n    }))\n\n    const links: Link[] = []\n    const extraNodes: ExtraNode[] = []\n    nodes.forEach(source => {\n        links.push({\n            source: 'Node 0',\n            target: source.id,\n            distance: 80,\n        })\n        nodes.forEach(target => {\n            if (Math.random() < 0.04) {\n                links.push({\n                    source: source.id,\n                    target: target.id,\n                    distance: 80,\n                })\n            }\n        })\n        Array.from({ length: random(minLeaves, maxLeaves) }, (_, k) => {\n            extraNodes.push({\n                id: `${source.id}.${k}`,\n                height: 0,\n                size: leafSize,\n                color: 'rgb(232, 193, 160)',\n            })\n            links.push({\n                source: source.id,\n                target: `${source.id}.${k}`,\n                distance: 50,\n            })\n\n            return null\n        })\n    })\n\n    nodes.push(rootNode)\n    nodes = nodes.concat(extraNodes)\n\n    return { nodes, links }\n}\n","import random from 'lodash/random'\nimport range from 'lodash/range'\nimport shuffle from 'lodash/shuffle'\n\ntype Options = Partial<{\n    size: number\n    keys: Array<{\n        key: string\n        random?: [number, number]\n        shuffle?: string[]\n    }>\n}>\n\nexport const generateParallelCoordinatesData = ({\n    size = 26,\n    keys = [\n        { key: 'temp', random: [-10, 40] },\n        { key: 'cost', random: [200, 400000] },\n        { key: 'color', shuffle: ['red', 'yellow', 'green'] },\n        { key: 'target', shuffle: ['A', 'B', 'C', 'D', 'E'] },\n        { key: 'volume', random: [0.2, 7.6] },\n    ],\n}: Options = {}) => {\n    const datumGenerator = () =>\n        keys.reduce((acc, key) => {\n            let value\n            if (key.random !== undefined) {\n                value = random(...key.random)\n            } else if (key.shuffle !== undefined) {\n                value = shuffle(key.shuffle)[0]\n            }\n\n            return { ...acc, [key.key]: value }\n        }, {})\n\n    return range(size).map(datumGenerator)\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { randColor } from './color'\nimport { names } from './sets'\n\ntype Link = {\n    source: string\n    target: string\n    value: number\n}\n\nconst availableNodes = names.map(name => ({ id: name }))\n\nconst getNodeTargets = (id: string, links: Link[], currentPath?: string[]): string[] => {\n    const targets = links\n        .filter(({ source }) => source === id)\n        .map(({ target }) => {\n            if (target === id) {\n                throw new Error(\n                    `[sankey] a node cannot be linked on itself:\\n  link: ${id} —> ${id}`\n                )\n            }\n            if (currentPath?.includes(target)) {\n                throw new Error(\n                    `[sankey] found cyclic dependency:\\n  link: ${currentPath.join(\n                        ' —> '\n                    )} —> ${target}`\n                )\n            }\n            return target\n        })\n\n    return targets.reduce(\n        (acc, targetId) =>\n            acc.concat(\n                getNodeTargets(\n                    targetId,\n                    links,\n                    currentPath ? [...currentPath, targetId] : [id, targetId]\n                )\n            ),\n        targets\n    )\n}\n\nconst getNodesTargets = (links: Link[]) =>\n    links.reduce<Record<string, string[]>>((targetsById, link) => {\n        if (!targetsById[link.source]) {\n            targetsById[link.source] = getNodeTargets(link.source, links)\n        }\n\n        return targetsById\n    }, {})\n\nexport const generateSankeyData = ({\n    nodeCount,\n    maxIterations = 3,\n}: {\n    nodeCount?: number\n    maxIterations?: number\n} = {}) => {\n    const nodes = availableNodes.slice(0, nodeCount).map(node =>\n        Object.assign({}, node, {\n            nodeColor: randColor(),\n        })\n    )\n\n    const links: Link[] = []\n    shuffle(nodes).forEach(({ id }) => {\n        range(random(1, maxIterations)).forEach(() => {\n            const targetsById = getNodesTargets(links)\n            const randId = shuffle(nodes.filter(n => n.id !== id).map(n => n.id))[0]\n            if (\n                (!targetsById[randId] || !targetsById[randId].includes(id)) &&\n                (!targetsById[id] || !targetsById[id].includes(randId))\n            ) {\n                links.push({\n                    source: id,\n                    target: randId,\n                    value: random(5, 200),\n                })\n            }\n        })\n    })\n\n    return { nodes, links }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\n\ntype SwarmPlotDatum = {\n    id: string\n    categories?: number[]\n    group: string\n    price: number\n    volume: number\n}\n\nconst randomPrice = () => random(0, 500)\nconst randomVolume = () => random(4, 20)\nconst randomCategory = () => random(3, 17)\n\nexport const generateSwarmPlotData = (\n    groups: string[],\n    { min = 60, max = 100, categoryCount = 0 }\n) => ({\n    groups,\n    data: groups.reduce<SwarmPlotDatum[]>(\n        (acc, group, groupIndex) => [\n            ...acc,\n            ...range(random(min, max))\n                .map(() => randomPrice())\n                .map((price, index) => {\n                    const datum: SwarmPlotDatum = {\n                        id: `${groupIndex}.${index}`,\n                        group,\n                        price,\n                        volume: randomVolume(),\n                    }\n\n                    if (categoryCount > 0) {\n                        datum.categories = range(categoryCount).map(randomCategory)\n                    }\n\n                    return datum\n                }),\n        ],\n        []\n    ),\n})\n\nexport const randomizeSwarmPlotData = (previousData: ReturnType<typeof generateSwarmPlotData>) => ({\n    groups: previousData.groups,\n    data: previousData.data.map(d => {\n        const datum = {\n            ...d,\n            group: shuffle(previousData.groups)[0],\n            price: randomPrice(),\n            volume: randomVolume(),\n        }\n\n        if (d.categories !== undefined) {\n            datum.categories = range(3).map(randomCategory)\n        }\n\n        return datum\n    }),\n})\n","interface XYRangeStaticValues {\n    values: string[] | number[]\n}\n\ninterface XYRandomNumericValues {\n    length: number\n    min: number\n    max: number\n    round?: boolean\n}\n\ntype XYRangeValues = XYRangeStaticValues | XYRandomNumericValues\n\nconst getValueGenerator = (config: XYRangeValues) => {\n    let generator: (index: number) => string | number\n\n    if ('values' in config) {\n        generator = (index: number) => config.values[index]\n    } else {\n        generator = () => {\n            let value = config.min + Math.random() * (config.max - config.min)\n            if (config.round) {\n                value = Math.round(value)\n            }\n\n            return value\n        }\n    }\n\n    return generator\n}\n\nexport const generateXYSeries = ({\n    serieIds,\n    x,\n    y,\n}: {\n    serieIds: string[]\n    x: XYRangeValues\n    y: XYRangeValues\n}) => {\n    const xLength = 'length' in x ? x.length : x.values.length\n\n    const getX = getValueGenerator(x)\n    const getY = getValueGenerator(y)\n\n    return serieIds.map(serieId => {\n        return {\n            id: serieId,\n            data: Array.from({ length: xLength }).map((_, index) => {\n                return {\n                    x: getX(index),\n                    y: getY(index),\n                }\n            }),\n        }\n    })\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { timeDays } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport * as color from './color'\nimport * as sets from './sets'\n\nexport { sets }\nexport const randColor = color.randColor\n\nexport const generateProgrammingLanguageStats = (shouldShuffle = true, limit = -1) => {\n    let langs = sets.programmingLanguages\n    if (shouldShuffle) {\n        langs = shuffle(langs)\n    }\n    if (limit < 1) {\n        limit = 1 + Math.round(Math.random() * (sets.programmingLanguages.length - 1))\n    }\n\n    return langs.slice(0, limit).map(language => ({\n        label: language,\n        value: Math.round(Math.random() * 600),\n        color: randColor(),\n    }))\n}\n\nexport const uniqRand = <T>(generator: (...args: unknown[]) => T) => {\n    const used: T[] = []\n\n    return (...args: unknown[]) => {\n        let value\n        do {\n            value = generator(...args)\n        } while (used.includes(value))\n\n        used.push(value)\n\n        return value\n    }\n}\n\nexport const randCountryCode = () => shuffle(sets.countryCodes)[0]\n\ntype DrinkDatum = {\n    id: string\n    color: string\n    data: Array<{\n        color: string\n        x: string\n        y: number\n    }>\n}\n\nexport const generateDrinkStats = (xSize = 16) => {\n    const rand = () => random(0, 60)\n    const types = ['whisky', 'rhum', 'gin', 'vodka', 'cognac']\n    const country = uniqRand(randCountryCode)\n\n    const data: DrinkDatum[] = types.map(id => ({\n        id,\n        color: randColor(),\n        data: [],\n    }))\n\n    range(xSize).forEach(() => {\n        const x = country()\n        types.forEach(id => {\n            data.find(d => d.id === id)?.data.push({\n                color: randColor(),\n                x,\n                y: rand(),\n            })\n        })\n    })\n\n    return data\n}\n\nexport const generateSerie = (xSize = 20) => {\n    const max = 100 + Math.random() * (Math.random() * 600)\n\n    return range(xSize).map(() => Math.round(Math.random() * max))\n}\n\nexport const generateSeries = (ids: string[], xKeys: string[]) =>\n    ids.map(id => ({\n        id,\n        color: randColor(),\n        data: xKeys.map(x => ({ x, y: Math.round(Math.random() * 300) })),\n    }))\n\nexport const generateStackData = (size = 3) => {\n    const length = 16\n    return range(size).map(() => generateSerie(length).map((v, i) => ({ x: i, y: v })))\n}\n\nexport const generateCountriesPopulation = (size: number) => {\n    const countryCode = uniqRand(randCountryCode)\n\n    return range(size).map(() => ({\n        country: countryCode(),\n        population: 200 + Math.round(Math.random() * Math.random() * 1000000),\n    }))\n}\n\nexport const generateOrderedDayCounts = (from: Date, to: Date) => {\n    const days = timeDays(from, to)\n    const dayFormat = timeFormat('%Y-%m-%d')\n\n    return days.map(day => {\n        return {\n            value: Math.round(Math.random() * 400),\n            day: dayFormat(day),\n        }\n    })\n}\n\nexport const generateDayCounts = (from: Date, to: Date, maxSize = 0.9) => {\n    const days = generateOrderedDayCounts(from, to)\n\n    const size =\n        Math.round(days.length * (maxSize * 0.4)) +\n        Math.round(Math.random() * (days.length * (maxSize * 0.6)))\n\n    return shuffle(days).slice(0, size)\n}\n\nexport const generateCountriesData = (\n    keys: string[],\n    { size = 12, min = 0, max = 200, withColors = true } = {}\n) =>\n    sets.countryCodes.slice(0, size).map(country => {\n        const d: Record<string, unknown> = {\n            country,\n        }\n        keys.forEach(key => {\n            d[key] = random(min, max)\n            if (withColors === true) {\n                d[`${key}Color`] = randColor()\n            }\n        })\n\n        return d\n    })\n\nconst libTreeItems = [\n    [\n        'viz',\n        [\n            ['stack', [['cchart'], ['xAxis'], ['yAxis'], ['layers']]],\n            [\n                'ppie',\n                [\n                    ['chart', [['pie', [['outline'], ['slices'], ['bbox']]], ['donut'], ['gauge']]],\n                    ['legends'],\n                ],\n            ],\n        ],\n    ],\n    ['colors', [['rgb'], ['hsl']]],\n    [\n        'utils',\n        [['randomize'], ['resetClock'], ['noop'], ['tick'], ['forceGC'], ['stackTrace'], ['dbg']],\n    ],\n    ['generators', [['address'], ['city'], ['animal'], ['movie'], ['user']]],\n    [\n        'set',\n        [\n            ['clone'],\n            ['intersect'],\n            ['merge'],\n            ['reverse'],\n            ['toArray'],\n            ['toObject'],\n            ['fromCSV'],\n            ['slice'],\n            ['append'],\n            ['prepend'],\n            ['shuffle'],\n            ['pick'],\n            ['plouc'],\n        ],\n    ],\n    [\n        'text',\n        [\n            ['trim'],\n            ['slugify'],\n            ['snakeCase'],\n            ['camelCase'],\n            ['repeat'],\n            ['padLeft'],\n            ['padRight'],\n            ['sanitize'],\n            ['ploucify'],\n        ],\n    ],\n    [\n        'misc',\n        [\n            ['greetings', [['hey'], ['HOWDY'], ['aloha'], ['AHOY']]],\n            ['other'],\n            [\n                'path',\n                [\n                    ['pathA'],\n                    ['pathB', [['pathB1'], ['pathB2'], ['pathB3'], ['pathB4']]],\n                    [\n                        'pathC',\n                        [\n                            ['pathC1'],\n                            ['pathC2'],\n                            ['pathC3'],\n                            ['pathC4'],\n                            ['pathC5'],\n                            ['pathC6'],\n                            ['pathC7'],\n                            ['pathC8'],\n                            ['pathC9'],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n]\n\ninterface LibTreeDatum {\n    name: string\n    loc?: number\n    color: string\n    children?: LibTreeDatum[]\n}\n\nexport const generateLibTree = (\n    name = 'nivo',\n    limit?: number | null,\n    children = libTreeItems\n): LibTreeDatum => {\n    limit = limit || children.length\n    if (limit > children.length) {\n        limit = children.length\n    }\n\n    const tree: LibTreeDatum = {\n        name,\n        color: randColor(),\n    }\n    if (children?.length > 0) {\n        tree.children = range(limit).map((_, i) => {\n            const leaf = children[i]\n\n            // full path `${name}.${leaf[0]}`\n            return generateLibTree(leaf[0] as string, null, (leaf[1] ?? []) as any)\n        })\n    } else {\n        tree.loc = Math.round(Math.random() * 200000)\n    }\n\n    return tree\n}\n\nconst wines = ['chardonay', 'carmenere', 'syrah']\nconst wineTastes = ['fruity', 'bitter', 'heavy', 'strong', 'sunny']\n\nexport const generateWinesTastes = ({ randMin = 20, randMax = 120 } = {}) => {\n    const data = wineTastes.map(taste => {\n        const d: Record<string, unknown> = { taste }\n        wines.forEach(wine => {\n            d[wine] = random(randMin, randMax)\n        })\n\n        return d\n    })\n\n    return { data, keys: wines }\n}\n\nexport * from './bullet'\nexport * from './chord'\nexport * from './network'\nexport * from './parallelCoordinates'\nexport * from './sankey'\nexport * from './swarmplot'\nexport * from './xySeries'\n","import { LayerId, Layout, OffsetId } from './types'\n\nexport const defaultProps = {\n    layout: 'vertical' as Layout,\n    offset: 'none' as OffsetId,\n    outerPadding: 0,\n    innerPadding: 3,\n\n    layers: ['grid', 'axes', 'bars', 'legends'] as LayerId[],\n\n    enableGridX: false,\n    enableGridY: true,\n\n    colors: { scheme: 'nivo' },\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import * as React from 'react'\nimport {\n    stackOffsetDiverging,\n    stackOffsetExpand,\n    stackOffsetNone,\n    stackOffsetSilhouette,\n    stackOffsetWiggle,\n} from 'd3-shape'\nimport { ScaleLinear } from 'd3-scale'\nimport { Box, Dimensions, Theme, SvgDefsAndFill, ModernMotionProps, ValueFormat } from '@nivo/core'\nimport { AxisProps } from '@nivo/axes'\nimport { OrdinalColorScaleConfig, InheritedColorConfig } from '@nivo/colors'\nimport { LegendProps } from '@nivo/legends'\n\nexport type DatumId = string | number\nexport type DatumValue = number\nexport type DatumFormattedValue = string | number\n\nexport type DatumPropertyAccessor<RawDatum, T> = (datum: RawDatum) => T\n\nexport interface DataProps<RawDatum> {\n    data: RawDatum[]\n    id: string | number | DatumPropertyAccessor<RawDatum, DatumId>\n    value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    dimensions: {\n        id: string\n        value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    }[]\n    valueFormat?: ValueFormat<number>\n}\n\nexport interface NormalizedDatum<RawDatum> {\n    index: number\n    id: DatumId\n    value: DatumValue\n    data: RawDatum\n}\n\nexport interface DimensionDatum<RawDatum> {\n    id: string\n    value: number\n    formattedValue: string | number\n    color: string\n    x: number\n    y: number\n    width: number\n    height: number\n    datum: ComputedDatum<RawDatum>\n}\n\nexport interface ComputedDatum<RawDatum> extends NormalizedDatum<RawDatum> {\n    x: number\n    y: number\n    width: number\n    height: number\n    dimensions: DimensionDatum<RawDatum>[]\n}\n\nexport interface BarDatum<RawDatum> extends DimensionDatum<RawDatum> {\n    key: string\n    fill?: string\n    borderColor: string\n    borderWidth: number\n}\n\nexport type LabelAccessorFunction<RawDatum> = (datum: ComputedDatum<RawDatum>) => string | number\n\nexport type LayerId = 'grid' | 'axes' | 'bars' | 'legends'\n\nexport interface CustomLayerProps<RawDatum> {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n}\n\nexport type CustomLayer<RawDatum> = React.FC<CustomLayerProps<RawDatum>>\n\nexport type Layer<RawDatum> = LayerId | CustomLayer<RawDatum>\n\nexport interface TooltipProps<RawDatum> {\n    bar: BarDatum<RawDatum>\n}\n\nexport type BarTooltipType<RawDatum> = (props: TooltipProps<RawDatum>) => JSX.Element\n\nexport type Layout = 'horizontal' | 'vertical'\n\nexport const offsetById = {\n    // Applies a zero baseline and normalizes the values\n    // for each point such that the topline is always one.\n    expand: stackOffsetExpand,\n    // Positive values are stacked above zero, negative values\n    // are stacked below zero, and zero values are stacked at zero.\n    diverging: stackOffsetDiverging,\n    // Applies a zero baseline.\n    none: stackOffsetNone,\n    // Shifts the baseline down such that the center of the streamgraph\n    // is always at zero.\n    silouhette: stackOffsetSilhouette,\n    // Shifts the baseline so as to minimize the weighted wiggle of layers.\n    // This offset is recommended for streamgraphs in conjunction with the inside-out order.\n    // See Stacked Graphs—Geometry & Aesthetics by Bryon & Wattenberg for more information.\n    wiggle: stackOffsetWiggle,\n}\n\nexport type OffsetId = keyof typeof offsetById\n\nexport type CommonProps<RawDatum> = {\n    margin: Box\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n\n    // axes and grid\n    axisTop?: AxisProps | null\n    axisRight?: AxisProps | null\n    axisBottom?: AxisProps | null\n    axisLeft?: AxisProps | null\n    enableGridX: boolean\n    gridXValues?: number[]\n    enableGridY: boolean\n    gridYValues?: number[]\n\n    // colors, theme and border\n    colors: OrdinalColorScaleConfig<Omit<DimensionDatum<RawDatum>, 'color' | 'fill'>>\n    theme: Theme\n    borderWidth: number\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // labels\n    enableLabels: boolean\n    label: string | LabelAccessorFunction<RawDatum>\n    labelSkipWidth: number\n    labelSkipHeight: number\n    labelTextColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // interactivity\n    isInteractive: boolean\n    tooltip: BarTooltipType<RawDatum>\n\n    legends: LegendProps[]\n\n    role: string\n}\n\nexport type MouseEventHandler<RawDatum, ElementType> = (\n    datum: BarDatum<RawDatum>,\n    event: React.MouseEvent<ElementType>\n) => void\n\nexport type MouseEventHandlers<RawDatum, ElementType> = Partial<{\n    onClick: MouseEventHandler<RawDatum, ElementType>\n    onMouseEnter: MouseEventHandler<RawDatum, ElementType>\n    onMouseMove: MouseEventHandler<RawDatum, ElementType>\n    onMouseLeave: MouseEventHandler<RawDatum, ElementType>\n}>\n\nexport type SvgProps<RawDatum> = DataProps<RawDatum> &\n    Dimensions &\n    Partial<CommonProps<RawDatum>> &\n    ModernMotionProps &\n    SvgDefsAndFill<BarDatum<RawDatum>> &\n    MouseEventHandlers<RawDatum, SVGRectElement> & {\n        layers?: Layer<RawDatum>[]\n    }\n","import { useMemo } from 'react'\nimport { get } from 'lodash'\nimport { stack as d3Stack, Stack, Series } from 'd3-shape'\nimport { ScaleLinear, scaleLinear } from 'd3-scale'\nimport { useValueFormatter, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport {\n    NormalizedDatum,\n    ComputedDatum,\n    DataProps,\n    DatumPropertyAccessor,\n    Layout,\n    DimensionDatum,\n    CommonProps,\n    CustomLayerProps,\n    BarDatum,\n    OffsetId,\n    offsetById,\n} from './types'\n\n// d3 stack does not support defining `.keys()` using\n// a mix of keys and custom value accessors, so we're\n// building a map of accessors in any case, we're gonna\n// use it later for `stack.value()`.\nexport const useDataDimensions = <RawDatum>(rawDimensions: DataProps<RawDatum>['dimensions']) =>\n    useMemo(() => {\n        const dimensions: Record<string, (datum: RawDatum) => number> = {}\n        const dimensionIds: string[] = []\n        rawDimensions.forEach(dimension => {\n            dimensionIds.push(dimension.id)\n            dimensions[dimension.id] =\n                typeof dimension.value === 'function'\n                    ? dimension.value\n                    : (datum: RawDatum) => get(datum, dimension.value as string, 0)\n        })\n\n        return { dimensionIds, dimensions }\n    }, [rawDimensions])\n\nexport const useStack = <RawDatum>(\n    dimensionIds: string[],\n    dimensions: Record<string, (datum: RawDatum) => number>,\n    offset: OffsetId\n) =>\n    useMemo(() => {\n        const offsetFunction = offsetById[offset]\n\n        return d3Stack<RawDatum>()\n            .keys(dimensionIds)\n            .value((datum, key) => dimensions[key](datum))\n            .offset(offsetFunction)\n    }, [dimensionIds, dimensions, offset])\n\nexport const useStackedData = <RawDatum>(\n    stack: Stack<any, RawDatum, string>,\n    data: DataProps<RawDatum>['data']\n) =>\n    useMemo(() => {\n        const stacked = stack(data)\n\n        const allValues: number[] = []\n        stacked.forEach(dimension => {\n            dimension.forEach(datum => {\n                allValues.push(datum[0])\n                allValues.push(datum[1])\n            })\n        })\n\n        const min = Math.min(...allValues)\n        const max = Math.max(...allValues)\n\n        return {\n            stacked,\n            min,\n            max,\n        }\n    }, [stack, data])\n\nexport const useDimensionsScale = (\n    min: number,\n    max: number,\n    width: number,\n    height: number,\n    layout: Layout\n) =>\n    useMemo(() => {\n        if (layout === 'vertical') {\n            return scaleLinear().domain([max, min]).range([0, height])\n        }\n\n        return scaleLinear().domain([min, max]).range([0, width])\n    }, [min, max, width, height, layout])\n\nexport const useNormalizedData = <RawDatum>(\n    data: DataProps<RawDatum>['data'],\n    id: DataProps<RawDatum>['id'],\n    value: DataProps<RawDatum>['value']\n) => {\n    const getId: DatumPropertyAccessor<RawDatum, string | number> =\n        typeof id === 'function' ? id : (datum: RawDatum) => get(datum, id)\n    const getValue: DatumPropertyAccessor<RawDatum, number> =\n        typeof value === 'function' ? value : (datum: RawDatum) => get(datum, value, 0)\n\n    return useMemo(() => {\n        const normalized: NormalizedDatum<RawDatum>[] = []\n        data.forEach((datum, index) => {\n            const datumId = getId(datum)\n            const datumValue = getValue(datum)\n\n            normalized.push({\n                index,\n                id: datumId,\n                value: datumValue,\n                data: datum,\n            })\n        })\n\n        return normalized\n    }, [data, getId, getValue])\n}\n\nexport const useThicknessScale = <RawDatum>({\n    data,\n    width,\n    height,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    width: number\n    height: number\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) =>\n    useMemo(() => {\n        const totalValue = data.reduce((acc, datum) => acc + datum.value, 0)\n\n        const thicknessScale = scaleLinear().domain([0, totalValue])\n\n        const totalPadding = 2 * outerPadding + (data.length - 1) * innerPadding\n\n        if (layout === 'vertical') {\n            thicknessScale.range([0, width - totalPadding])\n        } else {\n            thicknessScale.range([0, height - totalPadding])\n        }\n\n        return thicknessScale\n    }, [data, width, height, layout])\n\nexport const useComputedData = <RawDatum>({\n    data,\n    stacked,\n    dimensionIds,\n    valueFormat,\n    thicknessScale,\n    dimensionsScale,\n    colors,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    stacked: Series<RawDatum, string>[]\n    dimensionIds: string[]\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n    colors: CommonProps<RawDatum>['colors']\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) => {\n    const getColor = useOrdinalColorScale<Omit<DimensionDatum<RawDatum>, 'color'>>(colors, 'id')\n\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    return useMemo(() => {\n        const computedData: ComputedDatum<RawDatum>[] = []\n\n        let position = outerPadding\n\n        data.forEach(datum => {\n            const thickness = thicknessScale(datum.value)\n\n            const computedDatum: ComputedDatum<RawDatum> = {\n                ...datum,\n                x: layout === 'vertical' ? position : 0,\n                y: layout === 'vertical' ? 0 : position,\n                width: layout === 'vertical' ? thickness : 0,\n                height: layout === 'vertical' ? 0 : thickness,\n                dimensions: [],\n            }\n\n            const allPositions: number[] = []\n            let totalSize = 0\n\n            position += thickness + innerPadding\n\n            dimensionIds.forEach(dimensionId => {\n                const dimension = stacked.find(stack => stack.key === dimensionId)\n                if (dimension) {\n                    const dimensionPoint = dimension[datum.index]\n                    const dimensionDatum: DimensionDatum<RawDatum> = {\n                        id: dimensionId,\n                        datum: computedDatum,\n                        value: dimensionPoint[1] - dimensionPoint[0],\n                        formattedValue: formatValue(dimensionPoint[1] - dimensionPoint[0]),\n                        color: 'rgba(0, 0, 0, 0)',\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    }\n\n                    const position0 = dimensionsScale(dimensionPoint[0])\n                    const position1 = dimensionsScale(dimensionPoint[1])\n\n                    if (layout === 'vertical') {\n                        dimensionDatum.x = computedDatum.x\n                        dimensionDatum.y = Math.min(position0, position1)\n                        dimensionDatum.width = computedDatum.width\n                        dimensionDatum.height = Math.max(position0, position1) - dimensionDatum.y\n\n                        allPositions.push(dimensionDatum.y)\n                        totalSize += dimensionDatum.height\n                    } else {\n                        dimensionDatum.x = Math.min(position0, position1)\n                        dimensionDatum.y = computedDatum.y\n                        dimensionDatum.width = Math.max(position0, position1) - dimensionDatum.x\n                        dimensionDatum.height = computedDatum.height\n\n                        allPositions.push(dimensionDatum.x)\n                        totalSize += dimensionDatum.width\n                    }\n\n                    dimensionDatum.color = getColor(dimensionDatum)\n\n                    computedDatum.dimensions.push(dimensionDatum)\n                }\n\n                if (layout === 'vertical') {\n                    computedDatum.y = Math.min(...allPositions)\n                    computedDatum.height = totalSize\n                } else {\n                    computedDatum.x = Math.min(...allPositions)\n                    computedDatum.width = totalSize\n                }\n            })\n\n            computedData.push(computedDatum)\n        })\n\n        return computedData\n    }, [\n        data,\n        stacked,\n        dimensionIds,\n        thicknessScale,\n        dimensionsScale,\n        layout,\n        outerPadding,\n        innerPadding,\n        getColor,\n        formatValue,\n    ])\n}\n\nexport const useBars = <RawDatum>(\n    data: ComputedDatum<RawDatum>[],\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>,\n    borderWidth: number\n) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<DimensionDatum<RawDatum>>(borderColor, theme)\n\n    return useMemo(() => {\n        const all: BarDatum<RawDatum>[] = []\n        data.forEach(datum => {\n            datum.dimensions.forEach(dimension => {\n                all.push({\n                    key: `${datum.id}-${dimension.id}`,\n                    ...dimension,\n                    borderColor: getBorderColor(dimension),\n                    borderWidth,\n                })\n            })\n        })\n\n        return all\n    }, [data, borderWidth, getBorderColor])\n}\n\nexport const useMarimekko = <RawDatum>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions: rawDimensions,\n    layout,\n    offset,\n    outerPadding,\n    innerPadding,\n    colors,\n    borderColor,\n    borderWidth,\n    width,\n    height,\n}: {\n    data: DataProps<RawDatum>['data']\n    id: DataProps<RawDatum>['id']\n    value: DataProps<RawDatum>['value']\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    dimensions: DataProps<RawDatum>['dimensions']\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n    colors: CommonProps<RawDatum>['colors']\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n    borderWidth: number\n    width: number\n    height: number\n}) => {\n    const { dimensionIds, dimensions } = useDataDimensions<RawDatum>(rawDimensions)\n    const stack = useStack<RawDatum>(dimensionIds, dimensions, offset)\n    const { stacked, min, max } = useStackedData<RawDatum>(stack, data)\n    const normalizedData = useNormalizedData<RawDatum>(data, id, value)\n    const thicknessScale = useThicknessScale({\n        data: normalizedData,\n        width,\n        height,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const dimensionsScale = useDimensionsScale(min, max, width, height, layout)\n    const computedData = useComputedData<RawDatum>({\n        data: normalizedData,\n        stacked,\n        dimensionIds,\n        valueFormat,\n        thicknessScale,\n        dimensionsScale,\n        colors,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const bars = useBars<RawDatum>(computedData, borderColor, borderWidth)\n\n    return {\n        computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n        dimensionIds,\n    }\n}\n\nexport const useLayerContext = <RawDatum>({\n    data,\n    bars,\n    thicknessScale,\n    dimensionsScale,\n}: {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n}): CustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            data,\n            bars,\n            thicknessScale,\n            dimensionsScale,\n        }),\n        [data, bars, thicknessScale, dimensionsScale]\n    )\n\nexport const useLegendData = <RawDatum>(dimensionIds: string[], bars: BarDatum<RawDatum>[]) => {\n    const legendData: {\n        id: string\n        label: string\n        color: string\n        fill?: string\n    }[] = []\n\n    dimensionIds.forEach(dimensionId => {\n        const bar = bars.find(bar => bar.id === dimensionId)\n        if (bar) {\n            legendData.push({\n                id: dimensionId,\n                label: dimensionId,\n                color: bar.color,\n                fill: bar.fill,\n            })\n        }\n    })\n\n    return legendData\n}\n","import { createElement, MouseEvent, useCallback } from 'react'\nimport { animated, SpringValues, to } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\n\ninterface BarProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    bar: BarDatum<RawDatum>\n    animatedProps: SpringValues<{\n        x: number\n        y: number\n        width: number\n        height: number\n        opacity: number\n        color: string\n        borderColor: string\n    }>\n    isInteractive: boolean\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bar = <RawDatum,>({\n    bar,\n    animatedProps,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        event => showTooltipFromEvent(createElement(tooltip, { bar }), event),\n        [showTooltipFromEvent, tooltip, bar]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.(bar, event)\n        },\n        [onClick, bar]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseMove?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(bar, event)\n            hideTooltip()\n        },\n        [onMouseLeave, bar, hideTooltip]\n    )\n\n    return (\n        <animated.rect\n            x={animatedProps.x}\n            y={animatedProps.y}\n            width={to(animatedProps.width, value => Math.max(value, 0))}\n            height={to(animatedProps.height, value => Math.max(value, 0))}\n            fill={bar.fill ?? animatedProps.color}\n            stroke={animatedProps.borderColor}\n            strokeWidth={bar.borderWidth}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\nimport { Bar } from './Bar'\n\ninterface BarsProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    isInteractive: boolean\n    bars: BarDatum<RawDatum>[]\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bars = <RawDatum,>({\n    bars,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarsProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<\n        BarDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            width: number\n            height: number\n            color: string\n            opacity: number\n            borderColor: string\n        }\n    >(bars, {\n        keys: bar => bar.key,\n        initial: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        from: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 0,\n            borderColor: bar.borderColor,\n        }),\n        enter: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        update: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        leave: bar => ({\n            opacity: 0,\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, bar) => (\n                <Bar<RawDatum>\n                    key={bar.key}\n                    bar={bar}\n                    animatedProps={style}\n                    isInteractive={isInteractive}\n                    tooltip={tooltip}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                />\n            ))}\n        </>\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BarDatum } from './types'\n\nexport const BarTooltip = <RawDatum,>({ bar }: { bar: BarDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={`${bar.datum.id} - ${bar.id}`}\n        value={bar.formattedValue}\n        enableChip={true}\n        color={bar.color}\n    />\n)\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { SvgProps, LayerId, DimensionDatum } from './types'\nimport { defaultProps } from './props'\nimport { useMarimekko, useLayerContext, useLegendData } from './hooks'\nimport { Bars } from './Bars'\nimport { BarTooltip } from './BarTooltip'\n\nconst InnerMarimekko = <RawDatum,>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions,\n    width,\n    height,\n    margin: partialMargin,\n    layout = defaultProps.layout,\n    offset = defaultProps.offset,\n    outerPadding = defaultProps.outerPadding,\n    innerPadding = defaultProps.innerPadding,\n    layers = defaultProps.layers,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<DimensionDatum<RawDatum>, 'color'>\n    >,\n    defs = [],\n    fill = [],\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<DimensionDatum<RawDatum>>,\n    isInteractive = defaultProps.isInteractive,\n    tooltip = BarTooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    legends = [],\n    role,\n}: SvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { computedData, bars, thicknessScale, dimensionsScale, dimensionIds } =\n        useMarimekko<RawDatum>({\n            data,\n            id,\n            value,\n            dimensions,\n            valueFormat,\n            layout,\n            offset,\n            outerPadding,\n            innerPadding,\n            colors,\n            borderColor,\n            borderWidth,\n            width: innerWidth,\n            height: innerHeight,\n        })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        bars: null,\n        legends: null,\n    }\n\n    const boundDefs = bindDefs(defs, bars, fill)\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Bars<RawDatum>\n                key=\"bars\"\n                bars={bars}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n            />\n        )\n    }\n\n    const xScale = layout === 'vertical' ? thicknessScale : dimensionsScale\n    const yScale = layout === 'vertical' ? dimensionsScale : thicknessScale\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                xScale={enableGridX ? (xScale as any) : undefined}\n                yScale={enableGridY ? (yScale as any) : undefined}\n                width={innerWidth}\n                height={innerHeight}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    const legendData = useLegendData<RawDatum>(dimensionIds, bars)\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <g key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    const layerContext = useLayerContext<RawDatum>({\n        data: computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as LayerId] !== undefined) {\n                    return layerById[layer as LayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Marimekko = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    ...otherProps\n}: SvgProps<RawDatum>) => (\n    <Container\n        theme={otherProps.theme}\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n    >\n        <InnerMarimekko<RawDatum>\n            isInteractive={isInteractive}\n            animate={animate}\n            motionConfig={motionConfig}\n            {...otherProps}\n        />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Marimekko } from './Marimekko'\nimport { SvgProps } from './types'\n\nexport const ResponsiveMarimekko = <RawDatum,>(\n    props: Omit<SvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Marimekko<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { useCallback, createElement } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfigCustomFunction } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { StreamCommonProps, StreamDatum, StreamLayerData } from './types'\n\ninterface StreamLayerProps<RawDatum extends StreamDatum> {\n    layer: StreamLayerData\n    fillOpacity: number\n    borderWidth: number\n    getBorderColor: InheritedColorConfigCustomFunction<StreamLayerData>\n    isInteractive: boolean\n    tooltip: StreamCommonProps<RawDatum>['tooltip']\n}\n\nexport const StreamLayer = <RawDatum extends StreamDatum>({\n    layer,\n    fillOpacity,\n    borderWidth,\n    getBorderColor,\n    isInteractive,\n    tooltip,\n}: StreamLayerProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseHover = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { layer }), event, 'left')\n        },\n        [showTooltipFromEvent, layer]\n    )\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(layer.path)\n    const animatedProps = useSpring({\n        color: layer.color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={layer.fill ? layer.fill : animatedProps.color}\n            fillOpacity={fillOpacity}\n            stroke={getBorderColor(layer)}\n            strokeWidth={borderWidth}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? hideTooltip : undefined}\n        />\n    )\n}\n","import { InheritedColorConfigCustomFunction } from '@nivo/colors'\nimport { StreamLayer } from './StreamLayer'\nimport { StreamCommonProps, StreamLayerData, StreamDatum } from './types'\n\ninterface StreamLayersProps<RawDatum extends StreamDatum> {\n    layers: StreamLayerData[]\n    fillOpacity: number\n    borderWidth: number\n    getBorderColor: InheritedColorConfigCustomFunction<StreamLayerData>\n    isInteractive: boolean\n    tooltip: StreamCommonProps<RawDatum>['tooltip']\n}\n\nexport const StreamLayers = <RawDatum extends StreamDatum>({\n    layers,\n    fillOpacity,\n    borderWidth,\n    getBorderColor,\n    isInteractive,\n    tooltip,\n}: StreamLayersProps<RawDatum>) => (\n    <g>\n        {layers.map((layer, i) => (\n            <StreamLayer<RawDatum>\n                key={i}\n                layer={layer}\n                getBorderColor={getBorderColor}\n                borderWidth={borderWidth}\n                fillOpacity={fillOpacity}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n            />\n        ))}\n    </g>\n)\n","import { createElement } from 'react'\nimport { StreamSvgProps, StreamLayerDatum, StreamDatum } from './types'\n\ninterface StreamDotsProps<RawDatum extends StreamDatum> {\n    id: string | number\n    color: string\n    data: StreamLayerDatum[]\n    dotComponent: Exclude<StreamSvgProps<RawDatum>['dotComponent'], undefined>\n    position: 'start' | 'center' | 'end'\n    getSize: (datum: StreamLayerDatum) => number\n    getColor: (datum: StreamLayerDatum) => string\n    getBorderWidth: (datum: StreamLayerDatum) => number\n    getBorderColor: (datum: StreamLayerDatum) => string\n}\n\nconst getDotY = <RawDatum extends StreamDatum>(\n    datum: StreamLayerDatum,\n    position: StreamDotsProps<RawDatum>['position']\n) => {\n    let y = datum.y2\n    if (position === 'center') {\n        y = datum.y1 + (datum.y2 - datum.y1) / 2\n    } else if (position === 'start') {\n        y = datum.y1\n    }\n\n    return y\n}\n\nexport const StreamDots = <RawDatum extends StreamDatum>({\n    data,\n    dotComponent,\n    position,\n    getSize,\n    getColor,\n    getBorderWidth,\n    getBorderColor,\n}: StreamDotsProps<RawDatum>) => (\n    <>\n        {data.map((datum, i) => {\n            return createElement(dotComponent, {\n                key: i,\n                datum,\n                x: datum.x,\n                y: getDotY<RawDatum>(datum, position),\n                size: getSize(datum),\n                color: getColor(datum),\n                borderWidth: getBorderWidth(datum),\n                borderColor: getBorderColor(datum),\n            })\n        })}\n    </>\n)\n","import { createElement, useCallback, useState } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { StreamCommonProps, StreamDatum, StreamSliceData } from './types'\n\ninterface StreamSlicesItemProps<RawDatum extends StreamDatum> {\n    slice: StreamSliceData\n    height: number\n    tooltip: StreamCommonProps<RawDatum>['stackTooltip']\n}\n\nexport const StreamSlicesItem = <RawDatum extends StreamDatum>({\n    slice,\n    height,\n    tooltip,\n}: StreamSlicesItemProps<RawDatum>) => {\n    const [isHover, setIsHover] = useState(false)\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            setIsHover(true)\n            showTooltipFromEvent(createElement(tooltip, { slice }), event, 'left')\n        },\n        [setIsHover, showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setIsHover(false)\n        hideTooltip()\n    }, [setIsHover, hideTooltip])\n\n    return (\n        <g transform={`translate(${slice.x}, 0)`}>\n            {isHover && (\n                <line\n                    x1={0}\n                    x2={0}\n                    y1={0}\n                    y2={height}\n                    stroke=\"#000\"\n                    strokeOpacity={0.35}\n                    strokeWidth={1}\n                />\n            )}\n            <rect\n                x={-20}\n                width={40}\n                height={height}\n                fill=\"#000\"\n                fillOpacity={0}\n                onMouseEnter={handleMouseHover}\n                onMouseMove={handleMouseHover}\n                onMouseLeave={handleMouseLeave}\n            />\n        </g>\n    )\n}\n","import { StreamSliceData, StreamDatum, StreamCommonProps } from './types'\nimport { StreamSlicesItem } from './StreamSlicesItem'\n\ninterface StreamSlicesProps<RawDatum extends StreamDatum> {\n    slices: StreamSliceData[]\n    height: number\n    tooltip: StreamCommonProps<RawDatum>['stackTooltip']\n}\n\nexport const StreamSlices = <RawDatum extends StreamDatum>({\n    slices,\n    height,\n    tooltip,\n}: StreamSlicesProps<RawDatum>) => (\n    <g>\n        {slices.map(slice => (\n            <StreamSlicesItem<RawDatum>\n                key={slice.index}\n                slice={slice}\n                height={height}\n                tooltip={tooltip}\n            />\n        ))}\n    </g>\n)\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\n\nexport interface StreamDotsItemProps {\n    x: number\n    y: number\n    size: number\n    color: string\n    borderWidth: number\n    borderColor: string\n}\n\nexport const StreamDotsItem = ({\n    x,\n    y,\n    size,\n    color,\n    borderWidth,\n    borderColor,\n}: StreamDotsItemProps) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size * 0.5,\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            r={animatedProps.radius}\n            fill={animatedProps.color}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n        />\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { TooltipProps } from './types'\n\nexport const LayerTooltip = ({ layer }: TooltipProps) => (\n    <BasicTooltip id={layer.label} enableChip={true} color={layer.color} />\n)\n","import { useMemo } from 'react'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\nimport { StackTooltipProps } from './types'\n\nexport const StackTooltip = ({ slice }: StackTooltipProps) => {\n    const rows = useMemo(\n        () =>\n            slice.stack.map(p => [\n                <Chip key={p.layerId} color={p.color} />,\n                p.layerLabel,\n                p.formattedValue,\n            ]),\n        [slice]\n    )\n\n    return <TableTooltip rows={rows} />\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    Container,\n    SvgWrapper,\n    useDimensions,\n    // @ts-ignore\n    bindDefs,\n} from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { StreamLayers } from './StreamLayers'\nimport { StreamDots } from './StreamDots'\nimport { StreamSlices } from './StreamSlices'\nimport { useStream } from './hooks'\nimport { svgDefaultProps } from './props'\nimport { StreamDatum, StreamLayerId, StreamSvgProps } from './types'\n\ntype InnerStreamProps<RawDatum extends StreamDatum> = Omit<\n    StreamSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerStream = <RawDatum extends StreamDatum>({\n    data,\n    keys,\n    label,\n    valueFormat,\n\n    offsetType,\n    order,\n    curve,\n\n    layers: chartLayers = svgDefaultProps.layers,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n\n    colors,\n    fillOpacity = svgDefaultProps.fillOpacity,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n\n    enableDots = svgDefaultProps.enableDots,\n    dotPosition = svgDefaultProps.dotPosition,\n    dotComponent = svgDefaultProps.dotComponent,\n    dotSize,\n    dotColor,\n    dotBorderWidth,\n    dotBorderColor,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    enableStackTooltip = svgDefaultProps.enableStackTooltip,\n    stackTooltip = svgDefaultProps.stackTooltip,\n\n    legends = svgDefaultProps.legends,\n\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerStreamProps<RawDatum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        xScale,\n        yScale,\n        layers,\n        slices,\n        getBorderColor,\n        getDotSize,\n        getDotColor,\n        getDotBorderWidth,\n        getDotBorderColor,\n        layerContext,\n    } = useStream<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        keys,\n        label,\n        valueFormat,\n        offsetType,\n        order,\n        curve,\n        colors,\n        borderColor,\n        dotSize,\n        dotColor,\n        dotBorderWidth,\n        dotBorderColor,\n    })\n\n    const boundDefs = bindDefs(defs, layers, fill)\n\n    const layerById: Record<StreamLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        layers: null,\n        dots: null,\n        slices: null,\n        legends: null,\n    }\n\n    if (chartLayers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as any) : null}\n                yScale={enableGridY ? (yScale as any) : null}\n            />\n        )\n    }\n\n    if (chartLayers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (chartLayers.includes('layers')) {\n        layerById.layers = (\n            <StreamLayers<RawDatum>\n                key=\"layers\"\n                layers={layers}\n                fillOpacity={fillOpacity}\n                borderWidth={borderWidth}\n                getBorderColor={getBorderColor}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    if (chartLayers.includes('dots') && enableDots) {\n        layerById.dots = (\n            <Fragment key=\"dots\">\n                {layers.map(layer => (\n                    <StreamDots\n                        key={layer.id}\n                        id={layer.id}\n                        color={layer.color}\n                        data={layer.data}\n                        dotComponent={dotComponent}\n                        position={dotPosition}\n                        getSize={getDotSize}\n                        getColor={getDotColor}\n                        getBorderWidth={getDotBorderWidth}\n                        getBorderColor={getDotBorderColor}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (chartLayers.includes('slices') && isInteractive && enableStackTooltip) {\n        layerById.slices = (\n            <StreamSlices<RawDatum>\n                key=\"slices\"\n                slices={slices}\n                height={innerHeight}\n                tooltip={stackTooltip}\n            />\n        )\n    }\n\n    if (chartLayers.includes('legends')) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => {\n                    const legendData = layers\n                        .map(layer => ({\n                            id: layer.id,\n                            label: layer.label,\n                            color: layer.color,\n                            fill: layer.fill,\n                        }))\n                        .reverse()\n\n                    return (\n                        <BoxLegendSvg\n                            key={i}\n                            {...legend}\n                            containerWidth={innerWidth}\n                            containerHeight={innerHeight}\n                            data={legendData}\n                        />\n                    )\n                })}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {chartLayers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Stream = <RawDatum extends StreamDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: StreamSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerStream<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { StreamDatum, StreamSvgProps } from './types'\nimport { Stream } from './Stream'\n\nexport const ResponsiveStream = <RawDatum extends StreamDatum>(\n    props: Omit<StreamSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Stream<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import roundNode from \"./treemap/round.js\";\nimport treemapDice from \"./treemap/dice.js\";\nexport default function () {\n  var dx = 1,\n      dy = 1,\n      padding = 0,\n      round = false;\n\n  function partition(root) {\n    var n = root.height + 1;\n    root.x0 = root.y0 = padding;\n    root.x1 = dx;\n    root.y1 = dy / n;\n    root.eachBefore(positionNode(dy, n));\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(dy, n) {\n    return function (node) {\n      if (node.children) {\n        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n      }\n\n      var x0 = node.x0,\n          y0 = node.y0,\n          x1 = node.x1 - padding,\n          y1 = node.y1 - padding;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n    };\n  }\n\n  partition.round = function (x) {\n    return arguments.length ? (round = !!x, partition) : round;\n  };\n\n  partition.size = function (x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n  };\n\n  partition.padding = function (x) {\n    return arguments.length ? (padding = +x, partition) : padding;\n  };\n\n  return partition;\n}","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const SunburstTooltip = <RawDatum,>({\n    id,\n    formattedValue,\n    color,\n}: ComputedDatum<RawDatum>) => (\n    <BasicTooltip id={id} value={formattedValue} enableChip={true} color={color} />\n)\n","import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { ComputedDatum, SunburstCommonProps, MouseHandlers } from './types'\nimport { useTooltip } from '@nivo/tooltip'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: SunburstCommonProps<RawDatum>['borderWidth']\n    borderColor: SunburstCommonProps<RawDatum>['borderColor']\n    isInteractive: SunburstCommonProps<RawDatum>['isInteractive']\n    onClick?: MouseHandlers<RawDatum>['onClick']\n    onMouseEnter?: MouseHandlers<RawDatum>['onMouseEnter']\n    onMouseMove?: MouseHandlers<RawDatum>['onMouseMove']\n    onMouseLeave?: MouseHandlers<RawDatum>['onMouseLeave']\n    tooltip: SunburstCommonProps<RawDatum>['tooltip']\n    transitionMode: SunburstCommonProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, datum), event)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, datum), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n","import { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { ArcLabelsLayer } from '@nivo/arcs'\nimport { defaultProps } from './props'\nimport { useSunburst, useSunburstLayerContext } from './hooks'\nimport { SunburstSvgProps, SunburstLayerId, SunburstLayer, ComputedDatum } from './types'\nimport { Arcs } from './Arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\n\ntype InnerSunburstProps<RawDatum> = Partial<\n    Omit<\n        SunburstSvgProps<RawDatum>,\n        'data' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height' | 'isInteractive'>\n\nconst InnerSunburst = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    cornerRadius = defaultProps.cornerRadius,\n    layers = defaultProps.layers as SunburstLayer<RawDatum>[],\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor,\n    margin: partialMargin,\n    width,\n    height,\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsComponent,\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n    transitionMode = defaultProps.transitionMode,\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n    role = defaultProps.role,\n}: InnerSunburstProps<RawDatum>) => {\n    const { innerHeight, innerWidth, margin, outerHeight, outerWidth } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { centerX, centerY, radius } = useMemo(() => {\n        const radius = Math.min(innerWidth, innerHeight) / 2\n\n        return { radius, centerX: innerWidth / 2, centerY: innerHeight / 2 }\n    }, [innerHeight, innerWidth])\n\n    const { arcGenerator, nodes } = useSunburst({\n        data,\n        id,\n        value,\n        valueFormat,\n        radius,\n        cornerRadius,\n        colors,\n        colorBy,\n        inheritColorFromParent,\n        childColor,\n    })\n\n    const boundDefs = bindDefs(defs, nodes, fill, {\n        dataKey: '.',\n        colorKey: 'color',\n        targetKey: 'fill',\n    })\n\n    const layerById: Record<SunburstLayerId, ReactNode> = {\n        arcs: null,\n        arcLabels: null,\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={nodes}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                transitionMode={transitionMode}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseLeave={onMouseLeave}\n                onMouseMove={onMouseMove}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={nodes}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    const layerContext = useSunburstLayerContext<RawDatum>({\n        nodes,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            defs={boundDefs}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as SunburstLayerId] !== undefined) {\n                    return layerById[layer as SunburstLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Sunburst = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>> &\n    Pick<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSunburst<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Sunburst } from './Sunburst'\nimport { SunburstSvgProps } from './types'\n\ntype ResponsiveSunburstProps<RawDatum> = Partial<\n    Omit<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>\n> &\n    Pick<SunburstSvgProps<RawDatum>, 'data'>\n\nexport const ResponsiveSunburst = <RawDatum,>(props: ResponsiveSunburstProps<RawDatum>) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Sunburst<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n"],"names":["exclude","generateChoroplethData","countries","feature","includes","id","map","value","Math","round","random","useHomeTheme","theme","useTheme","useMemo","_colors","colors","coloredRange","slice","reversedColors","reverse","nivoTheme","axis","ticks","line","stroke","text","fill","fontSize","grid","strokeWidth","strokeDasharray","labels","dimensions","width","height","margin","top","right","bottom","left","lineWidth","pointSize","serieIds","HomeAreaBumpDemo","data","years","range","year","x","y","borderWidth","spacing","borderColor","blendMode","enableGridX","axisTop","axisBottom","startLabel","endLabel","isInteractive","animate","HomeBarDemo","isHorizontal","generateCountriesData","size","keys","indexBy","layout","groupMode","padding","enableGridY","enableLabel","axisLeft","HomeBumpDemo","ranks","series","rank","forEach","shuffle","i","push","axisRight","calendarFrom","Date","calendarTo","calendarData","generateDayCounts","HomeCalendarDemo","Container","from","to","dayBorderWidth","yearSpacing","emptyColor","dayBorderColor","monthBorderColor","styled","HomeChordDemo","generateChordData","matrix","padAngle","innerRadiusRatio","arcBorderWidth","arcBorderColor","ribbonBorderWidth","ribbonBorderColor","HomeChoroplethDemo","features","domain","unknownColor","projectionType","projectionScale","projectionTranslation","projectionRotation","HomeCirclePackingDemo","generateLibTree","colorBy","childColor","enableLabels","HomeLineDemo","generateDrinkStats","yScale","type","stacked","curve","HomePieDemo","generateProgrammingLanguageStats","d","label","innerRadius","enableArcLabels","enableArcLinkLabels","HomeRadarDemo","generateWinesTastes","dotSize","dotBorderWidth","dotBorderColor","enableDotLabel","HomeRadialBarDemo","categories","category","tracksColor","endAngle","radialAxisStart","circularAxisOuter","HomeSankeyDemo","generateSankeyData","nodeCount","maxIterations","nodeBorderColor","nodeOpacity","nodeThickness","nodeInnerPadding","nodeSpacing","nodeBorderWidth","linkOpacity","linkBlendMode","linkContract","labelTextColor","HomeStreamDemo","reduce","acc","offsetType","HomeSunburstDemo","HomeSwarmPlotDemo","generateSwarmPlotData","min","max","groups","groupBy","valueScale","key","values","sizes","HomeTreeMapDemo","identity","valueFormat","tile","leavesOnly","outerPadding","innerPadding","voronoi","xDomain","yDomain","HomeVoronoiDemo","enableLinks","linkLineColor","cellLineColor","cellLineWidth","enablePoints","pointColor","getRandomValue","HomeMarimekkoDemo","statement","participation","stronglyAgree","agree","disagree","stronglyDisagree","defs","background","color","rotation","match","offset","randColor","countryCodes","names","programmingLanguages","generateBulletData","title","subtitle","rangeCount","measureCount","markerCount","float","ranges","remaining","measures","length","markers","minValue","maxValue","maxSize","selectedKeys","generateNetworkData","rootSize","midSize","leafSize","minMidNodes","maxMidNodes","minLeaves","maxLeaves","rootNode","nodes","Array","_","k","links","extraNodes","source","target","distance","concat","generateParallelCoordinatesData","availableNodes","n","name","getNodeTargets","currentPath","targets","filter","Error","join","targetId","getNodesTargets","targetsById","link","Object","assign","node","nodeColor","randId","randomPrice","randomVolume","randomCategory","categoryCount","group","groupIndex","price","index","datum","volume","randomizeSwarmPlotData","previousData","getValueGenerator","config","generator","generateXYSeries","xLength","getX","getY","serieId","shouldShuffle","limit","langs","sets","language","uniqRand","used","randCountryCode","xSize","types","country","find","generateSeries","ids","xKeys","days","timeDays","dayFormat","timeFormat","day","generateOrderedDayCounts","withColors","libTreeItems","children","tree","leaf","loc","wines","wineTastes","randMin","randMax","taste","wine","defaultProps","layers","scheme","modifiers","motionConfig","offsetById","expand","diverging","none","silouhette","wiggle","stackOffsetWiggle","useMarimekko","rawDimensions","dimensionIds","dimension","useDataDimensions","stack","offsetFunction","useStack","allValues","useStackedData","normalizedData","getId","getValue","normalized","datumId","datumValue","useNormalizedData","thicknessScale","totalValue","scaleLinear","totalPadding","useThicknessScale","dimensionsScale","useDimensionsScale","computedData","getColor","useOrdinalColorScale","formatValue","useValueFormatter","position","thickness","computedDatum","allPositions","totalSize","dimensionId","dimensionPoint","dimensionDatum","formattedValue","position0","position1","useComputedData","bars","getBorderColor","useInheritedColor","all","useBars","Bar","bar","animatedProps","tooltip","onClick","onMouseEnter","onMouseMove","onMouseLeave","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","event","createElement","handleClick","handleMouseEnter","handleMouseMove","handleMouseLeave","undefined","Bars","useMotionConfig","springConfig","transition","useTransition","initial","opacity","enter","update","leave","immediate","BarTooltip","enableChip","InnerMarimekko","partialMargin","gridXValues","gridYValues","legends","role","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","layerById","axes","boundDefs","bindDefs","xScale","xValues","yValues","legendData","useLegendData","containerWidth","containerHeight","layerContext","useLayerContext","layer","Marimekko","otherProps","ResponsiveMarimekko","StreamLayer","fillOpacity","handleMouseHover","animatedPath","useAnimatedPath","useSpring","StreamLayers","getDotY","StreamDots","dotComponent","getSize","getBorderWidth","StreamSlicesItem","useState","isHover","setIsHover","transform","x1","x2","y1","y2","strokeOpacity","StreamSlices","slices","order","enableDots","dotPosition","radius","cx","cy","r","dotColor","enableStackTooltip","stackTooltip","rows","p","legendLabel","svgDefaultProps","isFocusable","InnerStream","chartLayers","ariaLabel","ariaLabelledBy","ariaDescribedBy","areaCurveFactory","useCurveInterpolation","areaGenerator","d3Stack","stackOffsetFromProp","stackOrderFromProp","allMin","allMax","point","getDotSize","getDotColor","getDotBorderWidth","getDotBorderColor","getLabel","usePropertyAccessor","enhancedLayers","computedPoints","layerId","layerLabel","path","layerWithComputedProperties","sliceStack","a","b","useStream","dots","Stream","renderWrapper","ResponsiveStream","dx","dy","partition","root","x0","y0","eachBefore","depth","positionNode","arguments","cornerRadius","inheritColorFromParent","arcLabel","arcLabelsRadiusOffset","arcLabelsSkipAngle","arcLabelsTextColor","transitionMode","Arcs","center","arcGenerator","InnerSunburst","arcLabelsComponent","centerX","centerY","getChildColor","clonedData","cloneDeep","hierarchy","d3Hierarchy","descendants","d3Partition","total","sortBy","descendant","percentage","ancestor","arc","startAngle","outerRadius","parent","normalizedNode","useArcGenerator","useSunburst","dataKey","colorKey","targetKey","arcs","arcLabels","radiusOffset","skipAngle","textColor","component","useSunburstLayerContext","Sunburst","ResponsiveSunburst","copyArray","shuffleSelf","module","exports","array","baseFor","object","iteratee","nativeFloor","floor","nativeRandom","lower","upper","collection","arrayMap","props","baseRandom","lastIndex","rand","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","temp","arrayShuffle","baseShuffle","isArray","baseValues"],"sourceRoot":""}