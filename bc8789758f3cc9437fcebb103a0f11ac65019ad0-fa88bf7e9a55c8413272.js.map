{"version":3,"file":"bc8789758f3cc9437fcebb103a0f11ac65019ad0-fa88bf7e9a55c8413272.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-force/src/collide.js","webpack://nivo-website/../node_modules/d3-force/src/x.js","webpack://nivo-website/../node_modules/d3-force/src/y.js","webpack://nivo-website/../src/SwarmPlotTooltip.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/Circles.tsx","webpack://nivo-website/../src/CircleSvg.tsx","webpack://nivo-website/../src/SwarmPlotAnnotations.tsx","webpack://nivo-website/../src/SwarmPlot.tsx","webpack://nivo-website/../src/ResponsiveSwarmPlot.tsx","webpack://nivo-website/../src/SwarmPlotCanvas.tsx","webpack://nivo-website/../src/ResponsiveSwarmPlotCanvas.tsx"],"sourcesContent":["import { quadtree } from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nexport default function (radius) {\n  var nodes,\n      radii,\n      random,\n      strength = 1,\n      iterations = 1;\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i,\n        n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data,\n          rj = quad.r,\n          r = ri + rj;\n\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n\n          if (l < r * r) {\n            if (x === 0) x = jiggle(random), l += x * x;\n            if (y === 0) y = jiggle(random), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n\n        return;\n      }\n\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        node;\n    radii = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n    }\n  }\n\n  force.initialize = function (_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.iterations = function (_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}","import constant from \"./constant.js\";\nexport default function (x) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      xz;\n  if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length;\n    strengths = new Array(n);\n    xz = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function (_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n  };\n\n  return force;\n}","import constant from \"./constant.js\";\nexport default function (y) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      yz;\n  if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length;\n    strengths = new Array(n);\n    yz = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function (_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n  };\n\n  return force;\n}","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const SwarmPlotTooltip = <RawDatum,>({\n    id,\n    formattedValue,\n    color,\n}: ComputedDatum<RawDatum>) => (\n    <BasicTooltip id={id} value={formattedValue} enableChip={true} color={color} />\n)\n","import { ScaleLinearSpec } from '@nivo/scales'\nimport { SwarmPlotLayerId } from './types'\nimport { SwarmPlotTooltip } from './SwarmPlotTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    valueScale: { type: 'linear', min: 0, max: 'auto' } as ScaleLinearSpec,\n    groupBy: 'group',\n    size: 6,\n    spacing: 2,\n    layout: 'vertical' as const,\n    gap: 0,\n    forceStrength: 1,\n    simulationIterations: 120,\n    colors: { scheme: 'nivo' },\n    colorBy: 'group',\n    borderWidth: 0,\n    borderColor: 'rgba(0, 0, 0, 0)',\n    layers: ['grid', 'axes', 'circles', 'annotations', 'mesh'] as SwarmPlotLayerId[],\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisRight: {},\n    axisBottom: {},\n    axisLeft: {},\n    isInteractive: true,\n    useMesh: false,\n    debugMesh: false,\n    tooltip: SwarmPlotTooltip,\n    animate: true,\n    motionConfig: 'gentle',\n    annotations: [],\n    role: 'img',\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport isString from 'lodash/isString'\nimport get from 'lodash/get'\nimport { scaleLinear, ScaleOrdinal, scaleOrdinal } from 'd3-scale'\nimport { forceSimulation, forceX, forceY, forceCollide, ForceX, ForceY } from 'd3-force'\nimport {\n    computeScale,\n    createDateNormalizer,\n    generateSeriesAxis,\n    ScaleLinear,\n    ScaleLinearSpec,\n    ScaleTime,\n    ScaleTimeSpec,\n} from '@nivo/scales'\nimport { ComputedDatum, PreSimulationDatum, SizeSpec, SimulationForces } from './types'\n\nconst getParsedValue = (scaleSpec: ScaleLinearSpec | ScaleTimeSpec) => {\n    if (scaleSpec.type === 'time' && scaleSpec.format !== 'native') {\n        return createDateNormalizer(scaleSpec) as <T>(value: T) => T\n    }\n\n    return <T>(value: T) => value\n}\n\nexport const computeOrdinalScale = ({\n    width,\n    height,\n    axis,\n    groups,\n    gap,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    groups: string[]\n    gap: number\n}) => {\n    if (!Array.isArray(groups) || groups.length === 0) {\n        throw new Error(`'groups' should be an array containing at least one item`)\n    }\n\n    const groupCount = groups.length\n\n    let groupSize: number\n    if (axis === 'x') {\n        groupSize = (height - gap * (groupCount - 1)) / groupCount\n    } else if (axis === 'y') {\n        groupSize = (width - gap * (groupCount - 1)) / groupCount\n    }\n\n    const range = groups.map((_, i) => i * (groupSize + gap) + groupSize / 2)\n\n    return scaleOrdinal(range).domain(groups)\n}\n\nexport const computeValueScale = <RawDatum>({\n    width,\n    height,\n    axis,\n    getValue,\n    scale,\n    data,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    getValue: (datum: RawDatum) => number | Date\n    scale: ScaleLinearSpec | ScaleTimeSpec\n    data: RawDatum[]\n}) => {\n    const values = data.map(getValue)\n\n    if (scale.type === 'time') {\n        const series = [\n            { data: values.map(value => ({ data: { x: null, y: null, [axis]: value } })) },\n        ]\n        const axes = generateSeriesAxis(series, axis, scale)\n\n        return computeScale(scale, axes, axis === 'x' ? width : height, axis) as ScaleTime<\n            Date | string\n        >\n    }\n\n    const min = Math.min(...(values as number[]))\n    const max = Math.max(...(values as number[]))\n\n    return computeScale(\n        scale,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    ) as ScaleLinear<number>\n}\n\nexport const getSizeGenerator = <RawDatum>(size: SizeSpec<RawDatum>) => {\n    // user defined size function\n    if (typeof size === 'function') {\n        return size\n    }\n\n    // static size\n    if (isNumber(size)) {\n        return () => size\n    }\n\n    // dynamic size based on config\n    if (isPlainObject(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'Size is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'Size is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'Size is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return (d: RawDatum) => sizeScale(get(d, size.key))\n    }\n\n    throw new Error('Size is invalid, it should be either a function, a number or an object')\n}\n\nexport const computeForces = <RawDatum>({\n    axis,\n    valueScale,\n    ordinalScale,\n    spacing,\n    forceStrength,\n}: {\n    axis: 'x' | 'y'\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    ordinalScale: ScaleOrdinal<string, number>\n    spacing: number\n    forceStrength: number\n}): SimulationForces<RawDatum> => {\n    const collisionForce = forceCollide<PreSimulationDatum<RawDatum>>(d => d.size / 2 + spacing / 2)\n\n    let xForce: ForceX<PreSimulationDatum<RawDatum>>\n    let yForce: ForceY<PreSimulationDatum<RawDatum>>\n    if (axis === 'x') {\n        xForce = forceX<PreSimulationDatum<RawDatum>>(d => valueScale(d.value)).strength(\n            forceStrength\n        )\n        yForce = forceY<PreSimulationDatum<RawDatum>>(d => ordinalScale(d.group))\n    } else if (axis === 'y') {\n        xForce = forceX<PreSimulationDatum<RawDatum>>(d => ordinalScale(d.group))\n        yForce = forceY<PreSimulationDatum<RawDatum>>(d => valueScale(d.value)).strength(\n            forceStrength\n        )\n    } else {\n        throw new Error(`Invalid axis provided: ${axis}`)\n    }\n\n    return { x: xForce, y: yForce, collision: collisionForce }\n}\n\nexport const computeNodes = <RawDatum>({\n    data,\n    getId,\n    layout,\n    getValue,\n    valueScale,\n    getGroup,\n    ordinalScale,\n    getSize,\n    forces,\n    simulationIterations,\n    valueScaleConfig,\n}: {\n    data: RawDatum[]\n    getId: (datum: RawDatum) => string\n    layout: 'vertical' | 'horizontal'\n    getValue: (datum: RawDatum) => number | Date\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    getGroup: (datum: RawDatum) => string\n    ordinalScale: ScaleOrdinal<string, number>\n    getSize: (datum: RawDatum) => number\n    forces: SimulationForces<RawDatum>\n    simulationIterations: number\n    valueScaleConfig: ScaleLinearSpec | ScaleTimeSpec\n}) => {\n    const config = {\n        horizontal: ['x', 'y'],\n        vertical: ['y', 'x'],\n    }\n\n    const parseValue = getParsedValue(valueScaleConfig)\n\n    const simulatedNodes: PreSimulationDatum<RawDatum>[] = data.map(d => ({\n        id: getId(d),\n        group: getGroup(d),\n        value: parseValue(getValue(d)),\n        size: getSize(d),\n        data: { ...d },\n    }))\n\n    const simulation = forceSimulation<PreSimulationDatum<RawDatum>>(simulatedNodes)\n        .force('x', forces.x)\n        .force('y', forces.y)\n        .force('collide', forces.collision)\n        .stop()\n\n    simulation.tick(simulationIterations)\n\n    return {\n        [`${config[layout][0]}Scale`]: valueScale,\n        [`${config[layout][1]}Scale`]: ordinalScale,\n        nodes: simulation.nodes() as ComputedDatum<RawDatum>[],\n    }\n}\n","import { useCallback, useMemo } from 'react'\nimport { ScaleOrdinal } from 'd3-scale'\nimport { usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { AnnotationMatcher, useAnnotations } from '@nivo/annotations'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ScaleLinear, ScaleLinearSpec, ScaleTime, ScaleTimeSpec } from '@nivo/scales'\nimport {\n    computeValueScale,\n    computeOrdinalScale,\n    getSizeGenerator,\n    computeForces,\n    computeNodes,\n} from './compute'\nimport {\n    SwarmPlotCommonProps,\n    ComputedDatum,\n    SizeSpec,\n    SwarmPlotCustomLayerProps,\n    MouseHandlers,\n} from './types'\n\nexport const useValueScale = <RawDatum>({\n    width,\n    height,\n    axis,\n    getValue,\n    scale,\n    data,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    getValue: (datum: RawDatum) => number | Date\n    scale: ScaleLinearSpec | ScaleTimeSpec\n    data: RawDatum[]\n}) =>\n    useMemo(\n        () =>\n            computeValueScale<RawDatum>({\n                width,\n                height,\n                axis,\n                getValue,\n                scale,\n                data,\n            }),\n        [width, height, axis, getValue, scale, data]\n    )\n\nexport const useOrdinalScale = ({\n    width,\n    height,\n    axis,\n    groups,\n    gap,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    groups: string[]\n    gap: number\n}) =>\n    useMemo(\n        () => computeOrdinalScale({ width, height, axis, groups, gap }),\n        [width, height, axis, groups, gap]\n    )\n\nconst useSize = <RawDatum>(size: SizeSpec<RawDatum>) =>\n    useMemo(() => getSizeGenerator<RawDatum>(size), [size])\n\nexport const useForces = <RawDatum>({\n    axis,\n    valueScale,\n    ordinalScale,\n    spacing,\n    forceStrength,\n}: {\n    axis: 'x' | 'y'\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    ordinalScale: ScaleOrdinal<string, number>\n    spacing: number\n    forceStrength: number\n}) =>\n    useMemo(\n        () =>\n            computeForces<RawDatum>({\n                axis,\n                valueScale,\n                ordinalScale,\n                spacing,\n                forceStrength,\n            }),\n        [axis, valueScale, ordinalScale, spacing, forceStrength]\n    )\n\nexport const useSwarmPlot = <RawDatum>({\n    data,\n    width,\n    height,\n    id,\n    value,\n    valueFormat,\n    valueScale: valueScaleConfig,\n    groups,\n    groupBy,\n    size,\n    spacing,\n    layout,\n    gap,\n    forceStrength,\n    simulationIterations,\n    colors,\n    colorBy,\n}: {\n    data: RawDatum[]\n    width: number\n    height: number\n    id: SwarmPlotCommonProps<RawDatum>['id']\n    value: SwarmPlotCommonProps<RawDatum>['value']\n    valueScale: SwarmPlotCommonProps<RawDatum>['valueScale']\n    valueFormat?: SwarmPlotCommonProps<RawDatum>['valueFormat']\n    groups: SwarmPlotCommonProps<RawDatum>['groups']\n    groupBy: SwarmPlotCommonProps<RawDatum>['groupBy']\n    size: SwarmPlotCommonProps<RawDatum>['size']\n    spacing: SwarmPlotCommonProps<RawDatum>['spacing']\n    layout: SwarmPlotCommonProps<RawDatum>['layout']\n    gap: SwarmPlotCommonProps<RawDatum>['gap']\n    forceStrength: SwarmPlotCommonProps<RawDatum>['forceStrength']\n    simulationIterations: SwarmPlotCommonProps<RawDatum>['simulationIterations']\n    colors: SwarmPlotCommonProps<RawDatum>['colors']\n    colorBy: SwarmPlotCommonProps<RawDatum>['colorBy']\n}) => {\n    const axis = layout === 'horizontal' ? 'x' : 'y'\n\n    const getId = usePropertyAccessor<RawDatum, string>(id)\n    const getValue = usePropertyAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n    const getGroup = usePropertyAccessor<RawDatum, string>(groupBy)\n    const getSize = useSize<RawDatum>(size)\n    const getColorId = usePropertyAccessor<Omit<ComputedDatum<RawDatum>, 'color'>, string>(colorBy)\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'color'>>(\n        colors,\n        getColorId\n    )\n\n    const valueScale = useValueScale({\n        width,\n        height,\n        axis,\n        getValue,\n        scale: valueScaleConfig,\n        data,\n    })\n\n    const ordinalScale = useOrdinalScale({\n        width,\n        height,\n        axis,\n        groups,\n        gap,\n    })\n\n    const forces = useForces<RawDatum>({\n        axis,\n        valueScale,\n        ordinalScale,\n        spacing,\n        forceStrength,\n    })\n\n    const { nodes, xScale, yScale } = useMemo(\n        () =>\n            computeNodes<RawDatum>({\n                data,\n                getId,\n                layout,\n                getValue,\n                valueScale,\n                getGroup,\n                ordinalScale,\n                getSize,\n                forces,\n                simulationIterations,\n                valueScaleConfig,\n            }),\n        [\n            data,\n            getId,\n            layout,\n            getValue,\n            valueScale,\n            getGroup,\n            ordinalScale,\n            getSize,\n            forces,\n            simulationIterations,\n            valueScaleConfig,\n        ]\n    )\n\n    const augmentedNodes: ComputedDatum<RawDatum>[] = useMemo(\n        () =>\n            nodes.map(node => ({\n                ...node,\n                formattedValue: formatValue(node.value),\n                color: getColor(node),\n            })),\n        [nodes, formatValue, getColor]\n    )\n\n    return {\n        nodes: augmentedNodes,\n        xScale,\n        yScale,\n        getColor,\n    }\n}\n\nexport const useBorderWidth = <RawDatum>(\n    borderWidth: SwarmPlotCommonProps<RawDatum>['borderWidth']\n) =>\n    useMemo(() => {\n        if (typeof borderWidth === 'function') return borderWidth\n        return () => borderWidth\n    }, [borderWidth])\n\nexport const useNodeMouseHandlers = <RawDatum>({\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n    tooltip,\n}: Pick<SwarmPlotCommonProps<RawDatum>, 'isInteractive' | 'tooltip'> & MouseHandlers<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const mouseEnterHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            showTooltipFromEvent(tooltip(node), event)\n            onMouseEnter?.(node, event)\n        },\n        [isInteractive, onMouseEnter, showTooltipFromEvent, tooltip]\n    )\n\n    const mouseMoveHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            showTooltipFromEvent(tooltip(node), event)\n            onMouseMove?.(node, event)\n        },\n        [isInteractive, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const mouseLeaveHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [isInteractive, hideTooltip, onMouseLeave]\n    )\n\n    const clickHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            onClick?.(node, event)\n        },\n        [isInteractive, onClick]\n    )\n\n    return {\n        onMouseEnter: mouseEnterHandler,\n        onMouseMove: mouseMoveHandler,\n        onMouseLeave: mouseLeaveHandler,\n        onClick: clickHandler,\n    }\n}\n\nconst getNodeAnnotationPosition = (node: ComputedDatum<unknown>) => ({\n    x: node.x,\n    y: node.y,\n})\n\nconst getNodeAnnotationDimensions = (node: ComputedDatum<unknown>) => ({\n    size: node.size,\n    width: node.size,\n    height: node.size,\n})\n\nexport const useSwarmPlotAnnotations = <RawDatum>(\n    nodes: ComputedDatum<RawDatum>[],\n    annotations: AnnotationMatcher<ComputedDatum<RawDatum>>[]\n) =>\n    useAnnotations<ComputedDatum<RawDatum>>({\n        data: nodes,\n        annotations,\n        getPosition: getNodeAnnotationPosition,\n        getDimensions: getNodeAnnotationDimensions,\n    })\n\nexport const useSwarmPlotLayerContext = <\n    RawDatum,\n    Scale extends\n        | ScaleLinear<number>\n        | ScaleTime<string | Date>\n        | ScaleOrdinal<string, number, never>\n>({\n    nodes,\n    xScale,\n    yScale,\n    innerWidth,\n    innerHeight,\n    outerWidth,\n    outerHeight,\n    margin,\n}: SwarmPlotCustomLayerProps<RawDatum, Scale>): SwarmPlotCustomLayerProps<RawDatum, Scale> =>\n    useMemo(\n        () => ({\n            nodes,\n            xScale,\n            yScale,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            margin,\n        }),\n        [nodes, xScale, yScale, innerWidth, innerHeight, outerWidth, outerHeight, margin]\n    )\n","import { createElement, useMemo, MouseEvent } from 'react'\nimport * as React from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CircleComponent, MouseHandlers, SwarmPlotCommonProps } from './types'\nimport { useBorderWidth } from './hooks'\n\n/**\n * A negative radius value is invalid for an SVG circle,\n * this custom interpolation makes sure it's either\n * positive or zero.\n */\nexport const interpolateRadius = (radiusValue: SpringValue<number>) =>\n    to([radiusValue], radius => Math.max(0, radius))\n\ntype CirclesProps<RawDatum> = {\n    nodes: ComputedDatum<RawDatum>[]\n    borderWidth: SwarmPlotCommonProps<RawDatum>['borderWidth']\n    borderColor: SwarmPlotCommonProps<RawDatum>['borderColor']\n    component: CircleComponent<RawDatum>\n    isInteractive: SwarmPlotCommonProps<RawDatum>['isInteractive']\n    tooltip: SwarmPlotCommonProps<RawDatum>['tooltip']\n} & MouseHandlers<RawDatum>\n\nconst getTransitionPhases = <RawDatum,>(\n    getBorderColor: (node: ComputedDatum<RawDatum>) => string\n) => ({\n    enter: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n    update: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: node.size / 2,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 1,\n    }),\n    leave: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n})\n\nexport const Circles = <RawDatum,>({\n    nodes,\n    borderWidth,\n    borderColor,\n    component,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: CirclesProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseEnter?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseMove?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        }\n    }, [isInteractive, hideTooltip, onMouseLeave])\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            onClick?.(node, event)\n        }\n    }, [isInteractive, onClick])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getBorderWidth = useBorderWidth<RawDatum>(borderWidth)\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const transitionPhases = useMemo(\n        () => getTransitionPhases<RawDatum>(getBorderColor),\n        [getBorderColor]\n    )\n\n    const transition = useTransition<\n        ComputedDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            radius: number\n            color: string\n            borderColor: string\n            opacity: number\n        }\n    >(nodes, {\n        keys: node => node.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, node) => {\n                return React.createElement(component, {\n                    key: node.id,\n                    node,\n                    style: {\n                        ...transitionProps,\n                        radius: interpolateRadius(transitionProps.radius),\n                        borderWidth: getBorderWidth(node),\n                    },\n                    onMouseEnter: handleMouseEnter,\n                    onMouseMove: handleMouseMove,\n                    onMouseLeave: handleMouseLeave,\n                    onClick: handleClick,\n                })\n            })}\n        </>\n    )\n}\n","import { animated } from '@react-spring/web'\nimport { CircleProps } from './types'\n\nexport const CircleSvg = <RawDatum,>({\n    node,\n    style,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: CircleProps<RawDatum>) => {\n    return (\n        <animated.circle\n            key={node.id}\n            cx={style.x}\n            cy={style.y}\n            r={style.radius}\n            fill={style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            opacity={style.opacity}\n            onMouseEnter={event => onMouseEnter?.(node, event)}\n            onMouseMove={event => onMouseMove?.(node, event)}\n            onMouseLeave={event => onMouseLeave?.(node, event)}\n            onClick={event => onClick?.(node, event)}\n        />\n    )\n}\n","import { Annotation } from '@nivo/annotations'\nimport { ComputedDatum, SwarmPlotSvgProps } from './types'\nimport { useSwarmPlotAnnotations } from './hooks'\n\nexport const SwarmPlotAnnotations = <RawDatum,>({\n    nodes,\n    annotations,\n}: {\n    nodes: ComputedDatum<RawDatum>[]\n    annotations: SwarmPlotSvgProps<RawDatum>['annotations']\n}) => {\n    const boundAnnotations = useSwarmPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { AnyScale } from '@nivo/scales'\nimport { Axes, Grid } from '@nivo/axes'\nimport { Mesh } from '@nivo/voronoi'\nimport { ComputedDatum, SwarmPlotLayerId, SwarmPlotSvgProps } from './types'\nimport { defaultProps } from './props'\nimport { useSwarmPlot, useSwarmPlotLayerContext, useNodeMouseHandlers } from './hooks'\nimport { Circles } from './Circles'\nimport { CircleSvg } from './CircleSvg'\nimport { SwarmPlotAnnotations } from './SwarmPlotAnnotations'\n\ntype InnerSwarmPlotProps<RawDatum> = Partial<\n    Omit<\n        SwarmPlotSvgProps<RawDatum>,\n        'data' | 'groups' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height' | 'isInteractive'>\n\nconst InnerSwarmPlot = <RawDatum,>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueScale = defaultProps.valueScale,\n    valueFormat,\n    groups,\n    groupBy = defaultProps.groupBy,\n    size = defaultProps.size,\n    forceStrength = defaultProps.forceStrength,\n    simulationIterations = defaultProps.simulationIterations,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<Omit<ComputedDatum<RawDatum>, 'color'>>,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    layout = defaultProps.layout,\n    spacing = defaultProps.spacing,\n    gap = defaultProps.gap,\n    layers = defaultProps.layers,\n    circleComponent = CircleSvg,\n    useMesh = defaultProps.useMesh,\n    debugMesh = defaultProps.debugMesh,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    axisTop = defaultProps.axisTop,\n    axisRight = defaultProps.axisRight,\n    axisBottom = defaultProps.axisBottom,\n    axisLeft = defaultProps.axisLeft,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    annotations = defaultProps.annotations,\n    role = defaultProps.role,\n}: InnerSwarmPlotProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, ...props } = useSwarmPlot<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        id,\n        value,\n        valueFormat,\n        valueScale,\n        groups,\n        groupBy,\n        size,\n        spacing,\n        layout,\n        gap,\n        colors,\n        colorBy,\n        forceStrength,\n        simulationIterations,\n    })\n\n    const xScale = props.xScale as Exclude<typeof props.xScale, ComputedDatum<RawDatum>[]>\n    const yScale = props.yScale as Exclude<typeof props.yScale, ComputedDatum<RawDatum>[]>\n\n    const handlers = useNodeMouseHandlers({\n        isInteractive,\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        onMouseMove,\n        tooltip,\n    })\n\n    const layerById: Record<SwarmPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        circles: null,\n        annotations: null,\n        mesh: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as AnyScale) : null}\n                xValues={gridXValues}\n                yScale={enableGridY ? (yScale as AnyScale) : null}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as AnyScale}\n                yScale={yScale as AnyScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop ?? undefined}\n                right={axisRight ?? undefined}\n                bottom={axisBottom ?? undefined}\n                left={axisLeft ?? undefined}\n            />\n        )\n    }\n\n    if (layers.includes('circles')) {\n        layerById.circles = (\n            <Circles<RawDatum>\n                key=\"circles\"\n                nodes={nodes}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                component={circleComponent}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <SwarmPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={handlers.onMouseEnter}\n                onMouseMove={handlers.onMouseMove}\n                onMouseLeave={handlers.onMouseLeave}\n                onClick={handlers.onClick}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    const layerContext = useSwarmPlotLayerContext({\n        nodes,\n        xScale,\n        yScale,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin,\n    })\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (layerById[layer as SwarmPlotLayerId] !== undefined) {\n                    return layerById[layer as SwarmPlotLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const SwarmPlot = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSwarmPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { SwarmPlotSvgProps } from './types'\nimport { SwarmPlot } from './SwarmPlot'\n\ntype ResponsiveSwarmPlotProps<RawDatum> = Partial<\n    Omit<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>\n> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups'>\n\nexport const ResponsiveSwarmPlot = <RawDatum,>(props: ResponsiveSwarmPlotProps<RawDatum>) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <SwarmPlot<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { createElement, useCallback, useEffect, useRef, useState } from 'react'\nimport * as React from 'react'\nimport isNumber from 'lodash/isNumber'\nimport { Container, getRelativeCursor, isCursorInRect, useDimensions, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig, useInheritedColor } from '@nivo/colors'\nimport { AnyScale } from '@nivo/scales'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { ComputedDatum, SwarmPlotCanvasProps } from './types'\nimport { defaultProps } from './props'\nimport { useSwarmPlot } from './hooks'\n\nexport const renderCircleDefault = <RawDatum,>(\n    ctx: CanvasRenderingContext2D,\n    {\n        node,\n        getBorderWidth,\n        getBorderColor,\n    }: {\n        node: ComputedDatum<RawDatum>\n        getBorderWidth: (node: ComputedDatum<RawDatum>) => number\n        getBorderColor: (node: ComputedDatum<RawDatum>) => string\n    }\n) => {\n    const nodeBorderWidth = getBorderWidth(node)\n    if (nodeBorderWidth > 0) {\n        ctx.strokeStyle = getBorderColor(node)\n        ctx.lineWidth = nodeBorderWidth\n    }\n\n    ctx.beginPath()\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n    ctx.fillStyle = node.color\n    ctx.fill()\n\n    if (nodeBorderWidth > 0) {\n        ctx.stroke()\n    }\n}\n\ntype InnerSwarmCanvasPlotProps<RawDatum> = Partial<\n    Omit<\n        SwarmPlotCanvasProps<RawDatum>,\n        'data' | 'groups' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height' | 'isInteractive'>\n\nexport const InnerSwarmPlotCanvas = <RawDatum,>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    valueScale = defaultProps.valueScale,\n    groups,\n    groupBy = defaultProps.groupBy,\n    size = defaultProps.size,\n    forceStrength = defaultProps.forceStrength,\n    simulationIterations = defaultProps.simulationIterations,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<Omit<ComputedDatum<RawDatum>, 'color'>>,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    layout = defaultProps.layout,\n    spacing = defaultProps.spacing,\n    gap = defaultProps.gap,\n    layers = defaultProps.layers,\n    renderCircle = renderCircleDefault,\n    debugMesh = defaultProps.debugMesh,\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop = defaultProps.axisTop,\n    axisRight = defaultProps.axisRight,\n    axisBottom = defaultProps.axisBottom,\n    axisLeft = defaultProps.axisLeft,\n    isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    role = defaultProps.role,\n    pixelRatio = defaultProps.pixelRatio,\n}: InnerSwarmCanvasPlotProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ComputedDatum<RawDatum> | null>(null)\n\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, ...scales } = useSwarmPlot<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        id,\n        value,\n        valueFormat,\n        valueScale,\n        groups,\n        groupBy,\n        size,\n        spacing,\n        layout,\n        gap,\n        colors,\n        colorBy,\n        forceStrength,\n        simulationIterations,\n    })\n\n    const { xScale, yScale } = scales as Record<'xScale' | 'yScale', AnyScale>\n\n    const { delaunay, voronoi } = useVoronoiMesh<ComputedDatum<RawDatum>>({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getBorderWidth = () => 1\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        if (!ctx) return\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (\n                layer === 'grid' &&\n                isNumber(theme.grid.line.strokeWidth) &&\n                theme.grid.line.strokeWidth > 0\n            ) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'circles') {\n                nodes.forEach(node => {\n                    renderCircle(ctx, {\n                        node,\n                        getBorderWidth,\n                        getBorderColor,\n                    })\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh && voronoi) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentNode) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentNode.index)\n                }\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        pixelRatio,\n        margin,\n        theme,\n        layers,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        voronoi,\n        debugMesh,\n        currentNode,\n        nodes,\n        renderCircle,\n        getBorderWidth,\n        getBorderColor,\n    ])\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: React.MouseEvent) => {\n            if (!canvasEl.current) {\n                return null\n            }\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) {\n                return null\n            }\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay, nodes]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const showNodeTooltip = useCallback(\n        (node: ComputedDatum<RawDatum>, event: React.MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                onMouseMove?.(node, event)\n                showNodeTooltip(node, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getNodeFromMouseEvent, setCurrentNode, onMouseMove, showNodeTooltip, hideTooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setCurrentNode(null)\n    }, [hideTooltip, setCurrentNode])\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onClick?.(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            role={role}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const SwarmPlotCanvas = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSwarmPlotCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { SwarmPlotCanvasProps } from './types'\nimport { SwarmPlotCanvas } from './SwarmPlotCanvas'\n\ntype ResponsiveSwarmPlotCanvasProps<RawDatum> = Partial<\n    Omit<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>\n> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups'>\n\nexport const ResponsiveSwarmPlotCanvas = <RawDatum,>(\n    props: ResponsiveSwarmPlotCanvasProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <SwarmPlotCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["x","d","vx","y","vy","nodes","strengths","xz","strength","constant","force","alpha","node","i","n","length","initialize","Array","isNaN","_","arguments","yz","defaultProps","id","value","valueScale","type","min","max","groupBy","size","spacing","layout","gap","forceStrength","simulationIterations","colors","scheme","colorBy","borderWidth","borderColor","layers","enableGridX","enableGridY","axisTop","axisRight","axisBottom","axisLeft","isInteractive","useMesh","debugMesh","tooltip","formattedValue","color","enableChip","animate","motionConfig","annotations","role","pixelRatio","window","computeForces","axis","ordinalScale","collisionForce","radius","radii","random","iterations","tree","xi","yi","ri","ri2","k","quadtree","visitAfter","prepare","index","visit","apply","quad","x0","y0","x1","y1","data","rj","r","l","jiggle","Math","sqrt","_nodes","_random","forceCollide","xForce","yForce","forceY","forceX","collision","computeNodes","scaleSpec","getId","getValue","getGroup","getSize","forces","valueScaleConfig","config","horizontal","vertical","parseValue","createDateNormalizer","simulatedNodes","group","simulation","forceSimulation","useValueScale","width","height","scale","useMemo","values","series","axes","generateSeriesAxis","computeScale","all","computeValueScale","useOrdinalScale","groups","groupCount","groupSize","range","scaleOrdinal","computeOrdinalScale","useSize","isNumber","isPlainObject","isString","sizeScale","scaleLinear","get","getSizeGenerator","useSwarmPlot","valueFormat","usePropertyAccessor","formatValue","useValueFormatter","getColorId","getColor","useOrdinalColorScale","useForces","xScale","yScale","getNodeAnnotationPosition","getNodeAnnotationDimensions","Circles","component","onMouseEnter","onMouseMove","onMouseLeave","onClick","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","handleClick","useMotionConfig","springConfig","theme","useTheme","getBorderWidth","useBorderWidth","getBorderColor","useInheritedColor","transitionPhases","enter","opacity","update","leave","getTransitionPhases","transition","useTransition","keys","initial","from","immediate","key","style","radiusValue","transitionProps","to","CircleSvg","cx","cy","fill","stroke","strokeWidth","event","SwarmPlotAnnotations","boundAnnotations","useAnnotations","getPosition","getDimensions","useSwarmPlotAnnotations","_jsx","InnerSwarmPlot","partialMargin","margin","circleComponent","gridXValues","gridYValues","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","props","handlers","useCallback","useNodeMouseHandlers","layerById","grid","circles","mesh","xValues","yValues","top","right","bottom","left","undefined","debug","layerContext","useSwarmPlotLayerContext","layer","SwarmPlot","renderWrapper","otherProps","ResponsiveSwarmPlot","renderCircleDefault","nodeBorderWidth","ctx","InnerSwarmPlotCanvas","renderCircle","canvasEl","useRef","useState","currentNode","setCurrentNode","useVoronoiMesh","points","delaunay","voronoi","useEffect","renderGridLinesToCanvas","renderAxesToCanvas","renderVoronoiToCanvas","renderVoronoiCellToCanvas","getNodeFromMouseEvent","getRelativeCursor","isCursorInRect","nodeIndex","showNodeTooltip","handleMouseHover","ref","cursor","SwarmPlotCanvas","ResponsiveSwarmPlotCanvas"],"sourceRoot":""}