{"version":3,"file":"6dfa38700ac5fb8c63825eafb4eadbce5263aecb-e281ba2a4053fcc6e9c1.js","mappings":"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","sources":["webpack://nivo-website/./src/data/components/heatmap/generator.ts","webpack://nivo-website/./src/data/components/heatmap/mapper.tsx","webpack://nivo-website/./src/data/components/heatmap/props.ts","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/components/AxisTick.tsx","webpack://nivo-website/../src/components/Axis.tsx","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/components/Axes.tsx","webpack://nivo-website/../src/components/GridLine.tsx","webpack://nivo-website/../src/components/GridLines.tsx","webpack://nivo-website/../src/components/Grid.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/props.js","webpack://nivo-website/../src/hooks.js","webpack://nivo-website/../src/HeatMapCells.js","webpack://nivo-website/../src/HeatMapCellRect.js","webpack://nivo-website/../src/HeatMapCellCircle.js","webpack://nivo-website/../src/HeatMapCellTooltip.js","webpack://nivo-website/../src/HeatMap.js","webpack://nivo-website/../src/canvas.js","webpack://nivo-website/../src/HeatMapCanvas.js","webpack://nivo-website/../src/ResponsiveHeatMap.js","webpack://nivo-website/../src/ResponsiveHeatMapCanvas.js"],"sourcesContent":["import { generateCountriesData } from '@nivo/generators'\n\nconst dishes = [\n    'hot dog',\n    'burger',\n    'sandwich',\n    'kebab',\n    'fries',\n    'donut',\n    'junk',\n    'sushi',\n    'ramen',\n    'curry',\n    'udon',\n    'bagel',\n    'yakitori',\n    'takoyaki',\n    'tacos',\n    'miso soup',\n    'tortilla',\n    'tapas',\n    'chipirones',\n    'gazpacho',\n    'soba',\n    'bavette',\n    'steak',\n    'pizza',\n    'spaghetti',\n    'ravioli',\n    'salad',\n    'pad thai',\n    'bun',\n    'waffle',\n    'crepe',\n    'churros',\n    'paella',\n    'empanadas',\n    'bruschetta',\n    'onion soup',\n    'cassoulet',\n    'bouillabaisse',\n    'unagi',\n    'tempura',\n    'tonkatsu',\n    'shabu-shabu',\n    'twinkies',\n    'jerky',\n    'fajitas',\n    'jambalaya',\n    'meatloaf',\n    `mac n' cheese`,\n    'baked beans',\n    'popcorn',\n    'buffalo wings',\n    'BBQ ribs',\n    'apple pie',\n    'nachos',\n    'risotto',\n    'tiramisu',\n]\n\nexport const generateLightDataSet = () => ({\n    data: generateCountriesData(dishes.slice(0, 11), { size: 9, min: 0, max: 100 }),\n    keys: dishes.slice(0, 11),\n})\n\nexport const generateHeavyDataSet = () => ({\n    data: generateCountriesData(dishes, { size: 22, min: 0, max: 100 }),\n    keys: dishes,\n})\n","import React from 'react'\nimport { settingsMapper, mapAxis } from '../../../lib/settings'\n\nconst CustomCell = ({\n    value,\n    x,\n    y,\n    width,\n    height,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    textColor,\n}) => (\n    <g transform={`translate(${x}, ${y})`}>\n        <path\n            transform={`rotate(${value < 50 ? 180 : 0})`}\n            fill={color}\n            fillOpacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            d={`\n                M0 -${Math.round(height / 2)}\n                L${Math.round(width / 2)} ${Math.round(height / 2)}\n                L-${Math.round(width / 2)} ${Math.round(height / 2)}\n                L0 -${Math.round(height / 2)}\n            `}\n        />\n        <text\n            alignmentBaseline=\"central\"\n            textAnchor=\"middle\"\n            style={{ fill: textColor }}\n            dy={value < 50 ? -6 : 6}\n        >\n            {value}\n        </text>\n    </g>\n)\n\nexport default settingsMapper(\n    {\n        cellShape: value => {\n            if (value === `Custom(props) => (…)`) return CustomCell\n            return value\n        },\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n    },\n    {\n        exclude: ['enable axisTop', 'enable axisRight', 'enable axisBottom', 'enable axisLeft'],\n    }\n)\n","// @ts-ignore\nimport { HeatMapDefaultProps as defaults } from '@nivo/heatmap'\nimport { themeProperty, motionProperties, groupProperties } from '../../../lib/componentProperties'\nimport { chartDimensions, chartGrid, axes, isInteractive } from '../../../lib/chart-properties'\nimport { ChartProperty, Flavor } from '../../../types'\n\nconst allFlavors: Flavor[] = ['svg', 'canvas', 'api']\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Chart data.',\n        type: 'object[]',\n        required: true,\n    },\n    {\n        key: 'indexBy',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Key to use to index the data.',\n        description: `\n            Key to use to index the data,\n            this key must exist in each data item.\n            You can also provide a function which will\n            receive the data item and must return\n            the desired index\n        `,\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaults.indexBy,\n    },\n    {\n        key: 'keys',\n        group: 'Base',\n        flavors: allFlavors,\n        help: 'Keys to use to determine each serie.',\n        type: 'string[]',\n        required: false,\n        defaultValue: defaults.keys,\n    },\n    {\n        key: 'minValue',\n        help: 'Minimum value.',\n        flavors: allFlavors,\n        description: `\n            Minimum value.\n            If 'auto', will pick the lowest value\n            in the provided data set. Should be overriden\n            if your data set does not contain desired\n            lower bound value.\n        `,\n        required: false,\n        defaultValue: defaults.minValue,\n        type: `number | 'auto'`,\n        group: 'Base',\n        control: {\n            type: 'switchableRange',\n            disabledValue: 'auto',\n            defaultValue: 0,\n            min: -100,\n            max: 100,\n        },\n    },\n    {\n        key: 'maxValue',\n        help: 'Maximum value.',\n        flavors: allFlavors,\n        description: `\n            Maximum value. If 'auto', will pick the highest value\n            in the provided data set. Should be overriden\n            if your data set does not contain desired\n            higher bound value.\n        `,\n        required: false,\n        defaultValue: defaults.maxValue,\n        type: `number | 'auto'`,\n        group: 'Base',\n        control: {\n            type: 'switchableRange',\n            disabledValue: 'auto',\n            defaultValue: 100,\n            min: -100,\n            max: 100,\n        },\n    },\n    {\n        key: 'forceSquare',\n        help: 'Force square cells (width = height).',\n        flavors: allFlavors,\n        required: false,\n        defaultValue: defaults.forceSquare,\n        type: 'boolean',\n        control: { type: 'switch' },\n        group: 'Base',\n    },\n    {\n        key: 'sizeVariation',\n        help: 'Cell size variation.',\n        flavors: allFlavors,\n        description: `Size variation (0~1), if value is 0 size won't be affected. If you use for example the value 0.3, cell width/height will vary between 0.7~1 according to its corresponding value.`,\n        required: false,\n        defaultValue: defaults.sizeVariation,\n        type: 'number',\n        group: 'Base',\n        control: {\n            type: 'range',\n            min: 0,\n            max: 1,\n            step: 0.02,\n        },\n    },\n    {\n        key: 'padding',\n        help: 'Padding.',\n        flavors: allFlavors,\n        required: false,\n        defaultValue: defaults.padding,\n        type: 'number',\n        group: 'Base',\n        control: {\n            type: 'range',\n            min: 0,\n            max: 36,\n            unit: 'px',\n        },\n    },\n    ...chartDimensions(allFlavors),\n    themeProperty(['svg', 'canvas', 'api']),\n    {\n        key: 'cellShape',\n        help: `Cell shape/component.`,\n        flavors: allFlavors,\n        description: `\n            Cell shape, can be one of: \\`'rect'\\`, \\`'circle'\\`,\n            if a function is provided, it must return\n            a valid SVG element and will receive\n            the following props:\n            \\`\\`\\`\n            {\n                value:       number,\n                x:           number,\n                y:           number,\n                width:       number,\n                height:      number,\n                color:       string,\n                opacity:     number,\n                borderWidth: number,\n                borderColor: string,\n                textColor:   string,\n            }\n            \\`\\`\\`\n        `,\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaults.cellShape,\n        group: 'Style',\n        control: {\n            type: 'choices',\n            choices: ['rect', 'circle', 'Custom(props) => (…)'].map(key => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'colors',\n        help: 'Defines color range.',\n        flavors: allFlavors,\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: 'nivo',\n        control: { type: 'quantizeColors' },\n        group: 'Style',\n    },\n    {\n        key: 'cellOpacity',\n        help: 'Cell opacity (0~1).',\n        flavors: allFlavors,\n        required: false,\n        defaultValue: defaults.cellOpacity,\n        type: 'number',\n        control: { type: 'opacity' },\n        group: 'Style',\n    },\n    {\n        key: 'cellBorderWidth',\n        help: 'Cell border width.',\n        flavors: allFlavors,\n        required: false,\n        defaultValue: defaults.cellBorderWidth,\n        type: 'number',\n        control: { type: 'lineWidth' },\n        group: 'Style',\n    },\n    {\n        key: 'cellBorderColor',\n        help: 'Method to compute cell border color.',\n        flavors: allFlavors,\n        description: `\n            how to compute cell border color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.cellBorderColor,\n        control: { type: 'inheritedColor' },\n        group: 'Style',\n    },\n    {\n        key: 'enableLabels',\n        help: 'Enable/disable labels.',\n        flavors: allFlavors,\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableLabels,\n        control: { type: 'switch' },\n        group: 'Labels',\n    },\n    {\n        key: 'labelTextColor',\n        help: 'Method to compute label text color.',\n        flavors: allFlavors,\n        description: `\n            how to compute label text color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.labelTextColor,\n        control: { type: 'inheritedColor' },\n        group: 'Labels',\n    },\n    ...chartGrid({\n        flavors: allFlavors,\n        xDefault: defaults.enableGridX,\n        yDefault: defaults.enableGridY,\n    }),\n    ...axes({ flavors: allFlavors }),\n    isInteractive({\n        flavors: ['svg', 'canvas'],\n        defaultValue: defaults.isInteractive,\n    }),\n    {\n        key: 'onClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        type: '(cell, event) => void',\n        required: false,\n        help: 'onClick handler.',\n        description: `\n            onClick handler, will receive node data\n            as first argument & event as second one.\n            The node data has the following shape:\n            \\`\\`\\`\n            {\n                key:        string,\n                value:      number,\n                x:          number,\n                xKey:       {string|number},\n                y:          number,\n                yKey:       {string|number},\n                width:      number,\n                height:     number,\n                opacity:    number\n            }\n            \\`\\`\\`\n        `,\n    },\n    {\n        key: 'hoverTarget',\n        flavors: ['svg', 'canvas'],\n        help: 'Defines hover behavior.',\n        description: `\n            Defines hover behavior:\n\n            - **cell**: highlight the current cell\n            - **row**: highlight the current cell's row\n            - **column**: highlight the current cell's column\n            - **rowColumn**: highlight the current cell's row & column\n        `,\n        required: false,\n        defaultValue: defaults.hoverTarget,\n        type: 'string',\n        group: 'Interactivity',\n        control: {\n            type: 'choices',\n            choices: ['cell', 'row', 'column', 'rowColumn'].map(key => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'cellHoverOpacity',\n        flavors: ['svg', 'canvas'],\n        help: 'Cell opacity on hover.',\n        required: false,\n        defaultValue: defaults.cellHoverOpacity,\n        type: 'number',\n        control: { type: 'opacity' },\n        group: 'Interactivity',\n    },\n    {\n        key: 'cellHoverOthersOpacity',\n        flavors: ['svg', 'canvas'],\n        help: 'Cell opacity when not hovered.',\n        required: false,\n        defaultValue: defaults.cellHoverOthersOpacity,\n        type: 'number',\n        control: { type: 'opacity' },\n        group: 'Interactivity',\n    },\n    ...motionProperties(['svg'], defaults, 'react-spring'),\n]\n\nexport const groups = groupProperties(props)\n","import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProp, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProp<X> | null\n        right?: CanvasAxisProp<Y> | null\n        bottom?: CanvasAxisProp<X> | null\n        left?: CanvasAxisProp<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProp<X> | undefined\n            : CanvasAxisProp<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { quantizeColorScalePropType, noop } from '@nivo/core'\nimport { inheritedColorPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\n\nexport const HeatMapPropTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    indexBy: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    keys: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    minValue: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n    maxValue: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n\n    forceSquare: PropTypes.bool.isRequired,\n    sizeVariation: PropTypes.number.isRequired,\n    padding: PropTypes.number.isRequired,\n\n    cellShape: PropTypes.oneOfType([PropTypes.oneOf(['rect', 'circle']), PropTypes.func])\n        .isRequired,\n    cellOpacity: PropTypes.number.isRequired,\n    cellBorderWidth: PropTypes.number.isRequired,\n    cellBorderColor: inheritedColorPropType.isRequired,\n\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n\n    enableLabels: PropTypes.bool.isRequired,\n    label: PropTypes.func.isRequired,\n    labelTextColor: inheritedColorPropType.isRequired,\n\n    colors: quantizeColorScalePropType.isRequired,\n    nanColor: PropTypes.string,\n\n    isInteractive: PropTypes.bool,\n    onClick: PropTypes.func.isRequired,\n    hoverTarget: PropTypes.oneOf(['cell', 'row', 'column', 'rowColumn']).isRequired,\n    cellHoverOpacity: PropTypes.number.isRequired,\n    cellHoverOthersOpacity: PropTypes.number.isRequired,\n    tooltipFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    tooltip: PropTypes.func,\n\n    pixelRatio: PropTypes.number.isRequired,\n}\n\nexport const HeatMapSvgPropTypes = {\n    ...HeatMapPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const HeatMapDefaultProps = {\n    indexBy: 'id',\n\n    minValue: 'auto',\n    maxValue: 'auto',\n\n    forceSquare: false,\n    sizeVariation: 0,\n    padding: 0,\n\n    // cells\n    cellShape: 'rect',\n    cellOpacity: 0.85,\n    cellBorderWidth: 0,\n    cellBorderColor: { from: 'color' },\n\n    // axes & grid\n    axisTop: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: false,\n\n    // labels\n    enableLabels: true,\n    label: (datum, key) => datum[key],\n    labelTextColor: { from: 'color', modifiers: [['darker', 1.4]] },\n\n    // theming\n    colors: 'nivo',\n    nanColor: '#000000',\n\n    // interactivity\n    isInteractive: true,\n    onClick: noop,\n    hoverTarget: 'rowColumn',\n    cellHoverOpacity: 1,\n    cellHoverOthersOpacity: 0.35,\n\n    // canvas specific\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n\nexport const HeatMapSvgDefaultProps = {\n    ...HeatMapDefaultProps,\n    role: 'img',\n}\n","import { useState, useMemo } from 'react'\nimport { scaleOrdinal, scaleLinear } from 'd3-scale'\nimport {\n    useTheme,\n    usePropertyAccessor,\n    guessQuantizeColorScale,\n    getLabelGenerator,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\n\nconst computeX = (column, cellWidth, padding) => {\n    return column * cellWidth + cellWidth * 0.5 + padding * column + padding\n}\nconst computeY = (row, cellHeight, padding) => {\n    return row * cellHeight + cellHeight * 0.5 + padding * row + padding\n}\n\nconst isHoverTargetByType = {\n    cell: (cell, current) => cell.xKey === current.xKey && cell.yKey === current.yKey,\n    row: (cell, current) => cell.yKey === current.yKey,\n    column: (cell, current) => cell.xKey === current.xKey,\n    rowColumn: (cell, current) => cell.xKey === current.xKey || cell.yKey === current.yKey,\n}\n\nconst computeCells = ({\n    data,\n    keys,\n    getIndex,\n    xScale,\n    yScale,\n    sizeScale,\n    cellOpacity,\n    cellWidth,\n    cellHeight,\n    colorScale,\n    nanColor,\n    getLabel,\n    getLabelTextColor,\n}) => {\n    const cells = []\n    data.forEach(datum => {\n        keys.forEach(key => {\n            const value = datum[key]\n            const label = getLabel(datum, key)\n            const index = getIndex(datum)\n            const sizeMultiplier = sizeScale ? sizeScale(value) : 1\n            const width = sizeMultiplier * cellWidth\n            const height = sizeMultiplier * cellHeight\n\n            const cell = {\n                id: `${key}.${index}`,\n                xKey: key,\n                yKey: index,\n                x: xScale(key),\n                y: yScale(index),\n                width,\n                height,\n                value,\n                label,\n                color: isNaN(value) ? nanColor : colorScale(value),\n                opacity: cellOpacity,\n            }\n            cell.labelTextColor = getLabelTextColor(cell)\n\n            cells.push(cell)\n        })\n    })\n\n    return cells\n}\n\nexport const useHeatMap = ({\n    data,\n    keys,\n    indexBy,\n    minValue: _minValue = 'auto',\n    maxValue: _maxValue = 'auto',\n    width,\n    height,\n    padding,\n    forceSquare,\n    sizeVariation,\n    colors,\n    nanColor,\n    cellOpacity,\n    cellBorderColor,\n    label,\n    labelTextColor,\n    hoverTarget,\n    cellHoverOpacity,\n    cellHoverOthersOpacity,\n}) => {\n    const [currentCellId, setCurrentCellId] = useState(null)\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const indices = useMemo(() => data.map(getIndex), [data, getIndex])\n    const getLabel = useMemo(() => getLabelGenerator(label), [label])\n\n    const layoutConfig = useMemo(() => {\n        const columns = keys.length\n        const rows = data.length\n\n        let cellWidth = Math.max((width - padding * (columns + 1)) / columns, 0)\n        let cellHeight = Math.max((height - padding * (rows + 1)) / rows, 0)\n\n        let offsetX = 0\n        let offsetY = 0\n        if (forceSquare === true) {\n            const cellSize = Math.min(cellWidth, cellHeight)\n            cellWidth = cellSize\n            cellHeight = cellSize\n\n            offsetX = (width - ((cellWidth + padding) * columns + padding)) / 2\n            offsetY = (height - ((cellHeight + padding) * rows + padding)) / 2\n        }\n\n        return {\n            cellWidth,\n            cellHeight,\n            offsetX,\n            offsetY,\n        }\n    }, [data, keys, width, height, padding, forceSquare])\n\n    const scales = useMemo(() => {\n        return {\n            x: scaleOrdinal(\n                keys.map((key, i) => computeX(i, layoutConfig.cellWidth, padding))\n            ).domain(keys),\n            y: scaleOrdinal(\n                indices.map((d, i) => computeY(i, layoutConfig.cellHeight, padding))\n            ).domain(indices),\n        }\n    }, [indices, keys, layoutConfig, padding])\n\n    const values = useMemo(() => {\n        let minValue = _minValue\n        let maxValue = _maxValue\n        if (minValue === 'auto' || maxValue === 'auto') {\n            const allValues = data.reduce((acc, row) => acc.concat(keys.map(key => row[key])), [])\n\n            if (minValue === 'auto') minValue = Math.min(...allValues)\n            if (maxValue === 'auto') maxValue = Math.max(...allValues)\n        }\n\n        return {\n            min: Math.min(minValue, maxValue),\n            max: Math.max(maxValue, minValue),\n        }\n    }, [data, keys, _minValue, _maxValue])\n\n    const sizeScale = useMemo(() => {\n        if (sizeVariation > 0) {\n            return scaleLinear()\n                .range([1 - sizeVariation, 1])\n                .domain([values.min, values.max])\n        }\n    }, [sizeVariation, values])\n\n    const colorScale = useMemo(\n        () => guessQuantizeColorScale(colors).domain([values.min, values.max]),\n        [colors, values]\n    )\n    const theme = useTheme()\n    const getCellBorderColor = useInheritedColor(cellBorderColor, theme)\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n\n    const cells = useMemo(\n        () =>\n            computeCells({\n                data,\n                keys,\n                getIndex,\n                xScale: scales.x,\n                yScale: scales.y,\n                sizeScale,\n                cellOpacity,\n                cellWidth: layoutConfig.cellWidth,\n                cellHeight: layoutConfig.cellHeight,\n                colorScale,\n                nanColor,\n                getLabel,\n                getLabelTextColor,\n            }),\n        [\n            data,\n            keys,\n            getIndex,\n            scales,\n            sizeScale,\n            cellOpacity,\n            layoutConfig,\n            colorScale,\n            nanColor,\n            getLabel,\n            getLabelTextColor,\n        ]\n    )\n\n    const cellsWithCurrent = useMemo(() => {\n        if (currentCellId === null) return cells\n\n        const isHoverTarget = isHoverTargetByType[hoverTarget]\n        const currentCell = cells.find(cell => cell.id === currentCellId)\n\n        return cells.map(cell => {\n            const opacity = isHoverTarget(cell, currentCell)\n                ? cellHoverOpacity\n                : cellHoverOthersOpacity\n\n            if (opacity === cell.opacity) return cell\n\n            return {\n                ...cell,\n                opacity,\n            }\n        })\n    }, [cells, currentCellId, hoverTarget, cellHoverOpacity, cellHoverOthersOpacity])\n\n    return {\n        cells: cellsWithCurrent,\n        getIndex,\n        xScale: scales.x,\n        yScale: scales.y,\n        ...layoutConfig,\n        sizeScale,\n        currentCellId,\n        setCurrentCellId,\n        colorScale,\n        getCellBorderColor,\n        getLabelTextColor,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement } from 'react'\n\nconst HeatMapCells = ({\n    cells,\n    cellComponent,\n    cellBorderWidth,\n    getCellBorderColor,\n    enableLabels,\n    getLabelTextColor,\n    handleCellHover,\n    handleCellLeave,\n    onClick,\n}) => {\n    return cells.map(cell =>\n        createElement(cellComponent, {\n            key: cell.id,\n            data: cell,\n            label: cell.label,\n            x: cell.x,\n            y: cell.y,\n            width: cell.width,\n            height: cell.height,\n            color: cell.color,\n            opacity: cell.opacity,\n            borderWidth: cellBorderWidth,\n            borderColor: getCellBorderColor(cell),\n            enableLabel: enableLabels,\n            textColor: getLabelTextColor(cell),\n            onHover: handleCellHover ? event => handleCellHover(cell, event) : undefined,\n            onLeave: handleCellLeave,\n            onClick,\n        })\n    )\n}\n\nHeatMapCells.propTypes = {}\n\nexport default HeatMapCells\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nconst HeatMapCellRect = ({\n    data,\n    label,\n    x,\n    y,\n    width,\n    height,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    enableLabel,\n    textColor,\n    onHover,\n    onLeave,\n    onClick,\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x}, ${y})`,\n        width,\n        height,\n        xOffset: width * -0.5,\n        yOffset: height * -0.5,\n        color,\n        opacity,\n        textColor,\n        borderWidth,\n        borderColor,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g\n            transform={animatedProps.transform}\n            style={{ cursor: 'pointer' }}\n            onMouseEnter={onHover}\n            onMouseMove={onHover}\n            onMouseLeave={onLeave}\n            onClick={onClick ? event => onClick(data, event) : undefined}\n        >\n            <animated.rect\n                x={animatedProps.xOffset}\n                y={animatedProps.yOffset}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                fill={animatedProps.color}\n                fillOpacity={animatedProps.opacity}\n                strokeWidth={animatedProps.borderWidth}\n                stroke={animatedProps.borderColor}\n                strokeOpacity={animatedProps.opacity}\n            />\n            {enableLabel && (\n                <animated.text\n                    dominantBaseline=\"central\"\n                    textAnchor=\"middle\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: animatedProps.textColor,\n                    }}\n                    fillOpacity={animatedProps.opacity}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nHeatMapCellRect.propTypes = {\n    data: PropTypes.object.isRequired,\n    label: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    opacity: PropTypes.number.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    textColor: PropTypes.string.isRequired,\n    onHover: PropTypes.func,\n    onLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default memo(HeatMapCellRect)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\n\nconst HeatMapCellCircle = ({\n    data,\n    label,\n    x,\n    y,\n    width,\n    height,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    enableLabel,\n    textColor,\n    onHover,\n    onLeave,\n    onClick,\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x}, ${y})`,\n        radius: Math.min(width, height) / 2,\n        color,\n        opacity,\n        textColor,\n        borderWidth,\n        borderColor,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g\n            transform={animatedProps.transform}\n            style={{ cursor: 'pointer' }}\n            onMouseEnter={onHover}\n            onMouseMove={onHover}\n            onMouseLeave={onLeave}\n            onClick={onClick ? event => onClick(data, event) : undefined}\n        >\n            <animated.circle\n                r={animatedProps.radius}\n                fill={animatedProps.color}\n                fillOpacity={animatedProps.opacity}\n                strokeWidth={animatedProps.borderWidth}\n                stroke={animatedProps.borderColor}\n                strokeOpacity={animatedProps.opacity}\n            />\n            {enableLabel && (\n                <animated.text\n                    dominantBaseline=\"central\"\n                    textAnchor=\"middle\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: animatedProps.textColor,\n                    }}\n                    fillOpacity={animatedProps.opacity}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nHeatMapCellCircle.propTypes = {\n    data: PropTypes.object.isRequired,\n    label: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    opacity: PropTypes.number.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    textColor: PropTypes.string.isRequired,\n    onHover: PropTypes.func,\n    onLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default memo(HeatMapCellCircle)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst HeatMapCellTooltip = ({ cell, format, tooltip }) => (\n    <BasicTooltip\n        id={`${cell.yKey} - ${cell.xKey}`}\n        value={cell.value}\n        enableChip={true}\n        color={cell.color}\n        format={format}\n        renderContent={typeof tooltip === 'function' ? tooltip.bind(null, { ...cell }) : null}\n    />\n)\n\nHeatMapCellTooltip.propTypes = {\n    cell: PropTypes.shape({\n        xKey: PropTypes.string.isRequired,\n        yKey: PropTypes.string.isRequired,\n        value: PropTypes.number.isRequired,\n        color: PropTypes.string.isRequired,\n    }).isRequired,\n    format: PropTypes.func,\n    tooltip: PropTypes.func,\n}\n\nexport default memo(HeatMapCellTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useCallback } from 'react'\nimport { SvgWrapper, withContainer, useDimensions } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { HeatMapSvgPropTypes, HeatMapSvgDefaultProps } from './props'\nimport { useHeatMap } from './hooks'\nimport HeatMapCells from './HeatMapCells'\nimport HeatMapCellRect from './HeatMapCellRect'\nimport HeatMapCellCircle from './HeatMapCellCircle'\nimport HeatMapCellTooltip from './HeatMapCellTooltip'\n\nconst HeatMap = ({\n    data,\n    keys,\n    indexBy,\n    minValue,\n    maxValue,\n    width,\n    height,\n    margin: partialMargin,\n    forceSquare,\n    padding,\n    sizeVariation,\n    cellShape,\n    cellOpacity,\n    cellBorderWidth,\n    cellBorderColor,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableGridX,\n    enableGridY,\n    enableLabels,\n    label,\n    labelTextColor,\n    colors,\n    nanColor,\n    isInteractive,\n    onClick,\n    hoverTarget,\n    cellHoverOpacity,\n    cellHoverOthersOpacity,\n    tooltipFormat,\n    tooltip,\n    role,\n}) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        cells,\n        xScale,\n        yScale,\n        offsetX,\n        offsetY,\n        setCurrentCellId,\n        getCellBorderColor,\n        getLabelTextColor,\n    } = useHeatMap({\n        data,\n        keys,\n        indexBy,\n        minValue,\n        maxValue,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        forceSquare,\n        sizeVariation,\n        colors,\n        nanColor,\n        cellOpacity,\n        cellBorderColor,\n        label,\n        labelTextColor,\n        hoverTarget,\n        cellHoverOpacity,\n        cellHoverOthersOpacity,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleCellHover = useCallback(\n        (cell, event) => {\n            setCurrentCellId(cell.id)\n            showTooltipFromEvent(\n                <HeatMapCellTooltip cell={cell} format={tooltipFormat} tooltip={tooltip} />,\n                event\n            )\n        },\n        [setCurrentCellId, showTooltipFromEvent, tooltipFormat, tooltip]\n    )\n\n    const handleCellLeave = useCallback(() => {\n        setCurrentCellId(null)\n        hideTooltip()\n    }, [setCurrentCellId, hideTooltip])\n\n    let cellComponent\n    if (cellShape === 'rect') {\n        cellComponent = HeatMapCellRect\n    } else if (cellShape === 'circle') {\n        cellComponent = HeatMapCellCircle\n    } else {\n        cellComponent = cellShape\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={Object.assign({}, margin, {\n                top: margin.top + offsetY,\n                left: margin.left + offsetX,\n            })}\n            role={role}\n        >\n            <Grid\n                width={innerWidth - offsetX * 2}\n                height={innerHeight - offsetY * 2}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n            <Axes\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth - offsetX * 2}\n                height={innerHeight - offsetY * 2}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n            <HeatMapCells\n                cells={cells}\n                cellComponent={cellComponent}\n                cellBorderWidth={cellBorderWidth}\n                getCellBorderColor={getCellBorderColor}\n                enableLabels={enableLabels}\n                getLabelTextColor={getLabelTextColor}\n                handleCellHover={isInteractive ? handleCellHover : undefined}\n                handleCellLeave={isInteractive ? handleCellLeave : undefined}\n                onClick={isInteractive ? onClick : undefined}\n            />\n        </SvgWrapper>\n    )\n}\n\nHeatMap.propTypes = HeatMapSvgPropTypes\n\nconst WrappedHeatMap = withContainer(HeatMap)\nWrappedHeatMap.defaultProps = HeatMapSvgDefaultProps\n\nexport default WrappedHeatMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * Render heatmap rect cell.\n *\n * @param {Object}  ctx\n * @param {boolean} enableLabels\n * @param {number}  x\n * @param {number}  y\n * @param {number}  width\n * @param {number}  height\n * @param {string}  color\n * @param {number}  opacity\n * @param {string}  labelTextColor\n * @param {number | string}  label\n */\nexport const renderRect = (\n    ctx,\n    { enableLabels, theme },\n    { x, y, width, height, color, opacity, labelTextColor, label }\n) => {\n    ctx.save()\n    ctx.globalAlpha = opacity\n\n    ctx.fillStyle = color\n    ctx.fillRect(x - width / 2, y - height / 2, width, height)\n\n    if (enableLabels === true) {\n        ctx.fillStyle = labelTextColor\n        ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n        ctx.fillText(label, x, y)\n    }\n\n    ctx.restore()\n}\n\n/**\n * Render heatmap circle cell.\n *\n * @param {Object}  ctx\n * @param {boolean} enableLabels\n * @param {number}  x\n * @param {number}  y\n * @param {number}  width\n * @param {number}  height\n * @param {string}  color\n * @param {number}  opacity\n * @param {string}  labelTextColor\n * @param {number | string}  label\n */\nexport const renderCircle = (\n    ctx,\n    { enableLabels, theme },\n    { x, y, width, height, color, opacity, labelTextColor, label }\n) => {\n    ctx.save()\n    ctx.globalAlpha = opacity\n\n    const radius = Math.min(width, height) / 2\n\n    ctx.fillStyle = color\n    ctx.beginPath()\n    ctx.arc(x, y, radius, 0, 2 * Math.PI)\n    ctx.fill()\n\n    if (enableLabels === true) {\n        ctx.fillStyle = labelTextColor\n        ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n        ctx.fillText(label, x, y)\n    }\n\n    ctx.restore()\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useEffect, useRef, useCallback } from 'react'\nimport {\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n    withContainer,\n} from '@nivo/core'\nimport { renderAxesToCanvas } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useHeatMap } from './hooks'\nimport { HeatMapDefaultProps, HeatMapPropTypes } from './props'\nimport { renderRect, renderCircle } from './canvas'\nimport HeatMapCellTooltip from './HeatMapCellTooltip'\n\nconst HeatMapCanvas = ({\n    data,\n    keys,\n    indexBy,\n    minValue,\n    maxValue,\n    width,\n    height,\n    margin: partialMargin,\n    forceSquare,\n    padding,\n    sizeVariation,\n    cellShape,\n    cellOpacity,\n    cellBorderColor,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableLabels,\n    label,\n    labelTextColor,\n    colors,\n    nanColor,\n    isInteractive,\n    onClick,\n    hoverTarget,\n    cellHoverOpacity,\n    cellHoverOthersOpacity,\n    tooltipFormat,\n    tooltip,\n    pixelRatio,\n}) => {\n    const canvasEl = useRef(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { cells, xScale, yScale, offsetX, offsetY, currentCellId, setCurrentCellId } = useHeatMap(\n        {\n            data,\n            keys,\n            indexBy,\n            minValue,\n            maxValue,\n            width: innerWidth,\n            height: innerHeight,\n            padding,\n            forceSquare,\n            sizeVariation,\n            colors,\n            nanColor,\n            cellOpacity,\n            cellBorderColor,\n            label,\n            labelTextColor,\n            hoverTarget,\n            cellHoverOpacity,\n            cellHoverOthersOpacity,\n        }\n    )\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left + offsetX, margin.top + offsetY)\n\n        renderAxesToCanvas(ctx, {\n            xScale,\n            yScale,\n            width: innerWidth - offsetX * 2,\n            height: innerHeight - offsetY * 2,\n            top: axisTop,\n            right: axisRight,\n            bottom: axisBottom,\n            left: axisLeft,\n            theme,\n        })\n\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n\n        let renderCell\n        if (cellShape === 'rect') {\n            renderCell = renderRect\n        } else {\n            renderCell = renderCircle\n        }\n        cells.forEach(cell => {\n            renderCell(ctx, { enableLabels, theme }, cell)\n        })\n    }, [\n        canvasEl,\n        cells,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        offsetX,\n        offsetY,\n        cellShape,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        xScale,\n        yScale,\n        theme,\n        enableLabels,\n        pixelRatio,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n            const cell = cells.find(c =>\n                isCursorInRect(\n                    c.x + margin.left + offsetX - c.width / 2,\n                    c.y + margin.top + offsetY - c.height / 2,\n                    c.width,\n                    c.height,\n                    x,\n                    y\n                )\n            )\n            if (cell !== undefined) {\n                setCurrentCellId(cell.id)\n                showTooltipFromEvent(\n                    <HeatMapCellTooltip cell={cell} tooltip={tooltip} format={tooltipFormat} />,\n                    event\n                )\n            } else {\n                setCurrentCellId(null)\n                hideTooltip()\n            }\n        },\n        [\n            canvasEl,\n            cells,\n            margin,\n            offsetX,\n            offsetY,\n            setCurrentCellId,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n            tooltipFormat,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setCurrentCellId(null)\n        hideTooltip()\n    }, [setCurrentCellId, hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            if (currentCellId === null) return\n\n            const currentCell = cells.find(cell => cell.id === currentCellId)\n            currentCell && onClick(currentCell, event)\n        },\n        [cells, currentCellId, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nHeatMapCanvas.propTypes = HeatMapPropTypes\n\nconst WrappedHeatMapCanvas = withContainer(HeatMapCanvas)\nWrappedHeatMapCanvas.defaultProps = HeatMapDefaultProps\n\nexport default WrappedHeatMapCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport HeatMap from './HeatMap'\n\nconst ResponsiveHeatMap = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <HeatMap width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveHeatMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport HeatMapCanvas from './HeatMapCanvas'\n\nconst ResponsiveHeatMapCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <HeatMapCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveHeatMapCanvas\n"],"names":["dishes","generateLightDataSet","data","generateCountriesData","slice","size","min","max","keys","generateHeavyDataSet","CustomCell","value","x","y","width","height","color","opacity","borderWidth","borderColor","textColor","transform","fill","fillOpacity","strokeWidth","stroke","d","Math","round","alignmentBaseline","textAnchor","style","dy","settingsMapper","cellShape","axisTop","mapAxis","axisRight","axisBottom","axisLeft","exclude","allFlavors","props","key","group","flavors","help","type","required","description","defaultValue","defaults","control","disabledValue","step","unit","chartDimensions","themeProperty","choices","map","label","chartGrid","xDefault","yDefault","axes","isInteractive","motionProperties","groups","groupProperties","computeCartesianTicks","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","position","centerScale","line","lineX","lineY","text","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","top","bottom","left","right","ticks","v","getFormatter","format","formatter","timeFormat","Date","d3Format","computeGridLines","_values","Array","isArray","lines","x1","x2","y1","y2","memoizedAxisTick","memo","_value","onClick","animatedProps","theme","useTheme","useMemo","cursor","event","_jsxs","animated","g","_jsx","dominantBaseline","textTransform","memoizedAxis","length","renderTick","AxisTick","legend","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","config","useSpring","lineX2","lineY2","immediate","transition","useTransition","t","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","rotate","domain","axisPropTypes","PropTypes","axisPropType","positions","Axes","xScale","yScale","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","_format","save","font","fontWeight","fontSize","fontFamily","lineWidth","Number","lineCap","strokeStyle","beginPath","moveTo","lineTo","forEach","degreesToRadians","fillStyle","fillText","String","restore","renderAxesToCanvas","renderGridLinesToCanvas","HeatMapPropTypes","isRequired","indexBy","minValue","maxValue","forceSquare","sizeVariation","padding","cellOpacity","cellBorderWidth","cellBorderColor","inheritedColorPropType","enableGridX","enableGridY","enableLabels","labelTextColor","colors","quantizeColorScalePropType","nanColor","hoverTarget","cellHoverOpacity","cellHoverOthersOpacity","tooltipFormat","tooltip","pixelRatio","HeatMapSvgPropTypes","role","HeatMapDefaultProps","datum","modifiers","noop","window","devicePixelRatio","HeatMapSvgDefaultProps","isHoverTargetByType","cell","current","xKey","yKey","row","column","rowColumn","useHeatMap","_minValue","_maxValue","useState","currentCellId","setCurrentCellId","getIndex","usePropertyAccessor","indices","getLabel","getLabelGenerator","layoutConfig","columns","rows","cellWidth","cellHeight","offsetX","offsetY","cellSize","scales","scaleOrdinal","i","allValues","reduce","acc","concat","sizeScale","scaleLinear","range","colorScale","guessQuantizeColorScale","getCellBorderColor","useInheritedColor","getLabelTextColor","cells","index","sizeMultiplier","id","isNaN","push","cellsWithCurrent","isHoverTarget","currentCell","find","HeatMapCells","cellComponent","handleCellHover","handleCellLeave","createElement","enableLabel","onHover","onLeave","propTypes","HeatMapCellRect","xOffset","yOffset","onMouseEnter","onMouseMove","onMouseLeave","e","undefined","rect","strokeOpacity","labels","HeatMapCellCircle","radius","circle","r","HeatMapCellTooltip","BasicTooltip","enableChip","renderContent","bind","HeatMap","partialMargin","margin","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","useTooltip","showTooltipFromEvent","hideTooltip","useCallback","SvgWrapper","Object","assign","WrappedHeatMap","withContainer","defaultProps","renderRect","globalAlpha","fillRect","renderCircle","arc","PI","HeatMapCanvas","canvasEl","useRef","useEffect","renderCell","getContext","background","handleMouseHover","getRelativeCursor","isCursorInRect","c","handleMouseLeave","handleClick","ref","WrappedHeatMapCanvas","ResponsiveHeatMap","ResponsiveWrapper","ResponsiveHeatMapCanvas"],"sourceRoot":""}