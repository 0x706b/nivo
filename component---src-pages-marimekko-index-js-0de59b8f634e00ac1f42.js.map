{"version":3,"file":"component---src-pages-marimekko-index-js-0de59b8f634e00ac1f42.js","mappings":"iHAAe,SAAS,EAACA,GACvB,OAAO,WACL,OAAOA,G,4jBCAEC,EAAe,CACxBC,OAAQ,WACRC,OAAQ,OACRC,aAAc,EACdC,aAAc,EAEdC,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,WAEjCC,aAAAA,EACAC,aAAAA,EAEAC,OAAQ,CAAEC,OAAQ,QAClBC,YAAa,EACbC,YAAa,CACTC,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU,KAG3BC,eAAAA,EAEAC,SAAAA,EACAC,aAAc,UCiELC,EAAa,CAGtBC,OAAQC,EAAAA,EAGRC,UAAWC,EAAAA,EAEXC,KAAMC,EAAAA,EAGNC,WAAYC,EAAAA,EAIZC,OAAQC,EAAAA,GChECC,EAAW,SACpBC,EACAC,EACA5B,GAAAA,OAEA6B,EAAAA,EAAAA,UAAQ,eACEC,EAAiBf,EAAWf,GAAAA,OAE3B+B,EAAAA,EAAAA,KACFC,KAAKL,GACLM,OAAM,SAACC,EAAOC,GAAAA,OAAQP,EAAWO,GAAKD,MACtClC,OAAO8B,KACb,CAACH,EAAcC,EAAY5B,KAoPrBoC,EAAe,gBACxBC,EAAAA,EAAAA,KACAC,EAAAA,EAAAA,GACAL,EAAAA,EAAAA,MACAM,EAAAA,EAAAA,YACYC,EAAAA,EAAZZ,WACA7B,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,aACAI,EAAAA,EAAAA,OACAG,EAAAA,EAAAA,YACAD,EAAAA,EAAAA,YACAiC,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OAAAA,EA7R6B,SAAWF,GAAAA,OACxCX,EAAAA,EAAAA,UAAQ,eACED,EAA0D,GAC1DD,EAAyB,UAC/Ba,EAAcG,SAAQ,YAClBhB,EAAaiB,KAAKC,EAAUP,IAC5BV,EAAWiB,EAAUP,IACU,mBAApBO,EAAUZ,MACXY,EAAUZ,MACV,SAACC,GAAAA,OAAoBY,GAAAA,CAAIZ,EAAOW,EAAUZ,MAAiB,OAGlE,CAAEN,aAAAA,EAAcC,WAAAA,KACxB,CAACY,IAbyB,CA8SoCA,GAAzDb,EAAAA,EAAAA,aAAcC,EAAAA,EAAAA,WAAAA,EAjRI,SAC1BmB,EACAV,GAAAA,OAEAR,EAAAA,EAAAA,UAAQ,eACEmB,EAAUD,EAAMV,GAEhBY,EAAsB,UAC5BD,EAAQL,SAAQ,YACZE,EAAUF,SAAQ,YACdM,EAAUL,KAAKV,EAAM,IACrBe,EAAUL,KAAKV,EAAM,UAOtB,CACHc,QAAAA,EACAE,IALQC,KAAKD,IAAAA,MAALC,KAAYF,GAMpBG,IALQD,KAAKC,IAAAA,MAALD,KAAYF,MAOzB,CAACF,EAAOV,IAvBe,CAkRZX,EAAmBC,EAAcC,EAAY5B,GACGqC,GAAtDW,EAAAA,EAAAA,QAASE,EAAAA,EAAAA,IAAKE,EAAAA,EAAAA,IAChBC,EA5OuB,SAC7BhB,EACAC,EACAL,GAAAA,IAEMqB,EACY,mBAAPhB,EAAoBA,EAAK,SAACJ,GAAAA,OAAoBY,GAAAA,CAAIZ,EAAOI,IAC9DiB,EACe,mBAAVtB,EAAuBA,EAAQ,SAACC,GAAAA,OAAoBY,GAAAA,CAAIZ,EAAOD,EAAO,WAE1EJ,EAAAA,EAAAA,UAAQ,eACL2B,EAA0C,UAChDnB,EAAKM,SAAQ,SAACT,EAAOuB,GAAAA,IACXC,EAAUJ,EAAMpB,GAChByB,EAAaJ,EAASrB,GAE5BsB,EAAWZ,KAAK,CACZa,MAAAA,EACAnB,GAAIoB,EACJzB,MAAO0B,EACPtB,KAAMH,OAIPsB,IACR,CAACnB,EAAMiB,EAAOC,IAzBY,CA4OsBlB,EAAMC,EAAIL,GACvD2B,EAjNuB,gBAC7BvB,EAAAA,EAAAA,KACAI,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OACA3C,EAAAA,EAAAA,OACAE,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,aAAAA,OASA2B,EAAAA,EAAAA,UAAQ,eACEgC,EAAaxB,EAAKyB,QAAO,SAACC,EAAK7B,GAAAA,OAAU6B,EAAM7B,EAAMD,QAAO,GAE5D2B,GAAiBI,EAAAA,EAAAA,KAAcC,OAAO,CAAC,EAAGJ,IAE1CK,EAAe,EAAIjE,GAAgBoC,EAAK8B,OAAS,GAAKjE,EAAAA,MAE7C,aAAXH,EACA6D,EAAeQ,MAAM,CAAC,EAAG3B,EAAQyB,IAEjCN,EAAeQ,MAAM,CAAC,EAAG1B,EAASwB,IAG/BN,IACR,CAACvB,EAAMI,EAAOC,EAAQ3C,IA7BI,CAiNY,CACrCsC,KAAMgB,EACNZ,MAAAA,EACAC,OAAAA,EACA3C,OAAAA,EACAE,aAAAA,EACAC,aAAAA,IAEEmE,EApQwB,SAC9BnB,EACAE,EACAX,EACAC,EACA3C,GAAAA,OAEA8B,EAAAA,EAAAA,UAAQ,iBACW,aAAX9B,GACOiE,EAAAA,EAAAA,KAAcC,OAAO,CAACb,EAAKF,IAAMkB,MAAM,CAAC,EAAG1B,KAG/CsB,EAAAA,EAAAA,KAAcC,OAAO,CAACf,EAAKE,IAAMgB,MAAM,CAAC,EAAG3B,MACnD,CAACS,EAAKE,EAAKX,EAAOC,EAAQ3C,IAbC,CAoQamD,EAAKE,EAAKX,EAAOC,EAAQ3C,GAC9DuE,EA3LqB,gBAC3BjC,EAAAA,EAAAA,KACAW,EAAAA,EAAAA,QACArB,EAAAA,EAAAA,aACAY,EAAAA,EAAAA,YACAqB,EAAAA,EAAAA,eACAS,EAAAA,EAAAA,gBACA/D,EAAAA,EAAAA,OACAP,EAAAA,EAAAA,OACAE,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,aAaMqE,GAAWC,EAAAA,EAAAA,GAA8DlE,EAAQ,MAEjFmE,GAAcC,EAAAA,EAAAA,IAA0BnC,GAAAA,OAEvCV,EAAAA,EAAAA,UAAQ,eACLyC,EAA0C,GAE5CK,EAAW1E,EAAAA,OAEfoC,EAAKM,SAAQ,gBACHiC,EAAYhB,EAAe1B,EAAMD,OAEjC4C,EAAAA,EAAAA,GACC3C,EAAAA,CACHrC,EAAc,aAAXE,EAAwB4E,EAAW,EACtCG,EAAc,aAAX/E,EAAwB,EAAI4E,EAC/BlC,MAAkB,aAAX1C,EAAwB6E,EAAY,EAC3ClC,OAAmB,aAAX3C,EAAwB,EAAI6E,EACpChD,WAAY,KAGVmD,EAAyB,GAC3BC,EAAY,EAEhBL,GAAYC,EAAY1E,EAExByB,EAAagB,SAAQ,gBACXE,EAAYG,EAAQiC,MAAK,mBAASlC,EAAMZ,MAAQ+C,KAAAA,GAClDrC,EAAW,CAAC,IACNsC,EAAiBtC,EAAUX,EAAMuB,OACjC2B,EAA2C,CAC7C9C,GAAI4C,EACJhD,MAAO2C,EACP5C,MAAOkD,EAAe,GAAKA,EAAe,GAC1CE,eAAgBZ,EAAYU,EAAe,GAAKA,EAAe,IAC/DG,MAAO,mBACPzF,EAAG,EACHiF,EAAG,EACHrC,MAAO,EACPC,OAAQ,GAGN6C,EAAYlB,EAAgBc,EAAe,IAC3CK,EAAYnB,EAAgBc,EAAe,IAElC,aAAXpF,GACAqF,EAAevF,EAAIgF,EAAchF,EACjCuF,EAAeN,EAAI3B,KAAKD,IAAIqC,EAAWC,GACvCJ,EAAe3C,MAAQoC,EAAcpC,MACrC2C,EAAe1C,OAASS,KAAKC,IAAImC,EAAWC,GAAaJ,EAAeN,EAExEC,EAAanC,KAAKwC,EAAeN,GACjCE,GAAaI,EAAe1C,SAE5B0C,EAAevF,EAAIsD,KAAKD,IAAIqC,EAAWC,GACvCJ,EAAeN,EAAID,EAAcC,EACjCM,EAAe3C,MAAQU,KAAKC,IAAImC,EAAWC,GAAaJ,EAAevF,EACvEuF,EAAe1C,OAASmC,EAAcnC,OAEtCqC,EAAanC,KAAKwC,EAAevF,GACjCmF,GAAaI,EAAe3C,OAGhC2C,EAAeE,MAAQf,EAASa,GAEhCP,EAAcjD,WAAWgB,KAAKwC,GAGnB,aAAXrF,GACA8E,EAAcC,EAAI3B,KAAKD,IAAAA,MAALC,KAAY4B,GAC9BF,EAAcnC,OAASsC,IAEvBH,EAAchF,EAAIsD,KAAKD,IAAAA,MAALC,KAAY4B,GAC9BF,EAAcpC,MAAQuC,MAI9BV,EAAa1B,KAAKiC,MAGfP,IACR,CACCjC,EACAW,EACArB,EACAiC,EACAS,EACAtE,EACAE,EACAC,EACAqE,EACAE,IAlHuB,CA2LoB,CAC3CpC,KAAMgB,EACNL,QAAAA,EACArB,aAAAA,EACAY,YAAAA,EACAqB,eAAAA,EACAS,gBAAAA,EACA/D,OAAAA,EACAP,OAAAA,EACAE,aAAAA,EACAC,aAAAA,IAEEuF,EAjFa,SACnBpD,EACA5B,EACAD,GAAAA,IAEMkF,GAAQC,EAAAA,EAAAA,MACRC,GAAiBC,EAAAA,EAAAA,IAA4CpF,EAAaiF,GAAAA,OAEzE7D,EAAAA,EAAAA,UAAQ,eACLiE,EAA4B,UAClCzD,EAAKM,SAAQ,YACTT,EAAMN,WAAWe,SAAQ,YACrBmD,EAAIlD,KAAAA,EAAAA,CACAT,IAAQD,EAAMI,GAAAA,IAAMO,EAAUP,IAC3BO,EAAAA,CACHpC,YAAamF,EAAe/C,GAC5BrC,YAAAA,WAKLsF,IACR,CAACzD,EAAM7B,EAAaoF,IAtBJ,CAiFYtB,EAAc7D,EAAaD,GAAAA,MAEnD,CACH8D,aAAAA,EACAmB,KAAAA,EACA7B,eAAAA,EACAS,gBAAAA,EACA1C,aAAAA,IClVKoE,EAAM,kBACfC,EAAAA,EAAAA,IACAC,EAAAA,EAAAA,cACArF,EAAAA,EAAAA,cACAsF,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,aAAAA,GAE8CC,EAAAA,EAAAA,MAAtCC,EAAAA,EAAAA,qBAAsBC,EAAAA,EAAAA,YAExBC,GAAcC,EAAAA,EAAAA,cAChB,mBAASH,GAAqBI,EAAAA,EAAAA,eAAcV,EAAS,CAAEF,IAAAA,IAAQa,KAC/D,CAACL,EAAsBN,EAASF,IAG9Bc,GAAcH,EAAAA,EAAAA,cAChB,SAACE,GAAAA,MACGV,GAAAA,EAAUH,EAAKa,KAEnB,CAACV,EAASH,IAGRe,GAAmBJ,EAAAA,EAAAA,cACrB,SAACE,GAAAA,MACGT,GAAAA,EAAeJ,EAAKa,GACpBH,EAAYG,KAEhB,CAACH,EAAaV,IAGZgB,GAAkBL,EAAAA,EAAAA,cACpB,SAACE,GAAAA,MACGR,GAAAA,EAAcL,EAAKa,GACnBH,EAAYG,KAEhB,CAACH,EAAaV,IAGZiB,GAAmBN,EAAAA,EAAAA,cACrB,SAACE,GAAAA,MACGP,GAAAA,EAAeN,EAAKa,GACpBJ,MAEJ,CAACH,EAAcN,EAAKS,IAAAA,OAIpBS,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,KAASC,CACNvH,EAAGoG,EAAcpG,EACjBiF,EAAGmB,EAAcnB,EACjBrC,OAAO4E,EAAAA,EAAAA,IAAGpB,EAAcxD,OAAO,mBAASU,KAAKC,IAAInB,EAAO,MACxDS,QAAQ2E,EAAAA,EAAAA,IAAGpB,EAAcvD,QAAQ,mBAASS,KAAKC,IAAInB,EAAO,MAC1DqF,KAAAA,OAAAA,EAAMtB,EAAIsB,MAAAA,EAAQrB,EAAcX,MAChCiC,OAAQtB,EAAcxF,YACtB+G,YAAaxB,EAAIxF,YACjB2F,QAASvF,EAAgBkG,OAAAA,EACzBV,aAAcxF,EAAgBmG,OAAAA,EAC9BV,YAAazF,EAAgBoG,OAAAA,EAC7BV,aAAc1F,EAAgBqG,OAAAA,KCrE7BQ,EAAO,gBAChBhC,EAAAA,EAAAA,KACA7E,EAAAA,EAAAA,cACAsF,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,aAAAA,GAE0CoB,EAAAA,EAAAA,MAAlC7G,EAAAA,EAAAA,QAAiB8G,EAAAA,EAARC,OAEXC,GAAaC,EAAAA,EAAAA,eAWjBrC,EAAM,CACJzD,KAAM,mBAAOgE,EAAI7D,KACjB4F,QAAS,kBAAQ,CACblI,EAAGmG,EAAInG,EACPiF,EAAGkB,EAAIlB,EACPrC,MAAOuD,EAAIvD,MACXC,OAAQsD,EAAItD,OACZ4C,MAAOU,EAAIV,MACX0C,QAAS,EACTvH,YAAauF,EAAIvF,cAErBC,KAAM,kBAAQ,CACVb,EAAGmG,EAAInG,EACPiF,EAAGkB,EAAIlB,EACPrC,MAAOuD,EAAIvD,MACXC,OAAQsD,EAAItD,OACZ4C,MAAOU,EAAIV,MACX0C,QAAS,EACTvH,YAAauF,EAAIvF,cAErBwH,MAAO,kBAAQ,CACXpI,EAAGmG,EAAInG,EACPiF,EAAGkB,EAAIlB,EACPrC,MAAOuD,EAAIvD,MACXC,OAAQsD,EAAItD,OACZ4C,MAAOU,EAAIV,MACX0C,QAAS,EACTvH,YAAauF,EAAIvF,cAErByH,OAAQ,kBAAQ,CACZrI,EAAGmG,EAAInG,EACPiF,EAAGkB,EAAIlB,EACPrC,MAAOuD,EAAIvD,MACXC,OAAQsD,EAAItD,OACZ4C,MAAOU,EAAIV,MACX0C,QAAS,EACTvH,YAAauF,EAAIvF,cAErB0H,MAAO,kBAAQ,CACXH,QAAS,EACTnI,EAAGmG,EAAInG,EACPiF,EAAGkB,EAAIlB,EACPrC,MAAOuD,EAAIvD,MACXC,OAAQsD,EAAItD,OACZ4C,MAAOU,EAAIV,QAEfsC,OAAQD,EACRS,WAAYvH,IAAAA,OAIZqG,EAAAA,EAAAA,KAAAA,EAAAA,SAAAA,CAAAA,SACKW,GAAW,SAACQ,EAAOrC,GAAAA,OAChBkB,EAAAA,EAAAA,KAACnB,EAAAA,CAEGC,IAAKA,EACLC,cAAeoC,EACfzH,cAAeA,EACfsF,QAASA,EACTC,QAASA,EACTC,aAAcA,EACdC,YAAaA,EACbC,aAAcA,GARTN,EAAI7D,WCpFhBmG,EAAa,gBAActC,EAAAA,EAAAA,IAAAA,OACpCkB,EAAAA,EAAAA,KAACqB,EAAAA,GAAAA,CACGjG,GAAO0D,EAAI9D,MAAMI,GAAAA,MAAQ0D,EAAI1D,GAC7BL,MAAO+D,EAAIX,eACXmD,YAAAA,EACAlD,MAAOU,EAAIV,SAAAA,EAAAA,CAAAA,gBAAAA,UAAAA,gBCSbmD,EAAiB,gBACnBpG,EAAAA,EAAAA,KACAC,EAAAA,EAAAA,GACAL,EAAAA,EAAAA,MACAM,EAAAA,EAAAA,YACAX,EAAAA,EAAAA,WACAa,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,OACQgG,EAAAA,EAARC,OAAAA,EAAAA,EACA5I,OAAAA,OAAAA,IAAAA,EAASD,EAAaC,OAAAA,EAAAA,EAAAA,EACtBC,OAAAA,OAAAA,IAAAA,EAASF,EAAaE,OAAAA,EAAAA,EAAAA,EACtBC,aAAAA,OAAAA,IAAAA,EAAeH,EAAaG,aAAAA,EAAAA,EAAAA,EAC5BC,aAAAA,OAAAA,IAAAA,EAAeJ,EAAaI,aAAAA,EAAAA,EAAAA,EAC5BC,OAAAA,OAAAA,IAAAA,EAASL,EAAaK,OAAAA,EACtByI,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,SAAAA,EAAAA,EACA3I,YAAAA,OAAAA,IAAAA,EAAcN,EAAaM,YAAAA,EAC3B4I,EAAAA,EAAAA,YAAAA,EAAAA,EACA3I,YAAAA,OAAAA,IAAAA,EAAcP,EAAaO,YAAAA,EAC3B4I,EAAAA,EAAAA,YAAAA,EAAAA,EACA3I,OAAAA,OAAAA,IAAAA,EAASR,EAAaQ,OAAAA,EAAAA,EAAAA,EAGtB4I,KAAAA,OAAAA,IAAAA,EAAO,SACP5B,KAAAA,OAAAA,IAAAA,EAAO,SACP9G,YAAAA,OAAAA,IAAAA,EAAcV,EAAaU,YAAAA,EAAAA,EAAAA,EAC3BC,YAAAA,OAAAA,IAAAA,EAAcX,EAAaW,YAAAA,EAAAA,EAAAA,EAC3BG,cAAAA,OAAAA,IAAAA,EAAgBd,EAAac,cAAAA,EAAAA,EAAAA,EAC7BsF,QAAAA,OAAAA,IAAAA,EAAUoC,EAAAA,EACVnC,EAAAA,EAAAA,QACAC,GAAAA,EAAAA,aACAC,GAAAA,EAAAA,YACAC,GAAAA,EAAAA,aAAAA,GAAAA,EACA6C,QAAAA,QAAAA,IAAAA,GAAU,MACVC,GAAAA,EAAAA,KAAAA,IAEqEC,EAAAA,EAAAA,IACjE5G,EACAC,EACAgG,GAHIY,GAAAA,GAAAA,WAAYC,GAAAA,GAAAA,YAAaZ,GAAAA,GAAAA,OAAQa,GAAAA,GAAAA,WAAYC,GAAAA,GAAAA,YAAAA,GAOjDrH,EAAuB,CACnBC,KAAAA,EACAC,GAAAA,EACAL,MAAAA,EACAL,WAAAA,EACAW,YAAAA,EACAxC,OAAAA,EACAC,OAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAI,OAAAA,EACAG,YAAAA,EACAD,YAAAA,EACAiC,MAAO+G,GACP9G,OAAQ+G,KAfRnF,GAAAA,GAAAA,aAAcmB,GAAAA,GAAAA,KAAM7B,GAAAA,GAAAA,eAAgBS,GAAAA,GAAAA,gBAAiB1C,GAAAA,GAAAA,aAkBvD+H,GAAwC,CAC1CC,KAAM,KACNC,KAAM,KACNnE,KAAM,KACN0D,QAAS,MAGPU,IAAYC,EAAAA,EAAAA,IAASZ,EAAMzD,GAAM6B,GAEnCnH,EAAO4J,SAAS,UAChBL,GAAUjE,MACNyB,EAAAA,EAAAA,KAACO,EAAAA,CAEGhC,KAAMA,GACN7E,cAAeA,EACfsF,QAASA,EACTC,QAASA,EACTC,aAAcA,GACdC,YAAaA,GACbC,aAAcA,IAPV,aAYV0D,GAAoB,aAAXjK,EAAwB6D,GAAiBS,GAClD4F,GAAoB,aAAXlK,EAAwBsE,GAAkBT,GAErDzD,EAAO4J,SAAS,UAChBL,GAAUC,MACNzC,EAAAA,EAAAA,KAACgD,EAAAA,GAAAA,CAEGF,OAAQ5J,EAAe4J,QAAAA,EACvBC,OAAQ5J,EAAe4J,QAAAA,EACvBxH,MAAO+G,GACP9G,OAAQ+G,GACRU,QAASnB,EACToB,QAASnB,GANL,SAWZ9I,EAAO4J,SAAS,UAChBL,GAAUE,MACN1C,EAAAA,EAAAA,KAACmD,EAAAA,GAAAA,CAEGL,OAAQA,GACRC,OAAQA,GACRxH,MAAO+G,GACP9G,OAAQ+G,GACRa,IAAK1B,EACL2B,MAAO1B,EACP2B,OAAQ1B,EACR2B,KAAM1B,GARF,aAaV2B,GJuPmB,SAAW/I,EAAwB8D,GAAAA,IACtDiF,EAKA,UAEN/I,EAAagB,SAAQ,gBACXqD,EAAMP,EAAKR,MAAK,mBAAOe,EAAI1D,KAAO4C,KACpCc,GACA0E,EAAW9H,KAAK,CACZN,GAAI4C,EACJyF,MAAOzF,EACPI,MAAOU,EAAIV,MACXgC,KAAMtB,EAAIsB,UAKfoD,EApBkB,CIvPkB/I,GAAc8D,IAErDtF,EAAO4J,SAAS,aAChBL,GAAUP,SACNjC,EAAAA,EAAAA,KAAAA,IAAAA,CAAAA,SACKiC,GAAQyB,KAAI,SAACC,EAAQC,GAAAA,OAClB5D,EAAAA,EAAAA,KAAC6D,EAAAA,GAAAA,EAAAA,GAEOF,EAAAA,CACJG,eAAgBxB,GAChByB,gBAAiBxB,GACjBpH,KAAMqI,KAJDI,OAHV,gBAcTI,GJgNqB,gBAC3B7I,EAAAA,EAAAA,KACAoD,EAAAA,EAAAA,KACA7B,EAAAA,EAAAA,eACAS,EAAAA,EAAAA,gBAAAA,OAOAxC,EAAAA,EAAAA,UACI,iBAAO,CACHQ,KAAAA,EACAoD,KAAAA,EACA7B,eAAAA,EACAS,gBAAAA,KAEJ,CAAChC,EAAMoD,EAAM7B,EAAgBS,IAlBN,CIhNoB,CAC3ChC,KAAMiC,GACNmB,KAAAA,GACA7B,eAAAA,GACAS,gBAAAA,KAAAA,OAIA6C,EAAAA,EAAAA,KAACiE,EAAAA,GAAAA,CACG1I,MAAO6G,GACP5G,OAAQ6G,GACRZ,OAAQA,GACRO,KAAMW,GACNT,KAAMA,GAAAA,SAELjJ,EAAOyK,KAAI,SAACQ,EAAON,GAAAA,YAAAA,IACZpB,GAAU0B,GACH1B,GAAU0B,GAGA,mBAAVA,GACAlE,EAAAA,EAAAA,KAACmE,EAAAA,SAAAA,CAAAA,UAAkBzE,EAAAA,EAAAA,eAAcwE,EAAOF,KAAzBJ,GAGnB,WAMVQ,EAAY,oBACrB1K,cAAAA,OAAAA,IAAAA,EAAgBd,EAAac,cAAAA,EAAAA,EAAAA,EAC7BC,QAAAA,OAAAA,IAAAA,EAAUf,EAAae,QAAAA,EAAAA,EAAAA,EACvBC,aAAAA,OAAAA,IAAAA,EAAehB,EAAagB,aAAAA,EACzByK,EAAAA,SAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAAAA,MAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,OAAAA,KAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,QAAAA,IAAAA,IAAAA,EAAAA,GAAAA,EAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,OAEHrE,EAAAA,EAAAA,KAACsE,EAAAA,GAAAA,CACG9F,MAAO6F,EAAW7F,MAClB9E,cAAeA,EACfC,QAASA,EACTC,aAAcA,EAAAA,UAEdoG,EAAAA,EAAAA,KAACuB,EAAAA,EAAAA,CACG7H,cAAeA,EACfC,QAASA,EACTC,aAAcA,GACVyK,OCpMHE,EAAsB,SAC/BC,GAAAA,OAEAxE,EAAAA,EAAAA,KAACyE,EAAAA,EAAAA,CAAAA,SACI,gBAAGlJ,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,OAAAA,OAAawE,EAAAA,EAAAA,KAACoE,EAAAA,EAAAA,CAAoB7I,MAAOA,EAAOC,OAAQA,GAAYgJ,S,oNCHjFE,EAAiBC,EAAAA,QAAAA,IAAAA,WAAH,kEAAGA,CAAH,yIASdC,EAAaD,EAAAA,QAAAA,KAAAA,WAAH,8DAAGA,CAAH,MACVE,EAAeF,EAAAA,QAAAA,KAAAA,WAAH,gEAAGA,CAAH,sBAIZG,EAAgB,SAAC,GAAD,IAAGhG,EAAH,EAAGA,IAAH,OAClB,UAAC4F,EAAD,CAAgBvD,MAAO,CAAE/C,MAAOU,EAAIV,OAApC,WACI,SAACwG,EAAD,wBACA,SAACC,EAAD,UAAe/F,EAAI9D,MAAMI,MACzB,SAACwJ,EAAD,kBACA,SAACC,EAAD,UAAe/F,EAAI1D,MACnB,SAACwJ,EAAD,qBACA,SAACC,EAAD,UAAe/F,EAAI/D,SACnB,SAAC6J,EAAD,qBACA,SAACC,EAAD,UAAe/F,EAAIV,SACnB,SAACwG,EAAD,yBACA,SAACC,EAAD,UAAe/F,EAAI9D,MAAM0C,gBAIjC,GAAeqH,EAAAA,EAAAA,IACX,CACI1J,YAAa2J,EAAAA,GACbtD,SAASuD,EAAAA,EAAAA,IAAQ,OACjBtD,WAAWsD,EAAAA,EAAAA,IAAQ,SACnBrD,YAAYqD,EAAAA,EAAAA,IAAQ,UACpBpD,UAAUoD,EAAAA,EAAAA,IAAQ,QAClBjG,QAAS,SAACjE,EAAOmK,GACb,GAAKA,EAAO,0BAEZ,OAAOJ,GAEX9C,KAAM,SAACjH,EAAOmK,GACV,GAAKA,EAAO,0BAEZ,MAAO,EACHC,EAAAA,EAAAA,IAAgB,QAAS,CACrBC,WAAY,mBACZhH,MAAO,UACPiH,UAAW,GACXC,UAAW,EACXC,QAAS,MAIrBnF,KAAM,SAACrF,EAAOmK,GACV,GAAKA,EAAO,0BAEZ,MAAO,CACH,CAAEM,MAAO,CAAEpK,GAAI,kBAAoBA,GAAI,SACvC,CAAEoK,MAAO,CAAEpK,GAAI,qBAAuBA,GAAI,YAItD,CACIqK,QAAS,CAAC,yBAA0B,4B,WC1DtCjB,EAAsB,CACxB,CACIvJ,IAAK,OACLyK,MAAO,OACPC,KAAM,yCACNC,YAAY,kLAKZC,KAAM,aACNC,UAAU,GAEd,CACI7K,IAAK,KACLyK,MAAO,OACPC,KAAM,eACNC,YAAY,oIAIZC,KAAM,8CACNC,UAAU,GAEd,CACI7K,IAAK,QACLyK,MAAO,OACPC,KAAM,kBACNC,YAAY,qMAKZC,KAAM,qCACNC,UAAU,GAEd,CACI7K,IAAK,aACLyK,MAAO,OACPC,KAAM,iCACNE,KAAM,8DACNC,UAAU,GAEd,CACI7K,IAAK,cACLyK,MAAO,OACPC,KAAM,iCACNC,YAAY,sWAOZE,UAAU,EACVD,KAAM,8CACNE,YAAa,eAEjB,CACI9K,IAAK,SACL0K,KAAK,uBACLE,KAAM,SACNC,UAAU,EACVE,aAAcC,EAAAA,GAAAA,OACdF,YAAa,QACbL,MAAO,OACPQ,eAAgB,CACZC,QAAS,CACL,CAAE1C,MAAO,aAAc1I,MAAO,cAC9B,CAAE0I,MAAO,WAAY1I,MAAO,eAIxC,CACIE,IAAK,SACL0K,KAAM,eACNE,KAAM,WACNC,UAAU,EACVC,YAAa,UACbL,MAAO,OACPM,aAAcC,EAAAA,GAAAA,OACdC,eAAgB,CACZC,QAASC,OAAOtL,KAAKjB,EAAAA,IAAY6J,KAAI,SAAAzI,GAAG,MAAK,CACzCwI,MAAOxI,EACPF,MAAOE,QAInB,CACIA,IAAK,eACL0K,KAAM,qDACNE,KAAM,SACNC,UAAU,EACVE,aAAcC,EAAAA,GAAAA,aACdF,YAAa,QACbL,MAAO,OACPQ,eAAgB,CACZlK,IAAK,EACLE,IAAK,GACLmK,KAAM,OAGd,CACIpL,IAAK,eACL0K,KAAM,sBACNE,KAAM,SACNC,UAAU,EACVE,aAAcC,EAAAA,GAAAA,aACdF,YAAa,QACbL,MAAO,OACPQ,eAAgB,CACZlK,IAAK,EACLE,IAAK,GACLmK,KAAM,OAGd,CACIpL,IAAK,QACLqL,wBAAyB,CAAC,OAC1BX,KAAM,eACNC,YAAY,wFAIZC,KAAM,SACNC,UAAU,EACVC,YAAa,QACbL,MAAO,OACPQ,eAAgB,CACZG,KAAM,KACNrK,IAAK,IACLE,IAAK,IACLqK,KAAM,IAGd,CACItL,IAAK,SACLqL,wBAAyB,CAAC,OAC1BX,KAAM,gBACNC,YAAY,wFAIZC,KAAM,SACNC,UAAU,EACVC,YAAa,QACbL,MAAO,OACPQ,eAAgB,CACZG,KAAM,KACNrK,IAAK,IACLE,IAAK,IACLqK,KAAM,IAGd,CACItL,IAAK,SACLyK,MAAO,OACPG,KAAM,SACNC,UAAU,EACVH,KAAM,gBACNa,QAAS,CAAC,MAAO,OACjBT,YAAa,WAEjBU,EAAAA,EAAAA,IAAc,CAAC,MAAO,QACtB,CACIxL,IAAK,SACLyK,MAAO,QACPG,KAAM,+BACNC,UAAU,EACVH,KAAM,uBACNK,aAAcC,EAAAA,GAAAA,OACdO,QAAS,CAAC,MAAO,OACjBT,YAAa,kBA5KO,QA8KrBW,EAAAA,EAAAA,IAAe,QAAS,CAAC,MAAO,QA9KX,CA+KxB,CACIzL,IAAK,yBACLuL,QAAS,CAAC,OACVb,KAAM,YACNC,YAAY,iMAMZC,KAAM,UACNE,YAAa,SACbL,MAAO,SAEX,CACIzK,IAAK,cACL0K,KAAM,uBACNE,KAAM,SACNC,UAAU,EACVE,aAAcC,EAAAA,GAAAA,YACdF,YAAa,YACbL,MAAO,SAEX,CACIzK,IAAK,cACL0K,KAAM,kCACNE,KAAM,6BACNC,UAAU,EACVE,aAAcC,EAAAA,GAAAA,YACdF,YAAa,iBACbL,MAAO,WAERiB,EAAAA,EAAAA,MA/MqB,CAgNxB,CACI1L,IAAK,cACL0K,KAAM,yBACNE,KAAM,UACNC,UAAU,EACVE,aAAcC,EAAAA,GAAAA,YACdF,YAAa,SACbL,MAAO,eAEX,CACIzK,IAAK,cACLyK,MAAO,cACPC,KAAM,iDACNE,KAAM,WACNC,UAAU,GAEd,CACI7K,IAAK,cACL0K,KAAM,yBACNE,KAAM,UACNC,UAAU,EACVE,aAAcC,EAAAA,GAAAA,YACdF,YAAa,SACbL,MAAO,eAEX,CACIzK,IAAK,cACLyK,MAAO,cACPC,KAAM,mDACNE,KAAM,WACNC,UAAU,GAEd,CACI7K,IAAK,SACLyK,MAAO,gBACPC,KAAM,qDACNC,YAAY,osBAmBZE,UAAU,EACVD,KAAM,2BACNG,aAAcC,EAAAA,GAAAA,QAElB,CACIhL,IAAK,gBACLuL,QAAS,CAAC,OACVd,MAAO,gBACPC,KAAM,gCACNE,KAAM,UACNC,UAAU,EACVE,aAAcC,EAAAA,GAAAA,cACdF,YAAa,UAEjB,CACI9K,IAAK,UACLuL,QAAS,CAAC,OACVd,MAAO,gBACPC,KAAM,gEACNE,KAAM,uDACNC,UAAU,GAEd,CACI7K,IAAK,eACLuL,QAAS,CAAC,OACVd,MAAO,gBACPC,KAAM,qEACNE,KAAM,uDACNC,UAAU,GAEd,CACI7K,IAAK,cACLuL,QAAS,CAAC,OACVd,MAAO,gBACPC,KAAM,oEACNE,KAAM,uDACNC,UAAU,GAEd,CACI7K,IAAK,eACLuL,QAAS,CAAC,OACVd,MAAO,gBACPC,KAAM,qEACNE,KAAM,uDACNC,UAAU,GAEd,CACI7K,IAAK,UACLyK,MAAO,gBACPG,KAAM,YACNC,UAAU,EACVH,KAAM,2BACNC,YAAY,oaAehB,CACI3K,IAAK,yBACL0K,KAAM,2BACNE,KAAM,UACNE,YAAa,SACbL,MAAO,mBAERkB,EAAAA,EAAAA,IAAiB,CAAC,OAAQX,EAAAA,GAAU,gBAjVf,CAkVxB,CACIhL,IAAK,UACLuL,QAAS,CAAC,OACVX,KAAM,WACNF,KAAK,4BACLD,MAAO,UACPK,YAAa,QACbG,eAAgB,CACZ1B,OAAOqC,EAAAA,EAAAA,IAAgB,CAAC,QACxBC,cAAc,EACdC,SAAU,aACVC,cAAc,EACdC,aAAc,SAAC1K,EAAOoH,GAAR,gBACApH,EADA,MACWoH,EAAOuD,OADlB,KAC6BvD,EAAOwD,WAClDlB,SAAU,CACNiB,OAAQ,WACRC,UAAW,SACXC,SAAS,EACTC,WAAY,EACZC,WAAY,EACZC,UAAW,IACXC,WAAY,GACZC,aAAc,EACdC,WAAY,GACZC,cAAe,gBACf1I,QAAS,SAAA9D,GACLyM,MAAMC,KAAKC,UAAU3M,EAAM,KAAM,eAOxC4M,GAASC,EAAAA,EAAAA,IAAgBxD,G,gNCtXtC,IAAMyD,EAAiB,kBAAM,IAAO,EAAG,KAEjCC,EAAe,iBACjB,CAAC,YAAD,0BAA0C,eAAgB,gBAAgBxE,KAAI,SAAAyE,GAAS,MAAK,CACxFA,UAAAA,EACAC,cAAeH,IACfI,cAAeJ,IACfK,MAAOL,IACPM,SAAUN,IACVO,iBAAkBP,SAGpBQ,EAAoB,CACtBrN,GAAI,YACJL,MAAO,gBACPL,WAAY,CACR,CACIU,GAAI,oBACJL,MAAO,oBAEX,CACIK,GAAI,WACJL,MAAO,YAEX,CACIK,GAAI,QACJL,MAAO,SAEX,CACIK,GAAI,iBACJL,MAAO,kBAGflC,OAAQD,EAAAA,GAAAA,OACRE,OAAQF,EAAAA,GAAAA,OACRG,aAAcH,EAAAA,GAAAA,aACdI,aAAc,EAEd0I,QAAS,CACLgH,QAAQ,EACRC,OAAQ,MACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdnF,OAAQ,GACRoF,aAAc,IAElBpH,UAAW,CACP+G,QAAQ,EACRC,OAAQ,QACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdnF,OAAQ,GACRoF,aAAc,GAElBnH,WAAY,CACR8G,QAAQ,EACRC,OAAQ,SACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdnF,OAAQ,gBACRoF,aAAc,GACdC,eAAgB,UAEpBnH,SAAU,CACN6G,QAAQ,EACRC,OAAQ,OACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdnF,OAAQ,WACRoF,cAAe,GACfC,eAAgB,UAEpB9P,YAAaN,EAAAA,GAAAA,YACbO,YAAaP,EAAAA,GAAAA,YAEb6I,OAAQ,CACJ2B,IAAK,GACLC,MAAO,GACPC,OAAQ,IACRC,KAAM,IAGVlI,YAAa,CAAE4N,OAAQ,GAAIC,SAAS,GAEpC9P,OAAQ,CAAEC,OAAQ,YAElBC,YAAa,EACbC,YAAa,CACTC,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU,MAG3BC,eAAe,EACf,0BAA0B,EAC1BsF,QAAS,KACT,0BAA0B,EAE1BgD,KAAM,GACN5B,KAAM,GAENzG,QAASf,EAAAA,GAAAA,QACTgB,aAAchB,EAAAA,GAAAA,aAEdqJ,QAAS,CACL,CACIiF,OAAQ,SACRC,UAAW,MACXC,SAAS,EACTC,WAAY,EACZC,WAAY,GACZG,aAAc,EACdF,UAAW,IACXC,WAAY,GACZ2B,cAAe,OACfxB,cAAe,gBACfyB,YAAa,EACb1B,WAAY,GACZ2B,YAAa,SACbC,QAAS,CACL,CACIC,GAAI,QACJpI,MAAO,CACHgI,cAAe,aAoDvC,EA5CkB,WACd,OACI,SAACK,EAAA,EAAD,CACIC,KAAK,YACLC,KAAMA,EAAAA,EACNC,KAAK,YACLnD,QAASkD,EAAAA,EACTE,cAAc,MACdC,WAAY9B,EACZU,kBAAmBA,EACnBqB,kBAAmBlR,EAAAA,GACnBmR,iBAAkBC,EAClB9B,aAAcA,EAVlB,SAYK,SAAC2B,EAAY1O,EAAMqD,EAAOyL,GAcvB,OACI,SAAC,KAAD,GACI9O,KAAMA,GACF0O,EAFR,CAGIrL,MAAOA,EACPS,QAlBY,SAAAH,GAChBmL,EAAU,CACNpE,KAAM,QACNpC,MAAM,SAAU3E,EAAI9D,MAAMI,GAArB,MAA6B0D,EAAI1D,GAAjC,KAAwC0D,EAAI/D,MACjDqD,MAAOU,EAAIV,MAEXjD,KAAK,EAAD,GACG,IAAK2D,EAAK,CAAC,UADd,CAEA9D,MAAO,IAAK8D,EAAI9D,MAAO,CAAC,oBAW5BiH,QAAS4H,EAAW5H,QAAQyB,KAAI,SAAAC,GAAM,YAC/BA,c,kBChL/B,IAAIuG,EAAcjO,KAAKkO,MACnBC,EAAenO,KAAKoO,OAexBC,EAAOC,QAJP,SAAoBC,EAAOC,GACzB,OAAOD,EAAQN,EAAYE,KAAkBK,EAAQD,EAAQ,M,sBCd/D,IAAIE,EAAa,EAAQ,OACrBC,EAAiB,EAAQ,OACzBC,EAAW,EAAQ,OAGnBC,EAAiBC,WAGjBC,EAAY9O,KAAKD,IACjBoO,EAAenO,KAAKoO,OAwExBC,EAAOC,QAvCP,SAAgBC,EAAOC,EAAOO,GA2B5B,GA1BIA,GAA+B,kBAAZA,GAAyBL,EAAeH,EAAOC,EAAOO,KAC3EP,EAAQO,OAAWC,QAEJA,IAAbD,IACkB,kBAATP,GACTO,EAAWP,EACXA,OAAQQ,GAEe,kBAATT,IACdQ,EAAWR,EACXA,OAAQS,SAGEA,IAAVT,QAAiCS,IAAVR,GACzBD,EAAQ,EACRC,EAAQ,IAGRD,EAAQI,EAASJ,QACHS,IAAVR,GACFA,EAAQD,EACRA,EAAQ,GAERC,EAAQG,EAASH,IAGjBD,EAAQC,EAAO,CACjB,IAAIS,EAAOV,EACXA,EAAQC,EACRA,EAAQS,EAEV,GAAIF,GAAYR,EAAQ,GAAKC,EAAQ,EAAG,CACtC,IAAIU,EAAOf,IACX,OAAOW,EAAUP,EAASW,GAAQV,EAAQD,EAAQK,EAAe,QAAUM,EAAO,IAAIlO,OAAS,KAAOwN,GAExG,OAAOC,EAAWF,EAAOC","sources":["webpack://nivo-website/../node_modules/d3-shape/src/constant.js","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../src/types.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/Bar.tsx","webpack://nivo-website/../src/Bars.tsx","webpack://nivo-website/../src/BarTooltip.tsx","webpack://nivo-website/../src/Marimekko.tsx","webpack://nivo-website/../src/ResponsiveMarimekko.tsx","webpack://nivo-website/./src/data/components/marimekko/mapper.js","webpack://nivo-website/./src/data/components/marimekko/props.ts","webpack://nivo-website/./src/pages/marimekko/index.js","webpack://nivo-website/../node_modules/lodash/_baseRandom.js","webpack://nivo-website/../node_modules/lodash/random.js"],"sourcesContent":["export default function (x) {\n  return function constant() {\n    return x;\n  };\n}","import { LayerId, Layout, OffsetId } from './types'\n\nexport const defaultProps = {\n    layout: 'vertical' as Layout,\n    offset: 'none' as OffsetId,\n    outerPadding: 0,\n    innerPadding: 3,\n\n    layers: ['grid', 'axes', 'bars', 'legends'] as LayerId[],\n\n    enableGridX: false,\n    enableGridY: true,\n\n    colors: { scheme: 'nivo' },\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import * as React from 'react'\nimport {\n    stackOffsetDiverging,\n    stackOffsetExpand,\n    stackOffsetNone,\n    stackOffsetSilhouette,\n    stackOffsetWiggle,\n} from 'd3-shape'\nimport { ScaleLinear } from 'd3-scale'\nimport { Box, Dimensions, Theme, SvgDefsAndFill, ModernMotionProps, ValueFormat } from '@nivo/core'\nimport { AxisProps } from '@nivo/axes'\nimport { OrdinalColorScaleConfig, InheritedColorConfig } from '@nivo/colors'\nimport { LegendProps } from '@nivo/legends'\n\nexport type DatumId = string | number\nexport type DatumValue = number\nexport type DatumFormattedValue = string | number\n\nexport type DatumPropertyAccessor<RawDatum, T> = (datum: RawDatum) => T\n\nexport interface DataProps<RawDatum> {\n    data: RawDatum[]\n    id: string | number | DatumPropertyAccessor<RawDatum, DatumId>\n    value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    dimensions: {\n        id: string\n        value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    }[]\n    valueFormat?: ValueFormat<number>\n}\n\nexport interface NormalizedDatum<RawDatum> {\n    index: number\n    id: DatumId\n    value: DatumValue\n    data: RawDatum\n}\n\nexport interface DimensionDatum<RawDatum> {\n    id: string\n    value: number\n    formattedValue: string | number\n    color: string\n    x: number\n    y: number\n    width: number\n    height: number\n    datum: ComputedDatum<RawDatum>\n}\n\nexport interface ComputedDatum<RawDatum> extends NormalizedDatum<RawDatum> {\n    x: number\n    y: number\n    width: number\n    height: number\n    dimensions: DimensionDatum<RawDatum>[]\n}\n\nexport interface BarDatum<RawDatum> extends DimensionDatum<RawDatum> {\n    key: string\n    fill?: string\n    borderColor: string\n    borderWidth: number\n}\n\nexport type LabelAccessorFunction<RawDatum> = (datum: ComputedDatum<RawDatum>) => string | number\n\nexport type LayerId = 'grid' | 'axes' | 'bars' | 'legends'\n\nexport interface CustomLayerProps<RawDatum> {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n}\n\nexport type CustomLayer<RawDatum> = React.FC<CustomLayerProps<RawDatum>>\n\nexport type Layer<RawDatum> = LayerId | CustomLayer<RawDatum>\n\nexport interface TooltipProps<RawDatum> {\n    bar: BarDatum<RawDatum>\n}\n\nexport type BarTooltipType<RawDatum> = (props: TooltipProps<RawDatum>) => JSX.Element\n\nexport type Layout = 'horizontal' | 'vertical'\n\nexport const offsetById = {\n    // Applies a zero baseline and normalizes the values\n    // for each point such that the topline is always one.\n    expand: stackOffsetExpand,\n    // Positive values are stacked above zero, negative values\n    // are stacked below zero, and zero values are stacked at zero.\n    diverging: stackOffsetDiverging,\n    // Applies a zero baseline.\n    none: stackOffsetNone,\n    // Shifts the baseline down such that the center of the streamgraph\n    // is always at zero.\n    silouhette: stackOffsetSilhouette,\n    // Shifts the baseline so as to minimize the weighted wiggle of layers.\n    // This offset is recommended for streamgraphs in conjunction with the inside-out order.\n    // See Stacked Graphs—Geometry & Aesthetics by Bryon & Wattenberg for more information.\n    wiggle: stackOffsetWiggle,\n}\n\nexport type OffsetId = keyof typeof offsetById\n\nexport type CommonProps<RawDatum> = {\n    margin: Box\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n\n    // axes and grid\n    axisTop?: AxisProps | null\n    axisRight?: AxisProps | null\n    axisBottom?: AxisProps | null\n    axisLeft?: AxisProps | null\n    enableGridX: boolean\n    gridXValues?: number[]\n    enableGridY: boolean\n    gridYValues?: number[]\n\n    // colors, theme and border\n    colors: OrdinalColorScaleConfig<Omit<DimensionDatum<RawDatum>, 'color' | 'fill'>>\n    theme: Theme\n    borderWidth: number\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // labels\n    enableLabels: boolean\n    label: string | LabelAccessorFunction<RawDatum>\n    labelSkipWidth: number\n    labelSkipHeight: number\n    labelTextColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // interactivity\n    isInteractive: boolean\n    tooltip: BarTooltipType<RawDatum>\n\n    legends: LegendProps[]\n\n    role: string\n}\n\nexport type MouseEventHandler<RawDatum, ElementType> = (\n    datum: BarDatum<RawDatum>,\n    event: React.MouseEvent<ElementType>\n) => void\n\nexport type MouseEventHandlers<RawDatum, ElementType> = Partial<{\n    onClick: MouseEventHandler<RawDatum, ElementType>\n    onMouseEnter: MouseEventHandler<RawDatum, ElementType>\n    onMouseMove: MouseEventHandler<RawDatum, ElementType>\n    onMouseLeave: MouseEventHandler<RawDatum, ElementType>\n}>\n\nexport type SvgProps<RawDatum> = DataProps<RawDatum> &\n    Dimensions &\n    Partial<CommonProps<RawDatum>> &\n    ModernMotionProps &\n    SvgDefsAndFill<BarDatum<RawDatum>> &\n    MouseEventHandlers<RawDatum, SVGRectElement> & {\n        layers?: Layer<RawDatum>[]\n    }\n","import { useMemo } from 'react'\nimport { get } from 'lodash'\nimport { stack as d3Stack, Stack, Series } from 'd3-shape'\nimport { ScaleLinear, scaleLinear } from 'd3-scale'\nimport { useValueFormatter, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport {\n    NormalizedDatum,\n    ComputedDatum,\n    DataProps,\n    DatumPropertyAccessor,\n    Layout,\n    DimensionDatum,\n    CommonProps,\n    CustomLayerProps,\n    BarDatum,\n    OffsetId,\n    offsetById,\n} from './types'\n\n// d3 stack does not support defining `.keys()` using\n// a mix of keys and custom value accessors, so we're\n// building a map of accessors in any case, we're gonna\n// use it later for `stack.value()`.\nexport const useDataDimensions = <RawDatum>(rawDimensions: DataProps<RawDatum>['dimensions']) =>\n    useMemo(() => {\n        const dimensions: Record<string, (datum: RawDatum) => number> = {}\n        const dimensionIds: string[] = []\n        rawDimensions.forEach(dimension => {\n            dimensionIds.push(dimension.id)\n            dimensions[dimension.id] =\n                typeof dimension.value === 'function'\n                    ? dimension.value\n                    : (datum: RawDatum) => get(datum, dimension.value as string, 0)\n        })\n\n        return { dimensionIds, dimensions }\n    }, [rawDimensions])\n\nexport const useStack = <RawDatum>(\n    dimensionIds: string[],\n    dimensions: Record<string, (datum: RawDatum) => number>,\n    offset: OffsetId\n) =>\n    useMemo(() => {\n        const offsetFunction = offsetById[offset]\n\n        return d3Stack<RawDatum>()\n            .keys(dimensionIds)\n            .value((datum, key) => dimensions[key](datum))\n            .offset(offsetFunction)\n    }, [dimensionIds, dimensions, offset])\n\nexport const useStackedData = <RawDatum>(\n    stack: Stack<any, RawDatum, string>,\n    data: DataProps<RawDatum>['data']\n) =>\n    useMemo(() => {\n        const stacked = stack(data)\n\n        const allValues: number[] = []\n        stacked.forEach(dimension => {\n            dimension.forEach(datum => {\n                allValues.push(datum[0])\n                allValues.push(datum[1])\n            })\n        })\n\n        const min = Math.min(...allValues)\n        const max = Math.max(...allValues)\n\n        return {\n            stacked,\n            min,\n            max,\n        }\n    }, [stack, data])\n\nexport const useDimensionsScale = (\n    min: number,\n    max: number,\n    width: number,\n    height: number,\n    layout: Layout\n) =>\n    useMemo(() => {\n        if (layout === 'vertical') {\n            return scaleLinear().domain([max, min]).range([0, height])\n        }\n\n        return scaleLinear().domain([min, max]).range([0, width])\n    }, [min, max, width, height, layout])\n\nexport const useNormalizedData = <RawDatum>(\n    data: DataProps<RawDatum>['data'],\n    id: DataProps<RawDatum>['id'],\n    value: DataProps<RawDatum>['value']\n) => {\n    const getId: DatumPropertyAccessor<RawDatum, string | number> =\n        typeof id === 'function' ? id : (datum: RawDatum) => get(datum, id)\n    const getValue: DatumPropertyAccessor<RawDatum, number> =\n        typeof value === 'function' ? value : (datum: RawDatum) => get(datum, value, 0)\n\n    return useMemo(() => {\n        const normalized: NormalizedDatum<RawDatum>[] = []\n        data.forEach((datum, index) => {\n            const datumId = getId(datum)\n            const datumValue = getValue(datum)\n\n            normalized.push({\n                index,\n                id: datumId,\n                value: datumValue,\n                data: datum,\n            })\n        })\n\n        return normalized\n    }, [data, getId, getValue])\n}\n\nexport const useThicknessScale = <RawDatum>({\n    data,\n    width,\n    height,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    width: number\n    height: number\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) =>\n    useMemo(() => {\n        const totalValue = data.reduce((acc, datum) => acc + datum.value, 0)\n\n        const thicknessScale = scaleLinear().domain([0, totalValue])\n\n        const totalPadding = 2 * outerPadding + (data.length - 1) * innerPadding\n\n        if (layout === 'vertical') {\n            thicknessScale.range([0, width - totalPadding])\n        } else {\n            thicknessScale.range([0, height - totalPadding])\n        }\n\n        return thicknessScale\n    }, [data, width, height, layout])\n\nexport const useComputedData = <RawDatum>({\n    data,\n    stacked,\n    dimensionIds,\n    valueFormat,\n    thicknessScale,\n    dimensionsScale,\n    colors,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    stacked: Series<RawDatum, string>[]\n    dimensionIds: string[]\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n    colors: CommonProps<RawDatum>['colors']\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) => {\n    const getColor = useOrdinalColorScale<Omit<DimensionDatum<RawDatum>, 'color'>>(colors, 'id')\n\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    return useMemo(() => {\n        const computedData: ComputedDatum<RawDatum>[] = []\n\n        let position = outerPadding\n\n        data.forEach(datum => {\n            const thickness = thicknessScale(datum.value)\n\n            const computedDatum: ComputedDatum<RawDatum> = {\n                ...datum,\n                x: layout === 'vertical' ? position : 0,\n                y: layout === 'vertical' ? 0 : position,\n                width: layout === 'vertical' ? thickness : 0,\n                height: layout === 'vertical' ? 0 : thickness,\n                dimensions: [],\n            }\n\n            const allPositions: number[] = []\n            let totalSize = 0\n\n            position += thickness + innerPadding\n\n            dimensionIds.forEach(dimensionId => {\n                const dimension = stacked.find(stack => stack.key === dimensionId)\n                if (dimension) {\n                    const dimensionPoint = dimension[datum.index]\n                    const dimensionDatum: DimensionDatum<RawDatum> = {\n                        id: dimensionId,\n                        datum: computedDatum,\n                        value: dimensionPoint[1] - dimensionPoint[0],\n                        formattedValue: formatValue(dimensionPoint[1] - dimensionPoint[0]),\n                        color: 'rgba(0, 0, 0, 0)',\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    }\n\n                    const position0 = dimensionsScale(dimensionPoint[0])\n                    const position1 = dimensionsScale(dimensionPoint[1])\n\n                    if (layout === 'vertical') {\n                        dimensionDatum.x = computedDatum.x\n                        dimensionDatum.y = Math.min(position0, position1)\n                        dimensionDatum.width = computedDatum.width\n                        dimensionDatum.height = Math.max(position0, position1) - dimensionDatum.y\n\n                        allPositions.push(dimensionDatum.y)\n                        totalSize += dimensionDatum.height\n                    } else {\n                        dimensionDatum.x = Math.min(position0, position1)\n                        dimensionDatum.y = computedDatum.y\n                        dimensionDatum.width = Math.max(position0, position1) - dimensionDatum.x\n                        dimensionDatum.height = computedDatum.height\n\n                        allPositions.push(dimensionDatum.x)\n                        totalSize += dimensionDatum.width\n                    }\n\n                    dimensionDatum.color = getColor(dimensionDatum)\n\n                    computedDatum.dimensions.push(dimensionDatum)\n                }\n\n                if (layout === 'vertical') {\n                    computedDatum.y = Math.min(...allPositions)\n                    computedDatum.height = totalSize\n                } else {\n                    computedDatum.x = Math.min(...allPositions)\n                    computedDatum.width = totalSize\n                }\n            })\n\n            computedData.push(computedDatum)\n        })\n\n        return computedData\n    }, [\n        data,\n        stacked,\n        dimensionIds,\n        thicknessScale,\n        dimensionsScale,\n        layout,\n        outerPadding,\n        innerPadding,\n        getColor,\n        formatValue,\n    ])\n}\n\nexport const useBars = <RawDatum>(\n    data: ComputedDatum<RawDatum>[],\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>,\n    borderWidth: number\n) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<DimensionDatum<RawDatum>>(borderColor, theme)\n\n    return useMemo(() => {\n        const all: BarDatum<RawDatum>[] = []\n        data.forEach(datum => {\n            datum.dimensions.forEach(dimension => {\n                all.push({\n                    key: `${datum.id}-${dimension.id}`,\n                    ...dimension,\n                    borderColor: getBorderColor(dimension),\n                    borderWidth,\n                })\n            })\n        })\n\n        return all\n    }, [data, borderWidth, getBorderColor])\n}\n\nexport const useMarimekko = <RawDatum>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions: rawDimensions,\n    layout,\n    offset,\n    outerPadding,\n    innerPadding,\n    colors,\n    borderColor,\n    borderWidth,\n    width,\n    height,\n}: {\n    data: DataProps<RawDatum>['data']\n    id: DataProps<RawDatum>['id']\n    value: DataProps<RawDatum>['value']\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    dimensions: DataProps<RawDatum>['dimensions']\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n    colors: CommonProps<RawDatum>['colors']\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n    borderWidth: number\n    width: number\n    height: number\n}) => {\n    const { dimensionIds, dimensions } = useDataDimensions<RawDatum>(rawDimensions)\n    const stack = useStack<RawDatum>(dimensionIds, dimensions, offset)\n    const { stacked, min, max } = useStackedData<RawDatum>(stack, data)\n    const normalizedData = useNormalizedData<RawDatum>(data, id, value)\n    const thicknessScale = useThicknessScale({\n        data: normalizedData,\n        width,\n        height,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const dimensionsScale = useDimensionsScale(min, max, width, height, layout)\n    const computedData = useComputedData<RawDatum>({\n        data: normalizedData,\n        stacked,\n        dimensionIds,\n        valueFormat,\n        thicknessScale,\n        dimensionsScale,\n        colors,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const bars = useBars<RawDatum>(computedData, borderColor, borderWidth)\n\n    return {\n        computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n        dimensionIds,\n    }\n}\n\nexport const useLayerContext = <RawDatum>({\n    data,\n    bars,\n    thicknessScale,\n    dimensionsScale,\n}: {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n}): CustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            data,\n            bars,\n            thicknessScale,\n            dimensionsScale,\n        }),\n        [data, bars, thicknessScale, dimensionsScale]\n    )\n\nexport const useLegendData = <RawDatum>(dimensionIds: string[], bars: BarDatum<RawDatum>[]) => {\n    const legendData: {\n        id: string\n        label: string\n        color: string\n        fill?: string\n    }[] = []\n\n    dimensionIds.forEach(dimensionId => {\n        const bar = bars.find(bar => bar.id === dimensionId)\n        if (bar) {\n            legendData.push({\n                id: dimensionId,\n                label: dimensionId,\n                color: bar.color,\n                fill: bar.fill,\n            })\n        }\n    })\n\n    return legendData\n}\n","import { createElement, MouseEvent, useCallback } from 'react'\nimport { animated, SpringValues, to } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\n\ninterface BarProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    bar: BarDatum<RawDatum>\n    animatedProps: SpringValues<{\n        x: number\n        y: number\n        width: number\n        height: number\n        opacity: number\n        color: string\n        borderColor: string\n    }>\n    isInteractive: boolean\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bar = <RawDatum,>({\n    bar,\n    animatedProps,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        event => showTooltipFromEvent(createElement(tooltip, { bar }), event),\n        [showTooltipFromEvent, tooltip, bar]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.(bar, event)\n        },\n        [onClick, bar]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseMove?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(bar, event)\n            hideTooltip()\n        },\n        [onMouseLeave, bar, hideTooltip]\n    )\n\n    return (\n        <animated.rect\n            x={animatedProps.x}\n            y={animatedProps.y}\n            width={to(animatedProps.width, value => Math.max(value, 0))}\n            height={to(animatedProps.height, value => Math.max(value, 0))}\n            fill={bar.fill ?? animatedProps.color}\n            stroke={animatedProps.borderColor}\n            strokeWidth={bar.borderWidth}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\nimport { Bar } from './Bar'\n\ninterface BarsProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    isInteractive: boolean\n    bars: BarDatum<RawDatum>[]\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bars = <RawDatum,>({\n    bars,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarsProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<\n        BarDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            width: number\n            height: number\n            color: string\n            opacity: number\n            borderColor: string\n        }\n    >(bars, {\n        keys: bar => bar.key,\n        initial: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        from: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 0,\n            borderColor: bar.borderColor,\n        }),\n        enter: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        update: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        leave: bar => ({\n            opacity: 0,\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, bar) => (\n                <Bar<RawDatum>\n                    key={bar.key}\n                    bar={bar}\n                    animatedProps={style}\n                    isInteractive={isInteractive}\n                    tooltip={tooltip}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                />\n            ))}\n        </>\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BarDatum } from './types'\n\nexport const BarTooltip = <RawDatum,>({ bar }: { bar: BarDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={`${bar.datum.id} - ${bar.id}`}\n        value={bar.formattedValue}\n        enableChip={true}\n        color={bar.color}\n    />\n)\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { SvgProps, LayerId, DimensionDatum } from './types'\nimport { defaultProps } from './props'\nimport { useMarimekko, useLayerContext, useLegendData } from './hooks'\nimport { Bars } from './Bars'\nimport { BarTooltip } from './BarTooltip'\n\nconst InnerMarimekko = <RawDatum,>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions,\n    width,\n    height,\n    margin: partialMargin,\n    layout = defaultProps.layout,\n    offset = defaultProps.offset,\n    outerPadding = defaultProps.outerPadding,\n    innerPadding = defaultProps.innerPadding,\n    layers = defaultProps.layers,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<DimensionDatum<RawDatum>, 'color'>\n    >,\n    defs = [],\n    fill = [],\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<DimensionDatum<RawDatum>>,\n    isInteractive = defaultProps.isInteractive,\n    tooltip = BarTooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    legends = [],\n    role,\n}: SvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { computedData, bars, thicknessScale, dimensionsScale, dimensionIds } =\n        useMarimekko<RawDatum>({\n            data,\n            id,\n            value,\n            dimensions,\n            valueFormat,\n            layout,\n            offset,\n            outerPadding,\n            innerPadding,\n            colors,\n            borderColor,\n            borderWidth,\n            width: innerWidth,\n            height: innerHeight,\n        })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        bars: null,\n        legends: null,\n    }\n\n    const boundDefs = bindDefs(defs, bars, fill)\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Bars<RawDatum>\n                key=\"bars\"\n                bars={bars}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n            />\n        )\n    }\n\n    const xScale = layout === 'vertical' ? thicknessScale : dimensionsScale\n    const yScale = layout === 'vertical' ? dimensionsScale : thicknessScale\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                xScale={enableGridX ? (xScale as any) : undefined}\n                yScale={enableGridY ? (yScale as any) : undefined}\n                width={innerWidth}\n                height={innerHeight}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    const legendData = useLegendData<RawDatum>(dimensionIds, bars)\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <g key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    const layerContext = useLayerContext<RawDatum>({\n        data: computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as LayerId] !== undefined) {\n                    return layerById[layer as LayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Marimekko = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    ...otherProps\n}: SvgProps<RawDatum>) => (\n    <Container\n        theme={otherProps.theme}\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n    >\n        <InnerMarimekko<RawDatum>\n            isInteractive={isInteractive}\n            animate={animate}\n            motionConfig={motionConfig}\n            {...otherProps}\n        />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Marimekko } from './Marimekko'\nimport { SvgProps } from './types'\n\nexport const ResponsiveMarimekko = <RawDatum,>(\n    props: Omit<SvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Marimekko<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { patternDotsDef, patternLinesDef } from '@nivo/core'\nimport { mapAxis, mapFormat, settingsMapper } from '../../../lib/settings'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 12px;\n    background: #333;\n    padding: 12px 16px;\n    font-size: 12px;\n    border-radius: 2px;\n`\nconst TooltipKey = styled.span``\nconst TooltipValue = styled.span`\n    font-weight: 600;\n`\n\nconst CustomTooltip = ({ bar }) => (\n    <TooltipWrapper style={{ color: bar.color }}>\n        <TooltipKey>datum.id</TooltipKey>\n        <TooltipValue>{bar.datum.id}</TooltipValue>\n        <TooltipKey>id</TooltipKey>\n        <TooltipValue>{bar.id}</TooltipValue>\n        <TooltipKey>value</TooltipKey>\n        <TooltipValue>{bar.value}</TooltipValue>\n        <TooltipKey>color</TooltipKey>\n        <TooltipValue>{bar.color}</TooltipValue>\n        <TooltipKey>thickness</TooltipKey>\n        <TooltipValue>{bar.datum.thickness}</TooltipValue>\n    </TooltipWrapper>\n)\n\nexport default settingsMapper(\n    {\n        valueFormat: mapFormat,\n        axisTop: mapAxis('top'),\n        axisRight: mapAxis('right'),\n        axisBottom: mapAxis('bottom'),\n        axisLeft: mapAxis('left'),\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return undefined\n\n            return CustomTooltip\n        },\n        defs: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                patternLinesDef('lines', {\n                    background: 'rgba(0, 0, 0, 0)',\n                    color: 'inherit',\n                    rotation: -45,\n                    lineWidth: 4,\n                    spacing: 8,\n                }),\n            ]\n        },\n        fill: (value, values) => {\n            if (!values['showcase pattern usage']) return\n\n            return [\n                { match: { id: 'agree strongly' }, id: 'lines' },\n                { match: { id: 'disagree strongly' }, id: 'lines' },\n            ]\n        },\n    },\n    {\n        exclude: ['custom tooltip example', 'showcase pattern usage'],\n    }\n)\n","import { defaultProps as defaults, offsetById } from '@nivo/marimekko'\nimport {\n    themeProperty,\n    defsProperties,\n    groupProperties,\n    getLegendsProps,\n    motionProperties,\n    axesProperties,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data, which should be immutable.',\n        description: `\n            The data doesn't have to conform to a specific schema,\n            it's gonna depend on how you configure \\`id\\`, \\`value\\`\n            and \\`dimensions\\`.\n        `,\n        type: 'RawDatum[]',\n        required: true,\n    },\n    {\n        key: 'id',\n        group: 'Base',\n        help: 'ID accessor.',\n        description: `\n            Define how to access the ID of each datum,\n            by default, nivo will look for the \\`id\\` property.\n        `,\n        type: 'string | (datum: RawDatum): string | number',\n        required: true,\n    },\n    {\n        key: 'value',\n        group: 'Base',\n        help: 'Value accessor.',\n        description: `\n            Define how to access the value of each datum,\n            which will dictate the thickness of the bars,\n            by default, nivo will look for the \\`value\\` property.\n        `,\n        type: 'string | (datum: RawDatum): number',\n        required: true,\n    },\n    {\n        key: 'dimensions',\n        group: 'Base',\n        help: 'Data dimensions configuration.',\n        type: '{ id: string, value: string | (datum: RawDatum) => number }',\n        required: true,\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        help: 'Optional formatter for values.',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n            \n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        required: false,\n        type: 'string | (value: number) => string | number',\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'layout',\n        help: `How to display bars.`,\n        type: 'string',\n        required: false,\n        defaultValue: defaults.layout,\n        controlType: 'radio',\n        group: 'Base',\n        controlOptions: {\n            choices: [\n                { label: 'horizontal', value: 'horizontal' },\n                { label: 'vertical', value: 'vertical' },\n            ],\n        },\n    },\n    {\n        key: 'offset',\n        help: 'Offset type.',\n        type: 'OffsetId',\n        required: false,\n        controlType: 'choices',\n        group: 'Base',\n        defaultValue: defaults.offset,\n        controlOptions: {\n            choices: Object.keys(offsetById).map(key => ({\n                label: key,\n                value: key,\n            })),\n        },\n    },\n    {\n        key: 'outerPadding',\n        help: 'Space before the first bar and after the last one.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.outerPadding,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 20,\n            unit: 'px',\n        },\n    },\n    {\n        key: 'innerPadding',\n        help: 'Space between bars.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.innerPadding,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 20,\n            unit: 'px',\n        },\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            not required if using\n            \\`<ResponsiveMarimekko />\\`.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            not required if using\n            \\`<ResponsiveMarimekko />\\`.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'margin',\n        group: 'Base',\n        type: 'object',\n        required: false,\n        help: 'Chart margin.',\n        flavors: ['svg', 'api'],\n        controlType: 'margin',\n    },\n    themeProperty(['svg', 'api']),\n    {\n        key: 'colors',\n        group: 'Style',\n        type: 'string | Function | string[]',\n        required: false,\n        help: 'Defines color range.',\n        defaultValue: defaults.colors,\n        flavors: ['svg', 'api'],\n        controlType: 'ordinalColors',\n    },\n    ...defsProperties('Style', ['svg', 'api']),\n    {\n        key: 'showcase pattern usage',\n        flavors: ['svg'],\n        help: 'Patterns.',\n        description: `\n            You can use \\`defs\\` and \\`fill\\` properties\n            to use patterns, see\n            [dedicated guide](self:/guides/patterns)\n            for further information.\n        `,\n        type: 'boolean',\n        controlType: 'switch',\n        group: 'Style',\n    },\n    {\n        key: 'borderWidth',\n        help: 'Slices border width.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.borderWidth,\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'borderColor',\n        help: 'Method to compute border color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.borderColor,\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    ...axesProperties(),\n    {\n        key: 'enableGridX',\n        help: 'Enable/disable x grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableGridX,\n        controlType: 'switch',\n        group: 'Grid & Axes',\n    },\n    {\n        key: 'gridXValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for vertical grid lines.',\n        type: 'number[]',\n        required: false,\n    },\n    {\n        key: 'enableGridY',\n        help: 'Enable/disable y grid.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableGridY,\n        controlType: 'switch',\n        group: 'Grid & Axes',\n    },\n    {\n        key: 'gridYValues',\n        group: 'Grid & Axes',\n        help: 'Specify values to use for horizontal grid lines.',\n        type: 'number[]',\n        required: false,\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer must be a component.\n            \n            The layer component which will receive the chart's\n            context & computed data and must return a valid SVG element\n            for the \\`Marimekko\\` component.\n            \n            The props passed to layers have the following structure:\n            \n            \\`\\`\\`\n            {\n                data: ComputedDatum<RawDatum>[]\n                bars: BarDatum<RawDatum>[]\n                thicknessScale: ScaleLinear<number, number>\n                dimensionsScale: ScaleLinear<number, number>\n            }\n            \\`\\`\\`\n        `,\n        required: false,\n        type: 'Array<string | Function>',\n        defaultValue: defaults.layers,\n    },\n    {\n        key: 'isInteractive',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.isInteractive,\n        controlType: 'switch',\n    },\n    {\n        key: 'onClick',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onClick handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseEnter',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseEnter handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseMove',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseMove handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'onMouseLeave',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseLeave handler, it receives target bar data and mouse event.',\n        type: '(bar: BarDatum<RawDatum>, event: MouseEvent) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: 'Component',\n        required: false,\n        help: 'Custom tooltip component',\n        description: `\n            A function allowing complete tooltip customisation,\n            it must return a valid HTML element and will receive\n            the following props:\n            \n            \\`\\`\\`\n            {\n                bar: BarDatum<RawDatum>\n            }\n            \\`\\`\\`\n            \n            You can also customize the style of the tooltip using\n            the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        help: 'Showcase custom tooltip.',\n        type: 'boolean',\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    ...motionProperties(['svg'], defaults, 'react-spring'),\n    {\n        key: 'legends',\n        flavors: ['svg'],\n        type: 'Legend[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n]\n\nexport const groups = groupProperties(props)\n","import React from 'react'\nimport { ResponsiveMarimekko, defaultProps } from '@nivo/marimekko'\nimport { random, omit } from 'lodash'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/marimekko/meta.yml'\nimport mapper from '../../data/components/marimekko/mapper'\nimport { groups } from '../../data/components/marimekko/props'\n\nconst getRandomValue = () => random(0, 32)\n\nconst generateData = () =>\n    [`it's good`, `it's sweet`, `it's spicy`, 'worth eating', 'worth buying'].map(statement => ({\n        statement,\n        participation: getRandomValue(),\n        stronglyAgree: getRandomValue(),\n        agree: getRandomValue(),\n        disagree: getRandomValue(),\n        stronglyDisagree: getRandomValue(),\n    }))\n\nconst initialProperties = {\n    id: 'statement',\n    value: 'participation',\n    dimensions: [\n        {\n            id: 'disagree strongly',\n            value: 'stronglyDisagree',\n        },\n        {\n            id: 'disagree',\n            value: 'disagree',\n        },\n        {\n            id: 'agree',\n            value: 'agree',\n        },\n        {\n            id: 'agree strongly',\n            value: 'stronglyAgree',\n        },\n    ],\n    layout: defaultProps.layout,\n    offset: defaultProps.offset,\n    outerPadding: defaultProps.outerPadding,\n    innerPadding: 9,\n\n    axisTop: {\n        enable: false,\n        orient: 'top',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 36,\n    },\n    axisRight: {\n        enable: true,\n        orient: 'right',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: 0,\n    },\n    axisBottom: {\n        enable: true,\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'participation',\n        legendOffset: 36,\n        legendPosition: 'middle',\n    },\n    axisLeft: {\n        enable: true,\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'opinions',\n        legendOffset: -40,\n        legendPosition: 'middle',\n    },\n    enableGridX: defaultProps.enableGridX,\n    enableGridY: defaultProps.enableGridY,\n\n    margin: {\n        top: 40,\n        right: 80,\n        bottom: 100,\n        left: 80,\n    },\n\n    valueFormat: { format: '', enabled: false },\n\n    colors: { scheme: 'spectral' },\n\n    borderWidth: 1,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.2]],\n    },\n\n    isInteractive: true,\n    'custom tooltip example': false,\n    tooltip: null,\n    'showcase pattern usage': true,\n\n    defs: [],\n    fill: [],\n\n    animate: defaultProps.animate,\n    motionConfig: defaultProps.motionConfig,\n\n    legends: [\n        {\n            anchor: 'bottom',\n            direction: 'row',\n            justify: false,\n            translateX: 0,\n            translateY: 80,\n            itemsSpacing: 0,\n            itemWidth: 140,\n            itemHeight: 18,\n            itemTextColor: '#999',\n            itemDirection: 'right-to-left',\n            itemOpacity: 1,\n            symbolSize: 18,\n            symbolShape: 'square',\n            effects: [\n                {\n                    on: 'hover',\n                    style: {\n                        itemTextColor: '#000',\n                    },\n                },\n            ],\n        },\n    ],\n}\n\nconst Marimekko = () => {\n    return (\n        <ComponentTemplate\n            name=\"Marimekko\"\n            meta={meta.Marimekko}\n            icon=\"marimekko\"\n            flavors={meta.flavors}\n            currentFlavor=\"svg\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={defaultProps}\n            propertiesMapper={mapper}\n            generateData={generateData}\n        >\n            {(properties, data, theme, logAction) => {\n                const handleClick = bar => {\n                    logAction({\n                        type: 'click',\n                        label: `[bar] ${bar.datum.id} - ${bar.id}: ${bar.value}`,\n                        color: bar.color,\n                        // prevent cyclic dependency\n                        data: {\n                            ...omit(bar, ['datum']),\n                            datum: omit(bar.datum, ['dimensions']),\n                        },\n                    })\n                }\n\n                return (\n                    <ResponsiveMarimekko\n                        data={data}\n                        {...properties}\n                        theme={theme}\n                        onClick={handleClick}\n                        legends={properties.legends.map(legend => ({\n                            ...legend,\n                        }))}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default Marimekko\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n"],"names":["x","defaultProps","layout","offset","outerPadding","innerPadding","layers","enableGridX","enableGridY","colors","scheme","borderWidth","borderColor","from","modifiers","isInteractive","animate","motionConfig","offsetById","expand","stackOffsetExpand","diverging","stackOffsetDiverging","none","stackOffsetNone","silouhette","stackOffsetSilhouette","wiggle","stackOffsetWiggle","useStack","dimensionIds","dimensions","useMemo","offsetFunction","d3Stack","keys","value","datum","key","useMarimekko","data","id","valueFormat","rawDimensions","width","height","forEach","push","dimension","_get","stack","stacked","allValues","min","Math","max","normalizedData","getId","getValue","normalized","index","datumId","datumValue","thicknessScale","totalValue","reduce","acc","scaleLinear","domain","totalPadding","length","range","dimensionsScale","computedData","getColor","useOrdinalColorScale","formatValue","useValueFormatter","position","thickness","computedDatum","y","allPositions","totalSize","find","dimensionId","dimensionPoint","dimensionDatum","formattedValue","color","position0","position1","bars","theme","useTheme","getBorderColor","useInheritedColor","all","Bar","bar","animatedProps","tooltip","onClick","onMouseEnter","onMouseMove","onMouseLeave","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","createElement","event","handleClick","handleMouseEnter","handleMouseMove","handleMouseLeave","_jsx","animated","rect","to","fill","stroke","strokeWidth","Bars","useMotionConfig","springConfig","config","transition","useTransition","initial","opacity","enter","update","leave","immediate","style","BarTooltip","BasicTooltip","enableChip","InnerMarimekko","partialMargin","margin","axisTop","axisRight","axisBottom","axisLeft","gridXValues","gridYValues","defs","legends","role","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","layerById","grid","axes","boundDefs","bindDefs","includes","xScale","yScale","Grid","xValues","yValues","Axes","top","right","bottom","left","legendData","label","map","legend","i","BoxLegendSvg","containerWidth","containerHeight","layerContext","SvgWrapper","layer","Fragment","Marimekko","otherProps","Container","ResponsiveMarimekko","props","ResponsiveWrapper","TooltipWrapper","styled","TooltipKey","TooltipValue","CustomTooltip","settingsMapper","mapFormat","mapAxis","values","patternLinesDef","background","rotation","lineWidth","spacing","match","exclude","group","help","description","type","required","controlType","defaultValue","defaults","controlOptions","choices","Object","unit","enableControlForFlavors","step","flavors","themeProperty","defsProperties","axesProperties","motionProperties","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","alert","JSON","stringify","groups","groupProperties","getRandomValue","generateData","statement","participation","stronglyAgree","agree","disagree","stronglyDisagree","initialProperties","enable","orient","tickSize","tickPadding","tickRotation","legendOffset","legendPosition","format","enabled","itemTextColor","itemOpacity","symbolShape","effects","on","ComponentTemplate","name","meta","icon","currentFlavor","properties","defaultProperties","propertiesMapper","mapper","logAction","nativeFloor","floor","nativeRandom","random","module","exports","lower","upper","baseRandom","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","floating","undefined","temp","rand"],"sourceRoot":""}