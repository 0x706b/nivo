{"version":3,"file":"component---src-pages-guides-legends-tsx-37142dea564fc2063c28.js","mappings":"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","sources":["webpack://nivo-website/./src/components/PageContent.ts","webpack://nivo-website/./src/components/styled.ts","webpack://nivo-website/./src/components/guides/legends/LegendPosition.js","webpack://nivo-website/./src/components/guides/legends/LegendDirection.js","webpack://nivo-website/./src/components/guides/legends/LegendItemDirection.js","webpack://nivo-website/./src/components/guides/legends/SymbolShape.js","webpack://nivo-website/./src/pages/guides/legends.tsx","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/props.ts","webpack://nivo-website/../node_modules/lodash/_arrayEach.js","webpack://nivo-website/../node_modules/lodash/_baseAssign.js","webpack://nivo-website/../node_modules/lodash/_baseAssignIn.js","webpack://nivo-website/../node_modules/lodash/_baseClone.js","webpack://nivo-website/../node_modules/lodash/_baseIsMap.js","webpack://nivo-website/../node_modules/lodash/_baseIsSet.js","webpack://nivo-website/../node_modules/lodash/_baseUnset.js","webpack://nivo-website/../node_modules/lodash/_cloneDataView.js","webpack://nivo-website/../node_modules/lodash/_cloneRegExp.js","webpack://nivo-website/../node_modules/lodash/_cloneSymbol.js","webpack://nivo-website/../node_modules/lodash/_copySymbols.js","webpack://nivo-website/../node_modules/lodash/_copySymbolsIn.js","webpack://nivo-website/../node_modules/lodash/_customOmitClone.js","webpack://nivo-website/../node_modules/lodash/_getAllKeysIn.js","webpack://nivo-website/../node_modules/lodash/_getSymbolsIn.js","webpack://nivo-website/../node_modules/lodash/_initCloneArray.js","webpack://nivo-website/../node_modules/lodash/_initCloneByTag.js","webpack://nivo-website/../node_modules/lodash/_parent.js","webpack://nivo-website/../node_modules/lodash/isMap.js","webpack://nivo-website/../node_modules/lodash/isSet.js","webpack://nivo-website/../node_modules/lodash/omit.js"],"sourcesContent":["import styled from 'styled-components'\nimport media from '../theming/mediaQueries'\n\nexport default styled.div`\n    margin: 0 50px;\n    position: relative;\n\n    ${media.tablet`\n        & {\n            margin: 0 30px;\n        }\n    `}\n\n    ${media.mobile`\n        & {\n            margin: 0 15px;\n        }\n    `}\n`\n","import styled from 'styled-components'\nimport media from '../theming/mediaQueries'\n\nexport const FullWidthBanner = styled.div`\n    background: ${({ theme }) => theme.colors.cardBackground};\n    margin-bottom: 40px;\n    padding: 20px;\n`\n\nexport const DescriptionBlock = styled.div`\n    max-width: 800px;\n    margin: 0 auto 50px;\n\n    ${media.tablet`\n        & {\n            margin: 0 15px 50px;\n        }\n    `}\n\n    ${media.mobile`\n        & {\n            margin: 0 15px 50px;\n        }\n    `}\n`\n\nexport const Card = styled.div`\n    background: ${({ theme }) => theme.colors.cardBackground};\n    box-shadow: ${({ theme }) => theme.cardShadow};\n`\n","import React from 'react'\nimport omit from 'lodash/omit'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useTheme } from '../../../theming/context'\n\nconst anchors = [\n    'top-left',\n    'top',\n    'top-right',\n    'right',\n    'bottom-right',\n    'bottom',\n    'bottom-left',\n    'left',\n    'center',\n]\n\nconst translateExamples = [\n    {\n        anchor: 'top',\n        translateX: -160,\n        translateY: -30,\n    },\n    {\n        anchor: 'left',\n        translateX: -30,\n        translateY: 50,\n    },\n    {\n        anchor: 'right',\n        translateX: -30,\n        translateY: -60,\n    },\n    {\n        anchor: 'bottom',\n        translateX: 160,\n        translateY: 30,\n    },\n]\n\nconst margin = 30\nconst legendProps = {\n    containerWidth: 800 - margin * 2,\n    containerHeight: 300 - margin * 2,\n    itemWidth: 120,\n    itemHeight: 16,\n    itemsSpacing: 4,\n    direction: 'column',\n}\n\nconst LegendPosition = () => {\n    const theme = useTheme()\n\n    return (\n        <div>\n            <h2>Legend position</h2>\n            <p>\n                The legend can be positioned in your chart area using the <code>anchor</code>{' '}\n                property.\n                <br />\n                You have 9 available directives:\n            </p>\n            <svg\n                width={legendProps.containerWidth + margin * 2}\n                height={legendProps.containerHeight + margin * 2}\n                style={{\n                    background: theme.colors.cardBackground,\n                }}\n            >\n                <text\n                    x={legendProps.containerWidth / 2 + margin}\n                    y={margin / 2}\n                    textAnchor=\"middle\"\n                    style={{\n                        alignmentBaseline: 'middle',\n                        fill: theme.colors.textLight,\n                        fontSize: '14px',\n                    }}\n                >\n                    margin\n                </text>\n                <g transform={`translate(${margin},${margin})`}>\n                    <rect\n                        fill={theme.colors.background}\n                        width={legendProps.containerWidth}\n                        height={legendProps.containerHeight}\n                    />\n                    {anchors.map(anchor => (\n                        <BoxLegendSvg\n                            {...legendProps}\n                            itemTextColor={theme.colors.text}\n                            key={anchor}\n                            anchor={anchor}\n                            data={[\n                                { id: 'a', label: anchor, color: theme.colors.accent },\n                                { id: 'b', label: '...', color: theme.colors.accent },\n                                { id: 'c', label: '...', color: theme.colors.accent },\n                            ]}\n                        />\n                    ))}\n                </g>\n            </svg>\n            <p>\n                The legend's anchor is relative to the inner chart area (with margin applied), but\n                depending on the chart type, you'll probably want to move it outside of this area.\n                <br />\n                That's where <code>translateX</code> & <code>translateY</code> come into play,\n                allowing to adjust the legend position from its original anchor.\n            </p>\n            <svg\n                width={legendProps.containerWidth + margin * 2}\n                height={legendProps.containerHeight + margin * 2}\n                style={{\n                    background: theme.colors.cardBackground,\n                }}\n            >\n                <text\n                    x={legendProps.containerWidth / 2 + margin}\n                    y={margin / 2}\n                    textAnchor=\"middle\"\n                    style={{\n                        alignmentBaseline: 'middle',\n                        fill: theme.colors.textLight,\n                        fontSize: '14px',\n                    }}\n                >\n                    margin\n                </text>\n                <g transform={`translate(${margin},${margin})`}>\n                    <rect\n                        fill={theme.colors.background}\n                        width={legendProps.containerWidth}\n                        height={legendProps.containerHeight}\n                    />\n                    {translateExamples.map((example, i) => (\n                        <BoxLegendSvg\n                            key={i}\n                            {...legendProps}\n                            {...omit(example, ['translateX', 'translateY'])}\n                            itemTextColor={theme.colors.text}\n                            data={[\n                                {\n                                    id: example.anchor,\n                                    label: `${example.anchor} (regular)`,\n                                    color: theme.colors.text,\n                                },\n                            ]}\n                        />\n                    ))}\n                    {translateExamples.map((example, i) => (\n                        <BoxLegendSvg\n                            key={i}\n                            {...legendProps}\n                            {...example}\n                            itemTextColor={theme.colors.text}\n                            data={[\n                                {\n                                    id: 'a',\n                                    label: `${example.anchor} (translated)`,\n                                    color: theme.colors.accent,\n                                },\n                                {\n                                    id: 'b',\n                                    label: `translateX: ${example.translateX}`,\n                                    color: theme.colors.accent,\n                                },\n                                {\n                                    id: 'c',\n                                    label: `translateY: ${example.translateY}`,\n                                    color: theme.colors.accent,\n                                },\n                            ]}\n                        />\n                    ))}\n                </g>\n            </svg>\n        </div>\n    )\n}\n\nexport default LegendPosition\n","import React from 'react'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useTheme } from '../../../theming/context'\n\nconst legendProps = {\n    containerWidth: 800,\n    containerHeight: 90,\n    itemWidth: 70,\n    itemHeight: 24,\n}\n\nconst LegendDirection = () => {\n    const theme = useTheme()\n\n    return (\n        <div>\n            <h2>Legend direction</h2>\n            <p>\n                Legends support two directions, using the <code>direction</code> property,{' '}\n                <code>column</code> or <code>row</code>.\n            </p>\n            <svg width={legendProps.containerWidth} height={legendProps.containerHeight}>\n                <BoxLegendSvg\n                    {...legendProps}\n                    itemTextColor={theme.colors.text}\n                    anchor=\"left\"\n                    direction=\"column\"\n                    data={[\n                        { id: 'a', label: `column`, color: theme.colors.accent },\n                        { id: 'b', label: `column`, color: theme.colors.accent },\n                        { id: 'c', label: `column`, color: theme.colors.accent },\n                    ]}\n                />\n                <BoxLegendSvg\n                    {...legendProps}\n                    itemTextColor={theme.colors.text}\n                    anchor=\"left\"\n                    translateX={260}\n                    direction=\"row\"\n                    data={[\n                        { id: 'a', label: `row`, color: theme.colors.accent },\n                        { id: 'b', label: `row`, color: theme.colors.accent },\n                        { id: 'c', label: `row`, color: theme.colors.accent },\n                    ]}\n                />\n            </svg>\n        </div>\n    )\n}\n\nexport default LegendDirection\n","import React from 'react'\nimport { LegendSvgItem } from '@nivo/legends'\nimport { useTheme } from '../../../theming/context'\n\nconst itemDirections = ['left-to-right', 'right-to-left', 'top-to-bottom', 'bottom-to-top']\n\nconst LegendItemDirection = () => {\n    const theme = useTheme()\n\n    const itemsProps = {\n        x: 0,\n        y: 0,\n        width: 160,\n        height: 40,\n        data: {\n            id: 'demo',\n            color: theme.colors.accent,\n        },\n    }\n\n    return (\n        <div>\n            <h2>Legend item direction</h2>\n            <p>\n                The <code>itemDirection</code> property defines how symbol and label are positioned.\n                <br />\n                You have 4 available directives:\n            </p>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                }}\n            >\n                {itemDirections.map(dir => (\n                    <div\n                        key={dir}\n                        style={{\n                            background: theme.colors.cardBackground,\n                            padding: '10px 15px',\n                            borderRadius: 2,\n                            display: 'flex',\n                            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n                        }}\n                    >\n                        <svg width={itemsProps.width} height={itemsProps.height}>\n                            <LegendSvgItem\n                                {...itemsProps}\n                                textColor={theme.colors.text}\n                                data={{\n                                    ...itemsProps.data,\n                                    label: dir,\n                                }}\n                                direction={dir}\n                            />\n                        </svg>\n                    </div>\n                ))}\n            </div>\n            <p>\n                The behavior is slightly different if you set <code>justify</code> to{' '}\n                <code>true</code> as the label will be positioned at the opposite of the symbol,\n                filling up the whole width/height of the legend's item.\n            </p>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                }}\n            >\n                {itemDirections.map(dir => (\n                    <div\n                        key={dir}\n                        style={{\n                            background: theme.colors.cardBackground,\n                            padding: '9px 12px',\n                            display: 'flex',\n                            boxShadow: '0 1px 2px rgba(0, 0, 0, 0.1)',\n                        }}\n                    >\n                        <svg key={dir} width={itemsProps.width} height={itemsProps.height}>\n                            <LegendSvgItem\n                                {...itemsProps}\n                                textColor={theme.colors.text}\n                                data={{\n                                    ...itemsProps.data,\n                                    label: dir,\n                                }}\n                                direction={dir}\n                                justify={true}\n                            />\n                        </svg>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default LegendItemDirection\n","import React from 'react'\nimport { LegendSvgItem } from '@nivo/legends'\nimport { Highlight } from '../../Highlight'\nimport { useTheme } from '../../../theming/context'\n\nconst shapes = ['square', 'circle', 'triangle', 'diamond']\n\nconst code = `\nconst CustomSymbolShape = ({\n    x, y, size, fill, borderWidth, borderColor\n}) => (\n    <rect\n        x={x}\n        y={y}\n        transform={\\`rotate(45 \\${size/2} \\${size/2})\\`}\n        fill={fill}\n        strokeWidth={borderWidth}\n        stroke={borderColor}\n        width={size}\n        height={size}\n        style={{ pointerEvents: 'none' }}\n    />\n)\n`.trim()\n\nconst SymbolShape = () => {\n    const theme = useTheme()\n\n    const itemsProps = {\n        x: 0,\n        y: 0,\n        width: 160,\n        height: 40,\n        data: {\n            id: 'demo',\n            color: theme.colors.accent,\n        },\n    }\n\n    return (\n        <div>\n            <h2>Symbol shape</h2>\n            <p>\n                You can customize symbols using <code>symbolShape</code> property.\n            </p>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                }}\n            >\n                {shapes.map(shape => (\n                    <div\n                        key={shape}\n                        style={{\n                            background: theme.colors.cardBackground,\n                            padding: '10px 15px',\n                            borderRadius: 2,\n                            display: 'flex',\n                            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n                        }}\n                    >\n                        <svg width={itemsProps.width} height={itemsProps.height}>\n                            <LegendSvgItem\n                                {...itemsProps}\n                                textColor={theme.colors.text}\n                                data={{\n                                    ...itemsProps.data,\n                                    label: shape,\n                                }}\n                                direction=\"left-to-right\"\n                                symbolShape={shape}\n                            />\n                        </svg>\n                    </div>\n                ))}\n            </div>\n            <p>\n                You can also use a custom shape passing a component to <code>symbolShape</code>:\n            </p>\n            <Highlight code={code} language=\"jsx\" />\n        </div>\n    )\n}\n\nexport default SymbolShape\n","import React from 'react'\nimport { themeContext } from '@nivo/core'\nimport { useTheme } from '../../theming/context'\nimport Layout from '../../components/Layout'\nimport { Seo } from '../../components/Seo'\nimport PageContent from '../../components/PageContent'\nimport LegendPosition from '../../components/guides/legends/LegendPosition'\nimport LegendDirection from '../../components/guides/legends/LegendDirection'\nimport LegendItemDirection from '../../components/guides/legends/LegendItemDirection'\nimport SymbolShape from '../../components/guides/legends/SymbolShape'\nimport { DescriptionBlock } from '../../components/styled'\n\nconst Legends = () => {\n    const theme = useTheme()\n\n    return (\n        <Layout>\n            <themeContext.Provider value={theme.nivo}>\n                <Seo title=\"Legends Guide\" />\n                <PageContent>\n                    <div className=\"guide__header\">\n                        <h1>Legends</h1>\n                    </div>\n                </PageContent>\n                <DescriptionBlock>\n                    <p>Let's see how to add legends to your charts.</p>\n                    <p>\n                        Legend components are available via the <code>@nivo/legends</code> package,\n                        however it's added as a dependency for most chart packages supporting them,\n                        in most cases you won't have to add it as a direct dependency.\n                    </p>\n                    <LegendPosition />\n                    <LegendDirection />\n                    <LegendItemDirection />\n                    <SymbolShape />\n                </DescriptionBlock>\n            </themeContext.Provider>\n        </Layout>\n    )\n}\n\nexport default Legends\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { BoxLegendSvgProps, LegendAnchor, LegendItemDirection } from './types'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { computeDimensions, computePositionFromAnchor, computeItemLayout } from './compute'\nimport { LegendCanvasProps } from './types'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n        if (reverse === true) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","var copyObject = require('./_copyObject'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n","var copyObject = require('./_copyObject'),\n    keysIn = require('./keysIn');\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nmodule.exports = baseAssignIn;\n","var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys'),\n    keysIn = require('./keysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nmodule.exports = baseIsMap;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nmodule.exports = baseIsSet;\n","var castPath = require('./_castPath'),\n    last = require('./last'),\n    parent = require('./_parent'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The property path to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = castPath(path, object);\n  object = parent(object, path);\n  return object == null || delete object[toKey(last(path))];\n}\n\nmodule.exports = baseUnset;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nmodule.exports = cloneRegExp;\n","var Symbol = require('./_Symbol');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nmodule.exports = cloneSymbol;\n","var copyObject = require('./_copyObject'),\n    getSymbols = require('./_getSymbols');\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nmodule.exports = copySymbols;\n","var copyObject = require('./_copyObject'),\n    getSymbolsIn = require('./_getSymbolsIn');\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nmodule.exports = copySymbolsIn;\n","var isPlainObject = require('./isPlainObject');\n\n/**\n * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n * objects.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {string} key The key of the property to inspect.\n * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n */\nfunction customOmitClone(value) {\n  return isPlainObject(value) ? undefined : value;\n}\n\nmodule.exports = customOmitClone;\n","var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbolsIn = require('./_getSymbolsIn'),\n    keysIn = require('./keysIn');\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nmodule.exports = getAllKeysIn;\n","var arrayPush = require('./_arrayPush'),\n    getPrototype = require('./_getPrototype'),\n    getSymbols = require('./_getSymbols'),\n    stubArray = require('./stubArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nmodule.exports = getSymbolsIn;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nmodule.exports = initCloneArray;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer'),\n    cloneDataView = require('./_cloneDataView'),\n    cloneRegExp = require('./_cloneRegExp'),\n    cloneSymbol = require('./_cloneSymbol'),\n    cloneTypedArray = require('./_cloneTypedArray');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nmodule.exports = initCloneByTag;\n","var baseGet = require('./_baseGet'),\n    baseSlice = require('./_baseSlice');\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nmodule.exports = parent;\n","var baseIsMap = require('./_baseIsMap'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nmodule.exports = isMap;\n","var baseIsSet = require('./_baseIsSet'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nmodule.exports = isSet;\n","var arrayMap = require('./_arrayMap'),\n    baseClone = require('./_baseClone'),\n    baseUnset = require('./_baseUnset'),\n    castPath = require('./_castPath'),\n    copyObject = require('./_copyObject'),\n    customOmitClone = require('./_customOmitClone'),\n    flatRest = require('./_flatRest'),\n    getAllKeysIn = require('./_getAllKeysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nmodule.exports = omit;\n"],"names":["styled","media","FullWidthBanner","theme","colors","cardBackground","DescriptionBlock","Card","cardShadow","anchors","translateExamples","anchor","translateX","translateY","margin","legendProps","containerWidth","containerHeight","itemWidth","itemHeight","itemsSpacing","direction","useTheme","width","height","style","background","x","y","textAnchor","alignmentBaseline","fill","textLight","fontSize","transform","map","itemTextColor","text","key","data","id","label","color","accent","example","i","omit","itemDirections","itemsProps","display","justifyContent","dir","padding","borderRadius","boxShadow","textColor","justify","shapes","code","trim","shape","symbolShape","Highlight","language","Layout","value","nivo","Seo","title","PageContent","className","zeroPadding","top","right","bottom","left","computeDimensions","item","_padding","itemCount","Array","isArray","Error","horizontalPadding","verticalPadding","spacing","computePositionFromAnchor","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","symbolSize","symbolSpacing","symbolByShape","circle","size","opacity","borderWidth","borderColor","_jsx","r","cx","cy","strokeWidth","stroke","pointerEvents","diamond","d","square","triangle","LegendSvgItem","symbolBorderWidth","symbolBorderColor","onClick","onMouseEnter","onMouseLeave","toggleSerie","effects","useState","setStyle","handleMouseEnter","useCallback","event","filter","on","reduce","acc","effect","handleMouseLeave","isInteractive","some","handler","SymbolShape","_jsxs","itemOpacity","itemBackground","cursor","e","React","hidden","legends","symbol","dominantBaseline","userSelect","LegendSvg","itemDirection","length","xStep","yStep","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","ctx","save","translate","font","fontFamily","forEach","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","useQuantizeColorScaleLegendData","scale","overriddenDomain","domain","reverse","valueFormat","v","separator","useMemo","items","range","domainValue","index","invertExtent","extent","LegendPropShape","PropTypes","isRequired","module","exports","array","iteratee","copyObject","keys","object","source","keysIn","Stack","arrayEach","assignValue","baseAssign","baseAssignIn","cloneBuffer","copyArray","copySymbols","copySymbolsIn","getAllKeys","getAllKeysIn","getTag","initCloneArray","initCloneByTag","initCloneObject","isBuffer","isMap","isObject","isSet","argsTag","funcTag","objectTag","cloneableTags","baseClone","bitmask","customizer","stack","result","isDeep","isFlat","isFull","undefined","isArr","tag","isFunc","stacked","get","set","subValue","add","props","isObjectLike","castPath","last","parent","toKey","path","cloneArrayBuffer","dataView","buffer","constructor","byteOffset","byteLength","reFlags","regexp","exec","lastIndex","Symbol","symbolProto","prototype","symbolValueOf","valueOf","Object","call","getSymbols","getSymbolsIn","isPlainObject","baseGetAllKeys","arrayPush","getPrototype","stubArray","getOwnPropertySymbols","hasOwnProperty","input","cloneDataView","cloneRegExp","cloneSymbol","cloneTypedArray","Ctor","baseGet","baseSlice","baseIsMap","baseUnary","nodeUtil","nodeIsMap","baseIsSet","nodeIsSet","arrayMap","baseUnset","customOmitClone","flatRest","paths","CLONE_DEEP_FLAG"],"sourceRoot":""}