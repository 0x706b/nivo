{"version":3,"file":"main.1148e1598ff7b31fdf91.bundle.js","sources":["webpack:///./packages/circle-packing/src/compute.js"],"sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst computeNodePath = (node, getIdentity) =>\n    node\n        .ancestors()\n        .map(ancestor => getIdentity(ancestor.data))\n        .join('.')\n\nexport const computeNodes = ({ root, pack, leavesOnly, getIdentity, getColor }) => {\n    // assign a unique id depending on node path to each node\n    root.each(node => {\n        node.id = getIdentity(node.data)\n        node.path = computeNodePath(node, getIdentity)\n    })\n\n    pack(root)\n\n    let nodes = leavesOnly ? root.leaves() : root.descendants()\n    nodes = nodes.map(node => {\n        node.color = getColor({ ...node.data, depth: node.depth })\n        node.label = false\n\n        return node\n    })\n\n    return nodes\n}\n\nexport const computeZoom = (nodes, currentNodePath, width, height) => {\n    const currentNode = nodes.find(({ path }) => path === currentNodePath)\n\n    if (!currentNode) return nodes\n\n    const ratio = Math.min(width, height) / (currentNode.r * 2)\n    const offsetX = width / 2 - currentNode.x * ratio\n    const offsetY = height / 2 - currentNode.y * ratio\n\n    return nodes.map(node => ({\n        ...node,\n        r: node.r * ratio,\n        x: node.x * ratio + offsetX,\n        y: node.y * ratio + offsetY,\n    }))\n}\n"],"mappings":"AAQA","sourceRoot":""}