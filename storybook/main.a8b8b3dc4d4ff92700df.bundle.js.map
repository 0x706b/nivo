{"version":3,"file":"main.a8b8b3dc4d4ff92700df.bundle.js","sources":["webpack:///./packages/line/stories/LineCanvas.stories.js"],"sourcesContent":["\n  export var withStorySource = require('@storybook/addon-storysource').withStorySource;\n  export var __STORY__ = \"/*\\n * This file is part of the nivo project.\\n *\\n * Copyright 2016-present, Raphaël Benitte.\\n *\\n * For the full copyright and license information, please view the LICENSE\\n * file that was distributed with this source code.\\n */\\nimport React from 'react';\\nimport { storiesOf } from '@storybook/react';\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\nimport { generateDrinkStats } from '@nivo/generators';\\nimport { LineCanvas } from '../src';\\n\\nconst data = generateDrinkStats(32);\\nconst commonProperties = {\\n  width: 900,\\n  height: 400,\\n  margin: { top: 20, right: 20, bottom: 60, left: 80 },\\n  data,\\n  pointSize: 8,\\n  pointColor: { theme: 'background' },\\n  pointBorderWidth: 2,\\n  pointBorderColor: { theme: 'background' },\\n};\\n\\nconst stories = storiesOf('LineCanvas', module);\\n\\nstories.addDecorator(withKnobs);\\n\\nstories.add('default', () => <LineCanvas {...commonProperties} />);\\n\\nstories.add(\\n  'holes in data',\\n  () => (\\n    <LineCanvas\\n      {...commonProperties}\\n      data={[\\n        {\\n          id: 'fake corp. A',\\n          data: [4, 8, 5, null, 2, 1, 4, null, 8, 9, 5].map((y, i) => ({\\n            x: `#${i}`,\\n            y,\\n          })),\\n        },\\n        {\\n          id: 'fake corp. B',\\n          data: [5, 9, 8, 6, 3, 1, 2, null, 5, 8, 4].map((y, i) => ({ x: `#${i}`, y })),\\n        },\\n      ]}\\n      yScale={{\\n        type: 'linear',\\n        stacked: boolean('stacked', false),\\n      }}\\n      curve=\\\"monotoneX\\\"\\n    />\\n  ),\\n  {\\n    info: {\\n      text: `You can skip portions of the lines by setting y value to \\\\`null\\\\`.`,\\n    },\\n  }\\n);\\n\\nstories.add(\\n  'different serie lengths',\\n  () => (\\n    <LineCanvas\\n      {...commonProperties}\\n      data={[\\n        {\\n          id: 'fake corp. A',\\n          data: [\\n            { x: 0, y: 7 },\\n            { x: 1, y: 5 },\\n            { x: 2, y: 11 },\\n            { x: 3, y: 12 },\\n            { x: 4, y: 13 },\\n            { x: 5, y: null },\\n            { x: 6, y: 18 },\\n            { x: 7, y: 16 },\\n            { x: 8, y: 8 },\\n            { x: 9, y: 10 },\\n            { x: 10, y: 9 },\\n          ],\\n        },\\n        {\\n          id: 'fake corp. B',\\n          data: [{ x: 3, y: 14 }, { x: 4, y: 16 }, { x: 5, y: 19 }, { x: 6, y: 20 }, { x: 7, y: 18 }],\\n        },\\n      ]}\\n      xScale={{\\n        type: 'linear',\\n        min: 0,\\n        max: 'auto',\\n      }}\\n      yScale={{\\n        type: 'linear',\\n        stacked: false,\\n      }}\\n      curve=\\\"monotoneX\\\"\\n      enableArea={true}\\n    />\\n  ),\\n  {\\n    info: {\\n      text: `\\n                Please note that when using stacked y scale with variable length/data holes,\\n                if one of the y value is \\\\`null\\\\` all subsequent values will be skipped\\n                as we cannot properly compute the sum. \\n            `,\\n    },\\n  }\\n);\\n\";\n  export var __ADDS_MAP__ = {};\n  \n  /*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { storiesOf } from '@storybook/react'\nimport { withKnobs, boolean } from '@storybook/addon-knobs'\nimport { generateDrinkStats } from '@nivo/generators'\nimport { LineCanvas } from '../src'\n\nconst data = generateDrinkStats(32)\nconst commonProperties = {\n    width: 900,\n    height: 400,\n    margin: { top: 20, right: 20, bottom: 60, left: 80 },\n    data,\n    pointSize: 8,\n    pointColor: { theme: 'background' },\n    pointBorderWidth: 2,\n    pointBorderColor: { theme: 'background' },\n}\n\nconst stories = storiesOf('LineCanvas', module).addDecorator(withStorySource(__STORY__, __ADDS_MAP__))\n\nstories.addDecorator(withKnobs)\n\nstories.add('default', () => <LineCanvas {...commonProperties} />)\n\nstories.add(\n    'holes in data',\n    () => (\n        <LineCanvas\n            {...commonProperties}\n            data={[\n                {\n                    id: 'fake corp. A',\n                    data: [4, 8, 5, null, 2, 1, 4, null, 8, 9, 5].map((y, i) => ({\n                        x: `#${i}`,\n                        y,\n                    })),\n                },\n                {\n                    id: 'fake corp. B',\n                    data: [5, 9, 8, 6, 3, 1, 2, null, 5, 8, 4].map((y, i) => ({ x: `#${i}`, y })),\n                },\n            ]}\n            yScale={{\n                type: 'linear',\n                stacked: boolean('stacked', false),\n            }}\n            curve=\"monotoneX\"\n        />\n    ),\n    {\n        info: {\n            text: `You can skip portions of the lines by setting y value to \\`null\\`.`,\n        },\n    }\n)\n\nstories.add(\n    'different serie lengths',\n    () => (\n        <LineCanvas\n            {...commonProperties}\n            data={[\n                {\n                    id: 'fake corp. A',\n                    data: [\n                        { x: 0, y: 7 },\n                        { x: 1, y: 5 },\n                        { x: 2, y: 11 },\n                        { x: 3, y: 12 },\n                        { x: 4, y: 13 },\n                        { x: 5, y: null },\n                        { x: 6, y: 18 },\n                        { x: 7, y: 16 },\n                        { x: 8, y: 8 },\n                        { x: 9, y: 10 },\n                        { x: 10, y: 9 },\n                    ],\n                },\n                {\n                    id: 'fake corp. B',\n                    data: [\n                        { x: 3, y: 14 },\n                        { x: 4, y: 16 },\n                        { x: 5, y: 19 },\n                        { x: 6, y: 20 },\n                        { x: 7, y: 18 },\n                    ],\n                },\n            ]}\n            xScale={{\n                type: 'linear',\n                min: 0,\n                max: 'auto',\n            }}\n            yScale={{\n                type: 'linear',\n                stacked: false,\n            }}\n            curve=\"monotoneX\"\n            enableArea={true}\n        />\n    ),\n    {\n        info: {\n            text: `\n                Please note that when using stacked y scale with variable length/data holes,\n                if one of the y value is \\`null\\` all subsequent values will be skipped\n                as we cannot properly compute the sum. \n            `,\n        },\n    }\n)\n\n  "],"mappings":"AACA","sourceRoot":""}