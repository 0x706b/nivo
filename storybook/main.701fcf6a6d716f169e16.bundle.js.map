{"version":3,"file":"main.701fcf6a6d716f169e16.bundle.js","sources":["webpack:///./packages/heatmap/src/computeNodes.js"],"sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst isHoverTargetByType = {\n    cell: (node, current) => node.xKey === current.xKey && node.yKey === current.yKey,\n    row: (node, current) => node.yKey === current.yKey,\n    column: (node, current) => node.xKey === current.xKey,\n    rowColumn: (node, current) => node.xKey === current.xKey || node.yKey === current.yKey,\n}\n\nexport default ({\n    data,\n    keys,\n    getIndex,\n    xScale,\n    yScale,\n    sizeScale,\n    cellOpacity,\n    cellWidth,\n    cellHeight,\n    colorScale,\n    nanColor,\n    getLabelTextColor,\n\n    currentNode,\n    hoverTarget,\n    cellHoverOpacity,\n    cellHoverOthersOpacity,\n}) => {\n    const isHoverTarget = isHoverTargetByType[hoverTarget]\n\n    return data.reduce((acc, d) => {\n        keys.forEach(key => {\n            const width = sizeScale ? Math.min(sizeScale(d[key]) * cellWidth, cellWidth) : cellWidth\n            const height = sizeScale\n                ? Math.min(sizeScale(d[key]) * cellHeight, cellHeight)\n                : cellHeight\n\n            const node = {\n                key: `${key}.${getIndex(d)}`,\n                xKey: key,\n                yKey: getIndex(d),\n                x: xScale(key),\n                y: yScale(getIndex(d)),\n                width,\n                height,\n                value: d[key],\n                color: isNaN(d[key]) ? nanColor : colorScale(d[key]),\n            }\n\n            let opacity = cellOpacity\n            if (currentNode) {\n                opacity = isHoverTarget(node, currentNode)\n                    ? cellHoverOpacity\n                    : cellHoverOthersOpacity\n            }\n\n            acc.push(\n                Object.assign(node, {\n                    labelTextColor: getLabelTextColor(node),\n                    opacity,\n                })\n            )\n        })\n\n        return acc\n    }, [])\n}\n"],"mappings":"AASA","sourceRoot":""}