{"version":3,"file":"component---src-pages-radial-bar-index-tsx-f5d328b3b13f0ad6c02d.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-time/src/duration.js","webpack://nivo-website/../node_modules/d3-time/src/interval.js","webpack://nivo-website/./src/lib/settings.ts","webpack://nivo-website/./src/data/components/radial-bar/mapper.ts","webpack://nivo-website/./src/data/components/radial-bar/props.ts","webpack://nivo-website/./src/pages/radial-bar/index.tsx"],"sourcesContent":["export var durationSecond = 1e3;\nexport var durationMinute = 6e4;\nexport var durationHour = 36e5;\nexport var durationDay = 864e5;\nexport var durationWeek = 6048e5;","var t0 = new Date(),\n    t1 = new Date();\nexport default function newInterval(floori, offseti, count, field) {\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;\n  }\n\n  interval.floor = function (date) {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = function (date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function (date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function (date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function (start, stop, step) {\n    var range = [],\n        previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n\n    do {\n      range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    } while (previous < start && start < stop);\n\n    return range;\n  };\n\n  interval.filter = function (test) {\n    return newInterval(function (date) {\n      if (date >= date) while (floori(date), !test(date)) {\n        date.setTime(date - 1);\n      }\n    }, function (date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function (start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function (step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n        return field(d) % step === 0;\n      } : function (d) {\n        return interval.count(0, d) % step === 0;\n      });\n    };\n  }\n\n  return interval;\n}","import omit from 'lodash/omit'\nimport upperFirst from 'lodash/upperFirst'\n\nexport const settingsMapper =\n    (mapping: any, { exclude = [] } = {}) =>\n    (settings: any, options: any = {}) => {\n        const overrides: any = {}\n\n        Object.keys(settings).forEach(key => {\n            if (mapping[key]) {\n                overrides[key] = mapping[key](settings[key], settings, options)\n            }\n        })\n\n        return {\n            ...omit(settings, exclude),\n            ...overrides,\n        }\n    }\n\nexport const mapAxis = (type: string) => (value: any, settings: any) =>\n    settings[`axis${upperFirst(type)}`].enable ? omit(value, ['enable']) : null\n\nexport const mapFormat = ({ format, enabled }: { format: any; enabled: boolean }) =>\n    enabled ? format : undefined\n","import omit from 'lodash/omit'\nimport { settingsMapper, mapFormat } from '../../../lib/settings'\n\nexport const mapAxis = (key: string) => (value: any, settings: any) =>\n    settings[key].enable ? omit(value, ['enable']) : null\n\nexport default settingsMapper({\n    valueFormat: mapFormat,\n    radialAxisStart: mapAxis('radialAxisStart'),\n    radialAxisEnd: mapAxis('radialAxisEnd'),\n    circularAxisInner: mapAxis('circularAxisInner'),\n    circularAxisOuter: mapAxis('circularAxisOuter'),\n})\n","import { svgDefaultProps } from '@nivo/radial-bar'\nimport { arcTransitionModes } from '@nivo/arcs'\nimport {\n    themeProperty,\n    motionProperties,\n    groupProperties,\n    getLegendsProps,\n    polarAxisProperty,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'data',\n        group: 'Base',\n        type: 'object[]',\n        required: true,\n        help: 'Chart data.',\n        description: `\n            Here is what the data for a single chart with 2 bars would look like:\n            \n            \\`\\`\\`\n            [\n                {\n                    id: 'Fruits',\n                    data: [{ x: 'Apples', y: 32 }]\n                },\n                {\n                    id: 'Vegetables',\n                    data: [{ x: 'Eggplants', y: 27 }]\n                }\n            ]\n            \\`\\`\\`\n            \n            You can add several metrics per group:\n            \n            \\`\\`\\`\n            [\n                {\n                    id: 'Fruits',\n                    data: [\n                        { x: 'Apples', y: 32 },\n                        { x: 'Mangoes', y: 15 }\n                    ]\n                },\n                {\n                    id: 'Vegetables',\n                    data: [\n                        { x: 'Eggplants', y: 27 },\n                        { x: 'Avocados', y: 34 }\n                    ]\n                }\n            ]\n            \\`\\`\\`\n            \n            When a bar is computed, the \\`id\\` is going to be added\n            as the \\`groupId\\`, \\`x\\` as the \\`category\\` and \\`y\\`\n            as the value, for example the first bar for the number of Apples\n            in the Fruits group would be:\n            \n            \\`\\`\\`\n            {\n                groupId: 'Fruits',\n                category: 'Apples',\n                value: 32\n            }\n            \\`\\`\\`\n            \n            You might read those values when adding an \\`onClick\\` handler\n            for example, or when customizing the tooltip.\n        `,\n        flavors: ['svg'],\n    },\n    {\n        key: 'maxValue',\n        group: 'Base',\n        type: `'auto' | number`,\n        required: false,\n        help: `If 'auto', the max value is derived from the data, otherwise use a static value.`,\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.maxValue,\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        type: 'string | (value: number) => string',\n        required: false,\n        help: 'Optional formatter for values (`y`).',\n        description: `\n            The formatted value can then be used for labels & tooltips.\n\n            Under the hood, nivo uses [d3-format](https://github.com/d3/d3-format),\n            please have a look at it for available formats, you can also pass a function\n            which will receive the raw value and should return the formatted one.\n        `,\n        flavors: ['svg'],\n        controlType: 'valueFormat',\n    },\n    {\n        key: 'width',\n        group: 'Base',\n        type: 'number',\n        required: true,\n        help: 'Chart width.',\n        description: `\n            not required if using\n            \\`<ResponsiveRadialBar/>\\`.\n        `,\n        flavors: ['svg', 'api'],\n        enableControlForFlavors: ['api'],\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        group: 'Base',\n        type: 'number',\n        required: true,\n        help: 'Chart height.',\n        description: `\n            not required if using\n            \\`<ResponsiveRadialBar/>\\`.\n        `,\n        flavors: ['svg', 'api'],\n        enableControlForFlavors: ['api'],\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'margin',\n        group: 'Base',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        flavors: ['svg'],\n        controlType: 'margin',\n    },\n    {\n        key: 'startAngle',\n        group: 'Base',\n        type: 'number',\n        required: false,\n        help: 'Start angle (in degrees).',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.startAngle,\n        controlType: 'angle',\n        controlOptions: {\n            min: -360,\n            max: 360,\n            step: 5,\n        },\n    },\n    {\n        key: 'endAngle',\n        group: 'Base',\n        type: 'number',\n        required: false,\n        help: 'End angle (in degrees).',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.endAngle,\n        controlType: 'angle',\n        controlOptions: {\n            min: -360,\n            max: 360,\n            step: 5,\n        },\n    },\n    {\n        key: 'innerRadius',\n        group: 'Base',\n        help: `Donut if greater than 0. Value should be between 0~1 as it's a ratio from outer radius.`,\n        type: 'number',\n        required: false,\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.innerRadius,\n        controlType: 'range',\n        controlOptions: {\n            min: 0,\n            max: 0.95,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'padding',\n        group: 'Base',\n        type: 'number',\n        required: false,\n        help: 'Padding between each ring (ratio).',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.padding,\n        controlType: 'range',\n        controlOptions: {\n            min: 0,\n            max: 0.9,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'padAngle',\n        group: 'Base',\n        type: 'number',\n        required: false,\n        help: 'Padding between each bar.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.padAngle,\n        controlType: 'range',\n        controlOptions: {\n            unit: '°',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'cornerRadius',\n        group: 'Base',\n        type: 'number',\n        required: false,\n        help: 'Rounded corners.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.cornerRadius,\n        controlType: 'range',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    themeProperty(['svg']),\n    {\n        key: 'colors',\n        group: 'Style',\n        type: 'string | Function | string[]',\n        required: false,\n        help: 'Defines how to compute colors.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.colors,\n        controlType: 'ordinalColors',\n    },\n    {\n        key: 'borderWidth',\n        group: 'Style',\n        type: 'number',\n        required: false,\n        help: 'Bars border width.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.borderWidth,\n        controlType: 'lineWidth',\n    },\n    {\n        key: 'borderColor',\n        group: 'Style',\n        type: 'InheritedColorConfig<ComputedBar>',\n        required: false,\n        help: 'Method to compute border color.',\n        description: `\n            how to compute border color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.borderColor,\n        controlType: 'inheritedColor',\n    },\n    {\n        key: 'enableTracks',\n        group: 'Tracks',\n        type: 'boolean',\n        required: false,\n        help: 'Enable/disable tracks.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.enableTracks,\n        controlType: 'switch',\n    },\n    {\n        key: 'tracksColor',\n        group: 'Tracks',\n        type: 'string',\n        required: false,\n        help: 'Define tracks color.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.tracksColor,\n        controlType: 'colorPicker',\n    },\n    {\n        key: 'enableRadialGrid',\n        group: 'Grid & Axes',\n        type: 'boolean',\n        required: false,\n        help: 'Enable radial grid (rays)',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.enableRadialGrid,\n        controlType: 'switch',\n    },\n    {\n        key: 'enableCircularGrid',\n        group: 'Grid & Axes',\n        type: 'boolean',\n        required: false,\n        help: 'Enable circular grid (rings)',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.enableCircularGrid,\n        controlType: 'switch',\n    },\n    polarAxisProperty({\n        key: 'radialAxisStart',\n        flavors: ['svg'],\n        tickComponent: 'RadialAxisTickComponent',\n    }),\n    polarAxisProperty({\n        key: 'radialAxisEnd',\n        flavors: ['svg'],\n        tickComponent: 'RadialAxisTickComponent',\n    }),\n    polarAxisProperty({\n        key: 'circularAxisInner',\n        flavors: ['svg'],\n        tickComponent: 'CircularAxisTickComponent',\n    }),\n    polarAxisProperty({\n        key: 'circularAxisOuter',\n        flavors: ['svg'],\n        tickComponent: 'CircularAxisTickComponent',\n    }),\n    {\n        key: 'enableLabels',\n        group: 'Labels',\n        type: 'boolean',\n        required: false,\n        help: 'Enable/disable labels.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.enableLabels,\n        controlType: 'switch',\n    },\n    {\n        key: 'label',\n        group: 'Labels',\n        type: 'string | (bar: ComputedBar) => string',\n        required: false,\n        help: 'Defines how to get label text, can be a string (used to access current bar property) or a function which will receive the actual bar data.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.label,\n        controlType: 'choices',\n        controlOptions: {\n            choices: ['category', 'groupId', 'value', 'formattedValue'].map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n    {\n        key: 'labelsSkipAngle',\n        group: 'Labels',\n        type: 'number',\n        required: false,\n        help: `Skip label if corresponding arc's angle is lower than provided value.`,\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.labelsSkipAngle,\n        controlType: 'range',\n        controlOptions: {\n            unit: '°',\n            min: 0,\n            max: 45,\n            step: 1,\n        },\n    },\n    {\n        key: 'labelsRadiusOffset',\n        group: 'Labels',\n        type: 'number',\n        required: false,\n        help: `\n            Define the radius to use to determine the label position, starting from inner radius,\n            this is expressed as a ratio. Centered at 0.5 by default.\n        `,\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.labelsRadiusOffset,\n        controlType: 'range',\n        controlOptions: {\n            min: 0,\n            max: 2,\n            step: 0.05,\n        },\n    },\n    {\n        key: 'labelsTextColor',\n        group: 'Labels',\n        help: 'Defines how to compute label text color.',\n        type: 'string | object | Function',\n        required: false,\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.labelsTextColor,\n        controlType: 'inheritedColor',\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        type: '(RadialBarLayerId | RadialBarCustomLayer)[]',\n        required: false,\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer should be a component.\n            \n            The component will receive properties as defined in\n            the \\`RadialBarCustomLayerProps\\` interface\n            and must return a valid SVG element.\n        `,\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.layers,\n    },\n    {\n        key: 'isInteractive',\n        group: 'Interactivity',\n        type: 'boolean',\n        required: false,\n        help: 'Enable/disable interactivity.',\n        flavors: ['svg'],\n        defaultValue: svgDefaultProps.isInteractive,\n        controlType: 'switch',\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: 'RadialBarTooltipComponent',\n        required: false,\n        help: 'Override default tooltip.',\n        flavors: ['svg'],\n    },\n    {\n        key: 'onClick',\n        group: 'Interactivity',\n        type: '(bar: ComputedBar, event: MouseEvent) => void',\n        required: false,\n        help: 'onClick handler.',\n        flavors: ['svg'],\n    },\n    {\n        key: 'onMouseEnter',\n        group: 'Interactivity',\n        type: '(bar: ComputedBar, event: MouseEvent) => void',\n        required: false,\n        help: 'onMouseEnter handler.',\n        flavors: ['svg'],\n    },\n    {\n        key: 'onMouseMove',\n        group: 'Interactivity',\n        type: '(bar: ComputedBar, event: MouseEvent) => void',\n        required: false,\n        help: 'onMouseMove handler.',\n        flavors: ['svg'],\n    },\n    {\n        key: 'onMouseLeave',\n        group: 'Interactivity',\n        type: '(bar: ComputedBar, event: MouseEvent) => void',\n        required: false,\n        help: 'onMouseLeave handler.',\n        flavors: ['svg'],\n    },\n    {\n        key: 'legends',\n        group: 'Legends',\n        type: 'LegendProps[]',\n        required: false,\n        help: `Optional chart's legends.`,\n        flavors: ['svg'],\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            svgDefaultProps: {\n                dataFrom: 'keys',\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n    {\n        key: 'role',\n        group: 'Accessibility',\n        type: 'string',\n        required: false,\n        help: 'Main element role attribute.',\n        flavors: ['svg'],\n    },\n    {\n        key: 'ariaLabel',\n        group: 'Accessibility',\n        type: 'string',\n        required: false,\n        help: 'Main element [aria-label](https://www.w3.org/TR/wai-aria/#aria-label).',\n        flavors: ['svg'],\n    },\n    {\n        key: 'ariaLabelledBy',\n        group: 'Accessibility',\n        type: 'string',\n        required: false,\n        help: 'Main element [aria-labelledby](https://www.w3.org/TR/wai-aria/#aria-labelledby).',\n        flavors: ['svg'],\n    },\n    {\n        key: 'ariaDescribedBy',\n        group: 'Accessibility',\n        type: 'string',\n        required: false,\n        help: 'Main element [aria-describedby](https://www.w3.org/TR/wai-aria/#aria-describedby).',\n        flavors: ['svg'],\n    },\n    ...motionProperties(['svg'], svgDefaultProps, 'react-spring'),\n    {\n        key: 'transitionMode',\n        flavors: ['svg'],\n        help: 'Define how transitions behave.',\n        type: 'string',\n        required: false,\n        defaultValue: svgDefaultProps.transitionMode,\n        controlType: 'choices',\n        group: 'Motion',\n        controlOptions: {\n            choices: arcTransitionModes.map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n]\n\nexport const groups = groupProperties(props)\n","import React from 'react'\nimport { ResponsiveRadialBar, RadialBarSvgProps, svgDefaultProps } from '@nivo/radial-bar'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/radial-bar/meta.yml'\nimport mapper from '../../data/components/radial-bar/mapper'\nimport { groups } from '../../data/components/radial-bar/props'\n\ntype MappedRadarProps = Omit<RadialBarSvgProps, 'data' | 'width' | 'height'>\ntype UnmappedRadarProps = Omit<\n    MappedRadarProps,\n    'valueFormat' | 'radialAxisStart' | 'radialAxisEnd' | 'circularAxisInner' | 'circularAxisOuter'\n> & {\n    valueFormat: {\n        format: string\n        enabled: boolean\n    }\n    radialAxisStart: { enable: boolean } & RadialBarSvgProps['radialAxisStart']\n    radialAxisEnd: { enable: boolean } & RadialBarSvgProps['radialAxisEnd']\n    circularAxisInner: { enable: boolean } & RadialBarSvgProps['circularAxisInner']\n    circularAxisOuter: { enable: boolean } & RadialBarSvgProps['circularAxisOuter']\n}\n\nconst initialProperties: UnmappedRadarProps = {\n    valueFormat: { format: '>-.2f', enabled: true },\n\n    startAngle: svgDefaultProps.startAngle,\n    endAngle: svgDefaultProps.endAngle,\n    innerRadius: svgDefaultProps.innerRadius,\n    padding: 0.4,\n    padAngle: svgDefaultProps.padAngle,\n    cornerRadius: 2,\n\n    margin: {\n        top: 40,\n        right: 120,\n        bottom: 40,\n        left: 40,\n    },\n\n    colors: svgDefaultProps.colors,\n    borderWidth: svgDefaultProps.borderWidth,\n    borderColor: svgDefaultProps.borderColor,\n\n    enableTracks: svgDefaultProps.enableTracks,\n    tracksColor: svgDefaultProps.tracksColor,\n\n    enableRadialGrid: svgDefaultProps.enableRadialGrid,\n    enableCircularGrid: svgDefaultProps.enableCircularGrid,\n    radialAxisStart: {\n        enable: true,\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n    },\n    radialAxisEnd: {\n        enable: false,\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n    },\n    circularAxisInner: {\n        enable: false,\n        tickSize: 5,\n        tickPadding: 12,\n        tickRotation: 0,\n    },\n    circularAxisOuter: {\n        enable: true,\n        tickSize: 5,\n        tickPadding: 12,\n        tickRotation: 0,\n    },\n\n    enableLabels: svgDefaultProps.enableLabels,\n    label: svgDefaultProps.label,\n    labelsSkipAngle: svgDefaultProps.labelsSkipAngle,\n    labelsRadiusOffset: svgDefaultProps.labelsRadiusOffset,\n    labelsTextColor: svgDefaultProps.labelsTextColor,\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n    transitionMode: svgDefaultProps.transitionMode,\n\n    isInteractive: svgDefaultProps.isInteractive,\n\n    legends: [\n        {\n            anchor: 'right',\n            direction: 'column',\n            justify: false,\n            translateX: 80,\n            translateY: 0,\n            itemsSpacing: 6,\n            itemDirection: 'left-to-right',\n            itemWidth: 100,\n            itemHeight: 18,\n            itemTextColor: '#999',\n            symbolSize: 18,\n            symbolShape: 'square',\n            onClick: d => {\n                alert(JSON.stringify(d, null, '    '))\n            },\n            effects: [\n                {\n                    on: 'hover',\n                    style: {\n                        itemTextColor: '#000',\n                    },\n                },\n            ],\n        },\n    ],\n}\n\nconst generateData = () => {\n    const ids = ['Supermarket', 'Combini', 'Online']\n    if (Math.random() > 0.5) {\n        ids.push('Marché')\n    }\n\n    const categories = ['Vegetables', 'Fruits', 'Meat']\n    if (Math.random() < 0.5) {\n        categories.push('Fish')\n    }\n\n    return ids.map(id => ({\n        id,\n        data: categories.map(category => ({\n            x: category,\n            y: Math.round(Math.random() * 300),\n        })),\n    }))\n}\n\nconst RadialBar = () => (\n    <ComponentTemplate<UnmappedRadarProps, MappedRadarProps, any>\n        name=\"RadialBar\"\n        meta={meta.RadialBar}\n        icon=\"radial-bar\"\n        flavors={meta.flavors}\n        currentFlavor=\"svg\"\n        properties={groups}\n        initialProperties={initialProperties}\n        defaultProperties={svgDefaultProps}\n        propertiesMapper={mapper}\n        generateData={generateData}\n    >\n        {(properties, data, theme, logAction) => (\n            <ResponsiveRadialBar\n                data={data}\n                {...properties}\n                theme={theme}\n                onClick={bar => {\n                    logAction({\n                        type: 'click',\n                        label: `${bar.category} - ${bar.groupId}: ${bar.value}`,\n                        color: bar.color,\n                        data: bar,\n                    })\n                }}\n            />\n        )}\n    </ComponentTemplate>\n)\n\nexport default RadialBar\n"],"names":["durationSecond","durationMinute","durationHour","durationDay","durationWeek","t0","Date","t1","newInterval","floori","offseti","count","field","interval","date","arguments","length","floor","ceil","round","d0","d1","offset","step","Math","range","start","stop","previous","push","filter","test","setTime","end","every","isFinite","d","settingsMapper","mapping","exclude","settings","options","overrides","Object","keys","forEach","key","omit","mapAxis","type","value","upperFirst","enable","mapFormat","format","enabled","undefined","valueFormat","radialAxisStart","radialAxisEnd","circularAxisInner","circularAxisOuter","props","group","required","help","description","flavors","defaultValue","svgDefaultProps","controlType","enableControlForFlavors","controlOptions","unit","min","max","themeProperty","polarAxisProperty","tickComponent","choices","map","choice","label","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","dataFrom","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","data","alert","JSON","stringify","motionProperties","arcTransitionModes","groups","groupProperties","initialProperties","startAngle","endAngle","innerRadius","padding","padAngle","cornerRadius","margin","top","right","bottom","left","colors","borderWidth","borderColor","enableTracks","tracksColor","enableRadialGrid","enableCircularGrid","tickSize","tickPadding","tickRotation","enableLabels","labelsSkipAngle","labelsRadiusOffset","labelsTextColor","animate","motionConfig","transitionMode","isInteractive","legends","itemTextColor","symbolShape","effects","on","style","generateData","ids","random","categories","id","category","x","y","ComponentTemplate","name","meta","icon","currentFlavor","properties","defaultProperties","propertiesMapper","mapper","theme","logAction","bar","groupId","color"],"sourceRoot":""}