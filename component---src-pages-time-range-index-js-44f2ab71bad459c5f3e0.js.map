{"version":3,"sources":["webpack:///../node_modules/lodash/_baseIsDate.js","webpack:///./src/data/components/time-range/mapper.js","webpack:///./src/data/components/time-range/props.js","webpack:///./src/pages/time-range/index.js","webpack:///../node_modules/lodash/isDate.js"],"names":["baseGetTag","isObjectLike","module","exports","value","TooltipWrapper","styled","div","TooltipKey","span","CustomTooltip","day","style","color","coordinates","x","y","height","width","settingsMapper","tooltip","values","exclude","props","key","group","help","description","type","required","enableControlForFlavors","controlType","controlOptions","unit","min","max","step","defaultValue","defaults","direction","choices","label","align","boxAlignments","map","minValue","disabledValue","maxValue","themeProperty","colors","monthLegendPosition","monthLegendOffset","weekdayLegendOffset","square","dayRadius","daySpacing","dayBorderWidth","dayBorderColor","isInteractive","flavors","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","justify","itemCount","itemWidth","itemHeight","itemsSpacing","itemDirection","translateX","translateY","symbolSize","onClick","data","alert","JSON","stringify","groups","groupProperties","Tooltip","from","Date","to","generateData","generateOrderedDayCounts","initialProperties","emptyColor","margin","top","right","bottom","left","legends","TimeRange","ComponentTemplate","name","meta","icon","currentFlavor","properties","defaultProperties","timeRangeDefaultProps","propertiesMapper","mapper","codePropertiesMapper","undefined","theme","logAction","baseIsDate","baseUnary","nodeUtil","nodeIsDate","isDate"],"mappings":"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","file":"component---src-pages-time-range-index-js-44f2ab71bad459c5f3e0.js","sourcesContent":["var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar dateTag = '[object Date]';\n\n/**\n * The base implementation of `_.isDate` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n */\nfunction baseIsDate(value) {\n  return isObjectLike(value) && baseGetTag(value) == dateTag;\n}\n\nmodule.exports = baseIsDate;\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport styled from 'styled-components'\nimport { settingsMapper } from '../../../lib/settings'\n\nconst TooltipWrapper = styled.div`\n    display: grid;\n    background: #333;\n    padding: 10px;\n    border-radius: 4px;\n    grid-template-columns: 100px 1fr;\n    grid-column-gap: 12px;\n`\nconst TooltipKey = styled.span`\n    font-weight: 600;\n`\n\nconst CustomTooltip = day => {\n    return (\n        <TooltipWrapper style={{ color: day.color }}>\n            <TooltipKey>day</TooltipKey>\n            <span>{day.day}</span>\n            <TooltipKey>value</TooltipKey>\n            <span>{day.value}</span>\n            <TooltipKey>coordinates.x</TooltipKey>\n            <span>{day.coordinates.x}</span>\n            <TooltipKey>coordinates.y</TooltipKey>\n            <span>{day.coordinates.y}</span>\n            <TooltipKey>height</TooltipKey>\n            <span>{day.height}</span>\n            <TooltipKey>width</TooltipKey>\n            <span>{day.width}</span>\n        </TooltipWrapper>\n    )\n}\n\nexport default settingsMapper(\n    {\n        tooltip: (value, values) => {\n            if (!values['custom tooltip example']) return undefined\n\n            return CustomTooltip\n        },\n    },\n    {\n        exclude: ['custom tooltip example'],\n    }\n)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { boxAlignments } from '@nivo/core'\nimport { timeRangeDefaultProps as defaults } from '@nivo/calendar'\nimport { themeProperty, getLegendsProps, groupProperties } from '../../../lib/componentProperties'\n\nconst props = [\n    {\n        key: 'data',\n        group: 'Base',\n        help: 'Chart data.',\n        description: `\n            Chart data, which must conform to this structure:\n            \\`\\`\\`\n            Array<{\n                day:   string, // format must be YYYY-MM-DD\n                value: number\n            }>\n            \\`\\`\\`\n            You can also add arbitrary data to this structure\n            to be used in tooltips or event handlers.\n        `,\n        type: 'object[]',\n        required: true,\n    },\n    {\n        key: 'from',\n        group: 'Base',\n        help: 'start date',\n        type: 'string | Date',\n        required: true,\n    },\n    {\n        key: 'to',\n        group: 'Base',\n        help: 'end date',\n        type: 'string | Date',\n        required: true,\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            not required if using responsive alternative of\n            the component \\`<Responsive*/>\\`.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            not required if using responsive alternative of\n            the component \\`<Responsive*/>\\`.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'direction',\n        help: 'defines calendar layout direction.',\n        type: 'string',\n        required: false,\n        defaultValue: defaults.direction,\n        controlType: 'radio',\n        group: 'Base',\n        controlOptions: {\n            choices: [\n                { label: 'horizontal', value: 'horizontal' },\n                { label: 'vertical', value: 'vertical' },\n            ],\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    {\n        key: 'align',\n        help: 'defines how calendar should be aligned inside chart container.',\n        type: 'string',\n        required: false,\n        defaultValue: defaults.align,\n        controlType: 'boxAnchor',\n        group: 'Base',\n        controlOptions: {\n            choices: boxAlignments.map(align => ({\n                label: align,\n                value: align,\n            })),\n        },\n    },\n    {\n        key: 'minValue',\n        help: 'Minimum value.',\n        description: `\n            Minimum value. If 'auto', will pick the lowest value\n            in the provided data set.\n            Should be overriden if your data set does not contain\n            desired lower bound value.\n        `,\n        required: false,\n        defaultValue: defaults.minValue,\n        type: `number | 'auto'`,\n        controlType: 'switchableRange',\n        group: 'Base',\n        controlOptions: {\n            disabledValue: 'auto',\n            defaultValue: 0,\n            min: -300,\n            max: 300,\n        },\n    },\n    {\n        key: 'maxValue',\n        help: 'Maximum value.',\n        description: `\n            Maximum value. If 'auto', will pick the highest value\n            in the provided data set.\n            Should be overriden if your data set does not contain\n            desired higher bound value.\n        `,\n        required: false,\n        defaultValue: defaults.maxValue,\n        type: `number | 'auto'`,\n        controlType: 'switchableRange',\n        group: 'Base',\n        controlOptions: {\n            disabledValue: 'auto',\n            defaultValue: 100,\n            min: 0,\n            max: 600,\n        },\n    },\n    themeProperty,\n    {\n        key: 'colors',\n        group: 'Style',\n        help: 'Cell colors.',\n        description: `\n            An array of colors to be used in conjunction with\n            \\`domain\\` to compute days' color.\n            It applies to days having a value defined, otherwise,\n            \\`emptyColor\\` will be used.\n        `,\n        type: 'string[]',\n        required: false,\n        defaultValue: defaults.colors,\n    },\n    // Months\n    {\n        key: 'monthLegend',\n        help: `can be used to customize months label, returns abbreviated month name (english) by default. This can be used to use a different language`,\n        type: '(year: number, month: number, date: Date) => string | number',\n        required: false,\n        group: 'Months',\n    },\n    {\n        key: 'monthLegendPosition',\n        help: 'defines month legends position.',\n        type: `'before' | 'after'`,\n        required: false,\n        defaultValue: defaults.monthLegendPosition,\n        controlType: 'radio',\n        group: 'Months',\n        controlOptions: {\n            choices: [\n                { label: 'before', value: 'before' },\n                { label: 'after', value: 'after' },\n            ],\n        },\n    },\n    {\n        key: 'monthLegendOffset',\n        help: 'define offset from month edge to its label.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.monthLegendOffset,\n        controlType: 'range',\n        group: 'Months',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 36,\n        },\n    },\n    // Weekday\n    {\n        key: 'weekdayLegendOffset',\n        help: 'define offset from weekday edge to its label.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.weekdayLegendOffset,\n        controlType: 'range',\n        group: 'Weekday',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 100,\n        },\n    },\n    // Days\n    {\n        key: 'square',\n        help: 'force day cell into square shape',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.square,\n        controlType: 'switch',\n        group: 'Days',\n    },\n    {\n        key: 'dayRadius',\n        help: 'define border radius of each day cell.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.dayRadius,\n        controlType: 'range',\n        group: 'Days',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 20,\n        },\n    },\n    {\n        key: 'daySpacing',\n        help: 'define spacing between each day cell.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.daySpacing,\n        controlType: 'range',\n        group: 'Days',\n        controlOptions: {\n            unit: 'px',\n            min: 0,\n            max: 20,\n        },\n    },\n    {\n        key: 'dayBorderWidth',\n        help: 'width of days border.',\n        type: 'number',\n        required: false,\n        defaultValue: defaults.dayBorderWidth,\n        controlType: 'lineWidth',\n        group: 'Days',\n    },\n    {\n        key: 'dayBorderColor',\n        help: 'color to use for days border.',\n        type: 'string',\n        required: false,\n        defaultValue: defaults.dayBorderColor,\n        controlType: 'colorPicker',\n        group: 'Days',\n    },\n    {\n        key: 'isInteractive',\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.isInteractive,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'onClick',\n        group: 'Interactivity',\n        help: 'onClick handler, it receives clicked day data and mouse event.',\n        type: '(day, event) => void',\n        required: false,\n    },\n    {\n        key: 'tooltip',\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom tooltip component.',\n        description: `\n            A function allowing complete tooltip customisation, it must return a valid HTML\n            element and will receive the following data:\n            \\`\\`\\`\n            {\n                day:     string,\n                date:    {Date},\n                value:   number,\n                color:   string,\n                coordinates: {\n                    x: number,\n                    y: number,\n                },\n                height:  number\n                width:   number\n            }\n            \\`\\`\\`\n            You can also customize the tooltip style\n            using the \\`theme.tooltip\\` object.\n        `,\n    },\n    {\n        key: 'custom tooltip example',\n        help: 'Showcase custom tooltip.',\n        type: 'boolean',\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'legends',\n        flavors: ['svg'],\n        type: 'LegendProps[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                anchor: 'bottom-right',\n                direction: 'row',\n                justify: false,\n                itemCount: 4,\n                itemWidth: 42,\n                itemHeight: 36,\n                itemsSpacing: 14,\n                itemDirection: 'right-to-left',\n                translateX: -85,\n                translateY: -240,\n                symbolSize: 20,\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n]\n\nexport const groups = groupProperties(props)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveTimeRange, timeRangeDefaultProps } from '@nivo/calendar'\nimport { generateOrderedDayCounts } from '@nivo/generators'\nimport ComponentTemplate from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/time-range/meta.yml'\nimport mapper from '../../data/components/time-range/mapper'\nimport { groups } from '../../data/components/time-range/props'\n\nconst Tooltip = data => {\n    /* return custom tooltip */\n}\n\nconst from = new Date(2018, 3, 1)\nconst to = new Date(2018, 7, 12)\nconst generateData = () => generateOrderedDayCounts(from, to)\n\nconst initialProperties = {\n    from: '2018-04-01',\n    to: '2018-08-12',\n\n    align: 'center',\n    emptyColor: '#eeeeee',\n    colors: ['#61cdbb', '#97e3d5', '#e8c1a0', '#f47560'],\n    minValue: 0,\n    maxValue: 'auto',\n\n    margin: {\n        top: 40,\n        right: 40,\n        bottom: 100,\n        left: 40,\n    },\n    direction: 'horizontal',\n\n    monthLegendPosition: 'before',\n    monthLegendOffset: 10,\n\n    weekdayLegendOffset: 75,\n\n    square: true,\n    dayRadius: 0,\n    daySpacing: 0,\n    dayBorderWidth: 2,\n    dayBorderColor: '#ffffff',\n\n    isInteractive: true,\n    'custom tooltip example': false,\n    tooltip: null,\n\n    legends: [\n        {\n            anchor: 'bottom-right',\n            direction: 'row',\n            justify: false,\n            itemCount: 4,\n            itemWidth: 42,\n            itemHeight: 36,\n            itemsSpacing: 14,\n            itemDirection: 'right-to-left',\n            translateX: -85,\n            translateY: -240,\n            symbolSize: 20,\n        },\n    ],\n}\n\nconst TimeRange = () => {\n    return (\n        <ComponentTemplate\n            name=\"TimeRange\"\n            meta={meta.TimeRange}\n            icon=\"time-range\"\n            flavors={meta.flavors}\n            currentFlavor=\"svg\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={timeRangeDefaultProps}\n            propertiesMapper={mapper}\n            codePropertiesMapper={properties => ({\n                ...properties,\n                tooltip: properties.tooltip ? Tooltip : undefined,\n            })}\n            generateData={generateData}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveTimeRange\n                        data={data}\n                        {...properties}\n                        theme={theme}\n                        onClick={day => {\n                            logAction({\n                                type: 'click',\n                                label: `[day] ${day.day}: ${day.value}`,\n                                color: day.color,\n                                data: day,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default TimeRange\n","var baseIsDate = require('./_baseIsDate'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsDate = nodeUtil && nodeUtil.isDate;\n\n/**\n * Checks if `value` is classified as a `Date` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n * @example\n *\n * _.isDate(new Date);\n * // => true\n *\n * _.isDate('Mon April 23 2012');\n * // => false\n */\nvar isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\nmodule.exports = isDate;\n"],"sourceRoot":""}