{"version":3,"file":"component---src-pages-treemap-index-js-6cdea9e50708d8c48002.js","mappings":"yMAQMA,EAAe,kBAAMC,EAAAA,EAAAA,KAAuBC,MAE5CC,EAAoB,CACtBC,SAAU,OACVC,MAAO,MACPC,YAAa,CAAEC,OAAQ,OAAQC,SAAS,GACxCC,KAAMC,EAAAA,GAAAA,KACNC,WAAYD,EAAAA,GAAAA,WACZE,aAAcF,EAAAA,GAAAA,aACdG,aAAcH,EAAAA,GAAAA,aAEdI,OAAQ,CACJC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,IAGVC,aAAa,EACbC,MAAOV,EAAAA,GAAAA,MACPW,cAAe,GACfC,eAAgB,CACZC,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU,OAE3BC,YAAaf,EAAAA,GAAAA,YACbgB,kBAAmBhB,EAAAA,GAAAA,kBACnBiB,YAAajB,EAAAA,GAAAA,YACbkB,gBAAiBlB,EAAAA,GAAAA,gBACjBmB,oBAAqBnB,EAAAA,GAAAA,oBACrBoB,mBAAoBpB,EAAAA,GAAAA,mBACpBqB,qBAAsB,CAClBR,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU,KAG3BQ,OAAQtB,EAAAA,GAAAA,OACRuB,QAASvB,EAAAA,GAAAA,QACTwB,YAAaxB,EAAAA,GAAAA,YACbyB,YAAazB,EAAAA,GAAAA,YACb0B,YAAa,CACTb,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU,MAG3Ba,QAAS3B,EAAAA,GAAAA,QACT4B,aAAc5B,EAAAA,GAAAA,aAEd6B,cAAe7B,EAAAA,GAAAA,eAwCnB,UArCgB,WACZ,OACI,gBAAC,IAAD,CACI8B,KAAK,UACLC,KAAMA,EAAAA,GACNC,KAAK,UACLC,QAASF,EAAAA,GACTG,cAAc,MACdC,WAAYC,EAAAA,EACZ3C,kBAAmBA,EACnB4C,kBAAmBrC,EAAAA,GACnBsC,iBAAkBC,EAAAA,EAClBjD,aAAcA,IAEb,SAAC6C,EAAYK,EAAMC,EAAOC,GACvB,OACI,gBAAC,KAAD,eACIF,KAAMA,GACFL,EAFR,CAGIM,MAAOA,EACPE,QAAS,SAAAC,GACLF,EAAU,CACNG,KAAM,QACNnC,MAAM,UAAWkC,EAAKE,eAAeC,KAAK,OAArC,KACDH,EAAKI,eAETC,MAAOL,EAAKK,MACZT,KAAMI","sources":["webpack://nivo-website/./src/pages/treemap/index.js"],"sourcesContent":["import React from 'react'\nimport { ResponsiveTreeMap, TreeMapDefaultProps } from '@nivo/treemap'\nimport { ComponentTemplate } from '../../components/components/ComponentTemplate'\nimport meta from '../../data/components/treemap/meta.yml'\nimport mapper from '../../data/components/treemap/mapper'\nimport { groups } from '../../data/components/treemap/props'\nimport { generateLightDataSet } from '../../data/components/treemap/generator'\n\nconst generateData = () => generateLightDataSet().root\n\nconst initialProperties = {\n    identity: 'name',\n    value: 'loc',\n    valueFormat: { format: '.02s', enabled: true },\n    tile: TreeMapDefaultProps.tile,\n    leavesOnly: TreeMapDefaultProps.leavesOnly,\n    innerPadding: TreeMapDefaultProps.innerPadding,\n    outerPadding: TreeMapDefaultProps.outerPadding,\n\n    margin: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10,\n    },\n\n    enableLabel: true,\n    label: TreeMapDefaultProps.label,\n    labelSkipSize: 12,\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 1.2]],\n    },\n    orientLabel: TreeMapDefaultProps.orientLabel,\n    enableParentLabel: TreeMapDefaultProps.enableParentLabel,\n    parentLabel: TreeMapDefaultProps.parentLabel,\n    parentLabelSize: TreeMapDefaultProps.parentLabelSize,\n    parentLabelPosition: TreeMapDefaultProps.parentLabelPosition,\n    parentLabelPadding: TreeMapDefaultProps.parentLabelPadding,\n    parentLabelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 2]],\n    },\n\n    colors: TreeMapDefaultProps.colors,\n    colorBy: TreeMapDefaultProps.colorBy,\n    nodeOpacity: TreeMapDefaultProps.nodeOpacity,\n    borderWidth: TreeMapDefaultProps.borderWidth,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.1]],\n    },\n\n    animate: TreeMapDefaultProps.animate,\n    motionConfig: TreeMapDefaultProps.motionConfig,\n\n    isInteractive: TreeMapDefaultProps.isInteractive,\n}\n\nconst TreeMap = () => {\n    return (\n        <ComponentTemplate\n            name=\"TreeMap\"\n            meta={meta.TreeMap}\n            icon=\"treemap\"\n            flavors={meta.flavors}\n            currentFlavor=\"svg\"\n            properties={groups}\n            initialProperties={initialProperties}\n            defaultProperties={TreeMapDefaultProps}\n            propertiesMapper={mapper}\n            generateData={generateData}\n        >\n            {(properties, data, theme, logAction) => {\n                return (\n                    <ResponsiveTreeMap\n                        data={data}\n                        {...properties}\n                        theme={theme}\n                        onClick={node => {\n                            logAction({\n                                type: 'click',\n                                label: `[node] ${node.pathComponents.join(' / ')}: ${\n                                    node.formattedValue\n                                }`,\n                                color: node.color,\n                                data: node,\n                            })\n                        }}\n                    />\n                )\n            }}\n        </ComponentTemplate>\n    )\n}\n\nexport default TreeMap\n"],"names":["generateData","generateLightDataSet","root","initialProperties","identity","value","valueFormat","format","enabled","tile","TreeMapDefaultProps","leavesOnly","innerPadding","outerPadding","margin","top","right","bottom","left","enableLabel","label","labelSkipSize","labelTextColor","from","modifiers","orientLabel","enableParentLabel","parentLabel","parentLabelSize","parentLabelPosition","parentLabelPadding","parentLabelTextColor","colors","colorBy","nodeOpacity","borderWidth","borderColor","animate","motionConfig","isInteractive","name","meta","icon","flavors","currentFlavor","properties","groups","defaultProperties","propertiesMapper","mapper","data","theme","logAction","onClick","node","type","pathComponents","join","formattedValue","color"],"sourceRoot":""}