{"version":3,"file":"625f5087352921ca901d9feee83da1743689cf5e-09459ba8e53293c47951.js","mappings":"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","sources":["webpack://nivo-website/../node_modules/d3-time/src/duration.js","webpack://nivo-website/../node_modules/d3-time/src/interval.js","webpack://nivo-website/./src/data/components/chord/props.ts","webpack://nivo-website/../src/svg/symbols/SymbolTriangle.tsx","webpack://nivo-website/../src/compute.ts","webpack://nivo-website/../src/svg/LegendSvgItem.tsx","webpack://nivo-website/../src/svg/symbols/SymbolCircle.tsx","webpack://nivo-website/../src/svg/symbols/SymbolDiamond.tsx","webpack://nivo-website/../src/svg/symbols/SymbolSquare.tsx","webpack://nivo-website/../src/svg/LegendSvg.tsx","webpack://nivo-website/../src/svg/BoxLegendSvg.tsx","webpack://nivo-website/../src/canvas.ts","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/props.ts","webpack://nivo-website/./src/data/components/chord/mapper.js"],"sourcesContent":["export var durationSecond = 1e3;\nexport var durationMinute = 6e4;\nexport var durationHour = 36e5;\nexport var durationDay = 864e5;\nexport var durationWeek = 6048e5;","var t0 = new Date(),\n    t1 = new Date();\nexport default function newInterval(floori, offseti, count, field) {\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;\n  }\n\n  interval.floor = function (date) {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = function (date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function (date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function (date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function (start, stop, step) {\n    var range = [],\n        previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n\n    do {\n      range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    } while (previous < start && start < stop);\n\n    return range;\n  };\n\n  interval.filter = function (test) {\n    return newInterval(function (date) {\n      if (date >= date) while (floori(date), !test(date)) {\n        date.setTime(date - 1);\n      }\n    }, function (date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function (start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function (step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n        return field(d) % step === 0;\n      } : function (d) {\n        return interval.count(0, d) % step === 0;\n      });\n    };\n  }\n\n  return interval;\n}","import { ChordDefaultProps as defaults } from '@nivo/chord'\nimport {\n    themeProperty,\n    motionProperties,\n    groupProperties,\n    getLegendsProps,\n} from '../../../lib/componentProperties'\nimport { ChartProperty } from '../../../types'\n\nconst props: ChartProperty[] = [\n    {\n        key: 'keys',\n        group: 'Base',\n        help: 'Keys used to identify each cell in the matrix.',\n        description: `\n            Keys used to identify each cell in the matrix,\n            for example given this matrix:\n            \\`\\`\\`\n            [ [123, 37,  99 ],\n              [75,  103, 82 ],\n              [37,  65,  109] ]\n            \\`\\`\\`\n            and those keys:\n            \\`\\`\\`\n            ['John', 'Jane', 'Raoul']\n            \\`\\`\\`\n            it will result in the following mapping:\n            \\`\\`\\`\n            [ [null,    'John', 'Jane',  'Raoul']\n              ['John',   123,    37,      99    ],\n              ['Jane',   75,     103,     82    ],\n              ['Raoul',  37,     65,      109   ] ]\n            \\`\\`\\`\n        `,\n        required: true,\n        type: 'string[]',\n    },\n    {\n        key: 'matrix',\n        group: 'Base',\n        help: 'The matrix used to compute the chord diagram.',\n        description: `\n            The matrix used to compute the chord diagram,\n            it must be a square matrix, meaning each row length\n            must equal the row count.\n        `,\n        required: true,\n        type: 'Array<number[]>',\n    },\n    {\n        key: 'valueFormat',\n        group: 'Base',\n        type: 'string | Function',\n        required: false,\n        help: `Optional value formatter.`,\n    },\n    {\n        key: 'width',\n        enableControlForFlavors: ['api'],\n        help: 'Chart width.',\n        description: `\n            not required if using\n            \\`<ResponsiveChord/>\\`.\n            Also note that width does not include labels,\n            so you should add enough margin to display them.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'height',\n        enableControlForFlavors: ['api'],\n        help: 'Chart height.',\n        description: `\n            not required if using\n            \\`<ResponsiveChord/>\\`.\n            Also note that width does not include labels,\n            so you should add enough margin to display them.\n        `,\n        type: 'number',\n        required: true,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            unit: 'px',\n            min: 100,\n            max: 1000,\n            step: 5,\n        },\n    },\n    {\n        key: 'pixelRatio',\n        flavors: ['canvas'],\n        help: `Adjust pixel ratio, useful for HiDPI screens.`,\n        required: false,\n        defaultValue: 'Depends on device',\n        type: `number`,\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 1,\n            max: 2,\n        },\n    },\n    {\n        key: 'margin',\n        help: 'Chart margin.',\n        type: 'object',\n        required: false,\n        controlType: 'margin',\n        group: 'Base',\n    },\n    {\n        key: 'padAngle',\n        help: 'Padding angle.',\n        required: false,\n        defaultValue: defaults.padAngle,\n        type: 'number',\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 1,\n            step: 0.01,\n        },\n    },\n    {\n        key: 'innerRadiusRatio',\n        help: 'Inner radius ratio.',\n        required: false,\n        defaultValue: defaults.innerRadiusRatio,\n        type: 'number',\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 1,\n            step: 0.01,\n        },\n    },\n    {\n        key: 'innerRadiusOffset',\n        help: 'Inner radius offset (minus innerRadiusRatio).',\n        required: false,\n        defaultValue: defaults.innerRadiusOffset,\n        type: 'number',\n        controlType: 'range',\n        group: 'Base',\n        controlOptions: {\n            min: 0,\n            max: 1,\n            step: 0.01,\n        },\n    },\n    themeProperty(['svg', 'canvas', 'api']),\n    {\n        key: 'colors',\n        help: 'Defines how to compute arc/ribbon color.',\n        type: 'string | Function | string[]',\n        required: false,\n        defaultValue: defaults.colors,\n        flavors: ['svg', 'canvas', 'api'],\n        controlType: 'ordinalColors',\n        group: 'Style',\n    },\n    {\n        key: 'arcOpacity',\n        help: 'Arcs opacity.',\n        required: false,\n        defaultValue: defaults.arcOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Style',\n    },\n    {\n        key: 'arcBorderWidth',\n        help: 'Arcs border width.',\n        required: false,\n        defaultValue: defaults.arcBorderWidth,\n        type: 'number',\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'arcBorderColor',\n        help: 'Arcs border color.',\n        required: false,\n        defaultValue: defaults.arcBorderColor,\n        type: 'string | object | Function',\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    {\n        key: 'ribbonOpacity',\n        help: 'Ribbons opacity.',\n        required: false,\n        defaultValue: defaults.ribbonOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Style',\n    },\n    {\n        key: 'ribbonBorderWidth',\n        help: 'Ribbons border width.',\n        required: false,\n        defaultValue: defaults.ribbonBorderWidth,\n        type: 'number',\n        controlType: 'lineWidth',\n        group: 'Style',\n    },\n    {\n        key: 'ribbonBorderColor',\n        help: 'Ribbons border color.',\n        required: false,\n        defaultValue: defaults.ribbonBorderColor,\n        type: 'string | object | Function',\n        controlType: 'inheritedColor',\n        group: 'Style',\n    },\n    {\n        key: 'enableLabel',\n        help: 'Enable/disable labels.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.enableLabel,\n        controlType: 'switch',\n        group: 'Labels',\n    },\n    {\n        key: 'label',\n        help: 'Defines how to get label text, can be a string (used to access current arc data property) or a function which will receive the actual arc data.',\n        type: 'string | Function',\n        required: false,\n        defaultValue: defaults.label,\n        controlType: 'choices',\n        group: 'Labels',\n        controlOptions: {\n            choices: ['id', 'value', `d => \\`\\${d.id} [\\${d.value}]\\``].map(choice => ({\n                label: choice,\n                value: choice,\n            })),\n        },\n    },\n    {\n        key: 'labelOffset',\n        help: 'Label offset from arc.',\n        required: false,\n        defaultValue: defaults.labelOffset,\n        type: 'number',\n        controlType: 'range',\n        group: 'Labels',\n        controlOptions: {\n            unit: 'px',\n            min: -80,\n            max: 80,\n        },\n    },\n    {\n        key: 'labelRotation',\n        help: 'Label rotation.',\n        required: false,\n        defaultValue: defaults.labelRotation,\n        type: 'number',\n        controlType: 'angle',\n        group: 'Labels',\n        controlOptions: {\n            min: -180,\n            max: 180,\n            step: 5,\n        },\n    },\n    {\n        key: 'labelTextColor',\n        description: `\n            How to compute label text color,\n            [see dedicated documentation](self:/guides/colors).\n        `,\n        help: 'Method to compute label text color.',\n        type: 'string | object | Function',\n        required: false,\n        defaultValue: defaults.labelTextColor,\n        controlType: 'inheritedColor',\n        group: 'Labels',\n    },\n    {\n        key: 'layers',\n        group: 'Customization',\n        help: 'Defines the order of layers and add custom layers.',\n        description: `\n            You can also use this to insert extra layers\n            to the chart, the extra layer must be a function.\n            \n            The layer function which will receive the chart's\n            context & computed data and must return a valid SVG element\n            for the \\`Chord\\` component.\n\n            When using the canvas implementation, the function\n            will receive the canvas 2d context as first argument\n            and the chart's context and computed data as second.\n\n            Please make sure to use \\`context.save()\\` and\n            \\`context.restore()\\` if you make some global\n            modifications to the 2d context inside this function\n            to avoid side effects.\n        `,\n        required: false,\n        type: 'Array<string | Function>',\n        defaultValue: defaults.layers,\n    },\n    {\n        key: 'isInteractive',\n        flavors: ['svg', 'canvas'],\n        help: 'Enable/disable interactivity.',\n        type: 'boolean',\n        required: false,\n        defaultValue: defaults.isInteractive,\n        controlType: 'switch',\n        group: 'Interactivity',\n    },\n    {\n        key: 'arcHoverOpacity',\n        flavors: ['svg', 'canvas'],\n        help: 'Arc opacity when hover (0~1).',\n        required: false,\n        defaultValue: defaults.arcHoverOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Interactivity',\n    },\n    {\n        key: 'arcHoverOthersOpacity',\n        flavors: ['svg', 'canvas'],\n        help: 'Arc opacity when not hover (0~1).',\n        required: false,\n        defaultValue: defaults.arcHoverOthersOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Interactivity',\n    },\n    {\n        key: 'ribbonHoverOpacity',\n        flavors: ['svg', 'canvas'],\n        help: 'Ribbon opacity when hover (0~1).',\n        required: false,\n        defaultValue: defaults.ribbonHoverOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Interactivity',\n    },\n    {\n        key: 'ribbonHoverOthersOpacity',\n        flavors: ['svg', 'canvas'],\n        help: 'Ribbon opacity when not hover (0~1).',\n        required: false,\n        defaultValue: defaults.ribbonHoverOthersOpacity,\n        type: 'number',\n        controlType: 'opacity',\n        group: 'Interactivity',\n    },\n    {\n        key: 'onArcMouseEnter',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onMouseEnter handler for arcs.',\n        type: '(arc, event) => void',\n        required: false,\n    },\n    {\n        key: 'onArcMouseMove',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onMouseMove handler for arcs.',\n        type: '(arc, event) => void',\n        required: false,\n    },\n    {\n        key: 'onArcMouseLeave',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onMouseLeave handler for arcs.',\n        type: '(arc, event) => void',\n        required: false,\n    },\n    {\n        key: 'onArcClick',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        help: 'onClick handler for arcs.',\n        type: '(arc, event) => void',\n        required: false,\n    },\n    {\n        key: 'arcTooltip',\n        flavors: ['svg', 'canvas'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom arc tooltip component.',\n        description: `\n            A function allowing complete arc tooltip customisation,\n            it must return a valid HTML\n            element and will receive the arcs's data.\n        `,\n    },\n    {\n        key: 'onRibbonMouseEnter',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseEnter handler for ribbons.',\n        type: '(ribbon, event) => void',\n        required: false,\n    },\n    {\n        key: 'onRibbonMouseMove',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseMove handler for ribbons.',\n        type: '(ribbon, event) => void',\n        required: false,\n    },\n    {\n        key: 'onRibbonMouseLeave',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onMouseLeave handler for ribbons.',\n        type: '(ribbon, event) => void',\n        required: false,\n    },\n    {\n        key: 'onRibbonClick',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        help: 'onClick handler for ribbons.',\n        type: '(ribbon, event) => void',\n        required: false,\n    },\n    {\n        key: 'ribbonTooltip',\n        flavors: ['svg'],\n        group: 'Interactivity',\n        type: 'Function',\n        required: false,\n        help: 'Custom ribbon tooltip component.',\n        description: `\n            A function allowing complete ribbon tooltip customisation,\n            it must return a valid HTML\n            element and will receive the ribbon's data.\n        `,\n    },\n    {\n        key: 'legends',\n        flavors: ['svg', 'canvas'],\n        type: 'object[]',\n        help: `Optional chart's legends.`,\n        group: 'Legends',\n        controlType: 'array',\n        controlOptions: {\n            props: getLegendsProps(['svg', 'canvas']),\n            shouldCreate: true,\n            addLabel: 'add legend',\n            shouldRemove: true,\n            getItemTitle: (index, legend) =>\n                `legend[${index}]: ${legend.anchor}, ${legend.direction}`,\n            defaults: {\n                dataFrom: 'keys',\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemsSpacing: 0,\n                symbolSize: 20,\n                itemDirection: 'left-to-right',\n                onClick: data => {\n                    alert(JSON.stringify(data, null, '    '))\n                },\n            },\n        },\n    },\n    ...motionProperties(['svg'], defaults),\n]\n\nexport const groups = groupProperties(props)\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { BoxLegendSvgProps, LegendAnchor, LegendItemDirection } from './types'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { computeDimensions, computePositionFromAnchor, computeItemLayout } from './compute'\nimport { LegendCanvasProps } from './types'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n        if (reverse === true) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n","import { settingsMapper } from '../../../lib/settings'\n\nexport default settingsMapper({\n    label: value => {\n        if (value === `d => \\`\\${d.id} [\\${d.value}]\\``) return d => `${d.id} [${d.value}]`\n        return value\n    },\n})\n"],"names":["durationSecond","durationMinute","durationHour","durationDay","durationWeek","t0","Date","t1","newInterval","floori","offseti","count","field","interval","date","arguments","length","floor","ceil","round","d0","d1","offset","step","Math","range","start","stop","previous","push","filter","test","setTime","end","every","isFinite","d","props","key","group","help","description","required","type","enableControlForFlavors","controlType","controlOptions","unit","min","max","flavors","defaultValue","defaults","themeProperty","choices","map","choice","label","value","getLegendsProps","shouldCreate","addLabel","shouldRemove","getItemTitle","index","legend","anchor","direction","dataFrom","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","symbolSize","itemDirection","onClick","data","alert","JSON","stringify","motionProperties","groups","groupProperties","zeroPadding","top","right","bottom","left","computeDimensions","item","_padding","padding","itemCount","Array","isArray","Error","horizontalPadding","verticalPadding","width","height","spacing","computePositionFromAnchor","containerWidth","containerHeight","x","y","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","symbolSpacing","symbolByShape","circle","size","fill","opacity","borderWidth","borderColor","_jsx","r","cx","cy","strokeWidth","stroke","style","pointerEvents","diamond","transform","square","triangle","LegendSvgItem","textColor","background","symbolShape","symbolBorderWidth","symbolBorderColor","onMouseEnter","onMouseLeave","toggleSerie","effects","useState","setStyle","theme","useTheme","handleMouseEnter","useCallback","event","on","reduce","acc","effect","handleMouseLeave","isInteractive","some","handler","SymbolShape","_jsxs","itemOpacity","itemBackground","cursor","e","id","React","color","hidden","legends","symbol","textAnchor","text","itemTextColor","dominantBaseline","userSelect","LegendSvg","xStep","yStep","i","BoxLegendSvg","textAlignMapping","middle","renderLegendToCanvas","ctx","save","translate","font","fontSize","fontFamily","forEach","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","useQuantizeColorScaleLegendData","scale","overriddenDomain","domain","reverse","valueFormat","v","separator","useMemo","items","domainValue","invertExtent","extent","LegendPropShape","PropTypes","isRequired","settingsMapper"],"sourceRoot":""}