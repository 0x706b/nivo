{"version":3,"file":"cd7010ad5fca76ac762052a4528b8fc5edbbf764-3ea8d496d30ccb6ff7b9.js","mappings":"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","sources":["webpack://nivo-website/../src/props.tsx","webpack://nivo-website/../src/PartTooltip.tsx","webpack://nivo-website/../src/hooks.ts","webpack://nivo-website/../src/Part.tsx","webpack://nivo-website/../src/Parts.tsx","webpack://nivo-website/../src/PartLabel.tsx","webpack://nivo-website/../src/PartLabels.tsx","webpack://nivo-website/../src/Separator.tsx","webpack://nivo-website/../src/Separators.tsx","webpack://nivo-website/../src/FunnelAnnotations.tsx","webpack://nivo-website/../src/Funnel.tsx","webpack://nivo-website/../src/ResponsiveFunnel.tsx"],"sourcesContent":["// @ts-ignore\nimport { MotionConfigProvider } from '@nivo/core'\nimport { FunnelLayerId } from './types'\n\nexport const svgDefaultProps = {\n    layers: ['separators', 'parts', 'labels', 'annotations'] as FunnelLayerId[],\n\n    direction: 'vertical' as const,\n    interpolation: 'smooth' as const,\n    spacing: 0,\n    shapeBlending: 0.66,\n\n    colors: { scheme: 'nivo' as const },\n    fillOpacity: 1,\n\n    borderWidth: 6,\n    borderColor: { from: 'color' },\n    borderOpacity: 0.66,\n\n    enableLabel: true,\n    labelColor: { theme: 'background' },\n\n    enableBeforeSeparators: true,\n    beforeSeparatorLength: 0,\n    beforeSeparatorOffset: 0,\n    enableAfterSeparators: true,\n    afterSeparatorLength: 0,\n    afterSeparatorOffset: 0,\n\n    annotations: [],\n\n    isInteractive: true,\n    currentPartSizeExtension: 0,\n\n    role: 'img',\n\n    animate: MotionConfigProvider.defaultProps.animate,\n    motionConfig: MotionConfigProvider.defaultProps.config,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { FunnelDatum, FunnelPartWithHandlers } from './types'\n\nexport interface PartTooltipProps<D extends FunnelDatum> {\n    part: FunnelPartWithHandlers<D>\n}\n\nexport const PartTooltip = <D extends FunnelDatum>({ part }: PartTooltipProps<D>) => (\n    <BasicTooltip\n        id={part.data.label}\n        value={part.formattedValue}\n        color={part.color}\n        enableChip={true}\n    />\n)\n","import { createElement, useMemo, useState, MouseEvent } from 'react'\nimport { line, area, curveBasis, curveLinear } from 'd3-shape'\nimport { ScaleLinear, scaleLinear } from 'd3-scale'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { useTheme, useValueFormatter } from '@nivo/core'\nimport { useAnnotations } from '@nivo/annotations'\nimport { useTooltip, TooltipActionsContextData } from '@nivo/tooltip'\nimport { svgDefaultProps as defaults } from './props'\nimport { PartTooltip, PartTooltipProps } from './PartTooltip'\nimport {\n    FunnelDatum,\n    FunnelCommonProps,\n    FunnelDataProps,\n    FunnelPart,\n    SeparatorProps,\n    FunnelCustomLayerProps,\n    FunnelAreaGenerator,\n    FunnelAreaPoint,\n    FunnelBorderGenerator,\n    Position,\n} from './types'\n\nexport const computeShapeGenerators = <D extends FunnelDatum>(\n    interpolation: FunnelCommonProps<D>['interpolation'],\n    direction: FunnelCommonProps<D>['direction']\n): [FunnelAreaGenerator, FunnelBorderGenerator] => {\n    // area generator which is used to draw funnel chart parts\n    const areaGenerator: FunnelAreaGenerator = area<FunnelAreaPoint>()\n    if (direction === 'vertical') {\n        areaGenerator\n            .curve(interpolation === 'smooth' ? curveBasis : curveLinear)\n            .x0(d => d.x0)\n            .x1(d => d.x1)\n            .y(d => d.y)\n    } else {\n        areaGenerator\n            .curve(interpolation === 'smooth' ? curveBasis : curveLinear)\n            .y0(d => d.y0)\n            .y1(d => d.y1)\n            .x(d => d.x)\n    }\n\n    return [\n        areaGenerator,\n        // we're using a different line generator to draw borders, this way\n        // we we don't have borders joining each side of the parts.\n        // it's important to have an empty point when defining the points\n        // to be used along with this, otherwise we'll get a line between both sides.\n        line<Position | null>()\n            .defined(d => d !== null)\n            .x(d => d!.x)\n            .y(d => d!.y)\n            .curve(interpolation === 'smooth' ? curveBasis : curveLinear),\n    ]\n}\n\ninterface CustomBandScale {\n    (index: number): number\n    bandwidth: number\n}\n\nexport const computeScales = <D extends FunnelDatum>({\n    data,\n    direction,\n    width,\n    height,\n    spacing,\n}: {\n    data: FunnelDataProps<D>['data']\n    direction: FunnelCommonProps<D>['direction']\n    width: number\n    height: number\n    spacing: number\n}): [CustomBandScale, ScaleLinear<number, number>] => {\n    let bandScaleSize\n    let linearScaleSize\n    if (direction === 'vertical') {\n        bandScaleSize = height\n        linearScaleSize = width\n    } else {\n        bandScaleSize = width\n        linearScaleSize = height\n    }\n\n    const bandwidth = (bandScaleSize - spacing * (data.length - 1)) / data.length\n\n    // we're not using d3 band scale here to be able to get\n    // the actual paddingInner value in pixels, required to\n    // create centered separator lines between parts\n    const bandScale = (index: number) => spacing * index + bandwidth * index\n    bandScale.bandwidth = bandwidth\n\n    const allValues = data.map(d => d.value)\n\n    const linearScale = scaleLinear()\n        .domain([0, Math.max(...allValues)])\n        .range([0, linearScaleSize])\n\n    return [bandScale, linearScale]\n}\n\nexport const computeSeparators = <D extends FunnelDatum>({\n    parts,\n    direction,\n    width,\n    height,\n    spacing,\n    enableBeforeSeparators,\n    beforeSeparatorOffset,\n    enableAfterSeparators,\n    afterSeparatorOffset,\n}: {\n    parts: FunnelPart<D>[]\n    direction: FunnelCommonProps<D>['direction']\n    width: number\n    height: number\n    spacing: number\n    enableBeforeSeparators: boolean\n    beforeSeparatorOffset: number\n    enableAfterSeparators: boolean\n    afterSeparatorOffset: number\n}) => {\n    const beforeSeparators: SeparatorProps[] = []\n    const afterSeparators: SeparatorProps[] = []\n    const lastPart = parts[parts.length - 1]\n\n    if (direction === 'vertical') {\n        parts.forEach(part => {\n            const y = part.y0 - spacing / 2\n\n            if (enableBeforeSeparators) {\n                beforeSeparators.push({\n                    partId: part.data.id,\n                    x0: 0,\n                    x1: part.x0 - beforeSeparatorOffset,\n                    y0: y,\n                    y1: y,\n                })\n            }\n            if (enableAfterSeparators) {\n                afterSeparators.push({\n                    partId: part.data.id,\n                    x0: part.x1 + afterSeparatorOffset,\n                    x1: width,\n                    y0: y,\n                    y1: y,\n                })\n            }\n        })\n\n        const y = lastPart.y1\n        if (enableBeforeSeparators) {\n            beforeSeparators.push({\n                ...beforeSeparators[beforeSeparators.length - 1],\n                partId: 'none',\n                y0: y,\n                y1: y,\n            })\n        }\n        if (enableAfterSeparators) {\n            afterSeparators.push({\n                ...afterSeparators[afterSeparators.length - 1],\n                partId: 'none',\n                y0: y,\n                y1: y,\n            })\n        }\n    } else if (direction === 'horizontal') {\n        parts.forEach(part => {\n            const x = part.x0 - spacing / 2\n\n            beforeSeparators.push({\n                partId: part.data.id,\n                x0: x,\n                x1: x,\n                y0: 0,\n                y1: part.y0 - beforeSeparatorOffset,\n            })\n            afterSeparators.push({\n                partId: part.data.id,\n                x0: x,\n                x1: x,\n                y0: part.y1 + afterSeparatorOffset,\n                y1: height,\n            })\n        })\n\n        const x = lastPart.x1\n        beforeSeparators.push({\n            ...beforeSeparators[beforeSeparators.length - 1],\n            partId: 'none',\n            x0: x,\n            x1: x,\n        })\n        afterSeparators.push({\n            ...afterSeparators[afterSeparators.length - 1],\n            partId: 'none',\n            x0: x,\n            x1: x,\n        })\n    }\n\n    return [beforeSeparators, afterSeparators]\n}\n\nexport const computePartsHandlers = <D extends FunnelDatum>({\n    parts,\n    setCurrentPartId,\n    isInteractive,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n    onClick,\n    showTooltipFromEvent,\n    hideTooltip,\n    tooltip = PartTooltip,\n}: {\n    parts: FunnelPart<D>[]\n    setCurrentPartId: (id: string | number | null) => void\n    isInteractive: FunnelCommonProps<D>['isInteractive']\n    onMouseEnter?: FunnelCommonProps<D>['onMouseEnter']\n    onMouseLeave?: FunnelCommonProps<D>['onMouseLeave']\n    onMouseMove?: FunnelCommonProps<D>['onMouseMove']\n    onClick?: FunnelCommonProps<D>['onClick']\n    showTooltipFromEvent: TooltipActionsContextData['showTooltipFromEvent']\n    hideTooltip: () => void\n    tooltip?: (props: PartTooltipProps<D>) => JSX.Element\n}) => {\n    if (!isInteractive) return parts\n\n    return parts.map(part => {\n        const boundOnMouseEnter = (event: MouseEvent) => {\n            setCurrentPartId(part.data.id)\n            showTooltipFromEvent(createElement(tooltip, { part }), event)\n            onMouseEnter !== undefined && onMouseEnter(part, event)\n        }\n\n        const boundOnMouseLeave = (event: MouseEvent) => {\n            setCurrentPartId(null)\n            hideTooltip()\n            onMouseLeave !== undefined && onMouseLeave(part, event)\n        }\n\n        const boundOnMouseMove = (event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { part }), event)\n            onMouseMove !== undefined && onMouseMove(part, event)\n        }\n\n        const boundOnClick =\n            onClick !== undefined\n                ? (event: MouseEvent) => {\n                      onClick(part, event)\n                  }\n                : undefined\n\n        return {\n            ...part,\n            onMouseEnter: boundOnMouseEnter,\n            onMouseLeave: boundOnMouseLeave,\n            onMouseMove: boundOnMouseMove,\n            onClick: boundOnClick,\n        }\n    })\n}\n\n/**\n * Creates required layout to generate a funnel chart,\n * it uses almost the same parameters as the Funnel component.\n *\n * For purpose/constrains on the parameters, please have a look\n * at the component's props.\n */\nexport const useFunnel = <D extends FunnelDatum>({\n    data,\n    width,\n    height,\n    direction = defaults.direction,\n    interpolation = defaults.interpolation,\n    spacing = defaults.spacing,\n    shapeBlending: rawShapeBlending = defaults.shapeBlending,\n    valueFormat,\n    colors = defaults.colors,\n    fillOpacity = defaults.fillOpacity,\n    borderWidth = defaults.borderWidth,\n    borderColor = defaults.borderColor,\n    borderOpacity = defaults.borderOpacity,\n    labelColor = defaults.labelColor,\n    enableBeforeSeparators = defaults.enableBeforeSeparators,\n    beforeSeparatorLength = defaults.beforeSeparatorLength,\n    beforeSeparatorOffset = defaults.beforeSeparatorOffset,\n    enableAfterSeparators = defaults.enableAfterSeparators,\n    afterSeparatorLength = defaults.afterSeparatorLength,\n    afterSeparatorOffset = defaults.afterSeparatorOffset,\n    isInteractive = defaults.isInteractive,\n    currentPartSizeExtension = defaults.currentPartSizeExtension,\n    currentBorderWidth,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: {\n    data: FunnelDataProps<D>['data']\n    width: number\n    height: number\n    direction?: FunnelCommonProps<D>['direction']\n    interpolation?: FunnelCommonProps<D>['interpolation']\n    spacing?: FunnelCommonProps<D>['spacing']\n    shapeBlending?: FunnelCommonProps<D>['shapeBlending']\n    valueFormat?: FunnelCommonProps<D>['valueFormat']\n    colors?: FunnelCommonProps<D>['colors']\n    fillOpacity?: FunnelCommonProps<D>['fillOpacity']\n    borderWidth?: FunnelCommonProps<D>['borderWidth']\n    borderColor?: FunnelCommonProps<D>['borderColor']\n    borderOpacity?: FunnelCommonProps<D>['borderOpacity']\n    labelColor?: FunnelCommonProps<D>['labelColor']\n    enableBeforeSeparators?: FunnelCommonProps<D>['enableBeforeSeparators']\n    beforeSeparatorLength?: FunnelCommonProps<D>['beforeSeparatorLength']\n    beforeSeparatorOffset?: FunnelCommonProps<D>['beforeSeparatorOffset']\n    enableAfterSeparators?: FunnelCommonProps<D>['enableAfterSeparators']\n    afterSeparatorLength?: FunnelCommonProps<D>['afterSeparatorLength']\n    afterSeparatorOffset?: FunnelCommonProps<D>['afterSeparatorOffset']\n    isInteractive?: FunnelCommonProps<D>['isInteractive']\n    currentPartSizeExtension?: FunnelCommonProps<D>['currentPartSizeExtension']\n    currentBorderWidth?: FunnelCommonProps<D>['currentBorderWidth']\n    onMouseEnter?: FunnelCommonProps<D>['onMouseEnter']\n    onMouseMove?: FunnelCommonProps<D>['onMouseMove']\n    onMouseLeave?: FunnelCommonProps<D>['onMouseLeave']\n    onClick?: FunnelCommonProps<D>['onClick']\n    tooltip?: (props: PartTooltipProps<D>) => JSX.Element\n}) => {\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale<D>(colors, 'id')\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getLabelColor = useInheritedColor(labelColor, theme)\n\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const [areaGenerator, borderGenerator] = useMemo(\n        () => computeShapeGenerators<D>(interpolation, direction),\n        [interpolation, direction]\n    )\n\n    let innerWidth: number\n    let innerHeight: number\n    const paddingBefore = enableBeforeSeparators ? beforeSeparatorLength + beforeSeparatorOffset : 0\n    const paddingAfter = enableAfterSeparators ? afterSeparatorLength + afterSeparatorOffset : 0\n    if (direction === 'vertical') {\n        innerWidth = width - paddingBefore - paddingAfter\n        innerHeight = height\n    } else {\n        innerWidth = width\n        innerHeight = height - paddingBefore - paddingAfter\n    }\n\n    const [bandScale, linearScale] = useMemo(\n        () =>\n            computeScales<D>({\n                data,\n                direction,\n                width: innerWidth,\n                height: innerHeight,\n                spacing,\n            }),\n        [data, direction, innerWidth, innerHeight, spacing]\n    )\n\n    const [currentPartId, setCurrentPartId] = useState<string | number | null>(null)\n\n    const parts: FunnelPart<D>[] = useMemo(() => {\n        const enhancedParts = data.map((datum, index) => {\n            const isCurrent = datum.id === currentPartId\n\n            let partWidth\n            let partHeight\n            let y0, x0\n\n            if (direction === 'vertical') {\n                partWidth = linearScale(datum.value)\n                partHeight = bandScale.bandwidth\n                x0 = paddingBefore + (innerWidth - partWidth) * 0.5\n                y0 = bandScale(index)\n            } else {\n                partWidth = bandScale.bandwidth\n                partHeight = linearScale(datum.value)\n                x0 = bandScale(index)\n                y0 = paddingBefore + (innerHeight - partHeight) * 0.5\n            }\n\n            const x1 = x0 + partWidth\n            const x = x0 + partWidth * 0.5\n            const y1 = y0 + partHeight\n            const y = y0 + partHeight * 0.5\n\n            const part: FunnelPart<D> = {\n                data: datum,\n                width: partWidth,\n                height: partHeight,\n                color: getColor(datum),\n                fillOpacity,\n                borderWidth:\n                    isCurrent && currentBorderWidth !== undefined\n                        ? currentBorderWidth\n                        : borderWidth,\n                borderOpacity,\n                formattedValue: formatValue(datum.value),\n                isCurrent,\n                x,\n                x0,\n                x1,\n                y,\n                y0,\n                y1,\n                borderColor: '',\n                labelColor: '',\n                points: [],\n                areaPoints: [],\n                borderPoints: [],\n            }\n\n            part.borderColor = getBorderColor(part)\n            part.labelColor = getLabelColor(part)\n\n            return part\n        })\n\n        const shapeBlending = rawShapeBlending / 2\n\n        enhancedParts.forEach((part, index) => {\n            const nextPart = enhancedParts[index + 1]\n\n            if (direction === 'vertical') {\n                part.points.push({ x: part.x0, y: part.y0 })\n                part.points.push({ x: part.x1, y: part.y0 })\n                if (nextPart) {\n                    part.points.push({ x: nextPart.x1, y: part.y1 })\n                    part.points.push({ x: nextPart.x0, y: part.y1 })\n                } else {\n                    part.points.push({ x: part.points[1].x, y: part.y1 })\n                    part.points.push({ x: part.points[0].x, y: part.y1 })\n                }\n                if (part.isCurrent) {\n                    part.points[0].x -= currentPartSizeExtension\n                    part.points[1].x += currentPartSizeExtension\n                    part.points[2].x += currentPartSizeExtension\n                    part.points[3].x -= currentPartSizeExtension\n                }\n\n                part.areaPoints = [\n                    {\n                        x: 0,\n                        x0: part.points[0].x,\n                        x1: part.points[1].x,\n                        y: part.y0,\n                        y0: 0,\n                        y1: 0,\n                    },\n                ]\n                part.areaPoints.push({\n                    ...part.areaPoints[0],\n                    y: part.y0 + part.height * shapeBlending,\n                })\n                const lastAreaPoint = {\n                    x: 0,\n                    x0: part.points[3].x,\n                    x1: part.points[2].x,\n                    y: part.y1,\n                    y0: 0,\n                    y1: 0,\n                }\n                part.areaPoints.push({\n                    ...lastAreaPoint,\n                    y: part.y1 - part.height * shapeBlending,\n                })\n                part.areaPoints.push(lastAreaPoint)\n                ;[0, 1, 2, 3].map(index => {\n                    part.borderPoints.push({\n                        x: part.areaPoints[index].x0,\n                        y: part.areaPoints[index].y,\n                    })\n                })\n                part.borderPoints.push(null)\n                ;[3, 2, 1, 0].map(index => {\n                    part.borderPoints.push({\n                        x: part.areaPoints[index].x1,\n                        y: part.areaPoints[index].y,\n                    })\n                })\n            } else {\n                part.points.push({ x: part.x0, y: part.y0 })\n                if (nextPart) {\n                    part.points.push({ x: part.x1, y: nextPart.y0 })\n                    part.points.push({ x: part.x1, y: nextPart.y1 })\n                } else {\n                    part.points.push({ x: part.x1, y: part.y0 })\n                    part.points.push({ x: part.x1, y: part.y1 })\n                }\n                part.points.push({ x: part.x0, y: part.y1 })\n                if (part.isCurrent) {\n                    part.points[0].y -= currentPartSizeExtension\n                    part.points[1].y -= currentPartSizeExtension\n                    part.points[2].y += currentPartSizeExtension\n                    part.points[3].y += currentPartSizeExtension\n                }\n\n                part.areaPoints = [\n                    {\n                        x: part.x0,\n                        x0: 0,\n                        x1: 0,\n                        y: 0,\n                        y0: part.points[0].y,\n                        y1: part.points[3].y,\n                    },\n                ]\n                part.areaPoints.push({\n                    ...part.areaPoints[0],\n                    x: part.x0 + part.width * shapeBlending,\n                })\n                const lastAreaPoint = {\n                    x: part.x1,\n                    x0: 0,\n                    x1: 0,\n                    y: 0,\n                    y0: part.points[1].y,\n                    y1: part.points[2].y,\n                }\n                part.areaPoints.push({\n                    ...lastAreaPoint,\n                    x: part.x1 - part.width * shapeBlending,\n                })\n                part.areaPoints.push(lastAreaPoint)\n                ;[0, 1, 2, 3].map(index => {\n                    part.borderPoints.push({\n                        x: part.areaPoints[index].x,\n                        y: part.areaPoints[index].y0,\n                    })\n                })\n                part.borderPoints.push(null)\n                ;[3, 2, 1, 0].map(index => {\n                    part.borderPoints.push({\n                        x: part.areaPoints[index].x,\n                        y: part.areaPoints[index].y1,\n                    })\n                })\n            }\n        })\n\n        return enhancedParts\n    }, [\n        data,\n        direction,\n        linearScale,\n        bandScale,\n        innerWidth,\n        innerHeight,\n        paddingBefore,\n        paddingAfter,\n        rawShapeBlending,\n        getColor,\n        formatValue,\n        getBorderColor,\n        getLabelColor,\n        currentPartId,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const partsWithHandlers = useMemo(\n        () =>\n            computePartsHandlers<D>({\n                parts,\n                setCurrentPartId,\n                isInteractive,\n                onMouseEnter,\n                onMouseLeave,\n                onMouseMove,\n                onClick,\n                showTooltipFromEvent,\n                hideTooltip,\n                tooltip,\n            }),\n        [\n            parts,\n            setCurrentPartId,\n            isInteractive,\n            onMouseEnter,\n            onMouseLeave,\n            onMouseMove,\n            onClick,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n        ]\n    )\n\n    const [beforeSeparators, afterSeparators] = useMemo(\n        () =>\n            computeSeparators({\n                parts,\n                direction,\n                width,\n                height,\n                spacing,\n                enableBeforeSeparators,\n                beforeSeparatorOffset,\n                enableAfterSeparators,\n                afterSeparatorOffset,\n            }),\n        [\n            parts,\n            direction,\n            width,\n            height,\n            spacing,\n            enableBeforeSeparators,\n            beforeSeparatorOffset,\n            enableAfterSeparators,\n            afterSeparatorOffset,\n        ]\n    )\n\n    const customLayerProps: FunnelCustomLayerProps<D> = useMemo(\n        () => ({\n            width,\n            height,\n            parts: partsWithHandlers,\n            areaGenerator,\n            borderGenerator,\n            beforeSeparators,\n            afterSeparators,\n            setCurrentPartId,\n        }),\n        [\n            width,\n            height,\n            partsWithHandlers,\n            areaGenerator,\n            borderGenerator,\n            beforeSeparators,\n            afterSeparators,\n            setCurrentPartId,\n        ]\n    )\n\n    return {\n        parts: partsWithHandlers,\n        areaGenerator,\n        borderGenerator,\n        beforeSeparators,\n        afterSeparators,\n        setCurrentPartId,\n        currentPartId,\n        customLayerProps,\n    }\n}\n\nexport const useFunnelAnnotations = <D extends FunnelDatum>(\n    parts: FunnelPart<D>[],\n    annotations: FunnelCommonProps<D>['annotations']\n) =>\n    useAnnotations<FunnelPart<D>>({\n        data: parts,\n        annotations,\n        getPosition: part => ({\n            x: part.x,\n            y: part.y,\n        }),\n        getDimensions: (part: FunnelPart<D>) => {\n            const width = part.width\n            const height = part.height\n\n            return { size: Math.max(width, height), width, height }\n        },\n    })\n","import { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport {\n    FunnelDatum,\n    FunnelPartWithHandlers,\n    FunnelAreaGenerator,\n    FunnelBorderGenerator,\n} from './types'\n\nexport interface PartProps<D extends FunnelDatum> {\n    part: FunnelPartWithHandlers<D>\n    areaGenerator: FunnelAreaGenerator\n    borderGenerator: FunnelBorderGenerator\n}\n\nexport const Part = <D extends FunnelDatum>({\n    part,\n    areaGenerator,\n    borderGenerator,\n}: PartProps<D>) => {\n    const { animate, config: motionConfig } = useMotionConfig()\n\n    const animatedAreaPath = useAnimatedPath(areaGenerator(part.areaPoints) as string)\n    const animatedBorderPath = useAnimatedPath(borderGenerator(part.borderPoints) as string)\n    const animatedProps = useSpring({\n        areaColor: part.color,\n        borderWidth: part.borderWidth,\n        borderColor: part.borderColor,\n        config: motionConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {part.borderWidth > 0 && (\n                <animated.path\n                    d={animatedBorderPath}\n                    stroke={animatedProps.borderColor}\n                    strokeWidth={animatedProps.borderWidth}\n                    strokeOpacity={part.borderOpacity}\n                    fill=\"none\"\n                />\n            )}\n            <animated.path\n                d={animatedAreaPath}\n                fill={animatedProps.areaColor}\n                fillOpacity={part.fillOpacity}\n                onMouseEnter={part.onMouseEnter}\n                onMouseLeave={part.onMouseLeave}\n                onMouseMove={part.onMouseMove}\n                onClick={part.onClick}\n            />\n        </>\n    )\n}\n","import { Part } from './Part'\nimport {\n    FunnelPartWithHandlers,\n    FunnelAreaGenerator,\n    FunnelBorderGenerator,\n    FunnelDatum,\n} from './types'\n\ninterface PartsProps<D extends FunnelDatum> {\n    parts: FunnelPartWithHandlers<D>[]\n    areaGenerator: FunnelAreaGenerator\n    borderGenerator: FunnelBorderGenerator\n}\n\nexport const Parts = <D extends FunnelDatum>({\n    parts,\n    areaGenerator,\n    borderGenerator,\n}: PartsProps<D>) => (\n    <>\n        {parts.map(part => (\n            <Part<D>\n                key={part.data.id}\n                part={part}\n                areaGenerator={areaGenerator}\n                borderGenerator={borderGenerator}\n            />\n        ))}\n    </>\n)\n","import { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { FunnelDatum, FunnelPart } from './types'\n\ninterface PartLabelProps<D extends FunnelDatum> {\n    part: FunnelPart<D>\n}\n\nexport const PartLabel = <D extends FunnelDatum>({ part }: PartLabelProps<D>) => {\n    const theme = useTheme()\n    const { animate, config: motionConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${part.x}, ${part.y})`,\n        color: part.labelColor,\n        config: motionConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform}>\n            <animated.text\n                textAnchor=\"middle\"\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: animatedProps.color,\n                    pointerEvents: 'none',\n                }}\n            >\n                {part.formattedValue}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { PartLabel } from './PartLabel'\nimport { FunnelDatum, FunnelPart } from './types'\n\ninterface PartLabelsProps<D extends FunnelDatum> {\n    parts: FunnelPart<D>[]\n}\n\nexport const PartLabels = <D extends FunnelDatum>({ parts }: PartLabelsProps<D>) => (\n    <>\n        {parts.map(part => (\n            <PartLabel key={part.data.id} part={part} />\n        ))}\n    </>\n)\n","import { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { SeparatorProps as SeparatorType } from './types'\n\ninterface SeparatorProps {\n    separator: SeparatorType\n}\n\nexport const Separator = ({ separator }: SeparatorProps) => {\n    const theme = useTheme()\n    const { animate, config: motionConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x1: separator.x0,\n        x2: separator.x1,\n        y1: separator.y0,\n        y2: separator.y1,\n        config: motionConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.line\n            x1={animatedProps.x1}\n            x2={animatedProps.x2}\n            y1={animatedProps.y1}\n            y2={animatedProps.y2}\n            fill=\"none\"\n            {...(theme.grid.line as any)}\n        />\n    )\n}\n","import { Separator } from './Separator'\nimport { SeparatorProps as SeparatorType } from './types'\n\ninterface SeparatorsProps {\n    beforeSeparators: SeparatorType[]\n    afterSeparators: SeparatorType[]\n}\n\nexport const Separators = ({ beforeSeparators, afterSeparators }: SeparatorsProps) => (\n    <>\n        {beforeSeparators.map(separator => (\n            <Separator key={separator.partId} separator={separator} />\n        ))}\n        {afterSeparators.map(separator => (\n            <Separator key={separator.partId} separator={separator} />\n        ))}\n    </>\n)\n","import { Annotation } from '@nivo/annotations'\nimport { useFunnelAnnotations } from './hooks'\nimport { FunnelDatum, FunnelPart } from './types'\n\ninterface FunnelAnnotationsProps<D extends FunnelDatum> {\n    parts: FunnelPart<D>[]\n    annotations: any[]\n}\n\nexport const FunnelAnnotations = <D extends FunnelDatum>({\n    parts,\n    annotations,\n}: FunnelAnnotationsProps<D>) => {\n    const boundAnnotations = useFunnelAnnotations<D>(parts, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { SvgWrapper, Container, useDimensions } from '@nivo/core'\nimport { svgDefaultProps } from './props'\nimport { useFunnel } from './hooks'\nimport { Parts } from './Parts'\nimport { PartLabels } from './PartLabels'\nimport { Separators } from './Separators'\nimport { FunnelAnnotations } from './FunnelAnnotations'\nimport { FunnelDatum, FunnelLayerId, FunnelSvgProps } from './types'\n\ntype InnerFunnelProps<D extends FunnelDatum> = Omit<\n    FunnelSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerFunnel = <D extends FunnelDatum>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    direction = svgDefaultProps.direction,\n    interpolation = svgDefaultProps.interpolation,\n    spacing = svgDefaultProps.spacing,\n    shapeBlending = svgDefaultProps.shapeBlending,\n    valueFormat,\n    colors = svgDefaultProps.colors,\n    fillOpacity = svgDefaultProps.fillOpacity,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    borderOpacity = svgDefaultProps.borderOpacity,\n    enableLabel = svgDefaultProps.enableLabel,\n    labelColor = svgDefaultProps.labelColor,\n    enableBeforeSeparators = svgDefaultProps.enableBeforeSeparators,\n    beforeSeparatorLength = svgDefaultProps.beforeSeparatorLength,\n    beforeSeparatorOffset = svgDefaultProps.beforeSeparatorOffset,\n    enableAfterSeparators = svgDefaultProps.enableAfterSeparators,\n    afterSeparatorLength = svgDefaultProps.afterSeparatorLength,\n    afterSeparatorOffset = svgDefaultProps.afterSeparatorOffset,\n    layers = svgDefaultProps.layers,\n    annotations = svgDefaultProps.annotations,\n    isInteractive = svgDefaultProps.isInteractive,\n    currentPartSizeExtension = svgDefaultProps.currentPartSizeExtension,\n    currentBorderWidth,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerFunnelProps<D>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        areaGenerator,\n        borderGenerator,\n        parts,\n        beforeSeparators,\n        afterSeparators,\n        customLayerProps,\n    } = useFunnel<D>({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        direction,\n        interpolation,\n        spacing,\n        shapeBlending,\n        valueFormat,\n        colors,\n        fillOpacity,\n        borderWidth,\n        borderColor,\n        borderOpacity,\n        labelColor,\n        enableBeforeSeparators,\n        beforeSeparatorLength,\n        beforeSeparatorOffset,\n        enableAfterSeparators,\n        afterSeparatorLength,\n        afterSeparatorOffset,\n        isInteractive,\n        currentPartSizeExtension,\n        currentBorderWidth,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    })\n\n    const layerById: Record<FunnelLayerId, ReactNode> = {\n        separators: null,\n        parts: null,\n        annotations: null,\n        labels: null,\n    }\n\n    if (layers.includes('separators')) {\n        layerById.separators = (\n            <Separators\n                key=\"separators\"\n                beforeSeparators={beforeSeparators}\n                afterSeparators={afterSeparators}\n            />\n        )\n    }\n\n    if (layers.includes('parts')) {\n        layerById.parts = (\n            <Parts<D>\n                key=\"parts\"\n                parts={parts}\n                areaGenerator={areaGenerator}\n                borderGenerator={borderGenerator}\n            />\n        )\n    }\n\n    if (layers?.includes('annotations')) {\n        layerById.annotations = (\n            <FunnelAnnotations<D> key=\"annotations\" parts={parts} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('labels') && enableLabel) {\n        layerById.labels = <PartLabels<D> key=\"labels\" parts={parts} />\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Funnel = <D extends FunnelDatum = FunnelDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: FunnelSvgProps<D>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerFunnel<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { FunnelDatum, FunnelSvgProps } from './types'\nimport { Funnel } from './Funnel'\n\nexport const ResponsiveFunnel = <D extends FunnelDatum = FunnelDatum>(\n    props: Omit<FunnelSvgProps<D>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Funnel<D> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["svgDefaultProps","layers","direction","interpolation","spacing","shapeBlending","colors","scheme","fillOpacity","borderWidth","borderColor","from","borderOpacity","enableLabel","labelColor","theme","enableBeforeSeparators","beforeSeparatorLength","beforeSeparatorOffset","enableAfterSeparators","afterSeparatorLength","afterSeparatorOffset","annotations","isInteractive","currentPartSizeExtension","role","animate","MotionConfigProvider","motionConfig","PartTooltip","part","id","value","color","enableChip","useFunnel","data","width","height","defaults","rawShapeBlending","valueFormat","currentBorderWidth","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","useTheme","getColor","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","formatValue","useValueFormatter","useMemo","areaGenerator","area","d","computeShapeGenerators","borderGenerator","paddingBefore","paddingAfter","innerWidth","innerHeight","bandScaleSize","linearScaleSize","bandwidth","bandScale","index","allValues","scaleLinear","Math","computeScales","linearScale","useState","currentPartId","setCurrentPartId","parts","enhancedParts","isCurrent","datum","partWidth","partHeight","x0","y0","x1","x","y1","y","formattedValue","points","areaPoints","borderPoints","nextPart","lastAreaPoint","useTooltip","showTooltipFromEvent","hideTooltip","partsWithHandlers","event","createElement","computePartsHandlers","beforeSeparators","afterSeparators","lastPart","partId","computeSeparators","customLayerProps","Part","useMotionConfig","animatedAreaPath","useAnimatedPath","animatedBorderPath","animatedProps","useSpring","areaColor","config","immediate","stroke","strokeWidth","strokeOpacity","fill","Parts","PartLabel","transform","textAnchor","dominantBaseline","style","pointerEvents","PartLabels","Separator","separator","x2","y2","Separators","FunnelAnnotations","boundAnnotations","useAnnotations","getPosition","getDimensions","size","useFunnelAnnotations","_jsx","InnerFunnel","partialMargin","margin","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","outerWidth","outerHeight","layerById","separators","labels","layer","Funnel","renderWrapper","otherProps","ResponsiveFunnel"],"sourceRoot":""}